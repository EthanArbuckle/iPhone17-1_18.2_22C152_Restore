uint64_t sub_1000B1E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  v3 = type metadata accessor for UUID();
  v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  result = swift_beginAccess();
  v9 = *v7;
  if (*(void *)(*v7 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = sub_10004865C(a1);
    if (v11)
    {
      v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_retain();
      swift_bridgeObjectRelease();
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      v13 = type metadata accessor for Logger();
      sub_10000B150(v13, (uint64_t)qword_10018D128);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = swift_slowAlloc();
        v22 = v12;
        v17 = (uint8_t *)v16;
        v21 = swift_slowAlloc();
        v24[0] = v21;
        *(_DWORD *)v17 = 136315138;
        v20 = v17 + 4;
        sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        v18 = dispatch thunk of CustomStringConvertible.description.getter();
        v23 = sub_100047F98(v18, v19, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Dismissing remote alert for nearby sharing interaction with ID: %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }

      dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)();
      swift_beginAccess();
      sub_100048FE0(a1);
      swift_endAccess();
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000B21E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B2280, v6, v5);
}

uint64_t sub_1000B2280()
{
  swift_release();
  sub_100058548();
  v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B22E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B237C, v7, v6);
}

uint64_t sub_1000B237C()
{
  swift_release();
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  sub_10010E3FC(v1);
  swift_release();
  v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000B2740(uint64_t a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100183D40);
  __chkstk_darwin(v9 - 8);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t *)(v1
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
  uint64_t result = swift_beginAccess();
  uint64_t v18 = *v16;
  if (*(void *)(*v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_10004865C(a1);
    if (v20)
    {
      uint64_t v38 = v6;
      v39 = v5;
      uint64_t v37 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10000B150(v21, (uint64_t)qword_10018D128);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
      v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        v42[0] = v35;
        uint64_t v36 = a1;
        *(_DWORD *)v24 = 136315138;
        v33[1] = v24 + 4;
        v34 = v24;
        sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v41 = sub_100047F98(v25, v26, v42);
        a1 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ending activity for nearby sharing interaction with ID: %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }

      uint64_t v27 = sub_10000AA4C(&qword_100183D48);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 1, 1, v27);
      static ActivityUIDismissalPolicy.immediate.getter();
      uint64_t v28 = v37;
      dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v38);
      sub_10000F394((uint64_t)v11, &qword_100183D40);
      uint64_t v29 = type metadata accessor for TaskPriority();
      uint64_t v30 = (uint64_t)v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v39, 1, 1, v29);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v31 = static MainActor.shared.getter();
      v32 = (void *)swift_allocObject();
      v32[2] = v31;
      v32[3] = &protocol witness table for MainActor;
      v32[4] = v28;
      sub_10010C15C(v30, (uint64_t)&unk_100183D90, (uint64_t)v32);
      swift_release();
      swift_beginAccess();
      sub_100048FEC(a1);
      swift_endAccess();
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000B2CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B2D58, v6, v5);
}

uint64_t sub_1000B2D58()
{
  swift_release();
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10010E67C();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000B2E10()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100183D40);
  __chkstk_darwin(v9 - 8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B150(v12, (uint64_t)qword_10018D128);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ending failure activity", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity;
  uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity);
  if (v17)
  {
    uint64_t v18 = sub_10000AA4C(&qword_100183D48);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
    swift_retain();
    static ActivityUIDismissalPolicy.immediate.getter();
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10000F394((uint64_t)v11, &qword_100183D40);
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v4, 1, 1, v19);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v20 = static MainActor.shared.getter();
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = v20;
    v21[3] = &protocol witness table for MainActor;
    v21[4] = v17;
    sub_10010C15C((uint64_t)v4, (uint64_t)&unk_100183D58, (uint64_t)v21);
    swift_release();
    *(void *)(v1 + v16) = 0;
    swift_release();
    swift_release();
  }
  else
  {
    os_log_t v26 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v22, "No current failure activity found", v23, 2u);
      swift_slowDealloc();
    }
    os_log_t v24 = v26;
  }
}

void sub_1000B3208()
{
  if (!qword_100183AD8)
  {
    sub_10000B100(&qword_100183AE0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100183AD8);
    }
  }
}

uint64_t sub_1000B3264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000BE354, v6, v5);
}

uint64_t sub_1000B32FC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NearbySharingInteractionCoordinator(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void *sub_1000B333C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v0 = sub_1000A58E4(v4, v4);
  uint64_t v1 = sub_1000A3148(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1000A2BB4((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000B34A8(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v21 = a3;
  os_log_type_t v22 = a4;
  uint64_t v6 = sub_1000B333C();
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v8 = self;
    swift_bridgeObjectRetain();
    uint64_t v9 = v6 + 5;
    do
    {
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = [v8 normalizedHandleWithDestinationID:v10, v21, v22];
      swift_bridgeObjectRelease();

      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += 3;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
LABEL_11:
      uint64_t v13 = 4;
      while (1)
      {
        uint64_t v14 = v13 - 4;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v16 = v13 - 3;
          if (__OFADD__(v14, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          id v15 = (id)_swiftEmptyArrayStorage[v13];
          uint64_t v16 = v13 - 3;
          if (__OFADD__(v14, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        id v17 = v15;
        sub_1000B9F44(a1, (uint64_t)v17, a2, v21, v22);
        char v19 = v18;

        if ((v19 & 1) == 0)
        {
          ++v13;
          if (v16 != v12) {
            continue;
          }
        }
        goto LABEL_23;
      }
    }
  }
  char v19 = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_1000B36BC(void *a1)
{
  if ([a1 state])
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_10018D128);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_23;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Not permitting auto-join of Boop to SharePlay as the conversation is already joined", v5, 2u);
LABEL_22:
    swift_slowDealloc();
LABEL_23:

    return 0;
  }
  id v6 = [a1 remoteMembers];
  sub_10001FB40(0, &qword_1001804F0);
  sub_1000B5220(&qword_1001804F8, &qword_1001804F0);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v6) = sub_1000B34A8(v7, &qword_1001804F0, (uint64_t)TUConversationMember_ptr, &qword_1001804F8);
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_10018D128);
    id v12 = a1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      char v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      id v20 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v19 = v12;

      id v17 = "Ignoring conversation which does not match any of the current nearby contacts: %@";
      goto LABEL_21;
    }
LABEL_31:

    return 0;
  }
  id v8 = [a1 activeRemoteParticipants];
  sub_10001FB40(0, &qword_100183CE0);
  sub_1000B5220(&qword_100183CE8, &qword_100183CE0);
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  char v10 = sub_1000B34A8(v9, &qword_100183CE0, (uint64_t)TUConversationParticipant_ptr, &qword_100183CE8);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B150(v21, (uint64_t)qword_10018D128);
    id v12 = a1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      id v23 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v12;

      id v17 = "Ignoring conversation where the nearby contact is not an active participant: %@";
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  if ([a1 avMode])
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    id v12 = a1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      id v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      id v16 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v12;

      id v17 = "Not permitting auto-join of Boop to SharePlay as the conversation is no longer AVLess: %@";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v3, v13, v17, v14, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  id v25 = [a1 provider];
  unsigned __int8 v26 = [v25 isDefaultProvider];

  if ((v26 & 1) == 0)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000B150(v27, (uint64_t)qword_10018D128);
    id v12 = a1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      id v29 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v12;

      id v17 = "Not permitting auto-join of Boop to SharePlay as the conversation is not from the default provider: %@";
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  return 1;
}

void sub_1000B3D90(unint64_t a1)
{
  if (qword_10017F7A8 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    os_log_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_100047F98(v6, v8, (uint64_t *)&v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updating using filtered conversation invitations: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_7;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_22;
  }
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_30;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  id v10 = *(id *)(a1 + 32);
LABEL_10:
  uint64_t v11 = v10;
  if ((sub_1000B36BC(v10) & 1) == 0)
  {

    if (v9 == 1) {
      goto LABEL_22;
    }
    uint64_t v18 = 5;
    while (1)
    {
      unint64_t v19 = v18 - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v19 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_30:
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_10;
        }
        id v20 = *(id *)(a1 + 8 * v18);
      }
      uint64_t v11 = v20;
      uint64_t v21 = v18 - 3;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_26;
      }
      if (sub_1000B36BC(v20)) {
        break;
      }

      ++v18;
      if (v21 == v9) {
        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease();
  id v12 = v11;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    *(_DWORD *)id v15 = 138412290;
    os_log_t v24 = v12;
    id v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Joining SharePlay conversation for nearby sharing interaction: %@", v15, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v13 = v12;
  }

  id v22 = [objc_allocWithZone((Class)TUJoinConversationRequest) initWithConversation:v12];
  [v22 setAvMode:0];
  id v23 = [self sharedInstance];
  [v23 launchAppForJoinRequest:v22];
}

uint64_t *sub_1000B432C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_10000AA4C((uint64_t *)&unk_100185A70);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_1000B44CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_1000B45CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1000B471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1000B48D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1000B4A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1000B4BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4BE8);
}

uint64_t sub_1000B4BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000B4CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4CF8);
}

uint64_t sub_1000B4CF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000AA4C((uint64_t *)&unk_100185A70);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for NearbySharingInteractionAttributes(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100183C08);
}

void sub_1000B4E20()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000B4EE8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000B4EE8()
{
  if (!qword_100183C18)
  {
    type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100183C18);
    }
  }
}

uint64_t sub_1000B4F40()
{
  return sub_1000B4FD0(&qword_100183C48, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionAttributes);
}

uint64_t sub_1000B4F88()
{
  return sub_1000B4FD0(&qword_100183C50, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionAttributes);
}

uint64_t sub_1000B4FD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B501C()
{
  unint64_t result = qword_100183C58;
  if (!qword_100183C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C58);
  }
  return result;
}

unint64_t sub_1000B5074()
{
  unint64_t result = qword_100183C60;
  if (!qword_100183C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C60);
  }
  return result;
}

unint64_t sub_1000B50CC()
{
  unint64_t result = qword_100183C68;
  if (!qword_100183C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C68);
  }
  return result;
}

unint64_t sub_1000B5124()
{
  unint64_t result = qword_100183C70;
  if (!qword_100183C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C70);
  }
  return result;
}

unint64_t sub_1000B5178()
{
  unint64_t result = qword_100183C80;
  if (!qword_100183C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C80);
  }
  return result;
}

unint64_t sub_1000B51CC()
{
  unint64_t result = qword_100183C90;
  if (!qword_100183C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183C90);
  }
  return result;
}

uint64_t sub_1000B5220(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001FB40(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B5264(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_1000B52D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000B5430(a1, a2, a3, a4, (uint64_t *)&unk_100184030, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.ItemPromise, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.ItemPromise);
}

char *sub_1000B52FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AA4C((uint64_t *)&unk_1001805C0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000B9C4C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B540C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000B5430(a1, a2, a3, a4, &qword_100184028, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_1000B5430(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000AA4C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000B9AF0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

char *sub_1000B56B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AA4C((uint64_t *)&unk_1001800B0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000B9D58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000B57C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AA4C(&qword_100183CF0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000B9E4C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B58E4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  id v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  id v3 = sub_1000B57C0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[3 * v9 + 4];
  if (a1 + 32 < v10 + 24 * v8 && v10 < a1 + 32 + 24 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B5A44(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  int64_t v4 = *(void **)v1;
  int64_t v5 = *(void *)(*(void *)v1 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    int64_t v4 = sub_1000B57C0(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_1000B94D0((uint64_t)v57, (uint64_t)&v4[3 * v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, result);
    uint64_t v17 = v15 + result;
    if (v16)
    {
      __break(1u);
      goto LABEL_66;
    }
    v4[2] = v17;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_100031848();
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = v4[2];
  uint64_t v54 = v57[0];
  uint64_t v14 = v58;
  uint64_t v53 = v57[1];
  uint64_t v13 = v59;
  if (!v60)
  {
LABEL_66:
    int64_t v48 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_83;
    }
    int64_t v52 = (unint64_t)(v14 + 64) >> 6;
    if (v48 >= v52) {
      goto LABEL_13;
    }
    unint64_t v49 = *(void *)(v53 + 8 * v48);
    uint64_t v50 = v13 + 1;
    if (!v49)
    {
      uint64_t v50 = v13 + 2;
      if (v13 + 2 >= v52) {
        goto LABEL_13;
      }
      unint64_t v49 = *(void *)(v53 + 8 * v50);
      if (!v49)
      {
        uint64_t v50 = v13 + 3;
        if (v13 + 3 >= v52) {
          goto LABEL_13;
        }
        unint64_t v49 = *(void *)(v53 + 8 * v50);
        if (!v49)
        {
          uint64_t v50 = v13 + 4;
          if (v13 + 4 >= v52) {
            goto LABEL_13;
          }
          unint64_t v49 = *(void *)(v53 + 8 * v50);
          if (!v49)
          {
            uint64_t v50 = v13 + 5;
            if (v13 + 5 >= v52) {
              goto LABEL_13;
            }
            unint64_t v49 = *(void *)(v53 + 8 * v50);
            if (!v49)
            {
              uint64_t v51 = v13 + 6;
              do
              {
                if (v52 == v51) {
                  goto LABEL_13;
                }
                unint64_t v49 = *(void *)(v53 + 8 * v51++);
              }
              while (!v49);
              uint64_t v50 = v51 - 1;
            }
          }
        }
      }
    }
    unint64_t v18 = (v49 - 1) & v49;
    unint64_t v19 = __clz(__rbit64(v49)) + (v50 << 6);
    uint64_t v56 = v50;
    goto LABEL_18;
  }
  unint64_t v18 = (v60 - 1) & v60;
  uint64_t v56 = v59;
  unint64_t v19 = __clz(__rbit64(v60)) | (v59 << 6);
  int64_t v52 = (unint64_t)(v58 + 64) >> 6;
LABEL_18:
  uint64_t v20 = *(void *)(v54 + 48) + 24 * v19;
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  int v23 = *(unsigned __int8 *)(v20 + 16);
  int v24 = *(unsigned __int8 *)(v20 + 17);
  int v25 = *(unsigned __int8 *)(v20 + 18);
  int v26 = *(unsigned __int8 *)(v20 + 19);
  if (v24) {
    int v27 = 256;
  }
  else {
    int v27 = 0;
  }
  int v28 = v27 | v23;
  if (v25) {
    int v29 = 0x10000;
  }
  else {
    int v29 = 0;
  }
  if (v26) {
    int v30 = 0x1000000;
  }
  else {
    int v30 = 0;
  }
  unsigned int v31 = v28 | v29 | v30;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v35 = v4[3];
    int64_t v55 = v35 >> 1;
    if ((uint64_t)(v35 >> 1) < v2 + 1)
    {
      uint64_t result = (uint64_t)sub_1000B57C0((void *)(v35 > 1), v2 + 1, 1, v4);
      int64_t v4 = (void *)result;
      int64_t v55 = *(void *)(result + 24) >> 1;
    }
    if (v2 < v55) {
      break;
    }
LABEL_38:
    v4[2] = v2;
  }
  int v36 = (v31 >> 8) & 1;
  LOBYTE(v37) = v31 & 1;
  int v38 = HIWORD(v31) & 1;
  int v39 = HIBYTE(v31) & 1;
  while (1)
  {
    uint64_t v40 = (uint64_t)&v4[3 * v2 + 4];
    *(void *)uint64_t v40 = v21;
    *(void *)(v40 + 8) = v22;
    *(unsigned char *)(v40 + 16) = v37 & 1;
    *(unsigned char *)(v40 + 17) = v36 & 1;
    *(unsigned char *)(v40 + 18) = v38 & 1;
    *(unsigned char *)(v40 + 19) = v39 & 1;
    ++v2;
    if (v18)
    {
      unint64_t v41 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v42 = v41 | (v56 << 6);
      goto LABEL_61;
    }
    int64_t v43 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      break;
    }
    if (v43 >= v52) {
      goto LABEL_63;
    }
    unint64_t v44 = *(void *)(v53 + 8 * v43);
    uint64_t v45 = v56 + 1;
    if (!v44)
    {
      uint64_t v45 = v56 + 2;
      if (v56 + 2 >= v52) {
        goto LABEL_63;
      }
      unint64_t v44 = *(void *)(v53 + 8 * v45);
      if (!v44)
      {
        uint64_t v45 = v56 + 3;
        if (v56 + 3 >= v52) {
          goto LABEL_63;
        }
        unint64_t v44 = *(void *)(v53 + 8 * v45);
        if (!v44)
        {
          uint64_t v45 = v56 + 4;
          if (v56 + 4 >= v52) {
            goto LABEL_63;
          }
          unint64_t v44 = *(void *)(v53 + 8 * v45);
          if (!v44)
          {
            uint64_t v45 = v56 + 5;
            if (v56 + 5 >= v52) {
              goto LABEL_63;
            }
            unint64_t v44 = *(void *)(v53 + 8 * v45);
            if (!v44)
            {
              uint64_t v46 = v56 + 6;
              while (v52 != v46)
              {
                unint64_t v44 = *(void *)(v53 + 8 * v46++);
                if (v44)
                {
                  uint64_t v45 = v46 - 1;
                  goto LABEL_60;
                }
              }
LABEL_63:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_60:
    unint64_t v18 = (v44 - 1) & v44;
    unint64_t v42 = __clz(__rbit64(v44)) + (v45 << 6);
    uint64_t v56 = v45;
LABEL_61:
    uint64_t v47 = *(void *)(v54 + 48) + 24 * v42;
    uint64_t v21 = *(void *)v47;
    uint64_t v22 = *(void *)(v47 + 8);
    int v37 = *(unsigned __int8 *)(v47 + 16);
    int v36 = *(unsigned __int8 *)(v47 + 17);
    int v38 = *(unsigned __int8 *)(v47 + 18);
    LOBYTE(v39) = *(unsigned char *)(v47 + 19);
    if (v2 >= v55)
    {
      if (*(unsigned char *)(v47 + 19)) {
        int v32 = 0x1000000;
      }
      else {
        int v32 = 0;
      }
      if (v38) {
        int v33 = 0x10000;
      }
      else {
        int v33 = 0;
      }
      if (v36) {
        int v34 = 256;
      }
      else {
        int v34 = 0;
      }
      unsigned int v31 = v34 | v37 | v33 | v32;
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_83:
  __break(1u);
  return result;
}

uint64_t sub_1000B5EEC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AA4C((uint64_t *)&unk_100181700);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000B6204(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000AA4C((uint64_t *)&unk_100183FA0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    int v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000B651C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000AA4C((uint64_t *)&unk_100183D10);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1000B6940(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000AA4C(&qword_100181530);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1000B6D64(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000AA4C(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  unint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  unint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    int64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  int64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_1000B718C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100048730(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000498CC();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000B5EEC(v15, a4 & 1);
  unint64_t v21 = sub_100048730(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B72FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100048730(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100049A84();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000B6204(v15, a4 & 1);
  unint64_t v21 = sub_100048730(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void sub_1000B746C(uint64_t a1, uint64_t a2, char a3)
{
  int64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10004865C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100049ED4();
    goto LABEL_7;
  }
  sub_1000B651C(v17, a3 & 1);
  unint64_t v22 = sub_10004865C(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000B77D0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1000B7614(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  int64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_10004865C(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4(v19);
    goto LABEL_7;
  }
  sub_1000B6D64(v19, a3 & 1, v27);
  unint64_t v25 = sub_10004865C(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  unint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1000B77D0(v16, (uint64_t)v13, v28, v22);
}

uint64_t sub_1000B77D0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t *sub_1000B7888(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            unint64_t v22 = sub_1000B8260((void *)((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0)), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            unint64_t v22 = sub_1000B8260((unint64_t *)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          unint64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return (unint64_t *)v2;
      }
    }
  }
  return (unint64_t *)v2;
}

void *sub_1000B7B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v51 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 64;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 64);
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 64;
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v57 = v6;
  uint64_t v64 = v14;
  uint64_t v65 = 0;
  unint64_t v66 = v18;
  int64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v59 = v8 + 16;
  unint64_t v60 = (char *)(a2 + 56);
  char v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v58 = v8;
  uint64_t v54 = a2;
  uint64_t v52 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v57;
  v25(v57, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v56)(v26, v27, 1, v7);
    uint64_t v62 = a1;
    uint64_t v63 = v15;
    uint64_t v64 = v14;
    uint64_t v65 = v23;
    unint64_t v66 = v21;
    if ((*v55)(v26, 1, v7) == 1)
    {
      sub_100031848();
      sub_10000F394(v26, &qword_100180580);
      return (void *)v54;
    }
    (*v53)(v61, v26, v7);
    uint64_t v31 = v54;
    sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    uint64_t v40 = *v19;
    uint64_t v8 = v58;
LABEL_35:
    v40(v61, v7);
    int64_t v20 = v65;
    unint64_t v18 = v66;
    a1 = v62;
    uint64_t v15 = v63;
    uint64_t v14 = v64;
    uint64_t v52 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v52 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v57;
  }
  uint64_t v52 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v58 + 72);
  BOOL v38 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  while (1)
  {
    v38(v10, *(void *)(v35 + 48) + v37 * v34, v7);
    sub_1000B4FD0(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *v19;
    (*v19)(v10, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v58;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v61, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v44);
    sub_1000B848C((unint64_t *)((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v62);
    uint64_t v46 = v45;
    swift_release();
    sub_100031848();
    return (void *)v46;
  }
  else
  {
    int v48 = (void *)swift_slowAlloc();
    memcpy(v48, v60, v44);
    sub_1000B848C((unint64_t *)v48, v43, v35, v34, &v62);
    uint64_t v50 = v49;
    swift_release();
    sub_100031848();
    swift_slowDealloc();
    return (void *)v50;
  }
}

unint64_t *sub_1000B8260(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v30 = result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return (unint64_t *)sub_1000B8A10(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    int64_t v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return (unint64_t *)&_swiftEmptySetSingleton;
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000B848C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  Swift::Int v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v54 = a1;
  int64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  uint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12, v16);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          sub_10000F394((uint64_t)v11, &qword_100180580);
          uint64_t v51 = v64;
          swift_retain();
          sub_1000B8CA8(v54, v52, v53, v51);
          return;
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        unint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        v25(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      char v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v14, *(void *)(v64 + 48) + v41 * v39, v12);
        sub_1000B4FD0(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v25 = *v24;
        (*v24)(v14, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      v25(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v53 != 1) {
      continue;
    }
    break;
  }
}

uint64_t sub_1000B8A10(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000AA4C(&qword_100183FB0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    int64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *int64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000B8CA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000AA4C(&qword_1001836E0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_1000B9034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(sub_10000AA4C(&qword_100183CF8) + 48);
  uint64_t v5 = *(int *)(sub_10000AA4C(&qword_100183D00) + 48);
  id v8 = *(id *)(a1 + v4);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  *(void *)(a2 + v5) = v8;

  return v8;
}

uint64_t sub_1000B90E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100183D08);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v48 = v17;
  uint64_t v49 = 0;
  uint64_t v50 = v20 & v18;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  v42[2] = a1;
  swift_bridgeObjectRetain();
  v42[1] = a3;
  swift_retain();
  sub_1000B96F8((uint64_t)v15);
  uint64_t v21 = sub_10000AA4C(&qword_100183D00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100031848();
    return swift_release();
  }
  int64_t v45 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  uint64_t v53 = v44 + 32;
  char v43 = (void (**)(char *, uint64_t))(v44 + 8);
  while (1)
  {
    uint64_t v26 = *(int *)(v21 + 48);
    uint64_t v27 = v10;
    v45(v12, v15, v10);
    unint64_t v28 = *(void **)&v15[v26];
    BOOL v29 = *(void **)a5;
    unint64_t v31 = sub_10004865C((uint64_t)v12);
    uint64_t v32 = v29[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      break;
    }
    char v35 = v30;
    if (v29[3] >= v34)
    {
      if (a4)
      {
        uint64_t v38 = *(void **)a5;
        if (v30) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100049ED4();
        uint64_t v38 = *(void **)a5;
        if (v35) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_1000B651C(v34, a4 & 1);
      unint64_t v36 = sub_10004865C((uint64_t)v12);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_22;
      }
      unint64_t v31 = v36;
      uint64_t v38 = *(void **)a5;
      if (v35)
      {
LABEL_7:
        uint64_t v23 = 8 * v31;
        id v24 = *(id *)(v38[7] + 8 * v31);

        uint64_t v10 = v27;
        (*v43)(v12, v27);
        uint64_t v25 = *(void *)(*(void *)a5 + 56);

        *(void *)(v25 + v23) = v24;
        goto LABEL_8;
      }
    }
    v38[(v31 >> 6) + 8] |= 1 << v31;
    uint64_t v10 = v27;
    v45((char *)(v38[6] + *(void *)(v44 + 72) * v31), v12, v27);
    *(void *)(v38[7] + 8 * v31) = v28;
    uint64_t v39 = v38[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_21;
    }
    v38[2] = v41;
LABEL_8:
    sub_1000B96F8((uint64_t)v15);
    uint64_t v21 = sub_10000AA4C(&qword_100183D00);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B94D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v26 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    char v23 = *(unsigned char *)(v20 + 16);
    char v24 = *(unsigned char *)(v20 + 17);
    char v25 = *(unsigned char *)(v20 + 18);
    LOBYTE(v20) = *(unsigned char *)(v20 + 19);
    *(void *)uint64_t v11 = v22;
    *(void *)(v11 + 8) = v21;
    *(unsigned char *)(v11 + 16) = v23;
    *(unsigned char *)(v11 + 17) = v24;
    *(unsigned char *)(v11 + 18) = v25;
    *(unsigned char *)(v11 + 19) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v26;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_1000B96F8(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000AA4C(&qword_100183CF8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100183D20);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  uint64_t v38 = v6;
  uint64_t v41 = v17;
  if (v19)
  {
    uint64_t v39 = v15;
    BOOL v40 = v9;
    uint64_t v20 = a1;
    uint64_t v21 = (v19 - 1) & v19;
    unint64_t v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v14 + 48);
    uint64_t v24 = v14;
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v13, v23 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v25);
    uint64_t v26 = *(void **)(*(void *)(v24 + 56) + 8 * v22);
    *(void *)&v13[*(int *)(v3 + 48)] = v26;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    id v27 = v26;
    a1 = v20;
    uint64_t v15 = v39;
    unint64_t v9 = v40;
    goto LABEL_23;
  }
  int64_t v28 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return;
  }
  int64_t v29 = (unint64_t)(v17 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v15 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v39 = v15;
      BOOL v40 = v9;
      uint64_t v20 = a1;
      uint64_t v21 = (v30 - 1) & v30;
      unint64_t v22 = __clz(__rbit64(v30)) + (v28 << 6);
      int64_t v18 = v28;
      goto LABEL_3;
    }
    int64_t v31 = v16 + 2;
    int64_t v18 = v16 + 1;
    if (v16 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v15 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }
      int64_t v18 = v16 + 2;
      if (v16 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v15 + 8 * (v16 + 3));
        if (v30)
        {
          int64_t v28 = v16 + 3;
          goto LABEL_7;
        }
        int64_t v31 = v16 + 4;
        int64_t v18 = v16 + 3;
        if (v16 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v15 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v16 + 5;
          int64_t v18 = v16 + 4;
          if (v16 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v15 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v18 = v29 - 1;
            int64_t v32 = v16 + 6;
            while (v29 != v32)
            {
              unint64_t v30 = *(void *)(v15 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v24 = v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v13, 1, 1, v3, v11);
  uint64_t v21 = 0;
LABEL_23:
  *uint64_t v1 = v24;
  v1[1] = v15;
  v1[2] = v41;
  v1[3] = v18;
  v1[4] = v21;
  BOOL v33 = (void (*)(uint64_t))v1[5];
  sub_10000F2CC((uint64_t)v13, (uint64_t)v9, &qword_100183D20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    uint64_t v34 = sub_10000AA4C(&qword_100183D00);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a1, 1, 1, v34);
  }
  else
  {
    uint64_t v35 = (uint64_t)v9;
    uint64_t v36 = (uint64_t)v38;
    sub_10000F2CC(v35, (uint64_t)v38, &qword_100183CF8);
    v33(v36);
    sub_10000F394(v36, &qword_100183CF8);
    uint64_t v37 = sub_10000AA4C(&qword_100183D00);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a1, 0, 1, v37);
  }
}

uint64_t sub_1000B9AF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9C4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000AA4C(&qword_1001805B8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9D58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9E4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000B9F44(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001FB40(0, a3);
    sub_1000B5220(a5, a3);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v28;
    uint64_t v26 = v29;
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    unint64_t v10 = v32;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
  }
  uint64_t v23 = v8;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  while (1)
  {
    uint64_t v19 = v9;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_31;
    }
    sub_10001FB40(0, a3);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = v33;
    swift_unknownObjectRelease();
    if (!v33) {
      goto LABEL_31;
    }
LABEL_10:
    [v16 handle:v23];
    unsigned int v18 = [v17 isEquivalentToHandle:a2];

    if (v18) {
      goto LABEL_31;
    }
  }
  if (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v9 << 6);
LABEL_9:
    id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    if (!v16) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  int64_t v20 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v20 >= v25) {
      goto LABEL_31;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v19 + 2;
      if (v19 + 2 >= v25) {
        goto LABEL_31;
      }
      unint64_t v21 = *(void *)(v26 + 8 * v9);
      if (!v21)
      {
        uint64_t v9 = v19 + 3;
        if (v19 + 3 >= v25) {
          goto LABEL_31;
        }
        unint64_t v21 = *(void *)(v26 + 8 * v9);
        if (!v21)
        {
          uint64_t v9 = v19 + 4;
          if (v19 + 4 >= v25) {
            goto LABEL_31;
          }
          unint64_t v21 = *(void *)(v26 + 8 * v9);
          if (!v21)
          {
            uint64_t v9 = v19 + 5;
            if (v19 + 5 >= v25) {
              goto LABEL_31;
            }
            unint64_t v21 = *(void *)(v26 + 8 * v9);
            if (!v21)
            {
              uint64_t v22 = v19 + 6;
              while (v25 != v22)
              {
                unint64_t v21 = *(void *)(v26 + 8 * v22++);
                if (v21)
                {
                  uint64_t v9 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_31:
              sub_100031848();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

void sub_1000BA268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - v10;
  __n128 v14 = __chkstk_darwin(v12);
  v57 = (char *)&v41 - v15;
  int64_t v16 = 0;
  uint64_t v48 = a1;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v42 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v58 = (char *)_swiftEmptyArrayStorage;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v17;
  uint64_t v55 = v13 + 16;
  uint64_t v56 = a2;
  uint64_t v46 = v13 + 48;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
  unint64_t v21 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v54 = a2 + 56;
  uint64_t v50 = v13;
  uint64_t v22 = (void (**)(char *, uint64_t))(v13 + 8);
  int64_t v45 = v6;
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  if ((v19 & v17) != 0) {
    goto LABEL_34;
  }
LABEL_7:
  int64_t v23 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    if (v23 >= v43) {
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v23);
    int64_t v25 = v16 + 1;
    if (v24) {
      goto LABEL_22;
    }
    int64_t v25 = v16 + 2;
    if (v16 + 2 >= v43) {
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v25);
    if (v24) {
      goto LABEL_22;
    }
    int64_t v25 = v16 + 3;
    if (v16 + 3 >= v43) {
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v25);
    if (v24) {
      goto LABEL_22;
    }
    int64_t v25 = v16 + 4;
    if (v16 + 4 >= v43) {
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v25);
    if (v24) {
      goto LABEL_22;
    }
    uint64_t v26 = v16 + 5;
    if (v16 + 5 >= v43)
    {
LABEL_35:
      (*v47)(v6, 1, 1, v7, v14);
LABEL_36:
      swift_release();
      sub_10000F394((uint64_t)v6, &qword_100180580);
      return;
    }
    unint64_t v24 = *(void *)(v42 + 8 * v26);
    if (v24)
    {
      int64_t v25 = v16 + 5;
LABEL_22:
      uint64_t v51 = (v24 - 1) & v24;
      int64_t v52 = v25;
      for (unint64_t i = __clz(__rbit64(v24)) + (v25 << 6); ; unint64_t i = __clz(__rbit64(v20)) | (v16 << 6))
      {
        uint64_t v28 = v50;
        uint64_t v29 = *(void *)(v50 + 72);
        uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v50 + 16);
        v30(v6, *(void *)(v48 + 48) + v29 * i, v7, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v6, 1, v7) == 1) {
          break;
        }
        uint64_t v53 = *v21;
        v53(v57, v6, v7);
        if (*(void *)(v56 + 16)
          && (uint64_t v31 = v56,
              sub_1000B4FD0((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID), uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)(), v33 = -1 << *(unsigned char *)(v31 + 32), v34 = v32 & ~v33, ((*(void *)(v54 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) != 0))
        {
          uint64_t v35 = ~v33;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v30)(v11, *(void *)(v56 + 48) + v34 * v29, v7);
            sub_1000B4FD0(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v37 = *v22;
            (*v22)(v11, v7);
            if (v36) {
              break;
            }
            unint64_t v34 = (v34 + 1) & v35;
            if (((*(void *)(v54 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
              goto LABEL_29;
            }
          }
          v37(v57, v7);
          unint64_t v21 = v44;
          unint64_t v6 = v45;
          unint64_t v20 = v51;
          int64_t v16 = v52;
          if (!v51) {
            goto LABEL_7;
          }
        }
        else
        {
LABEL_29:
          unint64_t v21 = v44;
          v53(v49, v57, v7);
          uint64_t v38 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000162B4(0, *((void *)v38 + 2) + 1, 1);
            uint64_t v38 = v58;
          }
          unint64_t v20 = v51;
          unint64_t v40 = *((void *)v38 + 2);
          unint64_t v39 = *((void *)v38 + 3);
          if (v40 >= v39 >> 1)
          {
            sub_1000162B4(v39 > 1, v40 + 1, 1);
            uint64_t v38 = v58;
          }
          *((void *)v38 + 2) = v40 + 1;
          v53(&v38[((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ v40 * v29], v49, v7);
          uint64_t v58 = v38;
          unint64_t v6 = v45;
          int64_t v16 = v52;
          if (!v20) {
            goto LABEL_7;
          }
        }
LABEL_34:
        uint64_t v51 = (v20 - 1) & v20;
        int64_t v52 = v16;
      }
      goto LABEL_36;
    }
    while (1)
    {
      int64_t v25 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        break;
      }
      if (v25 >= v43) {
        goto LABEL_35;
      }
      unint64_t v24 = *(void *)(v42 + 8 * v25);
      ++v26;
      if (v24) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
}

void sub_1000BA830(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
    sub_1000B5220((unint64_t *)&unk_100183CD0, (unint64_t *)&unk_1001859D0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v19 = v22;
    uint64_t v2 = v23;
    uint64_t v3 = v24;
    unint64_t v4 = v25;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v18 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v17 = v1;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_30:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_38;
  }
  sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v14 = v20;
  swift_unknownObjectRelease();
  uint64_t v10 = v3;
  uint64_t v8 = v4;
  if (!v20) {
    goto LABEL_38;
  }
  while (1)
  {
    if ([v14 state])
    {

      uint64_t v3 = v10;
      unint64_t v4 = v8;
      if (v1 < 0) {
        goto LABEL_30;
      }
    }
    else
    {
      id v15 = [v14 remoteMembers];
      sub_10001FB40(0, &qword_1001804F0);
      sub_1000B5220(&qword_1001804F8, &qword_1001804F0);
      uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v15) = sub_1000B34A8(v16, &qword_1001804F0, (uint64_t)TUConversationMember_ptr, &qword_1001804F8);
      swift_bridgeObjectRelease();
      if (v15)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      uint64_t v3 = v10;
      unint64_t v4 = v8;
      uint64_t v1 = v17;
      if (v17 < 0) {
        goto LABEL_30;
      }
    }
LABEL_10:
    if (!v4) {
      break;
    }
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
LABEL_28:
    id v14 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v14) {
      goto LABEL_38;
    }
  }
  int64_t v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return;
  }
  if (v11 >= v18) {
    goto LABEL_38;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v11);
  uint64_t v10 = v3 + 1;
  if (v12) {
    goto LABEL_27;
  }
  uint64_t v10 = v3 + 2;
  if (v3 + 2 >= v18) {
    goto LABEL_38;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v10);
  if (v12) {
    goto LABEL_27;
  }
  uint64_t v10 = v3 + 3;
  if (v3 + 3 >= v18) {
    goto LABEL_38;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v10);
  if (v12) {
    goto LABEL_27;
  }
  uint64_t v10 = v3 + 4;
  if (v3 + 4 >= v18) {
    goto LABEL_38;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v10);
  if (v12) {
    goto LABEL_27;
  }
  uint64_t v10 = v3 + 5;
  if (v3 + 5 >= v18) {
    goto LABEL_38;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v10);
  if (v12)
  {
LABEL_27:
    uint64_t v8 = (v12 - 1) & v12;
    unint64_t v9 = __clz(__rbit64(v12)) + (v10 << 6);
    goto LABEL_28;
  }
  uint64_t v13 = v3 + 6;
  while (v18 != v13)
  {
    unint64_t v12 = *(void *)(v19 + 8 * v13++);
    if (v12)
    {
      uint64_t v10 = v13 - 1;
      goto LABEL_27;
    }
  }
LABEL_38:
  sub_100031848();
}

uint64_t sub_1000BAC28@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_1000BAC50(uint64_t a1, void **a2)
{
  return sub_1000B5264(a1, a2);
}

uint64_t sub_1000BAC78@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_1000BACA0(uint64_t a1, void **a2)
{
  return sub_1000B5264(a1, a2);
}

uint64_t sub_1000BACD0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7463617265746E69 && a2 == 0xED000044496E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x546572756C696166 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000BAE00(void *a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFRemoteAlertPresentationRequest.PresentationType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10005D840())
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B150(v9, (uint64_t)qword_10018D128);
    id v10 = a1;
    int64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      type metadata accessor for UUID();
      sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_100047F98(v14, v15, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      LOBYTE(v50) = sub_10005D840();
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v50 = sub_100047F98(v16, v17, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Not creating remote alert for interaction with ID: %s preferred presentation style is: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10000B150(v18, (uint64_t)qword_10018D128);
  id v20 = a1;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v49 = v4;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    v48[2] = v19;
    unint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    v48[1] = v26;
    *(_DWORD *)unint64_t v25 = 136315138;
    uint64_t v51 = v26;
    v48[0] = v25 + 4;
    type metadata accessor for UUID();
    sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v50 = sub_100047F98(v27, v28, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Creating remote alert presentation for nearby sharing interaction with ID: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v29 = objc_allocWithZone((Class)type metadata accessor for NearbySharingInteractionViewController(0));
  id v30 = v20;
  id v31 = sub_1000E8798(v30);
  type metadata accessor for AUIRemoteAlertPresentationManager();
  id v32 = sub_100084E60();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for SFRemoteAlertPresentationRequest.PresentationType.unknown(_:), v5);
  uint64_t v33 = dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:)();

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (!v33)
  {
    id v35 = v30;
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v51 = v39;
      type metadata accessor for UUID();
      sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_100047F98(v40, v41, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Could not create remote alert for interaction with ID: %s, ending the interaction", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v42 = (uint64_t)v49;
    uint64_t v43 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
    type metadata accessor for MainActor();
    id v44 = v35;
    uint64_t v45 = static MainActor.shared.getter();
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = v45;
    v46[3] = &protocol witness table for MainActor;
    v46[4] = v44;
    sub_10010C15C(v42, (uint64_t)&unk_100183ED8, (uint64_t)v46);

    swift_release();
    return 0;
  }
  *(void *)(swift_allocObject() + 16) = v30;
  id v34 = v30;
  swift_retain();
  dispatch thunk of SFRemoteAlertPresentationHandle.onDismiss.setter();

  swift_release();
  return v33;
}

uint64_t sub_1000BB61C(char *a1)
{
  uint64_t v92 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  v90 = *(char **)(v92 - 8);
  __chkstk_darwin(v92);
  v88 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v89);
  unint64_t v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActivityPresentationOptions();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v91 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v15 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10005D840() == 1)
  {
    uint64_t v87 = v5;
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    v82 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 56);
    uint64_t v83 = v18;
    uint64_t v81 = v19 + 56;
    v82(v17, 1, 1);
    uint64_t v84 = type metadata accessor for MainActor();
    uint64_t v20 = static MainActor.shared.getter();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v20;
    *(void *)(v21 + 24) = &protocol witness table for MainActor;
    sub_10010C15C((uint64_t)v17, (uint64_t)&unk_100183E90, v21);
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v78 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
    uint64_t v79 = v10 + 88;
    LODWORD(v20) = v78(v14, v9);
    int v22 = enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:);
    BOOL v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v75 = v10 + 8;
    v74 = v23;
    v23(v14, v9);
    int v77 = v22;
    v93 = v8;
    v85 = v17;
    uint64_t v86 = v6;
    uint64_t v76 = v10;
    if (v20 == v22)
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10000B150(v24, (uint64_t)qword_10018D128);
      unint64_t v25 = a1;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        unint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v73 = v29;
        *(_DWORD *)unint64_t v28 = 136315138;
        v95[0] = v29;
        v72 = v28 + 4;
        type metadata accessor for UUID();
        sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v94 = sub_100047F98(v30, v31, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v32 = "Creating failure activity for nearby sharing interaction with ID: %s";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v26, v27, v32, v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_18:
        int v46 = SBUIIsSystemApertureEnabled();
        uint64_t v80 = v9;
        if (v46)
        {
          static ActivityPresentationOptions.ActivityPresentationDestination.systemApertureOnly.getter();
        }
        else
        {
          sub_10000AA4C(&qword_100183640);
          uint64_t v47 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination();
          uint64_t v48 = *(void *)(v47 - 8);
          unint64_t v49 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
          uint64_t v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_10012A270;
          (*(void (**)(unint64_t, void, uint64_t))(v48 + 104))(v50 + v49, enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:), v47);
        }
        uint64_t v51 = v92;
        int64_t v52 = v90;
        ActivityPresentationOptions.init(destinations:)();
        uint64_t v53 = &a1[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id];
        uint64_t v54 = type metadata accessor for UUID();
        uint64_t v55 = *(void (**)(char *, char *))(*(void *)(v54 - 8) + 16);
        v90 = v53;
        uint64_t v73 = v54;
        v55(v4, v53);
        uint64_t v56 = *(int *)(v89 + 20);
        uint64_t v92 = (uint64_t)v4;
        uint64_t v57 = (uint64_t)&v4[v56];
        uint64_t v58 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v52 + 7);
        v58(v57, 1, 1, v51);
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v59 = v91;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v60 = v80;
        int v61 = v78(v59, v80);
        if (v61 == v77)
        {
          (*(void (**)(char *, uint64_t))(v76 + 96))(v59, v60);
          uint64_t v62 = (void (*)(char *, char *, uint64_t))*((void *)v52 + 4);
          uint64_t v63 = v88;
          v62(v88, v59, v51);
          sub_10000F394(v57, (uint64_t *)&unk_100185A70);
          v62((char *)v57, v63, v51);
          v58(v57, 0, 1, v51);
        }
        else
        {
          v74(v59, v60);
        }
        sub_10000AA4C(&qword_100183EA0);
        uint64_t v65 = v92;
        uint64_t v64 = v93;
        uint64_t v66 = static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)();
        uint64_t v67 = (uint64_t)v85;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v82)(v85, 1, 1, v83);
        swift_retain_n();
        v68 = a1;
        uint64_t v69 = static MainActor.shared.getter();
        v70 = (void *)swift_allocObject();
        v70[2] = v69;
        v70[3] = &protocol witness table for MainActor;
        v70[4] = v66;
        v70[5] = v68;
        sub_10010C15C(v67, (uint64_t)&unk_100183EC0, (uint64_t)v70);
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v64, v87);
        sub_1000BD048(v65, type metadata accessor for NearbySharingInteractionAttributes);
        return v66;
      }
    }
    else
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_10000B150(v42, (uint64_t)qword_10018D128);
      unint64_t v25 = a1;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        unint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v73 = v43;
        *(_DWORD *)unint64_t v28 = 136315138;
        v95[0] = v43;
        v72 = v28 + 4;
        type metadata accessor for UUID();
        sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v94 = sub_100047F98(v44, v45, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v32 = "Creating activity for nearby sharing interaction with ID: %s";
        goto LABEL_15;
      }
    }

    goto LABEL_18;
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10000B150(v33, (uint64_t)qword_10018D128);
  id v34 = a1;
  id v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    v95[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    type metadata accessor for UUID();
    sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v94 = sub_100047F98(v38, v39, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    LOBYTE(v94) = sub_10005D840();
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v94 = sub_100047F98(v40, v41, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not creating activity for interaction with ID: %s preferred presentation style is: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

id sub_1000BC56C(void *a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181540);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000B333C();
  uint64_t v10 = v9[2];
  if (!v10)
  {
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v35 = v5;
  os_log_type_t v36 = v4;
  uint64_t v33 = v8;
  uint64_t v34 = v6;
  swift_bridgeObjectRetain();
  for (unint64_t i = v9 + 5; ; i += 3)
  {
    uint64_t v13 = *(i - 1);
    uint64_t v12 = *i;
    swift_bridgeObjectRetain_n();
    id v14 = [a1 sender];
    if (!v14)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_4;
    }
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v13 == v16 && v12 == v18) {
      break;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_17;
    }
LABEL_4:
    if (!--v10) {
      return (id)swift_bridgeObjectRelease_n();
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_17:
  swift_bridgeObjectRelease_n();
  id result = [a1 body];
  uint64_t v22 = (uint64_t)v36;
  if (result)
  {
    BOOL v23 = result;
    id v24 = [result string];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = v34;
    uint64_t v25 = v35;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v22, 1, v35) == 1)
    {
      return (id)sub_10000F394(v22, &qword_100181540);
    }
    else
    {
      os_log_type_t v27 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v33, v22, v25);
      id v28 = [self sharedApplication];
      URL._bridgeToObjectiveC()(v29);
      unint64_t v31 = v30;
      sub_1000A3C70((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_1000B4FD0(&qword_10017FBB0, type metadata accessor for OpenExternalURLOptionsKey);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v28 openURL:v31 options:isa completionHandler:0];

      return (id)(*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v25);
    }
  }
  return result;
}

uint64_t sub_1000BC958(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000B3264(a1, v4, v5, v6);
}

void sub_1000BCA0C()
{
}

uint64_t sub_1000BCA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BCA40()
{
  return swift_release();
}

uint64_t sub_1000BCA4C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000BCA8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_1000B2CC0(a1, v4, v5, v6);
}

uint64_t sub_1000BCB40()
{
  uint64_t v1 = sub_10000AA4C(&qword_100183DD8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_1000BCCA8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000AA4C(&qword_100183DD8) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for SFProximityHandoff.Interaction() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1 + v6;
  uint64_t v11 = v1 + v9;
  uint64_t v12 = *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_10001FD90;
  return sub_1000AFDA8(a1, v10, v11, v12);
}

void sub_1000BCE24()
{
  sub_10000AA4C(&qword_100183DD0);

  sub_1000B16C0();
}

uint64_t sub_1000BCE9C()
{
  uint64_t v1 = sub_10000AA4C(&qword_100183DD0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BCF30(char *a1)
{
  uint64_t v3 = *(void *)(sub_10000AA4C(&qword_100183DD0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000B17B0(a1, v4);
}

uint64_t sub_1000BCFA4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BCFE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BD048(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000BD0A8()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000BD17C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000AE63C(a1, v4, v5, v6);
}

uint64_t sub_1000BD1F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000BD234()
{
  sub_1000B1B3C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000BD250()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BD288()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BD35C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_100013ABC;
  return sub_1000AE92C(a1, v5, v6, v7, v8);
}

uint64_t sub_1000BD460()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BD498()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001FD90;
  return sub_1000850CC();
}

uint64_t sub_1000BD548(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000B21E8(a1, v4, v5, v6);
}

uint64_t sub_1000BD5FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BD644(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001FD90;
  return sub_1000B22E4(a1, v4, v5, v7, v6);
}

uint64_t sub_1000BD708(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000A64FC(a1, v4, v5, v6);
}

uint64_t sub_1000BD7BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BD7F4()
{
  return sub_1000B1BA0(*(void **)(v0 + 16));
}

uint64_t sub_1000BD800(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000A64FC(a1, v4, v5, v6);
}

uint64_t sub_1000BD8B8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000A64FC(a1, v4, v5, v6);
}

uint64_t sub_1000BD96C()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BDA48(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingAssertionRequest() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001FD90;
  return sub_1000A9DF4(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1000BDB58()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000BDB98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000A64FC(a1, v4, v5, v6);
}

uint64_t sub_1000BDC4C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BDC94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001FD90;
  return sub_1000A7F4C(a1, v4, v5, v7, v6);
}

uint64_t sub_1000BDD54()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BDDA4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001FD90;
  return sub_1000A72B8(a1, v4, v5, v6, v7, v8);
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionPresentationStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionPresentationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *id result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BDFC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000BDFF0(unsigned char *result, char a2)
{
  *id result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionPresentationStyle()
{
  return &type metadata for NearbySharingInteractionPresentationStyle;
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BE0D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.CodingKeys()
{
  return &type metadata for NearbySharingInteractionAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.ContentState.CodingKeys()
{
  return &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.ContentState()
{
  return &type metadata for NearbySharingInteractionAttributes.ContentState;
}

unint64_t sub_1000BE130()
{
  unint64_t result = qword_100183FE8;
  if (!qword_100183FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183FE8);
  }
  return result;
}

unint64_t sub_1000BE188()
{
  unint64_t result = qword_100183FF0;
  if (!qword_100183FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183FF0);
  }
  return result;
}

unint64_t sub_1000BE1E0()
{
  unint64_t result = qword_100183FF8;
  if (!qword_100183FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183FF8);
  }
  return result;
}

unint64_t sub_1000BE238()
{
  unint64_t result = qword_100184000;
  if (!qword_100184000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184000);
  }
  return result;
}

unint64_t sub_1000BE290()
{
  unint64_t result = qword_100184008;
  if (!qword_100184008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184008);
  }
  return result;
}

unint64_t sub_1000BE2E8()
{
  unint64_t result = qword_100184010;
  if (!qword_100184010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184010);
  }
  return result;
}

uint64_t sub_1000BE358(uint64_t a1)
{
  return sub_1000BE408(a1, qword_10018D0C8);
}

uint64_t sub_1000BE37C(uint64_t a1)
{
  return sub_1000BE408(a1, qword_10018D0E0);
}

uint64_t sub_1000BE3A0(uint64_t a1)
{
  return sub_1000BE408(a1, qword_10018D0F8);
}

uint64_t sub_1000BE3C4(uint64_t a1)
{
  return sub_1000BE408(a1, qword_10018D110);
}

uint64_t sub_1000BE3F0(uint64_t a1)
{
  return sub_1000BE408(a1, qword_10018D128);
}

uint64_t sub_1000BE408(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001EA1C(v3, a2);
  sub_10000B150(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

void *sub_1000BE480(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000AA4C(&qword_1001806E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(void *)((char *)a1 + v14) = v16;
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
    swift_retain();
    id v17 = v16;
  }
  return a1;
}

void sub_1000BE5C8(uint64_t a1, uint64_t a2)
{
  sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  int v5 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *sub_1000BE678(void *a1, void *a2, int *a3)
{
  sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  swift_retain();
  id v15 = v14;
  return a1;
}

void *sub_1000BE770(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F394((uint64_t)a1, &qword_1001806E0);
    sub_10000AA4C(&qword_1001806E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

char *sub_1000BE8A4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  a1[v8] = a2[v8];
  uint64_t v9 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v9] = a2[v9];
  return a1;
}

char *sub_1000BE994(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000F394((uint64_t)a1, &qword_1001806E0);
    uint64_t v6 = sub_10000AA4C(&qword_1001806E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_release();
  uint64_t v13 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v14 = *(void **)&a1[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];

  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_1000BEAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BEACC);
}

uint64_t sub_1000BEACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100184058);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000BEB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BEBA8);
}

uint64_t sub_1000BEBA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000AA4C(&qword_100184058);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AirDropAskRequestView()
{
  uint64_t result = qword_1001840B8;
  if (!qword_1001840B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000BECB8()
{
  sub_1000BED68();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000BED68()
{
  if (!qword_1001840C8)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001840C8);
    }
  }
}

uint64_t sub_1000BEDC0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BEDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v5 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000BEED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v6 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000BEFCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100184040);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100184040);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D110);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000BF094()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AirDropAskRequestView();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  int v4 = (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(unsigned char *, uint64_t))(v1 + 96))(v3, v0);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v5 = v12[15];
    uint64_t v6 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
  }
  else if (v4 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(unsigned char *, uint64_t))(v1 + 96))(v3, v0);
    uint64_t v7 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v8 = &v3[*(int *)(v7 + 64)];
    uint64_t v9 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    uint64_t v10 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v10 - 8) + 8))(v3, v10);
    return 1;
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  return v5;
}

uint64_t sub_1000BF378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v156 = a1;
  uint64_t v126 = sub_10000AA4C(&qword_100184108);
  __chkstk_darwin(v126);
  uint64_t v127 = (uint64_t)&v109 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000AA4C(&qword_100184110);
  __chkstk_darwin(v155);
  v128 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000AA4C(&qword_100184118);
  __chkstk_darwin(v125);
  uint64_t v114 = (uint64_t)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  __chkstk_darwin(v5 - 8);
  v119 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000AA4C(&qword_100181490);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  v113 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100184120);
  __chkstk_darwin(v8 - 8);
  v136 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  v118 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v134 = (char *)&v109 - v12;
  uint64_t v145 = sub_10000AA4C(&qword_100184128);
  __chkstk_darwin(v145);
  uint64_t v146 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_10000AA4C(&qword_100184130);
  __chkstk_darwin(v154);
  v148 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100184138);
  __chkstk_darwin(v15 - 8);
  v121 = (uint64_t *)((char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v147 = sub_10000AA4C(&qword_100184140);
  __chkstk_darwin(v147);
  uint64_t v120 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v124 = (uint64_t)&v109 - v19;
  uint64_t v132 = sub_10000AA4C(&qword_100184148);
  __chkstk_darwin(v132);
  uint64_t v112 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_10000AA4C(&qword_100182838);
  uint64_t v111 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  v116 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_10000AA4C(&qword_100184150);
  __chkstk_darwin(v137);
  uint64_t v141 = (uint64_t)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000AA4C(&qword_100184158);
  __chkstk_darwin(v129);
  uint64_t v130 = (uint64_t)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_10000AA4C(&qword_100184160);
  __chkstk_darwin(v138);
  v131 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000AA4C(&qword_100184168);
  __chkstk_darwin(v144);
  uint64_t v135 = (uint64_t)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000AA4C((uint64_t *)&unk_1001827B0);
  uint64_t v149 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  v115 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v133 = (char *)&v109 - v28;
  uint64_t v143 = sub_10000AA4C(&qword_100184170);
  __chkstk_darwin(v143);
  v142 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v30 - 8);
  id v32 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  os_log_type_t v36 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  unint64_t v39 = (char *)&v109 - v38;
  uint64_t v40 = sub_10000AA4C(&qword_100184178);
  uint64_t v152 = *(void *)(v40 - 8);
  uint64_t v153 = v40;
  __chkstk_darwin(v40);
  v151 = (char *)&v109 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AirDropAskRequestView();
  uint64_t v150 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  uint64_t v42 = v33;
  uint64_t v43 = v34;
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v42) == 1)
  {
    sub_10000F394((uint64_t)v32, &qword_100181400);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v44 = v134;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v45 = (uint64_t)v136;
    SFAirDropReceive.Transfer.State.contactResponsePermissionRequest.getter();
    int v46 = *(void (**)(char *, uint64_t))(v139 + 8);
    uint64_t v47 = v140;
    v46(v44, v140);
    uint64_t v48 = v149;
    uint64_t v49 = v157;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v45, 1, v157) == 1)
    {
      sub_10000F394(v45, &qword_100184120);
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      uint64_t v50 = v118;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v51 = (uint64_t)v119;
      SFAirDropReceive.Transfer.State.permissionRequest.getter();
      v46(v50, v47);
      uint64_t v52 = v122;
      uint64_t v53 = v123;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v51, 1, v123) == 1)
      {
        sub_10000F394(v51, (uint64_t *)&unk_1001827D0);
        uint64_t v54 = static VerticalAlignment.center.getter();
        uint64_t v55 = (uint64_t)v121;
        uint64_t *v121 = v54;
        *(void *)(v55 + 8) = 0;
        *(unsigned char *)(v55 + 16) = 1;
        uint64_t v56 = sub_10000AA4C(&qword_100184180);
        sub_1000D1984(v150, v55 + *(int *)(v56 + 44));
        char v57 = static Edge.Set.all.getter();
        EdgeInsets.init(_all:)();
        uint64_t v59 = v58;
        uint64_t v61 = v60;
        uint64_t v63 = v62;
        uint64_t v65 = v64;
        uint64_t v66 = v120;
        sub_10000F330(v55, v120, &qword_100184138);
        uint64_t v67 = v66 + *(int *)(v147 + 36);
        *(unsigned char *)uint64_t v67 = v57;
        *(void *)(v67 + 8) = v59;
        *(void *)(v67 + 16) = v61;
        *(void *)(v67 + 24) = v63;
        *(void *)(v67 + 32) = v65;
        *(unsigned char *)(v67 + 40) = 0;
        sub_10000F394(v55, &qword_100184138);
        uint64_t v68 = v124;
        sub_10000F2CC(v66, v124, &qword_100184140);
        sub_10000F330(v68, v127, &qword_100184140);
        swift_storeEnumTagMultiPayload();
        sub_1000D4654();
        sub_1000D4754();
        uint64_t v69 = (uint64_t)v128;
        _ConditionalContent<>.init(storage:)();
        sub_1000D47F4();
        sub_1000D4AA8();
        uint64_t v70 = (uint64_t)v151;
        sub_1000BEED4(v69, v154, v155);
        sub_10000F394(v69, &qword_100184110);
        sub_10000F394(v68, &qword_100184140);
      }
      else
      {
        uint64_t v89 = v113;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v113, v51, v53);
        uint64_t v90 = v114;
        sub_1000C1838(v114);
        sub_10000F330(v90, v127, &qword_100184118);
        swift_storeEnumTagMultiPayload();
        sub_1000D4654();
        sub_1000D4754();
        uint64_t v91 = (uint64_t)v128;
        _ConditionalContent<>.init(storage:)();
        sub_1000D47F4();
        sub_1000D4AA8();
        uint64_t v70 = (uint64_t)v151;
        sub_1000BEED4(v91, v154, v155);
        sub_10000F394(v91, &qword_100184110);
        sub_10000F394(v90, &qword_100184118);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v89, v53);
      }
    }
    else
    {
      uint64_t v80 = v115;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v115, v45, v49);
      uint64_t v81 = v135;
      sub_1000C0900(v135);
      sub_10000F330(v81, v146, &qword_100184168);
      swift_storeEnumTagMultiPayload();
      sub_1000D4830();
      sub_1000D48A8();
      uint64_t v82 = (uint64_t)v148;
      _ConditionalContent<>.init(storage:)();
      sub_1000D47F4();
      sub_1000D4AA8();
      uint64_t v70 = (uint64_t)v151;
      sub_1000BEDDC(v82, v154);
      sub_10000F394(v82, &qword_100184130);
      sub_10000F394(v81, &qword_100184168);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v80, v49);
    }
  }
  else
  {
    uint64_t v71 = v149;
    uint64_t v72 = v157;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v32, v42);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v36, v39, v42);
    int v73 = (*(uint64_t (**)(char *, uint64_t))(v43 + 88))(v36, v42);
    v110 = v39;
    if (v73 == enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v43 + 96))(v36, v42);
      uint64_t v74 = sub_10000AA4C(&qword_100182840);
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v133, &v36[*(int *)(v74 + 48)], v72);
      uint64_t v75 = v135;
      sub_1000C0900(v135);
      sub_10000F330(v75, v130, &qword_100184168);
      swift_storeEnumTagMultiPayload();
      sub_1000D48A8();
      uint64_t v150 = v42;
      sub_1000D49A8();
      uint64_t v76 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v76, v141, &qword_100184160);
      swift_storeEnumTagMultiPayload();
      sub_1000D486C();
      sub_1000D4754();
      uint64_t v77 = (uint64_t)v142;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v76, &qword_100184160);
      sub_10000F394(v75, &qword_100184168);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v133, v157);
      uint64_t v78 = v150;
      uint64_t v79 = type metadata accessor for SFAirDrop.ContactInfo();
      (*(void (**)(char *, uint64_t))(*(void *)(v79 - 8) + 8))(v36, v79);
    }
    else
    {
      uint64_t v77 = (uint64_t)v142;
      if (v73 == enum case for SFAirDropSend.Transfer.State.waitingForImportContactResponse(_:))
      {
        (*(void (**)(char *, uint64_t))(v43 + 96))(v36, v42);
        uint64_t v83 = sub_10000AA4C(&qword_100182830);
        uint64_t v84 = v111;
        (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v116, &v36[*(int *)(v83 + 48)], v117);
        uint64_t v85 = v112;
        sub_1000C109C(v112);
        sub_10000F330(v85, v130, &qword_100184148);
        swift_storeEnumTagMultiPayload();
        sub_1000D48A8();
        sub_1000D49A8();
        uint64_t v86 = (uint64_t)v131;
        _ConditionalContent<>.init(storage:)();
        sub_10000F330(v86, v141, &qword_100184160);
        swift_storeEnumTagMultiPayload();
        sub_1000D486C();
        sub_1000D4754();
        _ConditionalContent<>.init(storage:)();
        uint64_t v87 = v86;
        uint64_t v78 = v42;
        sub_10000F394(v87, &qword_100184160);
        sub_10000F394(v85, &qword_100184148);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v116, v117);
        uint64_t v88 = type metadata accessor for SFAirDrop.ContactInfo();
        (*(void (**)(char *, uint64_t))(*(void *)(v88 - 8) + 8))(v36, v88);
      }
      else
      {
        uint64_t v92 = static VerticalAlignment.center.getter();
        uint64_t v93 = (uint64_t)v121;
        uint64_t *v121 = v92;
        *(void *)(v93 + 8) = 0;
        *(unsigned char *)(v93 + 16) = 1;
        uint64_t v94 = sub_10000AA4C(&qword_100184180);
        sub_1000D1984(v150, v93 + *(int *)(v94 + 44));
        uint64_t v78 = v42;
        char v95 = static Edge.Set.all.getter();
        EdgeInsets.init(_all:)();
        uint64_t v97 = v96;
        uint64_t v99 = v98;
        uint64_t v101 = v100;
        uint64_t v103 = v102;
        uint64_t v104 = v120;
        sub_10000F330(v93, v120, &qword_100184138);
        uint64_t v105 = v104 + *(int *)(v147 + 36);
        *(unsigned char *)uint64_t v105 = v95;
        *(void *)(v105 + 8) = v97;
        *(void *)(v105 + 16) = v99;
        *(void *)(v105 + 24) = v101;
        *(void *)(v105 + 32) = v103;
        *(unsigned char *)(v105 + 40) = 0;
        sub_10000F394(v93, &qword_100184138);
        uint64_t v106 = v124;
        sub_10000F2CC(v104, v124, &qword_100184140);
        sub_10000F330(v106, v141, &qword_100184140);
        swift_storeEnumTagMultiPayload();
        sub_1000D486C();
        sub_1000D4754();
        _ConditionalContent<>.init(storage:)();
        sub_10000F394(v106, &qword_100184140);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v78);
      }
    }
    uint64_t v70 = (uint64_t)v151;
    sub_10000F330(v77, v146, &qword_100184170);
    swift_storeEnumTagMultiPayload();
    sub_1000D4830();
    sub_1000D48A8();
    uint64_t v107 = (uint64_t)v148;
    _ConditionalContent<>.init(storage:)();
    sub_1000D47F4();
    sub_1000D4AA8();
    sub_1000BEDDC(v107, v154);
    sub_10000F394(v107, &qword_100184130);
    sub_10000F394(v77, &qword_100184170);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v110, v78);
  }
  sub_1000D50D8(&qword_100184248, &qword_100184178, (void (*)(void))sub_1000D47F4, (void (*)(void))sub_1000D4AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16))(v156, v70, v153);
  return sub_10000F394(v70, &qword_100184178);
}

uint64_t sub_1000C0900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v55 = sub_10000AA4C(&qword_100184520);
  __chkstk_darwin(v55);
  uint64_t v53 = (uint64_t)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000AA4C(&qword_100184528);
  __chkstk_darwin(v51);
  uint64_t v49 = (uint64_t)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000AA4C(&qword_1001841F0);
  __chkstk_darwin(v54);
  uint64_t v52 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100184208);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000AA4C((uint64_t *)&unk_100185E50);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100184530);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AA4C((uint64_t *)&unk_1001827B0);
  SFAirDrop.PermissionRequest.style.getter();
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    uint64_t v44 = v8;
    int v46 = v11;
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    uint64_t v21 = v19[1];
    uint64_t v47 = *v19;
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v24 = v13;
    uint64_t v25 = v19[4];
    uint64_t v26 = sub_10000AA4C(&qword_100184548);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, (char *)v19 + *(int *)(v26 + 80), v12);
    *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    v6[16] = 0;
    uint64_t v27 = (uint64_t)&v6[*(int *)(sub_10000AA4C(&qword_100184550) + 44)];
    uint64_t v28 = v47;
    uint64_t v29 = v48;
    uint64_t v47 = v21;
    uint64_t v45 = v23;
    sub_1000C25BC(v48, v28, v21, v22, v23, v25, (uint64_t)v15, v27);
    int v30 = *(unsigned __int8 *)(v29 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24));
    uint64_t v48 = v12;
    if (v30 == 1)
    {
      if (qword_10017F6E8 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CF98;
    }
    else
    {
      if (qword_10017F6F0 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CFA0;
    }
    uint64_t v37 = (uint64_t)v46;
    uint64_t v38 = (uint64_t)v44;
    double v39 = *(double *)v31;
    uint64_t v40 = static Alignment.center.getter();
    sub_1000F9B78(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v38, 0.0, 1, v39, 0, v40, v41);
    sub_10000F394((uint64_t)v6, &qword_100184208);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000F2CC(v38, v37, (uint64_t *)&unk_100185E50);
    sub_10000F330(v37, v49, (uint64_t *)&unk_100185E50);
    swift_storeEnumTagMultiPayload();
    sub_1000D4908();
    uint64_t v42 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v42, v53, &qword_1001841F0);
    swift_storeEnumTagMultiPayload();
    sub_1000D48D8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v42, &qword_1001841F0);
    sub_10000F394(v37, (uint64_t *)&unk_100185E50);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v48);
  }
  else if (v20 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    id v32 = (char *)v19 + *(int *)(sub_10000AA4C(&qword_100184538) + 48);
    swift_storeEnumTagMultiPayload();
    sub_1000D4908();
    uint64_t v33 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v33, v53, &qword_1001841F0);
    swift_storeEnumTagMultiPayload();
    sub_1000D48D8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v33, &qword_1001841F0);
    uint64_t v34 = sub_10000AA4C(&qword_100184540);
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v32, v34);
    uint64_t v35 = type metadata accessor for SFInterventionWorkflow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v35 - 8) + 8))(v19, v35);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_1000D48D8();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t sub_1000C109C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v55 = sub_10000AA4C(&qword_100184250);
  __chkstk_darwin(v55);
  uint64_t v53 = (uint64_t)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000AA4C(&qword_100184258);
  __chkstk_darwin(v51);
  uint64_t v49 = (uint64_t)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000AA4C(&qword_100184220);
  __chkstk_darwin(v54);
  uint64_t v52 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100184238);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000AA4C((uint64_t *)&unk_100185E40);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100184260);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AA4C(&qword_100182838);
  SFAirDrop.PermissionRequest.style.getter();
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    uint64_t v44 = v8;
    int v46 = v11;
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    uint64_t v21 = v19[1];
    uint64_t v47 = *v19;
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v24 = v13;
    uint64_t v25 = v19[4];
    uint64_t v26 = sub_10000AA4C(&qword_100184278);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, (char *)v19 + *(int *)(v26 + 80), v12);
    *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    v6[16] = 0;
    uint64_t v27 = (uint64_t)&v6[*(int *)(sub_10000AA4C(&qword_100184280) + 44)];
    uint64_t v28 = v47;
    uint64_t v29 = v48;
    uint64_t v47 = v21;
    uint64_t v45 = v23;
    sub_1000C22C8(v48, v28, v21, v22, v23, v25, (uint64_t)v15, v27);
    int v30 = *(unsigned __int8 *)(v29 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24));
    uint64_t v48 = v12;
    if (v30 == 1)
    {
      if (qword_10017F6E8 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CF98;
    }
    else
    {
      if (qword_10017F6F0 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CFA0;
    }
    uint64_t v37 = (uint64_t)v46;
    uint64_t v38 = (uint64_t)v44;
    double v39 = *(double *)v31;
    uint64_t v40 = static Alignment.center.getter();
    sub_1000F9B1C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v38, 0.0, 1, v39, 0, v40, v41);
    sub_10000F394((uint64_t)v6, &qword_100184238);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000F2CC(v38, v37, (uint64_t *)&unk_100185E40);
    sub_10000F330(v37, v49, (uint64_t *)&unk_100185E40);
    swift_storeEnumTagMultiPayload();
    sub_1000D4A08();
    uint64_t v42 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v42, v53, &qword_100184220);
    swift_storeEnumTagMultiPayload();
    sub_1000D49D8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v42, &qword_100184220);
    sub_10000F394(v37, (uint64_t *)&unk_100185E40);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v48);
  }
  else if (v20 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    id v32 = (char *)v19 + *(int *)(sub_10000AA4C(&qword_100184268) + 48);
    swift_storeEnumTagMultiPayload();
    sub_1000D4A08();
    uint64_t v33 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v33, v53, &qword_100184220);
    swift_storeEnumTagMultiPayload();
    sub_1000D49D8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v33, &qword_100184220);
    uint64_t v34 = sub_10000AA4C(&qword_100184270);
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v32, v34);
    uint64_t v35 = type metadata accessor for SFInterventionWorkflow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v35 - 8) + 8))(v19, v35);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_1000D49D8();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t sub_1000C1838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v55 = sub_10000AA4C(&qword_1001846A0);
  __chkstk_darwin(v55);
  uint64_t v53 = (uint64_t)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000AA4C(&qword_1001846A8);
  __chkstk_darwin(v51);
  uint64_t v49 = (uint64_t)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000AA4C(&qword_100184198);
  __chkstk_darwin(v54);
  uint64_t v52 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_1001841B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000AA4C((uint64_t *)&unk_100185E60);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100181488);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AA4C(&qword_100181490);
  SFAirDrop.PermissionRequest.style.getter();
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    uint64_t v44 = v8;
    int v46 = v11;
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    uint64_t v21 = v19[1];
    uint64_t v47 = *v19;
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v24 = v13;
    uint64_t v25 = v19[4];
    uint64_t v26 = sub_10000AA4C(&qword_1001814B0);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v15, (char *)v19 + *(int *)(v26 + 80), v12);
    *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    v6[16] = 0;
    uint64_t v27 = (uint64_t)&v6[*(int *)(sub_10000AA4C(&qword_1001846C0) + 44)];
    uint64_t v28 = v47;
    uint64_t v29 = v48;
    uint64_t v47 = v21;
    uint64_t v45 = v23;
    sub_1000C1FD4(v48, v28, v21, v22, v23, v25, (uint64_t)v15, v27);
    int v30 = *(unsigned __int8 *)(v29 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24));
    uint64_t v48 = v12;
    if (v30 == 1)
    {
      if (qword_10017F6E8 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CF98;
    }
    else
    {
      if (qword_10017F6F0 != -1) {
        swift_once();
      }
      uint64_t v31 = &qword_10018CFA0;
    }
    uint64_t v37 = (uint64_t)v46;
    uint64_t v38 = (uint64_t)v44;
    double v39 = *(double *)v31;
    uint64_t v40 = static Alignment.center.getter();
    sub_1000F9AC0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v38, 0.0, 1, v39, 0, v40, v41);
    sub_10000F394((uint64_t)v6, &qword_1001841B0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000F2CC(v38, v37, (uint64_t *)&unk_100185E60);
    sub_10000F330(v37, v49, (uint64_t *)&unk_100185E60);
    swift_storeEnumTagMultiPayload();
    sub_1000D46B4();
    uint64_t v42 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v42, v53, &qword_100184198);
    swift_storeEnumTagMultiPayload();
    sub_1000D4684();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v42, &qword_100184198);
    sub_10000F394(v37, (uint64_t *)&unk_100185E60);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v48);
  }
  else if (v20 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    id v32 = (char *)v19 + *(int *)(sub_10000AA4C(&qword_1001846B0) + 48);
    swift_storeEnumTagMultiPayload();
    sub_1000D46B4();
    uint64_t v33 = (uint64_t)v52;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v33, v53, &qword_100184198);
    swift_storeEnumTagMultiPayload();
    sub_1000D4684();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v33, &qword_100184198);
    uint64_t v34 = sub_10000AA4C(&qword_1001846B8);
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v32, v34);
    uint64_t v35 = type metadata accessor for SFInterventionWorkflow();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v35 - 8) + 8))(v19, v35);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_1000D4684();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t sub_1000C1FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  uint64_t v28 = a8;
  uint64_t v12 = sub_10000AA4C(&qword_1001846C8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_1001846D0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_1001846D8);
  __chkstk_darwin(v18);
  int v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24)) == 1)
  {
    sub_1000C28B0(a2, a3, a4, v25, v26, v27, &qword_1001846F8, &qword_1001846D8, (uint64_t)v20, 0.0, 0.0, 0.0, 0.0, &qword_100184708, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C354C);
    sub_10000F330((uint64_t)v20, (uint64_t)v17, &qword_1001846D8);
    swift_storeEnumTagMultiPayload();
    sub_1000D5A1C();
    sub_10000F288(&qword_100184700, &qword_1001846C8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = &qword_1001846D8;
  }
  else
  {
    *uint64_t v14 = static Axis.Set.vertical.getter();
    uint64_t v23 = sub_10000AA4C(&qword_1001846E0);
    sub_1000C2B74(a2, a3, a4, v25, v26, v27, (uint64_t)&v14[*(int *)(v23 + 44)]);
    sub_10000F330((uint64_t)v14, (uint64_t)v17, &qword_1001846C8);
    swift_storeEnumTagMultiPayload();
    sub_1000D5A1C();
    sub_10000F288(&qword_100184700, &qword_1001846C8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v14;
    uint64_t v22 = &qword_1001846C8;
  }
  return sub_10000F394(v21, v22);
}

uint64_t sub_1000C22C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  uint64_t v28 = a8;
  uint64_t v12 = sub_10000AA4C(&qword_100184288);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100184290);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_100184298);
  __chkstk_darwin(v18);
  int v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24)) == 1)
  {
    sub_1000C28B0(a2, a3, a4, v25, v26, v27, &qword_1001842B8, &qword_100184298, (uint64_t)v20, 0.0, 0.0, 0.0, 0.0, &qword_1001842C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C3F24);
    sub_10000F330((uint64_t)v20, (uint64_t)v17, &qword_100184298);
    swift_storeEnumTagMultiPayload();
    sub_1000D4AE4();
    sub_10000F288(&qword_1001842C0, &qword_100184288);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = &qword_100184298;
  }
  else
  {
    *uint64_t v14 = static Axis.Set.vertical.getter();
    uint64_t v23 = sub_10000AA4C(&qword_1001842A0);
    sub_1000C2EBC(a2, a3, a4, v25, v26, v27, (uint64_t)&v14[*(int *)(v23 + 44)]);
    sub_10000F330((uint64_t)v14, (uint64_t)v17, &qword_100184288);
    swift_storeEnumTagMultiPayload();
    sub_1000D4AE4();
    sub_10000F288(&qword_1001842C0, &qword_100184288);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v14;
    uint64_t v22 = &qword_100184288;
  }
  return sub_10000F394(v21, v22);
}

uint64_t sub_1000C25BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  uint64_t v28 = a8;
  uint64_t v12 = sub_10000AA4C(&qword_100184558);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100184560);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_100184568);
  __chkstk_darwin(v18);
  int v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24)) == 1)
  {
    sub_1000C28B0(a2, a3, a4, v25, v26, v27, &qword_100184588, &qword_100184568, (uint64_t)v20, 0.0, 0.0, 0.0, 0.0, &qword_100184598, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C48FC);
    sub_10000F330((uint64_t)v20, (uint64_t)v17, &qword_100184568);
    swift_storeEnumTagMultiPayload();
    sub_1000D5800();
    sub_10000F288(&qword_100184590, &qword_100184558);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = &qword_100184568;
  }
  else
  {
    *uint64_t v14 = static Axis.Set.vertical.getter();
    uint64_t v23 = sub_10000AA4C(&qword_100184570);
    sub_1000C3204(a2, a3, a4, v25, v26, v27, (uint64_t)&v14[*(int *)(v23 + 44)]);
    sub_10000F330((uint64_t)v14, (uint64_t)v17, &qword_100184558);
    swift_storeEnumTagMultiPayload();
    sub_1000D5800();
    sub_10000F288(&qword_100184590, &qword_100184558);
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v14;
    uint64_t v22 = &qword_100184558;
  }
  return sub_10000F394(v21, v22);
}

uint64_t sub_1000C28B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t *a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v42 = a2;
  uint64_t v47 = a9;
  uint64_t v23 = sub_10000AA4C(a7);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (double *)((char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v48 = a8;
  uint64_t v26 = sub_10000AA4C(a8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = static HorizontalAlignment.leading.getter();
  int v30 = *(unsigned __int8 *)(v15 + *(int *)(type metadata accessor for AirDropAskRequestView() + 24));
  if (v30 == 1)
  {
    if (qword_10017F708 != -1) {
      swift_once();
    }
    uint64_t v31 = &qword_10018CFF0;
  }
  else
  {
    if (qword_10017F710 != -1) {
      swift_once();
    }
    uint64_t v31 = &qword_10018CFF8;
  }
  double v32 = *(double *)v31 - a10;
  *(void *)uint64_t v25 = v29;
  v25[1] = v32;
  *((unsigned char *)v25 + 16) = 0;
  sub_10000AA4C(a14);
  a15(v15, a1, v42, v43, v44, v45, v46);
  if (v30)
  {
    if (qword_10017F6F8 != -1) {
      swift_once();
    }
    uint64_t v33 = (double *)&xmmword_10018CFB0;
  }
  else
  {
    if (qword_10017F700 != -1) {
      swift_once();
    }
    uint64_t v33 = (double *)&xmmword_10018CFD0;
  }
  double v34 = *v33 - a10;
  double v35 = v33[1] - a11;
  double v36 = v33[2] - a12;
  double v37 = v33[3] - a13;
  char v38 = static Edge.Set.all.getter();
  sub_10000F330((uint64_t)v25, (uint64_t)v28, a7);
  double v39 = &v28[*(int *)(v26 + 36)];
  char *v39 = v38;
  *((double *)v39 + 1) = v34;
  *((double *)v39 + 2) = v35;
  *((double *)v39 + 3) = v36;
  *((double *)v39 + 4) = v37;
  v39[40] = 0;
  sub_10000F394((uint64_t)v25, a7);
  return sub_10000F2CC((uint64_t)v28, v47, v48);
}

uint64_t sub_1000C2B74@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v50 = a7;
  uint64_t v12 = sub_10000AA4C(&qword_1001846D8);
  __chkstk_darwin(v12 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v48 = (uint64_t)&v43 - v15;
  __chkstk_darwin(v16);
  uint64_t v47 = (uint64_t)&v43 - v17;
  __chkstk_darwin(v18);
  uint64_t v45 = (uint64_t)&v43 - v19;
  __chkstk_darwin(v20);
  uint64_t v43 = (uint64_t)&v43 - v21;
  __chkstk_darwin(v22);
  uint64_t v44 = (uint64_t)&v43 - v23;
  uint64_t v24 = a2;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a5;
  uint64_t v32 = v46;
  sub_1000C28B0(a1, v25, v27, v29, v31, v46, &qword_1001846F8, &qword_1001846D8, (uint64_t)&v43 - v23, 0.0, 0.0, 0.0, 0.0, &qword_100184708, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C354C);
  uint64_t v33 = v43;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_1001846F8, &qword_1001846D8, v43, 5.0, 3.0, 5.0, 3.0, &qword_100184708, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C354C);
  uint64_t v34 = v45;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_1001846F8, &qword_1001846D8, v45, 8.0, 5.0, 8.0, 5.0, &qword_100184708, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C354C);
  uint64_t v35 = v44;
  uint64_t v36 = v47;
  sub_10000F330(v44, v47, &qword_1001846D8);
  uint64_t v37 = v48;
  sub_10000F330(v33, v48, &qword_1001846D8);
  uint64_t v38 = v34;
  uint64_t v39 = v49;
  sub_10000F330(v34, v49, &qword_1001846D8);
  uint64_t v40 = v50;
  sub_10000F330(v36, v50, &qword_1001846D8);
  uint64_t v41 = sub_10000AA4C(&qword_1001847E0);
  sub_10000F330(v37, v40 + *(int *)(v41 + 48), &qword_1001846D8);
  sub_10000F330(v39, v40 + *(int *)(v41 + 64), &qword_1001846D8);
  sub_10000F394(v38, &qword_1001846D8);
  sub_10000F394(v33, &qword_1001846D8);
  sub_10000F394(v35, &qword_1001846D8);
  sub_10000F394(v39, &qword_1001846D8);
  sub_10000F394(v37, &qword_1001846D8);
  return sub_10000F394(v36, &qword_1001846D8);
}

uint64_t sub_1000C2EBC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v50 = a7;
  uint64_t v12 = sub_10000AA4C(&qword_100184298);
  __chkstk_darwin(v12 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v48 = (uint64_t)&v43 - v15;
  __chkstk_darwin(v16);
  uint64_t v47 = (uint64_t)&v43 - v17;
  __chkstk_darwin(v18);
  uint64_t v45 = (uint64_t)&v43 - v19;
  __chkstk_darwin(v20);
  uint64_t v43 = (uint64_t)&v43 - v21;
  __chkstk_darwin(v22);
  uint64_t v44 = (uint64_t)&v43 - v23;
  uint64_t v24 = a2;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a5;
  uint64_t v32 = v46;
  sub_1000C28B0(a1, v25, v27, v29, v31, v46, &qword_1001842B8, &qword_100184298, (uint64_t)&v43 - v23, 0.0, 0.0, 0.0, 0.0, &qword_1001842C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C3F24);
  uint64_t v33 = v43;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_1001842B8, &qword_100184298, v43, 5.0, 3.0, 5.0, 3.0, &qword_1001842C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C3F24);
  uint64_t v34 = v45;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_1001842B8, &qword_100184298, v45, 8.0, 5.0, 8.0, 5.0, &qword_1001842C8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C3F24);
  uint64_t v35 = v44;
  uint64_t v36 = v47;
  sub_10000F330(v44, v47, &qword_100184298);
  uint64_t v37 = v48;
  sub_10000F330(v33, v48, &qword_100184298);
  uint64_t v38 = v34;
  uint64_t v39 = v49;
  sub_10000F330(v34, v49, &qword_100184298);
  uint64_t v40 = v50;
  sub_10000F330(v36, v50, &qword_100184298);
  uint64_t v41 = sub_10000AA4C(&qword_100184518);
  sub_10000F330(v37, v40 + *(int *)(v41 + 48), &qword_100184298);
  sub_10000F330(v39, v40 + *(int *)(v41 + 64), &qword_100184298);
  sub_10000F394(v38, &qword_100184298);
  sub_10000F394(v33, &qword_100184298);
  sub_10000F394(v35, &qword_100184298);
  sub_10000F394(v39, &qword_100184298);
  sub_10000F394(v37, &qword_100184298);
  return sub_10000F394(v36, &qword_100184298);
}

uint64_t sub_1000C3204@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v50 = a7;
  uint64_t v12 = sub_10000AA4C(&qword_100184568);
  __chkstk_darwin(v12 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v48 = (uint64_t)&v43 - v15;
  __chkstk_darwin(v16);
  uint64_t v47 = (uint64_t)&v43 - v17;
  __chkstk_darwin(v18);
  uint64_t v45 = (uint64_t)&v43 - v19;
  __chkstk_darwin(v20);
  uint64_t v43 = (uint64_t)&v43 - v21;
  __chkstk_darwin(v22);
  uint64_t v44 = (uint64_t)&v43 - v23;
  uint64_t v24 = a2;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a5;
  uint64_t v32 = v46;
  sub_1000C28B0(a1, v25, v27, v29, v31, v46, &qword_100184588, &qword_100184568, (uint64_t)&v43 - v23, 0.0, 0.0, 0.0, 0.0, &qword_100184598, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C48FC);
  uint64_t v33 = v43;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_100184588, &qword_100184568, v43, 5.0, 3.0, 5.0, 3.0, &qword_100184598, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C48FC);
  uint64_t v34 = v45;
  sub_1000C28B0(a1, v24, v26, v28, v30, v32, &qword_100184588, &qword_100184568, v45, 8.0, 5.0, 8.0, 5.0, &qword_100184598, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C48FC);
  uint64_t v35 = v44;
  uint64_t v36 = v47;
  sub_10000F330(v44, v47, &qword_100184568);
  uint64_t v37 = v48;
  sub_10000F330(v33, v48, &qword_100184568);
  uint64_t v38 = v34;
  uint64_t v39 = v49;
  sub_10000F330(v34, v49, &qword_100184568);
  uint64_t v40 = v50;
  sub_10000F330(v36, v50, &qword_100184568);
  uint64_t v41 = sub_10000AA4C(&qword_100184698);
  sub_10000F330(v37, v40 + *(int *)(v41 + 48), &qword_100184568);
  sub_10000F330(v39, v40 + *(int *)(v41 + 64), &qword_100184568);
  sub_10000F394(v38, &qword_100184568);
  sub_10000F394(v33, &qword_100184568);
  sub_10000F394(v35, &qword_100184568);
  sub_10000F394(v39, &qword_100184568);
  sub_10000F394(v37, &qword_100184568);
  return sub_10000F394(v36, &qword_100184568);
}

uint64_t sub_1000C354C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v76 = a7;
  uint64_t v77 = a6;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v97 = a8;
  uint64_t v81 = sub_10000AA4C(&qword_100184710);
  __chkstk_darwin(v81);
  uint64_t v74 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = sub_10000AA4C(&qword_100184718);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000AA4C(&qword_100184720);
  __chkstk_darwin(v79);
  int v73 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100184728);
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceLockState();
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v91 = v14;
  __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v72 - v17;
  uint64_t v18 = sub_10000AA4C(&qword_100184730);
  __chkstk_darwin(v18 - 8);
  uint64_t v94 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v93 = (uint64_t)&v72 - v21;
  uint64_t v84 = sub_10000AA4C(&qword_1001842F8);
  __chkstk_darwin(v84);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100184300);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000AA4C(&qword_100184308);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000AA4C(&qword_100184310);
  __chkstk_darwin(v83);
  uint64_t v31 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v72 - v33;
  uint64_t v35 = sub_10000AA4C(&qword_100184318);
  __chkstk_darwin(v35 - 8);
  uint64_t v92 = (char *)&v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v72 - v38;
  uint64_t v40 = a1;
  uint64_t v75 = *(int *)(type metadata accessor for AirDropAskRequestView() + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v75);
  uint64_t v41 = static VerticalAlignment.top.getter();
  if (a1 == 1)
  {
    *(void *)uint64_t v29 = v41;
    *((void *)v29 + 1) = 0x4034000000000000;
    v29[16] = 0;
    uint64_t v42 = sub_10000AA4C(&qword_100184370);
    sub_1000C62D4(v40, v85, v86, v87, v88, (uint64_t)&v29[*(int *)(v42 + 44)]);
    sub_10000F330((uint64_t)v29, (uint64_t)v31, &qword_100184308);
    sub_10000F394((uint64_t)v29, &qword_100184308);
    sub_10000F2CC((uint64_t)v31, (uint64_t)v34, &qword_100184310);
    sub_10000F330((uint64_t)v34, (uint64_t)v26, &qword_100184310);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v34;
    uint64_t v44 = &qword_100184310;
  }
  else
  {
    *(void *)uint64_t v23 = v41;
    *((void *)v23 + 1) = 0x4034000000000000;
    v23[16] = 0;
    uint64_t v45 = sub_10000AA4C(&qword_100184320);
    sub_1000C5904(v40, v85, v86, v87, v88, (uint64_t)&v23[*(int *)(v45 + 44)]);
    sub_10000F330((uint64_t)v23, (uint64_t)v26, &qword_1001842F8);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v23;
    uint64_t v44 = &qword_1001842F8;
  }
  sub_10000F394(v43, v44);
  uint64_t v47 = v90;
  uint64_t v46 = v91;
  uint64_t v48 = v89;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v49 = v98;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v48, enum case for DeviceLockState.unlocked(_:), v46);
  char v50 = static DeviceLockState.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v48, v46);
  v51(v49, v46);
  if (v50)
  {
    uint64_t v52 = v39;
    uint64_t v53 = v97;
    uint64_t v54 = (uint64_t)v80;
    uint64_t v55 = (uint64_t)v78;
    uint64_t v56 = v77;
    uint64_t v57 = v76;
    if (*(unsigned char *)(v40 + v75) == 1)
    {
      char v58 = static Axis.Set.horizontal.getter();
      uint64_t v67 = (uint64_t)v73;
      *int v73 = v58;
      uint64_t v59 = sub_10000AA4C(&qword_100184758);
      sub_1000C52D4(v40, v56, v57, v67 + *(int *)(v59 + 44));
      uint64_t v69 = &qword_100184720;
      sub_10000F330(v67, v54, &qword_100184720);
    }
    else
    {
      uint64_t v66 = static VerticalAlignment.center.getter();
      uint64_t v67 = (uint64_t)v74;
      *uint64_t v74 = v66;
      *(void *)(v67 + 8) = 0x4024000000000000;
      *(unsigned char *)(v67 + 16) = 0;
      uint64_t v68 = sub_10000AA4C(&qword_100184740);
      sub_1000C6D9C(v57, v40, v56, v67 + *(int *)(v68 + 44));
      uint64_t v69 = &qword_100184710;
      sub_10000F330(v67, v54, &qword_100184710);
    }
    swift_storeEnumTagMultiPayload();
    sub_10000F288(&qword_100184748, &qword_100184720);
    sub_10000F288(&qword_100184750, &qword_100184710);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v67, v69);
    uint64_t v64 = v93;
    sub_10000F2CC(v55, v93, &qword_100184728);
    uint64_t v60 = 0;
    uint64_t v62 = v95;
    uint64_t v61 = v96;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v39 = v52;
  }
  else
  {
    uint64_t v60 = 1;
    uint64_t v61 = v96;
    uint64_t v53 = v97;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v62 = v95;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v64 = v93;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v64, v60, 1, v61);
  sub_10000F330((uint64_t)v39, v65, &qword_100184318);
  sub_10000F330(v64, v63, &qword_100184730);
  sub_10000F330(v65, v53, &qword_100184318);
  uint64_t v70 = sub_10000AA4C(&qword_100184738);
  sub_10000F330(v63, v53 + *(int *)(v70 + 48), &qword_100184730);
  sub_10000F394(v64, &qword_100184730);
  sub_10000F394((uint64_t)v39, &qword_100184318);
  sub_10000F394(v63, &qword_100184730);
  return sub_10000F394(v65, &qword_100184318);
}

uint64_t sub_1000C3F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v76 = a7;
  uint64_t v77 = a6;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v97 = a8;
  uint64_t v81 = sub_10000AA4C(&qword_1001842D0);
  __chkstk_darwin(v81);
  uint64_t v74 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = sub_10000AA4C(&qword_1001842D8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000AA4C(&qword_1001842E0);
  __chkstk_darwin(v79);
  int v73 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_1001842E8);
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceLockState();
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v91 = v14;
  __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v72 - v17;
  uint64_t v18 = sub_10000AA4C(&qword_1001842F0);
  __chkstk_darwin(v18 - 8);
  uint64_t v94 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v93 = (uint64_t)&v72 - v21;
  uint64_t v84 = sub_10000AA4C(&qword_1001842F8);
  __chkstk_darwin(v84);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100184300);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000AA4C(&qword_100184308);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000AA4C(&qword_100184310);
  __chkstk_darwin(v83);
  uint64_t v31 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v72 - v33;
  uint64_t v35 = sub_10000AA4C(&qword_100184318);
  __chkstk_darwin(v35 - 8);
  uint64_t v92 = (char *)&v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v72 - v38;
  uint64_t v40 = a1;
  uint64_t v75 = *(int *)(type metadata accessor for AirDropAskRequestView() + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v75);
  uint64_t v41 = static VerticalAlignment.top.getter();
  if (a1 == 1)
  {
    *(void *)uint64_t v29 = v41;
    *((void *)v29 + 1) = 0x4034000000000000;
    v29[16] = 0;
    uint64_t v42 = sub_10000AA4C(&qword_100184370);
    sub_1000C62D4(v40, v85, v86, v87, v88, (uint64_t)&v29[*(int *)(v42 + 44)]);
    sub_10000F330((uint64_t)v29, (uint64_t)v31, &qword_100184308);
    sub_10000F394((uint64_t)v29, &qword_100184308);
    sub_10000F2CC((uint64_t)v31, (uint64_t)v34, &qword_100184310);
    sub_10000F330((uint64_t)v34, (uint64_t)v26, &qword_100184310);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v34;
    uint64_t v44 = &qword_100184310;
  }
  else
  {
    *(void *)uint64_t v23 = v41;
    *((void *)v23 + 1) = 0x4034000000000000;
    v23[16] = 0;
    uint64_t v45 = sub_10000AA4C(&qword_100184320);
    sub_1000C5904(v40, v85, v86, v87, v88, (uint64_t)&v23[*(int *)(v45 + 44)]);
    sub_10000F330((uint64_t)v23, (uint64_t)v26, &qword_1001842F8);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v23;
    uint64_t v44 = &qword_1001842F8;
  }
  sub_10000F394(v43, v44);
  uint64_t v47 = v90;
  uint64_t v46 = v91;
  uint64_t v48 = v89;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v49 = v98;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v48, enum case for DeviceLockState.unlocked(_:), v46);
  char v50 = static DeviceLockState.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v48, v46);
  v51(v49, v46);
  if (v50)
  {
    uint64_t v52 = v39;
    uint64_t v53 = v97;
    uint64_t v54 = (uint64_t)v80;
    uint64_t v55 = (uint64_t)v78;
    uint64_t v56 = v77;
    uint64_t v57 = v76;
    if (*(unsigned char *)(v40 + v75) == 1)
    {
      char v58 = static Axis.Set.horizontal.getter();
      uint64_t v67 = (uint64_t)v73;
      *int v73 = v58;
      uint64_t v59 = sub_10000AA4C(&qword_100184368);
      sub_1000C54E4(v40, v56, v57, v67 + *(int *)(v59 + 44));
      uint64_t v69 = &qword_1001842E0;
      sub_10000F330(v67, v54, &qword_1001842E0);
    }
    else
    {
      uint64_t v66 = static VerticalAlignment.center.getter();
      uint64_t v67 = (uint64_t)v74;
      *uint64_t v74 = v66;
      *(void *)(v67 + 8) = 0x4024000000000000;
      *(unsigned char *)(v67 + 16) = 0;
      uint64_t v68 = sub_10000AA4C(&qword_100184350);
      sub_1000C76F8(v57, v40, v56, v67 + *(int *)(v68 + 44));
      uint64_t v69 = &qword_1001842D0;
      sub_10000F330(v67, v54, &qword_1001842D0);
    }
    swift_storeEnumTagMultiPayload();
    sub_10000F288(&qword_100184358, &qword_1001842E0);
    sub_10000F288(&qword_100184360, &qword_1001842D0);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v67, v69);
    uint64_t v64 = v93;
    sub_10000F2CC(v55, v93, &qword_1001842E8);
    uint64_t v60 = 0;
    uint64_t v62 = v95;
    uint64_t v61 = v96;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v39 = v52;
  }
  else
  {
    uint64_t v60 = 1;
    uint64_t v61 = v96;
    uint64_t v53 = v97;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v62 = v95;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v64 = v93;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v64, v60, 1, v61);
  sub_10000F330((uint64_t)v39, v65, &qword_100184318);
  sub_10000F330(v64, v63, &qword_1001842F0);
  sub_10000F330(v65, v53, &qword_100184318);
  uint64_t v70 = sub_10000AA4C(&qword_100184348);
  sub_10000F330(v63, v53 + *(int *)(v70 + 48), &qword_1001842F0);
  sub_10000F394(v64, &qword_1001842F0);
  sub_10000F394((uint64_t)v39, &qword_100184318);
  sub_10000F394(v63, &qword_1001842F0);
  return sub_10000F394(v65, &qword_100184318);
}

uint64_t sub_1000C48FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v76 = a7;
  uint64_t v77 = a6;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v97 = a8;
  uint64_t v81 = sub_10000AA4C(&qword_1001845A0);
  __chkstk_darwin(v81);
  uint64_t v74 = (uint64_t *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = sub_10000AA4C(&qword_1001845A8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000AA4C(&qword_1001845B0);
  __chkstk_darwin(v79);
  int v73 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_1001845B8);
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceLockState();
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v91 = v14;
  __chkstk_darwin(v14);
  uint64_t v89 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v72 - v17;
  uint64_t v18 = sub_10000AA4C(&qword_1001845C0);
  __chkstk_darwin(v18 - 8);
  uint64_t v94 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v93 = (uint64_t)&v72 - v21;
  uint64_t v84 = sub_10000AA4C(&qword_1001842F8);
  __chkstk_darwin(v84);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100184300);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000AA4C(&qword_100184308);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000AA4C(&qword_100184310);
  __chkstk_darwin(v83);
  uint64_t v31 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v72 - v33;
  uint64_t v35 = sub_10000AA4C(&qword_100184318);
  __chkstk_darwin(v35 - 8);
  uint64_t v92 = (char *)&v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v72 - v38;
  uint64_t v40 = a1;
  uint64_t v75 = *(int *)(type metadata accessor for AirDropAskRequestView() + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v75);
  uint64_t v41 = static VerticalAlignment.top.getter();
  if (a1 == 1)
  {
    *(void *)uint64_t v29 = v41;
    *((void *)v29 + 1) = 0x4034000000000000;
    v29[16] = 0;
    uint64_t v42 = sub_10000AA4C(&qword_100184370);
    sub_1000C62D4(v40, v85, v86, v87, v88, (uint64_t)&v29[*(int *)(v42 + 44)]);
    sub_10000F330((uint64_t)v29, (uint64_t)v31, &qword_100184308);
    sub_10000F394((uint64_t)v29, &qword_100184308);
    sub_10000F2CC((uint64_t)v31, (uint64_t)v34, &qword_100184310);
    sub_10000F330((uint64_t)v34, (uint64_t)v26, &qword_100184310);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v34;
    uint64_t v44 = &qword_100184310;
  }
  else
  {
    *(void *)uint64_t v23 = v41;
    *((void *)v23 + 1) = 0x4034000000000000;
    v23[16] = 0;
    uint64_t v45 = sub_10000AA4C(&qword_100184320);
    sub_1000C5904(v40, v85, v86, v87, v88, (uint64_t)&v23[*(int *)(v45 + 44)]);
    sub_10000F330((uint64_t)v23, (uint64_t)v26, &qword_1001842F8);
    swift_storeEnumTagMultiPayload();
    sub_1000D4B84();
    sub_10000F288(&qword_100184340, &qword_1001842F8);
    _ConditionalContent<>.init(storage:)();
    uint64_t v43 = (uint64_t)v23;
    uint64_t v44 = &qword_1001842F8;
  }
  sub_10000F394(v43, v44);
  uint64_t v47 = v90;
  uint64_t v46 = v91;
  uint64_t v48 = v89;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v49 = v98;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v48, enum case for DeviceLockState.unlocked(_:), v46);
  char v50 = static DeviceLockState.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v48, v46);
  v51(v49, v46);
  if (v50)
  {
    uint64_t v52 = v39;
    uint64_t v53 = v97;
    uint64_t v54 = (uint64_t)v80;
    uint64_t v55 = (uint64_t)v78;
    uint64_t v56 = v77;
    uint64_t v57 = v76;
    if (*(unsigned char *)(v40 + v75) == 1)
    {
      char v58 = static Axis.Set.horizontal.getter();
      uint64_t v67 = (uint64_t)v73;
      *int v73 = v58;
      uint64_t v59 = sub_10000AA4C(&qword_1001845E8);
      sub_1000C56F4(v40, v56, v57, v67 + *(int *)(v59 + 44));
      uint64_t v69 = &qword_1001845B0;
      sub_10000F330(v67, v54, &qword_1001845B0);
    }
    else
    {
      uint64_t v66 = static VerticalAlignment.center.getter();
      uint64_t v67 = (uint64_t)v74;
      *uint64_t v74 = v66;
      *(void *)(v67 + 8) = 0x4024000000000000;
      *(unsigned char *)(v67 + 16) = 0;
      uint64_t v68 = sub_10000AA4C(&qword_1001845D0);
      sub_1000C8054(v57, v40, v56, v67 + *(int *)(v68 + 44));
      uint64_t v69 = &qword_1001845A0;
      sub_10000F330(v67, v54, &qword_1001845A0);
    }
    swift_storeEnumTagMultiPayload();
    sub_10000F288(&qword_1001845D8, &qword_1001845B0);
    sub_10000F288(&qword_1001845E0, &qword_1001845A0);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v67, v69);
    uint64_t v64 = v93;
    sub_10000F2CC(v55, v93, &qword_1001845B8);
    uint64_t v60 = 0;
    uint64_t v62 = v95;
    uint64_t v61 = v96;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v39 = v52;
  }
  else
  {
    uint64_t v60 = 1;
    uint64_t v61 = v96;
    uint64_t v53 = v97;
    uint64_t v63 = (uint64_t)v94;
    uint64_t v62 = v95;
    uint64_t v65 = (uint64_t)v92;
    uint64_t v64 = v93;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v64, v60, 1, v61);
  sub_10000F330((uint64_t)v39, v65, &qword_100184318);
  sub_10000F330(v64, v63, &qword_1001845C0);
  sub_10000F330(v65, v53, &qword_100184318);
  uint64_t v70 = sub_10000AA4C(&qword_1001845C8);
  sub_10000F330(v63, v53 + *(int *)(v70 + 48), &qword_1001845C0);
  sub_10000F394(v64, &qword_1001845C0);
  sub_10000F394((uint64_t)v39, &qword_100184318);
  sub_10000F394(v63, &qword_1001845C0);
  return sub_10000F394(v65, &qword_100184318);
}

uint64_t sub_1000C52D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000AA4C(&qword_100184760);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = sub_10000AA4C(&qword_100184710);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v24 - v18;
  *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
  *((void *)v19 + 1) = 0x4024000000000000;
  v19[16] = 0;
  uint64_t v20 = sub_10000AA4C(&qword_100184740);
  sub_1000C6D9C(a3, a1, a2, (uint64_t)&v19[*(int *)(v20 + 44)]);
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4024000000000000;
  v13[16] = 0;
  uint64_t v21 = sub_10000AA4C(&qword_100184768);
  sub_1000CCF74(a3, a1, a2, (uint64_t)&v13[*(int *)(v21 + 44)]);
  sub_10000F330((uint64_t)v19, (uint64_t)v16, &qword_100184710);
  sub_10000F330((uint64_t)v13, (uint64_t)v10, &qword_100184760);
  sub_10000F330((uint64_t)v16, a4, &qword_100184710);
  uint64_t v22 = sub_10000AA4C(&qword_100184770);
  sub_10000F330((uint64_t)v10, a4 + *(int *)(v22 + 48), &qword_100184760);
  sub_10000F394((uint64_t)v13, &qword_100184760);
  sub_10000F394((uint64_t)v19, &qword_100184710);
  sub_10000F394((uint64_t)v10, &qword_100184760);
  return sub_10000F394((uint64_t)v16, &qword_100184710);
}

uint64_t sub_1000C54E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000AA4C(&qword_100184398);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = sub_10000AA4C(&qword_1001842D0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v24 - v18;
  *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
  *((void *)v19 + 1) = 0x4024000000000000;
  v19[16] = 0;
  uint64_t v20 = sub_10000AA4C(&qword_100184350);
  sub_1000C76F8(a3, a1, a2, (uint64_t)&v19[*(int *)(v20 + 44)]);
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4024000000000000;
  v13[16] = 0;
  uint64_t v21 = sub_10000AA4C(&qword_1001843A0);
  sub_1000CD5E4(a3, a1, a2, (uint64_t)&v13[*(int *)(v21 + 44)]);
  sub_10000F330((uint64_t)v19, (uint64_t)v16, &qword_1001842D0);
  sub_10000F330((uint64_t)v13, (uint64_t)v10, &qword_100184398);
  sub_10000F330((uint64_t)v16, a4, &qword_1001842D0);
  uint64_t v22 = sub_10000AA4C(&qword_1001843A8);
  sub_10000F330((uint64_t)v10, a4 + *(int *)(v22 + 48), &qword_100184398);
  sub_10000F394((uint64_t)v13, &qword_100184398);
  sub_10000F394((uint64_t)v19, &qword_1001842D0);
  sub_10000F394((uint64_t)v10, &qword_100184398);
  return sub_10000F394((uint64_t)v16, &qword_1001842D0);
}

uint64_t sub_1000C56F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000AA4C(&qword_1001845F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = sub_10000AA4C(&qword_1001845A0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v24 - v18;
  *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
  *((void *)v19 + 1) = 0x4024000000000000;
  v19[16] = 0;
  uint64_t v20 = sub_10000AA4C(&qword_1001845D0);
  sub_1000C8054(a3, a1, a2, (uint64_t)&v19[*(int *)(v20 + 44)]);
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4024000000000000;
  v13[16] = 0;
  uint64_t v21 = sub_10000AA4C(&qword_1001845F8);
  sub_1000CDC54(a3, a1, a2, (uint64_t)&v13[*(int *)(v21 + 44)]);
  sub_10000F330((uint64_t)v19, (uint64_t)v16, &qword_1001845A0);
  sub_10000F330((uint64_t)v13, (uint64_t)v10, &qword_1001845F0);
  sub_10000F330((uint64_t)v16, a4, &qword_1001845A0);
  uint64_t v22 = sub_10000AA4C(&qword_100184600);
  sub_10000F330((uint64_t)v10, a4 + *(int *)(v22 + 48), &qword_1001845F0);
  sub_10000F394((uint64_t)v13, &qword_1001845F0);
  sub_10000F394((uint64_t)v19, &qword_1001845A0);
  sub_10000F394((uint64_t)v10, &qword_1001845F0);
  return sub_10000F394((uint64_t)v16, &qword_1001845A0);
}

uint64_t sub_1000C5904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v83 = a6;
  uint64_t v7 = type metadata accessor for DeviceLockState();
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  *(void *)&long long v79 = (char *)&v67 - v10;
  uint64_t v71 = type metadata accessor for Font.TextStyle();
  uint64_t v11 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v72);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000AA4C(&qword_100184508);
  __chkstk_darwin(v73);
  uint64_t v93 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v94 = (uint64_t)&v67 - v21;
  uint64_t v68 = type metadata accessor for AirDropAskRequestView();
  uint64_t v22 = *(int *)(v68 + 20);
  uint64_t v70 = a1;
  uint64_t v78 = a1 + v22;
  uint64_t v23 = type metadata accessor for AirDropTransferSession();
  uint64_t v24 = sub_1000D6260((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
  swift_retain();
  uint64_t v69 = v23;
  uint64_t v67 = v24;
  uint64_t v25 = ObservedObject.init(wrappedValue:)();
  uint64_t v91 = v26;
  uint64_t v92 = v25;
  id v90 = [objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
  if (qword_10017F600 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v89 = LOBYTE(v104[0]);
  if (qword_10017F720 != -1) {
    swift_once();
  }
  uint64_t v27 = v77;
  if (qword_10017F730 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  unsigned __int8 v28 = v125;
  uint64_t v85 = v124;
  uint64_t v86 = v126;
  unsigned __int8 v29 = v127;
  uint64_t v84 = v128;
  uint64_t v88 = v129;
  int v87 = static Edge.Set.all.getter();
  unsigned __int8 v135 = v28;
  unsigned __int8 v133 = v29;
  unsigned __int8 v130 = 0;
  uint64_t v30 = qword_10017F748;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = qword_10018D030;
  v104[0] = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Font.TextStyle.subheadline(_:), v71);
  sub_100053610();
  swift_retain();
  uint64_t v32 = v75;
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v33 = v72;
  uint64_t v34 = &v15[*(int *)(v72 + 20)];
  *(void *)uint64_t v34 = v74;
  *((void *)v34 + 1) = v32;
  uint64_t v35 = &v15[*(int *)(v33 + 24)];
  *(void *)uint64_t v35 = v76;
  *((void *)v35 + 1) = v27;
  *((void *)v35 + 2) = v31;
  *((void *)v35 + 3) = 2;
  v35[32] = 0;
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, 0.0, 1);
  sub_1000D5274((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirDropDescriptionView);
  char v36 = static Edge.Set.all.getter();
  uint64_t v37 = v93;
  sub_10000F330((uint64_t)v18, v93, (uint64_t *)&unk_100185E30);
  uint64_t v38 = v37 + *(int *)(v73 + 36);
  *(unsigned char *)uint64_t v38 = v36;
  *(void *)(v38 + 8) = 0x4010000000000000;
  *(void *)(v38 + 16) = 0;
  *(void *)(v38 + 24) = 0;
  *(void *)(v38 + 32) = 0;
  *(unsigned char *)(v38 + 40) = 0;
  sub_10000F394((uint64_t)v18, (uint64_t *)&unk_100185E30);
  sub_10000F2CC(v37, v94, &qword_100184508);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v39 = v79;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v80;
  uint64_t v40 = v81;
  uint64_t v42 = v82;
  (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DeviceLockState.unlocked(_:), v82);
  char v43 = static DeviceLockState.== infix(_:_:)();
  uint64_t v44 = *(void (**)(void, void))(v40 + 8);
  v44(v41, v42);
  v44(v39, v42);
  if (v43)
  {
    uint64_t v82 = *(unsigned __int8 *)(v70 + *(int *)(v68 + 24));
    swift_retain();
    uint64_t v45 = ObservedObject.init(wrappedValue:)();
    uint64_t v47 = v46;
    uint64_t v48 = 1;
    char v49 = 1;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v47 = 0;
    uint64_t v82 = 0;
    uint64_t v48 = 0;
    char v49 = 0;
  }
  unsigned __int8 v50 = v135;
  LODWORD(v80) = v135;
  unsigned __int8 v51 = v133;
  LODWORD(v81) = v133;
  int v52 = v130;
  uint64_t v53 = v93;
  sub_10000F330(v94, v93, &qword_100184508);
  *(void *)&long long v95 = v92;
  *((void *)&v95 + 1) = v91;
  LOBYTE(v96) = 1;
  *(_DWORD *)((char *)&v96 + 1) = v137[0];
  DWORD1(v96) = *(_DWORD *)((char *)v137 + 3);
  *((void *)&v96 + 1) = v90;
  LOBYTE(v97) = v89;
  *(_DWORD *)((char *)&v97 + 1) = *(_DWORD *)v136;
  DWORD1(v97) = *(_DWORD *)&v136[3];
  *((void *)&v97 + 1) = v85;
  LOBYTE(v98) = v50;
  *(_DWORD *)((char *)&v98 + 1) = *(_DWORD *)v134;
  DWORD1(v98) = *(_DWORD *)&v134[3];
  *((void *)&v98 + 1) = v86;
  LOBYTE(v99) = v51;
  *(_DWORD *)((char *)&v99 + 1) = *(_DWORD *)v132;
  DWORD1(v99) = *(_DWORD *)&v132[3];
  *((void *)&v99 + 1) = v84;
  *(void *)&long long v100 = v88;
  BYTE8(v100) = v87;
  *(_DWORD *)((char *)&v100 + 9) = *(_DWORD *)v131;
  HIDWORD(v100) = *(_DWORD *)&v131[3];
  long long v79 = xmmword_10012EA00;
  long long v101 = xmmword_10012EA00;
  long long v102 = 0uLL;
  char v54 = v52;
  LODWORD(v78) = v52;
  char v103 = v52;
  long long v55 = v95;
  long long v56 = v96;
  long long v57 = v98;
  uint64_t v58 = v83;
  *(_OWORD *)(v83 + 32) = v97;
  *(_OWORD *)(v58 + 48) = v57;
  *(_OWORD *)uint64_t v58 = v55;
  *(_OWORD *)(v58 + 16) = v56;
  long long v59 = v99;
  long long v60 = v100;
  long long v61 = v101;
  long long v62 = v102;
  *(unsigned char *)(v58 + 128) = v54;
  *(_OWORD *)(v58 + 96) = v61;
  *(_OWORD *)(v58 + 112) = v62;
  *(_OWORD *)(v58 + 64) = v59;
  *(_OWORD *)(v58 + 80) = v60;
  uint64_t v63 = sub_10000AA4C(&qword_100184510);
  sub_10000F330(v53, v58 + *(int *)(v63 + 48), &qword_100184508);
  uint64_t v64 = v58 + *(int *)(v63 + 64);
  *(void *)uint64_t v64 = v45;
  *(void *)(v64 + 8) = v47;
  uint64_t v65 = v82;
  *(void *)(v64 + 16) = v82;
  *(void *)(v64 + 24) = 0;
  *(void *)(v64 + 32) = v48;
  *(unsigned char *)(v64 + 40) = v49;
  sub_1000D5794((uint64_t)&v95);
  sub_100056C4C(v45, v47, v65, 0, v48);
  sub_10000F394(v94, &qword_100184508);
  sub_100056D38(v45, v47, v65, 0, v48);
  sub_10000F394(v53, &qword_100184508);
  v104[0] = v92;
  v104[1] = v91;
  char v105 = 1;
  *(_DWORD *)uint64_t v106 = v137[0];
  *(_DWORD *)&v106[3] = *(_DWORD *)((char *)v137 + 3);
  id v107 = v90;
  char v108 = v89;
  *(_DWORD *)uint64_t v109 = *(_DWORD *)v136;
  *(_DWORD *)&v109[3] = *(_DWORD *)&v136[3];
  uint64_t v110 = v85;
  char v111 = (char)v80;
  *(_DWORD *)uint64_t v112 = *(_DWORD *)v134;
  *(_DWORD *)&v112[3] = *(_DWORD *)&v134[3];
  uint64_t v113 = v86;
  char v114 = v81;
  *(_DWORD *)v115 = *(_DWORD *)v132;
  *(_DWORD *)&v115[3] = *(_DWORD *)&v132[3];
  uint64_t v116 = v84;
  uint64_t v117 = v88;
  char v118 = v87;
  *(_DWORD *)v119 = *(_DWORD *)v131;
  *(_DWORD *)&v119[3] = *(_DWORD *)&v131[3];
  long long v120 = v79;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  char v123 = v78;
  return sub_1000D57C8((uint64_t)v104);
}

uint64_t sub_1000C62D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v53 = a6;
  char v54 = (char *)a5;
  uint64_t v10 = type metadata accessor for DeviceLockState();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = sub_10000AA4C(&qword_100184378);
  __chkstk_darwin(v17 - 8);
  uint64_t v55 = (uint64_t)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v50 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v50 - v23;
  *(void *)uint64_t v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0;
  v21[16] = 0;
  uint64_t v25 = sub_10000AA4C(&qword_100184380);
  sub_1000C6728(a2, a3, a4, (uint64_t)v54, (uint64_t)&v21[*(int *)(v25 + 44)]);
  char v54 = v24;
  sub_10000F2CC((uint64_t)v21, (uint64_t)v24, &qword_100184378);
  uint64_t v51 = type metadata accessor for AirDropAskRequestView();
  uint64_t v52 = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DeviceLockState.unlocked(_:), v10);
  LOBYTE(a1) = static DeviceLockState.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v13, v10);
  v26(v16, v10);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (a1)
  {
    uint64_t v29 = *(unsigned __int8 *)(v52 + *(int *)(v51 + 24));
    type metadata accessor for AirDropTransferSession();
    sub_1000D6260((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
    swift_retain();
    uint64_t v27 = ObservedObject.init(wrappedValue:)();
    uint64_t v28 = v36;
    unsigned __int8 v37 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v32 = v38;
    uint64_t v33 = v39;
    uint64_t v34 = v40;
    uint64_t v35 = v41;
    uint64_t v31 = v37;
    uint64_t v30 = 1;
  }
  uint64_t v52 = v32;
  uint64_t v42 = v29;
  uint64_t v43 = v55;
  uint64_t v44 = v35;
  sub_10000F330((uint64_t)v54, v55, &qword_100184378);
  uint64_t v45 = v43;
  uint64_t v46 = v53;
  sub_10000F330(v45, v53, &qword_100184378);
  uint64_t v47 = v46 + *(int *)(sub_10000AA4C(&qword_100184388) + 48);
  *(void *)uint64_t v47 = v27;
  *(void *)(v47 + 8) = v28;
  *(void *)(v47 + 16) = v29;
  *(void *)(v47 + 24) = 0;
  *(void *)(v47 + 32) = v30;
  *(void *)(v47 + 40) = v30;
  uint64_t v48 = v52;
  *(void *)(v47 + 48) = v31;
  *(void *)(v47 + 56) = v48;
  *(void *)(v47 + 64) = v33;
  *(void *)(v47 + 72) = v34;
  *(void *)(v47 + 80) = v44;
  *(unsigned char *)(v47 + 88) = 0;
  sub_100056C4C(v27, v28, v42, 0, v30);
  sub_10000F394((uint64_t)v54, &qword_100184378);
  sub_100056D38(v27, v28, v42, 0, v30);
  return sub_10000F394(v55, &qword_100184378);
}

uint64_t sub_1000C6728@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v49 = a1;
  uint64_t v45 = type metadata accessor for Font.TextStyle();
  uint64_t v7 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v48);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - v15;
  type metadata accessor for AirDropAskRequestView();
  type metadata accessor for AirDropTransferSession();
  sub_1000D6260((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
  swift_retain();
  uint64_t v44 = ObservedObject.init(wrappedValue:)();
  uint64_t v52 = v17;
  id v46 = [objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
  if (qword_10017F600 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v43 = v60;
  if (qword_10017F718 != -1) {
    swift_once();
  }
  if (qword_10017F728 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v42 = v54;
  int v41 = v55;
  uint64_t v40 = v56;
  int v39 = v57;
  uint64_t v38 = v58;
  uint64_t v37 = v59;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v36 = v60;
  int v35 = v61;
  uint64_t v34 = v62;
  int v33 = v63;
  uint64_t v32 = v64;
  uint64_t v31 = v65;
  uint64_t v18 = qword_10017F748;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_10018D030;
  uint64_t v53 = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v47, enum case for Font.TextStyle.subheadline(_:), v45);
  sub_100053610();
  swift_retain();
  uint64_t v20 = v50;
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v21 = v48;
  uint64_t v22 = &v10[*(int *)(v48 + 20)];
  *(void *)uint64_t v22 = v49;
  *((void *)v22 + 1) = v20;
  uint64_t v23 = &v10[*(int *)(v21 + 24)];
  *(void *)uint64_t v23 = v51;
  *((void *)v23 + 1) = a4;
  *((void *)v23 + 2) = v19;
  *((void *)v23 + 3) = 0;
  v23[32] = 1;
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1);
  sub_1000D5274((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirDropDescriptionView);
  sub_10000F2CC((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_100185E30);
  sub_10000F330((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_100185E30);
  uint64_t v24 = v52;
  *(void *)a5 = v44;
  *(void *)(a5 + 8) = v24;
  *(unsigned char *)(a5 + 16) = 1;
  uint64_t v25 = v46;
  *(void *)(a5 + 24) = v46;
  *(unsigned char *)(a5 + 32) = v43;
  *(void *)(a5 + 40) = v42;
  *(unsigned char *)(a5 + 48) = v41;
  *(void *)(a5 + 56) = v40;
  *(unsigned char *)(a5 + 64) = v39;
  uint64_t v26 = v37;
  *(void *)(a5 + 72) = v38;
  *(void *)(a5 + 80) = v26;
  *(void *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 96) = 1;
  *(void *)(a5 + 104) = v36;
  *(unsigned char *)(a5 + 112) = v35;
  *(void *)(a5 + 120) = v34;
  *(unsigned char *)(a5 + 128) = v33;
  uint64_t v27 = v31;
  *(void *)(a5 + 136) = v32;
  *(void *)(a5 + 144) = v27;
  uint64_t v28 = sub_10000AA4C(&qword_100184390);
  sub_10000F330((uint64_t)v13, a5 + *(int *)(v28 + 64), (uint64_t *)&unk_100185E30);
  swift_retain();
  id v29 = v25;
  sub_10000F394((uint64_t)v16, (uint64_t *)&unk_100185E30);
  sub_10000F394((uint64_t)v13, (uint64_t *)&unk_100185E30);

  return swift_release();
}

uint64_t sub_1000C6D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v7 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v89 = (uint64_t)&v69 - v10;
  uint64_t v11 = sub_10000AA4C(&qword_100184790);
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v84 = v11;
  __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v69 - v14;
  uint64_t v15 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for AirDropAskRequestView();
  uint64_t v87 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v79 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v69 - v21;
  uint64_t v23 = sub_10000AA4C(&qword_100182C50);
  uint64_t v75 = *(void *)(v23 - 8);
  uint64_t v76 = v23;
  __chkstk_darwin(v23);
  uint64_t v73 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v77 = *(void *)(v25 - 8);
  uint64_t v78 = v25;
  __chkstk_darwin(v25);
  uint64_t v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v71 = (char *)&v69 - v28;
  uint64_t v29 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v29 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  int v33 = (char *)&v69 - v32;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v33, 1, 1, v78);
  }
  else
  {
    sub_100022920(a2, (uint64_t)v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
    unint64_t v34 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    uint64_t v35 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v70 = a3;
    uint64_t v36 = a2;
    unint64_t v37 = (v86 + v35 + v34) & ~v35;
    uint64_t v38 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v22, v38 + v34);
    unint64_t v39 = v38 + v37;
    a2 = v36;
    uint64_t v40 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v39, v18, v15);
    __chkstk_darwin(v40);
    int v41 = v73;
    Button.init(action:label:)();
    uint64_t v42 = 3;
    if (*(unsigned char *)(v36 + *(int *)(v74 + 24))) {
      uint64_t v42 = 1;
    }
    uint64_t v90 = v42;
    char v91 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    int v43 = v72;
    uint64_t v44 = v76;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v44);
    uint64_t v45 = v77;
    uint64_t v46 = v78;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    uint64_t v48 = v71;
    v47(v71, v43, v78);
    v47(v33, v48, v46);
    a3 = v70;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v33, 0, 1, v46);
  }
  uint64_t v49 = (uint64_t)v33;
  uint64_t v90 = a3;
  uint64_t v50 = v79;
  sub_100022920(a2, v79);
  unint64_t v51 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
  uint64_t v52 = swift_allocObject();
  sub_1000D4C8C(v50, v52 + v51);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_100184798);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_1001847A0, &qword_100184798);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_1001847A8, &qword_100181480);
  ForEach<>.init(_:content:)();
  char v53 = sub_1000BF094();
  uint64_t v54 = v89;
  if (v53)
  {
    sub_1000CCC8C(v89);
    uint64_t v55 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
  }
  else
  {
    uint64_t v56 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 1, 1, v56);
  }
  uint64_t v57 = v80;
  sub_10000F330((uint64_t)v33, v80, &qword_1001843C0);
  uint64_t v58 = v83;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  uint64_t v60 = v81;
  unsigned __int8 v61 = v88;
  uint64_t v87 = v49;
  uint64_t v62 = v84;
  v59(v81, v88, v84);
  uint64_t v63 = v54;
  uint64_t v64 = v82;
  sub_10000F330(v63, v82, &qword_1001843D8);
  uint64_t v65 = v85;
  sub_10000F330(v57, v85, &qword_1001843C0);
  uint64_t v66 = sub_10000AA4C(&qword_1001847D8);
  v59((char *)(v65 + *(int *)(v66 + 48)), v60, v62);
  sub_10000F330(v64, v65 + *(int *)(v66 + 64), &qword_1001843D8);
  sub_10000F394(v89, &qword_1001843D8);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v58 + 8);
  v67(v61, v62);
  sub_10000F394(v87, &qword_1001843C0);
  sub_10000F394(v64, &qword_1001843D8);
  v67(v60, v62);
  return sub_10000F394(v57, &qword_1001843C0);
}

uint64_t sub_1000C76F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v7 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v89 = (uint64_t)&v69 - v10;
  uint64_t v11 = sub_10000AA4C(&qword_1001843E0);
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v84 = v11;
  __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v69 - v14;
  uint64_t v15 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for AirDropAskRequestView();
  uint64_t v87 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v79 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v69 - v21;
  uint64_t v23 = sub_10000AA4C(&qword_100182C50);
  uint64_t v75 = *(void *)(v23 - 8);
  uint64_t v76 = v23;
  __chkstk_darwin(v23);
  uint64_t v73 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v77 = *(void *)(v25 - 8);
  uint64_t v78 = v25;
  __chkstk_darwin(v25);
  uint64_t v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v71 = (char *)&v69 - v28;
  uint64_t v29 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v29 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  int v33 = (char *)&v69 - v32;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v33, 1, 1, v78);
  }
  else
  {
    sub_100022920(a2, (uint64_t)v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
    unint64_t v34 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    uint64_t v35 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v70 = a3;
    uint64_t v36 = a2;
    unint64_t v37 = (v86 + v35 + v34) & ~v35;
    uint64_t v38 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v22, v38 + v34);
    unint64_t v39 = v38 + v37;
    a2 = v36;
    uint64_t v40 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v39, v18, v15);
    __chkstk_darwin(v40);
    int v41 = v73;
    Button.init(action:label:)();
    uint64_t v42 = 3;
    if (*(unsigned char *)(v36 + *(int *)(v74 + 24))) {
      uint64_t v42 = 1;
    }
    uint64_t v90 = v42;
    char v91 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    int v43 = v72;
    uint64_t v44 = v76;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v44);
    uint64_t v45 = v77;
    uint64_t v46 = v78;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    uint64_t v48 = v71;
    v47(v71, v43, v78);
    v47(v33, v48, v46);
    a3 = v70;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v33, 0, 1, v46);
  }
  uint64_t v49 = (uint64_t)v33;
  uint64_t v90 = a3;
  uint64_t v50 = v79;
  sub_100022920(a2, v79);
  unint64_t v51 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
  uint64_t v52 = swift_allocObject();
  sub_1000D4C8C(v50, v52 + v51);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_1001843E8);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_1001843F8, &qword_1001843E8);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_100184428, &qword_100184430);
  ForEach<>.init(_:content:)();
  char v53 = sub_1000BF094();
  uint64_t v54 = v89;
  if (v53)
  {
    sub_1000CCC8C(v89);
    uint64_t v55 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
  }
  else
  {
    uint64_t v56 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 1, 1, v56);
  }
  uint64_t v57 = v80;
  sub_10000F330((uint64_t)v33, v80, &qword_1001843C0);
  uint64_t v58 = v83;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  uint64_t v60 = v81;
  unsigned __int8 v61 = v88;
  uint64_t v87 = v49;
  uint64_t v62 = v84;
  v59(v81, v88, v84);
  uint64_t v63 = v54;
  uint64_t v64 = v82;
  sub_10000F330(v63, v82, &qword_1001843D8);
  uint64_t v65 = v85;
  sub_10000F330(v57, v85, &qword_1001843C0);
  uint64_t v66 = sub_10000AA4C(&qword_100184500);
  v59((char *)(v65 + *(int *)(v66 + 48)), v60, v62);
  sub_10000F330(v64, v65 + *(int *)(v66 + 64), &qword_1001843D8);
  sub_10000F394(v89, &qword_1001843D8);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v58 + 8);
  v67(v61, v62);
  sub_10000F394(v87, &qword_1001843C0);
  sub_10000F394(v64, &qword_1001843D8);
  v67(v60, v62);
  return sub_10000F394(v57, &qword_1001843C0);
}

uint64_t sub_1000C8054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v7 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v89 = (uint64_t)&v69 - v10;
  uint64_t v11 = sub_10000AA4C(&qword_100184620);
  uint64_t v83 = *(void *)(v11 - 8);
  uint64_t v84 = v11;
  __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v69 - v14;
  uint64_t v15 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for AirDropAskRequestView();
  uint64_t v87 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v79 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v69 - v21;
  uint64_t v23 = sub_10000AA4C(&qword_100182C50);
  uint64_t v75 = *(void *)(v23 - 8);
  uint64_t v76 = v23;
  __chkstk_darwin(v23);
  uint64_t v73 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v77 = *(void *)(v25 - 8);
  uint64_t v78 = v25;
  __chkstk_darwin(v25);
  uint64_t v72 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v71 = (char *)&v69 - v28;
  uint64_t v29 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v29 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  int v33 = (char *)&v69 - v32;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v33, 1, 1, v78);
  }
  else
  {
    sub_100022920(a2, (uint64_t)v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
    unint64_t v34 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    uint64_t v35 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v70 = a3;
    uint64_t v36 = a2;
    unint64_t v37 = (v86 + v35 + v34) & ~v35;
    uint64_t v38 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v22, v38 + v34);
    unint64_t v39 = v38 + v37;
    a2 = v36;
    uint64_t v40 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(v39, v18, v15);
    __chkstk_darwin(v40);
    int v41 = v73;
    Button.init(action:label:)();
    uint64_t v42 = 3;
    if (*(unsigned char *)(v36 + *(int *)(v74 + 24))) {
      uint64_t v42 = 1;
    }
    uint64_t v90 = v42;
    char v91 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    int v43 = v72;
    uint64_t v44 = v76;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v44);
    uint64_t v45 = v77;
    uint64_t v46 = v78;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    uint64_t v48 = v71;
    v47(v71, v43, v78);
    v47(v33, v48, v46);
    a3 = v70;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v33, 0, 1, v46);
  }
  uint64_t v49 = (uint64_t)v33;
  uint64_t v90 = a3;
  uint64_t v50 = v79;
  sub_100022920(a2, v79);
  unint64_t v51 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
  uint64_t v52 = swift_allocObject();
  sub_1000D4C8C(v50, v52 + v51);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_100184628);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_100184630, &qword_100184628);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_100184638, &qword_100184640);
  ForEach<>.init(_:content:)();
  char v53 = sub_1000BF094();
  uint64_t v54 = v89;
  if (v53)
  {
    sub_1000CCC8C(v89);
    uint64_t v55 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
  }
  else
  {
    uint64_t v56 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 1, 1, v56);
  }
  uint64_t v57 = v80;
  sub_10000F330((uint64_t)v33, v80, &qword_1001843C0);
  uint64_t v58 = v83;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  uint64_t v60 = v81;
  unsigned __int8 v61 = v88;
  uint64_t v87 = v49;
  uint64_t v62 = v84;
  v59(v81, v88, v84);
  uint64_t v63 = v54;
  uint64_t v64 = v82;
  sub_10000F330(v63, v82, &qword_1001843D8);
  uint64_t v65 = v85;
  sub_10000F330(v57, v85, &qword_1001843C0);
  uint64_t v66 = sub_10000AA4C(&qword_100184690);
  v59((char *)(v65 + *(int *)(v66 + 48)), v60, v62);
  sub_10000F330(v64, v65 + *(int *)(v66 + 64), &qword_1001843D8);
  sub_10000F394(v89, &qword_1001843D8);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v58 + 8);
  v67(v61, v62);
  sub_10000F394(v87, &qword_1001843C0);
  sub_10000F394(v64, &qword_1001843D8);
  v67(v60, v62);
  return sub_10000F394(v57, &qword_1001843C0);
}

uint64_t sub_1000C89B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_100184040);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "User declined AirDrop", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v14 + v13, (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v7, &qword_1001829C0);
}

uint64_t sub_1000C8C50@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100181470);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100181480);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    unint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    uint64_t v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_1001814B8);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    uint64_t v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100182C20) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100182B88);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000C9840@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100184470);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100184430);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    unint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    uint64_t v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_1001844C8);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    uint64_t v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100184478) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100184480);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000CA430@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100184650);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100184640);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    unint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    uint64_t v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_100184668);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    uint64_t v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100184658) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100184660);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000CB020(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = sub_10000AA4C(&qword_100181470);
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v37 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v38 = a1;
  if (sub_1000D14C4(a1, &qword_100181470) == 0xD000000000000010 && v15 == 0x8000000100133900)
  {
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
    if ((v16 & 1) == 0)
    {
      sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v17 = v41;
  sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
  if ((v17 & 1) == 0)
  {
    if (qword_10017F7B0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_100184040);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "User chose to show sensitive content", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    sub_100022920(v2, (uint64_t)v11);
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v11, v24 + v23);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = &unk_1001847C8;
    *(void *)(v25 + 24) = v24;
    goto LABEL_17;
  }
LABEL_12:
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10000B150(v26, (uint64_t)qword_100184040);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "User accepted AirDrop", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 1, 1, v30);
  uint64_t v31 = v39;
  uint64_t v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, v38, v40);
  unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v34 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v34 + v33, v31, v32);
LABEL_17:
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v8, &qword_1001829C0);
}

uint64_t sub_1000CB61C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = sub_10000AA4C(&qword_100184470);
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v37 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v38 = a1;
  if (sub_1000D14C4(a1, &qword_100184470) == 0xD000000000000010 && v15 == 0x8000000100133900)
  {
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
    if ((v16 & 1) == 0)
    {
      sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v17 = v41;
  sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
  if ((v17 & 1) == 0)
  {
    if (qword_10017F7B0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_100184040);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "User chose to show sensitive content", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    sub_100022920(v2, (uint64_t)v11);
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v11, v24 + v23);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = &unk_1001844E8;
    *(void *)(v25 + 24) = v24;
    goto LABEL_17;
  }
LABEL_12:
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10000B150(v26, (uint64_t)qword_100184040);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "User accepted AirDrop", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 1, 1, v30);
  uint64_t v31 = v39;
  uint64_t v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, v38, v40);
  unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v34 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v34 + v33, v31, v32);
LABEL_17:
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v8, &qword_1001829C0);
}

uint64_t sub_1000CBC18(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = sub_10000AA4C(&qword_100184650);
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v37 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v38 = a1;
  if (sub_1000D14C4(a1, &qword_100184650) == 0xD000000000000010 && v15 == 0x8000000100133900)
  {
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100022920(v2, (uint64_t)v14);
    if ((v16 & 1) == 0)
    {
      sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v17 = v41;
  sub_1000D5274((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
  if ((v17 & 1) == 0)
  {
    if (qword_10017F7B0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_100184040);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "User chose to show sensitive content", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    sub_100022920(v2, (uint64_t)v11);
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v11, v24 + v23);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = &unk_100184680;
    *(void *)(v25 + 24) = v24;
    goto LABEL_17;
  }
LABEL_12:
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10000B150(v26, (uint64_t)qword_100184040);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "User accepted AirDrop", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 1, 1, v30);
  uint64_t v31 = v39;
  uint64_t v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, v38, v40);
  unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v34 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v34 + v33, v31, v32);
LABEL_17:
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v8, &qword_1001829C0);
}

uint64_t sub_1000CC214@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000CC22C(a1, &qword_100181470, a2);
}

uint64_t sub_1000CC220@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000CC22C(a1, &qword_100184470, a2);
}

uint64_t sub_1000CC22C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v59 = a3;
  uint64_t v58 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v7 = (void *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for AirDropAskRequestView();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000D14C4(a1, a2) == 0xD000000000000010 && v13 == 0x8000000100133900)
  {
    swift_bridgeObjectRelease();
    sub_100022920(v3, (uint64_t)v12);
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_100022920(v3, (uint64_t)v12);
    if ((v14 & 1) == 0)
    {
      sub_1000D5274((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
      goto LABEL_8;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  char v15 = v62;
  sub_1000D5274((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirDropAskRequestView);
  if (v15)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    *(void *)&long long v62 = String.init(localized:table:bundle:locale:comment:)();
    *((void *)&v62 + 1) = v16;
    sub_100054CC0();
    *(void *)uint64_t v60 = Text.init<A>(_:)();
    *(void *)&v60[8] = v18;
    *(void *)&v60[16] = v17 & 1;
    *(void *)&v60[24] = v19;
    *(_OWORD *)&v60[32] = 0u;
    memset(v61, 0, 19);
    sub_10000AA4C(&qword_1001844A0);
    sub_1000D50D8(&qword_100184498, &qword_1001844A0, (void (*)(void))sub_1000D5160, (void (*)(void))sub_1000D51D4);
    uint64_t result = _ConditionalContent<>.init(storage:)();
    long long v21 = v62;
    long long v22 = v63;
    long long v23 = v64;
    long long v24 = v65;
    __int16 v25 = v66;
    goto LABEL_20;
  }
LABEL_8:
  sub_10000AA4C(a2);
  SFAirDrop.AcceptAction.Single.buttonConfiguration.getter();
  uint64_t v26 = v57;
  uint64_t v27 = v58;
  int v28 = (*(uint64_t (**)(void *, uint64_t))(v57 + 88))(v7, v58);
  if (v28 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    (*(void (**)(void *, uint64_t))(v26 + 96))(v7, v27);
    uint64_t v29 = v7[1];
    *(void *)&long long v62 = *v7;
    *((void *)&v62 + 1) = v29;
    sub_100054CC0();
    uint64_t v30 = Text.init<A>(_:)();
    uint64_t v32 = v31;
    *(void *)uint64_t v60 = v30;
    *(void *)&v60[8] = v31;
    char v34 = v33 & 1;
    *(void *)&v60[16] = v33 & 1;
    *(void *)&v60[24] = v35;
    v60[32] = 0;
    sub_100055180(v30, v31, v33 & 1);
    swift_bridgeObjectRetain();
    _ConditionalContent<>.init(storage:)();
    *(_OWORD *)uint64_t v60 = v62;
    *(_OWORD *)&v60[16] = v63;
    *(_OWORD *)&v60[32] = v64;
    memset(v61, 0, 18);
    sub_10000AA4C(&qword_1001844B0);
    sub_10000AA4C(&qword_1001844C0);
    sub_1000D5160();
    sub_1000D51D4();
    _ConditionalContent<>.init(storage:)();
LABEL_14:
    sub_100054D14(v30, v32, v34);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v28 != enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
  {
    if (v28 != enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      LocalizedStringKey.init(stringLiteral:)();
      uint64_t v46 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v48 = v47;
      char v50 = v49 & 1;
      *(void *)uint64_t v60 = v46;
      *(void *)&v60[8] = v47;
      *(void *)&v60[16] = v49 & 1;
      *(void *)&v60[24] = v51;
      *(_OWORD *)&v60[32] = 0u;
      v61[0] = 0u;
      LOBYTE(v61[1]) = 1;
      sub_100055180(v46, v47, v49 & 1);
      swift_bridgeObjectRetain();
      uint64_t v52 = v26;
      sub_10000AA4C(&qword_100182C98);
      sub_10000F288(&qword_100182CA0, &qword_100182C98);
      _ConditionalContent<>.init(storage:)();
      *(_OWORD *)uint64_t v60 = v62;
      *(_OWORD *)&v60[16] = v63;
      *(_OWORD *)&v60[32] = v64;
      v61[0] = v65;
      LOBYTE(v61[1]) = v66;
      BYTE1(v61[1]) = 1;
      sub_10000AA4C(&qword_1001844B0);
      sub_10000AA4C(&qword_1001844C0);
      sub_1000D5160();
      sub_1000D51D4();
      _ConditionalContent<>.init(storage:)();
      sub_100054D14(v46, v48, v50);
      swift_bridgeObjectRelease();
      long long v56 = v62;
      long long v55 = v63;
      long long v54 = v64;
      long long v53 = v65;
      __int16 v41 = v66;
      int v42 = HIBYTE(v66);
      (*(void (**)(void *, uint64_t))(v52 + 8))(v7, v27);
      long long v40 = v53;
      long long v39 = v54;
      long long v38 = v55;
      long long v37 = v56;
      goto LABEL_16;
    }
    (*(void (**)(void *, uint64_t))(v26 + 96))(v7, v27);
    uint64_t v36 = static VerticalAlignment.center.getter();
    sub_100083330((uint64_t)&v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = *((void *)&v62 + 1);
    uint64_t v32 = v63;
    char v34 = BYTE8(v63);
    *(void *)uint64_t v60 = v36;
    *(_OWORD *)&v60[8] = xmmword_1001296E0;
    *(_OWORD *)&v60[24] = v62;
    *(void *)&v60[40] = v63;
    *(void *)&v61[0] = BYTE8(v63);
    *((void *)&v61[0] + 1) = v64;
    LOBYTE(v61[1]) = 0;
    swift_retain();
    sub_100055180(v30, v32, v34);
    swift_bridgeObjectRetain();
    sub_10000AA4C(&qword_100182C98);
    sub_10000F288(&qword_100182CA0, &qword_100182C98);
    _ConditionalContent<>.init(storage:)();
    *(_OWORD *)uint64_t v60 = v62;
    *(_OWORD *)&v60[16] = v63;
    *(_OWORD *)&v60[32] = v64;
    v61[0] = v65;
    LOBYTE(v61[1]) = v66;
    BYTE1(v61[1]) = 1;
    sub_10000AA4C(&qword_1001844B0);
    sub_10000AA4C(&qword_1001844C0);
    sub_1000D5160();
    sub_1000D51D4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    goto LABEL_14;
  }
  (*(void (**)(void *, uint64_t))(v26 + 96))(v7, v27);
  *(_OWORD *)uint64_t v60 = (unint64_t)Image.init(systemName:)();
  *(_OWORD *)&v60[16] = 0uLL;
  v60[32] = 1;
  swift_retain();
  _ConditionalContent<>.init(storage:)();
  *(_OWORD *)uint64_t v60 = v62;
  *(_OWORD *)&v60[16] = v63;
  *(_OWORD *)&v60[32] = v64;
  memset(v61, 0, 18);
  sub_10000AA4C(&qword_1001844B0);
  sub_10000AA4C(&qword_1001844C0);
  sub_1000D5160();
  sub_1000D51D4();
  _ConditionalContent<>.init(storage:)();
  swift_release();
LABEL_15:
  long long v37 = v62;
  long long v38 = v63;
  long long v39 = v64;
  long long v40 = v65;
  __int16 v41 = v66;
  int v42 = HIBYTE(v66);
LABEL_16:
  if (v42) {
    __int16 v43 = 256;
  }
  else {
    __int16 v43 = 0;
  }
  *(_OWORD *)uint64_t v60 = v37;
  *(_OWORD *)&v60[16] = v38;
  *(_OWORD *)&v60[32] = v39;
  v61[0] = v40;
  LOWORD(v61[1]) = v43 | v41;
  BYTE2(v61[1]) = 1;
  sub_10000AA4C(&qword_1001844A0);
  sub_1000D50D8(&qword_100184498, &qword_1001844A0, (void (*)(void))sub_1000D5160, (void (*)(void))sub_1000D51D4);
  uint64_t result = _ConditionalContent<>.init(storage:)();
  long long v21 = v62;
  long long v22 = v63;
  long long v23 = v64;
  long long v24 = v65;
  __int16 v25 = v66;
LABEL_20:
  char v44 = v67;
  uint64_t v45 = v59;
  *unint64_t v59 = v21;
  v45[1] = v22;
  v45[2] = v23;
  v45[3] = v24;
  *((_WORD *)v45 + 32) = v25;
  *((unsigned char *)v45 + 66) = v44;
  return result;
}

uint64_t sub_1000CCC80@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000CC22C(a1, &qword_100184650, a2);
}

uint64_t sub_1000CCC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for AirDropAskRequestView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  uint64_t v20 = sub_10000AA4C(&qword_100182C60);
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000AA4C(&qword_100184438);
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022920(v1, (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1000D4C8C((uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  Button.init(action:label:)();
  uint64_t v15 = 4;
  if (*(unsigned char *)(v2 + *(int *)(v4 + 32))) {
    uint64_t v15 = 2;
  }
  uint64_t v22 = v15;
  char v23 = 2;
  sub_10000F288(&qword_100182C58, &qword_100182C60);
  sub_1000844B4();
  uint64_t v16 = v20;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21, v12, v19);
}

uint64_t sub_1000CCF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v68 = a2;
  uint64_t v62 = a4;
  uint64_t v5 = sub_10000AA4C(&qword_100184778);
  __chkstk_darwin(v5 - 8);
  uint64_t v61 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v63 = (uint64_t *)((char *)&v53 - v8);
  uint64_t v9 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v55 = v11;
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AirDropAskRequestView();
  uint64_t v13 = *(void *)(v58 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v58);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100182C50);
  uint64_t v60 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v59 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v57 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v56 = (char *)&v53 - v20;
  uint64_t v21 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  long long v64 = (char *)&v53 - v25;
  uint64_t v26 = a1;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    uint64_t v27 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v64, 1, 1, v67);
  }
  else
  {
    uint64_t v28 = v13;
    uint64_t v29 = v68;
    sub_100022920(v68, (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v53 = v26;
    v30(v12, v26, v9);
    unint64_t v31 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v32 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v54 = v16;
    unint64_t v33 = (v14 + v32 + v31) & ~v32;
    uint64_t v34 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v15, v34 + v31);
    uint64_t v35 = v29;
    uint64_t v36 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(v34 + v33, v12, v9);
    __chkstk_darwin(v36);
    *(&v53 - 2) = v53;
    long long v37 = v59;
    Button.init(action:label:)();
    uint64_t v38 = 3;
    if (*(unsigned char *)(v35 + *(int *)(v58 + 24))) {
      uint64_t v38 = 1;
    }
    uint64_t v69 = v38;
    char v70 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    long long v39 = v57;
    uint64_t v40 = v54;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v40);
    uint64_t v41 = v65;
    int v42 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    __int16 v43 = v56;
    char v44 = v39;
    uint64_t v45 = v67;
    v42(v56, v44, v67);
    uint64_t v27 = (uint64_t)v64;
    v42(v64, v43, v45);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v27, 0, 1, v45);
  }
  uint64_t v46 = static VerticalAlignment.center.getter();
  uint64_t v47 = (uint64_t)v63;
  *long long v63 = v46;
  *(void *)(v47 + 8) = 0x4024000000000000;
  *(unsigned char *)(v47 + 16) = 0;
  uint64_t v48 = sub_10000AA4C(&qword_100184780);
  sub_1000CE3D4(v66, v68, (char *)(v47 + *(int *)(v48 + 44)));
  sub_10000F330(v27, (uint64_t)v23, &qword_1001843C0);
  uint64_t v49 = v61;
  sub_10000F330(v47, v61, &qword_100184778);
  uint64_t v50 = v62;
  sub_10000F330((uint64_t)v23, v62, &qword_1001843C0);
  uint64_t v51 = sub_10000AA4C(&qword_100184788);
  sub_10000F330(v49, v50 + *(int *)(v51 + 48), &qword_100184778);
  sub_10000F394(v47, &qword_100184778);
  sub_10000F394(v27, &qword_1001843C0);
  sub_10000F394(v49, &qword_100184778);
  return sub_10000F394((uint64_t)v23, &qword_1001843C0);
}

uint64_t sub_1000CD5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v68 = a2;
  uint64_t v62 = a4;
  uint64_t v5 = sub_10000AA4C(&qword_1001843B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v61 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v63 = (uint64_t *)((char *)&v53 - v8);
  uint64_t v9 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v55 = v11;
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AirDropAskRequestView();
  uint64_t v13 = *(void *)(v58 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v58);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100182C50);
  uint64_t v60 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v59 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v57 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v56 = (char *)&v53 - v20;
  uint64_t v21 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  long long v64 = (char *)&v53 - v25;
  uint64_t v26 = a1;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    uint64_t v27 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v64, 1, 1, v67);
  }
  else
  {
    uint64_t v28 = v13;
    uint64_t v29 = v68;
    sub_100022920(v68, (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v53 = v26;
    v30(v12, v26, v9);
    unint64_t v31 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v32 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v54 = v16;
    unint64_t v33 = (v14 + v32 + v31) & ~v32;
    uint64_t v34 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v15, v34 + v31);
    uint64_t v35 = v29;
    uint64_t v36 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(v34 + v33, v12, v9);
    __chkstk_darwin(v36);
    *(&v53 - 2) = v53;
    long long v37 = v59;
    Button.init(action:label:)();
    uint64_t v38 = 3;
    if (*(unsigned char *)(v35 + *(int *)(v58 + 24))) {
      uint64_t v38 = 1;
    }
    uint64_t v69 = v38;
    char v70 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    long long v39 = v57;
    uint64_t v40 = v54;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v40);
    uint64_t v41 = v65;
    int v42 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    __int16 v43 = v56;
    char v44 = v39;
    uint64_t v45 = v67;
    v42(v56, v44, v67);
    uint64_t v27 = (uint64_t)v64;
    v42(v64, v43, v45);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v27, 0, 1, v45);
  }
  uint64_t v46 = static VerticalAlignment.center.getter();
  uint64_t v47 = (uint64_t)v63;
  *long long v63 = v46;
  *(void *)(v47 + 8) = 0x4024000000000000;
  *(unsigned char *)(v47 + 16) = 0;
  uint64_t v48 = sub_10000AA4C(&qword_1001843C8);
  sub_1000CE834(v66, v68, (char *)(v47 + *(int *)(v48 + 44)));
  sub_10000F330(v27, (uint64_t)v23, &qword_1001843C0);
  uint64_t v49 = v61;
  sub_10000F330(v47, v61, &qword_1001843B0);
  uint64_t v50 = v62;
  sub_10000F330((uint64_t)v23, v62, &qword_1001843C0);
  uint64_t v51 = sub_10000AA4C(&qword_1001843D0);
  sub_10000F330(v49, v50 + *(int *)(v51 + 48), &qword_1001843B0);
  sub_10000F394(v47, &qword_1001843B0);
  sub_10000F394(v27, &qword_1001843C0);
  sub_10000F394(v49, &qword_1001843B0);
  return sub_10000F394((uint64_t)v23, &qword_1001843C0);
}

uint64_t sub_1000CDC54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v68 = a2;
  uint64_t v62 = a4;
  uint64_t v5 = sub_10000AA4C(&qword_100184608);
  __chkstk_darwin(v5 - 8);
  uint64_t v61 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v63 = (uint64_t *)((char *)&v53 - v8);
  uint64_t v9 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v55 = v11;
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AirDropAskRequestView();
  uint64_t v13 = *(void *)(v58 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v58);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100182C50);
  uint64_t v60 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v59 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000AA4C(&qword_1001843B8);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v57 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v56 = (char *)&v53 - v20;
  uint64_t v21 = sub_10000AA4C(&qword_1001843C0);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  long long v64 = (char *)&v53 - v25;
  uint64_t v26 = a1;
  if (SFAirDrop.DeclineAction.hidden.getter())
  {
    uint64_t v27 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v64, 1, 1, v67);
  }
  else
  {
    uint64_t v28 = v13;
    uint64_t v29 = v68;
    sub_100022920(v68, (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v53 = v26;
    v30(v12, v26, v9);
    unint64_t v31 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v32 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v54 = v16;
    unint64_t v33 = (v14 + v32 + v31) & ~v32;
    uint64_t v34 = swift_allocObject();
    sub_1000D4C8C((uint64_t)v15, v34 + v31);
    uint64_t v35 = v29;
    uint64_t v36 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(v34 + v33, v12, v9);
    __chkstk_darwin(v36);
    *(&v53 - 2) = v53;
    long long v37 = v59;
    Button.init(action:label:)();
    uint64_t v38 = 3;
    if (*(unsigned char *)(v35 + *(int *)(v58 + 24))) {
      uint64_t v38 = 1;
    }
    uint64_t v69 = v38;
    char v70 = 2;
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_1000844B4();
    long long v39 = v57;
    uint64_t v40 = v54;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v40);
    uint64_t v41 = v65;
    int v42 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    __int16 v43 = v56;
    char v44 = v39;
    uint64_t v45 = v67;
    v42(v56, v44, v67);
    uint64_t v27 = (uint64_t)v64;
    v42(v64, v43, v45);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v27, 0, 1, v45);
  }
  uint64_t v46 = static VerticalAlignment.center.getter();
  uint64_t v47 = (uint64_t)v63;
  *long long v63 = v46;
  *(void *)(v47 + 8) = 0x4024000000000000;
  *(unsigned char *)(v47 + 16) = 0;
  uint64_t v48 = sub_10000AA4C(&qword_100184610);
  sub_1000CEC94(v66, v68, (char *)(v47 + *(int *)(v48 + 44)));
  sub_10000F330(v27, (uint64_t)v23, &qword_1001843C0);
  uint64_t v49 = v61;
  sub_10000F330(v47, v61, &qword_100184608);
  uint64_t v50 = v62;
  sub_10000F330((uint64_t)v23, v62, &qword_1001843C0);
  uint64_t v51 = sub_10000AA4C(&qword_100184618);
  sub_10000F330(v49, v50 + *(int *)(v51 + 48), &qword_100184608);
  sub_10000F394(v47, &qword_100184608);
  sub_10000F394(v27, &qword_1001843C0);
  sub_10000F394(v49, &qword_100184608);
  return sub_10000F394((uint64_t)v23, &qword_1001843C0);
}

uint64_t sub_1000CE2C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  SFAirDrop.DeclineAction.buttonConfiguration.getter();
  uint64_t v6 = SFAirDrop.ButtonConfiguration.localizedTitle.getter();
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13[0] = v6;
  v13[1] = v8;
  sub_100054CC0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v12;
  return result;
}

uint64_t sub_1000CE3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v33 = a3;
  uint64_t v5 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)&v30 - v8;
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = sub_10000AA4C(&qword_100184790);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v35 = a1;
  sub_100022920(a2, (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = swift_allocObject();
  sub_1000D4C8C((uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_100184798);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_1001847A0, &qword_100184798);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_1001847A8, &qword_100181480);
  ForEach<>.init(_:content:)();
  if (sub_1000BF094())
  {
    uint64_t v20 = v32;
    sub_1000CCC8C(v32);
    uint64_t v21 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = sub_10000AA4C(&qword_100184438);
    uint64_t v20 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v32, 1, 1, v22);
  }
  char v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v24 = v31;
  v23(v31, v17, v12);
  uint64_t v25 = v34;
  sub_10000F330(v20, v34, &qword_1001843D8);
  uint64_t v26 = v33;
  v23(v33, v24, v12);
  uint64_t v27 = sub_10000AA4C(&qword_1001847B0);
  sub_10000F330(v25, (uint64_t)&v26[*(int *)(v27 + 48)], &qword_1001843D8);
  sub_10000F394(v20, &qword_1001843D8);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v17, v12);
  sub_10000F394(v25, &qword_1001843D8);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v12);
}

uint64_t sub_1000CE834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v33 = a3;
  uint64_t v5 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)&v30 - v8;
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = sub_10000AA4C(&qword_1001843E0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v35 = a1;
  sub_100022920(a2, (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = swift_allocObject();
  sub_1000D4C8C((uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_1001843E8);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_1001843F8, &qword_1001843E8);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_100184428, &qword_100184430);
  ForEach<>.init(_:content:)();
  if (sub_1000BF094())
  {
    uint64_t v20 = v32;
    sub_1000CCC8C(v32);
    uint64_t v21 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = sub_10000AA4C(&qword_100184438);
    uint64_t v20 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v32, 1, 1, v22);
  }
  char v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v24 = v31;
  v23(v31, v17, v12);
  uint64_t v25 = v34;
  sub_10000F330(v20, v34, &qword_1001843D8);
  uint64_t v26 = v33;
  v23(v33, v24, v12);
  uint64_t v27 = sub_10000AA4C(&qword_100184440);
  sub_10000F330(v25, (uint64_t)&v26[*(int *)(v27 + 48)], &qword_1001843D8);
  sub_10000F394(v20, &qword_1001843D8);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v17, v12);
  sub_10000F394(v25, &qword_1001843D8);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v12);
}

uint64_t sub_1000CEC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v33 = a3;
  uint64_t v5 = sub_10000AA4C(&qword_1001843D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)&v30 - v8;
  uint64_t v9 = type metadata accessor for AirDropAskRequestView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = sub_10000AA4C(&qword_100184620);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v35 = a1;
  sub_100022920(a2, (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = swift_allocObject();
  sub_1000D4C8C((uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  swift_bridgeObjectRetain();
  sub_10000AA4C(&qword_100184628);
  type metadata accessor for UUID();
  sub_10000AA4C(&qword_1001843F0);
  sub_10000F288(&qword_100184630, &qword_100184628);
  sub_1000D4D2C(&qword_100184400, &qword_1001843F0, (void (*)(void))sub_1000D4DA8);
  sub_10000F288(&qword_100184638, &qword_100184640);
  ForEach<>.init(_:content:)();
  if (sub_1000BF094())
  {
    uint64_t v20 = v32;
    sub_1000CCC8C(v32);
    uint64_t v21 = sub_10000AA4C(&qword_100184438);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = sub_10000AA4C(&qword_100184438);
    uint64_t v20 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v32, 1, 1, v22);
  }
  char v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v24 = v31;
  v23(v31, v17, v12);
  uint64_t v25 = v34;
  sub_10000F330(v20, v34, &qword_1001843D8);
  uint64_t v26 = v33;
  v23(v33, v24, v12);
  uint64_t v27 = sub_10000AA4C(&qword_100184648);
  sub_10000F330(v25, (uint64_t)&v26[*(int *)(v27 + 48)], &qword_1001843D8);
  sub_10000F394(v20, &qword_1001843D8);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v17, v12);
  sub_10000F394(v25, &qword_1001843D8);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v12);
}

uint64_t sub_1000CF0F4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100181470);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100181480);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    uint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    long long v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_1001814B8);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    long long v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100182C20) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100182B88);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000CFCE4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100184470);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100184430);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    uint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    long long v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_1001844C8);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    long long v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100184478) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100184480);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000D08D4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v96 = a1;
  uint64_t v97 = a2;
  uint64_t v101 = a3;
  uint64_t v99 = sub_10000AA4C(&qword_100184458);
  __chkstk_darwin(v99);
  long long v100 = (uint64_t *)((char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = sub_10000AA4C(&qword_100184460);
  __chkstk_darwin(v94);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100184410);
  __chkstk_darwin(v98);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for AirDropAskRequestView();
  uint64_t v84 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = v8;
  uint64_t v86 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100184418);
  uint64_t v90 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_100184468);
  uint64_t v92 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v91 = (char *)&v80 - v12;
  uint64_t v13 = sub_10000AA4C(&qword_100184650);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000AA4C(&qword_100184640);
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))(v24, v96, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  long long v102 = v24;
  if (v25 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    uint64_t v83 = v5;
    long long v96 = v7;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v26(v19, v24, v13);
    uint64_t v27 = v86;
    sub_100022920(v97, v86);
    uint64_t v82 = v14;
    uint64_t v28 = v14 + 16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, v13);
    unint64_t v29 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    unint64_t v30 = (v85 + v29 + *(unsigned __int8 *)(v28 + 64)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
    uint64_t v31 = swift_allocObject();
    sub_1000D4C8C(v27, v31 + v29);
    uint64_t v32 = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v31 + v30, v16, v13);
    __chkstk_darwin(v32);
    uint64_t v33 = v97;
    sub_10000AA4C(&qword_100184488);
    sub_1000D5024();
    uint64_t v34 = v87;
    Button.init(action:label:)();
    char v35 = *(unsigned char *)(v33 + *(int *)(v88 + 24));
    uint64_t v36 = v34;
    uint64_t v81 = v13;
    if (v35) {
      uint64_t v37 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
    }
    else {
      uint64_t v37 = 3;
    }
    long long v56 = v83;
    uint64_t v57 = sub_10000AA4C(&qword_100184668);
    v102 += *(int *)(v57 + 48);
    uint64_t v103 = v37;
    LOBYTE(v104) = 2;
    uint64_t v58 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v59 = sub_1000844B4();
    uint64_t v60 = v89;
    uint64_t v61 = v93;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v36, v61);
    uint64_t v62 = v91;
    uint64_t v63 = v92;
    long long v64 = v60;
    uint64_t v65 = v95;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v64, v95);
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v56, v62, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v61;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v58;
    unint64_t v106 = v59;
    swift_getOpaqueTypeConformance2();
    uint64_t v66 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v66, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v66, &qword_100184410);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v81);
    uint64_t v55 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  if (v25 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    uint64_t v38 = v102;
    (*(void (**)(void))(v21 + 96))();
    uint64_t v97 = (uint64_t)&v38[*(int *)(sub_10000AA4C(&qword_100184658) + 48)];
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v39 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v41 = v40;
    LOBYTE(v38) = v42 & 1;
    uint64_t v103 = static Color.red.getter();
    uint64_t v43 = Text.foregroundStyle<A>(_:)();
    long long v96 = v7;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    sub_100054D14(v39, v41, (char)v38);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v44;
    *((void *)v5 + 1) = v46;
    v5[16] = v50;
    *((void *)v5 + 3) = v48;
    swift_storeEnumTagMultiPayload();
    sub_100055180(v44, v46, v50);
    uint64_t v51 = sub_10000F288(&qword_100184420, &qword_100184418);
    unint64_t v52 = sub_1000844B4();
    swift_bridgeObjectRetain();
    uint64_t v103 = v93;
    uint64_t v104 = &type metadata for AirDropUIButtonStyle;
    uint64_t v105 = v51;
    unint64_t v106 = v52;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v53, (uint64_t)v100, &qword_100184410);
    swift_storeEnumTagMultiPayload();
    sub_1000D4DA8();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v53, &qword_100184410);
    sub_100054D14(v44, v46, v50);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v97, v54);
    uint64_t v55 = sub_10000AA4C(&qword_100184660);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v102, v55);
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v68 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v70 = v69;
  char v72 = v71 & 1;
  uint64_t v103 = static Color.red.getter();
  uint64_t v73 = Text.foregroundStyle<A>(_:)();
  uint64_t v75 = v74;
  LODWORD(v97) = v76;
  uint64_t v78 = v77;
  sub_100054D14(v68, v70, v72);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v79 = v100;
  *long long v100 = v73;
  v79[1] = v75;
  *((unsigned char *)v79 + 16) = v97 & 1;
  v79[3] = v78;
  swift_storeEnumTagMultiPayload();
  sub_1000D4DA8();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v102, v20);
}

uint64_t sub_1000D14C4(uint64_t a1, uint64_t *a2)
{
  sub_10000AA4C(a2);
  SFAirDrop.AcceptAction.Single.id.getter();
  sub_100054CC0();
  uint64_t v2 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v3 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0x72616C75676552;
  }
  return v3;
}

uint64_t sub_1000D15B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirDropAskRequestView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_100022920(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1000D4C8C((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v7, &qword_1001829C0);
}

uint64_t sub_1000D1764(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  type metadata accessor for MainActor();
  *(void *)(v2 + 24) = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000D17FC, v4, v3);
}

uint64_t sub_1000D17FC()
{
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Launching 'Ways to Get Help' URL", v4, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AirDropAskRequestView();
  swift_retain();
  sub_10008D6A8();
  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000D1944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_1000D1984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001847E8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000AA4C(&qword_1001847F0);
  __chkstk_darwin(v35);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for AirDropAskRequestView();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = *(unsigned __int8 *)(a1 + *(int *)(v12 + 24));
  if (v20 == 1)
  {
    static Alignment.leading.getter();
    uint64_t v13 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v14 = v36;
    uint64_t v15 = v37;
    uint64_t v16 = v38;
    uint64_t v17 = v39;
    uint64_t v18 = v40;
    uint64_t v19 = v41;
  }
  uint64_t v29 = v14;
  uint64_t v30 = v15;
  uint64_t v31 = v16;
  uint64_t v32 = v17;
  uint64_t v33 = v18;
  uint64_t v34 = v19;
  type metadata accessor for AirDropTransferSession();
  sub_1000D6260((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
  swift_retain();
  uint64_t v21 = ObservedObject.init(wrappedValue:)();
  uint64_t v23 = v22;
  *(void *)uint64_t v6 = static HorizontalAlignment.leading.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v24 = sub_10000AA4C(&qword_1001847F8);
  sub_1000D1CE4(a1, (uint64_t)&v6[*(int *)(v24 + 44)]);
  static Alignment.trailing.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000F330((uint64_t)v6, (uint64_t)v8, &qword_1001847E8);
  int v25 = &v8[*(int *)(v35 + 36)];
  long long v26 = v43;
  *(_OWORD *)int v25 = v42;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v44;
  sub_10000F394((uint64_t)v6, &qword_1001847E8);
  sub_10000F2CC((uint64_t)v8, (uint64_t)v11, &qword_1001847F0);
  sub_10000F330((uint64_t)v11, (uint64_t)v8, &qword_1001847F0);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v30;
  *(void *)(a2 + 32) = v31;
  *(void *)(a2 + 40) = v32;
  *(void *)(a2 + 48) = v33;
  *(void *)(a2 + 56) = v34;
  *(unsigned char *)(a2 + 64) = v20 ^ 1;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v23;
  *(unsigned char *)(a2 + 88) = v20;
  *(_OWORD *)(a2 + 96) = xmmword_1001296E0;
  *(unsigned char *)(a2 + 112) = 1;
  uint64_t v27 = sub_10000AA4C(&qword_100184800);
  sub_10000F330((uint64_t)v8, a2 + *(int *)(v27 + 64), &qword_1001847F0);
  swift_retain();
  sub_100056C98(0, 1);
  sub_10000F394((uint64_t)v11, &qword_1001847F0);
  sub_10000F394((uint64_t)v8, &qword_1001847F0);
  swift_release();
  return sub_100056D84(0, 1);
}

uint64_t sub_1000D1CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000AA4C(&qword_100184808);
  __chkstk_darwin(v4 - 8);
  uint64_t v58 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for Font.TextStyle();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v57 = (uint64_t)&v44 - v18;
  uint64_t v19 = type metadata accessor for AirDropAskRequestView();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v56 = *(unsigned __int8 *)(a1 + *(int *)(v19 + 24));
  if (v56 == 1)
  {
    static Alignment.leading.getter();
    uint64_t v20 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v21 = v61;
    uint64_t v22 = v62;
    uint64_t v23 = v63;
    uint64_t v24 = v64;
    uint64_t v25 = v65;
    uint64_t v26 = v66;
  }
  uint64_t v45 = v20;
  uint64_t v47 = v21;
  uint64_t v48 = v22;
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  uint64_t v51 = v25;
  uint64_t v52 = v26;
  uint64_t v27 = *(void *)(a1 + *(int *)(v19 + 20) + 8);
  swift_getKeyPath();
  uint64_t v46 = a1;
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v29 = v59;
  uint64_t v28 = v60;
  uint64_t v31 = *(void *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  uint64_t v30 = *(void *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  uint64_t v59 = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v11, enum case for Font.TextStyle.subheadline(_:), v54);
  sub_100053610();
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v32 = v55;
  uint64_t v33 = &v13[*(int *)(v55 + 20)];
  *(void *)uint64_t v33 = v29;
  *((void *)v33 + 1) = v28;
  uint64_t v34 = &v13[*(int *)(v32 + 24)];
  *(void *)uint64_t v34 = v31;
  *((void *)v34 + 1) = v30;
  *((void *)v34 + 2) = 0;
  *((void *)v34 + 3) = 0;
  v34[32] = 64;
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1);
  sub_1000D5274((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AirDropDescriptionView);
  uint64_t v35 = v57;
  sub_10000F2CC((uint64_t)v16, v57, (uint64_t *)&unk_100185E30);
  *(void *)uint64_t v8 = static VerticalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v36 = sub_10000AA4C(&qword_100184810);
  sub_1000D21CC(v46, (uint64_t)&v8[*(int *)(v36 + 44)]);
  sub_10000F330(v35, (uint64_t)v16, (uint64_t *)&unk_100185E30);
  uint64_t v37 = v58;
  sub_10000F330((uint64_t)v8, v58, &qword_100184808);
  uint64_t v38 = v45;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = v38;
  uint64_t v39 = v48;
  *(void *)(a2 + 16) = v47;
  *(void *)(a2 + 24) = v39;
  uint64_t v40 = v50;
  *(void *)(a2 + 32) = v49;
  *(void *)(a2 + 40) = v40;
  uint64_t v41 = v52;
  *(void *)(a2 + 48) = v51;
  *(void *)(a2 + 56) = v41;
  *(unsigned char *)(a2 + 64) = v56 ^ 1;
  uint64_t v42 = sub_10000AA4C(&qword_100184818);
  sub_10000F330((uint64_t)v16, a2 + *(int *)(v42 + 48), (uint64_t *)&unk_100185E30);
  sub_10000F330(v37, a2 + *(int *)(v42 + 64), &qword_100184808);
  sub_10000F394((uint64_t)v8, &qword_100184808);
  sub_10000F394(v35, (uint64_t *)&unk_100185E30);
  sub_10000F394(v37, &qword_100184808);
  return sub_10000F394((uint64_t)v16, (uint64_t *)&unk_100185E30);
}

uint64_t sub_1000D21CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v73 = a2;
  uint64_t v76 = type metadata accessor for BorderedProminentButtonStyle();
  uint64_t v83 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v75 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AirDropAskRequestView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v59 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100182C50);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v80 = v7;
  uint64_t v81 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000AA4C(&qword_100185E70);
  __chkstk_darwin(v79);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000AA4C(&qword_100184820);
  uint64_t v82 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v65 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000AA4C(&qword_100184828) - 8;
  __chkstk_darwin(v78);
  uint64_t v72 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v71 = (char *)&v57 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - v18;
  __chkstk_darwin(v20);
  uint64_t v77 = (uint64_t)&v57 - v21;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v22 = a1;
  uint64_t v23 = v59;
  sub_100022920(v22, v59);
  uint64_t v24 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v25 = (v24 + 16) & ~v24;
  uint64_t v68 = v25 + v6;
  uint64_t v69 = v25;
  uint64_t v67 = v24 | 7;
  uint64_t v26 = swift_allocObject() + v25;
  sub_1000D4C8C(v23, v26);
  Button<>.init(_:action:)();
  static Alignment.center.getter();
  uint64_t v58 = v12;
  __n128 v27 = sub_1000FA218(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v12, 0.0, 1, 0.0, 1);
  uint64_t v28 = *(void (**)(char *, uint64_t, __n128))(v81 + 8);
  v81 += 8;
  uint64_t v66 = v28;
  v28(v10, v80, v27);
  uint64_t v29 = v75;
  BorderedProminentButtonStyle.init()();
  unint64_t v64 = sub_1000D61C0();
  uint64_t v63 = sub_1000D6260(&qword_100184838, (void (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle);
  uint64_t v30 = v65;
  uint64_t v31 = v76;
  View.buttonStyle<A>(_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v83 + 8);
  v83 += 8;
  unsigned __int8 v62 = v32;
  v32(v29, v31);
  sub_10000F394((uint64_t)v12, &qword_100185E70);
  uint64_t v33 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v82;
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  uint64_t v36 = v30;
  uint64_t v37 = v30;
  uint64_t v38 = v74;
  v61(v19, v37, v74);
  uint64_t v39 = (uint64_t *)&v19[*(int *)(v78 + 44)];
  uint64_t *v39 = KeyPath;
  v39[1] = v33;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v82 = v35 + 8;
  uint64_t v60 = v40;
  v40(v36, v38);
  sub_10000F2CC((uint64_t)v19, v77, &qword_100184828);
  LocalizedStringKey.init(stringLiteral:)();
  sub_100022920(v70, v23);
  uint64_t v41 = swift_allocObject();
  sub_1000D4C8C(v23, v41 + v69);
  Button<>.init(_:action:)();
  static Alignment.center.getter();
  uint64_t v42 = (uint64_t)v58;
  __n128 v43 = sub_1000FA218(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v58, 0.0, 1, 0.0, 1);
  v66(v10, v80, v43);
  uint64_t v44 = v75;
  BorderedProminentButtonStyle.init()();
  uint64_t v45 = v76;
  View.buttonStyle<A>(_:)();
  v62(v44, v45);
  sub_10000F394(v42, &qword_100185E70);
  uint64_t v46 = static Color.blue.getter();
  uint64_t v47 = swift_getKeyPath();
  uint64_t v48 = (uint64_t)v71;
  uint64_t v49 = v74;
  v61(v71, v36, v74);
  uint64_t v50 = (uint64_t *)(v48 + *(int *)(v78 + 44));
  *uint64_t v50 = v47;
  v50[1] = v46;
  v60(v36, v49);
  sub_10000F2CC(v48, (uint64_t)v19, &qword_100184828);
  uint64_t v51 = v77;
  uint64_t v52 = v48;
  sub_10000F330(v77, v48, &qword_100184828);
  uint64_t v53 = v72;
  sub_10000F330((uint64_t)v19, v72, &qword_100184828);
  uint64_t v54 = v73;
  sub_10000F330(v52, v73, &qword_100184828);
  uint64_t v55 = sub_10000AA4C(&qword_100184840);
  sub_10000F330(v53, v54 + *(int *)(v55 + 48), &qword_100184828);
  sub_10000F394((uint64_t)v19, &qword_100184828);
  sub_10000F394(v51, &qword_100184828);
  sub_10000F394(v53, &qword_100184828);
  return sub_10000F394(v52, &qword_100184828);
}

void sub_1000D29E0(uint64_t a1, const char *a2, const char *a3, void (*a4)(uint64_t))
{
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_100184040);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a2, v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView() + 20) + 8);
  uint64_t v13 = qword_10017F770;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  sub_10000B150(v8, (uint64_t)qword_100182DA0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, a3, v16, 2u);
    swift_slowDealloc();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v18 = (id)Strong;
    a4(v12);
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_1000D2C24(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000D2CBC, v3, v2);
}

uint64_t sub_1000D2CBC()
{
  swift_release();
  type metadata accessor for AirDropAskRequestView();
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 32) = 1;
  swift_retain();
  static Published.subscript.setter();
  swift_retain();
  uint64_t v1 = sub_100085DA8();
  swift_release();
  if (v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    *(unsigned char *)(v0 + 32) = 1;
    static Published.subscript.setter();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000D2DDC(uint64_t a1, uint64_t a2)
{
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v5;
  v2[13] = v4;
  return _swift_task_switch(sub_1000D2ED0, v5, v4);
}

uint64_t sub_1000D2ED0()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181470);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D2F98;
  uint64_t v3 = *(void *)(v0 + 80);
  return SFAirDrop.AcceptAction.Single.accept(with:)(v3, v1);
}

uint64_t sub_1000D2F98()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v7 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v8 = sub_1000D3254;
  }
  else {
    uint64_t v8 = sub_1000D3130;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_1000D3130()
{
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest accepted", v4, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000D3254()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest accept failed {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000D348C(uint64_t a1, uint64_t a2)
{
  v2[7] = a2;
  type metadata accessor for MainActor();
  v2[8] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[9] = v4;
  v2[10] = v3;
  return _swift_task_switch(sub_1000D3524, v4, v3);
}

uint64_t sub_1000D3524()
{
  uint64_t v1 = sub_10000AA4C(&qword_100184470);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D35E8;
  return SFAirDrop.AcceptAction.Single.accept(with:)(v0 + 104, v1);
}

uint64_t sub_1000D35E8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 80);
  if (v0) {
    uint64_t v5 = sub_1000D3818;
  }
  else {
    uint64_t v5 = sub_1000D36FC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000D36FC()
{
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest accepted", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000D3818()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest accept failed {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000D3A48(uint64_t a1, uint64_t a2)
{
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for SFAirDrop.ContactRequest();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v5;
  v2[13] = v4;
  return _swift_task_switch(sub_1000D3B3C, v5, v4);
}

uint64_t sub_1000D3B3C()
{
  uint64_t v1 = sub_10000AA4C(&qword_100184650);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D3C04;
  uint64_t v3 = *(void *)(v0 + 80);
  return SFAirDrop.AcceptAction.Single.accept(with:)(v3, v1);
}

uint64_t sub_1000D3C04()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v7 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v8 = sub_1000D6540;
  }
  else {
    uint64_t v8 = sub_1000D6544;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_1000D3D9C()
{
  v0[7] = type metadata accessor for MainActor();
  v0[8] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D3E4C;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000D3E4C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_1000D40C4;
  }
  else {
    uint64_t v4 = sub_1000D3FA8;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_1000D3FA8()
{
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest declined", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000D40C4()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_10017F7B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100184040);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "permissionRequest decline failed {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000D42F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100184850);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v4 = v30;
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = sub_10000AA4C(&qword_100184858);
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v10 = v31;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17((char *)&v28 - v15, a1, v9, v14);
  static Axis.Set.vertical.getter();
  uint64_t v34 = a1;
  sub_10000F288(&qword_100184860, &qword_100184858);
  id v18 = v8;
  uint64_t v29 = v8;
  ScrollView.init(_:showsIndicators:content:)();
  ((void (*)(char *, char *, uint64_t))v17)(v12, v16, v9);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v20 = v32;
  uint64_t v21 = v18;
  uint64_t v22 = v3;
  v19(v32, v21, v3);
  uint64_t v23 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v17)(v33, v12, v9);
  uint64_t v24 = sub_10000AA4C(&qword_100184868);
  v19((char *)(v23 + *(int *)(v24 + 48)), v20, v22);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v29, v22);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v16, v9);
  v25(v20, v22);
  return ((uint64_t (*)(char *, uint64_t))v26)(v12, v9);
}

uint64_t sub_1000D45FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = static Axis.Set.vertical.getter();
  uint64_t v4 = sub_10000AA4C(&qword_100184848);
  return sub_1000D42F8(a1, (uint64_t)&a2[*(int *)(v4 + 44)]);
}

uint64_t sub_1000D4654()
{
  return sub_1000D4D2C(&qword_100184188, &qword_100184118, (void (*)(void))sub_1000D4684);
}

uint64_t sub_1000D4684()
{
  return sub_1000D4D2C(&qword_100184190, &qword_100184198, (void (*)(void))sub_1000D46B4);
}

unint64_t sub_1000D46B4()
{
  unint64_t result = qword_1001841A0;
  if (!qword_1001841A0)
  {
    sub_10000B100((uint64_t *)&unk_100185E60);
    sub_10000F288(&qword_1001841A8, &qword_1001841B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001841A0);
  }
  return result;
}

unint64_t sub_1000D4754()
{
  unint64_t result = qword_1001841B8;
  if (!qword_1001841B8)
  {
    sub_10000B100(&qword_100184140);
    sub_10000F288(&qword_1001841C0, &qword_100184138);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001841B8);
  }
  return result;
}

uint64_t sub_1000D47F4()
{
  return sub_1000D50D8(&qword_1001841C8, &qword_100184130, (void (*)(void))sub_1000D4830, (void (*)(void))sub_1000D48A8);
}

uint64_t sub_1000D4830()
{
  return sub_1000D50D8(&qword_1001841D0, &qword_100184170, (void (*)(void))sub_1000D486C, (void (*)(void))sub_1000D4754);
}

uint64_t sub_1000D486C()
{
  return sub_1000D50D8(&qword_1001841D8, &qword_100184160, (void (*)(void))sub_1000D48A8, (void (*)(void))sub_1000D49A8);
}

uint64_t sub_1000D48A8()
{
  return sub_1000D4D2C(&qword_1001841E0, &qword_100184168, (void (*)(void))sub_1000D48D8);
}

uint64_t sub_1000D48D8()
{
  return sub_1000D4D2C(&qword_1001841E8, &qword_1001841F0, (void (*)(void))sub_1000D4908);
}

unint64_t sub_1000D4908()
{
  unint64_t result = qword_1001841F8;
  if (!qword_1001841F8)
  {
    sub_10000B100((uint64_t *)&unk_100185E50);
    sub_10000F288(&qword_100184200, &qword_100184208);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001841F8);
  }
  return result;
}

uint64_t sub_1000D49A8()
{
  return sub_1000D4D2C(&qword_100184210, &qword_100184148, (void (*)(void))sub_1000D49D8);
}

uint64_t sub_1000D49D8()
{
  return sub_1000D4D2C(&qword_100184218, &qword_100184220, (void (*)(void))sub_1000D4A08);
}

unint64_t sub_1000D4A08()
{
  unint64_t result = qword_100184228;
  if (!qword_100184228)
  {
    sub_10000B100((uint64_t *)&unk_100185E40);
    sub_10000F288(&qword_100184230, &qword_100184238);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184228);
  }
  return result;
}

uint64_t sub_1000D4AA8()
{
  return sub_1000D50D8(&qword_100184240, &qword_100184110, (void (*)(void))sub_1000D4654, (void (*)(void))sub_1000D4754);
}

unint64_t sub_1000D4AE4()
{
  unint64_t result = qword_1001842A8;
  if (!qword_1001842A8)
  {
    sub_10000B100(&qword_100184298);
    sub_10000F288(&qword_1001842B0, &qword_1001842B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001842A8);
  }
  return result;
}

unint64_t sub_1000D4B84()
{
  unint64_t result = qword_100184328;
  if (!qword_100184328)
  {
    sub_10000B100(&qword_100184310);
    sub_10000F288(&qword_100184330, &qword_100184308);
    sub_1000D4C24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184328);
  }
  return result;
}

unint64_t sub_1000D4C24()
{
  unint64_t result = qword_100184338;
  if (!qword_100184338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184338);
  }
  return result;
}

uint64_t sub_1000D4C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirDropAskRequestView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4CF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE2C4(a1);
}

uint64_t sub_1000D4D14(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000CFCE4);
}

uint64_t sub_1000D4D2C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D4DA8()
{
  unint64_t result = qword_100184408;
  if (!qword_100184408)
  {
    sub_10000B100(&qword_100184410);
    sub_10000B100(&qword_100184418);
    sub_10000F288(&qword_100184420, &qword_100184418);
    sub_1000844B4();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184408);
  }
  return result;
}

uint64_t sub_1000D4E9C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000D15B4(v2);
}

uint64_t sub_1000D4F00(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100013ABC;
  return sub_1000D1764(a1, v5);
}

uint64_t sub_1000D4FE0()
{
  return sub_1000D5EF0(&qword_100184470);
}

uint64_t sub_1000D4FEC()
{
  return sub_1000D56BC(&qword_100184470, (uint64_t (*)(unint64_t))sub_1000CB61C);
}

double sub_1000D500C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000D60B0((void (*)(_OWORD *__return_ptr, void))sub_1000CC220, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000D5024()
{
  unint64_t result = qword_100184490;
  if (!qword_100184490)
  {
    sub_10000B100(&qword_100184488);
    sub_1000D50D8(&qword_100184498, &qword_1001844A0, (void (*)(void))sub_1000D5160, (void (*)(void))sub_1000D51D4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184490);
  }
  return result;
}

uint64_t sub_1000D50D8(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D5160()
{
  unint64_t result = qword_1001844A8;
  if (!qword_1001844A8)
  {
    sub_10000B100(&qword_1001844B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001844A8);
  }
  return result;
}

unint64_t sub_1000D51D4()
{
  unint64_t result = qword_1001844B8;
  if (!qword_1001844B8)
  {
    sub_10000B100(&qword_1001844C0);
    sub_10000F288(&qword_100182CA0, &qword_100182C98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001844B8);
  }
  return result;
}

uint64_t sub_1000D5274(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000D52DC()
{
  return sub_10009E334(&qword_100184470);
}

uint64_t sub_1000D52E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100184470) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10001FD90;
  return sub_1000D348C(a1, v5);
}

uint64_t sub_1000D53C8()
{
  uint64_t v2 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001FD90;
  return sub_1000D2C24(v3);
}

uint64_t sub_1000D5494()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D5524()
{
  type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001FD90;
  return sub_1000D3D9C();
}

uint64_t sub_1000D5604(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000C9840);
}

uint64_t sub_1000D561C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_1000D56B0()
{
  return sub_1000D5EF0(&qword_100184470);
}

uint64_t sub_1000D56BC(uint64_t *a1, uint64_t (*a2)(unint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000AA4C(a1) - 8);
  return a2(v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
}

uint64_t sub_1000D5794(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_retain();
  id v3 = v2;
  return a1;
}

uint64_t sub_1000D57C8(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t sub_1000D5800()
{
  unint64_t result = qword_100184578;
  if (!qword_100184578)
  {
    sub_10000B100(&qword_100184568);
    sub_10000F288(&qword_100184580, &qword_100184588);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184578);
  }
  return result;
}

uint64_t sub_1000D58A8(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000D08D4);
}

uint64_t sub_1000D58C0()
{
  return sub_1000D5EF0(&qword_100184650);
}

uint64_t sub_1000D58CC()
{
  return sub_1000D56BC(&qword_100184650, (uint64_t (*)(unint64_t))sub_1000CBC18);
}

double sub_1000D58EC@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000D60B0((void (*)(_OWORD *__return_ptr, void))sub_1000CCC80, a1).n128_u64[0];
  return result;
}

uint64_t sub_1000D5904()
{
  return sub_10009E334(&qword_100184650);
}

uint64_t sub_1000D5910(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100184650) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_10001FD90;
  return sub_1000D3A48(a1, v5);
}

uint64_t sub_1000D59F8(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000CA430);
}

uint64_t sub_1000D5A10()
{
  return sub_1000D5EF0(&qword_100184650);
}

unint64_t sub_1000D5A1C()
{
  unint64_t result = qword_1001846E8;
  if (!qword_1001846E8)
  {
    sub_10000B100(&qword_1001846D8);
    sub_10000F288(&qword_1001846F0, &qword_1001846F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001846E8);
  }
  return result;
}

uint64_t sub_1000D5AC4(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000CF0F4);
}

uint64_t sub_1000D5ADC()
{
  return sub_1000D5EF0(&qword_100181470);
}

uint64_t sub_1000D5AE8()
{
  return sub_1000D56BC(&qword_100181470, (uint64_t (*)(unint64_t))sub_1000CB020);
}

double sub_1000D5B08@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_1000D60B0((void (*)(_OWORD *__return_ptr, void))sub_1000CC214, a1).n128_u64[0];
  return result;
}

uint64_t sub_1000D5B20()
{
  return sub_10009E334(&qword_100181470);
}

uint64_t sub_1000D5B2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100181470) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_10001FD90;
  return sub_1000D2DDC(a1, v5);
}

uint64_t sub_1000D5C0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D5C48()
{
  uint64_t v1 = type metadata accessor for AirDropAskRequestView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v0 + v3, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = (v3 + v4 + v7) & ~v7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v10, v5);

  return _swift_deallocObject(v0, v10 + v8, v2 | v7 | 7);
}

uint64_t sub_1000D5E04()
{
  uint64_t v1 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.DeclineAction() - 8);
  return sub_1000C89B0(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_1000D5ECC(uint64_t a1)
{
  return sub_1000D561C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000C8C50);
}

uint64_t sub_1000D5EE4()
{
  return sub_1000D5EF0(&qword_100181470);
}

uint64_t sub_1000D5EF0(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for AirDropAskRequestView();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v7 = sub_10000AA4C(a1);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v1 + v5, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = (v5 + v6 + v9) & ~v9;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1 + v12, v7);

  return _swift_deallocObject(v1, v12 + v10, v4 | v9 | 7);
}

__n128 sub_1000D60B0@<Q0>(void (*a1)(_OWORD *__return_ptr, void)@<X0>, uint64_t a2@<X8>)
{
  a1(v6, *(void *)(v2 + 24));
  long long v4 = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 32) = v6[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_DWORD *)(a2 + 63) = *(_DWORD *)&v7[15];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)a2 = v6[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1000D611C()
{
}

void sub_1000D6144(const char *a1, const char *a2, void (*a3)(uint64_t))
{
  uint64_t v7 = *(void *)(type metadata accessor for AirDropAskRequestView() - 8);
  sub_1000D29E0(v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a1, a2, a3);
}

unint64_t sub_1000D61C0()
{
  unint64_t result = qword_100184830;
  if (!qword_100184830)
  {
    sub_10000B100(&qword_100185E70);
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184830);
  }
  return result;
}

uint64_t sub_1000D6260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D62B4()
{
  uint64_t v1 = type metadata accessor for AirDropAskRequestView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_10000AA4C(&qword_1001806E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1000D63E4()
{
}

ValueMetadata *type metadata accessor for ScrollIfRequiredModifier()
{
  return &type metadata for ScrollIfRequiredModifier;
}

uint64_t sub_1000D641C()
{
  return sub_1000D50D8(&qword_100184248, &qword_100184178, (void (*)(void))sub_1000D47F4, (void (*)(void))sub_1000D4AA8);
}

uint64_t sub_1000D646C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D6488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_10000AA4C(&qword_100184858);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000D64F8()
{
  return sub_10000F288(&qword_100184870, &qword_100184878);
}

uint64_t sub_1000D6548()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100184880);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100184880);
  if (qword_10017F788 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000D6610(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10017F7B8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_100184880);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "App delegate did finish launching: %@", v8, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  NameDropIdentity.shared.unsafeMutableAddressor();
  id v11 = [self defaultCenter];
  [v11 addObserver:v2 selector:"willEnterForeground" name:UIApplicationWillEnterForegroundNotification object:0];
}

id sub_1000D6A54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  [super dealloc];
}

int main(int argc, const char **argv, const char **envp)
{
  type metadata accessor for AppDelegate();
  static CommandLine.unsafeArgv.getter();
  static CommandLine.argc.getter();
  static CommandLine.argc.getter();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v4 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  LODWORD(v4) = UIApplicationMain(_:_:_:_:)();
  swift_bridgeObjectRelease();
  exit((int)v4);
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

uint64_t sub_1000D6B84(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_1000D6BAC()
{
  unint64_t result = qword_100184938;
  if (!qword_100184938)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100184938);
  }
  return result;
}

unint64_t sub_1000D6BEC()
{
  unint64_t result = qword_100184940;
  if (!qword_100184940)
  {
    sub_1000D6BAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184940);
  }
  return result;
}

void sub_1000D6C44(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000D6BAC();
    sub_1000D6BEC();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v34;
    uint64_t v31 = v35;
    uint64_t v2 = v36;
    uint64_t v3 = v37;
    unint64_t v4 = v38;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v30 = (unint64_t)(v2 + 64) >> 6;
  uint64_t v29 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
    goto LABEL_27;
  }
  int64_t v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 < v30)
    {
      unint64_t v13 = *(void *)(v31 + 8 * v12);
      uint64_t v10 = v3 + 1;
      if (v13) {
        goto LABEL_26;
      }
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v30) {
        goto LABEL_40;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v10);
      if (v13) {
        goto LABEL_26;
      }
      uint64_t v10 = v3 + 3;
      if (v3 + 3 >= v30) {
        goto LABEL_40;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v10);
      if (v13)
      {
LABEL_26:
        uint64_t v8 = (v13 - 1) & v13;
        unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_27:
        id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
        if (v11)
        {
          while (1)
          {
            unint64_t v32 = v8;
            uint64_t v15 = v1;
            id v16 = [v11 role:v29];
            uint64_t v17 = (void *)static UISceneSessionRole.activityListItem.getter();
            uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v20 = v19;
            if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v22 & 1) == 0)
              {
                sub_100031848();

                return;
              }
            }
            id v23 = [v11 persistentIdentifier];
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v33 = (void *)v24;
            sub_100054CC0();
            uint64_t v25 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
            swift_bridgeObjectRelease();
            if (*(void *)(v25 + 16) < 2uLL)
            {
              sub_100031848();

              swift_bridgeObjectRelease();
              return;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v26 = static String._fromSubstring(_:)();
            unint64_t v28 = v27;
            swift_bridgeObjectRelease();
            if (qword_10017F610 != -1) {
              swift_once();
            }
            sub_100040A94(v26, v28);

            swift_bridgeObjectRelease();
            uint64_t v3 = v10;
            uint64_t v1 = v15;
            unint64_t v4 = v32;
            if ((v15 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (__CocoaSet.Iterator.next()())
            {
              sub_1000D6BAC();
              swift_unknownObjectRetain();
              swift_dynamicCast();
              id v11 = v33;
              swift_unknownObjectRelease();
              uint64_t v10 = v3;
              uint64_t v8 = v4;
              if (v33) {
                continue;
              }
            }
            goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
      uint64_t v10 = v3 + 4;
      if (v3 + 4 < v30)
      {
        unint64_t v13 = *(void *)(v31 + 8 * v10);
        if (!v13)
        {
          uint64_t v14 = v3 + 5;
          while (v30 != v14)
          {
            unint64_t v13 = *(void *)(v31 + 8 * v14++);
            if (v13)
            {
              uint64_t v10 = v14 - 1;
              goto LABEL_26;
            }
          }
          goto LABEL_40;
        }
        goto LABEL_26;
      }
    }
LABEL_40:
    sub_100031848();
    return;
  }
  __break(1u);
}

uint64_t sub_1000D70B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100184950);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100184950);
  if (qword_10017F788 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000D729C(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6 = qword_10017F7C0;
  id v12 = a3;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_100184950);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 2u);
    swift_slowDealloc();
  }
}

id sub_1000D73FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultSceneDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for DefaultSceneDelegate()
{
  return self;
}

void sub_1000D7464(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = qword_10017F7C0;
    id v10 = a1;
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_100184950);
    id v12 = v10;
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      id v36 = v12;
      uint64_t v37 = v6;
      *(_DWORD *)uint64_t v15 = 136315138;
      id v16 = [v8 description:v15 + 4];
      uint64_t v17 = v2;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      uint64_t v21 = v18;
      uint64_t v2 = v17;
      uint64_t v38 = sub_100047F98(v21, v20, v39);
      id v12 = v36;
      uint64_t v6 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "DefaultSceneDelegate: Received windowScene: %s. Hosting debugging UI for AirDropUI Launch Angel.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v22 = [objc_allocWithZone((Class)type metadata accessor for SFSecureWindow()) initWithWindowScene:v8];
    id v23 = objc_allocWithZone((Class)sub_10000AA4C(&qword_1001849A0));
    uint64_t v24 = (void *)UIHostingController.init(rootView:)();
    [v22 setRootViewController:v24];
    [v22 makeKeyAndVisible];
    uint64_t v25 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI20DefaultSceneDelegate_window);
    *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI20DefaultSceneDelegate_window) = v22;
    id v26 = v22;

    if (qword_10017F610 != -1) {
      swift_once();
    }
    unint64_t v27 = (void *)qword_10018CE80;
    sub_100090AA8();
    swift_getKeyPath();
    swift_getKeyPath();
    unint64_t v28 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    int64_t v30 = v29;
    swift_bridgeObjectRelease();
    *int64_t v30 = &_swiftEmptyDictionarySingleton;
    v28(v39, 0);
    swift_release();
    swift_release();
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v6, 1, 1, v31);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v27;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = &unk_1001849A8;
    *(void *)(v33 + 24) = v32;
    id v34 = v27;
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    sub_1000D79D4((uint64_t)v6);
  }
}

uint64_t sub_1000D78D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D7908()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013ABC;
  return sub_100033224(v2);
}

uint64_t sub_1000D799C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D79D4(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NearbySharingInteractionViewController(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_1001849D8);
}

uint64_t sub_1000D7A54()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000D7ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1000D7B10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000D7B1C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000D7B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EB410(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000D7B6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100185480);
  __chkstk_darwin(v3 - 8);
  uint64_t v31 = (uint64_t)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v30 = (void *)((char *)v27 - v6);
  sub_10005EB7C(a1, (uint64_t)v54);
  sub_10005EB7C((uint64_t)v54, (uint64_t)v55);
  unint64_t v7 = v56;
  v56 &= 0x3FFFFFFFFFFFFFFFuLL;
  if (v7 >> 62)
  {
    uint64_t v10 = v55[2];
    uint64_t v11 = v55[3];
    sub_10006F184(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = v10;
    uint64_t v35 = v11;
    uint64_t v36 = 0x4051000000000000;
    long long v37 = 0u;
    memset(v38, 0, sizeof(v38));
    char v39 = 1;
  }
  else
  {
    uint64_t v9 = v55[0];
    uint64_t v8 = v55[1];
    swift_bridgeObjectRetain();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v34 = v9;
    uint64_t v35 = v8;
    uint64_t v36 = v49;
    *(void *)&long long v37 = v50;
    *((void *)&v37 + 1) = v51;
    v38[0] = v52;
    *(_OWORD *)&v38[1] = v53;
    char v39 = 0;
  }
  sub_10000AA4C(&qword_100185488);
  sub_1000F0564();
  sub_10006F1E0();
  _ConditionalContent<>.init(storage:)();
  uint64_t v13 = v40;
  uint64_t v12 = v41;
  uint64_t v14 = v42;
  uint64_t v15 = v43;
  uint64_t v17 = v44;
  uint64_t v16 = v45;
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  int v28 = v48;
  uint64_t v18 = static HorizontalAlignment.leading.getter();
  uint64_t v19 = (uint64_t)v30;
  *int64_t v30 = v18;
  *(void *)(v19 + 8) = 0;
  *(unsigned char *)(v19 + 16) = 1;
  uint64_t v20 = sub_10000AA4C(&qword_1001854A8);
  sub_1000D7E70(a1, v19 + *(int *)(v20 + 44));
  uint64_t v21 = v31;
  sub_10000F330(v19, v31, &qword_100185480);
  uint64_t v22 = v13;
  v27[1] = v14;
  v27[2] = v13;
  id v23 = v29;
  *uint64_t v29 = v22;
  v23[1] = v12;
  v27[0] = v12;
  v23[2] = v14;
  v23[3] = v15;
  v23[4] = v17;
  v23[5] = v16;
  uint64_t v24 = v33;
  v23[6] = v32;
  v23[7] = v24;
  *((unsigned char *)v23 + 64) = v28;
  uint64_t v25 = sub_10000AA4C(&qword_1001854B0);
  sub_10000F330(v21, (uint64_t)v23 + *(int *)(v25 + 48), &qword_100185480);
  sub_10006F234();
  sub_10000F394(v19, &qword_100185480);
  sub_10000F394(v21, &qword_100185480);
  return sub_10006F23C();
}

uint64_t sub_1000D7E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v46 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v49 = (uint64_t)&v45 - v6;
  uint64_t v48 = sub_10000AA4C(&qword_100184EC8) - 8;
  __chkstk_darwin(v48);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v50 = (uint64_t)&v45 - v10;
  uint64_t v11 = sub_10000AA4C(&qword_1001854B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v47 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - v14;
  *(void *)uint64_t v15 = static VerticalAlignment.center.getter();
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  uint64_t v45 = v15;
  uint64_t v16 = sub_10000AA4C(&qword_1001854C0);
  sub_1000D82B8(a1, (uint64_t)&v15[*(int *)(v16 + 44)]);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  static Font.headline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  char v27 = v26 & 1;
  sub_100054D14(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t v52 = static Color.white.getter();
  uint64_t v28 = Text.foregroundStyle<A>(_:)();
  uint64_t v30 = v29;
  char v32 = v31;
  uint64_t v34 = v33;
  sub_100054D14(v22, v24, v27);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = v46;
  *uint64_t v46 = KeyPath;
  sub_10000AA4C(&qword_100182218);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = (uint64_t)v36;
  uint64_t v38 = v49;
  sub_1000EC128(v37, v49, type metadata accessor for VibrancyEffectModifier);
  sub_1000EACE0(v38, (uint64_t)&v8[*(int *)(v48 + 44)], type metadata accessor for VibrancyEffectModifier);
  *(void *)uint64_t v8 = v28;
  *((void *)v8 + 1) = v30;
  v8[16] = v32 & 1;
  *((void *)v8 + 3) = v34;
  sub_1000EAD48(v38, type metadata accessor for VibrancyEffectModifier);
  uint64_t v39 = v50;
  sub_10000F2CC((uint64_t)v8, v50, &qword_100184EC8);
  uint64_t v40 = (uint64_t)v45;
  uint64_t v41 = v47;
  sub_10000F330((uint64_t)v45, v47, &qword_1001854B8);
  sub_10000F330(v39, (uint64_t)v8, &qword_100184EC8);
  uint64_t v42 = v51;
  sub_10000F330(v41, v51, &qword_1001854B8);
  uint64_t v43 = sub_10000AA4C(&qword_1001854C8);
  sub_10000F330((uint64_t)v8, v42 + *(int *)(v43 + 48), &qword_100184EC8);
  sub_10000F394(v39, &qword_100184EC8);
  sub_10000F394(v40, &qword_1001854B8);
  sub_10000F394((uint64_t)v8, &qword_100184EC8);
  return sub_10000F394(v41, &qword_1001854B8);
}

uint64_t sub_1000D82B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v104 = sub_10000AA4C(&qword_1001854D0);
  __chkstk_darwin(v104);
  unint64_t v106 = (uint64_t *)((char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v105 = sub_10000AA4C(&qword_1001854D8);
  __chkstk_darwin(v105);
  uint64_t v5 = (uint64_t *)((char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000AA4C(&qword_1001852C0);
  __chkstk_darwin(v96);
  uint64_t v13 = (uint64_t *)((char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Image.Scale();
  uint64_t v99 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  __chkstk_darwin(v14);
  uint64_t v97 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_1001852C8);
  __chkstk_darwin(v95);
  uint64_t v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C(&qword_100185BB0);
  __chkstk_darwin(v98);
  uint64_t v103 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000AA4C(&qword_1001854F0);
  __chkstk_darwin(v101);
  char v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000AA4C(&qword_1001854F8);
  __chkstk_darwin(v102);
  uint64_t v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  char v25 = (char *)&v86 - v24;
  sub_10005EB7C(a1, (uint64_t)v111);
  sub_10005EB7C((uint64_t)v111, (uint64_t)v112);
  unint64_t v26 = v113;
  v113 &= 0x3FFFFFFFFFFFFFFFuLL;
  if (v26 >> 62)
  {
    uint64_t v109 = v112[0];
    uint64_t v110 = v112[1];
    sub_10006F184(a1);
    sub_100054CC0();
    uint64_t v67 = Text.init<A>(_:)();
    uint64_t v69 = v68;
    char v71 = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v72 = v71 & 1;
    LODWORD(v109) = static HierarchicalShapeStyle.primary.getter();
    uint64_t v73 = Text.foregroundStyle<A>(_:)();
    uint64_t v75 = v74;
    char v77 = v76 & 1;
    sub_100054D14(v67, v69, v72);
    swift_bridgeObjectRelease();
    static Font.title2.getter();
    static Font.Weight.semibold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v78 = Text.font(_:)();
    uint64_t v80 = v79;
    LOBYTE(v69) = v81;
    uint64_t v83 = v82;
    swift_release();
    sub_100054D14(v73, v75, v77);
    swift_bridgeObjectRelease();
    sub_100055180(v78, v80, v69 & 1);
    swift_bridgeObjectRetain();
    sub_100055180(v78, v80, v69 & 1);
    swift_bridgeObjectRetain();
    sub_100054D14(v78, v80, v69 & 1);
    swift_bridgeObjectRelease();
    uint64_t v84 = v106;
    *unint64_t v106 = v78;
    v84[1] = v80;
    *((unsigned char *)v84 + 16) = v69 & 1;
    uint64_t v108 = v83;
    v84[3] = v83;
    v84[4] = 0;
    *((unsigned char *)v84 + 40) = 1;
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C(&qword_100185500);
    sub_10000F288(&qword_100185508, &qword_1001854D8);
    sub_10000F288((unint64_t *)&unk_100185510, &qword_100185500);
    _ConditionalContent<>.init(storage:)();
    uint64_t v64 = v78;
    uint64_t v65 = v80;
    char v66 = v69 & 1;
  }
  else
  {
    uint64_t v109 = v112[4];
    uint64_t v110 = v112[5];
    sub_100054CC0();
    uint64_t v93 = v8;
    swift_bridgeObjectRetain();
    uint64_t v27 = Text.init<A>(_:)();
    uint64_t v29 = v28;
    uint64_t v86 = (uint64_t *)v17;
    uint64_t v87 = v11;
    char v31 = v30 & 1;
    LODWORD(v109) = static HierarchicalShapeStyle.primary.getter();
    uint64_t v32 = Text.foregroundStyle<A>(_:)();
    uint64_t v88 = v20;
    uint64_t v33 = v32;
    uint64_t v94 = v25;
    uint64_t v35 = v34;
    char v91 = v22;
    uint64_t v92 = v5;
    char v37 = v36 & 1;
    sub_100054D14(v27, v29, v31);
    swift_bridgeObjectRelease();
    static Font.title2.getter();
    static Font.Weight.semibold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v38 = Text.font(_:)();
    uint64_t v90 = v39;
    LOBYTE(v27) = v40;
    uint64_t v108 = v41;
    swift_release();
    int v89 = v27 & 1;
    sub_100054D14(v33, v35, v37);
    swift_bridgeObjectRelease();
    uint64_t v42 = Image.init(systemName:)();
    uint64_t v44 = v99;
    uint64_t v43 = v100;
    uint64_t v45 = v97;
    (*(void (**)(char *, void, uint64_t))(v99 + 104))(v97, enum case for Image.Scale.large(_:), v100);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))((char *)v13 + *(int *)(v96 + 28), v45, v43);
    *uint64_t v13 = KeyPath;
    uint64_t v47 = v86;
    sub_10000F330((uint64_t)v13, (uint64_t)v86 + *(int *)(v95 + 36), &qword_1001852C0);
    *uint64_t v47 = v42;
    swift_retain();
    sub_10000F394((uint64_t)v13, &qword_1001852C0);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
    swift_release();
    uint64_t v48 = (uint64_t)v87;
    static SymbolRenderingMode.monochrome.getter();
    uint64_t v49 = type metadata accessor for SymbolRenderingMode();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
    uint64_t v50 = swift_getKeyPath();
    uint64_t v51 = (uint64_t)v103;
    uint64_t v52 = (uint64_t *)&v103[*(int *)(v98 + 36)];
    uint64_t v53 = sub_10000AA4C(&qword_100185BD0);
    sub_10000F330(v48, (uint64_t)v52 + *(int *)(v53 + 28), (uint64_t *)&unk_1001854E0);
    *uint64_t v52 = v50;
    sub_10000F330((uint64_t)v47, v51, &qword_1001852C8);
    sub_10000F394(v48, (uint64_t *)&unk_1001854E0);
    sub_10000F394((uint64_t)v47, &qword_1001852C8);
    uint64_t v54 = static Color.white.getter();
    uint64_t v55 = (uint64_t)v88;
    sub_10000F330(v51, (uint64_t)v88, &qword_100185BB0);
    *(void *)(v55 + *(int *)(v101 + 36)) = v54;
    sub_10000F394(v51, &qword_100185BB0);
    uint64_t v56 = swift_getKeyPath();
    uint64_t v57 = (uint64_t)v93;
    uint64_t *v93 = v56;
    sub_10000AA4C(&qword_100182218);
    swift_storeEnumTagMultiPayload();
    uint64_t v58 = (uint64_t)v94;
    sub_1000EC128(v57, (uint64_t)&v94[*(int *)(v102 + 36)], type metadata accessor for VibrancyEffectModifier);
    sub_10000F2CC(v55, v58, &qword_1001854F0);
    uint64_t v59 = (uint64_t)v91;
    sub_10000F330(v58, (uint64_t)v91, &qword_1001854F8);
    uint64_t v60 = (uint64_t)v92;
    uint64_t v61 = v38;
    *uint64_t v92 = v38;
    uint64_t v62 = v90;
    *(void *)(v60 + 8) = v90;
    LOBYTE(v58) = v89;
    *(unsigned char *)(v60 + 16) = v89;
    *(void *)(v60 + 24) = v108;
    *(void *)(v60 + 32) = 0;
    *(unsigned char *)(v60 + 40) = 1;
    uint64_t v63 = sub_10000AA4C(&qword_100185520);
    sub_10000F330(v59, v60 + *(int *)(v63 + 64), &qword_1001854F8);
    sub_100055180(v61, v62, v58);
    swift_bridgeObjectRetain();
    sub_100055180(v61, v62, v58);
    swift_bridgeObjectRetain();
    sub_10000F394(v59, &qword_1001854F8);
    sub_100054D14(v61, v62, v58);
    swift_bridgeObjectRelease();
    sub_10000F330(v60, (uint64_t)v106, &qword_1001854D8);
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C(&qword_100185500);
    sub_10000F288(&qword_100185508, &qword_1001854D8);
    sub_10000F288((unint64_t *)&unk_100185510, &qword_100185500);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v60, &qword_1001854D8);
    sub_10000F394((uint64_t)v94, &qword_1001854F8);
    uint64_t v64 = v61;
    uint64_t v65 = v62;
    char v66 = v58;
  }
  sub_100054D14(v64, v65, v66);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D8DA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000AA4C(&qword_100185468);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = *(_OWORD *)(v1 + 80);
  v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v6;
  int v12 = *(_DWORD *)(v1 + 96);
  long long v7 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v7;
  long long v8 = *(_OWORD *)(v1 + 48);
  v11[2] = *(_OWORD *)(v1 + 32);
  v11[3] = v8;
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0x402E000000000000;
  v5[16] = 0;
  uint64_t v9 = sub_10000AA4C(&qword_100185470);
  sub_1000D7B6C((uint64_t)v11, &v5[*(int *)(v9 + 44)]);
  sub_10000F330((uint64_t)v5, a1, &qword_100185468);
  *(unsigned char *)(a1 + *(int *)(sub_10000AA4C(&qword_100185478) + 36)) = 0;
  return sub_10000F394((uint64_t)v5, &qword_100185468);
}

uint64_t sub_1000D8E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v79 = sub_10000AA4C(&qword_100185448) - 8;
  __chkstk_darwin(v79);
  uint64_t v78 = (uint64_t)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v72);
  char v71 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000AA4C(&qword_100185450) - 8;
  __chkstk_darwin(v75);
  uint64_t v74 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000AA4C(&qword_100185418) - 8;
  __chkstk_darwin(v73);
  uint64_t v11 = (_OWORD *)((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = sub_10000AA4C(&qword_100185408) - 8;
  __n128 v12 = __chkstk_darwin(v77);
  uint64_t v76 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, v6, v12);
  uint64_t v14 = Text.init(_:)();
  uint64_t v16 = v15;
  LOBYTE(v7) = v17 & 1;
  static Font.headline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v18 = Text.font(_:)();
  uint64_t v69 = v19;
  uint64_t v70 = v18;
  LOBYTE(v6) = v20;
  uint64_t v22 = v21;
  swift_release();
  char v23 = v6 & 1;
  sub_100054D14(v14, v16, v7);
  swift_bridgeObjectRelease();
  LOBYTE(v14) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v69;
  uint64_t v24 = v70;
  uint64_t v82 = v70;
  uint64_t v83 = v69;
  char v84 = v23;
  uint64_t v85 = v22;
  char v86 = v14;
  uint64_t v87 = v26;
  uint64_t v88 = v27;
  uint64_t v89 = v28;
  uint64_t v90 = v29;
  char v91 = 0;
  static Alignment.center.getter();
  sub_1000FA404(0.0, 1, 0.0, 1, 230.0, 0, 0.0, 1, v81, 0.0, 1, 0.0, 1);
  sub_100054D14(v24, v25, v23);
  swift_bridgeObjectRelease();
  long long v100 = v81[8];
  long long v101 = v81[9];
  long long v102 = v81[10];
  long long v103 = v81[11];
  long long v96 = v81[4];
  long long v97 = v81[5];
  long long v98 = v81[6];
  long long v99 = v81[7];
  long long v94 = v81[2];
  long long v95 = v81[3];
  long long v92 = v81[0];
  long long v93 = v81[1];
  char v30 = v71;
  char v31 = &v71[*(int *)(v72 + 28)];
  uint64_t v32 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v33 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
  __asm { FMOV            V0.2D, #30.0 }
  *char v30 = _Q0;
  uint64_t v39 = static Color.white.getter();
  uint64_t v40 = v74;
  sub_1000EACE0((uint64_t)v30, v74, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v41 = v75;
  *(void *)(v40 + *(int *)(v75 + 60)) = v39;
  *(_WORD *)(v40 + *(int *)(v41 + 64)) = 256;
  sub_1000EAD48((uint64_t)v30, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v42 = static Alignment.center.getter();
  uint64_t v44 = v43;
  uint64_t v45 = v78;
  sub_10000F330(v40, v78, &qword_100185450);
  uint64_t v46 = (uint64_t *)(v45 + *(int *)(v79 + 44));
  *uint64_t v46 = v42;
  v46[1] = v44;
  sub_10000F330(v45, (uint64_t)v11 + *(int *)(v73 + 44), &qword_100185448);
  long long v47 = v101;
  v11[8] = v100;
  v11[9] = v47;
  long long v48 = v103;
  v11[10] = v102;
  v11[11] = v48;
  long long v49 = v97;
  v11[4] = v96;
  v11[5] = v49;
  long long v50 = v99;
  _OWORD v11[6] = v98;
  v11[7] = v50;
  long long v51 = v93;
  _OWORD *v11 = v92;
  v11[1] = v51;
  long long v52 = v95;
  v11[2] = v94;
  v11[3] = v52;
  sub_1000F03A0((uint64_t)&v92);
  sub_10000F394(v45, &qword_100185448);
  sub_10000F394(v40, &qword_100185450);
  sub_1000F03E0((uint64_t)&v92);
  LOBYTE(v42) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  uint64_t v61 = v76;
  sub_10000F330((uint64_t)v11, v76, &qword_100185418);
  uint64_t v62 = v61 + *(int *)(v77 + 44);
  *(unsigned char *)uint64_t v62 = v42;
  *(void *)(v62 + 8) = v54;
  *(void *)(v62 + 16) = v56;
  *(void *)(v62 + 24) = v58;
  *(void *)(v62 + 32) = v60;
  *(unsigned char *)(v62 + 40) = 0;
  sub_10000F394((uint64_t)v11, &qword_100185418);
  static Color.black.getter();
  uint64_t v63 = Color.opacity(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v65 = v80;
  sub_10000F330(v61, v80, &qword_100185408);
  char v66 = (uint64_t *)(v65 + *(int *)(sub_10000AA4C(&qword_1001853F0) + 36));
  *char v66 = KeyPath;
  v66[1] = v63;
  return sub_10000F394(v61, &qword_100185408);
}

uint64_t sub_1000D94AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(a1 - 8);
  sub_1000EACE0(v1, (uint64_t)&v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ShareableContentActionButton);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  sub_1000EC128((uint64_t)&v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v5 + v4, type metadata accessor for ShareableContentActionButton);
  uint64_t v8 = v1;
  sub_10000AA4C(&qword_1001853F0);
  sub_1000F0148();
  return Button.init(action:label:)();
}

uint64_t sub_1000D9608@<X0>(void *a1@<X8>)
{
  return sub_1000D9B84((void (*)(_OWORD *__return_ptr))sub_1000D9620, a1);
}

uint64_t sub_1000D9620@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  unsigned int v31 = enum case for Image.ResizingMode.stretch(_:);
  char v30 = *(void (**)(char *))(v5 + 104);
  v30(v7);
  uint64_t v38 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v7, v4);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v37 = v39;
  int v33 = v40;
  uint64_t v36 = v41;
  int v32 = v42;
  uint64_t v35 = v43;
  uint64_t v34 = v44;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v45 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v46 = v8;
  sub_100054CC0();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  Image.init(systemName:)();
  ((void (*)(char *, void, uint64_t))v30)(v7, v31, v4);
  uint64_t v16 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  v29(v7, v4);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v17 = v45;
  uint64_t v18 = v47;
  char v67 = 1;
  char v19 = v33;
  char v64 = v33;
  char v20 = v32;
  char v62 = v32;
  char v60 = v15;
  char v58 = 1;
  char v56 = 1;
  char v53 = v46;
  char v51 = v48;
  *(_DWORD *)(a1 + 18) = v65;
  *(_WORD *)(a1 + 22) = v66;
  int v21 = *(_DWORD *)v63;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a1 + 33) = v21;
  int v22 = *(_DWORD *)v61;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a1 + 49) = v22;
  int v23 = *(_DWORD *)v59;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a1 + 89) = v23;
  LOBYTE(v23) = v58;
  int v24 = *(_DWORD *)v57;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v57[3];
  *(_DWORD *)(a1 + 113) = v24;
  LOBYTE(v24) = v56;
  int v25 = v54;
  *(_WORD *)(a1 + 142) = v55;
  *(_DWORD *)(a1 + 138) = v25;
  LOBYTE(v25) = v53;
  int v26 = *(_DWORD *)v52;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a1 + 153) = v26;
  LOBYTE(v26) = v51;
  int v27 = *(_DWORD *)v50;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v50[3];
  *(_DWORD *)(a1 + 169) = v27;
  *(void *)a1 = v38;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v37;
  *(unsigned char *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v36;
  *(unsigned char *)(a1 + 48) = v20;
  *(void *)(a1 + 56) = v35;
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = v24;
  *(void *)(a1 + 144) = v17;
  *(unsigned char *)(a1 + 152) = v25;
  *(void *)(a1 + 160) = v18;
  *(unsigned char *)(a1 + 168) = v26;
  *(_OWORD *)(a1 + 176) = v49;
  swift_retain();
  sub_100055180(v9, v11, v15);
  swift_bridgeObjectRetain();
  sub_100054D14(v9, v11, v15);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D9B40@<X0>(void *a1@<X8>)
{
  return sub_1000D9B84((void (*)(_OWORD *__return_ptr))sub_1000D9620, a1);
}

uint64_t sub_1000D9B6C@<X0>(void *a1@<X8>)
{
  return sub_1000D9B84((void (*)(_OWORD *__return_ptr))sub_1000D9EE8, a1);
}

uint64_t sub_1000D9B84@<X0>(void (*a1)(_OWORD *__return_ptr)@<X0>, void *a2@<X8>)
{
  int v32 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100185458);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (_OWORD *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = static VerticalAlignment.center.getter();
  a1(v48);
  *(_OWORD *)&v50[135] = v48[8];
  *(_OWORD *)&v50[151] = v48[9];
  *(_OWORD *)&v50[167] = v48[10];
  *(_OWORD *)&v50[183] = v49;
  *(_OWORD *)&v50[71] = v48[4];
  *(_OWORD *)&v50[87] = v48[5];
  *(_OWORD *)&v50[103] = v48[6];
  *(_OWORD *)&v50[119] = v48[7];
  *(_OWORD *)&unsigned char v50[7] = v48[0];
  *(_OWORD *)&v50[23] = v48[1];
  *(_OWORD *)&v50[39] = v48[2];
  *(_OWORD *)&v50[55] = v48[3];
  long long v45 = *(_OWORD *)&v50[144];
  long long v46 = *(_OWORD *)&v50[160];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)&v50[176];
  long long v41 = *(_OWORD *)&v50[80];
  long long v42 = *(_OWORD *)&v50[96];
  long long v43 = *(_OWORD *)&v50[112];
  long long v44 = *(_OWORD *)&v50[128];
  long long v37 = *(_OWORD *)&v50[16];
  long long v38 = *(_OWORD *)&v50[32];
  long long v39 = *(_OWORD *)&v50[48];
  long long v40 = *(_OWORD *)&v50[64];
  char v51 = 1;
  uint64_t v33 = v11;
  uint64_t v34 = 0;
  char v35 = 1;
  *(void *)&v47[15] = *((void *)&v49 + 1);
  long long v36 = *(_OWORD *)v50;
  static Alignment.center.getter();
  sub_1000F9BD4(0.0, 1, 0.0, 1, 203.0, 0, 0.0, 1, (uint64_t)v53, 0.0, 1, 0.0, 1);
  sub_1000F0420((uint64_t)v48);
  memcpy(v52, v53, sizeof(v52));
  LOBYTE(v11) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  memcpy(v53, v52, 0x148uLL);
  LOBYTE(v53[41]) = v11;
  v53[42] = v13;
  v53[43] = v15;
  v53[44] = v17;
  v53[45] = v19;
  LOBYTE(v53[46]) = 0;
  char v20 = (char *)v10 + *(int *)(v8 + 28);
  uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v22 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
  __asm { FMOV            V0.2D, #30.0 }
  *uint64_t v10 = _Q0;
  sub_1000EACE0((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  v6[*(int *)(v4 + 44)] = 0;
  uint64_t v28 = sub_10000AA4C(&qword_100185460);
  uint64_t v29 = v32;
  sub_10000F330((uint64_t)v6, (uint64_t)v32 + *(int *)(v28 + 36), &qword_100185458);
  memcpy(v29, v53, 0x171uLL);
  sub_1000F048C((uint64_t)v53);
  sub_10000F394((uint64_t)v6, &qword_100185458);
  sub_1000EAD48((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_1000F04F8((uint64_t)v52);
}

uint64_t sub_1000D9EE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  unsigned int v32 = enum case for Image.ResizingMode.stretch(_:);
  uint64_t v31 = *(void (**)(char *))(v5 + 104);
  v31(v7);
  uint64_t v38 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v7, v4);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v37 = v39;
  int v33 = v40;
  uint64_t v36 = v41;
  int v30 = v42;
  uint64_t v35 = v43;
  uint64_t v34 = v44;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v45 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v46 = v8;
  sub_100054CC0();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  Image.init(systemName:)();
  ((void (*)(char *, void, uint64_t))v31)(v7, v32, v4);
  uint64_t v16 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  v29(v7, v4);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v17 = v45;
  uint64_t v18 = v47;
  char v67 = 1;
  char v19 = v33;
  char v64 = v33;
  char v20 = v30;
  char v62 = v30;
  char v60 = v15;
  char v58 = 1;
  char v56 = 1;
  char v53 = v46;
  char v51 = v48;
  *(_DWORD *)(a1 + 18) = v65;
  *(_WORD *)(a1 + 22) = v66;
  int v21 = *(_DWORD *)v63;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a1 + 33) = v21;
  int v22 = *(_DWORD *)v61;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a1 + 49) = v22;
  int v23 = *(_DWORD *)v59;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a1 + 89) = v23;
  LOBYTE(v23) = v58;
  int v24 = *(_DWORD *)v57;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v57[3];
  *(_DWORD *)(a1 + 113) = v24;
  LOBYTE(v24) = v56;
  int v25 = v54;
  *(_WORD *)(a1 + 142) = v55;
  *(_DWORD *)(a1 + 138) = v25;
  LOBYTE(v25) = v53;
  int v26 = *(_DWORD *)v52;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a1 + 153) = v26;
  LOBYTE(v26) = v51;
  int v27 = *(_DWORD *)v50;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v50[3];
  *(_DWORD *)(a1 + 169) = v27;
  *(void *)a1 = v38;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v37;
  *(unsigned char *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v36;
  *(unsigned char *)(a1 + 48) = v20;
  *(void *)(a1 + 56) = v35;
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = v24;
  *(void *)(a1 + 144) = v17;
  *(unsigned char *)(a1 + 152) = v25;
  *(void *)(a1 + 160) = v18;
  *(unsigned char *)(a1 + 168) = v26;
  *(_OWORD *)(a1 + 176) = v49;
  swift_retain();
  sub_100055180(v9, v11, v15);
  swift_bridgeObjectRetain();
  sub_100054D14(v9, v11, v15);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DA3F8@<X0>(void *a1@<X8>)
{
  return sub_1000D9B84((void (*)(_OWORD *__return_ptr))sub_1000D9EE8, a1);
}

uint64_t sub_1000DA424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v56 = sub_10000AA4C(&qword_100185528);
  __chkstk_darwin(v56);
  uint64_t v3 = (uint64_t *)((char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = sub_10000AA4C(&qword_100185530);
  __chkstk_darwin(v58);
  uint64_t v59 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000AA4C(&qword_100185120);
  __chkstk_darwin(v55);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v53);
  uint64_t v8 = (_OWORD *)((char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Image.ResizingMode();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000AA4C(&qword_100185538);
  __chkstk_darwin(v52);
  char v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000AA4C(&qword_100185540);
  __chkstk_darwin(v54);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000AA4C(&qword_100185548);
  __chkstk_darwin(v57);
  __chkstk_darwin(v17);
  char v20 = (void *)v1[6];
  if (v20)
  {
    uint64_t v50 = (uint64_t)&v49 - v18;
    uint64_t v21 = v19;
    id v51 = v20;
    Image.init(uiImage:)();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v9);
    uint64_t v22 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    int v23 = (char *)v8 + *(int *)(v53 + 20);
    uint64_t v24 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v25 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104))(v23, v24, v25);
    __asm { FMOV            V0.2D, #15.0 }
    *uint64_t v8 = _Q0;
    sub_1000EACE0((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v6[*(int *)(v55 + 36)] = 256;
    sub_10000F330((uint64_t)v6, (uint64_t)&v14[*(int *)(v52 + 36)], &qword_100185120);
    *(void *)char v14 = v22;
    *((void *)v14 + 1) = 0;
    *((_WORD *)v14 + 8) = 1;
    swift_retain();
    sub_10000F394((uint64_t)v6, &qword_100185120);
    sub_1000EAD48((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    swift_release();
    char v31 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    sub_10000F330((uint64_t)v14, (uint64_t)v16, &qword_100185538);
    unsigned __int8 v40 = &v16[*(int *)(v54 + 36)];
    *unsigned __int8 v40 = v31;
    *((void *)v40 + 1) = v33;
    *((void *)v40 + 2) = v35;
    *((void *)v40 + 3) = v37;
    *((void *)v40 + 4) = v39;
    v40[40] = 0;
    sub_10000F394((uint64_t)v14, &qword_100185538);
    static Color.black.getter();
    uint64_t v41 = Color.opacity(_:)();
    swift_release();
    sub_10000F330((uint64_t)v16, v21, &qword_100185540);
    uint64_t v42 = v21 + *(int *)(v57 + 36);
    *(void *)uint64_t v42 = v41;
    *(_OWORD *)(v42 + 8) = xmmword_10012EE00;
    *(void *)(v42 + 24) = 0x4010000000000000;
    sub_10000F394((uint64_t)v16, &qword_100185540);
    uint64_t v43 = &qword_100185548;
    uint64_t v44 = v50;
    sub_10000F2CC(v21, v50, &qword_100185548);
    sub_10000F330(v44, v59, &qword_100185548);
    swift_storeEnumTagMultiPayload();
    sub_1000F05E8();
    sub_10000F288(&qword_100185580, &qword_100185528);
    _ConditionalContent<>.init(storage:)();

    uint64_t v45 = v44;
  }
  else
  {
    *uint64_t v3 = static Alignment.center.getter();
    v3[1] = v46;
    uint64_t v47 = sub_10000AA4C(&qword_100185550);
    sub_1000DAAC8(v1, (uint64_t)v3 + *(int *)(v47 + 44));
    uint64_t v43 = &qword_100185528;
    sub_10000F330((uint64_t)v3, v59, &qword_100185528);
    swift_storeEnumTagMultiPayload();
    sub_1000F05E8();
    sub_10000F288(&qword_100185580, &qword_100185528);
    _ConditionalContent<>.init(storage:)();
    uint64_t v45 = (uint64_t)v3;
  }
  return sub_10000F394(v45, v43);
}

uint64_t sub_1000DAAC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v215 = a1;
  uint64_t v202 = a2;
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v2 - 8);
  v172 = (char *)&v171 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_10000AA4C(&qword_1001852C0);
  __chkstk_darwin(v190);
  v189 = (uint64_t *)((char *)&v171 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Image.Scale();
  uint64_t v187 = *(void *)(v5 - 8);
  uint64_t v188 = v5;
  __chkstk_darwin(v5);
  v186 = (char *)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_10000AA4C(&qword_1001852C8);
  __chkstk_darwin(v185);
  v171 = (uint64_t *)((char *)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v173 = sub_10000AA4C(&qword_100185BB0);
  __chkstk_darwin(v173);
  v174 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_10000AA4C(&qword_100185588);
  __chkstk_darwin(v176);
  uint64_t v175 = (uint64_t)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = sub_10000AA4C(&qword_100185590);
  __chkstk_darwin(v191);
  uint64_t v177 = (uint64_t)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v178 = (uint64_t)&v171 - v12;
  uint64_t v197 = sub_10000AA4C(&qword_100185598);
  __chkstk_darwin(v197);
  v199 = (uint64_t *)((char *)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v194 = sub_10000AA4C(&qword_1001855A0);
  __chkstk_darwin(v194);
  uint64_t v192 = (uint64_t)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = sub_10000AA4C(&qword_1001855A8);
  __chkstk_darwin(v198);
  v195 = (char *)&v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C((uint64_t *)&unk_1001855B0);
  __chkstk_darwin(v16 - 8);
  v196 = (char *)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_100182558);
  __chkstk_darwin(v18 - 8);
  v181 = (char *)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_10000AA4C(&qword_1001855C0);
  __chkstk_darwin(v180);
  v183 = (uint64_t *)((char *)&v171 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v193 = sub_10000AA4C(&qword_1001855C8);
  __chkstk_darwin(v193);
  uint64_t v182 = (uint64_t)&v171 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v184 = (uint64_t)&v171 - v23;
  uint64_t v24 = sub_10000AA4C(&qword_1001855D0);
  __chkstk_darwin(v24 - 8);
  v201 = (char *)&v171 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v200 = (uint64_t)&v171 - v27;
  uint64_t v28 = sub_10000AA4C(&qword_100184E30);
  uint64_t v212 = *(void *)(v28 - 8);
  uint64_t v213 = v28;
  __chkstk_darwin(v28);
  v210 = (char *)&v171 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v207 = sub_10000AA4C(&qword_100184E38) - 8;
  __chkstk_darwin(v207);
  char v31 = (char *)&v171 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for RoundedRectangle();
  uint64_t v33 = v32 - 8;
  __chkstk_darwin(v32);
  uint64_t v35 = (_OWORD *)((char *)&v171 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = sub_10000AA4C(&qword_1001855D8);
  uint64_t v37 = v36 - 8;
  __chkstk_darwin(v36);
  uint64_t v216 = (uint64_t)&v171 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = sub_10000AA4C(&qword_1001855E0) - 8;
  __chkstk_darwin(v208);
  v206 = (char *)&v171 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = sub_10000AA4C(&qword_1001855E8) - 8;
  __chkstk_darwin(v211);
  uint64_t v209 = (uint64_t)&v171 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = sub_10000AA4C(&qword_1001855F0) - 8;
  __chkstk_darwin(v214);
  uint64_t v218 = (uint64_t)&v171 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v217 = (uint64_t)&v171 - v43;
  uint64_t v44 = (char *)v35 + *(int *)(v33 + 28);
  uint64_t v45 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v205 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v46 = type metadata accessor for RoundedCornerStyle();
  v204 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104);
  v204(v44, v45, v46);
  __asm { FMOV            V0.2D, #15.0 }
  long long v203 = _Q0;
  *uint64_t v35 = _Q0;
  id v179 = self;
  id v52 = [v179 tertiaryLabelColor];
  Color.init(_:)();
  uint64_t v53 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v54 = v216;
  sub_1000EACE0((uint64_t)v35, v216, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  double v55 = *(double *)&v219 * 0.5;
  uint64_t v56 = v54 + *(int *)(v37 + 76);
  sub_1000EACE0((uint64_t)v35, v56, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(double *)(v56 + *(int *)(type metadata accessor for RoundedRectangle._Inset() + 20)) = v55;
  uint64_t v57 = v56 + *(int *)(sub_10000AA4C(&qword_1001855F8) + 36);
  long long v58 = v220;
  *(_OWORD *)uint64_t v57 = v219;
  *(_OWORD *)(v57 + 16) = v58;
  *(void *)(v57 + 32) = v221;
  uint64_t v59 = sub_10000AA4C(&qword_100185600);
  *(void *)(v56 + *(int *)(v59 + 52)) = v53;
  *(_WORD *)(v56 + *(int *)(v59 + 56)) = 256;
  uint64_t v60 = static Alignment.center.getter();
  uint64_t v62 = v61;
  uint64_t v63 = (uint64_t *)(v56 + *(int *)(sub_10000AA4C(&qword_100185608) + 36));
  *uint64_t v63 = v60;
  v63[1] = v62;
  sub_1000EAD48((uint64_t)v35, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v64 = *(int *)(v33 + 28);
  uint64_t v65 = v218;
  v204(&v31[v64], v205, v46);
  *(_OWORD *)char v31 = v203;
  __int16 v66 = &v31[*(int *)(v207 + 44)];
  long long v230 = xmmword_10012EE10;
  long long v231 = xmmword_10012EE20;
  long long v232 = xmmword_10012EE30;
  long long v233 = xmmword_10012EE40;
  long long v207 = xmmword_10012EE50;
  long long v234 = xmmword_10012EE50;
  char v67 = v210;
  View._colorMatrix(_:)();
  uint64_t v69 = v212;
  uint64_t v68 = v213;
  (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v66, v67, v213);
  uint64_t v70 = &v66[*(int *)(sub_10000AA4C(&qword_100185268) + 36)];
  *(void *)uint64_t v70 = 0x4069000000000000;
  v70[8] = 0;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
  uint64_t v71 = static Alignment.center.getter();
  uint64_t v73 = v72;
  uint64_t v74 = (uint64_t)v206;
  uint64_t v75 = (uint64_t)&v206[*(int *)(v208 + 44)];
  sub_10000F330((uint64_t)v31, v75, &qword_100184E38);
  uint64_t v76 = (uint64_t *)(v75 + *(int *)(sub_10000AA4C(&qword_100185130) + 36));
  *uint64_t v76 = v71;
  v76[1] = v73;
  uint64_t v77 = v216;
  sub_10000F330(v216, v74, &qword_1001855D8);
  sub_10000F394((uint64_t)v31, &qword_100184E38);
  sub_10000F394(v77, &qword_1001855D8);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v78 = v209;
  sub_10000F330(v74, v209, &qword_1001855E0);
  uint64_t v79 = (_OWORD *)(v78 + *(int *)(v211 + 44));
  long long v80 = v223;
  *uint64_t v79 = v222;
  v79[1] = v80;
  v79[2] = v224;
  sub_10000F394(v74, &qword_1001855E0);
  static Color.black.getter();
  uint64_t v81 = Color.opacity(_:)();
  swift_release();
  sub_10000F330(v78, v65, &qword_1001855E8);
  uint64_t v82 = v65 + *(int *)(v214 + 44);
  *(void *)uint64_t v82 = v81;
  *(_OWORD *)(v82 + 8) = xmmword_10012EE00;
  *(void *)(v82 + 24) = 0x4010000000000000;
  sub_10000F394(v78, &qword_1001855E8);
  sub_10000F2CC(v65, v217, &qword_1001855F0);
  uint64_t v83 = v215[3];
  char v84 = v215;
  sub_10000AB54(v215, v83);
  if (sub_100099180(v83))
  {
    uint64_t v85 = Image.init(systemName:)();
    long long v225 = xmmword_10012EE60;
    long long v226 = xmmword_10012EE70;
    long long v227 = xmmword_10012EE80;
    long long v228 = xmmword_10012EE90;
    long long v229 = v207;
    uint64_t v86 = (uint64_t)v181;
    View._colorMatrix(_:)();
    uint64_t v87 = v183;
    sub_10000F330(v86, (uint64_t)v183 + *(int *)(v180 + 36), &qword_100182558);
    *uint64_t v87 = v85;
    sub_10000F394(v86, &qword_100182558);
    static Font.Weight.medium.getter();
    uint64_t v88 = enum case for Font.Design.default(_:);
    uint64_t v89 = type metadata accessor for Font.Design();
    uint64_t v90 = *(void *)(v89 - 8);
    uint64_t v91 = (uint64_t)v196;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 104))(v196, v88, v89);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v91, 0, 1, v89);
    uint64_t v92 = static Font.system(size:weight:design:)();
    sub_10000F394(v91, (uint64_t *)&unk_1001855B0);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v94 = v182;
    sub_10000F330((uint64_t)v87, v182, &qword_1001855C0);
    long long v95 = (uint64_t *)(v94 + *(int *)(v193 + 36));
    *long long v95 = KeyPath;
    v95[1] = v92;
    sub_10000F394((uint64_t)v87, &qword_1001855C0);
    uint64_t v96 = v184;
    sub_10000F2CC(v94, v184, &qword_1001855C8);
    sub_10000F330(v96, v192, &qword_1001855C8);
    swift_storeEnumTagMultiPayload();
    sub_1000F0810();
    sub_1000F0950();
    uint64_t v97 = (uint64_t)v195;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v97, (uint64_t)v199, &qword_1001855A8);
    swift_storeEnumTagMultiPayload();
    sub_1000EEA3C(&qword_100185620, &qword_1001855A8, (void (*)(void))sub_1000F0810, (void (*)(void))sub_1000F0950);
    uint64_t v98 = (uint64_t)v201;
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v97, &qword_1001855A8);
    sub_10000F394(v96, &qword_1001855C8);
    uint64_t v99 = sub_10000AA4C(&qword_100185610);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 0, 1, v99);
    uint64_t v100 = v200;
    sub_10000F2CC(v98, v200, &qword_1001855D0);
    uint64_t v101 = v202;
    uint64_t v102 = v98;
    uint64_t v103 = v100;
  }
  else
  {
    uint64_t v105 = v185;
    uint64_t v104 = v186;
    unint64_t v106 = v189;
    uint64_t v107 = v190;
    uint64_t v108 = v187;
    uint64_t v109 = v188;
    uint64_t v110 = v84[3];
    uint64_t v111 = v84[4];
    sub_10000AB54(v84, v110);
    sub_100097BFC(v110, v111);
    if (v112)
    {
      uint64_t v113 = Image.init(systemName:)();
      (*(void (**)(char *, void, uint64_t))(v108 + 104))(v104, enum case for Image.Scale.large(_:), v109);
      uint64_t v114 = swift_getKeyPath();
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))((char *)v106 + *(int *)(v107 + 28), v104, v109);
      *unint64_t v106 = v114;
      uint64_t v115 = *(int *)(v105 + 36);
      uint64_t v116 = v171;
      sub_10000F330((uint64_t)v106, (uint64_t)v171 + v115, &qword_1001852C0);
      uint64_t *v116 = v113;
      swift_retain();
      sub_10000F394((uint64_t)v106, &qword_1001852C0);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v104, v109);
      swift_release();
      uint64_t v117 = (uint64_t)v172;
      static SymbolRenderingMode.monochrome.getter();
      uint64_t v118 = type metadata accessor for SymbolRenderingMode();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56))(v117, 0, 1, v118);
      uint64_t v119 = swift_getKeyPath();
      uint64_t v120 = (uint64_t)v174;
      uint64_t v121 = (uint64_t *)&v174[*(int *)(v173 + 36)];
      uint64_t v122 = sub_10000AA4C(&qword_100185BD0);
      sub_10000F330(v117, (uint64_t)v121 + *(int *)(v122 + 28), (uint64_t *)&unk_1001854E0);
      uint64_t *v121 = v119;
      sub_10000F330((uint64_t)v116, v120, &qword_1001852C8);
      sub_10000F394(v117, (uint64_t *)&unk_1001854E0);
      sub_10000F394((uint64_t)v116, &qword_1001852C8);
      static Font.Weight.medium.getter();
      uint64_t v123 = enum case for Font.Design.default(_:);
      uint64_t v124 = type metadata accessor for Font.Design();
      uint64_t v125 = *(void *)(v124 - 8);
      uint64_t v126 = (uint64_t)v196;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 104))(v196, v123, v124);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v126, 0, 1, v124);
      uint64_t v127 = static Font.system(size:weight:design:)();
      sub_10000F394(v126, (uint64_t *)&unk_1001855B0);
      uint64_t v128 = swift_getKeyPath();
      uint64_t v129 = v175;
      sub_10000F330(v120, v175, &qword_100185BB0);
      unsigned __int8 v130 = (uint64_t *)(v129 + *(int *)(v176 + 36));
      *unsigned __int8 v130 = v128;
      v130[1] = v127;
      sub_10000F394(v120, &qword_100185BB0);
      id v131 = [v179 quaternaryLabelColor];
      uint64_t v132 = Color.init(_:)();
      uint64_t v133 = swift_getKeyPath();
      uint64_t v134 = v177;
      sub_10000F330(v129, v177, &qword_100185588);
      unsigned __int8 v135 = (uint64_t *)(v134 + *(int *)(v191 + 36));
      *unsigned __int8 v135 = v133;
      v135[1] = v132;
      sub_10000F394(v129, &qword_100185588);
      uint64_t v136 = v178;
      sub_10000F2CC(v134, v178, &qword_100185590);
      sub_10000F330(v136, v192, &qword_100185590);
      swift_storeEnumTagMultiPayload();
      sub_1000F0810();
      sub_1000F0950();
      uint64_t v137 = (uint64_t)v195;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v137, (uint64_t)v199, &qword_1001855A8);
      swift_storeEnumTagMultiPayload();
      sub_1000EEA3C(&qword_100185620, &qword_1001855A8, (void (*)(void))sub_1000F0810, (void (*)(void))sub_1000F0950);
      uint64_t v102 = (uint64_t)v201;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v137, &qword_1001855A8);
      sub_10000F394(v136, &qword_100185590);
      uint64_t v138 = sub_10000AA4C(&qword_100185610);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v102, 0, 1, v138);
      uint64_t v103 = v200;
      sub_10000F2CC(v102, v200, &qword_1001855D0);
      uint64_t v101 = v202;
    }
    else
    {
      uint64_t v139 = v84[3];
      uint64_t v140 = v84[4];
      sub_10000AB54(v84, v139);
      uint64_t v141 = sub_100098158(v139, v140);
      if (v142)
      {
        *(void *)&long long v225 = v141;
        *((void *)&v225 + 1) = v142;
        sub_100054CC0();
        uint64_t v143 = Text.init<A>(_:)();
        uint64_t v145 = v144;
        char v147 = v146 & 1;
        static Font.Weight.medium.getter();
        uint64_t v148 = enum case for Font.Design.default(_:);
        uint64_t v149 = type metadata accessor for Font.Design();
        uint64_t v150 = *(void *)(v149 - 8);
        uint64_t v151 = (uint64_t)v196;
        (*(void (**)(char *, uint64_t, uint64_t))(v150 + 104))(v196, v148, v149);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v150 + 56))(v151, 0, 1, v149);
        static Font.system(size:weight:design:)();
        sub_10000F394(v151, (uint64_t *)&unk_1001855B0);
        uint64_t v152 = Text.font(_:)();
        uint64_t v154 = v153;
        LOBYTE(v151) = v155;
        swift_release();
        LOBYTE(v148) = v151 & 1;
        sub_100054D14(v143, v145, v147);
        swift_bridgeObjectRelease();
        id v156 = [v179 quaternaryLabelColor];
        Color.init(_:)();
        uint64_t v157 = Text.foregroundColor(_:)();
        uint64_t v159 = v158;
        char v161 = v160;
        uint64_t v163 = v162;
        swift_release();
        sub_100054D14(v152, v154, v148);
        swift_bridgeObjectRelease();
        v164 = v199;
        uint64_t *v199 = v157;
        v164[1] = v159;
        *((unsigned char *)v164 + 16) = v161 & 1;
        v164[3] = v163;
        swift_storeEnumTagMultiPayload();
        sub_1000EEA3C(&qword_100185620, &qword_1001855A8, (void (*)(void))sub_1000F0810, (void (*)(void))sub_1000F0950);
        uint64_t v103 = v200;
        _ConditionalContent<>.init(storage:)();
        uint64_t v165 = sub_10000AA4C(&qword_100185610);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v103, 0, 1, v165);
      }
      else
      {
        uint64_t v166 = sub_10000AA4C(&qword_100185610);
        uint64_t v103 = v200;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 56))(v200, 1, 1, v166);
      }
      uint64_t v102 = (uint64_t)v201;
      uint64_t v101 = v202;
    }
  }
  uint64_t v168 = v217;
  uint64_t v167 = v218;
  sub_10000F330(v217, v218, &qword_1001855F0);
  sub_10000F330(v103, v102, &qword_1001855D0);
  sub_10000F330(v167, v101, &qword_1001855F0);
  uint64_t v169 = sub_10000AA4C(&qword_100185618);
  sub_10000F330(v102, v101 + *(int *)(v169 + 48), &qword_1001855D0);
  sub_10000F394(v103, &qword_1001855D0);
  sub_10000F394(v168, &qword_1001855F0);
  sub_10000F394(v102, &qword_1001855D0);
  return sub_10000F394(v167, &qword_1001855F0);
}

Swift::Int sub_1000DC254@<X0>(Swift::Int *a1@<X8>)
{
  Swift::UInt v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int result = Hasher._finalize()();
  *a1 = result;
  return result;
}

BOOL sub_1000DC2AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void **)(v0 + 176);
  v12[0] = *(unsigned char *)(v0 + 168);
  uint64_t v13 = v5;
  sub_10000AA4C(&qword_100184DB0);
  State.wrappedValue.getter();
  int v6 = v14;
  sub_1000EAE04(v1, (uint64_t)v12);
  if (v6 == 1)
  {
    uint64_t v7 = v13;
    swift_getKeyPath();
    swift_getKeyPath();
    id v8 = v7;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
    BOOL v10 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1;
    sub_10000F394((uint64_t)v4, &qword_100184B10);
  }
  else
  {
    BOOL v10 = 0;
  }
  sub_1000EAE3C((uint64_t)v12);
  return v10;
}

uint64_t sub_1000DC430()
{
  uint64_t v1 = sub_10000AA4C((uint64_t *)&unk_1001852F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10000AAF0(v6, (uint64_t)v11);
    sub_10000AA4C(&qword_100180098);
    uint64_t started = type metadata accessor for StartCollaborationAction(0);
    if (swift_dynamicCast()) {
      break;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v3, 1, 1, started);
    sub_10000F394((uint64_t)v3, (uint64_t *)&unk_1001852F0);
    v6 += 40;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v8 = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v3, 0, 1, started);
  swift_bridgeObjectRelease();
  sub_10000F394((uint64_t)v3, (uint64_t *)&unk_1001852F0);
  return v8;
}

uint64_t sub_1000DC5D0()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = *(void **)(v0 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v3;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (v9
    && (id v5 = [v9 createCollaborationFooterViewModel],
        swift_unknownObjectRelease(),
        v5)
    && (id v6 = [v5 optionsSummary], v5, v6))
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  return v7;
}

uint64_t sub_1000DC7A4()
{
  uint64_t v1 = sub_10000AA4C(&qword_1001852E8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  id v6 = &v21[-v5 - 8];
  uint64_t v7 = type metadata accessor for PersonNameComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  BOOL v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000AAF0(v0 + 120, (uint64_t)v21);
  sub_10000AA4C(&qword_1001804C8);
  sub_10001FB40(0, &qword_100180600);
  if (swift_dynamicCast())
  {
    id v11 = v20;
    id v12 = [v20 content];

    id v13 = [v12 initiatorNameComponents];
    if (v13)
    {
      static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v3, v14, 1, v7);
    sub_10000F2CC((uint64_t)v3, (uint64_t)v6, &qword_1001852E8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      id v16 = [objc_allocWithZone((Class)NSPersonNameComponentsFormatter) init];
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v18 = [v16 stringFromPersonNameComponents:isa];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v15;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_10000F394((uint64_t)v6, &qword_1001852E8);
  return 0;
}

uint64_t sub_1000DCAB4()
{
  uint64_t v1 = sub_10000AA4C(&qword_100184C50);
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v3 = static Alignment.center.getter();
  v3[1] = v4;
  uint64_t v5 = sub_10000AA4C(&qword_100184C58);
  sub_1000DCCD0(v0, (char *)v3 + *(int *)(v5 + 44));
  uint64_t v6 = *(void *)(v0 + 208);
  LOBYTE(v31) = *(unsigned char *)(v0 + 200);
  *((void *)&v31 + 1) = v6;
  sub_10000AA4C(&qword_100184C60);
  State.projectedValue.getter();
  long long v31 = v16;
  char v32 = v17;
  sub_1000EAE04(v0, (uint64_t)&v16);
  uint64_t v7 = swift_allocObject();
  long long v8 = v29;
  *(_OWORD *)(v7 + 208) = v28;
  *(_OWORD *)(v7 + 224) = v8;
  *(void *)(v7 + 240) = v30;
  long long v9 = v25;
  *(_OWORD *)(v7 + 144) = v24;
  *(_OWORD *)(v7 + 160) = v9;
  long long v10 = v27;
  *(_OWORD *)(v7 + 176) = v26;
  *(_OWORD *)(v7 + 192) = v10;
  long long v11 = v21;
  *(_OWORD *)(v7 + 80) = v20;
  *(_OWORD *)(v7 + 96) = v11;
  long long v12 = v23;
  *(_OWORD *)(v7 + 112) = v22;
  *(_OWORD *)(v7 + 128) = v12;
  long long v13 = v17;
  *(_OWORD *)(v7 + 16) = v16;
  *(_OWORD *)(v7 + 32) = v13;
  long long v14 = v19;
  *(_OWORD *)(v7 + 48) = v18;
  *(_OWORD *)(v7 + 64) = v14;
  sub_10000AA4C(&qword_100184C68);
  sub_10000F288(&qword_100184C70, &qword_100184C50);
  sub_1000ED268();
  sub_1000ED2BC();
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v3, &qword_100184C50);
}

uint64_t sub_1000DCCD0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  long long v93 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100184CF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100184D00);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  long long v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000AA4C(&qword_100184D08) - 8;
  __chkstk_darwin(v84);
  long long v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000AA4C(&qword_100184D10) - 8;
  __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000AA4C(&qword_100184D18);
  __chkstk_darwin(v88);
  uint64_t v87 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000AA4C(&qword_100184D20);
  uint64_t v96 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v95 = (char *)&v84 - v16;
  uint64_t v91 = sub_10000AA4C(&qword_100184D28);
  uint64_t v97 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v89 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v94 = (char *)&v84 - v19;
  BOOL v114 = sub_1000DC2AC();
  sub_1000EAE04(a1, (uint64_t)&v99);
  uint64_t v20 = swift_allocObject();
  long long v21 = v112;
  *(_OWORD *)(v20 + 208) = v111;
  *(_OWORD *)(v20 + 224) = v21;
  *(void *)(v20 + 240) = v113;
  long long v22 = v108;
  *(_OWORD *)(v20 + 144) = v107;
  *(_OWORD *)(v20 + 160) = v22;
  long long v23 = v110;
  *(_OWORD *)(v20 + 176) = v109;
  *(_OWORD *)(v20 + 192) = v23;
  long long v24 = v104;
  *(_OWORD *)(v20 + 80) = v103;
  *(_OWORD *)(v20 + 96) = v24;
  long long v25 = v106;
  *(_OWORD *)(v20 + 112) = v105;
  *(_OWORD *)(v20 + 128) = v25;
  long long v26 = v100;
  *(_OWORD *)(v20 + 16) = v99;
  *(_OWORD *)(v20 + 32) = v26;
  long long v27 = v102;
  *(_OWORD *)(v20 + 48) = v101;
  *(_OWORD *)(v20 + 64) = v27;
  sub_1000ED428();
  View.onTapGesture(count:perform:)();
  swift_release();
  *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v28 = sub_10000AA4C(&qword_100184D38);
  uint64_t v29 = a1;
  sub_1000DD960(a1, (uint64_t)&v5[*(int *)(v28 + 44)]);
  LOBYTE(a1) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_10000F330((uint64_t)v5, (uint64_t)v9, &qword_100184CF8);
  uint64_t v38 = &v9[*(int *)(v7 + 44)];
  *uint64_t v38 = a1;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_10000F394((uint64_t)v5, &qword_100184CF8);
  LOBYTE(a1) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_10000F330((uint64_t)v9, (uint64_t)v11, &qword_100184D00);
  uint64_t v47 = &v11[*(int *)(v84 + 44)];
  *uint64_t v47 = a1;
  *((void *)v47 + 1) = v40;
  *((void *)v47 + 2) = v42;
  *((void *)v47 + 3) = v44;
  *((void *)v47 + 4) = v46;
  v47[40] = 0;
  sub_10000F394((uint64_t)v9, &qword_100184D00);
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v56 = v85;
  sub_10000F330((uint64_t)v11, v85, &qword_100184D08);
  uint64_t v57 = v56 + *(int *)(v86 + 44);
  *(unsigned char *)uint64_t v57 = a1;
  *(void *)(v57 + 8) = v49;
  *(void *)(v57 + 16) = v51;
  *(void *)(v57 + 24) = v53;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 40) = 0;
  sub_10000F394((uint64_t)v11, &qword_100184D08);
  uint64_t v58 = v29;
  sub_1000EAE04(v29, (uint64_t)&v99);
  uint64_t v59 = swift_allocObject();
  long long v60 = v112;
  *(_OWORD *)(v59 + 208) = v111;
  *(_OWORD *)(v59 + 224) = v60;
  *(void *)(v59 + 240) = v113;
  long long v61 = v108;
  *(_OWORD *)(v59 + 144) = v107;
  *(_OWORD *)(v59 + 160) = v61;
  long long v62 = v110;
  *(_OWORD *)(v59 + 176) = v109;
  *(_OWORD *)(v59 + 192) = v62;
  long long v63 = v104;
  *(_OWORD *)(v59 + 80) = v103;
  *(_OWORD *)(v59 + 96) = v63;
  long long v64 = v106;
  *(_OWORD *)(v59 + 112) = v105;
  *(_OWORD *)(v59 + 128) = v64;
  long long v65 = v100;
  *(_OWORD *)(v59 + 16) = v99;
  *(_OWORD *)(v59 + 32) = v65;
  long long v66 = v102;
  *(_OWORD *)(v59 + 48) = v101;
  *(_OWORD *)(v59 + 64) = v66;
  uint64_t v67 = v87;
  sub_10000F330(v56, v87, &qword_100184D10);
  uint64_t v68 = (uint64_t (**)())(v67 + *(int *)(v88 + 36));
  char *v68 = sub_1000ED480;
  v68[1] = (uint64_t (*)())v59;
  v68[2] = 0;
  v68[3] = 0;
  sub_10000F394(v56, &qword_100184D10);
  static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  uint64_t v98 = v58;
  sub_10000AA4C(&qword_100184D40);
  sub_1000ED490();
  sub_1000ED6A4();
  uint64_t v69 = v90;
  View.animation<A>(_:body:)();
  swift_release();
  sub_10000F394(v67, &qword_100184D18);
  uint64_t v71 = v95;
  uint64_t v70 = v96;
  uint64_t v72 = v92;
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v69, v92);
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v97 + 16);
  uint64_t v74 = v89;
  uint64_t v75 = v91;
  v73(v89, v94, v91);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  uint64_t v77 = v71;
  uint64_t v78 = v72;
  v76(v69, v77, v72);
  uint64_t v79 = v93;
  v73(v93, v74, v75);
  long long v80 = &v79[*(int *)(sub_10000AA4C(&qword_100184DA8) + 48)];
  v76(v80, v69, v78);
  uint64_t v81 = *(void (**)(char *, uint64_t))(v96 + 8);
  v81(v95, v78);
  uint64_t v82 = *(void (**)(char *, uint64_t))(v97 + 8);
  v82(v94, v75);
  v81(v69, v78);
  return ((uint64_t (*)(char *, uint64_t))v82)(v74, v75);
}

uint64_t sub_1000DD4D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v29 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *(void *)(a1 + 176);
  LOBYTE(v34[0]) = *(unsigned char *)(a1 + 168);
  *((void *)&v34[0] + 1) = v15;
  LOBYTE(v33[0]) = 0;
  sub_10000AA4C(&qword_100184DB0);
  State.wrappedValue.setter();
  sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
  uint64_t v27 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28(v11, v8);
  sub_1000EAE04(a1, (uint64_t)v34);
  uint64_t v16 = swift_allocObject();
  long long v17 = v34[13];
  *(_OWORD *)(v16 + 208) = v34[12];
  *(_OWORD *)(v16 + 224) = v17;
  *(void *)(v16 + 240) = v35;
  long long v18 = v34[9];
  *(_OWORD *)(v16 + 144) = v34[8];
  *(_OWORD *)(v16 + 160) = v18;
  long long v19 = v34[11];
  *(_OWORD *)(v16 + 176) = v34[10];
  *(_OWORD *)(v16 + 192) = v19;
  long long v20 = v34[5];
  *(_OWORD *)(v16 + 80) = v34[4];
  *(_OWORD *)(v16 + 96) = v20;
  long long v21 = v34[7];
  *(_OWORD *)(v16 + 112) = v34[6];
  *(_OWORD *)(v16 + 128) = v21;
  long long v22 = v34[1];
  *(_OWORD *)(v16 + 16) = v34[0];
  *(_OWORD *)(v16 + 32) = v22;
  long long v23 = v34[3];
  *(_OWORD *)(v16 + 48) = v34[2];
  *(_OWORD *)(v16 + 64) = v23;
  v33[4] = sub_1000EF58C;
  v33[5] = v16;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 1107296256;
  void v33[2] = sub_100119678;
  v33[3] = &unk_10016D148;
  long long v24 = _Block_copy(v33);
  swift_release();
  static DispatchQoS.unspecified.getter();
  *(void *)&v34[0] = _swiftEmptyArrayStorage;
  sub_1000EAE6C(&qword_100183630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000AA4C((uint64_t *)&unk_100183D70);
  sub_10000F288(&qword_100183638, (uint64_t *)&unk_100183D70);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v25 = (void *)v27;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
  return ((uint64_t (*)(char *, uint64_t))v28)(v14, v29);
}

void sub_1000DD914(uint64_t a1)
{
  id v1 = *(id *)(a1 + 8);
  sub_100058548();
}

uint64_t sub_1000DD960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v897 = a2;
  uint64_t v889 = sub_10000AA4C(&qword_100184DB8);
  __chkstk_darwin(v889);
  uint64_t v880 = (uint64_t)&v773 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100184DC0);
  __chkstk_darwin(v4 - 8);
  v847 = (uint64_t *)((char *)&v773 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v846 = sub_10000AA4C(&qword_100184DC8);
  __chkstk_darwin(v846);
  uint64_t v849 = (uint64_t)&v773 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v848 = sub_10000AA4C(&qword_100184DD0);
  __chkstk_darwin(v848);
  uint64_t v851 = (uint64_t)&v773 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v871 = sub_10000AA4C(&qword_100184DD8);
  __chkstk_darwin(v871);
  uint64_t v850 = (uint64_t)&v773 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v852 = (uint64_t)&v773 - v10;
  uint64_t v869 = sub_10000AA4C(&qword_100184DE0);
  __chkstk_darwin(v869);
  uint64_t v870 = (uint64_t)&v773 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v857 = sub_10000AA4C(&qword_100184DE8);
  uint64_t v817 = *(void *)(v857 - 8);
  __chkstk_darwin(v857);
  v816 = (char *)&v773 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v853 = sub_10000AA4C(&qword_100184DF0);
  __chkstk_darwin(v853);
  uint64_t v856 = (uint64_t)&v773 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v855 = sub_10000AA4C(&qword_100184DF8);
  __chkstk_darwin(v855);
  v825 = (char *)&v773 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v818 = sub_10000AA4C(&qword_100184E00);
  __chkstk_darwin(v818);
  uint64_t v821 = (uint64_t)&v773 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v819 = (char *)&v773 - v17;
  __chkstk_darwin(v18);
  uint64_t v824 = (uint64_t)&v773 - v19;
  uint64_t v20 = sub_10000AA4C(&qword_100184E08);
  uint64_t v822 = *(void *)(v20 - 8);
  uint64_t v823 = v20;
  __chkstk_darwin(v20);
  v820 = (char *)&v773 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v859 = (char *)&v773 - v23;
  uint64_t v866 = sub_10000AA4C(&qword_100184E10);
  __chkstk_darwin(v866);
  v854 = (char *)&v773 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_100184E18);
  __chkstk_darwin(v25 - 8);
  v867 = (char *)&v773 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v773 - v28;
  uint64_t v30 = sub_10000AA4C(&qword_100184E20);
  __chkstk_darwin(v30 - 8);
  uint64_t v845 = (uint64_t)&v773 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v844 = (char *)&v773 - v33;
  uint64_t v838 = sub_10000AA4C(&qword_100184E28);
  __chkstk_darwin(v838);
  v840 = (uint64_t *)((char *)&v773 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = sub_10000AA4C(&qword_100184E30);
  uint64_t v802 = *(void *)(v35 - 8);
  uint64_t v803 = v35;
  __chkstk_darwin(v35);
  v799 = (char *)&v773 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v794 = sub_10000AA4C(&qword_100184E38);
  __chkstk_darwin(v794);
  v804 = (char *)&v773 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v791 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v791);
  v789 = (char *)&v773 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000AA4C(&qword_100184E40);
  uint64_t v785 = *(void *)(v39 - 8);
  uint64_t v786 = v39;
  __chkstk_darwin(v39);
  v784 = (char *)&v773 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v782 = sub_10000AA4C(&qword_100184E48);
  __chkstk_darwin(v782);
  v787 = (char *)&v773 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v783 = sub_10000AA4C(&qword_100184E50);
  __chkstk_darwin(v783);
  v795 = (char *)&v773 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v790 = sub_10000AA4C(&qword_100184E58);
  __chkstk_darwin(v790);
  v796 = (char *)&v773 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v793 = sub_10000AA4C(&qword_100184E60);
  __chkstk_darwin(v793);
  uint64_t v801 = (uint64_t)&v773 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v798 = sub_10000AA4C(&qword_100184E68);
  __chkstk_darwin(v798);
  uint64_t v807 = (uint64_t)&v773 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v806 = sub_10000AA4C(&qword_100184E70);
  __chkstk_darwin(v806);
  uint64_t v809 = (uint64_t)&v773 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v808 = sub_10000AA4C(&qword_100184E78);
  __chkstk_darwin(v808);
  uint64_t v811 = (uint64_t)&v773 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v834 = sub_10000AA4C(&qword_100184E80);
  __chkstk_darwin(v834);
  v810 = (char *)&v773 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  uint64_t v812 = (uint64_t)&v773 - v50;
  uint64_t v51 = sub_10000AA4C(&qword_100184E88);
  __chkstk_darwin(v51 - 8);
  uint64_t v843 = (uint64_t)&v773 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  uint64_t v55 = (char *)&v773 - v54;
  uint64_t v56 = sub_10000AA4C(&qword_100184E90);
  __chkstk_darwin(v56 - 8);
  uint64_t v883 = (uint64_t)&v773 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  uint64_t v888 = (uint64_t)&v773 - v59;
  uint64_t v60 = sub_10000AA4C(&qword_100184E98);
  __chkstk_darwin(v60);
  uint64_t v896 = (uint64_t)&v773 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v895 = sub_10000AA4C(&qword_100184EA0);
  __chkstk_darwin(v895);
  long long v63 = (char *)&v773 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v863 = sub_10000AA4C(&qword_100184EA8);
  __chkstk_darwin(v863);
  uint64_t v864 = (uint64_t)&v773 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v833 = sub_10000AA4C(&qword_100184EB0);
  __chkstk_darwin(v833);
  uint64_t v836 = (uint64_t)&v773 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v835 = sub_10000AA4C(&qword_100184EB8);
  __chkstk_darwin(v835);
  uint64_t v805 = (uint64_t)&v773 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v788 = sub_10000AA4C(&qword_100184EC0);
  __chkstk_darwin(v788);
  uint64_t v797 = (uint64_t)&v773 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v792 = (char *)&v773 - v69;
  __chkstk_darwin(v70);
  uint64_t v800 = (uint64_t)&v773 - v71;
  uint64_t v72 = sub_10000AA4C(&qword_100184EC8);
  __chkstk_darwin(v72);
  v858 = (char *)&v773 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  uint64_t v881 = (uint64_t)&v773 - v75;
  __chkstk_darwin(v76);
  uint64_t v831 = (uint64_t)&v773 - v77;
  uint64_t v860 = sub_10000AA4C(&qword_100184ED0);
  __chkstk_darwin(v860);
  v832 = (char *)&v773 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000AA4C(&qword_100184ED8);
  __chkstk_darwin(v79 - 8);
  uint64_t v861 = (uint64_t)&v773 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v81);
  v862 = (char *)&v773 - v82;
  uint64_t v83 = sub_10000AA4C(&qword_100184EE0);
  __chkstk_darwin(v83 - 8);
  uint64_t v907 = (uint64_t)&v773 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v85);
  uint64_t v87 = (char *)&v773 - v86;
  uint64_t v88 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v88 - 8);
  v885 = (uint64_t *)((char *)&v773 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v90);
  v900 = (uint64_t *)((char *)&v773 - v91);
  uint64_t v92 = type metadata accessor for Locale();
  __chkstk_darwin(v92 - 8);
  v899 = (char *)&v773 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v94 - 8);
  v898 = (char *)&v773 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v901 = sub_10000AA4C(&qword_100184EE8);
  uint64_t v894 = *(void *)(v901 - 8);
  __chkstk_darwin(v901);
  v830 = (char *)&v773 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v97);
  uint64_t v829 = (uint64_t)&v773 - v98;
  uint64_t v99 = sub_10000AA4C(&qword_100184EF0);
  __chkstk_darwin(v99 - 8);
  uint64_t v906 = (uint64_t)&v773 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v101);
  uint64_t v912 = (uint64_t)&v773 - v102;
  uint64_t v103 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v103 - 8);
  v842 = (char *)&v773 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v105);
  v839 = (char *)&v773 - v106;
  __chkstk_darwin(v107);
  v837 = (char *)&v773 - v108;
  __chkstk_darwin(v109);
  v815 = (char *)&v773 - v110;
  __chkstk_darwin(v111);
  v814 = (char *)&v773 - v112;
  __chkstk_darwin(v113);
  v813 = (char *)&v773 - v114;
  __chkstk_darwin(v115);
  v781 = (char *)&v773 - v116;
  __chkstk_darwin(v117);
  v780 = (char *)&v773 - v118;
  __chkstk_darwin(v119);
  v779 = (char *)&v773 - v120;
  __chkstk_darwin(v121);
  v891 = (char *)&v773 - v122;
  __chkstk_darwin(v123);
  v890 = (char *)&v773 - v124;
  __chkstk_darwin(v125);
  v879 = (char *)&v773 - v126;
  __chkstk_darwin(v127);
  uint64_t v911 = (uint64_t)&v773 - v128;
  __chkstk_darwin(v129);
  v904 = (char *)&v773 - v130;
  __chkstk_darwin(v131);
  v828 = (char *)&v773 - v132;
  __chkstk_darwin(v133);
  v827 = (char *)&v773 - v134;
  __chkstk_darwin(v135);
  v826 = (char *)&v773 - v136;
  __chkstk_darwin(v137);
  *((void *)&v893 + 1) = (char *)&v773 - v138;
  __chkstk_darwin(v139);
  v884 = (uint64_t *)((char *)&v773 - v140);
  __chkstk_darwin(v141);
  v873 = (char *)&v773 - v142;
  uint64_t v876 = sub_10000AA4C(&qword_100184EF8);
  v875 = *(void **)(v876 - 8);
  __chkstk_darwin(v876);
  uint64_t v874 = (uint64_t)&v773 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v872 = sub_10000AA4C(&qword_100184F00);
  __chkstk_darwin(v872);
  uint64_t v878 = (uint64_t)&v773 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v877 = sub_10000AA4C(&qword_100184F08);
  __chkstk_darwin(v877);
  *(void *)&long long v893 = (char *)&v773 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v909 = sub_10000AA4C(&qword_100184F10);
  *(void *)&long long v902 = *(void *)(v909 - 8);
  __chkstk_darwin(v909);
  uint64_t v892 = (uint64_t)&v773 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v147);
  uint64_t v887 = (uint64_t)&v773 - v148;
  uint64_t v149 = sub_10000AA4C(&qword_100184F18);
  __chkstk_darwin(v149 - 8);
  uint64_t v905 = (uint64_t)&v773 - ((v150 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v151);
  int v153 = *(unsigned __int8 *)(*(void *)(a1 + 8)
                            + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_includeRemotePersonDetails);
  v903 = v87;
  uint64_t v886 = v60;
  uint64_t v910 = (uint64_t)&v773 - v152;
  v868 = v29;
  uint64_t v908 = a1;
  v865 = v63;
  v841 = v55;
  uint64_t v882 = v72;
  if (v153 == 1)
  {
    uint64_t v154 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
    uint64_t v777 = *(void *)(a1 + 24);
    v778 = v154;
    uint64_t v155 = *(void *)(a1 + 32);
    uint64_t v775 = *(void *)(a1 + 40);
    uint64_t v776 = v155;
    uint64_t v156 = *(void *)(a1 + 48);
    uint64_t v773 = *(void *)(a1 + 56);
    uint64_t v774 = v156;
    uint64_t v157 = *(void *)(a1 + 64);
    uint64_t v158 = *(void *)(a1 + 72);
    uint64_t v159 = *(void *)(a1 + 80);
    unint64_t v160 = *(void *)(a1 + 88);
    uint64_t v161 = *(void *)(a1 + 96);
    uint64_t v162 = *(void *)(a1 + 104);
    int v163 = *(_DWORD *)(a1 + 112);
    *(void *)v930 = v154;
    *(void *)&v930[8] = v777;
    *(void *)&v930[16] = v155;
    *(void *)&v930[24] = v775;
    *(void *)&v930[32] = v156;
    *(void *)&v930[40] = v773;
    *(void *)&v930[48] = v157;
    *(void *)&v930[56] = v158;
    *(void *)&v930[64] = v159;
    *(void *)&v930[72] = v160;
    *(void *)&v930[80] = v161;
    *(void *)&v930[88] = v162;
    *(_DWORD *)&v930[96] = v163;
    sub_1000EAE04(a1, (uint64_t)v931);
    uint64_t v164 = swift_allocObject();
    long long v165 = *(_OWORD *)&v931[208];
    *(_OWORD *)(v164 + 208) = *(_OWORD *)&v931[192];
    *(_OWORD *)(v164 + 224) = v165;
    *(void *)(v164 + 240) = *(void *)&v931[224];
    long long v166 = *(_OWORD *)&v931[144];
    *(_OWORD *)(v164 + 144) = *(_OWORD *)&v931[128];
    *(_OWORD *)(v164 + 160) = v166;
    long long v167 = *(_OWORD *)&v931[176];
    *(_OWORD *)(v164 + 176) = *(_OWORD *)&v931[160];
    *(_OWORD *)(v164 + 192) = v167;
    long long v168 = *(_OWORD *)&v931[80];
    *(_OWORD *)(v164 + 80) = *(_OWORD *)&v931[64];
    *(_OWORD *)(v164 + 96) = v168;
    long long v169 = *(_OWORD *)&v931[112];
    *(_OWORD *)(v164 + 112) = *(_OWORD *)&v931[96];
    *(_OWORD *)(v164 + 128) = v169;
    long long v170 = *(_OWORD *)&v931[16];
    *(_OWORD *)(v164 + 16) = *(_OWORD *)v931;
    *(_OWORD *)(v164 + 32) = v170;
    long long v171 = *(_OWORD *)&v931[48];
    *(_OWORD *)(v164 + 48) = *(_OWORD *)&v931[32];
    *(_OWORD *)(v164 + 64) = v171;
    sub_10005EAC4((uint64_t)v778, v777, v776, v775, v774, v773, v157, v158, v159, v160);
    sub_1000EED1C();
    uint64_t v172 = v874;
    View.onTapGesture(count:perform:)();
    swift_release();
    sub_10005E778(*(uint64_t *)v930, *(uint64_t *)&v930[8], *(uint64_t *)&v930[16], *(uint64_t *)&v930[24], *(uint64_t *)&v930[32], *(uint64_t *)&v930[40], *(uint64_t *)&v930[48], *(uint64_t *)&v930[56], *(uint64_t *)&v930[64], *(unint64_t *)&v930[72]);
    uint64_t v173 = *(void **)(a1 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v174 = v173;
    uint64_t v175 = (uint64_t)v873;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v176 = type metadata accessor for ContinuousClock.Instant();
    uint64_t v177 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 48);
    int v178 = v177(v175, 1, v176);
    id v179 = v177;
    v778 = v177;
    LODWORD(v177) = v178;
    sub_10000F394(v175, &qword_100184B10);

    double v180 = 0.0;
    if (v177 == 1) {
      double v181 = 0.0;
    }
    else {
      double v181 = 10.0;
    }
    uint64_t v182 = v875;
    uint64_t v183 = v878;
    uint64_t v184 = v876;
    ((void (*)(uint64_t, uint64_t, uint64_t))v875[2])(v878, v172, v876);
    uint64_t v185 = v183 + *(int *)(v872 + 36);
    *(double *)uint64_t v185 = v181;
    *(unsigned char *)(v185 + 8) = 0;
    ((void (*)(uint64_t, uint64_t))v182[1])(v172, v184);
    v186 = *(void **)(a1 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v187 = v186;
    uint64_t v188 = v884;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    LODWORD(v184) = v179((uint64_t)v188, 1, v176);
    sub_10000F394((uint64_t)v188, &qword_100184B10);

    if (v184 == 1) {
      double v180 = 1.0;
    }
    uint64_t v189 = v893;
    sub_10000F330(v183, v893, &qword_100184F00);
    *(double *)(v189 + *(int *)(v877 + 36)) = v180;
    sub_10000F394(v183, &qword_100184F00);
    uint64_t v190 = static Animation.spring(response:dampingFraction:blendDuration:)();
    uint64_t v191 = v908;
    uint64_t v192 = *(void **)(v908 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v193 = v192;
    uint64_t v194 = *((void *)&v893 + 1);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v195 = v778(v194, 1, v176);
    uint64_t v196 = v910;
    BOOL v197 = v195 != 1;
    sub_10000F394(v194, &qword_100184B10);

    uint64_t v198 = v892;
    sub_10000F330(v189, v892, &qword_100184F08);
    uint64_t v199 = v909;
    uint64_t v200 = v198 + *(int *)(v909 + 36);
    *(void *)uint64_t v200 = v190;
    *(unsigned char *)(v200 + 8) = v197;
    uint64_t v201 = v189;
    a1 = v191;
    sub_10000F394(v201, &qword_100184F08);
    uint64_t v202 = v887;
    sub_10000F2CC(v198, v887, &qword_100184F10);
    sub_10000F2CC(v202, v196, &qword_100184F10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v902 + 56))(v196, 0, 1, v199);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v902 + 56))((char *)&v773 - v152, 1, 1, v909);
  }
  char v203 = sub_1000DC430();
  sub_1000EAE04(a1, (uint64_t)v932);
  if ((v203 & 1) == 0)
  {
    sub_1000EAE3C((uint64_t)v932);
    goto LABEL_15;
  }
  v931[0] = v932[216];
  *(void *)&v931[8] = v933;
  sub_10000AA4C(&qword_100184DB0);
  State.wrappedValue.getter();
  char v204 = v930[0];
  sub_1000EAE3C((uint64_t)v932);
  if (v204)
  {
LABEL_15:
    uint64_t v220 = 1;
    uint64_t v221 = v901;
    goto LABEL_24;
  }
  uint64_t v205 = *(void *)(a1 + 16);
  uint64_t v206 = *(void *)(a1 + 24);
  long long v207 = *(void **)(a1 + 32);
  uint64_t v208 = *(void **)(a1 + 40);
  uint64_t v209 = *(void *)(a1 + 48);
  long long v893 = *(_OWORD *)(a1 + 56);
  uint64_t v210 = *(void *)(a1 + 80);
  uint64_t v909 = *(void *)(a1 + 72);
  unint64_t v211 = *(void *)(a1 + 88);
  *(void *)&long long v902 = *(void *)(a1 + 96);
  uint64_t v892 = *(void *)(a1 + 104);
  int v212 = *(_DWORD *)(a1 + 112);
  uint64_t v213 = (void *)(a1 + 120);
  if (v211 >> 62)
  {
    uint64_t v222 = *(void *)(a1 + 152);
    uint64_t v876 = *(void *)(a1 + 144);
    uint64_t v877 = v222;
    sub_10000AB54(v213, v876);
    uint64_t v950 = v205;
    uint64_t v951 = v206;
    v952 = v207;
    v953 = v208;
    long long v955 = 0u;
    long long v956 = 0u;
    uint64_t v954 = v209;
    unint64_t v957 = 0x8000000000000000;
    uint64_t v959 = 0;
    uint64_t v958 = 0;
    int v960 = 0;
    sub_10005EAC4(v205, v206, (uint64_t)v207, (uint64_t)v208, v209, v893, *((uint64_t *)&v893 + 1), v909, v210, v211);
    uint64_t v217 = sub_100097100((uint64_t)&v950, v876, v877);
    uint64_t v219 = v223;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v219)
    {
LABEL_17:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v217 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v219 = v224;
    }
  }
  else
  {
    uint64_t v214 = *(void *)(a1 + 152);
    uint64_t v876 = *(void *)(a1 + 144);
    uint64_t v877 = v214;
    sub_10000AB54(v213, v876);
    uint64_t v878 = v205;
    uint64_t v950 = v205;
    uint64_t v951 = v206;
    v884 = v207;
    v952 = v207;
    v953 = v208;
    v875 = v208;
    uint64_t v887 = v209;
    uint64_t v954 = v209;
    uint64_t v215 = v893;
    long long v955 = v893;
    uint64_t v216 = *((void *)&v893 + 1);
    *(void *)&long long v956 = v909;
    *((void *)&v956 + 1) = v210;
    unint64_t v957 = v211;
    uint64_t v958 = v902;
    uint64_t v959 = v892;
    int v960 = v212;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v217 = sub_100097100((uint64_t)&v950, v876, v877);
    uint64_t v219 = v218;
    sub_10005E778(v878, v206, (uint64_t)v884, (uint64_t)v875, v887, v215, v216, v909, v210, v211);
    if (!v219) {
      goto LABEL_17;
    }
  }
  *(void *)v931 = v217;
  *(void *)&v931[8] = v219;
  sub_100054CC0();
  uint64_t v225 = Text.init<A>(_:)();
  uint64_t v227 = v226;
  char v229 = v228 & 1;
  static Font.subheadline.getter();
  *(void *)&long long v902 = Text.font(_:)();
  *((void *)&v893 + 1) = v230;
  LODWORD(v893) = v231;
  uint64_t v909 = v232;
  swift_release();
  sub_100054D14(v225, v227, v229);
  swift_bridgeObjectRelease();
  LODWORD(v892) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v234 = v233;
  uint64_t v236 = v235;
  uint64_t v238 = v237;
  uint64_t v240 = v239;
  LODWORD(v887) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v241 = v908;
  v242 = *(void **)(v908 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v243 = v242;
  uint64_t v244 = (uint64_t)v826;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v245 = type metadata accessor for ContinuousClock.Instant();
  v246 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v245 - 8) + 48);
  LODWORD(v227) = v246(v244, 1, v245);
  sub_10000F394(v244, &qword_100184B10);

  double v247 = 0.0;
  if (v227 == 1) {
    double v248 = 0.0;
  }
  else {
    double v248 = 10.0;
  }
  v249 = *(void **)(v241 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v250 = v249;
  uint64_t v251 = (uint64_t)v827;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v252 = v246(v251, 1, v245);
  sub_10000F394(v251, &qword_100184B10);

  if (v252 == 1) {
    double v247 = 1.0;
  }
  uint64_t v253 = static Animation.spring(response:dampingFraction:blendDuration:)();
  v254 = *(void **)(v241 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v255 = v254;
  uint64_t v256 = (uint64_t)v828;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  BOOL v257 = v246(v256, 1, v245) != 1;
  sub_10000F394(v256, &qword_100184B10);

  a1 = v241;
  uint64_t KeyPath = swift_getKeyPath();
  v259 = v885;
  uint64_t *v885 = KeyPath;
  sub_10000AA4C(&qword_100182218);
  swift_storeEnumTagMultiPayload();
  uint64_t v260 = (uint64_t)v259;
  v261 = v900;
  sub_1000EC128(v260, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
  uint64_t v221 = v901;
  uint64_t v262 = (uint64_t)v830;
  sub_1000EACE0((uint64_t)v261, (uint64_t)&v830[*(int *)(v901 + 36)], type metadata accessor for VibrancyEffectModifier);
  uint64_t v263 = *((void *)&v893 + 1);
  *(void *)uint64_t v262 = v902;
  *(void *)(v262 + 8) = v263;
  *(unsigned char *)(v262 + 16) = v893 & 1;
  *(void *)(v262 + 24) = v909;
  *(unsigned char *)(v262 + 32) = v892;
  *(void *)(v262 + 40) = v234;
  *(void *)(v262 + 48) = v236;
  *(void *)(v262 + 56) = v238;
  *(void *)(v262 + 64) = v240;
  *(unsigned char *)(v262 + 72) = 0;
  *(_DWORD *)(v262 + 76) = v887;
  *(double *)(v262 + 80) = v248;
  *(unsigned char *)(v262 + 88) = 0;
  *(double *)(v262 + 96) = v247;
  *(void *)(v262 + 104) = v253;
  *(unsigned char *)(v262 + 112) = v257;
  sub_1000EAD48((uint64_t)v261, type metadata accessor for VibrancyEffectModifier);
  uint64_t v264 = v829;
  sub_10000F2CC(v262, v829, &qword_100184EE8);
  sub_10000F2CC(v264, v912, &qword_100184EE8);
  uint64_t v220 = 0;
LABEL_24:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v894 + 56))(v912, v220, 1, v221);
  v884 = (void *)(a1 + 120);
  sub_1000EADA8(a1 + 120, (uint64_t)v930);
  v265 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v266 = v265;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v267 = *(void *)v931;
  *(_OWORD *)v931 = *(_OWORD *)v930;
  *(_OWORD *)&v931[16] = *(_OWORD *)&v930[16];
  *(_OWORD *)&v931[32] = *(_OWORD *)&v930[32];
  *(void *)&v931[48] = v267;
  sub_1000ED844((uint64_t)v931, (uint64_t)v930);
  *(void *)&v930[56] = 0x3FF0000000000000;
  sub_1000ED87C((uint64_t)v931);
  char v268 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v270 = v269;
  uint64_t v272 = v271;
  uint64_t v274 = v273;
  uint64_t v276 = v275;
  sub_10000F330((uint64_t)v930, (uint64_t)v931, &qword_100184F20);
  v931[64] = v268;
  *(void *)&v931[72] = v270;
  *(void *)&v931[80] = v272;
  *(void *)&v931[88] = v274;
  *(void *)&v931[96] = v276;
  v931[104] = 0;
  sub_10000F394((uint64_t)v930, &qword_100184F20);
  char v277 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v279 = v278;
  uint64_t v281 = v280;
  uint64_t v283 = v282;
  uint64_t v285 = v284;
  sub_10000F330((uint64_t)v931, (uint64_t)v914, (uint64_t *)&unk_100184F28);
  LOBYTE(v915) = v277;
  *((void *)&v915 + 1) = v279;
  *(void *)&long long v916 = v281;
  *((void *)&v916 + 1) = v283;
  *(void *)&long long v917 = v285;
  BYTE8(v917) = 0;
  sub_10000F394((uint64_t)v931, (uint64_t *)&unk_100184F28);
  uint64_t v286 = *(void *)(a1 + 224);
  v930[0] = *(unsigned char *)(a1 + 216);
  *(void *)&v930[8] = v286;
  uint64_t v909 = sub_10000AA4C(&qword_100184DB0);
  State.projectedValue.getter();
  static Animation.default.getter();
  sub_10000AA4C(&qword_10017FBD0);
  Binding.animation(_:)();
  swift_release();
  swift_release();
  swift_release();
  long long v287 = v934;
  char v288 = v935;
  sub_1000EAE04(a1, (uint64_t)v931);
  uint64_t v289 = swift_allocObject();
  long long v290 = *(_OWORD *)&v931[208];
  *(_OWORD *)(v289 + 208) = *(_OWORD *)&v931[192];
  *(_OWORD *)(v289 + 224) = v290;
  *(void *)(v289 + 240) = *(void *)&v931[224];
  long long v291 = *(_OWORD *)&v931[144];
  *(_OWORD *)(v289 + 144) = *(_OWORD *)&v931[128];
  *(_OWORD *)(v289 + 160) = v291;
  long long v292 = *(_OWORD *)&v931[176];
  *(_OWORD *)(v289 + 176) = *(_OWORD *)&v931[160];
  *(_OWORD *)(v289 + 192) = v292;
  long long v293 = *(_OWORD *)&v931[80];
  *(_OWORD *)(v289 + 80) = *(_OWORD *)&v931[64];
  *(_OWORD *)(v289 + 96) = v293;
  long long v294 = *(_OWORD *)&v931[112];
  *(_OWORD *)(v289 + 112) = *(_OWORD *)&v931[96];
  *(_OWORD *)(v289 + 128) = v294;
  long long v295 = *(_OWORD *)&v931[16];
  *(_OWORD *)(v289 + 16) = *(_OWORD *)v931;
  *(_OWORD *)(v289 + 32) = v295;
  long long v296 = *(_OWORD *)&v931[48];
  *(_OWORD *)(v289 + 48) = *(_OWORD *)&v931[32];
  *(_OWORD *)(v289 + 64) = v296;
  LOBYTE(v939) = 0;
  uint64_t v941 = 0;
  uint64_t v940 = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Transaction.init(animation:)();
  GestureState.init(wrappedValue:resetTransaction:)();
  char v297 = v930[0];
  uint64_t v298 = *(void *)&v930[8];
  uint64_t v299 = *(void *)&v930[16];
  uint64_t v300 = *(void *)&v930[24];
  long long v902 = *(_OWORD *)&v930[32];
  sub_10000F330((uint64_t)v914, (uint64_t)v930, &qword_100184F38);
  swift_release();
  swift_release();
  swift_release();
  *(_OWORD *)&v930[160] = xmmword_10012EEA0;
  *(void *)&v930[176] = 0x3FD51EB851EB851FLL;
  v930[184] = 0;
  *(void *)&v930[192] = sub_1000ED8B0;
  *(void *)&v930[200] = v289;
  v930[208] = v297;
  *(void *)&v930[216] = v298;
  *(void *)&v930[224] = v299;
  *(void *)&v930[232] = v300;
  *(_OWORD *)&v930[240] = v902;
  *(_OWORD *)&v930[256] = v287;
  v930[272] = v288;
  sub_10000F394((uint64_t)v914, &qword_100184F38);
  v301 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v302 = v301;
  uint64_t v303 = (uint64_t)v904;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v304 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v305 = *(void *)(v304 - 8);
  v306 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v305 + 48);
  uint64_t v307 = v305 + 48;
  BOOL v308 = v306(v303, 1, v304) != 1;
  sub_10000F394(v303, &qword_100184B10);

  sub_10000F330((uint64_t)v930, (uint64_t)v931, &qword_100184F40);
  v931[280] = v308;
  *(void *)&v931[288] = 0x4059000000000000;
  sub_10000F394((uint64_t)v930, &qword_100184F40);
  uint64_t v309 = *(void *)(a1 + 176);
  v930[0] = *(unsigned char *)(a1 + 168);
  *(void *)&v930[8] = v309;
  State.wrappedValue.getter();
  if (LOBYTE(v914[0])) {
    double v310 = 1.0;
  }
  else {
    double v310 = 0.25;
  }
  static UnitPoint.center.getter();
  uint64_t v312 = v311;
  uint64_t v314 = v313;
  sub_10000F330((uint64_t)v931, (uint64_t)v930, &qword_100184F48);
  *(double *)&v930[296] = v310;
  *(double *)&v930[304] = v310;
  *(void *)&v930[312] = v312;
  *(void *)&v930[320] = v314;
  sub_10000F394((uint64_t)v931, &qword_100184F48);
  uint64_t v315 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  uint64_t v316 = *(void *)(a1 + 176);
  v931[0] = *(unsigned char *)(a1 + 168);
  *(void *)&v931[8] = v316;
  State.wrappedValue.getter();
  char v317 = v914[0];
  sub_10000F330((uint64_t)v930, (uint64_t)v931, &qword_100184F50);
  *(void *)&v931[328] = v315;
  v931[336] = v317;
  sub_10000F394((uint64_t)v930, &qword_100184F50);
  uint64_t v318 = static Animation.spring(response:dampingFraction:blendDuration:)();
  v319 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v320 = v319;
  uint64_t v321 = v911;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  *(void *)&long long v902 = v304;
  uint64_t v901 = (uint64_t)v306;
  uint64_t v887 = v307;
  BOOL v322 = v306(v321, 1, v304) != 1;
  uint64_t v323 = v321;
  uint64_t v324 = a1;
  sub_10000F394(v323, &qword_100184B10);

  sub_10000F330((uint64_t)v931, (uint64_t)v930, &qword_100184F58);
  *(void *)&v930[344] = v318;
  v930[352] = v322;
  sub_10000F394((uint64_t)v931, &qword_100184F58);
  memcpy(v931, v930, sizeof(v931));
  if (sub_1000DC430())
  {
    uint64_t v894 = 0;
    uint64_t v892 = 0;
    long long v893 = 0uLL;
    uint64_t v911 = 0;
    v904 = 0;
    uint64_t v325 = 0;
    LODWORD(v890) = 0;
    goto LABEL_39;
  }
  uint64_t v326 = *(void *)(a1 + 16);
  uint64_t v327 = *(void *)(a1 + 24);
  uint64_t v328 = *(void *)(a1 + 32);
  uint64_t v329 = *(void *)(a1 + 40);
  uint64_t v330 = *(void *)(a1 + 48);
  uint64_t v331 = *(void *)(a1 + 56);
  uint64_t v332 = *(void *)(a1 + 64);
  uint64_t v333 = *(void *)(a1 + 72);
  uint64_t v334 = a1;
  uint64_t v336 = *(void *)(a1 + 80);
  unint64_t v335 = *(void *)(v324 + 88);
  v337 = *(char **)(v334 + 96);
  uint64_t v338 = *(void *)(v334 + 104);
  int v339 = *(_DWORD *)(v334 + 112);
  uint64_t v911 = v333;
  v904 = v337;
  uint64_t v894 = v332;
  if (v335 >> 62)
  {
    uint64_t v352 = *(void *)(v334 + 152);
    uint64_t v876 = *(void *)(v334 + 144);
    uint64_t v877 = v352;
    uint64_t v353 = v330;
    uint64_t v874 = v331;
    uint64_t v354 = v328;
    v875 = sub_10000AB54(v884, v876);
    uint64_t v939 = v326;
    uint64_t v940 = v327;
    uint64_t v941 = v354;
    uint64_t v942 = v329;
    long long v944 = 0u;
    long long v945 = 0u;
    uint64_t v943 = v353;
    unint64_t v946 = 0x8000000000000000;
    uint64_t v948 = 0;
    v947 = 0;
    int v949 = 0;
    sub_10005EAC4(v326, v327, v354, v329, v353, v874, v894, v911, v336, v335);
    uint64_t v349 = sub_100097100((uint64_t)&v939, v876, v877);
    uint64_t v351 = v355;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v351)
    {
LABEL_33:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v349 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v351 = v356;
    }
  }
  else
  {
    uint64_t v340 = *(void *)(v334 + 152);
    uint64_t v876 = *(void *)(v334 + 144);
    uint64_t v877 = v340;
    uint64_t v874 = v338;
    uint64_t v872 = v336;
    uint64_t v341 = v326;
    *(void *)&long long v893 = v326;
    uint64_t v342 = v330;
    *((void *)&v893 + 1) = v330;
    uint64_t v343 = v328;
    uint64_t v892 = v328;
    uint64_t v878 = v335;
    v344 = v337;
    LODWORD(v873) = v339;
    v875 = sub_10000AB54(v884, v876);
    uint64_t v939 = v341;
    uint64_t v345 = v327;
    uint64_t v940 = v327;
    uint64_t v941 = v343;
    uint64_t v942 = v329;
    uint64_t v943 = v342;
    *(void *)&long long v944 = v331;
    uint64_t v346 = v894;
    *((void *)&v944 + 1) = v894;
    *(void *)&long long v945 = v333;
    uint64_t v347 = v872;
    *((void *)&v945 + 1) = v872;
    unint64_t v946 = v335;
    v947 = v344;
    uint64_t v948 = v874;
    int v949 = (int)v873;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v348 = v347;
    swift_bridgeObjectRetain();
    uint64_t v349 = sub_100097100((uint64_t)&v939, v876, v877);
    uint64_t v351 = v350;
    sub_10005E778(v893, v345, v892, v329, *((uint64_t *)&v893 + 1), v331, v346, v911, v348, v878);
    if (!v351) {
      goto LABEL_33;
    }
  }
  *(void *)v930 = v349;
  *(void *)&v930[8] = v351;
  sub_100054CC0();
  uint64_t v357 = Text.init<A>(_:)();
  uint64_t v359 = v358;
  char v361 = v360 & 1;
  static Font.headline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v362 = Text.font(_:)();
  uint64_t v364 = v363;
  char v366 = v365;
  swift_release();
  sub_100054D14(v357, v359, v361);
  swift_bridgeObjectRelease();
  *(_DWORD *)v930 = static HierarchicalShapeStyle.primary.getter();
  uint64_t v894 = Text.foregroundStyle<A>(_:)();
  *((void *)&v893 + 1) = v367;
  *(void *)&long long v893 = v368;
  uint64_t v892 = v369 & 1;
  sub_100054D14(v362, v364, v366 & 1);
  swift_bridgeObjectRelease();
  uint64_t v370 = v908;
  v371 = *(void **)(v908 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v372 = v371;
  uint64_t v373 = (uint64_t)v879;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v374 = v902;
  v375 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v901;
  LODWORD(v911) = ((uint64_t (*)(uint64_t, uint64_t, void))v901)(v373, 1, v902);
  sub_10000F394(v373, &qword_100184B10);

  v376 = *(void **)(v370 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v377 = v376;
  uint64_t v378 = (uint64_t)v890;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LODWORD(v904) = v375(v378, 1, v374);
  sub_10000F394(v378, &qword_100184B10);

  uint64_t v325 = static Animation.spring(response:dampingFraction:blendDuration:)();
  v379 = *(void **)(v370 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v380 = v379;
  uint64_t v381 = (uint64_t)v891;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LODWORD(v890) = v375(v381, 1, v374) != 1;
  sub_10000F394(v381, &qword_100184B10);

  uint64_t v324 = v370;
  uint64_t v382 = 0x4024000000000000;
  if (v911 == 1) {
    uint64_t v382 = 0;
  }
  uint64_t v911 = v382;
  uint64_t v383 = 0x3FF0000000000000;
  if (v904 != 1) {
    uint64_t v383 = 0;
  }
  v904 = (char *)v383;
LABEL_39:
  uint64_t v384 = *(void *)(v324 + 224);
  v930[0] = *(unsigned char *)(v324 + 216);
  *(void *)&v930[8] = v384;
  State.wrappedValue.getter();
  int v385 = LOBYTE(v914[0]);
  char v386 = sub_1000DC430();
  v891 = (char *)v325;
  if (v385 != 1)
  {
    if ((v386 & 1) == 0)
    {
      uint64_t v523 = sub_10000AA4C(&qword_100184F60);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v523 - 8) + 56))(v888, 1, 1, v523);
      goto LABEL_74;
    }
    uint64_t v423 = *(void *)(v324 + 144);
    uint64_t v424 = *(void *)(v324 + 152);
    sub_10000AB54(v884, v423);
    sub_1000992F4(v423, v424);
    if (v425)
    {
      __chkstk_darwin(v425);
      __chkstk_darwin(v426);
      sub_10000AA4C(&qword_100185238);
      sub_10000AA4C(&qword_100185240);
      sub_1000EEA3C(&qword_100185248, &qword_100185238, (void (*)(void))sub_1000EEAC4, (void (*)(void))sub_1000EEB18);
      sub_10000F288(&qword_100185260, &qword_100185240);
      v427 = v784;
      Menu.init(content:label:)();
      uint64_t v428 = static Color.primary.getter();
      uint64_t v429 = swift_getKeyPath();
      uint64_t v431 = v785;
      uint64_t v430 = v786;
      uint64_t v432 = (uint64_t)v787;
      (*(void (**)(char *, char *, uint64_t))(v785 + 16))(v787, v427, v786);
      v433 = (uint64_t *)(v432 + *(int *)(v782 + 36));
      uint64_t *v433 = v429;
      v433[1] = v428;
      (*(void (**)(char *, uint64_t))(v431 + 8))(v427, v430);
      uint64_t v434 = v791;
      v435 = v789;
      v436 = &v789[*(int *)(v791 + 20)];
      uint64_t v437 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v438 = type metadata accessor for RoundedCornerStyle();
      v439 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v438 - 8) + 104);
      v439(v436, v437, v438);
      __asm { FMOV            V0.2D, #15.0 }
      _OWORD *v435 = _Q0;
      uint64_t v445 = (uint64_t)v795;
      uint64_t v446 = (uint64_t)&v795[*(int *)(v783 + 36)];
      sub_1000EACE0((uint64_t)v435, v446, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v446 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
      sub_10000F330(v432, v445, &qword_100184E48);
      sub_1000EAD48((uint64_t)v435, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      sub_10000F394(v432, &qword_100184E48);
      uint64_t v447 = *(int *)(v434 + 20);
      v448 = v804;
      v439(&v804[v447], v437, v438);
      __asm { FMOV            V0.2D, #30.0 }
      _OWORD *v448 = _Q0;
      v450 = (char *)v448 + *(int *)(v794 + 36);
      long long v934 = xmmword_10012EE10;
      long long v935 = xmmword_10012EE20;
      long long v936 = xmmword_10012EE30;
      long long v937 = xmmword_10012EE40;
      long long v938 = xmmword_10012EE50;
      v451 = v799;
      View._colorMatrix(_:)();
      uint64_t v453 = v802;
      uint64_t v452 = v803;
      (*(void (**)(char *, char *, uint64_t))(v802 + 16))(v450, v451, v803);
      v454 = &v450[*(int *)(sub_10000AA4C(&qword_100185268) + 36)];
      *(void *)v454 = 0x4069000000000000;
      v454[8] = 0;
      (*(void (**)(char *, uint64_t))(v453 + 8))(v451, v452);
      uint64_t v455 = static Alignment.center.getter();
      uint64_t v457 = v456;
      uint64_t v458 = (uint64_t)v796;
      uint64_t v459 = (uint64_t)&v796[*(int *)(v790 + 36)];
      sub_10000F330((uint64_t)v448, v459, &qword_100184E38);
      v460 = (uint64_t *)(v459 + *(int *)(sub_10000AA4C(&qword_100185130) + 36));
      uint64_t *v460 = v455;
      v460[1] = v457;
      sub_10000F330(v445, v458, &qword_100184E50);
      sub_10000F394((uint64_t)v448, &qword_100184E38);
      sub_10000F394(v445, &qword_100184E50);
      LOBYTE(v455) = static Edge.Set.top.getter();
      EdgeInsets.init(_all:)();
      uint64_t v462 = v461;
      uint64_t v464 = v463;
      uint64_t v466 = v465;
      uint64_t v468 = v467;
      uint64_t v469 = v801;
      sub_10000F330(v458, v801, &qword_100184E58);
      uint64_t v470 = v469 + *(int *)(v793 + 36);
      *(unsigned char *)uint64_t v470 = v455;
      *(void *)(v470 + 8) = v462;
      *(void *)(v470 + 16) = v464;
      *(void *)(v470 + 24) = v466;
      *(void *)(v470 + 32) = v468;
      *(unsigned char *)(v470 + 40) = 0;
      sub_10000F394(v458, &qword_100184E58);
      v471 = *(void **)(v908 + 8);
      swift_getKeyPath();
      swift_getKeyPath();
      id v472 = v471;
      uint64_t v473 = (uint64_t)v779;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v474 = v902;
      v475 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v901;
      LODWORD(v451) = ((uint64_t (*)(uint64_t, uint64_t, void))v901)(v473, 1, v902);
      sub_10000F394(v473, &qword_100184B10);

      double v476 = 0.0;
      if (v451 == 1) {
        double v477 = 0.0;
      }
      else {
        double v477 = 10.0;
      }
      uint64_t v478 = v807;
      sub_10000F330(v469, v807, &qword_100184E60);
      uint64_t v479 = v478 + *(int *)(v798 + 36);
      *(double *)uint64_t v479 = v477;
      *(unsigned char *)(v479 + 8) = 0;
      sub_10000F394(v469, &qword_100184E60);
      v480 = *(void **)(v908 + 8);
      swift_getKeyPath();
      swift_getKeyPath();
      id v481 = v480;
      uint64_t v482 = (uint64_t)v780;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      int v483 = v475(v482, 1, v474);
      sub_10000F394(v482, &qword_100184B10);

      if (v483 == 1) {
        double v476 = 1.0;
      }
      uint64_t v484 = v809;
      sub_10000F330(v478, v809, &qword_100184E68);
      *(double *)(v484 + *(int *)(v806 + 36)) = v476;
      sub_10000F394(v478, &qword_100184E68);
      uint64_t v485 = static Animation.spring(response:dampingFraction:blendDuration:)();
      v486 = *(void **)(v908 + 8);
      swift_getKeyPath();
      swift_getKeyPath();
      id v487 = v486;
      uint64_t v488 = (uint64_t)v781;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      BOOL v489 = v475(v488, 1, v902) != 1;
      sub_10000F394(v488, &qword_100184B10);

      uint64_t v490 = v811;
      sub_10000F330(v484, v811, &qword_100184E70);
      uint64_t v491 = v490 + *(int *)(v808 + 36);
      *(void *)uint64_t v491 = v485;
      *(unsigned char *)(v491 + 8) = v489;
      sub_10000F394(v484, &qword_100184E70);
      uint64_t v492 = swift_getKeyPath();
      v493 = v900;
      uint64_t *v900 = v492;
      sub_10000AA4C(&qword_100182218);
      swift_storeEnumTagMultiPayload();
      uint64_t v494 = (uint64_t)v810;
      sub_1000EC128((uint64_t)v493, (uint64_t)&v810[*(int *)(v834 + 36)], type metadata accessor for VibrancyEffectModifier);
      sub_10000F2CC(v490, v494, &qword_100184E78);
      uint64_t v495 = v812;
      sub_10000F2CC(v494, v812, &qword_100184E80);
      sub_10000F330(v495, (uint64_t)v840, &qword_100184E80);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_1001850B8);
      sub_1000EE1C8();
      sub_1000F07A0(&qword_100185140, &qword_1001850B8);
      uint64_t v496 = (uint64_t)v841;
      uint64_t v324 = v908;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v495, &qword_100184E80);
    }
    else
    {
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v550 = v934;
      char v551 = BYTE8(v934);
      uint64_t v552 = v935;
      char v553 = BYTE8(v935);
      v554 = v840;
      void *v840 = 0;
      *((unsigned char *)v554 + 8) = 1;
      v554[2] = v550;
      *((unsigned char *)v554 + 24) = v551;
      v554[4] = v552;
      *((unsigned char *)v554 + 40) = v553;
      *((_OWORD *)v554 + 3) = v936;
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_1001850B8);
      sub_1000EE1C8();
      sub_1000F07A0(&qword_100185140, &qword_1001850B8);
      uint64_t v496 = (uint64_t)v841;
      _ConditionalContent<>.init(storage:)();
    }
    uint64_t v555 = (uint64_t)v844;
    uint64_t v556 = *(void *)(v324 + 192);
    v930[0] = *(unsigned char *)(v324 + 184);
    *(void *)&v930[8] = v556;
    State.wrappedValue.getter();
    int v557 = LOBYTE(v914[0]);
    sub_1000EAE04(v324, (uint64_t)v930);
    if (v557 == 1)
    {
      v558 = *(void **)&v930[8];
      swift_getKeyPath();
      swift_getKeyPath();
      id v559 = v558;
      static Published.subscript.getter();

      swift_release();
      swift_release();
      if (*(void *)&v914[0])
      {
        v913 = &OBJC_PROTOCOL___SFCollaborationCKShareItem;
        v560 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v560)
        {
          unsigned __int8 v561 = [v560 isServiceManatee];
          swift_unknownObjectRelease();
          sub_1000EAE3C((uint64_t)v930);
          if ((v561 & 1) == 0) {
            goto LABEL_72;
          }
LABEL_64:
          uint64_t v562 = sub_10000AA4C(&qword_100185148);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v562 - 8) + 56))(v555, 1, 1, v562);
LABEL_73:
          uint64_t v618 = v843;
          sub_10000F330(v496, v843, &qword_100184E88);
          uint64_t v619 = v845;
          sub_10000F330(v555, v845, &qword_100184E20);
          uint64_t v620 = v883;
          sub_10000F330(v618, v883, &qword_100184E88);
          uint64_t v621 = sub_10000AA4C(&qword_100185150);
          sub_10000F330(v619, v620 + *(int *)(v621 + 48), &qword_100184E20);
          sub_10000F394(v555, &qword_100184E20);
          sub_10000F394(v496, &qword_100184E88);
          sub_10000F394(v619, &qword_100184E20);
          sub_10000F394(v618, &qword_100184E88);
          uint64_t v622 = sub_10000AA4C(&qword_100184F60);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v622 - 8) + 56))(v620, 0, 1, v622);
          sub_10000F2CC(v620, v888, &qword_100184E90);
          uint64_t v324 = v908;
LABEL_74:
          if ((sub_1000DC430() & 1) == 0)
          {
            uint64_t v645 = static VerticalAlignment.center.getter();
            uint64_t v646 = (uint64_t)v847;
            uint64_t *v847 = v645;
            *(void *)(v646 + 8) = 0;
            *(unsigned char *)(v646 + 16) = 1;
            sub_10000AA4C(&qword_100184F68);
            *(void *)&v914[0] = *(void *)(v324 + 160);
            swift_getKeyPath();
            sub_1000EAE04(v324, (uint64_t)v930);
            uint64_t v647 = swift_allocObject();
            long long v648 = *(_OWORD *)&v930[208];
            *(_OWORD *)(v647 + 208) = *(_OWORD *)&v930[192];
            *(_OWORD *)(v647 + 224) = v648;
            *(void *)(v647 + 240) = *(void *)&v930[224];
            long long v649 = *(_OWORD *)&v930[144];
            *(_OWORD *)(v647 + 144) = *(_OWORD *)&v930[128];
            *(_OWORD *)(v647 + 160) = v649;
            long long v650 = *(_OWORD *)&v930[176];
            *(_OWORD *)(v647 + 176) = *(_OWORD *)&v930[160];
            *(_OWORD *)(v647 + 192) = v650;
            long long v651 = *(_OWORD *)&v930[80];
            *(_OWORD *)(v647 + 80) = *(_OWORD *)&v930[64];
            *(_OWORD *)(v647 + 96) = v651;
            long long v652 = *(_OWORD *)&v930[112];
            *(_OWORD *)(v647 + 112) = *(_OWORD *)&v930[96];
            *(_OWORD *)(v647 + 128) = v652;
            long long v653 = *(_OWORD *)&v930[16];
            *(_OWORD *)(v647 + 16) = *(_OWORD *)v930;
            *(_OWORD *)(v647 + 32) = v653;
            long long v654 = *(_OWORD *)&v930[48];
            *(_OWORD *)(v647 + 48) = *(_OWORD *)&v930[32];
            *(_OWORD *)(v647 + 64) = v654;
            swift_bridgeObjectRetain();
            sub_10000AA4C(&qword_100184F70);
            type metadata accessor for ShareableContentActionButton(0);
            uint64_t v655 = v324;
            sub_10000F288(&qword_100184F78, &qword_100184F70);
            sub_1000EAE6C(&qword_100184F80, (void (*)(uint64_t))type metadata accessor for ShareableContentActionButton);
            ForEach<>.init(_:id:content:)();
            v656 = *(void **)(v324 + 8);
            swift_getKeyPath();
            swift_getKeyPath();
            id v657 = v656;
            uint64_t v658 = (uint64_t)v837;
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v659 = v902;
            v660 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v901;
            int v661 = ((uint64_t (*)(uint64_t, uint64_t, void))v901)(v658, 1, v902);
            sub_10000F394(v658, &qword_100184B10);

            double v662 = 0.0;
            if (v661 == 1) {
              double v663 = 0.0;
            }
            else {
              double v663 = 10.0;
            }
            uint64_t v664 = v849;
            sub_10000F330(v646, v849, &qword_100184DC0);
            uint64_t v665 = v664 + *(int *)(v846 + 36);
            *(double *)uint64_t v665 = v663;
            *(unsigned char *)(v665 + 8) = 0;
            sub_10000F394(v646, &qword_100184DC0);
            v666 = *(void **)(v655 + 8);
            swift_getKeyPath();
            swift_getKeyPath();
            id v667 = v666;
            uint64_t v668 = (uint64_t)v839;
            static Published.subscript.getter();
            swift_release();
            swift_release();
            int v669 = v660(v668, 1, v659);
            sub_10000F394(v668, &qword_100184B10);

            if (v669 == 1) {
              double v662 = 1.0;
            }
            uint64_t v670 = v851;
            sub_10000F330(v664, v851, &qword_100184DC8);
            *(double *)(v670 + *(int *)(v848 + 36)) = v662;
            sub_10000F394(v664, &qword_100184DC8);
            uint64_t v671 = static Animation.spring(response:dampingFraction:blendDuration:)();
            v672 = *(void **)(v655 + 8);
            swift_getKeyPath();
            swift_getKeyPath();
            id v673 = v672;
            uint64_t v674 = (uint64_t)v842;
            static Published.subscript.getter();
            swift_release();
            swift_release();
            BOOL v675 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v901)(v674, 1, v659) != 1;
            sub_10000F394(v674, &qword_100184B10);

            uint64_t v676 = v850;
            sub_10000F330(v670, v850, &qword_100184DD0);
            uint64_t v677 = v676 + *(int *)(v871 + 36);
            *(void *)uint64_t v677 = v671;
            *(unsigned char *)(v677 + 8) = v675;
            sub_10000F394(v670, &qword_100184DD0);
            v678 = &qword_100184DD8;
            uint64_t v679 = v852;
            sub_10000F2CC(v676, v852, &qword_100184DD8);
            sub_10000F330(v679, v870, &qword_100184DD8);
            swift_storeEnumTagMultiPayload();
            sub_1000ED930();
            sub_1000EDB78();
            uint64_t v680 = (uint64_t)v868;
            _ConditionalContent<>.init(storage:)();
            uint64_t v681 = v679;
            goto LABEL_96;
          }
          uint64_t v623 = *(void *)(v324 + 192);
          v930[0] = *(unsigned char *)(v324 + 184);
          *(void *)&v930[8] = v623;
          State.wrappedValue.getter();
          if (LOBYTE(v914[0]) != 1)
          {
            *(void *)&v914[0] = *(void *)(v324 + 160);
            swift_getKeyPath();
            sub_1000EAE04(v324, (uint64_t)v930);
            uint64_t v682 = swift_allocObject();
            long long v683 = *(_OWORD *)&v930[208];
            *(_OWORD *)(v682 + 208) = *(_OWORD *)&v930[192];
            *(_OWORD *)(v682 + 224) = v683;
            *(void *)(v682 + 240) = *(void *)&v930[224];
            long long v684 = *(_OWORD *)&v930[144];
            *(_OWORD *)(v682 + 144) = *(_OWORD *)&v930[128];
            *(_OWORD *)(v682 + 160) = v684;
            long long v685 = *(_OWORD *)&v930[176];
            *(_OWORD *)(v682 + 176) = *(_OWORD *)&v930[160];
            *(_OWORD *)(v682 + 192) = v685;
            long long v686 = *(_OWORD *)&v930[80];
            *(_OWORD *)(v682 + 80) = *(_OWORD *)&v930[64];
            *(_OWORD *)(v682 + 96) = v686;
            long long v687 = *(_OWORD *)&v930[112];
            *(_OWORD *)(v682 + 112) = *(_OWORD *)&v930[96];
            *(_OWORD *)(v682 + 128) = v687;
            long long v688 = *(_OWORD *)&v930[16];
            *(_OWORD *)(v682 + 16) = *(_OWORD *)v930;
            *(_OWORD *)(v682 + 32) = v688;
            long long v689 = *(_OWORD *)&v930[48];
            *(_OWORD *)(v682 + 48) = *(_OWORD *)&v930[32];
            *(_OWORD *)(v682 + 64) = v689;
            swift_bridgeObjectRetain();
            sub_10000AA4C(&qword_100184F70);
            sub_10000AA4C(&qword_100184FA8);
            sub_10000F288(&qword_100184F78, &qword_100184F70);
            sub_1000EDA08();
            v690 = v816;
            ForEach<>.init(_:id:content:)();
            uint64_t v691 = v817;
            uint64_t v692 = v857;
            (*(void (**)(uint64_t, char *, uint64_t))(v817 + 16))(v856, v690, v857);
            swift_storeEnumTagMultiPayload();
            sub_10000F288(&qword_100184F90, &qword_100184DF8);
            sub_1000ED394(&qword_100184F98, &qword_100184DE8, (void (*)(void))sub_1000EDA08);
            uint64_t v693 = (uint64_t)v854;
            _ConditionalContent<>.init(storage:)();
            (*(void (**)(char *, uint64_t))(v691 + 8))(v690, v692);
LABEL_95:
            v678 = &qword_100184E10;
            sub_10000F330(v693, v870, &qword_100184E10);
            swift_storeEnumTagMultiPayload();
            sub_1000ED930();
            sub_1000EDB78();
            uint64_t v680 = (uint64_t)v868;
            _ConditionalContent<>.init(storage:)();
            uint64_t v681 = v693;
LABEL_96:
            sub_10000F394(v681, v678);
            uint64_t v750 = (uint64_t)v867;
            uint64_t v751 = v888;
            uint64_t v752 = v883;
            sub_10000F330(v888, v883, &qword_100184E90);
            sub_10000F330(v680, v750, &qword_100184E18);
            uint64_t v753 = v880;
            sub_10000F330(v752, v880, &qword_100184E90);
            uint64_t v754 = sub_10000AA4C(&qword_100185010);
            uint64_t v755 = v753 + *(int *)(v754 + 48);
            *(void *)uint64_t v755 = 0x4040000000000000;
            *(unsigned char *)(v755 + 8) = 0;
            sub_10000F330(v750, v753 + *(int *)(v754 + 64), &qword_100184E18);
            sub_10000F394(v750, &qword_100184E18);
            sub_10000F394(v752, &qword_100184E90);
            sub_10000F330(v753, v896, &qword_100184DB8);
            swift_storeEnumTagMultiPayload();
            sub_10000F288(&qword_100185018, &qword_100184EA0);
            sub_10000F288(&qword_100185020, &qword_100184DB8);
            uint64_t v756 = (uint64_t)v903;
            _ConditionalContent<>.init(storage:)();
            sub_10000F394(v753, &qword_100184DB8);
            uint64_t v757 = v680;
            uint64_t v515 = v756;
            sub_10000F394(v757, &qword_100184E18);
            uint64_t v607 = v751;
            v608 = &qword_100184E90;
            goto LABEL_97;
          }
          *(void *)&v914[0] = *(void *)(v324 + 160);
          swift_getKeyPath();
          sub_1000EAE04(v324, (uint64_t)v930);
          uint64_t v624 = swift_allocObject();
          long long v625 = *(_OWORD *)&v930[208];
          *(_OWORD *)(v624 + 208) = *(_OWORD *)&v930[192];
          *(_OWORD *)(v624 + 224) = v625;
          *(void *)(v624 + 240) = *(void *)&v930[224];
          long long v626 = *(_OWORD *)&v930[144];
          *(_OWORD *)(v624 + 144) = *(_OWORD *)&v930[128];
          *(_OWORD *)(v624 + 160) = v626;
          long long v627 = *(_OWORD *)&v930[176];
          *(_OWORD *)(v624 + 176) = *(_OWORD *)&v930[160];
          *(_OWORD *)(v624 + 192) = v627;
          long long v628 = *(_OWORD *)&v930[80];
          *(_OWORD *)(v624 + 80) = *(_OWORD *)&v930[64];
          *(_OWORD *)(v624 + 96) = v628;
          long long v629 = *(_OWORD *)&v930[112];
          *(_OWORD *)(v624 + 112) = *(_OWORD *)&v930[96];
          *(_OWORD *)(v624 + 128) = v629;
          long long v630 = *(_OWORD *)&v930[16];
          *(_OWORD *)(v624 + 16) = *(_OWORD *)v930;
          *(_OWORD *)(v624 + 32) = v630;
          long long v631 = *(_OWORD *)&v930[48];
          *(_OWORD *)(v624 + 48) = *(_OWORD *)&v930[32];
          *(_OWORD *)(v624 + 64) = v631;
          swift_bridgeObjectRetain();
          sub_10000AA4C(&qword_100184F70);
          sub_10000AA4C(&qword_100185038);
          sub_10000F288(&qword_100184F78, &qword_100184F70);
          sub_1000ED394(&qword_100185040, &qword_100185038, (void (*)(void))sub_1000EDDEC);
          ForEach<>.init(_:id:content:)();
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          String.init(localized:table:bundle:locale:comment:)();
          sub_10000AA4C(&qword_1001837B0);
          uint64_t v632 = swift_allocObject();
          *(_OWORD *)(v632 + 16) = xmmword_10012EEB0;
          uint64_t v633 = v324;
          uint64_t v634 = sub_1000DC7A4();
          uint64_t v636 = v635;
          *(void *)(v632 + 56) = &type metadata for String;
          unint64_t v637 = sub_100055190();
          *(void *)(v632 + 64) = v637;
          *(void *)(v632 + 32) = v634;
          *(void *)(v632 + 40) = v636;
          sub_10000AAF0((uint64_t)v884, (uint64_t)v930);
          sub_10000AA4C(&qword_1001804C8);
          sub_10001FB40(0, &qword_100180600);
          if ((swift_dynamicCast() & 1) != 0
            && (v638 = *(void **)&v914[0],
                id v639 = [*(id *)&v914[0] content],
                v638,
                id v640 = [v639 initiatorHandle],
                v639,
                v640))
          {
            uint64_t v641 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v643 = v642;

            v644 = (uint64_t *)(v632 + 72);
            *(void *)(v632 + 96) = &type metadata for String;
            *(void *)(v632 + 104) = v637;
            if (v643)
            {
              uint64_t *v644 = v641;
LABEL_89:
              *(void *)(v632 + 80) = v643;
              uint64_t v694 = static String.localizedStringWithFormat(_:_:)();
              uint64_t v696 = v695;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)v930 = v694;
              *(void *)&v930[8] = v696;
              sub_100054CC0();
              uint64_t v881 = Text.init<A>(_:)();
              v879 = v697;
              LOBYTE(v694) = v698;
              uint64_t v909 = v699;
              LODWORD(v898) = static Edge.Set.top.getter();
              EdgeInsets.init(_all:)();
              uint64_t v701 = v700;
              uint64_t v703 = v702;
              uint64_t v705 = v704;
              uint64_t v707 = v706;
              LODWORD(v899) = static Edge.Set.bottom.getter();
              EdgeInsets.init(_all:)();
              v884 = v708;
              uint64_t v882 = v709;
              uint64_t v711 = v710;
              uint64_t v713 = v712;
              unsigned __int8 v929 = v694 & 1;
              unsigned __int8 v927 = 0;
              unsigned __int8 v924 = 0;
              uint64_t v878 = static Font.caption.getter();
              uint64_t v877 = swift_getKeyPath();
              LODWORD(v865) = v929;
              LODWORD(v872) = v927;
              LODWORD(v875) = v924;
              LODWORD(v876) = static HierarchicalShapeStyle.primary.getter();
              uint64_t v874 = swift_getKeyPath();
              v873 = (char *)swift_getKeyPath();
              uint64_t v714 = v633;
              v715 = *(void **)(v633 + 8);
              swift_getKeyPath();
              swift_getKeyPath();
              id v716 = v715;
              uint64_t v717 = (uint64_t)v813;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              uint64_t v718 = v902;
              v719 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v901;
              int v720 = ((uint64_t (*)(uint64_t, uint64_t, void))v901)(v717, 1, v902);
              sub_10000F394(v717, &qword_100184B10);

              double v721 = 0.0;
              if (v720 == 1) {
                double v722 = 0.0;
              }
              else {
                double v722 = 10.0;
              }
              char v923 = 0;
              v723 = *(void **)(v633 + 8);
              swift_getKeyPath();
              swift_getKeyPath();
              id v724 = v723;
              uint64_t v725 = (uint64_t)v814;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              int v726 = v719(v725, 1, v718);
              sub_10000F394(v725, &qword_100184B10);

              if (v726 == 1) {
                double v721 = 1.0;
              }
              char v727 = v923;
              uint64_t v728 = static Animation.spring(response:dampingFraction:blendDuration:)();
              v729 = *(void **)(v714 + 8);
              swift_getKeyPath();
              swift_getKeyPath();
              id v730 = v729;
              uint64_t v731 = (uint64_t)v815;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              BOOL v732 = v719(v731, 1, v902) != 1;
              sub_10000F394(v731, &qword_100184B10);

              uint64_t v733 = swift_getKeyPath();
              v734 = v885;
              uint64_t *v885 = v733;
              sub_10000AA4C(&qword_100182218);
              swift_storeEnumTagMultiPayload();
              uint64_t v735 = (uint64_t)v734;
              v736 = v900;
              sub_1000EC128(v735, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
              uint64_t v737 = (uint64_t)v819;
              sub_1000EACE0((uint64_t)v736, (uint64_t)&v819[*(int *)(v818 + 36)], type metadata accessor for VibrancyEffectModifier);
              v738 = v879;
              *(void *)uint64_t v737 = v881;
              *(void *)(v737 + 8) = v738;
              *(unsigned char *)(v737 + 16) = (_BYTE)v865;
              *(_DWORD *)(v737 + 17) = v914[0];
              *(_DWORD *)(v737 + 20) = *(_DWORD *)((char *)v914 + 3);
              *(void *)(v737 + 24) = v909;
              *(unsigned char *)(v737 + 32) = (_BYTE)v898;
              *(_DWORD *)(v737 + 33) = *(_DWORD *)v928;
              *(_DWORD *)(v737 + 36) = *(_DWORD *)&v928[3];
              *(void *)(v737 + 40) = v701;
              *(void *)(v737 + 48) = v703;
              *(void *)(v737 + 56) = v705;
              *(void *)(v737 + 64) = v707;
              *(unsigned char *)(v737 + 72) = v872;
              *(_DWORD *)(v737 + 76) = *(_DWORD *)&v926[3];
              *(_DWORD *)(v737 + 73) = *(_DWORD *)v926;
              *(unsigned char *)(v737 + 80) = (_BYTE)v899;
              *(_DWORD *)(v737 + 84) = *(_DWORD *)&v925[3];
              *(_DWORD *)(v737 + 81) = *(_DWORD *)v925;
              uint64_t v739 = v882;
              *(void *)(v737 + 88) = v884;
              *(void *)(v737 + 96) = v739;
              *(void *)(v737 + 104) = v711;
              *(void *)(v737 + 112) = v713;
              *(unsigned char *)(v737 + 120) = (_BYTE)v875;
              *(_DWORD *)(v737 + 121) = *(_DWORD *)v930;
              *(_DWORD *)(v737 + 124) = *(_DWORD *)&v930[3];
              uint64_t v740 = v878;
              *(void *)(v737 + 128) = v877;
              *(void *)(v737 + 136) = v740;
              *(_DWORD *)(v737 + 144) = v876;
              *(void *)(v737 + 152) = v874;
              *(unsigned char *)(v737 + 160) = 1;
              *(void *)(v737 + 168) = v873;
              *(void *)(v737 + 176) = 2;
              *(unsigned char *)(v737 + 184) = v727;
              *(double *)(v737 + 192) = v722;
              *(unsigned char *)(v737 + 200) = 0;
              *(double *)(v737 + 208) = v721;
              *(void *)(v737 + 216) = v728;
              *(unsigned char *)(v737 + 224) = v732;
              sub_1000EAD48((uint64_t)v736, type metadata accessor for VibrancyEffectModifier);
              uint64_t v741 = v824;
              sub_10000F2CC(v737, v824, &qword_100184E00);
              uint64_t v742 = v822;
              uint64_t v743 = v823;
              v744 = *(void (**)(char *, char *, uint64_t))(v822 + 16);
              v745 = v820;
              v744(v820, v859, v823);
              uint64_t v746 = v821;
              sub_10000F330(v741, v821, &qword_100184E00);
              uint64_t v747 = (uint64_t)v825;
              v744(v825, v745, v743);
              uint64_t v748 = sub_10000AA4C(&qword_1001850B0);
              sub_10000F330(v746, v747 + *(int *)(v748 + 48), &qword_100184E00);
              sub_10000F394(v746, &qword_100184E00);
              v749 = *(void (**)(char *, uint64_t))(v742 + 8);
              v749(v745, v743);
              sub_10000F330(v747, v856, &qword_100184DF8);
              swift_storeEnumTagMultiPayload();
              sub_10000F288(&qword_100184F90, &qword_100184DF8);
              sub_1000ED394(&qword_100184F98, &qword_100184DE8, (void (*)(void))sub_1000EDA08);
              uint64_t v693 = (uint64_t)v854;
              _ConditionalContent<>.init(storage:)();
              sub_10000F394(v747, &qword_100184DF8);
              sub_10000F394(v741, &qword_100184E00);
              v749(v859, v743);
              goto LABEL_95;
            }
          }
          else
          {
            v644 = (uint64_t *)(v632 + 72);
            *(void *)(v632 + 96) = &type metadata for String;
            *(void *)(v632 + 104) = v637;
          }
          uint64_t *v644 = 0;
          unint64_t v643 = 0xE000000000000000;
          goto LABEL_89;
        }
        swift_unknownObjectRelease();
      }
      sub_1000EAE3C((uint64_t)v930);
LABEL_72:
      sub_1000EAE04(v324, (uint64_t)v914);
      uint64_t v609 = swift_allocObject();
      *(void *)(v609 + 240) = v922;
      long long v610 = v921;
      *(_OWORD *)(v609 + 208) = v920;
      *(_OWORD *)(v609 + 224) = v610;
      long long v611 = v917;
      *(_OWORD *)(v609 + 144) = v916;
      *(_OWORD *)(v609 + 160) = v611;
      long long v612 = v919;
      *(_OWORD *)(v609 + 176) = v918;
      *(_OWORD *)(v609 + 192) = v612;
      long long v613 = v914[5];
      *(_OWORD *)(v609 + 80) = v914[4];
      *(_OWORD *)(v609 + 96) = v613;
      long long v614 = v915;
      *(_OWORD *)(v609 + 112) = v914[6];
      *(_OWORD *)(v609 + 128) = v614;
      long long v615 = v914[1];
      *(_OWORD *)(v609 + 16) = v914[0];
      *(_OWORD *)(v609 + 32) = v615;
      long long v616 = v914[3];
      *(_OWORD *)(v609 + 48) = v914[2];
      *(_OWORD *)(v609 + 64) = v616;
      __chkstk_darwin(v609);
      sub_10000AA4C(&qword_100185158);
      sub_1000EE6A8();
      Button.init(action:label:)();
      uint64_t v617 = sub_10000AA4C(&qword_100185148);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v617 - 8) + 56))(v555, 0, 1, v617);
      goto LABEL_73;
    }
    sub_1000EAE3C((uint64_t)v930);
    goto LABEL_64;
  }
  if (v386)
  {
    uint64_t v387 = *(void *)(v324 + 192);
    v930[0] = *(unsigned char *)(v324 + 184);
    *(void *)&v930[8] = v387;
    State.wrappedValue.getter();
    if (LOBYTE(v914[0]) != 1)
    {
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      *(void *)v930 = String.init(localized:table:bundle:locale:comment:)();
      *(void *)&v930[8] = v524;
      sub_100054CC0();
      uint64_t v525 = Text.init<A>(_:)();
      uint64_t v527 = v526;
      char v529 = v528 & 1;
      static Font.headline.getter();
      static Font.Weight.regular.getter();
      Font.weight(_:)();
      swift_release();
      uint64_t v530 = Text.font(_:)();
      uint64_t v532 = v531;
      char v534 = v533;
      swift_release();
      sub_100054D14(v525, v527, v529);
      swift_bridgeObjectRelease();
      *(_DWORD *)v930 = static HierarchicalShapeStyle.primary.getter();
      uint64_t v535 = Text.foregroundStyle<A>(_:)();
      uint64_t v537 = v536;
      char v539 = v538;
      uint64_t v541 = v540;
      sub_100054D14(v530, v532, v534 & 1);
      swift_bridgeObjectRelease();
      uint64_t v542 = swift_getKeyPath();
      v543 = v885;
      uint64_t *v885 = v542;
      sub_10000AA4C(&qword_100182218);
      swift_storeEnumTagMultiPayload();
      uint64_t v544 = (uint64_t)v543;
      v545 = v900;
      sub_1000EC128(v544, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
      uint64_t v546 = (uint64_t)v858;
      sub_1000EACE0((uint64_t)v545, (uint64_t)&v858[*(int *)(v882 + 36)], type metadata accessor for VibrancyEffectModifier);
      *(void *)uint64_t v546 = v535;
      *(void *)(v546 + 8) = v537;
      *(unsigned char *)(v546 + 16) = v539 & 1;
      *(void *)(v546 + 24) = v541;
      sub_1000EAD48((uint64_t)v545, type metadata accessor for VibrancyEffectModifier);
      uint64_t v547 = v881;
      sub_10000F2CC(v546, v881, &qword_100184EC8);
      sub_10000F330(v547, v836, &qword_100184EC8);
      swift_storeEnumTagMultiPayload();
      sub_10000F288(&qword_100185278, &qword_100184EB8);
      sub_1000EEC64();
      uint64_t v548 = (uint64_t)v832;
      _ConditionalContent<>.init(storage:)();
      uint64_t v549 = v547;
LABEL_68:
      sub_10000F394(v549, &qword_100184EC8);
      sub_10000F330(v548, v864, &qword_100184ED0);
      swift_storeEnumTagMultiPayload();
      sub_1000EEBC4();
      sub_1000EEC64();
      uint64_t v522 = (uint64_t)v862;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v548, &qword_100184ED0);
      uint64_t v515 = (uint64_t)v903;
      goto LABEL_69;
    }
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    *(void *)v930 = String.init(localized:table:bundle:locale:comment:)();
    *(void *)&v930[8] = v388;
    uint64_t v909 = sub_100054CC0();
    uint64_t v389 = Text.init<A>(_:)();
    uint64_t v391 = v390;
    char v393 = v392 & 1;
    static Font.headline.getter();
    static Font.Weight.regular.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v394 = Text.font(_:)();
    uint64_t v396 = v395;
    char v398 = v397;
    swift_release();
    sub_100054D14(v389, v391, v393);
    swift_bridgeObjectRelease();
    *(_DWORD *)v930 = static HierarchicalShapeStyle.primary.getter();
    uint64_t v399 = Text.foregroundStyle<A>(_:)();
    uint64_t v401 = v400;
    char v403 = v402;
    uint64_t v405 = v404;
    sub_100054D14(v394, v396, v398 & 1);
    swift_bridgeObjectRelease();
    uint64_t v406 = swift_getKeyPath();
    v407 = v885;
    uint64_t *v885 = v406;
    sub_10000AA4C(&qword_100182218);
    swift_storeEnumTagMultiPayload();
    uint64_t v408 = (uint64_t)v407;
    v409 = v900;
    sub_1000EC128(v408, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
    uint64_t v410 = v881;
    sub_1000EACE0((uint64_t)v409, v881 + *(int *)(v882 + 36), type metadata accessor for VibrancyEffectModifier);
    *(void *)uint64_t v410 = v399;
    *(void *)(v410 + 8) = v401;
    *(unsigned char *)(v410 + 16) = v403 & 1;
    *(void *)(v410 + 24) = v405;
    sub_1000EAD48((uint64_t)v409, type metadata accessor for VibrancyEffectModifier);
    sub_10000F2CC(v410, v831, &qword_100184EC8);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    *(void *)&long long v902 = String.init(localized:table:bundle:locale:comment:)();
    sub_10000AA4C(&qword_1001837B0);
    uint64_t v411 = swift_allocObject();
    *(_OWORD *)(v411 + 16) = xmmword_10012EEB0;
    uint64_t v412 = sub_1000DC7A4();
    uint64_t v414 = v413;
    *(void *)(v411 + 56) = &type metadata for String;
    unint64_t v415 = sub_100055190();
    *(void *)(v411 + 64) = v415;
    *(void *)(v411 + 32) = v412;
    *(void *)(v411 + 40) = v414;
    sub_10000AAF0((uint64_t)v884, (uint64_t)v930);
    sub_10000AA4C(&qword_1001804C8);
    sub_10001FB40(0, &qword_100180600);
    if ((swift_dynamicCast() & 1) != 0
      && (v416 = *(void **)&v914[0],
          id v417 = [*(id *)&v914[0] content],
          v416,
          id v418 = [v417 initiatorHandle],
          v417,
          v418))
    {
      uint64_t v419 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v421 = v420;

      v422 = (uint64_t *)(v411 + 72);
      *(void *)(v411 + 96) = &type metadata for String;
      *(void *)(v411 + 104) = v415;
      if (v421)
      {
        uint64_t *v422 = v419;
LABEL_67:
        *(void *)(v411 + 80) = v421;
        uint64_t v563 = static String.localizedStringWithFormat(_:_:)();
        uint64_t v565 = v564;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)v930 = v563;
        *(void *)&v930[8] = v565;
        uint64_t v901 = Text.init<A>(_:)();
        v899 = v566;
        LOBYTE(v563) = v567;
        uint64_t v909 = v568;
        LODWORD(v902) = static Edge.Set.top.getter();
        EdgeInsets.init(_all:)();
        uint64_t v570 = v569;
        uint64_t v572 = v571;
        uint64_t v574 = v573;
        uint64_t v576 = v575;
        LODWORD(v908) = static Edge.Set.bottom.getter();
        EdgeInsets.init(_all:)();
        uint64_t v578 = v577;
        uint64_t v580 = v579;
        uint64_t v582 = v581;
        uint64_t v584 = v583;
        unsigned __int8 v927 = v563 & 1;
        unsigned __int8 v924 = 0;
        char v923 = 0;
        v898 = (char *)static Font.caption.getter();
        uint64_t v585 = swift_getKeyPath();
        unsigned __int8 v586 = v927;
        unsigned __int8 v587 = v924;
        LOBYTE(v565) = v923;
        int v588 = static HierarchicalShapeStyle.primary.getter();
        uint64_t v589 = swift_getKeyPath();
        uint64_t v590 = swift_getKeyPath();
        unsigned __int8 v929 = 0;
        uint64_t v591 = swift_getKeyPath();
        v592 = v885;
        uint64_t *v885 = v591;
        swift_storeEnumTagMultiPayload();
        uint64_t v593 = (uint64_t)v592;
        v594 = v900;
        sub_1000EC128(v593, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
        uint64_t v595 = (uint64_t)v792;
        sub_1000EACE0((uint64_t)v594, (uint64_t)&v792[*(int *)(v788 + 36)], type metadata accessor for VibrancyEffectModifier);
        v596 = v899;
        *(void *)uint64_t v595 = v901;
        *(void *)(v595 + 8) = v596;
        *(unsigned char *)(v595 + 16) = v586;
        *(_DWORD *)(v595 + 17) = v934;
        *(_DWORD *)(v595 + 20) = *(_DWORD *)((char *)&v934 + 3);
        *(void *)(v595 + 24) = v909;
        *(unsigned char *)(v595 + 32) = v902;
        *(_DWORD *)(v595 + 33) = *(_DWORD *)v928;
        *(_DWORD *)(v595 + 36) = *(_DWORD *)&v928[3];
        *(void *)(v595 + 40) = v570;
        *(void *)(v595 + 48) = v572;
        *(void *)(v595 + 56) = v574;
        *(void *)(v595 + 64) = v576;
        *(unsigned char *)(v595 + 72) = v587;
        *(_DWORD *)(v595 + 76) = *(_DWORD *)&v926[3];
        *(_DWORD *)(v595 + 73) = *(_DWORD *)v926;
        *(unsigned char *)(v595 + 80) = v908;
        *(_DWORD *)(v595 + 84) = *(_DWORD *)&v925[3];
        *(_DWORD *)(v595 + 81) = *(_DWORD *)v925;
        *(void *)(v595 + 88) = v578;
        *(void *)(v595 + 96) = v580;
        *(void *)(v595 + 104) = v582;
        *(void *)(v595 + 112) = v584;
        *(unsigned char *)(v595 + 120) = v565;
        *(_DWORD *)(v595 + 121) = v914[0];
        *(_DWORD *)(v595 + 124) = *(_DWORD *)((char *)v914 + 3);
        v597 = v898;
        *(void *)(v595 + 128) = v585;
        *(void *)(v595 + 136) = v597;
        *(_DWORD *)(v595 + 144) = v588;
        *(void *)(v595 + 152) = v589;
        *(unsigned char *)(v595 + 160) = 1;
        *(_DWORD *)(v595 + 161) = *(_DWORD *)v930;
        *(_DWORD *)(v595 + 164) = *(_DWORD *)&v930[3];
        *(void *)(v595 + 168) = v590;
        *(void *)(v595 + 176) = 2;
        *(unsigned char *)(v595 + 184) = v929;
        sub_1000EAD48((uint64_t)v594, type metadata accessor for VibrancyEffectModifier);
        uint64_t v598 = v800;
        sub_10000F2CC(v595, v800, &qword_100184EC0);
        uint64_t v599 = v831;
        uint64_t v600 = v881;
        sub_10000F330(v831, v881, &qword_100184EC8);
        uint64_t v601 = v797;
        sub_10000F330(v598, v797, &qword_100184EC0);
        uint64_t v602 = v805;
        sub_10000F330(v600, v805, &qword_100184EC8);
        uint64_t v603 = sub_10000AA4C(&qword_100185290);
        sub_10000F330(v601, v602 + *(int *)(v603 + 48), &qword_100184EC0);
        sub_10000F394(v601, &qword_100184EC0);
        sub_10000F394(v600, &qword_100184EC8);
        sub_10000F330(v602, v836, &qword_100184EB8);
        swift_storeEnumTagMultiPayload();
        sub_10000F288(&qword_100185278, &qword_100184EB8);
        sub_1000EEC64();
        uint64_t v548 = (uint64_t)v832;
        _ConditionalContent<>.init(storage:)();
        sub_10000F394(v602, &qword_100184EB8);
        sub_10000F394(v598, &qword_100184EC0);
        uint64_t v549 = v599;
        goto LABEL_68;
      }
    }
    else
    {
      v422 = (uint64_t *)(v411 + 72);
      *(void *)(v411 + 96) = &type metadata for String;
      *(void *)(v411 + 104) = v415;
    }
    uint64_t *v422 = 0;
    unint64_t v421 = 0xE000000000000000;
    goto LABEL_67;
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *(void *)v930 = String.init(localized:table:bundle:locale:comment:)();
  *(void *)&v930[8] = v497;
  sub_100054CC0();
  uint64_t v498 = Text.init<A>(_:)();
  uint64_t v500 = v499;
  char v502 = v501 & 1;
  static Font.headline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v503 = Text.font(_:)();
  uint64_t v505 = v504;
  char v507 = v506;
  swift_release();
  sub_100054D14(v498, v500, v502);
  swift_bridgeObjectRelease();
  *(_DWORD *)v930 = static HierarchicalShapeStyle.primary.getter();
  uint64_t v508 = Text.foregroundStyle<A>(_:)();
  uint64_t v510 = v509;
  char v512 = v511;
  uint64_t v514 = v513;
  sub_100054D14(v503, v505, v507 & 1);
  uint64_t v515 = (uint64_t)v903;
  swift_bridgeObjectRelease();
  uint64_t v516 = swift_getKeyPath();
  v517 = v885;
  uint64_t *v885 = v516;
  sub_10000AA4C(&qword_100182218);
  swift_storeEnumTagMultiPayload();
  uint64_t v518 = (uint64_t)v517;
  v519 = v900;
  sub_1000EC128(v518, (uint64_t)v900, type metadata accessor for VibrancyEffectModifier);
  uint64_t v520 = (uint64_t)v858;
  sub_1000EACE0((uint64_t)v519, (uint64_t)&v858[*(int *)(v882 + 36)], type metadata accessor for VibrancyEffectModifier);
  *(void *)uint64_t v520 = v508;
  *(void *)(v520 + 8) = v510;
  *(unsigned char *)(v520 + 16) = v512 & 1;
  *(void *)(v520 + 24) = v514;
  sub_1000EAD48((uint64_t)v519, type metadata accessor for VibrancyEffectModifier);
  uint64_t v521 = v881;
  sub_10000F2CC(v520, v881, &qword_100184EC8);
  sub_10000F330(v521, v864, &qword_100184EC8);
  swift_storeEnumTagMultiPayload();
  sub_1000EEBC4();
  sub_1000EEC64();
  uint64_t v522 = (uint64_t)v862;
  _ConditionalContent<>.init(storage:)();
  sub_10000F394(v521, &qword_100184EC8);
LABEL_69:
  uint64_t v604 = (uint64_t)v865;
  uint64_t v605 = v861;
  sub_10000F330(v522, v861, &qword_100184ED8);
  *(void *)uint64_t v604 = 0x4040000000000000;
  *(unsigned char *)(v604 + 8) = 0;
  uint64_t v606 = sub_10000AA4C(&qword_100185288);
  sub_10000F330(v605, v604 + *(int *)(v606 + 48), &qword_100184ED8);
  sub_10000F394(v605, &qword_100184ED8);
  sub_10000F330(v604, v896, &qword_100184EA0);
  swift_storeEnumTagMultiPayload();
  sub_10000F288(&qword_100185018, &qword_100184EA0);
  sub_10000F288(&qword_100185020, &qword_100184DB8);
  _ConditionalContent<>.init(storage:)();
  sub_10000F394(v604, &qword_100184EA0);
  uint64_t v607 = v522;
  v608 = &qword_100184ED8;
LABEL_97:
  sub_10000F394(v607, v608);
  uint64_t v758 = v905;
  sub_10000F330(v910, v905, &qword_100184F18);
  uint64_t v759 = v906;
  sub_10000F330(v912, v906, &qword_100184EF0);
  sub_10000F330((uint64_t)v931, (uint64_t)v930, &qword_100185028);
  sub_10000F330(v515, v907, &qword_100184EE0);
  uint64_t v760 = v758;
  uint64_t v761 = v897;
  sub_10000F330(v760, v897, &qword_100184F18);
  v762 = (int *)sub_10000AA4C(&qword_100185030);
  uint64_t v763 = v761 + v762[12];
  *(void *)uint64_t v763 = 0x4040000000000000;
  *(unsigned char *)(v763 + 8) = 0;
  sub_10000F330(v759, v761 + v762[16], &qword_100184EF0);
  sub_10000F330((uint64_t)v930, v761 + v762[20], &qword_100185028);
  uint64_t v764 = v761 + v762[24];
  uint64_t v765 = v894;
  uint64_t v766 = *((void *)&v893 + 1);
  *(void *)uint64_t v764 = v894;
  *(void *)(v764 + 8) = v766;
  LOBYTE(v759) = v892;
  uint64_t v767 = v893;
  *(void *)(v764 + 16) = v892;
  *(void *)(v764 + 24) = v767;
  uint64_t v768 = v911;
  *(void *)(v764 + 32) = v911;
  *(void *)(v764 + 40) = 0;
  uint64_t v911 = v768;
  v769 = v891;
  *(void *)(v764 + 48) = v904;
  *(void *)(v764 + 56) = v769;
  *(unsigned char *)(v764 + 64) = (_BYTE)v890;
  uint64_t v770 = v761 + v762[28];
  uint64_t v771 = v907;
  sub_10000F330(v907, v770, &qword_100184EE0);
  sub_1000EDD34(v765, v766, v759, v767);
  sub_10000F394((uint64_t)v903, &qword_100184EE0);
  sub_10000F394((uint64_t)v931, &qword_100185028);
  sub_10000F394(v912, &qword_100184EF0);
  sub_10000F394(v910, &qword_100184F18);
  sub_10000F394(v771, &qword_100184EE0);
  sub_1000EDD84(v765, v766, v759, v767);
  sub_10000F394((uint64_t)v930, &qword_100185028);
  sub_10000F394(v906, &qword_100184EF0);
  return sub_10000F394(v905, &qword_100184F18);
}

uint64_t sub_1000E365C(uint64_t result)
{
  if (!(*(void *)(result + 88) >> 62))
  {
    sub_10000AA4C(&qword_100184C60);
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000E36BC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 160);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 120;
    sub_10000AAF0(v1 + 40 * v2 - 8, (uint64_t)v10);
    uint64_t v5 = *(void **)(v3 + 8);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    uint64_t v8 = sub_10000AB54(v10, v11);
    id v9 = v5;
    sub_10005EBD8((uint64_t)v8, v4, 0, v9, v6, v7);

    return sub_10000AB98((uint64_t)v10);
  }
  return result;
}

uint64_t sub_1000E3760@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_1001852A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v42 - v8;
  uint64_t v10 = sub_10000AA4C(&qword_1001852A8);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v11 = v46;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v42 - v15;
  sub_1000EAE04(a1, (uint64_t)&v48);
  uint64_t v17 = swift_allocObject();
  long long v18 = v61;
  *(_OWORD *)(v17 + 208) = v60;
  *(_OWORD *)(v17 + 224) = v18;
  *(void *)(v17 + 240) = v62;
  long long v19 = v57;
  *(_OWORD *)(v17 + 144) = v56;
  *(_OWORD *)(v17 + 160) = v19;
  long long v20 = v59;
  *(_OWORD *)(v17 + 176) = v58;
  *(_OWORD *)(v17 + 192) = v20;
  long long v21 = v53;
  *(_OWORD *)(v17 + 80) = v52;
  *(_OWORD *)(v17 + 96) = v21;
  long long v22 = v55;
  *(_OWORD *)(v17 + 112) = v54;
  *(_OWORD *)(v17 + 128) = v22;
  long long v23 = v49;
  *(_OWORD *)(v17 + 16) = v48;
  *(_OWORD *)(v17 + 32) = v23;
  long long v24 = v51;
  *(_OWORD *)(v17 + 48) = v50;
  *(_OWORD *)(v17 + 64) = v24;
  sub_1000EEAC4();
  uint64_t v45 = v16;
  Button.init(action:label:)();
  sub_1000EAE04(a1, (uint64_t)&v48);
  uint64_t v25 = swift_allocObject();
  long long v26 = v61;
  *(_OWORD *)(v25 + 208) = v60;
  *(_OWORD *)(v25 + 224) = v26;
  *(void *)(v25 + 240) = v62;
  long long v27 = v57;
  *(_OWORD *)(v25 + 144) = v56;
  *(_OWORD *)(v25 + 160) = v27;
  long long v28 = v59;
  *(_OWORD *)(v25 + 176) = v58;
  *(_OWORD *)(v25 + 192) = v28;
  long long v29 = v53;
  *(_OWORD *)(v25 + 80) = v52;
  *(_OWORD *)(v25 + 96) = v29;
  long long v30 = v55;
  *(_OWORD *)(v25 + 112) = v54;
  *(_OWORD *)(v25 + 128) = v30;
  long long v31 = v49;
  *(_OWORD *)(v25 + 16) = v48;
  *(_OWORD *)(v25 + 32) = v31;
  long long v32 = v51;
  *(_OWORD *)(v25 + 48) = v50;
  *(_OWORD *)(v25 + 64) = v32;
  sub_1000EEB18();
  uint64_t v43 = v9;
  Button.init(action:label:)();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v44 = v13;
  v33(v13, v16, v10);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v35 = v9;
  uint64_t v36 = v3;
  v34(v6, v35, v3);
  uint64_t v37 = v47;
  v33(v47, v13, v10);
  uint64_t v38 = &v37[*(int *)(sub_10000AA4C(&qword_1001852B0) + 48)];
  v34(v38, v6, v36);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v4 + 8);
  v39(v43, v36);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v46 + 8);
  v40(v45, v10);
  v39(v6, v36);
  return ((uint64_t (*)(char *, uint64_t))v40)(v44, v10);
}

uint64_t sub_1000E3B90()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000E3BE8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000E3C3C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 184);
  sub_10000AA4C(&qword_100184DB0);
  State.wrappedValue.getter();
  sub_1000EEAC4();
  sub_1000EEB18();
  uint64_t result = _ConditionalContent<>.init(storage:)();
  *a2 = v4;
  return result;
}

uint64_t sub_1000E3CE0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000E3D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v64 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v5 - 8);
  long long v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v61 = (char *)&v56 - v8;
  __chkstk_darwin(v9);
  long long v56 = (char *)&v56 - v10;
  uint64_t v11 = sub_10000AA4C(&qword_1001851C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_1001851B0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_1001851A0);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  long long v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000AA4C(&qword_100185190);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000AA4C(&qword_100185180);
  uint64_t v27 = v26 - 8;
  __chkstk_darwin(v26);
  uint64_t v57 = (uint64_t)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000AA4C(&qword_100185170) - 8;
  __chkstk_darwin(v59);
  uint64_t v58 = (uint64_t)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000AA4C(&qword_100185158) - 8;
  __chkstk_darwin(v62);
  long long v60 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = static VerticalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4008000000000000;
  v13[16] = 0;
  uint64_t v31 = sub_10000AA4C(&qword_1001852B8);
  sub_1000E4438((uint64_t *)&v13[*(int *)(v31 + 44)]);
  static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000F330((uint64_t)v13, (uint64_t)v17, &qword_1001851C0);
  long long v32 = &v17[*(int *)(v15 + 44)];
  long long v33 = v67;
  *(_OWORD *)long long v32 = v66;
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v68;
  sub_10000F394((uint64_t)v13, &qword_1001851C0);
  sub_10000F330((uint64_t)v17, (uint64_t)v21, &qword_1001851B0);
  v21[*(int *)(v19 + 44)] = 0;
  sub_10000F394((uint64_t)v17, &qword_1001851B0);
  uint64_t v34 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v35 = v34;
  uint64_t v36 = (uint64_t)v56;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v37 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48);
  LODWORD(v15) = v38(v36, 1, v37);
  sub_10000F394(v36, &qword_100184B10);

  double v39 = 0.0;
  if (v15 == 1) {
    double v40 = 0.0;
  }
  else {
    double v40 = 10.0;
  }
  sub_10000F330((uint64_t)v21, (uint64_t)v25, &qword_1001851A0);
  uint64_t v41 = &v25[*(int *)(v23 + 44)];
  *(double *)uint64_t v41 = v40;
  v41[8] = 0;
  sub_10000F394((uint64_t)v21, &qword_1001851A0);
  swift_getKeyPath();
  swift_getKeyPath();
  id v42 = v35;
  uint64_t v43 = (uint64_t)v61;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v44 = v38(v43, 1, v37);
  sub_10000F394(v43, &qword_100184B10);

  if (v44 == 1) {
    double v39 = 1.0;
  }
  uint64_t v45 = v57;
  sub_10000F330((uint64_t)v25, v57, &qword_100185190);
  *(double *)(v45 + *(int *)(v27 + 44)) = v39;
  sub_10000F394((uint64_t)v25, &qword_100185190);
  uint64_t v46 = static Animation.spring(response:dampingFraction:blendDuration:)();
  swift_getKeyPath();
  swift_getKeyPath();
  id v47 = v42;
  uint64_t v48 = (uint64_t)v63;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  BOOL v49 = v38(v48, 1, v37) != 1;
  sub_10000F394(v48, &qword_100184B10);

  uint64_t v50 = v58;
  sub_10000F330(v45, v58, &qword_100185180);
  uint64_t v51 = v50 + *(int *)(v59 + 44);
  *(void *)uint64_t v51 = v46;
  *(unsigned char *)(v51 + 8) = v49;
  sub_10000F394(v45, &qword_100185180);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v53 = (uint64_t)v64;
  *uint64_t v64 = KeyPath;
  sub_10000AA4C(&qword_100182218);
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = (uint64_t)v60;
  sub_1000EC128(v53, (uint64_t)&v60[*(int *)(v62 + 44)], type metadata accessor for VibrancyEffectModifier);
  sub_10000F2CC(v50, v54, &qword_100185170);
  return sub_10000F2CC(v54, v65, &qword_100185158);
}

uint64_t sub_1000E4438@<X0>(uint64_t *a1@<X8>)
{
  long long v60 = a1;
  uint64_t v56 = sub_10000AA4C(&qword_1001852C0) - 8;
  __chkstk_darwin(v56);
  uint64_t v54 = (uint64_t *)((char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = type metadata accessor for Image.Scale();
  uint64_t v48 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v46 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000AA4C(&qword_1001852C8) - 8;
  __chkstk_darwin(v52);
  id v47 = (uint64_t *)((char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v57 = sub_10000AA4C(&qword_1001852D0) - 8;
  __chkstk_darwin(v57);
  uint64_t v55 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000AA4C(&qword_1001852D8) - 8;
  __chkstk_darwin(v59);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v58 = (uint64_t)&v46 - v8;
  uint64_t v61 = sub_1000DC5D0();
  uint64_t v62 = v9;
  sub_100054CC0();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.subheadline.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  swift_release();
  sub_100054D14(v10, v12, v14);
  swift_bridgeObjectRelease();
  LODWORD(v61) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v20 = Text.foregroundStyle<A>(_:)();
  uint64_t v50 = v21;
  uint64_t v51 = v20;
  uint64_t v49 = v22;
  LOBYTE(v10) = v23 & 1;
  sub_100054D14(v15, v17, v19 & 1);
  swift_bridgeObjectRelease();
  uint64_t v24 = Image.init(systemName:)();
  uint64_t v25 = v48;
  uint64_t v26 = v46;
  uint64_t v27 = v53;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v46, enum case for Image.Scale.small(_:), v53);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = v54;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))((char *)v54 + *(int *)(v56 + 36), v26, v27);
  *uint64_t v29 = KeyPath;
  uint64_t v30 = v47;
  sub_10000F330((uint64_t)v29, (uint64_t)v47 + *(int *)(v52 + 44), &qword_1001852C0);
  *uint64_t v30 = v24;
  swift_retain();
  sub_10000F394((uint64_t)v29, &qword_1001852C0);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
  swift_release();
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  uint64_t v31 = Font.weight(_:)();
  swift_release();
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = v55;
  sub_10000F330((uint64_t)v30, v55, &qword_1001852C8);
  uint64_t v34 = (uint64_t *)(v33 + *(int *)(v57 + 44));
  uint64_t *v34 = v32;
  v34[1] = v31;
  sub_10000F394((uint64_t)v30, &qword_1001852C8);
  id v35 = [self tertiaryLabelColor];
  uint64_t v36 = Color.init(_:)();
  uint64_t v37 = swift_getKeyPath();
  sub_10000F330(v33, (uint64_t)v6, &qword_1001852D0);
  uint64_t v38 = (uint64_t *)&v6[*(int *)(v59 + 44)];
  *uint64_t v38 = v37;
  v38[1] = v36;
  sub_10000F394(v33, &qword_1001852D0);
  uint64_t v39 = v58;
  sub_10000F2CC((uint64_t)v6, v58, &qword_1001852D8);
  sub_10000F330(v39, (uint64_t)v6, &qword_1001852D8);
  double v40 = v60;
  uint64_t v42 = v50;
  uint64_t v41 = v51;
  *long long v60 = v51;
  v40[1] = v42;
  *((unsigned char *)v40 + 16) = v10;
  v40[3] = v49;
  uint64_t v43 = v40;
  uint64_t v44 = sub_10000AA4C(&qword_1001852E0);
  sub_10000F330((uint64_t)v6, (uint64_t)v43 + *(int *)(v44 + 48), &qword_1001852D8);
  sub_100055180(v41, v42, v10);
  swift_bridgeObjectRetain();
  sub_10000F394(v39, &qword_1001852D8);
  sub_10000F394((uint64_t)v6, &qword_1001852D8);
  sub_100054D14(v41, v42, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E49B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000AB54(a1, a1[3]);
  uint64_t result = sub_10000FA78();
  *a2 = result;
  return result;
}

uint64_t sub_1000E4A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v110 = a2;
  uint64_t v112 = a1;
  uint64_t v115 = a3;
  uint64_t v3 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v3 - 8);
  uint64_t v111 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v109 = (char *)&v96 - v6;
  __chkstk_darwin(v7);
  uint64_t v105 = (char *)&v96 - v8;
  uint64_t v100 = type metadata accessor for LocalizedStringResource();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for ShareableContentActionButton(0);
  __chkstk_darwin(v97);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000AA4C((uint64_t *)&unk_100185090);
  __chkstk_darwin(v98);
  char v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000AA4C(&qword_100185080);
  __chkstk_darwin(v101);
  uint64_t v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000AA4C(&qword_100185070);
  __chkstk_darwin(v102);
  uint64_t v103 = (uint64_t)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000AA4C(&qword_100185060);
  __chkstk_darwin(v104);
  uint64_t v108 = (uint64_t)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000AA4C(&qword_100185050);
  uint64_t v114 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v107 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v106 = (uint64_t)&v96 - v21;
  uint64_t v22 = sub_10000AA4C((uint64_t *)&unk_1001852F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for StartCollaborationAction(0);
  uint64_t v26 = *(void *)(started - 8);
  uint64_t v27 = *(void *)(v26 + 64);
  __chkstk_darwin(started);
  uint64_t v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v96 - v30;
  sub_10000AAF0(v112, (uint64_t)v116);
  sub_10000AA4C(&qword_100180098);
  char v32 = swift_dynamicCast();
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if (v32)
  {
    v33(v24, 0, 1, started);
    uint64_t v34 = (uint64_t)v24;
    uint64_t v35 = (uint64_t)v31;
    uint64_t v96 = v31;
    sub_1000EC128(v34, (uint64_t)v31, type metadata accessor for StartCollaborationAction);
    LocalizedStringResource.init(stringLiteral:)();
    uint64_t v36 = v110;
    sub_1000EAE04(v110, (uint64_t)v116);
    sub_1000EACE0(v35, (uint64_t)v28, type metadata accessor for StartCollaborationAction);
    unint64_t v37 = (*(unsigned __int8 *)(v26 + 80) + 248) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v38 = swift_allocObject();
    long long v39 = v116[13];
    *(_OWORD *)(v38 + 208) = v116[12];
    *(_OWORD *)(v38 + 224) = v39;
    *(void *)(v38 + 240) = v117;
    long long v40 = v116[9];
    *(_OWORD *)(v38 + 144) = v116[8];
    *(_OWORD *)(v38 + 160) = v40;
    long long v41 = v116[11];
    *(_OWORD *)(v38 + 176) = v116[10];
    *(_OWORD *)(v38 + 192) = v41;
    long long v42 = v116[5];
    *(_OWORD *)(v38 + 80) = v116[4];
    *(_OWORD *)(v38 + 96) = v42;
    long long v43 = v116[7];
    *(_OWORD *)(v38 + 112) = v116[6];
    *(_OWORD *)(v38 + 128) = v43;
    long long v44 = v116[1];
    *(_OWORD *)(v38 + 16) = v116[0];
    *(_OWORD *)(v38 + 32) = v44;
    long long v45 = v116[3];
    *(_OWORD *)(v38 + 48) = v116[2];
    *(_OWORD *)(v38 + 64) = v45;
    sub_1000EC128((uint64_t)v28, v38 + v37, type metadata accessor for StartCollaborationAction);
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v12, v10, v100);
    uint64_t v46 = (uint64_t (**)())&v12[*(int *)(v97 + 20)];
    *uint64_t v46 = sub_1000EEFAC;
    v46[1] = (uint64_t (*)())v38;
    LOBYTE(v38) = static Edge.Set.leading.getter();
    EdgeInsets.init(_all:)();
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    sub_1000EACE0((uint64_t)v12, (uint64_t)v14, type metadata accessor for ShareableContentActionButton);
    uint64_t v55 = &v14[*(int *)(v98 + 36)];
    *uint64_t v55 = v38;
    *((void *)v55 + 1) = v48;
    *((void *)v55 + 2) = v50;
    *((void *)v55 + 3) = v52;
    *((void *)v55 + 4) = v54;
    v55[40] = 0;
    sub_1000EAD48((uint64_t)v12, type metadata accessor for ShareableContentActionButton);
    char v56 = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    sub_10000F330((uint64_t)v14, (uint64_t)v16, (uint64_t *)&unk_100185090);
    uint64_t v65 = &v16[*(int *)(v101 + 36)];
    *uint64_t v65 = v56;
    *((void *)v65 + 1) = v58;
    *((void *)v65 + 2) = v60;
    *((void *)v65 + 3) = v62;
    *((void *)v65 + 4) = v64;
    v65[40] = 0;
    sub_10000F394((uint64_t)v14, (uint64_t *)&unk_100185090);
    uint64_t v66 = v36;
    long long v67 = *(void **)(v36 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v68 = v67;
    uint64_t v69 = (uint64_t)v105;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v70 = type metadata accessor for ContinuousClock.Instant();
    uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48);
    LODWORD(v38) = v71(v69, 1, v70);
    sub_10000F394(v69, &qword_100184B10);

    double v72 = 0.0;
    if (v38 == 1) {
      double v73 = 0.0;
    }
    else {
      double v73 = 10.0;
    }
    uint64_t v74 = v103;
    sub_10000F330((uint64_t)v16, v103, &qword_100185080);
    uint64_t v75 = v74 + *(int *)(v102 + 36);
    *(double *)uint64_t v75 = v73;
    *(unsigned char *)(v75 + 8) = 0;
    sub_10000F394((uint64_t)v16, &qword_100185080);
    uint64_t v76 = *(void **)(v66 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v77 = v76;
    uint64_t v78 = (uint64_t)v109;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v79 = v71(v78, 1, v70);
    sub_10000F394(v78, &qword_100184B10);

    if (v79 == 1) {
      double v72 = 1.0;
    }
    uint64_t v80 = v108;
    sub_10000F330(v74, v108, &qword_100185070);
    *(double *)(v80 + *(int *)(v104 + 36)) = v72;
    sub_10000F394(v74, &qword_100185070);
    uint64_t v81 = static Animation.spring(response:dampingFraction:blendDuration:)();
    uint64_t v82 = *(void **)(v66 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v83 = v82;
    uint64_t v84 = (uint64_t)v111;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    BOOL v85 = v71(v84, 1, v70) != 1;
    sub_10000F394(v84, &qword_100184B10);

    uint64_t v86 = v107;
    sub_10000F330(v80, v107, &qword_100185060);
    uint64_t v87 = v113;
    uint64_t v88 = v86 + *(int *)(v113 + 36);
    *(void *)uint64_t v88 = v81;
    *(unsigned char *)(v88 + 8) = v85;
    sub_10000F394(v80, &qword_100185060);
    sub_1000EAD48((uint64_t)v96, type metadata accessor for StartCollaborationAction);
    uint64_t v89 = v106;
    sub_10000F2CC(v86, v106, &qword_100185050);
    uint64_t v90 = v89;
    uint64_t v91 = v115;
    sub_10000F2CC(v90, v115, &qword_100185050);
    uint64_t v92 = 0;
    uint64_t v93 = v91;
    uint64_t v94 = v87;
  }
  else
  {
    uint64_t v92 = 1;
    v33(v24, 1, 1, started);
    sub_10000F394((uint64_t)v24, (uint64_t *)&unk_1001852F0);
    uint64_t v93 = v115;
    uint64_t v94 = v113;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v93, v92, 1, v94);
}

uint64_t sub_1000E54F8(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for StartCollaborationAction(0);
  __chkstk_darwin(started - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = *(void **)(a1 + 8);
  sub_1000EACE0(a2, (uint64_t)v6, type metadata accessor for StartCollaborationAction);
  sub_10000AAF0(a1 + 120, (uint64_t)v12);
  swift_getKeyPath();
  swift_getKeyPath();
  id v8 = v7;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  uint64_t v9 = v11;
  sub_1000EB4E0((uint64_t)v6, (uint64_t)v12, v11, v8, (uint64_t (*)(void, __n128))type metadata accessor for StartCollaborationAction, &qword_100183948, (void (*)(uint64_t))type metadata accessor for StartCollaborationAction, byte_10012A530, type metadata accessor for StartCollaborationAction, (uint64_t)&unk_10016D090, (unint64_t *)&unk_100181DD0);

  sub_10000AB98((uint64_t)v12);
  return sub_1000EAD48((uint64_t)v6, type metadata accessor for StartCollaborationAction);
}

uint64_t sub_1000E56AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v86 = a3;
  uint64_t v4 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v4 - 8);
  id v83 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v71 - v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v74 = type metadata accessor for LocalizedStringResource();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ShareableContentActionButton(0);
  __chkstk_darwin(v72);
  char v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000AA4C(&qword_100184FD8);
  __chkstk_darwin(v75);
  uint64_t v77 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000AA4C(&qword_100184FC8);
  __chkstk_darwin(v76);
  uint64_t v81 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000AA4C(&qword_100184FB8);
  uint64_t v85 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v79 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v78 = (uint64_t)&v71 - v19;
  uint64_t v20 = sub_10000AA4C((uint64_t *)&unk_100185310);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for SendOverAirDropAction(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v71 - v28;
  sub_10000AAF0(a1, (uint64_t)v87);
  sub_10000AA4C(&qword_100180098);
  char v30 = swift_dynamicCast();
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (v30)
  {
    v31(v22, 0, 1, v23);
    uint64_t v32 = (uint64_t)v22;
    uint64_t v33 = (uint64_t)v29;
    uint64_t v71 = v29;
    sub_1000EC128(v32, (uint64_t)v29, type metadata accessor for SendOverAirDropAction);
    LocalizedStringResource.init(stringLiteral:)();
    uint64_t v34 = v82;
    sub_1000EAE04(v82, (uint64_t)v87);
    sub_1000EACE0(v33, (uint64_t)v26, type metadata accessor for SendOverAirDropAction);
    unint64_t v35 = (*(unsigned __int8 *)(v24 + 80) + 248) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v36 = swift_allocObject();
    long long v37 = v87[13];
    *(_OWORD *)(v36 + 208) = v87[12];
    *(_OWORD *)(v36 + 224) = v37;
    *(void *)(v36 + 240) = v88;
    long long v38 = v87[9];
    *(_OWORD *)(v36 + 144) = v87[8];
    *(_OWORD *)(v36 + 160) = v38;
    long long v39 = v87[11];
    *(_OWORD *)(v36 + 176) = v87[10];
    *(_OWORD *)(v36 + 192) = v39;
    long long v40 = v87[5];
    *(_OWORD *)(v36 + 80) = v87[4];
    *(_OWORD *)(v36 + 96) = v40;
    long long v41 = v87[7];
    *(_OWORD *)(v36 + 112) = v87[6];
    *(_OWORD *)(v36 + 128) = v41;
    long long v42 = v87[1];
    *(_OWORD *)(v36 + 16) = v87[0];
    *(_OWORD *)(v36 + 32) = v42;
    long long v43 = v87[3];
    *(_OWORD *)(v36 + 48) = v87[2];
    *(_OWORD *)(v36 + 64) = v43;
    sub_1000EC128((uint64_t)v26, v36 + v35, type metadata accessor for SendOverAirDropAction);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v14, v12, v74);
    long long v44 = (uint64_t (**)())&v14[*(int *)(v72 + 20)];
    *long long v44 = sub_1000EF148;
    v44[1] = (uint64_t (*)())v36;
    long long v45 = *(void **)(v34 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v46 = v45;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v47 = type metadata accessor for ContinuousClock.Instant();
    uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48);
    int v49 = v48(v10, 1, v47);
    sub_10000F394((uint64_t)v10, &qword_100184B10);

    double v50 = 0.0;
    if (v49 == 1) {
      double v51 = 0.0;
    }
    else {
      double v51 = 10.0;
    }
    uint64_t v52 = v77;
    sub_1000EACE0((uint64_t)v14, v77, type metadata accessor for ShareableContentActionButton);
    uint64_t v53 = v52 + *(int *)(v75 + 36);
    *(double *)uint64_t v53 = v51;
    *(unsigned char *)(v53 + 8) = 0;
    sub_1000EAD48((uint64_t)v14, type metadata accessor for ShareableContentActionButton);
    uint64_t v54 = *(void **)(v34 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v55 = v54;
    uint64_t v56 = (uint64_t)v80;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v57 = v48((char *)v56, 1, v47);
    sub_10000F394(v56, &qword_100184B10);

    if (v57 == 1) {
      double v50 = 1.0;
    }
    uint64_t v58 = v81;
    sub_10000F330(v52, v81, &qword_100184FD8);
    *(double *)(v58 + *(int *)(v76 + 36)) = v50;
    sub_10000F394(v52, &qword_100184FD8);
    uint64_t v59 = static Animation.spring(response:dampingFraction:blendDuration:)();
    uint64_t v60 = *(void **)(v34 + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v61 = v60;
    uint64_t v62 = (uint64_t)v83;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    BOOL v63 = v48((char *)v62, 1, v47) != 1;
    sub_10000F394(v62, &qword_100184B10);

    uint64_t v64 = v79;
    sub_10000F330(v58, v79, &qword_100184FC8);
    uint64_t v65 = v84;
    uint64_t v66 = v64 + *(int *)(v84 + 36);
    *(void *)uint64_t v66 = v59;
    *(unsigned char *)(v66 + 8) = v63;
    sub_10000F394(v58, &qword_100184FC8);
    sub_1000EAD48((uint64_t)v71, type metadata accessor for SendOverAirDropAction);
    uint64_t v67 = v78;
    sub_10000F2CC(v64, v78, &qword_100184FB8);
    sub_10000F2CC(v67, v86, &qword_100184FB8);
    uint64_t v68 = 0;
    uint64_t v69 = v65;
  }
  else
  {
    uint64_t v68 = 1;
    v31(v22, 1, 1, v23);
    sub_10000F394((uint64_t)v22, (uint64_t *)&unk_100185310);
    uint64_t v69 = v84;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v86, v68, 1, v69);
}

void sub_1000E5FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 120;
  id v4 = *(id *)(a1 + 8);
  sub_1000EB4E0(a2, v3, 0, v4, (uint64_t (*)(void, __n128))type metadata accessor for SendOverAirDropAction, &qword_100183940, (void (*)(uint64_t))type metadata accessor for SendOverAirDropAction, byte_10012A54C, type metadata accessor for SendOverAirDropAction, (uint64_t)&unk_10016D0E0, (unint64_t *)&unk_100185320);
}

uint64_t sub_1000E60C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000AB54(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  sub_1000EAE04(a2, (uint64_t)v24);
  sub_10000AAF0((uint64_t)a1, (uint64_t)v23);
  uint64_t v11 = swift_allocObject();
  long long v12 = v24[13];
  *(_OWORD *)(v11 + 208) = v24[12];
  *(_OWORD *)(v11 + 224) = v12;
  *(void *)(v11 + 240) = v25;
  long long v13 = v24[9];
  *(_OWORD *)(v11 + 144) = v24[8];
  *(_OWORD *)(v11 + 160) = v13;
  long long v14 = v24[11];
  *(_OWORD *)(v11 + 176) = v24[10];
  *(_OWORD *)(v11 + 192) = v14;
  long long v15 = v24[5];
  *(_OWORD *)(v11 + 80) = v24[4];
  *(_OWORD *)(v11 + 96) = v15;
  long long v16 = v24[7];
  *(_OWORD *)(v11 + 112) = v24[6];
  *(_OWORD *)(v11 + 128) = v16;
  long long v17 = v24[1];
  *(_OWORD *)(v11 + 16) = v24[0];
  *(_OWORD *)(v11 + 32) = v17;
  long long v18 = v24[3];
  *(_OWORD *)(v11 + 48) = v24[2];
  *(_OWORD *)(v11 + 64) = v18;
  sub_100063848(v23, v11 + 248);
  uint64_t v19 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v22, v8, v5);
  uint64_t result = type metadata accessor for ShareableContentActionButton(0);
  uint64_t v21 = (void (**)())(v19 + *(int *)(result + 20));
  *uint64_t v21 = sub_1000EF4E0;
  v21[1] = (void (*)())v11;
  return result;
}

void sub_1000E628C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = a1 + 120;
  uint64_t v4 = a2[3];
  uint64_t v5 = (void (*)(char *, char *, uint64_t))a2[4];
  uint64_t v6 = sub_10000AB54(a2, v4);
  id v7 = v2;
  sub_10005EBD8((uint64_t)v6, v3, 0, v7, v4, v5);
}

uint64_t sub_1000E6314()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000E636C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v4 = sub_10000AA4C(&qword_100184D90);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  id v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100184D80);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100184D40);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  long long v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = *(unsigned char *)(a2 + 168);
  uint64_t v17 = *(void *)(a2 + 176);
  char v32 = v16;
  uint64_t v33 = v17;
  sub_10000AA4C(&qword_100184DB0);
  State.wrappedValue.getter();
  double v18 = 0.0;
  if (v34) {
    double v19 = 1.0;
  }
  else {
    double v19 = 0.0;
  }
  uint64_t v20 = sub_10000AA4C(&qword_100184DA0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v30, v20);
  *(double *)&v7[*(int *)(v5 + 44)] = v19;
  char v32 = v16;
  uint64_t v33 = v17;
  State.wrappedValue.getter();
  if (!v34) {
    double v18 = 10.0;
  }
  sub_10000F330((uint64_t)v7, (uint64_t)v11, &qword_100184D90);
  uint64_t v21 = &v11[*(int *)(v9 + 44)];
  *(double *)uint64_t v21 = v18;
  v21[8] = 0;
  sub_10000F394((uint64_t)v7, &qword_100184D90);
  char v32 = v16;
  uint64_t v33 = v17;
  State.wrappedValue.getter();
  if (v34) {
    double v22 = 1.0;
  }
  else {
    double v22 = 0.66;
  }
  static UnitPoint.center.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_10000F330((uint64_t)v11, (uint64_t)v15, &qword_100184D80);
  uint64_t v27 = &v15[*(int *)(v13 + 44)];
  *(double *)uint64_t v27 = v22;
  *((double *)v27 + 1) = v22;
  *((void *)v27 + 2) = v24;
  *((void *)v27 + 3) = v26;
  sub_10000F394((uint64_t)v11, &qword_100184D80);
  return sub_10000F2CC((uint64_t)v15, v31, &qword_100184D40);
}

uint64_t sub_1000E6608@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000AA4C(&qword_100184CA8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_100184CB0);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  LOBYTE(v12) = *a1;
  uint64_t v46 = a3;
  if (v12)
  {
    long long v45 = &v39;
    __chkstk_darwin(v11);
    *(&v39 - 2) = a2;
    uint64_t v44 = sub_10000AA4C(&qword_100184CB8);
    uint64_t v14 = sub_10000B100((uint64_t *)&unk_100184CC0);
    uint64_t v15 = sub_10000B100(&qword_100182C50);
    uint64_t v16 = sub_10000B100(&qword_100184CD0);
    uint64_t v17 = sub_10000F288(&qword_100184CD8, &qword_100184CD0);
    unint64_t v18 = sub_100054CC0();
    uint64_t v47 = v16;
    uint64_t v48 = &type metadata for String;
    uint64_t v49 = v17;
    unint64_t v50 = v18;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v20 = sub_10000F288(&qword_100182C48, &qword_100182C50);
    uint64_t v47 = v14;
    uint64_t v48 = (void *)v15;
    uint64_t v49 = OpaqueTypeConformance2;
    unint64_t v50 = v20;
    swift_getOpaqueTypeConformance2();
    NavigationView.init(content:)();
    (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C((uint64_t *)&unk_100184C90);
    sub_1000ED394(&qword_100184C88, (uint64_t *)&unk_100184C90, (void (*)(void))sub_1000A28A4);
    sub_10000F288(&qword_100184CA0, &qword_100184CA8);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    long long v45 = (uint64_t *)v6;
    unint64_t v22 = *(void *)(a2 + 88);
    if (v22 >> 62)
    {
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      uint64_t v34 = 0;
      uint64_t v29 = 0;
      uint64_t v33 = 0;
      uint64_t v27 = 0;
      uint64_t v26 = 0;
      uint64_t v36 = 0;
      uint64_t v25 = 0;
      uint64_t v31 = 0;
      uint64_t v35 = 0;
      uint64_t v24 = 0;
      uint64_t v37 = 0;
      long long v38 = 0;
    }
    else
    {
      uint64_t v44 = *(unsigned int *)(a2 + 112);
      uint64_t v23 = *(void *)(a2 + 96);
      uint64_t v24 = *(void *)(a2 + 104);
      uint64_t v25 = *(void *)(a2 + 80);
      uint64_t v42 = *(void *)(a2 + 72);
      uint64_t v43 = v23;
      uint64_t v27 = *(void *)(a2 + 56);
      uint64_t v26 = *(void *)(a2 + 64);
      uint64_t v29 = *(void *)(a2 + 40);
      uint64_t v28 = *(void *)(a2 + 48);
      uint64_t v30 = *(void *)(a2 + 24);
      uint64_t v40 = *(void *)(a2 + 32);
      uint64_t v41 = v28;
      uint64_t v31 = v22;
      uint64_t v32 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = v40;
      uint64_t v33 = v41;
      uint64_t v36 = v42;
      uint64_t v35 = v43;
      uint64_t v37 = v44;
      long long v38 = sub_1000E6AE4;
    }
    *uint64_t v13 = v32;
    v13[1] = v30;
    void v13[2] = v34;
    v13[3] = v29;
    v13[4] = v33;
    v13[5] = v27;
    v13[6] = v26;
    v13[7] = v36;
    v13[8] = v25;
    v13[9] = v31;
    v13[10] = v35;
    v13[11] = v24;
    v13[12] = v37;
    v13[13] = v38;
    v13[14] = 0;
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C((uint64_t *)&unk_100184C90);
    sub_1000ED394(&qword_100184C88, (uint64_t *)&unk_100184C90, (void (*)(void))sub_1000A28A4);
    sub_10000F288(&qword_100184CA0, &qword_100184CA8);
    return _ConditionalContent<>.init(storage:)();
  }
}

id sub_1000E6AE4(void *a1)
{
  return [a1 dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_1000E6AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v35 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100182C50);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  uint64_t v34 = v4;
  __chkstk_darwin(v3);
  uint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_10000AA4C(&qword_100184CD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000AA4C((uint64_t *)&unk_100184CC0);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  sub_10000AA4C(&qword_100184CF0);
  sub_1000E6FBC(a1);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *(void *)&long long v36 = String.init(localized:table:bundle:locale:comment:)();
  *((void *)&v36 + 1) = v13;
  uint64_t v14 = sub_10000F288(&qword_100184CD8, &qword_100184CD0);
  unint64_t v15 = sub_100054CC0();
  View.navigationTitle<A>(_:)();
  swift_bridgeObjectRelease();
  sub_10000F394((uint64_t)v10, &qword_100184CD0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v51 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v52 = v16;
  sub_1000EAE04(v29, (uint64_t)&v36);
  uint64_t v17 = swift_allocObject();
  long long v18 = v49;
  *(_OWORD *)(v17 + 208) = v48;
  *(_OWORD *)(v17 + 224) = v18;
  *(void *)(v17 + 240) = v50;
  long long v19 = v45;
  *(_OWORD *)(v17 + 144) = v44;
  *(_OWORD *)(v17 + 160) = v19;
  long long v20 = v47;
  *(_OWORD *)(v17 + 176) = v46;
  *(_OWORD *)(v17 + 192) = v20;
  long long v21 = v41;
  *(_OWORD *)(v17 + 80) = v40;
  *(_OWORD *)(v17 + 96) = v21;
  long long v22 = v43;
  *(_OWORD *)(v17 + 112) = v42;
  *(_OWORD *)(v17 + 128) = v22;
  long long v23 = v37;
  *(_OWORD *)(v17 + 16) = v36;
  *(_OWORD *)(v17 + 32) = v23;
  long long v24 = v39;
  *(_OWORD *)(v17 + 48) = v38;
  *(_OWORD *)(v17 + 64) = v24;
  uint64_t v25 = v31;
  Button<>.init<A>(_:action:)();
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = &type metadata for String;
  *(void *)&long long v37 = v14;
  *((void *)&v37 + 1) = v15;
  swift_getOpaqueTypeConformance2();
  sub_10000F288(&qword_100182C48, &qword_100182C50);
  uint64_t v26 = v30;
  uint64_t v27 = v33;
  View.navigationBarItems<A>(trailing:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v12, v26);
}

uint64_t sub_1000E6FBC(uint64_t a1)
{
  type metadata accessor for SharingOptionsViewModel();
  uint64_t v2 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  id v4 = v3;
  sub_10005724C();

  SharingOptionsViewModel.__allocating_init(collaborationShareOptions:layoutMargins:userDidChangeOption:contentSizeDidChange:)();
  return SharingOptionsView.init(viewModel:)();
}

uint64_t sub_1000E70A4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000E70FC@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X2>, uint64_t a3@<X8>)
{
  type metadata accessor for NearbySharingInteractionViewModel(0);
  sub_1000EAE6C(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
  *(void *)a3 = ObservedObject.init(wrappedValue:)();
  *(void *)(a3 + 8) = v6;
  sub_10005EB7C(a1, a3 + 16);
  long long v7 = a2[1];
  *(_OWORD *)(a3 + 120) = *a2;
  *(_OWORD *)(a3 + 136) = v7;
  *(_OWORD *)(a3 + 152) = a2[2];
  State.init(wrappedValue:)();
  *(unsigned char *)(a3 + 168) = v9;
  *(void *)(a3 + 176) = v10;
  State.init(wrappedValue:)();
  *(unsigned char *)(a3 + 184) = v9;
  *(void *)(a3 + 192) = v10;
  sub_10000AA4C((uint64_t *)&unk_100184B00);
  State.init(wrappedValue:)();
  *(unsigned char *)(a3 + 200) = v9;
  *(void *)(a3 + 208) = v10;
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)(a3 + 216) = v9;
  *(void *)(a3 + 224) = v10;
  return result;
}

uint64_t sub_1000E727C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  __chkstk_darwin(v3);
  long long v48 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NameDrop(0);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v45 = *(void *)(v46 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v43 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  char v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for NameDropView();
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100184C20);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100184C28);
  __chkstk_darwin(v16 - 8);
  long long v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000AA4C(&qword_100184C30);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  long long v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *long long v18 = static Alignment.center.getter();
  v18[1] = v23;
  uint64_t v41 = (uint64_t)v18 + *(int *)(sub_10000AA4C(&qword_100184C38) + 44);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2, v42);
  uint64_t v24 = v43;
  sub_1000EACE0(v2, v43, type metadata accessor for NameDrop);
  unint64_t v25 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v26 = swift_allocObject();
  sub_1000EC128(v24, v26 + v25, type metadata accessor for NameDrop);
  NameDropView.init(transactionIdentifier:dismissViewAction:)();
  uint64_t v27 = sub_10006B2F8();
  uint64_t v28 = v44;
  uint64_t v29 = v47;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v15, v11, v47);
  *(void *)&v15[*(int *)(v13 + 44)] = v27;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
  sub_10000F2CC((uint64_t)v15, v41, &qword_100184C20);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v48;
  uint64_t v31 = v49;
  uint64_t v33 = v50;
  (*(void (**)(char *, void, uint64_t))(v49 + 104))(v48, enum case for ColorScheme.light(_:), v50);
  uint64_t v34 = (uint64_t *)&v22[*(int *)(v20 + 44)];
  uint64_t v35 = sub_10000AA4C(&qword_100184C40);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))((char *)v34 + *(int *)(v35 + 28), v32, v33);
  uint64_t *v34 = KeyPath;
  sub_10000F330((uint64_t)v18, (uint64_t)v22, &qword_100184C28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  sub_10000F394((uint64_t)v18, &qword_100184C28);
  uint64_t v36 = static Color.black.getter();
  LOBYTE(v34) = static Edge.Set.all.getter();
  uint64_t v37 = v51;
  sub_10000F330((uint64_t)v22, v51, &qword_100184C30);
  uint64_t v38 = v37 + *(int *)(sub_10000AA4C(&qword_100184C48) + 36);
  *(void *)uint64_t v38 = v36;
  *(unsigned char *)(v38 + 8) = (_BYTE)v34;
  return sub_10000F394((uint64_t)v22, &qword_100184C30);
}

uint64_t sub_1000E77D0@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v58 = sub_10000AA4C(&qword_100184A50);
  __chkstk_darwin(v58);
  uint64_t v59 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000AA4C(&qword_100184A58);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for NameDrop(0);
  __chkstk_darwin(v51);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000AA4C(&qword_100184A60);
  __chkstk_darwin(v57);
  uint64_t v52 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v55 = (uint64_t)&v49 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  uint64_t v56 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000AA4C(&qword_100184A68);
  __chkstk_darwin(v61);
  uint64_t v62 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OpacityTransition();
  uint64_t v49 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100184A70);
  uint64_t v50 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  long long v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v22 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = a1;
  sub_10005B40C(v24);

  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000EAD48((uint64_t)v24, type metadata accessor for NearbySharingInteractionViewState);
      goto LABEL_6;
    case 2u:
      uint64_t v32 = v53;
      uint64_t v33 = v56;
      uint64_t v34 = v24;
      uint64_t v35 = v54;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v56, v34, v54);
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v6, v33, v35);
      *(void *)&v6[*(int *)(v51 + 20)] = v25;
      uint64_t v36 = self;
      id v37 = v25;
      id v38 = [v36 currentTraitCollection];
      [v38 displayCornerRadius];
      uint64_t v40 = v39;

      *(void *)&v67[0] = v40;
      sub_1000EAC8C();
      uint64_t v41 = AnyTransition.init<A>(_:)();
      uint64_t v42 = v52;
      sub_1000EACE0((uint64_t)v6, v52, type metadata accessor for NameDrop);
      *(void *)(v42 + *(int *)(v57 + 36)) = v41;
      sub_1000EAD48((uint64_t)v6, type metadata accessor for NameDrop);
      uint64_t v43 = v55;
      sub_10000F2CC(v42, v55, &qword_100184A60);
      sub_10000F330(v43, v59, &qword_100184A60);
      swift_storeEnumTagMultiPayload();
      sub_1000EA970();
      uint64_t v44 = (uint64_t)v60;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v44, v62, &qword_100184A58);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100184A98);
      sub_1000EAA40();
      sub_1000EAC10();
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v44, &qword_100184A58);
      sub_10000F394(v43, &qword_100184A60);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v56, v35);
    case 3u:
      sub_10005E778(*(void *)v24, *((void *)v24 + 1), *((void *)v24 + 2), *((void *)v24 + 3), *((void *)v24 + 4), *((void *)v24 + 5), *((void *)v24 + 6), *((void *)v24 + 7), *((void *)v24 + 8), *((void *)v24 + 9));
      goto LABEL_6;
    case 4u:
      sub_10005EB7C((uint64_t)v24, (uint64_t)v71);
      long long v46 = *(_OWORD *)(v24 + 120);
      v70[0] = *(_OWORD *)(v24 + 104);
      v70[1] = v46;
      v70[2] = *(_OWORD *)(v24 + 136);
      sub_1000EADA8((uint64_t)v70, (uint64_t)v67);
      id v47 = v25;
      sub_1000E70FC((uint64_t)v71, v67, (uint64_t)v65);
      static AnyTransition.identity.getter();
      static AnyTransition.opacity.getter();
      static Animation.default.getter();
      Animation.delay(_:)();
      swift_release();
      AnyTransition.animation(_:)();
      swift_release();
      swift_release();
      uint64_t v48 = static AnyTransition.asymmetric(insertion:removal:)();
      swift_release();
      swift_release();
      sub_1000EAE04((uint64_t)v65, (uint64_t)v67);
      *((void *)&v68 + 1) = v48;
      sub_1000EAE3C((uint64_t)v65);
      v69[12] = v67[12];
      v69[13] = v67[13];
      v69[14] = v68;
      v69[8] = v67[8];
      v69[9] = v67[9];
      v69[10] = v67[10];
      v69[11] = v67[11];
      v69[4] = v67[4];
      v69[5] = v67[5];
      v69[6] = v67[6];
      v69[7] = v67[7];
      v69[0] = v67[0];
      v69[1] = v67[1];
      v69[2] = v67[2];
      v69[3] = v67[3];
      sub_10000F330((uint64_t)v69, (uint64_t)v65, &qword_100184AC8);
      char v66 = 1;
      sub_10000AA4C((uint64_t *)&unk_100184AB0);
      sub_10000AA4C(&qword_100184AC8);
      sub_1000EAA7C();
      sub_1000EAB1C();
      _ConditionalContent<>.init(storage:)();
      sub_10000F330((uint64_t)v67, v62, &qword_100184A98);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100184A98);
      sub_1000EAA40();
      sub_1000EAC10();
      _ConditionalContent<>.init(storage:)();
      sub_10000F394((uint64_t)v67, &qword_100184A98);
      sub_10000F394((uint64_t)v69, &qword_100184AC8);
      return sub_1000608FC((uint64_t)v70);
    case 5u:
LABEL_6:
      swift_storeEnumTagMultiPayload();
      sub_1000EA970();
      uint64_t v45 = (uint64_t)v60;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v45, v62, &qword_100184A58);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100184A98);
      sub_1000EAA40();
      sub_1000EAC10();
      _ConditionalContent<>.init(storage:)();
      uint64_t result = sub_10000F394(v45, &qword_100184A58);
      break;
    default:
      uint64_t v60 = *(char **)v24;
      type metadata accessor for ShockwaveAnimationCoordinator();
      sub_1000EAE6C(&qword_100181CC8, (void (*)(uint64_t))&type metadata accessor for ShockwaveAnimationCoordinator);
      swift_retain();
      uint64_t v59 = ObservedObject.init(wrappedValue:)();
      uint64_t v27 = v26;
      OpacityTransition.init()();
      static Animation.default.getter();
      Animation.delay(_:)();
      swift_release();
      uint64_t v28 = sub_1000EAE6C((unint64_t *)&unk_100184AF0, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
      Transition.animation(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v13);
      uint64_t v29 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v18, v21, v16);
      *(void *)&v67[0] = v13;
      *((void *)&v67[0] + 1) = v28;
      swift_getOpaqueTypeConformance2();
      uint64_t v30 = AnyTransition.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v16);
      v65[0] = v59;
      v65[1] = v27;
      v65[2] = v30;
      char v66 = 0;
      swift_retain();
      swift_retain();
      sub_10000AA4C((uint64_t *)&unk_100184AB0);
      sub_10000AA4C(&qword_100184AC8);
      sub_1000EAA7C();
      sub_1000EAB1C();
      _ConditionalContent<>.init(storage:)();
      sub_10000F330((uint64_t)v67, v62, &qword_100184A98);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100184A98);
      sub_1000EAA40();
      sub_1000EAC10();
      _ConditionalContent<>.init(storage:)();
      swift_release();
      sub_10000F394((uint64_t)v67, &qword_100184A98);
      swift_release();
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t sub_1000E837C@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  id v38 = a1;
  uint64_t v2 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v36 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = type metadata accessor for LumaTrackingViewModifier(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_100184A28);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000AA4C(&qword_100184A30);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000AA4C(&qword_100184A38);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E77D0(v38, (uint64_t)v16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v10, enum case for ColorScheme.light(_:), v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  sub_10000F330((uint64_t)v16, (uint64_t)v20, &qword_100184A28);
  sub_1000EC128((uint64_t)v13, (uint64_t)&v20[*(int *)(v18 + 44)], type metadata accessor for LumaTrackingViewModifier);
  sub_10000F394((uint64_t)v16, &qword_100184A28);
  LOBYTE(v13) = static Edge.Set.all.getter();
  uint64_t v25 = static SafeAreaRegions.all.getter();
  sub_10000F330((uint64_t)v20, (uint64_t)v24, &qword_100184A30);
  uint64_t v26 = &v24[*(int *)(v22 + 44)];
  *(void *)uint64_t v26 = v25;
  v26[8] = (char)v13;
  sub_10000F394((uint64_t)v20, &qword_100184A30);
  uint64_t v27 = static Animation.default.getter();
  uint64_t v28 = v38;
  uint64_t v29 = v36;
  sub_10005B40C(v36);

  uint64_t v30 = sub_10000AA4C(&qword_100184A40);
  uint64_t v31 = v37;
  uint64_t v32 = (uint64_t *)(v37 + *(int *)(v30 + 36));
  uint64_t v33 = sub_10000AA4C(&qword_100184A48);
  sub_1000EACE0((uint64_t)v29, (uint64_t)v32 + *(int *)(v33 + 36), type metadata accessor for NearbySharingInteractionViewState);
  uint64_t *v32 = v27;
  sub_10000F330((uint64_t)v24, v31, &qword_100184A38);
  sub_1000EAD48((uint64_t)v29, type metadata accessor for NearbySharingInteractionViewState);
  return sub_10000F394((uint64_t)v24, &qword_100184A38);
}

uint64_t sub_1000E8780@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E837C(*(void **)(v1 + 8), a1);
}

uint64_t sub_1000E8788()
{
  return 2;
}

uint64_t sub_1000E8790()
{
  return 1;
}

id sub_1000E8798(void *a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100183DA0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100183DA8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v11 = (void *)sub_10009DE78((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v11 = &_swiftEmptySetSingleton;
  }
  *(void *)&v10[qword_1001849C8] = v11;
  v10[qword_1001849D0] = 0;
  *(void *)&v10[qword_1001849C0] = a1;
  id v12 = a1;

  type metadata accessor for NearbySharingInteractionViewModel(0);
  sub_1000EAE6C(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
  id v13 = v12;
  v22[0] = ObservedObject.init(wrappedValue:)();
  v22[1] = v14;
  id v15 = (id)UIHostingController.init(rootView:)();
  id result = [v15 view];
  if (result)
  {
    uint64_t v17 = result;
    id v18 = [self clearColor];
    [v17 setBackgroundColor:v18];

    [v15 setModalPresentationStyle:5];
    v22[0] = ObservableObject<>.objectWillChange.getter();
    sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
    id v23 = (id)static OS_dispatch_queue.main.getter();
    uint64_t v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
    type metadata accessor for ObservableObjectPublisher();
    sub_1000EC190();
    Publisher.receive<A>(on:options:)();
    sub_10000F394((uint64_t)v5, &qword_100183DA0);

    swift_release();
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1000EC230;
    *(void *)(v21 + 24) = v20;
    sub_10000F288((unint64_t *)&unk_100183E20, &qword_100183DA8);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    sub_1000EA208();

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000E8BDC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000EA208();
  }
}

void sub_1000E8C30(unsigned char *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v5 = (void *)sub_10009DE78((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v5 = &_swiftEmptySetSingleton;
  }
  *(void *)&a1[qword_1001849C8] = v5;
  a1[qword_1001849D0] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000E8CEC(char a1, void *a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v8 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100184B10);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v16 = __chkstk_darwin(v15).n128_u64[0];
  id v18 = (char *)&v34 - v17;
  id v19 = [v3 presentedViewController];
  if (v19)
  {
    uint64_t v20 = v19;
    if (a2)
    {
      aBlock[4] = a2;
      aBlock[5] = a3;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100119678;
      aBlock[3] = &unk_10016CBE8;
      a2 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
    }
    uint64_t v21 = (objc_class *)type metadata accessor for NearbySharingInteractionViewController(0);
    v37.receiver = v4;
    v37.super_class = v21;
    [super dismissViewControllerAnimated:a1 & 1 completion:a2];
    _Block_release(a2);
  }
  else
  {
    if (a1)
    {
      uint64_t v22 = type metadata accessor for ContinuousClock.Instant();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 1, 1, v22);
    }
    else
    {
      sub_10005D584((uint64_t)v18);
    }
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
    sub_10000F330((uint64_t)v18, (uint64_t)v14, &qword_100184B10);
    type metadata accessor for MainActor();
    sub_100030254((uint64_t)a2);
    id v35 = v3;
    uint64_t v24 = static MainActor.shared.getter();
    unint64_t v25 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    char v26 = a1;
    unint64_t v27 = (v25 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = v10;
    uint64_t v28 = a3;
    unint64_t v29 = (v25 + v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v24;
    *(void *)(v30 + 24) = &protocol witness table for MainActor;
    sub_10000F2CC((uint64_t)v14, v30 + v25, &qword_100184B10);
    unint64_t v31 = v30 + v27;
    uint64_t v32 = (uint64_t)v34;
    *(void *)unint64_t v31 = v35;
    *(unsigned char *)(v31 + 8) = v26 & 1;
    uint64_t v33 = (void *)(v30 + v29);
    *uint64_t v33 = a2;
    v33[1] = v28;
    sub_1000F0F68(v32, (uint64_t)&unk_100184B20, v30);
    swift_release();
    sub_10000F394((uint64_t)v18, &qword_100184B10);
  }
}

uint64_t sub_1000E9064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = a7;
  *(void *)(v8 + 176) = a8;
  *(unsigned char *)(v8 + 129) = a6;
  *(void *)(v8 + 152) = a4;
  *(void *)(v8 + 160) = a5;
  uint64_t v9 = type metadata accessor for ContinuousClock();
  *(void *)(v8 + 184) = v9;
  *(void *)(v8 + 192) = *(void *)(v9 - 8);
  *(void *)(v8 + 200) = swift_task_alloc();
  sub_10000AA4C(&qword_100184B10);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v8 + 240) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 248) = v12;
  *(void *)(v8 + 256) = v11;
  return _swift_task_switch(sub_1000E91EC, v12, v11);
}

uint64_t sub_1000E91EC()
{
  uint64_t v36 = v0;
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  sub_10000F330(*(void *)(v0 + 152), v3, &qword_100184B10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000F394(*(void *)(v0 + 208), &qword_100184B10);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    id v4 = *(void **)(v0 + 160);
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B150(v5, (uint64_t)qword_10018D128);
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void **)(v0 + 160);
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      type metadata accessor for UUID();
      sub_1000EAE6C((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 136) = sub_100047F98(v12, v13, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deferring dismissal until shockwave animation is complete on interaction ID: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    *(void *)(v0 + 280) = *(void *)(*(void *)(*(void *)(v0 + 160) + qword_1001849C0)
                                      + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator);
    swift_retain();
    uint64_t v24 = static Duration.seconds(_:)();
    uint64_t v26 = v25;
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ShockwaveAnimationCoordinator.waitUntilAnimationCompletes(timeout:)
                                                   + async function pointer to dispatch thunk of ShockwaveAnimationCoordinator.waitUntilAnimationCompletes(timeout:));
    unint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v27;
    *unint64_t v27 = v0;
    v27[1] = sub_1000E9B90;
    return v34(v24, v26);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 232), *(void *)(v0 + 208), *(void *)(v0 + 216));
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v14 = *(void **)(v0 + 160);
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B150(v15, (uint64_t)qword_10018D128);
    id v16 = v14;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void **)(v0 + 160);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      type metadata accessor for UUID();
      sub_1000EAE6C((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 144) = sub_100047F98(v22, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Deferring dismissal to allow for animations to complete on interaction ID: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 112) = 0;
    *(unsigned char *)(v0 + 128) = 1;
    ContinuousClock.init()();
    unint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v29;
    uint64_t v30 = sub_1000EAE6C(&qword_100184B30, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    *unint64_t v29 = v0;
    v29[1] = sub_1000E97CC;
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 200);
    uint64_t v33 = *(void *)(v0 + 184);
    return static Task<>.sleep<A>(until:tolerance:clock:)(v31, v0 + 112, v32, v33, v30);
  }
}

uint64_t sub_1000E97CC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 200);
  uint64_t v4 = *(void *)(*v1 + 192);
  uint64_t v5 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 248);
  uint64_t v7 = *(void *)(v2 + 256);
  if (v0) {
    os_log_type_t v8 = sub_1000E9F04;
  }
  else {
    os_log_type_t v8 = sub_1000E9944;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_1000E9944()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = (void *)v0[20];
  if (*((unsigned char *)v0 + 129)) {
    double v7 = 0.33;
  }
  else {
    double v7 = 0.0;
  }
  os_log_type_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  v0[6] = sub_1000EB1F8;
  v0[7] = v9;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100119678;
  v0[5] = &unk_10016CC38;
  uint64_t v10 = _Block_copy(v0 + 2);
  id v11 = v6;
  swift_release();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v5;
  v12[4] = v4;
  v0[12] = sub_1000EB248;
  v0[13] = v12;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = sub_1000D7ABC;
  v0[11] = &unk_10016CC88;
  unint64_t v13 = _Block_copy(v0 + 8);
  id v14 = v11;
  sub_100030254(v5);
  swift_release();
  [v8 animateWithDuration:v10 animations:v13 completion:v7];
  _Block_release(v13);
  _Block_release(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1000E9B90()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 256);
  uint64_t v3 = *(void *)(v1 + 248);
  return _swift_task_switch(sub_1000E9CD4, v3, v2);
}

uint64_t sub_1000E9CD4()
{
  swift_release();
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)v0[20];
  if (*((unsigned char *)v0 + 129)) {
    double v4 = 0.33;
  }
  else {
    double v4 = 0.0;
  }
  uint64_t v5 = self;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  v0[6] = sub_1000EB1F8;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100119678;
  v0[5] = &unk_10016CC38;
  double v7 = _Block_copy(v0 + 2);
  id v8 = v3;
  swift_release();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = v2;
  v9[4] = v1;
  v0[12] = sub_1000EB248;
  v0[13] = v9;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = sub_1000D7ABC;
  v0[11] = &unk_10016CC88;
  uint64_t v10 = _Block_copy(v0 + 8);
  id v11 = v8;
  sub_100030254(v2);
  swift_release();
  [v5 animateWithDuration:v7 animations:v10 completion:v4];
  _Block_release(v10);
  _Block_release(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000E9F04()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000E9FB0(void *a1)
{
  id v1 = [a1 view];
  if (v1)
  {
    id v2 = v1;
    [v1 setAlpha:0.0];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000EA010(int a1, id a2, void *a3, uint64_t a4)
{
  id v6 = [a2 presentingViewController];
  if (v6)
  {
    double v7 = v6;
    if (a3)
    {
      v8[4] = a3;
      v8[5] = a4;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_100119678;
      v8[3] = &unk_10016CCB0;
      a3 = _Block_copy(v8);
      swift_retain();
      swift_release();
    }
    [v7 dismissViewControllerAnimated:0 completion:a3];
    _Block_release(a3);
  }
}

void sub_1000EA0F4(void *a1, int a2, char a3, void *aBlock)
{
  id v6 = _Block_copy(aBlock);
  if (v6)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    id v6 = sub_1000EAEEC;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v8 = a1;
  sub_1000E8CEC(a3, v6, v7);
  sub_100030180((uint64_t)v6);
}

void sub_1000EA1B0(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1000EA514();
  v5.receiver = v4;
  v5.super_class = (Class)type metadata accessor for NearbySharingInteractionViewController(0);
  [super viewDidAppear:a3];
}

void sub_1000EA208()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_100184B38);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  objc_super v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v21 - v13;
  sub_10005B40C((uint64_t *)((char *)&v21 - v13));
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = type metadata accessor for ContinuousClock.Instant();
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v8, 1, v15);
  sub_10000F394((uint64_t)v8, &qword_100184B10);
  uint64_t v17 = *(int *)(v3 + 56);
  sub_1000EC128((uint64_t)v14, (uint64_t)v5, type metadata accessor for NearbySharingInteractionViewState);
  v5[v17] = v16 != 1;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2
    || EnumCaseMultiPayload == 4
    && (sub_1000EACE0((uint64_t)v5, (uint64_t)v11, type metadata accessor for NearbySharingInteractionViewState),
        sub_10005E778(*(void *)v11, *((void *)v11 + 1), *((void *)v11 + 2), *((void *)v11 + 3), *((void *)v11 + 4), *((void *)v11 + 5), *((void *)v11 + 6), *((void *)v11 + 7), *((void *)v11 + 8), *((void *)v11 + 9)), sub_1000608FC((uint64_t)(v11 + 104)), v16 == 1))
  {
    sub_1000EAD48((uint64_t)v5, type metadata accessor for NearbySharingInteractionViewState);
    char v20 = *(unsigned char *)(v1 + qword_1001849D0);
    *(unsigned char *)(v1 + qword_1001849D0) = 1;
    if ((v20 & 1) == 0) {
      sub_1000EA514();
    }
  }
  else
  {
    int v19 = *(unsigned __int8 *)(v1 + qword_1001849D0);
    *(unsigned char *)(v1 + qword_1001849D0) = 0;
    if (v19 == 1) {
      sub_1000EA514();
    }
    sub_10000F394((uint64_t)v5, (uint64_t *)&unk_100184B38);
  }
}

void sub_1000EA514()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    return;
  }
  uint64_t v2 = v1;
  id v3 = [v1 window];

  if (!v3) {
    goto LABEL_13;
  }
  id v4 = [v3 windowScene];

  if (!v4) {
    goto LABEL_13;
  }
  self;
  objc_super v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
  {

LABEL_13:
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Cannot update SystemAffordances for namedrop: remoteAlertScene has not been created", v13, 2u);
      swift_slowDealloc();
    }
    goto LABEL_17;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (unsigned __int8 *)&v0[qword_1001849D0];
  if (*v7) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = 0;
  }
  [v5 setDesiredHardwareButtonEvents:v8];
  if (*v7) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 0;
  }
  [v6 setDismissalAnimationStyle:v9];
  [v6 setAllowsMenuButtonDismissal:*v7];
  unsigned __int8 v10 = *v7;
  oslog = [self settingsWithDuration:0.3 delay:0.1];
  [v6 setContentOverlaysStatusBar:(v10 & 1) == 0];

LABEL_17:
}

uint64_t sub_1000EA74C()
{
  return swift_bridgeObjectRelease();
}

id sub_1000EA78C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySharingInteractionViewController(0);
  [super dealloc];
}

uint64_t sub_1000EA7C4(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void sub_1000EA810()
{
}

void sub_1000EA840()
{
}

uint64_t sub_1000EA870()
{
  return type metadata accessor for NearbySharingInteractionViewController(0);
}

void *initializeBufferWithCopyOfBuffer for NearbySharingInteractionView(void *a1, void *a2)
{
  id v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for NearbySharingInteractionView(uint64_t a1)
{
}

void *assignWithCopy for NearbySharingInteractionView(void *a1, void *a2)
{
  *a1 = *a2;
  id v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for NearbySharingInteractionView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionView()
{
  return &type metadata for NearbySharingInteractionView;
}

uint64_t sub_1000EA934()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for NameDrop(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100184BA0);
}

unint64_t sub_1000EA970()
{
  unint64_t result = qword_100184A78;
  if (!qword_100184A78)
  {
    sub_10000B100(&qword_100184A60);
    sub_1000EAE6C((unint64_t *)&unk_100184A80, (void (*)(uint64_t))type metadata accessor for NameDrop);
    sub_10000F288(&qword_100185CA0, &qword_100184A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184A78);
  }
  return result;
}

uint64_t sub_1000EAA40()
{
  return sub_1000EEA3C(&qword_100184AA0, &qword_100184A98, (void (*)(void))sub_1000EAA7C, (void (*)(void))sub_1000EAB1C);
}

unint64_t sub_1000EAA7C()
{
  unint64_t result = qword_100184AA8;
  if (!qword_100184AA8)
  {
    sub_10000B100((uint64_t *)&unk_100184AB0);
    sub_1000529F0();
    sub_10000F288(&qword_100185CA0, &qword_100184A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184AA8);
  }
  return result;
}

unint64_t sub_1000EAB1C()
{
  unint64_t result = qword_100184AC0;
  if (!qword_100184AC0)
  {
    sub_10000B100(&qword_100184AC8);
    sub_1000EABBC();
    sub_10000F288(&qword_100185CA0, &qword_100184A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184AC0);
  }
  return result;
}

unint64_t sub_1000EABBC()
{
  unint64_t result = qword_100184AD0;
  if (!qword_100184AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184AD0);
  }
  return result;
}

unint64_t sub_1000EAC10()
{
  unint64_t result = qword_100184AD8;
  if (!qword_100184AD8)
  {
    sub_10000B100(&qword_100184A58);
    sub_1000EA970();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184AD8);
  }
  return result;
}

unint64_t sub_1000EAC8C()
{
  unint64_t result = qword_100184AE0;
  if (!qword_100184AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184AE0);
  }
  return result;
}

uint64_t sub_1000EACE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000EAD48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000EADA8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000EAE04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000EAE3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EAE6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EAEB4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EAEEC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000EAEFC()
{
  uint64_t v1 = *(void *)(sub_10000AA4C(&qword_100184B10) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  if (*(void *)(v0 + v6)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v6 + 16, v2 | 7);
}

uint64_t sub_1000EB054(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100184B10) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v7);
  char v12 = *(unsigned char *)(v1 + v7 + 8);
  uint64_t v13 = (uint64_t *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  int v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  void *v16 = v2;
  v16[1] = sub_100013ABC;
  return sub_1000E9064(a1, v8, v9, v10, v11, v12, v14, v15);
}

uint64_t sub_1000EB1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000EB1B8()
{
  return swift_release();
}

uint64_t sub_1000EB1C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000EB1F8()
{
  sub_1000E9FB0(*(void **)(v0 + 16));
}

uint64_t sub_1000EB200()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000EB248(int a1)
{
  sub_1000EA010(a1, *(id *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000EB254@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EB280()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000EB2AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EB2D8()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1000EB304@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000EB338()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000EB368@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EB394()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_1000EB3C0()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000EB3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EB410(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000EB410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1000EB4E0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void, __n128), unint64_t *a6, void (*a7)(uint64_t), uint8_t *a8, uint64_t (*a9)(void), uint64_t a10, unint64_t *a11)
{
  uint64_t v107 = a7;
  uint64_t v108 = a8;
  uint64_t v106 = a6;
  id v96 = a3;
  uint64_t v94 = a2;
  uint64_t v109 = a1;
  uint64_t v13 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v95 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v15 - 8);
  uint64_t v93 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v92 = (char *)&v90 - v18;
  __chkstk_darwin(v19);
  uint64_t v99 = (char *)&v90 - v20;
  uint64_t v21 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v21 - 8);
  uint64_t v98 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v104 = *(char **)(v23 - 8);
  uint64_t v105 = v23;
  __chkstk_darwin(v23);
  uint64_t v103 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v102 = (char *)&v90 - v26;
  uint64_t v101 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v28 = (char *)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v97 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v90 - v33;
  uint64_t v35 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v91 = (char *)&v90 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v37;
  __n128 v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v90 - v40;
  v112[3] = a5(0, v39);
  v112[4] = sub_1000EAE6C(v106, v107);
  uint64_t v42 = sub_1000636E4(v112);
  sub_1000EACE0(v109, (uint64_t)v42, a9);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v30 + 88))(v34, v29) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v34, v29);
    uint64_t v109 = v36;
    uint64_t v43 = *(void (**)(uint64_t))(v36 + 32);
    uint64_t v108 = (uint8_t *)(v36 + 32);
    ((void (*)(char *, char *, uint64_t))v43)(v41, v34, v35);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v44 = v102;
    SFNearbySharingInteraction.interactionType.getter();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v28, v101);
    long long v46 = v104;
    uint64_t v45 = v105;
    id v47 = v103;
    (*((void (**)(char *, void, uint64_t))v104 + 13))(v103, enum case for SFNearbySharingInteraction.InteractionType.connect(_:), v105);
    char v48 = static SFNearbySharingInteraction.InteractionType.== infix(_:_:)();
    uint64_t v49 = (void (*)(char *, uint64_t))*((void *)v46 + 1);
    v49(v47, v45);
    v49(v44, v45);
    if (v48)
    {
      uint64_t v50 = (uint64_t)v98;
      SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter();
      uint64_t v51 = type metadata accessor for UUID();
      int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51);
      sub_10000F394(v50, &qword_100180580);
      if (v52 == 1)
      {
        if (qword_10017F7A8 != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        sub_10000B150(v53, (uint64_t)qword_10018D128);
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        BOOL v56 = os_log_type_enabled(v54, v55);
        uint64_t v57 = v109;
        if (v56)
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Can not share content: we don't have a resolved endpoint.", v58, 2u);
          swift_slowDealloc();
        }

        goto LABEL_17;
      }
    }
    uint64_t v107 = v43;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v71 = (uint64_t)v99;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v72 = type metadata accessor for ContinuousClock.Instant();
    uint64_t v73 = *(void *)(v72 - 8);
    int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72);
    sub_10000F394(v71, &qword_100184B10);
    if (v74 != 1)
    {
      uint64_t v57 = v109;
LABEL_17:
      (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v35);
      return sub_10000AB98((uint64_t)v112);
    }
    uint64_t v105 = a10;
    uint64_t v106 = a11;
    uint64_t v75 = (uint64_t)v92;
    static ContinuousClock.Instant.now.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v75, 0, 1, v72);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v76 = v35;
    sub_10000F330(v75, v93, &qword_100184B10);
    id v77 = a4;
    static Published.subscript.setter();
    sub_10000F394(v75, &qword_100184B10);
    uint64_t v78 = type metadata accessor for TaskPriority();
    uint64_t v79 = (uint64_t)v95;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v95, 1, 1, v78);
    sub_10000AAF0((uint64_t)v112, (uint64_t)v111);
    sub_10000AAF0(v94, (uint64_t)v110);
    uint64_t v80 = v109;
    uint64_t v81 = v91;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v91, v41, v76);
    type metadata accessor for MainActor();
    uint64_t v104 = v41;
    id v82 = v96;
    id v83 = v96;
    id v84 = v77;
    uint64_t v85 = static MainActor.shared.getter();
    unint64_t v86 = (*(unsigned __int8 *)(v80 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
    unint64_t v87 = (v90 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = v85;
    v88[3] = &protocol witness table for MainActor;
    sub_100063848(v111, (uint64_t)(v88 + 4));
    sub_100063848(v110, (uint64_t)(v88 + 9));
    v88[14] = v82;
    ((void (*)(char *, char *, uint64_t))v107)((char *)v88 + v86, v81, v76);
    *(void *)((char *)v88 + v87) = v84;
    sub_10010C15C(v79, (uint64_t)v106, (uint64_t)v88);
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v104, v76);
  }
  else
  {
    uint64_t v59 = a4;
    uint64_t v60 = *(void (**)(uint64_t))(v30 + 8);
    ((void (*)(char *, uint64_t))v60)(v34, v29);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10000B150(v61, (uint64_t)qword_10018D128);
    id v62 = v59;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v107 = v60;
      char v66 = (uint8_t *)v65;
      uint64_t v109 = swift_slowAlloc();
      *(void *)&v111[0] = v109;
      *(_DWORD *)char v66 = 136315138;
      uint64_t v108 = v66 + 4;
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v67 = v97;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_1000EAE6C((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v70 = v69;
      ((void (*)(char *, uint64_t))v107)(v67, v29);
      *(void *)&v110[0] = sub_100047F98(v68, v70, (uint64_t *)v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Can not share content as the state of the interaction is not connected: %s", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return sub_10000AB98((uint64_t)v112);
}

uint64_t sub_1000EC128(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000EC190()
{
  unint64_t result = qword_100183E18;
  if (!qword_100183E18)
  {
    sub_10001FB40(255, (unint64_t *)&qword_1001815D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183E18);
  }
  return result;
}

uint64_t sub_1000EC1F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000EC230()
{
}

uint64_t sub_1000EC238()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unsigned char *storeEnumTagSinglePayload for PresentingSheetSelection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EC33CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentingSheetSelection()
{
  return &type metadata for PresentingSheetSelection;
}

uint64_t *sub_1000EC374(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void sub_1000EC444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_1000EC4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1000EC538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1000EC5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000EC63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000EC6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EC6D4);
}

uint64_t sub_1000EC6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF92C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000EC6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EC700);
}

uint64_t sub_1000EC700(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000EFA1C(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000EC718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EFB00(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t destroy for ShareableContentSuggestion(uint64_t a1)
{
  sub_10005E778(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_10000AB98(a1 + 120);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  unint64_t v9 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 104);
  int v20 = *(_DWORD *)(a2 + 112);
  id v10 = v4;
  sub_10005EAC4(v18, v17, v16, v15, v5, v6, v7, v14, v8, v9);
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v19;
  *(_DWORD *)(a1 + 112) = v20;
  long long v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 120, a2 + 120);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  unint64_t v26 = *(void *)(a2 + 88);
  uint64_t v27 = *(void *)(a2 + 96);
  uint64_t v28 = *(void *)(a2 + 104);
  int v29 = *(_DWORD *)(a2 + 112);
  sub_10005EAC4(v7, v8, v9, v10, v11, v12, v13, v14, v25, v26);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  long long v23 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(_DWORD *)(a1 + 112) = v29;
  sub_10005E778(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((unint64_t *)&v23 + 1));
  sub_10000F684((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ShareableContentSuggestion(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  long long v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  int v6 = *(_DWORD *)(a2 + 112);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v16;
  long long v17 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v17;
  long long v18 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v18;
  *(_DWORD *)(a1 + 112) = v6;
  sub_10005E778(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((unint64_t *)&v15 + 1));
  sub_10000AB98(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v19 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_release();
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareableContentSuggestion(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareableContentSuggestion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentSuggestion()
{
  return &type metadata for ShareableContentSuggestion;
}

unint64_t sub_1000ECD94()
{
  unint64_t result = qword_100184BD8;
  if (!qword_100184BD8)
  {
    sub_10000B100(&qword_100184A40);
    sub_1000ECE34();
    sub_10000F288(&qword_100184C10, &qword_100184A48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184BD8);
  }
  return result;
}

unint64_t sub_1000ECE34()
{
  unint64_t result = qword_100184BE0;
  if (!qword_100184BE0)
  {
    sub_10000B100(&qword_100184A38);
    sub_1000ECEB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184BE0);
  }
  return result;
}

unint64_t sub_1000ECEB0()
{
  unint64_t result = qword_100184BE8;
  if (!qword_100184BE8)
  {
    sub_10000B100(&qword_100184A30);
    sub_1000ECF5C();
    sub_1000EAE6C(&qword_100184C08, (void (*)(uint64_t))type metadata accessor for LumaTrackingViewModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184BE8);
  }
  return result;
}

unint64_t sub_1000ECF5C()
{
  unint64_t result = qword_100184BF0;
  if (!qword_100184BF0)
  {
    sub_10000B100(&qword_100184A28);
    sub_1000EEA3C(&qword_100184BF8, &qword_100184C00, (void (*)(void))sub_1000EAA40, (void (*)(void))sub_1000EAC10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184BF0);
  }
  return result;
}

void *sub_1000ED008()
{
  return &protocol witness table for Int;
}

unint64_t sub_1000ED018()
{
  unint64_t result = qword_100184C18;
  if (!qword_100184C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184C18);
  }
  return result;
}

uint64_t sub_1000ED06C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ED088()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000ED0A4()
{
  uint64_t v1 = (int *)(type metadata accessor for NameDrop(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000ED194()
{
  return sub_100058548();
}

uint64_t sub_1000ED1F8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000ED21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EB410(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000ED260@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E6608(a1, v2 + 16, a2);
}

unint64_t sub_1000ED268()
{
  unint64_t result = qword_100184C78;
  if (!qword_100184C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184C78);
  }
  return result;
}

unint64_t sub_1000ED2BC()
{
  unint64_t result = qword_100184C80;
  if (!qword_100184C80)
  {
    sub_10000B100(&qword_100184C68);
    sub_1000ED394(&qword_100184C88, (uint64_t *)&unk_100184C90, (void (*)(void))sub_1000A28A4);
    sub_10000F288(&qword_100184CA0, &qword_100184CA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184C80);
  }
  return result;
}

uint64_t sub_1000ED394(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ED400@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6AF8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000ED40C()
{
  return sub_1000E70A4();
}

uint64_t sub_1000ED420()
{
  return sub_1000DD4D8(v0 + 16);
}

unint64_t sub_1000ED428()
{
  unint64_t result = qword_100184D30;
  if (!qword_100184D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D30);
  }
  return result;
}

uint64_t sub_1000ED480()
{
  return sub_1000E6314();
}

uint64_t sub_1000ED488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E636C(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_1000ED490()
{
  unint64_t result = qword_100184D48;
  if (!qword_100184D48)
  {
    sub_10000B100(&qword_100184D18);
    sub_1000ED50C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D48);
  }
  return result;
}

unint64_t sub_1000ED50C()
{
  unint64_t result = qword_100184D50;
  if (!qword_100184D50)
  {
    sub_10000B100(&qword_100184D10);
    sub_1000ED588();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D50);
  }
  return result;
}

unint64_t sub_1000ED588()
{
  unint64_t result = qword_100184D58;
  if (!qword_100184D58)
  {
    sub_10000B100(&qword_100184D08);
    sub_1000ED604();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D58);
  }
  return result;
}

unint64_t sub_1000ED604()
{
  unint64_t result = qword_100184D60;
  if (!qword_100184D60)
  {
    sub_10000B100(&qword_100184D00);
    sub_10000F288(&qword_100184D68, &qword_100184CF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D60);
  }
  return result;
}

unint64_t sub_1000ED6A4()
{
  unint64_t result = qword_100184D70;
  if (!qword_100184D70)
  {
    sub_10000B100(&qword_100184D40);
    sub_1000ED720();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D70);
  }
  return result;
}

unint64_t sub_1000ED720()
{
  unint64_t result = qword_100184D78;
  if (!qword_100184D78)
  {
    sub_10000B100(&qword_100184D80);
    sub_1000ED79C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D78);
  }
  return result;
}

unint64_t sub_1000ED79C()
{
  unint64_t result = qword_100184D88;
  if (!qword_100184D88)
  {
    sub_10000B100(&qword_100184D90);
    sub_10000F288(&qword_100184D98, &qword_100184DA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184D88);
  }
  return result;
}

uint64_t sub_1000ED844(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000ED87C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000ED8B0()
{
  return sub_1000E36BC(v0 + 16);
}

uint64_t sub_1000ED8B8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000AB54(a1, a1[3]);
  uint64_t result = sub_10000FA78();
  *a2 = result;
  return result;
}

uint64_t sub_1000ED908@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E60C8(a1, v2 + 16, a2);
}

uint64_t type metadata accessor for ShareableContentActionButton(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100185388);
}

unint64_t sub_1000ED930()
{
  unint64_t result = qword_100184F88;
  if (!qword_100184F88)
  {
    sub_10000B100(&qword_100184E10);
    sub_10000F288(&qword_100184F90, &qword_100184DF8);
    sub_1000ED394(&qword_100184F98, &qword_100184DE8, (void (*)(void))sub_1000EDA08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184F88);
  }
  return result;
}

uint64_t sub_1000EDA08()
{
  return sub_1000ED394(&qword_100184FA0, &qword_100184FA8, (void (*)(void))sub_1000EDA44);
}

unint64_t sub_1000EDA44()
{
  unint64_t result = qword_100184FB0;
  if (!qword_100184FB0)
  {
    sub_10000B100(&qword_100184FB8);
    sub_1000EDAE4();
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184FB0);
  }
  return result;
}

unint64_t sub_1000EDAE4()
{
  unint64_t result = qword_100184FC0;
  if (!qword_100184FC0)
  {
    sub_10000B100(&qword_100184FC8);
    sub_1000EE014(&qword_100184FD0, &qword_100184FD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184FC0);
  }
  return result;
}

unint64_t sub_1000EDB78()
{
  unint64_t result = qword_100184FF0;
  if (!qword_100184FF0)
  {
    sub_10000B100(&qword_100184DD8);
    sub_1000EDC18();
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184FF0);
  }
  return result;
}

unint64_t sub_1000EDC18()
{
  unint64_t result = qword_100184FF8;
  if (!qword_100184FF8)
  {
    sub_10000B100(&qword_100184DD0);
    sub_1000EDC94();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184FF8);
  }
  return result;
}

unint64_t sub_1000EDC94()
{
  unint64_t result = qword_100185000;
  if (!qword_100185000)
  {
    sub_10000B100(&qword_100184DC8);
    sub_10000F288(&qword_100185008, &qword_100184DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185000);
  }
  return result;
}

uint64_t sub_1000EDD34(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100055180(result, a2, a3 & 1);
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000EDD84(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100054D14(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000EDDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E56AC(a1, v2 + 16, a2);
}

uint64_t sub_1000EDDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E4A04(a1, v2 + 16, a2);
}

unint64_t sub_1000EDDEC()
{
  unint64_t result = qword_100185048;
  if (!qword_100185048)
  {
    sub_10000B100(&qword_100185050);
    sub_1000EDE8C();
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185048);
  }
  return result;
}

unint64_t sub_1000EDE8C()
{
  unint64_t result = qword_100185058;
  if (!qword_100185058)
  {
    sub_10000B100(&qword_100185060);
    sub_1000EDF08();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185058);
  }
  return result;
}

unint64_t sub_1000EDF08()
{
  unint64_t result = qword_100185068;
  if (!qword_100185068)
  {
    sub_10000B100(&qword_100185070);
    sub_1000EDF84();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185068);
  }
  return result;
}

unint64_t sub_1000EDF84()
{
  unint64_t result = qword_100185078;
  if (!qword_100185078)
  {
    sub_10000B100(&qword_100185080);
    sub_1000EE014(&qword_100185088, (uint64_t *)&unk_100185090);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185078);
  }
  return result;
}

uint64_t sub_1000EE014(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    sub_1000EAE6C(&qword_100184F80, (void (*)(uint64_t))type metadata accessor for ShareableContentActionButton);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EE0B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EE0E4()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1000EE110@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EE13C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000EE164@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000EE198()
{
  return EnvironmentValues.lineLimit.setter();
}

unint64_t sub_1000EE1C8()
{
  unint64_t result = qword_1001850C0;
  if (!qword_1001850C0)
  {
    sub_10000B100(&qword_100184E80);
    sub_1000EE274();
    sub_1000EAE6C(&qword_100185138, (void (*)(uint64_t))type metadata accessor for VibrancyEffectModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850C0);
  }
  return result;
}

unint64_t sub_1000EE274()
{
  unint64_t result = qword_1001850C8;
  if (!qword_1001850C8)
  {
    sub_10000B100(&qword_100184E78);
    sub_1000EE314();
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850C8);
  }
  return result;
}

unint64_t sub_1000EE314()
{
  unint64_t result = qword_1001850D0;
  if (!qword_1001850D0)
  {
    sub_10000B100(&qword_100184E70);
    sub_1000EE390();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850D0);
  }
  return result;
}

unint64_t sub_1000EE390()
{
  unint64_t result = qword_1001850D8;
  if (!qword_1001850D8)
  {
    sub_10000B100(&qword_100184E68);
    sub_1000EE40C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850D8);
  }
  return result;
}

unint64_t sub_1000EE40C()
{
  unint64_t result = qword_1001850E0;
  if (!qword_1001850E0)
  {
    sub_10000B100(&qword_100184E60);
    sub_1000EE488();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850E0);
  }
  return result;
}

unint64_t sub_1000EE488()
{
  unint64_t result = qword_1001850E8;
  if (!qword_1001850E8)
  {
    sub_10000B100(&qword_100184E58);
    sub_1000EE528();
    sub_10000F288(&qword_100185128, &qword_100185130);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850E8);
  }
  return result;
}

unint64_t sub_1000EE528()
{
  unint64_t result = qword_1001850F0;
  if (!qword_1001850F0)
  {
    sub_10000B100(&qword_100184E50);
    sub_1000EE5C8();
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850F0);
  }
  return result;
}

unint64_t sub_1000EE5C8()
{
  unint64_t result = qword_1001850F8;
  if (!qword_1001850F8)
  {
    sub_10000B100(&qword_100184E48);
    sub_10000F288((unint64_t *)&unk_100185100, &qword_100184E40);
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850F8);
  }
  return result;
}

uint64_t sub_1000EE698()
{
  return sub_1000E3CE0();
}

uint64_t sub_1000EE6A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3D38(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000EE6A8()
{
  unint64_t result = qword_100185160;
  if (!qword_100185160)
  {
    sub_10000B100(&qword_100185158);
    sub_1000EE754();
    sub_1000EAE6C(&qword_100185138, (void (*)(uint64_t))type metadata accessor for VibrancyEffectModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185160);
  }
  return result;
}

unint64_t sub_1000EE754()
{
  unint64_t result = qword_100185168;
  if (!qword_100185168)
  {
    sub_10000B100(&qword_100185170);
    sub_1000EE7F4();
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185168);
  }
  return result;
}

unint64_t sub_1000EE7F4()
{
  unint64_t result = qword_100185178;
  if (!qword_100185178)
  {
    sub_10000B100(&qword_100185180);
    sub_1000EE870();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185178);
  }
  return result;
}

unint64_t sub_1000EE870()
{
  unint64_t result = qword_100185188;
  if (!qword_100185188)
  {
    sub_10000B100(&qword_100185190);
    sub_1000EE8EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185188);
  }
  return result;
}

unint64_t sub_1000EE8EC()
{
  unint64_t result = qword_100185198;
  if (!qword_100185198)
  {
    sub_10000B100(&qword_1001851A0);
    sub_1000EE98C();
    sub_10000F288(&qword_1001851C8, &qword_1001851D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185198);
  }
  return result;
}

unint64_t sub_1000EE98C()
{
  unint64_t result = qword_1001851A8;
  if (!qword_1001851A8)
  {
    sub_10000B100(&qword_1001851B0);
    sub_10000F288(&qword_1001851B8, &qword_1001851C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001851A8);
  }
  return result;
}

uint64_t sub_1000EEA2C@<X0>(char *a1@<X8>)
{
  return sub_1000E3760(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000EEA34@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000E3C3C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000EEA3C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EEAC4()
{
  unint64_t result = qword_100185250;
  if (!qword_100185250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185250);
  }
  return result;
}

unint64_t sub_1000EEB18()
{
  unint64_t result = qword_100185258;
  if (!qword_100185258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185258);
  }
  return result;
}

uint64_t sub_1000EEB6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EEB98()
{
  return EnvironmentValues.tintColor.setter();
}

unint64_t sub_1000EEBC4()
{
  unint64_t result = qword_100185270;
  if (!qword_100185270)
  {
    sub_10000B100(&qword_100184ED0);
    sub_10000F288(&qword_100185278, &qword_100184EB8);
    sub_1000EEC64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185270);
  }
  return result;
}

unint64_t sub_1000EEC64()
{
  unint64_t result = qword_100185280;
  if (!qword_100185280)
  {
    sub_10000B100(&qword_100184EC8);
    sub_1000EAE6C(&qword_100185138, (void (*)(uint64_t))type metadata accessor for VibrancyEffectModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185280);
  }
  return result;
}

uint64_t sub_1000EED14()
{
  return sub_1000E365C(v0 + 16);
}

unint64_t sub_1000EED1C()
{
  unint64_t result = qword_100185298;
  if (!qword_100185298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185298);
  }
  return result;
}

uint64_t sub_1000EED74()
{
  return sub_1000E3B90();
}

uint64_t sub_1000EED80()
{
  return sub_1000E3BE8();
}

uint64_t sub_1000EED88()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000EEDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EB410(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000EEDEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000EEE18()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000EEE44()
{
  uint64_t v1 = (int *)(type metadata accessor for StartCollaborationAction(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 248) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  sub_10005E778(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000AB98(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000EEFAC()
{
  return sub_1000EF174(type metadata accessor for StartCollaborationAction, sub_1000E54F8);
}

uint64_t sub_1000EEFEC()
{
  uint64_t v1 = *(void *)(type metadata accessor for SendOverAirDropAction(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 248) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  sub_10005E778(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000AB98(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000EF148()
{
  return sub_1000EF174(type metadata accessor for SendOverAirDropAction, (uint64_t (*)(uint64_t, uint64_t))sub_1000E5FF8);
}

uint64_t sub_1000EF174(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 248) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v2 + 16, v4);
}

uint64_t sub_1000EF1F8()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 120) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  sub_10000AB98(v0 + 32);
  sub_10000AB98(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000EF2F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = (uint64_t)(v1 + 9);
  uint64_t v10 = v1[14];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100013ABC;
  return sub_10005DA84(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000EF43C()
{
  sub_10005E778(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000AB98(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000AB98(v0 + 248);

  return _swift_deallocObject(v0, 288, 7);
}

void sub_1000EF4E0()
{
  sub_1000E628C(v0 + 16, (void *)(v0 + 248));
}

uint64_t sub_1000EF4F0()
{
  sub_10005E778(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10000AB98(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 248, 7);
}

void sub_1000EF58C()
{
  sub_1000DD914(v0 + 16);
}

uint64_t *sub_1000EF594(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000EF668(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_1000EF6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t sub_1000EF768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000EF7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000EF878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1000EF900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EF914);
}

uint64_t sub_1000EF914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF92C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_1000EF92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000EF9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EFA04);
}

uint64_t sub_1000EFA04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000EFA1C(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_1000EFA1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000EFADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EFB00(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_1000EFB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendCopyButtonView()
{
  return &type metadata for SendCopyButtonView;
}

ValueMetadata *type metadata accessor for CollaborateButtonView()
{
  return &type metadata for CollaborateButtonView;
}

void destroy for ShareableContentPreview(uint64_t a1)
{
  sub_10000AB98(a1);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for ShareableContentPreview(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for ShareableContentPreview(uint64_t *a1, uint64_t *a2)
{
  sub_10000F684(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = (void *)a1[6];
  uint64_t v5 = (void *)a2[6];
  a1[6] = (uint64_t)v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for ShareableContentPreview(uint64_t a1, uint64_t a2)
{
  sub_10000AB98(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  return a1;
}

ValueMetadata *type metadata accessor for ShareableContentPreview()
{
  return &type metadata for ShareableContentPreview;
}

ValueMetadata *type metadata accessor for ContactDetailsHeaderView()
{
  return &type metadata for ContactDetailsHeaderView;
}

unint64_t sub_1000EFD38()
{
  unint64_t result = qword_1001853C0;
  if (!qword_1001853C0)
  {
    sub_10000B100(&qword_100184C48);
    sub_1000EFDD8();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001853C0);
  }
  return result;
}

unint64_t sub_1000EFDD8()
{
  unint64_t result = qword_1001853C8;
  if (!qword_1001853C8)
  {
    sub_10000B100(&qword_100184C30);
    sub_10000F288((unint64_t *)&unk_1001853D0, &qword_100184C28);
    sub_10000F288(&qword_100182388, &qword_100184C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001853C8);
  }
  return result;
}

uint64_t sub_1000EFE9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFF54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFF70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFF8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFFA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFFC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EFFE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for ShareableContentActionButton(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000F00D4()
{
  uint64_t v1 = type metadata accessor for ShareableContentActionButton(0);
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 20)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

uint64_t sub_1000F0140@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D8E9C(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000F0148()
{
  unint64_t result = qword_1001853F8;
  if (!qword_1001853F8)
  {
    sub_10000B100(&qword_1001853F0);
    sub_1000F01E8();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001853F8);
  }
  return result;
}

unint64_t sub_1000F01E8()
{
  unint64_t result = qword_100185400;
  if (!qword_100185400)
  {
    sub_10000B100(&qword_100185408);
    sub_1000F0264();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185400);
  }
  return result;
}

unint64_t sub_1000F0264()
{
  unint64_t result = qword_100185410;
  if (!qword_100185410)
  {
    sub_10000B100(&qword_100185418);
    sub_1000F0304();
    sub_10000F288(&qword_100185440, &qword_100185448);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185410);
  }
  return result;
}

unint64_t sub_1000F0304()
{
  unint64_t result = qword_100185420;
  if (!qword_100185420)
  {
    sub_10000B100(&qword_100185428);
    sub_1000F07A0((unint64_t *)&qword_100185430, &qword_100185438);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185420);
  }
  return result;
}

uint64_t sub_1000F03A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F03E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F0420(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(unsigned char *)(a1 + 88);
  swift_release();
  sub_100054D14(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F048C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_retain();
  sub_100055180(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000F04F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_release();
  sub_100054D14(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000F0564()
{
  unint64_t result = qword_100185490;
  if (!qword_100185490)
  {
    sub_10000B100(&qword_100185488);
    sub_10006DF94();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185490);
  }
  return result;
}

unint64_t sub_1000F05E8()
{
  unint64_t result = qword_100185558;
  if (!qword_100185558)
  {
    sub_10000B100(&qword_100185548);
    sub_1000F0664();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185558);
  }
  return result;
}

unint64_t sub_1000F0664()
{
  unint64_t result = qword_100185560;
  if (!qword_100185560)
  {
    sub_10000B100(&qword_100185540);
    sub_1000F06E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185560);
  }
  return result;
}

unint64_t sub_1000F06E0()
{
  unint64_t result = qword_100185568;
  if (!qword_100185568)
  {
    sub_10000B100(&qword_100185538);
    sub_1000F07A0((unint64_t *)&qword_100185570, &qword_100180D10);
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185568);
  }
  return result;
}

uint64_t sub_1000F07A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F0810()
{
  unint64_t result = qword_100185628;
  if (!qword_100185628)
  {
    sub_10000B100(&qword_1001855C8);
    sub_1000F08B0();
    sub_10000F288((unint64_t *)&unk_100185640, &qword_10017FEC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185628);
  }
  return result;
}

unint64_t sub_1000F08B0()
{
  unint64_t result = qword_100185630;
  if (!qword_100185630)
  {
    sub_10000B100(&qword_1001855C0);
    sub_10000F288(&qword_100182550, &qword_100182558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185630);
  }
  return result;
}

unint64_t sub_1000F0950()
{
  unint64_t result = qword_100185650;
  if (!qword_100185650)
  {
    sub_10000B100(&qword_100185590);
    sub_1000F09F0();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185650);
  }
  return result;
}

unint64_t sub_1000F09F0()
{
  unint64_t result = qword_100185658;
  if (!qword_100185658)
  {
    sub_10000B100(&qword_100185588);
    sub_1000F0A90();
    sub_10000F288((unint64_t *)&unk_100185640, &qword_10017FEC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185658);
  }
  return result;
}

unint64_t sub_1000F0A90()
{
  unint64_t result = qword_100185660;
  if (!qword_100185660)
  {
    sub_10000B100(&qword_100185BB0);
    sub_1000F0B30();
    sub_10000F288(&qword_100185678, &qword_100185BD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185660);
  }
  return result;
}

unint64_t sub_1000F0B30()
{
  unint64_t result = qword_100185668;
  if (!qword_100185668)
  {
    sub_10000B100(&qword_1001852C8);
    sub_10000F288(&qword_100185670, &qword_1001852C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185668);
  }
  return result;
}

uint64_t sub_1000F0BD0()
{
  return sub_10000F288(&qword_100185680, &qword_100185688);
}

unint64_t sub_1000F0C10()
{
  unint64_t result = qword_100185690;
  if (!qword_100185690)
  {
    sub_10000B100(&qword_100185460);
    sub_1000F0CB0();
    sub_10000F288(&qword_1001856C8, &qword_100185458);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185690);
  }
  return result;
}

unint64_t sub_1000F0CB0()
{
  unint64_t result = qword_100185698;
  if (!qword_100185698)
  {
    sub_10000B100(&qword_1001856A0);
    sub_1000F0D2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185698);
  }
  return result;
}

unint64_t sub_1000F0D2C()
{
  unint64_t result = qword_1001856A8;
  if (!qword_1001856A8)
  {
    sub_10000B100(&qword_1001856B0);
    sub_10000F288(&qword_1001856B8, &qword_1001856C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001856A8);
  }
  return result;
}

unint64_t sub_1000F0DD0()
{
  unint64_t result = qword_1001856D0;
  if (!qword_1001856D0)
  {
    sub_10000B100(&qword_100185478);
    sub_10000F288(&qword_1001856D8, &qword_100185468);
    sub_10000F288(&qword_1001851C8, &qword_1001851D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001856D0);
  }
  return result;
}

unint64_t sub_1000F0E98()
{
  unint64_t result = qword_1001856E0;
  if (!qword_1001856E0)
  {
    sub_10000B100(&qword_1001856E8);
    sub_1000F05E8();
    sub_10000F288(&qword_100185580, &qword_100185528);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001856E0);
  }
  return result;
}

uint64_t sub_1000F0F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F10F0(a1, a2, a3, &qword_1001815C0);
}

uint64_t sub_1000F0F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000F394(a1, &qword_1001829C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1000F10F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000F394(a1, &qword_1001829C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10000AA4C(a4);
  return swift_task_create();
}

void sub_1000F1278(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
    sub_10001E76C((unint64_t *)&unk_100183CD0, (unint64_t *)&unk_1001859D0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, "state", v16) == (id)3) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_100031848();
    return;
  }
  __break(1u);
}

uint64_t sub_1000F1554(uint64_t a1, void *aBlock, uint64_t ObjCClassMetadata, uint64_t a4)
{
  uint64_t v6 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  if (v7)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    uint64_t v7 = sub_1000F5120;
    if (!ObjCClassMetadata) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 0;
  if (ObjCClassMetadata) {
LABEL_3:
  }
    ObjCClassMetadata = swift_getObjCClassMetadata();
LABEL_4:
  if (a4) {
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6(v7, v8, ObjCClassMetadata, a4);
  swift_bridgeObjectRelease();
  sub_100030180((uint64_t)v7);

  return swift_release();
}

void sub_1000F165C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000F16CC()
{
  id v1 = [v0 content];
  id v2 = [v1 metadata];

  [v2 _populateMetadataForBackwardCompatibility];
  id v3 = [v0 content];
  id v4 = [v3 metadata];

  id v5 = [v4 title];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_1000F17C0()
{
  return sub_1000F16CC();
}

double sub_1000F17E4@<D0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 content];
  id v4 = [v3 sourceBundleIdentifier];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  sub_10009D58C(v5, v7, (uint64_t)v10);
  long long v8 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v8;
  double result = *(double *)&v11;
  *(_OWORD *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  return result;
}

uint64_t sub_1000F188C()
{
  id v1 = [*v0 itemProviders];
  sub_10001FB40(0, (unint64_t *)&unk_100181CF8);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id sub_1000F18F4()
{
  id v1 = [*v0 metadata];

  return v1;
}

id sub_1000F192C()
{
  id v1 = [*v0 previewImage];

  return v1;
}

void sub_1000F1964(void *a1)
{
  [*v1 setPreviewImage:a1];
}

_UNKNOWN **sub_1000F19AC()
{
  return &off_10016D2D8;
}

uint64_t sub_1000F19B8()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_1000F19D8, 0, 0);
}

uint64_t sub_1000F19D8()
{
  uint64_t v1 = (void *)v0[16];
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000F1AD4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000F1D64;
  v0[13] = &unk_10016D448;
  v0[14] = v2;
  [v1 retrieveShareableContentWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F1AD4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1000F1CF8;
  }
  else {
    uint64_t v2 = sub_1000F1BE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1000F1BE4()
{
  unint64_t v1 = *(void *)(v0 + 120);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    id v4 = 0;
    goto LABEL_9;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v2 = *(id *)(v1 + 32);
  }
  id v3 = v2;
  swift_bridgeObjectRelease();
  id v4 = [objc_allocWithZone((Class)AUISWShareableContent) initWithContent:v3];

LABEL_9:
  unint64_t v6 = *(void (**)(id))(v0 + 8);
  v6(v4);
}

uint64_t sub_1000F1CF8()
{
  swift_willThrow();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F1D64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000AA4C(&qword_100180590);
    uint64_t v5 = swift_allocError();
    *unint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_10001FB40(0, (unint64_t *)&unk_1001858A0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000F1E40(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *v1;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *id v4 = v2;
  v4[1] = sub_1000F1EF0;
  v4[16] = v3;
  return _swift_task_switch(sub_1000F19D8, 0, 0);
}

uint64_t sub_1000F1EF0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_1000F2000()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000F2030@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F504C(v1, a1);
}

uint64_t sub_1000F203C()
{
  return swift_bridgeObjectRetain();
}

void *sub_1000F2044()
{
  uint64_t v1 = *(void **)(v0 + 88);
  id v2 = v1;
  return v1;
}

void sub_1000F206C(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
}

void sub_1000F2098(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100185A20);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = self;
  sub_1000A3DA0((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1000F8FDC;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F2388;
  aBlock[3] = &unk_10016D690;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [v5 currentUserActivityUUIDWithOptions:isa completionHandler:v9];
  _Block_release(v9);
}

uint64_t sub_1000F2290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000AA4C((uint64_t *)&unk_100185A00);
  __chkstk_darwin(v8);
  long long v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v14[1] = a4;
    swift_errorRetain();
    sub_10000AA4C(&qword_100185A20);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    int64_t v13 = &v11[*(int *)(v9 + 48)];
    sub_1000F8DB0(a1, (uint64_t)v11);
    *(void *)int64_t v13 = a2;
    *((void *)v13 + 1) = a3;
    swift_bridgeObjectRetain();
    sub_10000AA4C(&qword_100185A20);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000F2388(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = *(void (**)(char *, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  }
  if (a3)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a3 = v15;
  }
  else
  {
    uint64_t v14 = 0;
  }
  swift_retain();
  id v16 = a4;
  v11(v10, v14, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return sub_10000F394((uint64_t)v10, &qword_100180580);
}

uint64_t sub_1000F2508(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000AA4C(&qword_100180590);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    long long v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_10000F2CC((uint64_t)&v11, v8, &qword_100185A18);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000F25D4(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_1001859F0 + dword_1001859F0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 120) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F2684;
  return v4(v1 + 16);
}

uint64_t sub_1000F2684()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    sub_10000F2CC(v2 + 16, *(void *)(v2 + 112), &qword_1001859F8);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t sub_1000F2790()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1000F27C0()
{
  return &_swiftEmptyArrayStorage;
}

void *sub_1000F27CC()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void sub_1000F27F4(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

uint64_t sub_1000F2820(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return _swift_task_switch(sub_1000F2840, 0, 0);
}

uint64_t sub_1000F2840()
{
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_1000F29E0;
  uint64_t v1 = swift_continuation_init();
  id v2 = [self configurationForDefaultMainDisplayMonitor];
  [v2 setNeedsUserInteractivePriority:1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  v0[14] = sub_1000F9088;
  v0[15] = v3;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_1000F2BC0;
  v0[13] = &unk_10016D6E0;
  uint64_t v4 = _Block_copy(v0 + 10);
  swift_release();
  [v2 setTransitionHandler:v4];
  _Block_release(v4);
  v0[18] = [self monitorWithConfiguration:v2];

  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F29E0()
{
  **(void **)(*(void *)v0 + 136) = *(void *)(*(void *)v0 + 128);
  return _swift_task_switch(sub_1000F2AF0, 0, 0);
}

uint64_t sub_1000F2AF0()
{
  uint64_t v1 = *(void **)(v0 + 144);
  [v1 invalidate];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000F2B64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    **(void **)(*(void *)(a4 + 64) + 40) = a2;
    id v5 = a2;
    _swift_continuation_resume(a4);
  }
}

void sub_1000F2BC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t sub_1000F2C60(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_100185A28 + dword_100185A28);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F2D10;
  return v4(v1 + 16);
}

uint64_t sub_1000F2D10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    sub_10000F2CC(v2 + 16, *(void *)(v2 + 80), &qword_100185A30);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t sub_1000F2E1C@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  sub_1000F5AE8(a1, (uint64_t)v13);
  if (v14 < 0)
  {
    v14 &= ~0x8000000000000000;
    uint64_t v5 = v13[0];
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v5 = v13[4];
    uint64_t v6 = 5;
  }
  id v7 = (void *)v13[v6];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._countAndFlagsBits = 1598309441;
  v8._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v8);
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v9);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
}

uint64_t sub_1000F2F50@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._countAndFlagsBits = 6246228;
  v7._object = (void *)0xE300000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v7);
  id v8 = [a1 metadata];
  if (v8 && (Swift::String v9 = v8, v10 = [v8 title], v9, v10))
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v11 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v13 = v14;
  }
  v15._countAndFlagsBits = v11;
  v15._object = v13;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v17 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 0, 1, v17);
}

uint64_t sub_1000F3190@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F2F50(*(void **)(v1 + 8), a1);
}

uint64_t sub_1000F319C@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + 8) bundleIdentifier];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  sub_10009D58C(v5, v7, (uint64_t)v16);
  uint64_t v9 = v16[0];
  uint64_t v8 = v16[1];
  uint64_t v11 = v16[2];
  uint64_t v10 = v16[3];
  char v12 = v19;
  id v13 = v17;
  uint64_t v20 = v18;
  id v14 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001E9F0((uint64_t)&v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = &_swiftEmptySetSingleton;
  *(unsigned char *)(a1 + 48) = v12;
  return result;
}

void *sub_1000F32A0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void sub_1000F32C8(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t sub_1000F32F4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000F3314, 0, 0);
}

uint64_t sub_1000F3314()
{
  id v1 = [*(id *)(v0 + 16) activeConversations];
  sub_10001FB40(0, (unint64_t *)&unk_1001859D0);
  sub_10001E76C((unint64_t *)&unk_100183CD0, (unint64_t *)&unk_1001859D0);
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000F1278(v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v5 = [v4 activitySessions];
    sub_10001FB40(0, &qword_1001859E0);
    sub_10001E76C(&qword_1001859E8, &qword_1001859E0);
    uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v7 = (void *)sub_10010BF80(v6);
    swift_bridgeObjectRelease();
    if (v7)
    {
      if ([v7 state] == (id)1)
      {
        id v8 = [v7 activity];

        goto LABEL_12;
      }
    }
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B150(v9, (uint64_t)qword_10018D128);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Active conversation does not have any joined SharePlay sessions, returning nil from ActiveSharePlaySessionProvider", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v4 = 0;
  }
  id v8 = 0;
LABEL_12:
  id v13 = *(uint64_t (**)(void *, id, void))(v0 + 8);
  return v13(v4, v8, 0);
}

uint64_t sub_1000F3598(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000F3644;
  v4[2] = v3;
  return _swift_task_switch(sub_1000F3314, 0, 0);
}

uint64_t sub_1000F3644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v10 = *(void **)(v8 + 16);
    *uint64_t v10 = a1;
    v10[1] = a2;
    _OWORD v10[2] = a3;
  }
  os_log_type_t v11 = *(uint64_t (**)(void))(v9 + 8);
  return v11();
}

double sub_1000F3768@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  int v74 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v78 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v72 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v11 = (char *)&v59 - v10;
  __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v59 - v13;
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v59 - v15;
  uint64_t v73 = v16;
  __chkstk_darwin(v17);
  char v19 = (char *)&v59 - v18;
  uint64_t v20 = type metadata accessor for SFProximityHandoff.Content.Item();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v79 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for ProximityHandoffInteractionContent(0);
  uint64_t v23 = *(int *)(v60 + 32);
  uint64_t v62 = a2;
  *(void *)(a2 + v23) = 0;
  id v77 = [objc_allocWithZone((Class)NSItemProvider) init];
  uint64_t v61 = a1;
  uint64_t v24 = SFProximityHandoff.Content.items.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t countAndFlagsBits = 0;
    uint64_t v26 = v5;
    uint64_t v27 = 0;
    unint64_t v90 = v24 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v89 = v21 + 16;
    uint64_t v88 = v21 + 88;
    int v87 = enum case for SFProximityHandoff.Content.Item.url(_:);
    char v66 = (void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v65 = (void (**)(char *, uint64_t))(v21 + 96);
    uint64_t v85 = (void (**)(char *, char *, uint64_t))(v78 + 16);
    unint64_t v86 = (void (**)(char *, char *, uint64_t))(v78 + 32);
    uint64_t v84 = v78 + 8;
    os_log_type_t v64 = (void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v63 = &v94;
    unint64_t v69 = v19;
    uint64_t v68 = v20;
    uint64_t v28 = v79;
    unint64_t v70 = v11;
    uint64_t v67 = v21;
    uint64_t v91 = v24;
    while (v25 <= *(void *)(v24 + 16))
    {
      --v25;
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v28, v90 + *(void *)(v21 + 72) * v25, v20);
      int v29 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v28, v20);
      if (v29 == v87)
      {
        uint64_t v83 = v27;
        (*v65)(v28, v20);
        uint64_t v30 = *v86;
        (*v86)(v19, v28, v7);
        URL._bridgeToObjectiveC()(v31);
        uint64_t v33 = v32;
        id v34 = [v32 _wp_urlByRemovingTrackingInformation];

        uint64_t v35 = v92;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::String_optional v36 = URL.host(percentEncoded:)(0);
        uint64_t v37 = *v85;
        (*v85)(v11, v35, v7);
        uint64_t v82 = v25;
        if (v36.value._object)
        {
          uint64_t countAndFlagsBits = v36.value._countAndFlagsBits;
          object = v36.value._object;
        }
        else
        {
          uint64_t countAndFlagsBits = URL.absoluteString.getter();
          object = v38;
        }
        uint64_t v39 = v78;
        uint64_t v80 = *(void (**)(char *, uint64_t))(v78 + 8);
        v80(v11, v7);
        uint64_t v40 = v71;
        v30(v71, v92, v7);
        uint64_t v41 = v74;
        static UTType.url.getter();
        UTType.identifier.getter();
        uint64_t v42 = v7;
        (*v64)(v41, v75);
        uint64_t v43 = v39;
        NSString v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v2 = v72;
        v37(v72, v40, v7);
        unint64_t v45 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
        uint64_t v46 = swift_allocObject();
        v30((char *)(v46 + v45), v2, v42);
        *(void *)&long long v95 = sub_1000F50CC;
        *((void *)&v95 + 1) = v46;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v94 = sub_1000F1554;
        *((void *)&v94 + 1) = &unk_10016D3D0;
        id v47 = _Block_copy(&aBlock);
        swift_release();
        [v77 registerItemForTypeIdentifier:v44 loadHandler:v47];
        char v48 = v47;
        uint64_t v7 = v42;
        os_log_type_t v11 = v70;
        _Block_release(v48);

        swift_bridgeObjectRelease();
        uint64_t v49 = v80;
        v80(v40, v7);
        char v19 = v69;
        v49(v69, v7);
        uint64_t v27 = (uint64_t)object;
        uint64_t v25 = v82;
        uint64_t v20 = v68;
        uint64_t v21 = v67;
        uint64_t v28 = v79;
        uint64_t v24 = v91;
        if (!v82)
        {
LABEL_10:
          swift_bridgeObjectRelease();
          uint64_t v20 = countAndFlagsBits;
          goto LABEL_11;
        }
      }
      else
      {
        (*v66)(v28, v20);
        uint64_t v24 = v91;
        if (!v25) {
          goto LABEL_10;
        }
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
  uint64_t v27 = 0;
LABEL_11:
  uint64_t v21 = type metadata accessor for SFProximityHandoff.Content();
  os_log_type_t v11 = *(char **)(v21 - 8);
  uint64_t v7 = v62;
  uint64_t v28 = v61;
  (*((void (**)(uint64_t, char *, uint64_t))v11 + 2))(v62, v61, v21);
  uint64_t v2 = (char *)v60;
  id v50 = v77;
  *(void *)(v7 + *(int *)(v60 + 20)) = v77;
  char v19 = (char *)v50;
  uint64_t v51 = SFProximityHandoff.Content.title.getter();
  if (!v52)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  uint64_t v20 = v51;
  uint64_t v27 = v52;
LABEL_15:
  uint64_t v53 = (uint64_t *)(v7 + *((int *)v2 + 6));
  *uint64_t v53 = v20;
  v53[1] = v27;
  uint64_t v54 = SFProximityHandoff.Content.bundleIdentifier.getter();
  sub_10009D58C(v54, v55, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();

  (*((void (**)(char *, uint64_t))v11 + 1))(v28, v21);
  uint64_t v56 = v7 + *((int *)v2 + 7);
  long long v57 = v94;
  *(_OWORD *)uint64_t v56 = aBlock;
  *(_OWORD *)(v56 + 16) = v57;
  double result = *(double *)&v95;
  *(_OWORD *)(v56 + 32) = v95;
  *(unsigned char *)(v56 + 48) = v96;
  return result;
}

uint64_t sub_1000F3FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000F3FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F504C(v2 + *(int *)(a1 + 28), a2);
}

uint64_t sub_1000F4008(uint64_t a1)
{
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10012A280;
  uint64_t v4 = *(void **)(v1 + *(int *)(a1 + 20));
  *(void *)(v3 + 32) = v4;
  uint64_t v7 = v3;
  specialized Array._endMutation()();
  id v5 = v4;
  return v7;
}

void *sub_1000F4080(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + *(int *)(a1 + 32));
  id v3 = v2;
  return v2;
}

void sub_1000F40AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 32);

  *(void *)(v2 + v4) = a1;
}

uint64_t sub_1000F40E4()
{
  uint64_t v1 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider____lazy_storage___shareableContentTask;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider____lazy_storage___shareableContentTask))
  {
    uint64_t v5 = *(void *)(v0
                   + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider____lazy_storage___shareableContentTask);
  }
  else
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v7 = sub_1000F8E18(&qword_100185868, (void (*)(uint64_t))type metadata accessor for ProximityHandoffInteractionContentProvider);
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = v0;
    v8[3] = v7;
    v8[4] = v0;
    swift_retain_n();
    uint64_t v5 = sub_1000F10F0((uint64_t)v3, (uint64_t)&unk_100185870, (uint64_t)v8, &qword_100183908);
    *(void *)(v0 + v4) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v5;
}

uint64_t sub_1000F4260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for SFProximityHandoff.Content();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  sub_10000AA4C(&qword_100183908);
  v4[7] = swift_task_alloc();
  uint64_t v6 = sub_10000AA4C(&qword_1001838E0);
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v7 = sub_10000AA4C(&qword_100185880);
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider_stream;
  v4[13] = v8;
  v4[14] = v9;
  return _swift_task_switch(sub_1000F4418, 0, 0);
}

uint64_t sub_1000F4418()
{
  (*(void (**)(void, void, void))(v0[9] + 16))(v0[10], v0[3] + v0[14], v0[8]);
  sub_10000F288(&qword_100185888, &qword_1001838E0);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v1 = sub_10000F288(&qword_100185890, &qword_100185880);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[15] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000F4558;
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[7];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v3, v1);
}

uint64_t sub_1000F4558()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[13];
    uint64_t v4 = v2[11];
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2[12] + 8);
    return v5(v3, v4);
  }
  else
  {
    return _swift_task_switch(sub_1000F468C, 0, 0);
  }
}

uint64_t sub_1000F468C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v6 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v7 = v0[11];
  if (v4 == 1)
  {
    (*(void (**)(void, void))(v6 + 8))(v0[13], v0[11]);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v9 = v0[6];
    uint64_t v10 = v0[2];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v11(v9, v1, v2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v11(v10, v9, v2);
    uint64_t v8 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[5] + 56))(v0[2], v8, 1, v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000F4800()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider_continuation;
  uint64_t v3 = sub_10000AA4C(&qword_1001838D8);
  AsyncStream.Continuation.finish()();
  uint64_t v4 = v1 + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider_stream;
  uint64_t v5 = sub_10000AA4C(&qword_1001838E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v1);
}

uint64_t sub_1000F48EC()
{
  return type metadata accessor for ProximityHandoffInteractionContentProvider(0);
}

uint64_t type metadata accessor for ProximityHandoffInteractionContentProvider(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100185758);
}

void sub_1000F4914()
{
  sub_1000F4F38(319, &qword_100185770, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_1000F4F38(319, (unint64_t *)&unk_100185778, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000F4A28(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = sub_10000AA4C(&qword_100183908);
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SFProximityHandoff.Content();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000F4B2C, v1, 0);
}

uint64_t sub_1000F4B2C()
{
  uint64_t v1 = sub_1000F40E4();
  v0[10] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  uint64_t v3 = sub_10000AA4C(&qword_100180590);
  *uint64_t v2 = v0;
  v2[1] = sub_1000F4BF0;
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  return Task.value.getter(v4, v1, v5, v3, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000F4BF0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1000F4EC0;
  }
  else {
    uint64_t v4 = sub_1000F4D38;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F4D38()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000F394(v3, &qword_100183908);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v6 = (char *)v0[8];
    uint64_t v5 = v0[9];
    uint64_t v7 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v3, v1);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v6, v5, v1);
    double v8 = sub_1000F3768(v6, v7);
    (*(void (**)(uint64_t, uint64_t, double))(v2 + 8))(v5, v1, v8);
    uint64_t v4 = 0;
  }
  uint64_t v9 = v0[2];
  uint64_t v10 = type metadata accessor for ProximityHandoffInteractionContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, v4, 1, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000F4EC0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000F4F38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

_UNKNOWN **sub_1000F4F98()
{
  return &off_10016D340;
}

uint64_t sub_1000F4FA4()
{
  return v0;
}

uint64_t sub_1000F4FB0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013ABC;
  return sub_1000F4A28(a1);
}

uint64_t sub_1000F504C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for ProximityHandoffInteractionContent(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100185908);
}

uint64_t sub_1000F50D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F50E0()
{
  return swift_release();
}

uint64_t sub_1000F50E8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000F5120(uint64_t a1, uint64_t a2)
{
  sub_1000F165C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000F5128()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F5168(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_1000F4260(a1, v4, v5, v6);
}

ValueMetadata *type metadata accessor for FrontmostAppShareableContentProvider()
{
  return &type metadata for FrontmostAppShareableContentProvider;
}

ValueMetadata *type metadata accessor for UserActivityShareableContentProvider()
{
  return &type metadata for UserActivityShareableContentProvider;
}

ValueMetadata *type metadata accessor for ActiveSharePlaySessionProvider()
{
  return &type metadata for ActiveSharePlaySessionProvider;
}

uint64_t *sub_1000F524C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFProximityHandoff.Content();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = *((void *)v17 + 3);
    *((void *)v16 + 2) = *((void *)v17 + 2);
    *((void *)v16 + 3) = v19;
    uint64_t v21 = (void *)*((void *)v17 + 4);
    uint64_t v20 = *((void *)v17 + 5);
    *((void *)v16 + 4) = v21;
    *((void *)v16 + 5) = v20;
    v16[48] = v17[48];
    uint64_t v22 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v22;
    id v23 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = v21;
    swift_bridgeObjectRetain();
    id v25 = v22;
  }
  return a1;
}

void sub_1000F5398(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SFProximityHandoff.Content();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + a2[8]);
}

uint64_t sub_1000F5458(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  uint64_t v17 = *(void *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = v17;
  uint64_t v18 = *(void *)(v16 + 24);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(void *)(v15 + 24) = v18;
  uint64_t v20 = *(void **)(v16 + 32);
  uint64_t v19 = *(void *)(v16 + 40);
  *(void *)(v15 + 32) = v20;
  *(void *)(v15 + 40) = v19;
  *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
  uint64_t v21 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v21;
  id v22 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = v20;
  swift_bridgeObjectRetain();
  id v24 = v21;
  return a1;
}

uint64_t sub_1000F5554(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)(a2 + v14);
  *(void *)(v15 + 8) = *(void *)(a2 + v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void **)(v15 + 32);
  uint64_t v18 = *(void **)(v16 + 32);
  *(void *)(v15 + 32) = v18;
  id v19 = v18;

  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void **)(a1 + v20);
  id v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  id v23 = v22;

  return a1;
}

uint64_t sub_1000F56A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = (long long *)(a2 + v8);
  *(unsigned char *)(v10 + 48) = *((unsigned char *)v11 + 48);
  long long v12 = v11[2];
  long long v13 = *v11;
  *(_OWORD *)(v10 + 16) = v11[1];
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)uint64_t v10 = v13;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_1000F5758(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a2 + v14 + 8);
  *(void *)uint64_t v15 = *(void *)(a2 + v14);
  *(void *)(v15 + 8) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v16 + 24);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(void *)(v15 + 24) = v18;
  swift_bridgeObjectRelease();
  id v19 = *(void **)(v15 + 32);
  *(void *)(v15 + 32) = *(void *)(v16 + 32);

  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);

  return a1;
}

uint64_t sub_1000F5868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F587C);
}

uint64_t sub_1000F587C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Content();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000F593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F5950);
}

uint64_t sub_1000F5950(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SFProximityHandoff.Content();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000F5A0C()
{
  uint64_t result = type metadata accessor for SFProximityHandoff.Content();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_1000F5AC4()
{
  return &off_10016D4C8;
}

_UNKNOWN **sub_1000F5AD0()
{
  return &off_10016D530;
}

_UNKNOWN **sub_1000F5ADC()
{
  return &off_10016D598;
}

uint64_t sub_1000F5AE8(long long *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F5B44()
{
  sub_10000AA4C(&qword_1001829C0);
  v0[2] = swift_task_alloc();
  uint64_t v1 = sub_10000AA4C(&qword_100185A40);
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000F5C44, 0, 0);
}

uint64_t sub_1000F5C44()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  uint64_t v4 = sub_10001FB40(0, &qword_100185A50);
  *uint64_t v3 = v0;
  v3[1] = sub_1000F5D68;
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[2];
  return withOperationTimeout<A>(_:priority:operation:)(v5, 2000000000000000000, 0, v6, &unk_100185A48, 0, v4);
}

uint64_t sub_1000F5D68()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  sub_10000F394(v1, &qword_1001829C0);
  return _swift_task_switch(sub_1000F5E88, 0, 0);
}

void sub_1000F5E88()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[6], v2);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  uint64_t v5 = v0[4];
  uint64_t v6 = (id *)v0[5];
  uint64_t v7 = v0[3];
  if (v4 != enum case for OperationTimeoutResult.success<A>(_:))
  {
    unint64_t v14 = *(void *)(v5 + 8);
    ((void (*)(void, uint64_t))v14)(v0[5], v7);
    if (qword_10017F7A8 != -1) {
      goto LABEL_50;
    }
    goto LABEL_14;
  }
  uint64_t v38 = v0;
  (*(void (**)(id *, uint64_t))(v5 + 96))(v6, v7);
  id v37 = *v6;
  id v8 = [*v6 elements];
  sub_10001FB40(0, &qword_100185A58);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v0 = _swiftEmptyArrayStorage;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_4:
      if (v10 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v10; ++i)
      {
        if ((v9 & 0xC000000000000001) != 0) {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v12 = *(id *)(v9 + 8 * i + 32);
        }
        uint64_t v13 = v12;
        if ([v12 isUIApplicationElement])
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_51;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_21:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v19 = _swiftEmptyArrayStorage[2];
    if (!v19)
    {
LABEL_52:
      uint64_t v0 = v38;
      uint64_t v35 = v38[4];
      swift_release();

      unint64_t v14 = *(void *)(v35 + 8);
      goto LABEL_53;
    }
    goto LABEL_23;
  }
LABEL_51:
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v19) {
    goto LABEL_52;
  }
LABEL_23:
  unint64_t v14 = 0;
  uint64_t v39 = (void *)v19;
  uint64_t v20 = &selRef_displayName;
  while (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_30:
    id v22 = v21;
    uint64_t v0 = (void *)(v14 + 1);
    if (__OFADD__(v14, 1)) {
      goto LABEL_49;
    }
    id v23 = [v21 v20[13]];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v27 = 0;
    }
    id v28 = [self mainBundle];
    int v29 = v20;
    id v30 = [v28 v20[13]];

    if (v30)
    {
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      if (v27)
      {
        if (!v33) {
          goto LABEL_44;
        }
        if (v25 == v31 && v27 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v34 & 1) == 0) {
            goto LABEL_45;
          }
        }
      }
      else if (v33)
      {
LABEL_44:
        swift_bridgeObjectRelease();
LABEL_45:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_26;
      }
    }
    else if (v27)
    {
      goto LABEL_44;
    }

LABEL_26:
    uint64_t v20 = v29;
    ++v14;
    if (v0 == v39) {
      goto LABEL_52;
    }
  }
  if (v14 < _swiftEmptyArrayStorage[2])
  {
    id v21 = (id)_swiftEmptyArrayStorage[v14 + 4];
    goto LABEL_30;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  swift_once();
LABEL_14:
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000B150(v15, (uint64_t)qword_10018D128);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Timed out retrieving the current display layout, returning nil from FrontmostAppShareableContentProvider", v18, 2u);
    swift_slowDealloc();
  }

LABEL_53:
  ((void (*)(void, void))v14)(v0[6], v0[3]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String_optional v36 = (void (*)(void *))v0[1];
  v36(_swiftEmptyArrayStorage);
}

uint64_t sub_1000F63D8(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000F6468;
  return sub_1000F5B44();
}

uint64_t sub_1000F6468(uint64_t a1)
{
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F6568, 0, 0);
}

uint64_t sub_1000F6568()
{
  uint64_t v34 = v0;
  unint64_t v1 = *(void *)(v0 + 96);
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    if (qword_10017F7A8 == -1) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_32:
      swift_once();
LABEL_23:
      uint64_t v23 = type metadata accessor for Logger();
      sub_10000B150(v23, (uint64_t)qword_10018D128);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v24, "Could not retrieve a frontmost application from the current display layout, returning nil from FrontmostAppShareableContentProvider", v25, 2u);
        swift_slowDealloc();
      }
      goto LABEL_25;
    }
    id v2 = *(id *)(*(void *)(v0 + 96) + 32);
  }
  swift_bridgeObjectRelease();
  id v3 = [v2 bundleIdentifier];
  if (!v3)
  {

    goto LABEL_22;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  swift_bridgeObjectRetain();
  sub_10009D58C(v5, v7, v0 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v0 + 64);
  if (v8)
  {
    swift_bridgeObjectRelease();
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_10018D128);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Frontmost application is a hidden system app, returning nil from FrontmostAppShareableContentProvider", v21, 2u);
      swift_slowDealloc();

      sub_10001E7C4(v0 + 16);
LABEL_26:
      uint64_t v17 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v8 = 0;
      goto LABEL_27;
    }

    sub_10001E7C4(v0 + 16);
LABEL_25:

    goto LABEL_26;
  }
  uint64_t v30 = v5;
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v32 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 56);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B150(v14, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  log = v15;
  os_log_type_t type = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, type))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 72) = sub_100047F98(v30, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Suggesting fallback shareable content with the frontmost app: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = v32;
LABEL_27:
  uint64_t v26 = *(void **)(v0 + 80);
  *uint64_t v26 = v17;
  v26[1] = v9;
  v26[2] = v10;
  v26[3] = v11;
  v26[4] = v12;
  v26[5] = v13;
  v26[6] = v8;
  v26[7] = 0;
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

unint64_t sub_1000F6A40(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100168C78, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void sub_1000F6A8C(void (*a1)(void (*)(void))@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v136 = a3;
  uint64_t v128 = a2;
  uint64_t v135 = a4;
  uint64_t v127 = type metadata accessor for UTType();
  uint64_t v126 = *(void (***)(char *, uint64_t))(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100181540);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v132 = *(void (**)(void (*)(void)))(v9 - 8);
  uint64_t v10 = *((void *)v132 + 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = ((char *)&v122 - v13);
  __chkstk_darwin(v15);
  uint64_t v130 = (char *)&v122 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v122 - v18;
  __chkstk_darwin(v20);
  uint64_t v129 = (char *)&v122 - v21;
  uint64_t v22 = (void *)type metadata accessor for Logger();
  uint64_t countAndFlagsBits = *(v22 - 1);
  uint64_t v134 = (void (*)(char *, NSObject *, uint64_t))v22;
  __chkstk_darwin((void (*)(char *, NSObject *, uint64_t))v22);
  uint64_t v131 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v25 = __chkstk_darwin(v24).n128_u64[0];
  uint64_t v27 = (char *)&v122 - v26;
  uint64_t v137 = a1;
  id v28 = [a1 typeIdentifier:v25];
  if (!v28)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  int v29 = v28;
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  v149._uint64_t countAndFlagsBits = v30;
  v149._object = v32;
  char v33 = sub_1000F6A40(v149);
  uint64_t v34 = v137;
  switch(v33)
  {
    case 1:
    case 2:
      id v35 = [v137 webpageURL];
      if (v35)
      {
        Swift::String_optional v36 = v35;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        id v37 = v132;
        uint64_t v38 = (void (*)(char *, char *, uint64_t))*((void *)v132 + 4);
        v38(v8, v19, v9);
        (*((void (**)(char *, void, uint64_t, uint64_t))v37 + 7))(v8, 0, 1, v9);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v37 + 6))(v8, 1, v9) != 1)
        {
          uint64_t v134 = (void (*)(char *, NSObject *, uint64_t))v38;
          v38(v129, v8, v9);
          URL._bridgeToObjectiveC()(v39);
          uint64_t v41 = v40;
          id v42 = [v40 _wp_urlByRemovingTrackingInformation];

          static URL._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::String_optional v43 = URL.host(percentEncoded:)(0);
          NSString v44 = v132;
          uint64_t countAndFlagsBits = v43.value._countAndFlagsBits;
          object = v43.value._object;
          uint64_t v46 = (void (*)(char *, NSObject *, uint64_t))*((void *)v132 + 2);
          v46(v11, v14, v9);
          uint64_t v131 = (char *)v44 + 16;
          uint64_t v124 = (void (*)(char *, char *, uint64_t))v46;
          if (!v43.value._object)
          {
            uint64_t v47 = URL.absoluteString.getter();
            NSString v44 = v132;
            uint64_t countAndFlagsBits = v47;
            object = v48;
          }
          uint64_t v132 = (void (*)(void (*)(void)))*((void *)v44 + 1);
          ((void (*)(char *, uint64_t))v132)(v11, v9);
          uint64_t v49 = v130;
          v134(v130, v14, v9);
          id v123 = [objc_allocWithZone((Class)NSItemProvider) init];
          id v50 = v125;
          static UTType.url.getter();
          UTType.identifier.getter();
          v126[1](v50, v127);
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v124(v19, v49, v9);
          unint64_t v52 = (*((unsigned __int8 *)v44 + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)v44 + 80);
          uint64_t v53 = swift_allocObject();
          v134((char *)(v53 + v52), v19, v9);
          uint64_t v146 = sub_1000F50CC;
          uint64_t v147 = v53;
          long long aBlock = (char *)_NSConcreteStackBlock;
          uint64_t v143 = 1107296256;
          uint64_t v144 = sub_1000F1554;
          uint64_t v145 = &unk_10016D640;
          uint64_t v54 = _Block_copy(&aBlock);
          swift_release();
          id v55 = v123;
          [v123 registerItemForTypeIdentifier:v51 loadHandler:v54];
          _Block_release(v54);

          uint64_t v56 = v132;
          ((void (*)(char *, uint64_t))v132)(v130, v9);
          ((void (*)(char *, uint64_t))v56)(v129, v9);
          goto LABEL_8;
        }
      }
      else
      {
        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v132 + 7))(v8, 1, 1, v9);
      }
      swift_bridgeObjectRelease();
      sub_10000F394((uint64_t)v8, &qword_100181540);
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      sub_10000B150((uint64_t)v134, (uint64_t)qword_10018D128);
      uint64_t v99 = v34;
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v103 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 138412290;
        long long aBlock = (char *)v99;
        uint64_t v104 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v103 = v99;

        uint64_t v105 = "Unable to get webpage URL from Safari user activity: %@";
        goto LABEL_51;
      }
      goto LABEL_52;
    case 3:
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      int v74 = (void (*)(void, void, void))v134;
      uint64_t v75 = sub_10000B150((uint64_t)v134, (uint64_t)qword_10018D128);
      uint64_t v76 = countAndFlagsBits;
      id v77 = v131;
      (*(void (**)(char *, uint64_t, void))(countAndFlagsBits + 16))(v131, v75, v74);
      uint64_t v78 = v34;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.default.getter();
      uint64_t v80 = &selRef_displayName;
      if (os_log_type_enabled(v14, v79))
      {
        uint64_t v130 = (char *)v75;
        uint64_t v81 = swift_slowAlloc();
        uint64_t v82 = (void *)swift_slowAlloc();
        uint64_t v129 = (char *)swift_slowAlloc();
        long long aBlock = v129;
        *(_DWORD *)uint64_t v81 = 138412546;
        *(void *)&long long v140 = v78;
        uint64_t v8 = v78;
        uint64_t v126 = (void (**)(char *, uint64_t))&v140 + 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v132 = v78;
        uint64_t v127 = (uint64_t)v82;
        *uint64_t v82 = v78;

        *(_WORD *)(v81 + 12) = 2080;
        id v83 = [v8 userInfo];
        if (!v83)
        {
LABEL_62:

          __break(1u);
          goto LABEL_63;
        }
        uint64_t v84 = v83;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v85 = Dictionary.description.getter();
        unint64_t v87 = v86;
        swift_bridgeObjectRelease();
        *(void *)&long long v140 = sub_100047F98(v85, v87, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v79, "Got screenshot user activity %@ -- %s", (uint8_t *)v81, 0x16u);
        sub_10000AA4C(&qword_100180510);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, void (*)(char *, NSObject *, uint64_t)))(countAndFlagsBits + 8))(v131, v134);
        uint64_t v78 = v132;
        uint64_t v80 = &selRef_displayName;
      }
      else
      {

        (*(void (**)(char *, void (*)(char *, NSObject *, uint64_t)))(v76 + 8))(v77, (void (*)(char *, NSObject *, uint64_t))v74);
      }
      strcpy((char *)&v138, "selectedUUIDs");
      HIWORD(v138) = -4864;
      AnyHashable.init<A>(_:)();
      id v106 = [v78 v80[83]];
      if (!v106) {
        goto LABEL_61;
      }
      uint64_t v107 = v106;
      uint64_t v108 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v108 + 16) && (unint64_t v109 = sub_10004887C((uint64_t)&aBlock), (v110 & 1) != 0))
      {
        sub_100048600(*(void *)(v108 + 56) + 32 * v109, (uint64_t)&v138);
      }
      else
      {
        long long v138 = 0u;
        long long v139 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_100050884((uint64_t)&aBlock);
      if (!*((void *)&v139 + 1))
      {
        swift_bridgeObjectRelease();
        sub_10000F394((uint64_t)&v138, &qword_100181560);
        goto LABEL_49;
      }
      sub_1000627DC(&v138, &v140);
      sub_100048600((uint64_t)&v140, (uint64_t)&aBlock);
      sub_10000AA4C(&qword_100185A10);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_10000AB98((uint64_t)&v140);
        goto LABEL_49;
      }
      if (!*(void *)(v138 + 16))
      {
        swift_bridgeObjectRelease();
        sub_10000AB98((uint64_t)&v140);
        swift_bridgeObjectRelease();
LABEL_49:
        uint64_t v99 = v78;
        uint64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = (uint8_t *)swift_slowAlloc();
          uint64_t v118 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v102 = 138412290;
          long long aBlock = (char *)v99;
          uint64_t v104 = v99;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v118 = v99;

          uint64_t v105 = "Unable to get selected uuid {userActivity: %@}";
LABEL_51:
          _os_log_impl((void *)&_mh_execute_header, v100, v101, v105, v102, 0xCu);
          sub_10000AA4C(&qword_100180510);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
LABEL_52:
        }
        goto LABEL_53;
      }
      uint64_t v112 = *(void *)(v138 + 32);
      unint64_t v111 = *(void *)(v138 + 40);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      NSString v113 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v114 = [self itemWithAssetIdentifier:v113];

      if (!v114)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v119 = Logger.logObject.getter();
        os_log_type_t v120 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v119, v120))
        {
          uint64_t v121 = (uint8_t *)swift_slowAlloc();
          long long aBlock = (char *)swift_slowAlloc();
          *(_DWORD *)uint64_t v121 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)&long long v138 = sub_100047F98(v112, v111, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "Failed to get media content item {selectedIdentifier: %s}", v121, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_10000AB98((uint64_t)&v140);
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
      id v115 = [v114 asset];
      id v116 = [v115 filename];

      if (!v116)
      {
LABEL_64:
        __break(1u);
        JUMPOUT(0x1000F7E04);
      }
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v117;

      id v55 = [v114 itemProvider];
      sub_10000AB98((uint64_t)&v140);
LABEL_8:
      sub_10009D58C(v128, v136, (uint64_t)&aBlock);
      uint64_t v58 = (uint64_t)aBlock;
      uint64_t v57 = v143;
      uint64_t v60 = v144;
      uint64_t v59 = (uint64_t)v145;
      uint64_t v62 = v146;
      uint64_t v61 = v147;
      uint64_t v63 = v148;
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_10012A280;
      *(void *)(v64 + 32) = v55;
      *(void *)&long long v140 = v64;
      specialized Array._endMutation()();
      uint64_t v65 = v140;
      id v66 = v55;
      sub_1000F8E60((uint64_t)&aBlock);

      uint64_t v137 = v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001E7C4((uint64_t)&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v67 = v135;
      uint64_t v68 = countAndFlagsBits;
LABEL_54:
      *uint64_t v67 = v58;
      v67[1] = v57;
      v67[2] = (uint64_t)v60;
      v67[3] = v59;
      v67[4] = (uint64_t)v62;
      v67[5] = v61;
      v67[6] = v63;
      v67[7] = (uint64_t)v66;
      v67[8] = v65;
      v67[9] = v68;
      v67[10] = (uint64_t)object;
      v67[11] = 0;
      return;
    case 4:
      swift_bridgeObjectRelease();
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v88 = (void (*)(void, void, void))v134;
      uint64_t v89 = sub_10000B150((uint64_t)v134, (uint64_t)qword_10018D128);
      uint64_t v90 = countAndFlagsBits;
      (*(void (**)(char *, uint64_t, void))(countAndFlagsBits + 16))(v27, v89, v88);
      uint64_t v14 = v34;
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        long long aBlock = (char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 136315138;
        id v94 = [v14 typeIdentifier];
        if (!v94)
        {
LABEL_63:

          __break(1u);
          goto LABEL_64;
        }
        long long v95 = v94;
        uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v98 = v97;

        *(void *)&long long v140 = sub_100047F98(v96, v98, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Dropping non allowlisted user activity with type identifier: %s", v93, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, void (*)(char *, NSObject *, uint64_t)))(countAndFlagsBits + 8))(v27, v134);
      }
      else
      {

        (*(void (**)(char *, void (*)(char *, NSObject *, uint64_t)))(v90 + 8))(v27, (void (*)(char *, NSObject *, uint64_t))v88);
      }
LABEL_53:
      uint64_t v58 = 0;
      uint64_t v57 = 0;
      uint64_t v60 = 0;
      uint64_t v59 = 0;
      uint64_t v62 = 0;
      uint64_t v61 = 0;
      uint64_t v63 = 0;
      id v66 = 0;
      uint64_t v65 = 0;
      uint64_t v68 = 0;
      object = 0;
      uint64_t v67 = v135;
      goto LABEL_54;
    default:
      swift_bridgeObjectRelease();
      *(void *)&long long v138 = 0xD000000000000012;
      *((void *)&v138 + 1) = 0x8000000100133CE0;
      AnyHashable.init<A>(_:)();
      id v69 = [v34 userInfo];
      if (!v69) {
        goto LABEL_60;
      }
      unint64_t v70 = v69;
      uint64_t v71 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v71 + 16) && (unint64_t v72 = sub_10004887C((uint64_t)&aBlock), (v73 & 1) != 0))
      {
        sub_100048600(*(void *)(v71 + 56) + 32 * v72, (uint64_t)&v140);
      }
      else
      {
        long long v140 = 0u;
        long long v141 = 0u;
      }

      swift_bridgeObjectRelease();
      sub_100050884((uint64_t)&aBlock);
      if (*((void *)&v141 + 1))
      {
        if (swift_dynamicCast()) {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        sub_10000F394((uint64_t)&v140, &qword_100181560);
      }
      goto LABEL_53;
  }
}

uint64_t sub_1000F7E18(uint64_t a1)
{
  v1[32] = a1;
  uint64_t v2 = type metadata accessor for UUID();
  v1[33] = v2;
  v1[34] = *(void *)(v2 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v3 = sub_10000AA4C((uint64_t *)&unk_100185A00);
  v1[38] = v3;
  uint64_t v4 = swift_task_alloc();
  v1[39] = v4;
  sub_10000AA4C(&qword_100180580);
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[42] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000F7FF0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x8000000100133C90, sub_1000F2098, 0, v3);
}

uint64_t sub_1000F7FF0()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8C18;
  }
  else {
    uint64_t v2 = sub_1000F8104;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F8104()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[34];
  uint64_t v6 = (void *)(v3 + *(int *)(v0[38] + 48));
  v0[44] = *v6;
  uint64_t v7 = v6[1];
  v0[45] = v7;
  sub_10000F2CC(v3, v1, &qword_100180580);
  sub_1000F8DB0(v1, v2);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4);
  uint64_t v9 = v0[40];
  if (v8 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000F394(v9, &qword_100180580);
LABEL_8:
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_10018D128);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Could not find a current user activity on the system, returning nil from user activity provider", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = v0[41];

    sub_10000F394(v17, &qword_100180580);
    uint64_t v18 = (_OWORD *)v0[32];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18[4] = 0u;
    v18[5] = 0u;
    v18[2] = 0u;
    v18[3] = 0u;
    *uint64_t v18 = 0u;
    v18[1] = 0u;
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  (*(void (**)(void, void, void))(v0[34] + 32))(v0[37], v0[40], v0[33]);
  if (!v7)
  {
    (*(void (**)(void, void))(v0[34] + 8))(v0[37], v0[33]);
    goto LABEL_8;
  }
  uint64_t v10 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v0[46] = isa;
  v0[2] = v0;
  v0[7] = v0 + 27;
  v0[3] = sub_1000F8438;
  uint64_t v12 = swift_continuation_init();
  v0[22] = _NSConcreteStackBlock;
  v0[23] = 0x40000000;
  v0[24] = sub_1000F2508;
  v0[25] = &unk_10016D600;
  v0[26] = v12;
  [v10 fetchUserActivityWithUUID:isa completionHandler:v0 + 22];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F8438()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 376) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000F8CC0;
  }
  else
  {
    uint64_t v2 = sub_1000F8550;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F8550()
{
  uint64_t v68 = v0;
  uint64_t v1 = *(void (**)(void (*)(void)))(v0 + 216);

  if (v1)
  {
    uint64_t v64 = v1;
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v2 = *(void *)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B150(v6, (uint64_t)qword_10018D128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    unint64_t v10 = *(void *)(v0 + 360);
    if (v9)
    {
      uint64_t v57 = *(void *)(v0 + 352);
      os_log_type_t typea = v8;
      uint64_t v11 = *(void *)(v0 + 288);
      uint64_t v13 = *(void *)(v0 + 264);
      uint64_t v12 = *(void *)(v0 + 272);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      sub_1000F8E18((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_100047F98(v15, v16, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v11, v13);
      uint64_t v18 = v17;
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 248) = sub_100047F98(v57, v10, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, typea, "Found a current user activity on the system with UUID: %s from application with identifier: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 272) + 8);
      v18(*(void *)(v0 + 288), *(void *)(v0 + 264));
      swift_bridgeObjectRelease_n();
    }

    uint64_t v35 = *(void *)(v0 + 328);
    uint64_t v36 = *(void *)(v0 + 296);
    uint64_t v37 = *(void *)(v0 + 264);
    sub_1000F6A8C(v64, *(void *)(v0 + 352), *(void *)(v0 + 360), (uint64_t *)(v0 + 80));
    uint64_t v63 = *(void *)(v0 + 88);
    uint64_t v66 = *(void *)(v0 + 80);
    uint64_t v60 = *(void *)(v0 + 104);
    uint64_t v61 = *(void *)(v0 + 96);
    *(void *)os_log_type_t type = *(void *)(v0 + 120);
    *(void *)uint64_t v59 = *(void *)(v0 + 112);
    uint64_t v51 = *(void *)(v0 + 136);
    uint64_t v53 = *(void *)(v0 + 128);
    uint64_t v38 = *(void *)(v0 + 152);
    uint64_t v50 = *(void *)(v0 + 144);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v40 = *(void *)(v0 + 168);
    v18(v36, v37);
    sub_10000F394(v35, &qword_100180580);
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 264);
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000B150(v23, (uint64_t)qword_10018D128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    unint64_t v27 = *(void *)(v0 + 360);
    if (v26)
    {
      uint64_t v62 = *(void *)(v0 + 296);
      uint64_t v65 = *(void *)(v0 + 328);
      os_log_type_t v58 = v25;
      uint64_t v28 = *(void *)(v0 + 280);
      uint64_t v52 = *(void *)(v0 + 272);
      uint64_t typeb = *(void *)(v0 + 352);
      uint64_t v29 = *(void *)(v0 + 264);
      uint64_t v30 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      sub_1000F8E18((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_100047F98(v31, v32, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v33 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v33(v28, v29);
      *(_WORD *)(v30 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 232) = sub_100047F98(typeb, v27, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v58, "Unable to fetch user activity from current user activity UUID: %s bundleIdentifier: %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v33(v62, v29);
      uint64_t v34 = v65;
    }
    else
    {
      uint64_t v41 = *(void *)(v0 + 328);
      uint64_t v42 = *(void *)(v0 + 296);
      uint64_t v44 = *(void *)(v0 + 272);
      uint64_t v43 = *(void *)(v0 + 280);
      uint64_t v45 = *(void *)(v0 + 264);

      swift_bridgeObjectRelease_n();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v46(v43, v45);
      v46(v42, v45);
      uint64_t v34 = v41;
    }
    sub_10000F394(v34, &qword_100180580);
    uint64_t v63 = 0;
    uint64_t v66 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    *(void *)os_log_type_t type = 0;
    *(void *)uint64_t v59 = 0;
    uint64_t v51 = 0;
    uint64_t v53 = 0;
    uint64_t v50 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v47 = *(void **)(v0 + 256);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *uint64_t v47 = v66;
  v47[1] = v63;
  v47[2] = v61;
  v47[3] = v60;
  v47[4] = *(void *)v59;
  v47[5] = *(void *)type;
  v47[6] = v53;
  v47[7] = v51;
  v47[8] = v50;
  v47[9] = v38;
  v47[10] = v39;
  v47[11] = v40;
  char v48 = *(uint64_t (**)(void))(v0 + 8);
  return v48();
}

uint64_t sub_1000F8C18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F8CC0()
{
  uint64_t v1 = (void *)v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[34];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_10000F394(v2, &qword_100180580);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000F8DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100180580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F8E18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F8E60(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F8EB8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F8F48()
{
  uint64_t v1 = sub_10000AA4C(&qword_100185A20);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F8FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10000AA4C(&qword_100185A20);

  return sub_1000F2290(a1, a2, a3, a4);
}

uint64_t sub_1000F9078()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000F9088(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1000F2B64(a1, a2, a3, *(void *)(v3 + 16));
}

void *initializeBufferWithCopyOfBuffer for ActiveSharePlaySessionInvite(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for ActiveSharePlaySessionInvite(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for ActiveSharePlaySessionInvite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  unint64_t v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for ActiveSharePlaySessionInvite(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for ActiveSharePlaySessionInvite()
{
  return &type metadata for ActiveSharePlaySessionInvite;
}

void destroy for UserActivity(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 88);
}

uint64_t initializeWithCopy for UserActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  id v6 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v8 = *(void **)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v7;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  unint64_t v10 = *(void **)(a2 + 88);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v6;
  swift_bridgeObjectRetain();
  id v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v10;
  return a1;
}

uint64_t assignWithCopy for UserActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a2 + 56);
  id v8 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  id v9 = v7;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v10 = *(void **)(a1 + 88);
  id v11 = *(void **)(a2 + 88);
  *(void *)(a1 + 88) = v11;
  id v12 = v11;

  return a1;
}

__n128 initializeWithTake for UserActivity(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for UserActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  return a1;
}

uint64_t getEnumTagSinglePayload for UserActivity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserActivity()
{
  return &type metadata for UserActivity;
}

void destroy for FrontmostApp(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for FrontmostApp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  id v6 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  swift_bridgeObjectRetain();
  id v9 = v7;
  return a1;
}

uint64_t assignWithCopy for FrontmostApp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 56);
  id v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for FrontmostApp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for FrontmostApp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FrontmostApp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FrontmostApp()
{
  return &type metadata for FrontmostApp;
}

double sub_1000F9838@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100185FC0, &qword_10017FE28).n128_u64[0];
  return result;
}

double sub_1000F9894@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100185FD0, &qword_10017FDD8).n128_u64[0];
  return result;
}

__n128 sub_1000F98F0@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10000F330(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_10000AA4C(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

double sub_1000F9AC0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001841B0, (uint64_t *)&unk_100185E60).n128_u64[0];
  return result;
}

double sub_1000F9B1C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100184238, (uint64_t *)&unk_100185E40).n128_u64[0];
  return result;
}

double sub_1000F9B78@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100184208, (uint64_t *)&unk_100185E50).n128_u64[0];
  return result;
}

uint64_t sub_1000F9BD4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 176);
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v13 + 160);
  *(_OWORD *)(a9 + 176) = v24;
  *(_OWORD *)(a9 + 192) = *(_OWORD *)(v13 + 192);
  long long v25 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v25;
  long long v26 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(a9 + 144) = v26;
  long long v27 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v27;
  long long v28 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v28;
  long long v29 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 264) = v34;
  *(_OWORD *)(a9 + 280) = v35;
  *(_OWORD *)(a9 + 296) = v36;
  *(_OWORD *)(a9 + 312) = v37;
  *(_OWORD *)(a9 + 216) = v31;
  *(_OWORD *)(a9 + 232) = v32;
  *(void *)(a9 + 208) = *(void *)(v13 + 208);
  *(_OWORD *)(a9 + 248) = v33;

  return sub_1000F048C(v13);
}

double sub_1000F9DC4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100185FF0, &qword_100181840).n128_u64[0];
  return result;
}

double sub_1000F9E20@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_1000F98F0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100185FE0, &qword_100181860).n128_u64[0];
  return result;
}

uint64_t sub_1000F9E7C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[1];
  long long v34 = *v13;
  long long v35 = v24;
  sub_10010531C((uint64_t)&v34, (uint64_t)v37);
  long long v25 = v13[1];
  *(_OWORD *)a9 = *v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 88) = v30;
  *(_OWORD *)(a9 + 104) = v31;
  *(_OWORD *)(a9 + 120) = v32;
  *(_OWORD *)(a9 + 136) = v33;
  *(_OWORD *)(a9 + 40) = v27;
  *(_OWORD *)(a9 + 56) = v28;
  uint64_t v36 = *((void *)&v35 + 1);
  *(void *)(a9 + 32) = *((void *)v13 + 4);
  *(_OWORD *)(a9 + 72) = v29;
  sub_100105378((uint64_t)v37);
  return sub_1001053AC((uint64_t)&v36);
}

__n128 sub_1000FA04C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_100102A28(v13, a9, (uint64_t (*)(void))type metadata accessor for AirDropDescriptionView);
  long long v24 = (_OWORD *)(a9 + *(int *)(sub_10000AA4C((uint64_t *)&unk_100185E30) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  _OWORD *v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

__n128 sub_1000FA218@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = sub_10000AA4C(&qword_100182C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  long long v25 = (_OWORD *)(a9 + *(int *)(sub_10000AA4C(&qword_100185E70) + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *long long v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  void v25[2] = v29;
  v25[3] = v30;
  return result;
}

uint64_t sub_1000FA404@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v13 + 57);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  a9[9] = v31;
  a9[10] = v32;
  a9[11] = v33;
  a9[5] = v27;
  a9[6] = v28;
  a9[7] = v29;
  a9[8] = v30;
  return sub_1000F03A0((uint64_t)v13);
}

uint64_t sub_1000FA5B8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_100055180(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000FA7AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000AA4C(&qword_100185D00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100185D08);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  id v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100185D10);
  __chkstk_darwin(v9 - 8);
  id v11 = (uint64_t *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v11 = static Alignment.center.getter();
  v11[1] = v12;
  uint64_t v13 = (uint64_t)v11 + *(int *)(sub_10000AA4C(&qword_100185D18) + 44);
  *(void *)uint64_t v4 = static HorizontalAlignment.center.getter();
  *((void *)v4 + 1) = 0x4028000000000000;
  v4[16] = 0;
  uint64_t v14 = sub_10000AA4C(&qword_100185D20);
  sub_1000FA9DC((uint64_t)&v4[*(int *)(v14 + 44)]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000F330((uint64_t)v4, (uint64_t)v8, &qword_100185D00);
  uint64_t v15 = &v8[*(int *)(v6 + 44)];
  long long v16 = v21[1];
  *(_OWORD *)uint64_t v15 = v21[0];
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v21[2];
  sub_10000F394((uint64_t)v4, &qword_100185D00);
  sub_10000F2CC((uint64_t)v8, v13, &qword_100185D08);
  uint64_t v17 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F330((uint64_t)v11, a1, &qword_100185D10);
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(sub_10000AA4C(&qword_100185D28) + 36));
  *uint64_t v19 = KeyPath;
  v19[1] = v17;
  return sub_10000F394((uint64_t)v11, &qword_100185D10);
}

uint64_t sub_1000FA9DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v52 = sub_10000AA4C(&qword_100185D30) - 8;
  __chkstk_darwin(v52);
  uint64_t v2 = (uint64_t *)((char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000AA4C(&qword_100185D38) - 8;
  __chkstk_darwin(v51);
  uint64_t v8 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000AA4C(&qword_100185D40) - 8;
  __chkstk_darwin(v55);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000AA4C(&qword_100185D48) - 8;
  __chkstk_darwin(v54);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v53 = (uint64_t)&v50 - v14;
  sub_10000AA4C(&qword_100185D50);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10012C260;
  uint64_t v16 = enum case for Color.RGBColorSpace.sRGB(_:);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v17(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
  *(void *)(v15 + 32) = Color.init(_:red:green:blue:opacity:)();
  v17(v6, v16, v3);
  *(void *)(v15 + 40) = Color.init(_:red:green:blue:opacity:)();
  v17(v6, v16, v3);
  *(void *)(v15 + 48) = Color.init(_:red:green:blue:opacity:)();
  *(void *)&long long v60 = v15;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v18 = static Alignment.center.getter();
  uint64_t v20 = v19;
  char v21 = (uint64_t *)((char *)v2 + *(int *)(v52 + 44));
  *char v21 = static Alignment.center.getter();
  v21[1] = v22;
  uint64_t v23 = sub_10000AA4C(&qword_100185D58);
  __asm { FMOV            V0.2D, #10.0 }
  sub_100100E1C((uint64_t)v21 + *(int *)(v23 + 44), _Q0);
  *uint64_t v2 = v18;
  v2[1] = v20;
  sub_10000F330((uint64_t)v2, v8 + *(int *)(v51 + 44), &qword_100185D30);
  long long v29 = v58;
  *(_OWORD *)uint64_t v8 = v57;
  *(_OWORD *)(v8 + 16) = v29;
  *(void *)(v8 + 32) = v59;
  sub_10000F394((uint64_t)v2, &qword_100185D30);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000F330(v8, (uint64_t)v10, &qword_100185D38);
  long long v30 = &v10[*(int *)(v55 + 44)];
  long long v31 = v61;
  *(_OWORD *)long long v30 = v60;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v62;
  sub_10000F394(v8, &qword_100185D38);
  uint64_t v50 = v12;
  sub_10000F330((uint64_t)v10, (uint64_t)v12, &qword_100185D40);
  *(_WORD *)&v12[*(int *)(v54 + 44)] = 0;
  sub_10000F394((uint64_t)v10, &qword_100185D40);
  uint64_t v32 = (uint64_t)v12;
  uint64_t v33 = v53;
  sub_10000F2CC(v32, v53, &qword_100185D48);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v34 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v36 = v35;
  LOBYTE(v4) = v37 & 1;
  static Font.subheadline.getter();
  uint64_t v38 = Text.font(_:)();
  uint64_t v40 = v39;
  LOBYTE(v8) = v41;
  uint64_t v43 = v42;
  swift_release();
  sub_100054D14(v34, v36, v4);
  swift_bridgeObjectRelease();
  uint64_t v44 = v33;
  uint64_t v45 = v33;
  uint64_t v46 = (uint64_t)v50;
  sub_10000F330(v45, (uint64_t)v50, &qword_100185D48);
  uint64_t v47 = v56;
  sub_10000F330(v46, v56, &qword_100185D48);
  uint64_t v48 = v47 + *(int *)(sub_10000AA4C((uint64_t *)&unk_100185D60) + 48);
  *(void *)uint64_t v48 = v38;
  *(void *)(v48 + 8) = v40;
  *(unsigned char *)(v48 + 16) = v8 & 1;
  *(void *)(v48 + 24) = v43;
  sub_100055180(v38, v40, v8 & 1);
  swift_bridgeObjectRetain();
  sub_10000F394(v44, &qword_100185D48);
  sub_100054D14(v38, v40, v8 & 1);
  swift_bridgeObjectRelease();
  return sub_10000F394(v46, &qword_100185D48);
}

uint64_t sub_1000FAFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v71 = sub_10000AA4C(&qword_100185FB8) - 8;
  __chkstk_darwin(v71);
  uint64_t v69 = (uint64_t *)((char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  uint64_t v65 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000AA4C(&qword_100185F88) - 8;
  __chkstk_darwin(v68);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10000AA4C(&qword_100185F78) - 8;
  __n128 v12 = __chkstk_darwin(v72);
  uint64_t v70 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, v6, v12);
  uint64_t v14 = Text.init(_:)();
  uint64_t v16 = v15;
  LOBYTE(v7) = v17 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v18 = Text.font(_:)();
  uint64_t v63 = v19;
  uint64_t v64 = v18;
  LOBYTE(v6) = v20;
  uint64_t v22 = v21;
  swift_release();
  LOBYTE(v6) = v6 & 1;
  sub_100054D14(v14, v16, v7);
  swift_bridgeObjectRelease();
  LOBYTE(v14) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v63;
  uint64_t v23 = v64;
  uint64_t v74 = v64;
  uint64_t v75 = v63;
  char v76 = v6;
  uint64_t v77 = v22;
  char v78 = v14;
  uint64_t v79 = v25;
  uint64_t v80 = v26;
  uint64_t v81 = v27;
  uint64_t v82 = v28;
  char v83 = 0;
  static Alignment.center.getter();
  sub_1000FA404(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v98, 0.0, 1, 0.0, 1);
  sub_100054D14(v23, v24, v6);
  swift_bridgeObjectRelease();
  long long v93 = v107;
  long long v94 = v108;
  long long v95 = v109;
  long long v89 = v103;
  long long v90 = v104;
  long long v91 = v105;
  long long v92 = v106;
  long long v84 = v98;
  long long v85 = v99;
  long long v86 = v100;
  long long v87 = v101;
  long long v88 = v102;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for Color.RGBColorSpace.sRGB(_:), v67);
  uint64_t v67 = Color.init(_:red:green:blue:opacity:)();
  LOBYTE(v6) = static Edge.Set.all.getter();
  long long v106 = v92;
  long long v107 = v93;
  long long v108 = v94;
  long long v109 = v95;
  long long v102 = v88;
  long long v103 = v89;
  long long v104 = v90;
  long long v105 = v91;
  long long v98 = v84;
  long long v99 = v85;
  long long v100 = v86;
  long long v101 = v87;
  uint64_t v29 = static Alignment.center.getter();
  uint64_t v31 = v30;
  uint64_t v32 = v69;
  uint64_t v33 = (char *)v69 + *(int *)(v71 + 44);
  uint64_t v34 = &v33[*(int *)(type metadata accessor for RoundedRectangle() + 20)];
  uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v36 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #30.0 }
  *(_OWORD *)uint64_t v33 = _Q0;
  uint64_t *v32 = v29;
  v32[1] = v31;
  sub_10000F330((uint64_t)v32, (uint64_t)&v11[*(int *)(v68 + 44)], &qword_100185FB8);
  long long v42 = v107;
  *((_OWORD *)v11 + 8) = v106;
  *((_OWORD *)v11 + 9) = v42;
  long long v43 = v109;
  *((_OWORD *)v11 + 10) = v108;
  *((_OWORD *)v11 + 11) = v43;
  long long v44 = v103;
  *((_OWORD *)v11 + 4) = v102;
  *((_OWORD *)v11 + 5) = v44;
  long long v45 = v105;
  *((_OWORD *)v11 + 6) = v104;
  *((_OWORD *)v11 + 7) = v45;
  long long v46 = v99;
  *(_OWORD *)uint64_t v11 = v98;
  *((_OWORD *)v11 + 1) = v46;
  long long v47 = v101;
  *((_OWORD *)v11 + 2) = v100;
  *((_OWORD *)v11 + 3) = v47;
  *((_WORD *)v11 + 96) = 0;
  *(_DWORD *)(v11 + 194) = v96;
  *((_WORD *)v11 + 99) = v97;
  *((void *)v11 + 25) = v67;
  v11[208] = v6;
  sub_10000F394((uint64_t)v32, &qword_100185FB8);
  LOBYTE(v32) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v56 = v70;
  sub_10000F330((uint64_t)v11, v70, &qword_100185F88);
  uint64_t v57 = v56 + *(int *)(v72 + 44);
  *(unsigned char *)uint64_t v57 = (_BYTE)v32;
  *(void *)(v57 + 8) = v49;
  *(void *)(v57 + 16) = v51;
  *(void *)(v57 + 24) = v53;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 40) = 0;
  sub_10000F394((uint64_t)v11, &qword_100185F88);
  uint64_t v58 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v60 = v73;
  sub_10000F330(v56, v73, &qword_100185F78);
  long long v61 = (uint64_t *)(v60 + *(int *)(sub_10000AA4C(&qword_100185F60) + 36));
  uint64_t *v61 = KeyPath;
  v61[1] = v58;
  return sub_10000F394(v56, &qword_100185F78);
}

uint64_t sub_1000FB59C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(a1 - 8);
  sub_100102A28(v1, (uint64_t)&v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for BannerShareableContentActionButton);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  sub_100104E7C((uint64_t)&v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v5 + v4);
  uint64_t v8 = v1;
  sub_10000AA4C(&qword_100185F60);
  sub_100104F54();
  return Button.init(action:label:)();
}

uint64_t sub_1000FB6E4()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  uint64_t v32 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005EB7C(v0 + 48, (uint64_t)v37);
  sub_10005EB7C((uint64_t)v37, (uint64_t)&v46);
  unint64_t v6 = v54;
  v54 &= 0x3FFFFFFFFFFFFFFFuLL;
  if (v6 >> 62)
  {
    *(void *)&long long v31 = v3;
    uint64_t v14 = v48;
    uint64_t v15 = v49;
    uint64_t v16 = v50;
    uint64_t v9 = v46;
    uint64_t v17 = v47;
    long long v36 = *(_OWORD *)(v0 + 16);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100104718((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EAC4);
    sub_100104624((uint64_t)&v36);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100104490((uint64_t)&v36);
    if (*((void *)&v39 + 1))
    {
      long long v34 = v39;
      long long v35 = *(_OWORD *)v40;
      long long v33 = v38;
      uint64_t v18 = *((void *)&v39 + 1);
      uint64_t v19 = *(void *)v40;
      sub_10000AB54(&v33, *((uint64_t *)&v39 + 1));
      *(void *)&long long v38 = v9;
      *((void *)&v38 + 1) = v17;
      *(void *)&long long v39 = v14;
      *((void *)&v39 + 1) = v15;
      *(void *)uint64_t v40 = v16;
      *(_OWORD *)&v40[8] = 0u;
      long long v41 = 0u;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      unint64_t v42 = 0x8000000000000000;
      int v45 = 0;
      uint64_t v9 = sub_100097100((uint64_t)&v38, v18, v19);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    sub_10000F394((uint64_t)&v38, &qword_100181AD8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = v46;
    uint64_t v8 = v47;
    uint64_t v9 = v50;
    uint64_t v26 = v49;
    uint64_t v27 = v48;
    long long v31 = v51;
    uint64_t v24 = v53;
    uint64_t v25 = v52;
    uint64_t v29 = v56;
    uint64_t v30 = v55;
    int v28 = v57;
    long long v36 = *(_OWORD *)(v0 + 16);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100104718((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EAC4);
    sub_100104624((uint64_t)&v36);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100104490((uint64_t)&v36);
    if (*((void *)&v39 + 1))
    {
      long long v34 = v39;
      long long v35 = *(_OWORD *)v40;
      long long v33 = v38;
      uint64_t v10 = *((void *)&v39 + 1);
      uint64_t v11 = *(void *)v40;
      sub_10000AB54(&v33, *((uint64_t *)&v39 + 1));
      *(void *)&long long v38 = v7;
      *((void *)&v38 + 1) = v8;
      *(void *)&long long v39 = v27;
      *((void *)&v39 + 1) = v26;
      *(void *)uint64_t v40 = v9;
      *(_OWORD *)&v40[8] = v31;
      *(void *)&long long v41 = v25;
      *((void *)&v41 + 1) = v24;
      unint64_t v42 = v6;
      uint64_t v43 = v30;
      uint64_t v44 = v29;
      int v45 = v28;
      uint64_t v9 = sub_100097100((uint64_t)&v38, v10, v11);
      uint64_t v13 = v12;
      sub_100104718((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E778);
      if (v13)
      {
LABEL_11:
        sub_1000608FC((uint64_t)&v33);
        return v9;
      }
LABEL_10:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v9 = String.init(localized:table:bundle:locale:comment:)();
      goto LABEL_11;
    }
    sub_10000F394((uint64_t)&v38, &qword_100181AD8);
    swift_bridgeObjectRetain();
    sub_100104718((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E778);
  }
  return v9;
}

uint64_t sub_1000FBB7C()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v44 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  uint64_t v43 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  unint64_t v42 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005EB7C(v0 + 48, (uint64_t)v49);
  sub_10005EB7C((uint64_t)v49, (uint64_t)&v58);
  unint64_t v7 = v67;
  v67 &= 0x3FFFFFFFFFFFFFFFuLL;
  if (v7 >> 62)
  {
    uint64_t v19 = v60;
    uint64_t v20 = v61;
    uint64_t v21 = v62;
    uint64_t v23 = v58;
    uint64_t v22 = v59;
    long long v48 = *(_OWORD *)(v0 + 16);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100104718((uint64_t)v49, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EAC4);
    sub_100104624((uint64_t)&v48);
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100104490((uint64_t)&v48);
    if (*((void *)&v51 + 1))
    {
      long long v46 = v51;
      long long v47 = *(_OWORD *)v52;
      long long v45 = v50;
      uint64_t v24 = *((void *)&v51 + 1);
      uint64_t v25 = *(void *)v52;
      sub_10000AB54(&v45, *((uint64_t *)&v51 + 1));
      *(void *)&long long v50 = v23;
      *((void *)&v50 + 1) = v22;
      *(void *)&long long v51 = v19;
      *((void *)&v51 + 1) = v20;
      *(void *)uint64_t v52 = v21;
      *(_OWORD *)&v52[8] = 0u;
      long long v53 = 0u;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      unint64_t v54 = 0x8000000000000000;
      int v57 = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_1000976C4((char *)&v50, v24, v25);
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v27)
      {
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v28._uint64_t countAndFlagsBits = 0x49575F4552414853;
        v28._object = (void *)0xEB000000005F4854;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
        v29._uint64_t countAndFlagsBits = v23;
        v29._object = v22;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v29);
        v30._uint64_t countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
        String.LocalizationValue.init(stringInterpolation:)();
        static Locale.current.getter();
        uint64_t v13 = String.init(localized:table:bundle:locale:comment:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    sub_10000F394((uint64_t)&v50, &qword_100181AD8);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  uint64_t v8 = v59;
  uint64_t v40 = v61;
  uint64_t v41 = v60;
  uint64_t v9 = v63;
  uint64_t v35 = v62;
  uint64_t v36 = v58;
  uint64_t v10 = v64;
  uint64_t v34 = v65;
  uint64_t v11 = v69;
  uint64_t v38 = v68;
  uint64_t v39 = v66;
  int v37 = v70;
  long long v48 = *(_OWORD *)(v0 + 16);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100104718((uint64_t)v49, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EAC4);
  sub_100104624((uint64_t)&v48);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100104490((uint64_t)&v48);
  if (!*((void *)&v51 + 1))
  {
    sub_100104718((uint64_t)v49, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E778);
    goto LABEL_13;
  }
  long long v46 = v51;
  long long v47 = *(_OWORD *)v52;
  long long v45 = v50;
  uint64_t v12 = *((void *)&v51 + 1);
  uint64_t v33 = *(void *)v52;
  sub_10000AB54(&v45, *((uint64_t *)&v51 + 1));
  *(void *)&long long v50 = v36;
  *((void *)&v50 + 1) = v8;
  *(void *)&long long v51 = v41;
  *((void *)&v51 + 1) = v40;
  *(void *)uint64_t v52 = v35;
  *(void *)&v52[8] = v9;
  *(void *)&v52[16] = v10;
  *(void *)&long long v53 = v34;
  *((void *)&v53 + 1) = v39;
  unint64_t v54 = v7;
  uint64_t v55 = v38;
  uint64_t v56 = v11;
  int v57 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000976C4((char *)&v50, v12, v33);
  uint64_t v15 = v14;
  sub_100104718((uint64_t)v49, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E778);
  if (!v15)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v16._uint64_t countAndFlagsBits = 0x49575F4552414853;
    v16._object = (void *)0xEB000000005F4854;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
    v17._object = v40;
    v17._uint64_t countAndFlagsBits = v41;
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
    String.LocalizationValue.init(stringInterpolation:)();
    static Locale.current.getter();
    uint64_t v13 = String.init(localized:table:bundle:locale:comment:)();
  }
  sub_100104718((uint64_t)v49, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E778);
LABEL_10:
  sub_1000608FC((uint64_t)&v45);
  return v13;
}

uint64_t sub_1000FC194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v48 = a1;
  uint64_t v3 = sub_10000AA4C(&qword_100185D78);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100185D80);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100185D88);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100185D90);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100185D98);
  uint64_t v46 = *(void *)(v16 - 8);
  uint64_t v47 = v16;
  __chkstk_darwin(v16);
  Swift::String v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4033000000000000;
  v5[16] = 0;
  uint64_t v19 = sub_10000AA4C(&qword_100185DA0);
  sub_1000FC640(v2, (uint64_t)&v5[*(int *)(v19 + 44)]);
  uint64_t v20 = static Alignment.center.getter();
  sub_1000F98F0(0.0, 1, 1.79769313e308, 0, 0.0, 1, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v20, v21, &qword_100185D78, &qword_100185D80);
  sub_10000F394((uint64_t)v5, &qword_100185D78);
  uint64_t v22 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F330((uint64_t)v8, (uint64_t)v12, &qword_100185D80);
  uint64_t v24 = (uint64_t *)&v12[*(int *)(v10 + 44)];
  uint64_t *v24 = KeyPath;
  v24[1] = v22;
  sub_10000F394((uint64_t)v8, &qword_100185D80);
  uint64_t v25 = static Color.black.getter();
  LOBYTE(KeyPath) = static Edge.Set.all.getter();
  sub_10000F330((uint64_t)v12, (uint64_t)v15, &qword_100185D88);
  uint64_t v26 = &v15[*(int *)(v13 + 36)];
  *(void *)uint64_t v26 = v25;
  v26[8] = KeyPath;
  sub_10000F394((uint64_t)v12, &qword_100185D88);
  uint64_t v27 = swift_allocObject();
  long long v28 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v27 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v27 + 128) = v28;
  *(_OWORD *)(v27 + 144) = *(_OWORD *)(v2 + 128);
  *(_DWORD *)(v27 + 160) = *(_DWORD *)(v2 + 144);
  long long v29 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v27 + 64) = v29;
  long long v30 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v27 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v27 + 96) = v30;
  long long v31 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v27 + 32) = v31;
  sub_100102F64(v2);
  sub_100104294();
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_10000F394((uint64_t)v15, &qword_100185D90);
  long long v49 = *(_OWORD *)(v2 + 32);
  sub_10000AA4C(&qword_100184DB0);
  State.projectedValue.getter();
  uint64_t v32 = v50;
  uint64_t v33 = v51;
  LOBYTE(v13) = v52;
  uint64_t v34 = swift_allocObject();
  long long v35 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v34 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v34 + 128) = v35;
  *(_OWORD *)(v34 + 144) = *(_OWORD *)(v2 + 128);
  *(_DWORD *)(v34 + 160) = *(_DWORD *)(v2 + 144);
  long long v36 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v34 + 64) = v36;
  long long v37 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v34 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v34 + 96) = v37;
  long long v38 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v34 + 32) = v38;
  uint64_t v39 = swift_getKeyPath();
  uint64_t v41 = v46;
  uint64_t v40 = v47;
  uint64_t v42 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v48, v18, v47);
  uint64_t v43 = v42 + *(int *)(sub_10000AA4C(&qword_100185DD0) + 36);
  *(void *)uint64_t v43 = v39;
  *(unsigned char *)(v43 + 8) = 0;
  *(void *)(v43 + 16) = v32;
  *(void *)(v43 + 24) = v33;
  *(unsigned char *)(v43 + 32) = v13;
  *(unsigned char *)(v43 + 33) = 1;
  *(void *)(v43 + 40) = sub_100104478;
  *(void *)(v43 + 48) = v34;
  sub_100102F64(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v18, v40);
}

uint64_t sub_1000FC640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v31 = sub_10000AA4C(&qword_100185DD8);
  uint64_t v3 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100185DE0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = sub_10000AA4C(&qword_100185DE8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v30 - v16;
  *(void *)uint64_t v17 = static VerticalAlignment.center.getter();
  *((void *)v17 + 1) = 0x402C000000000000;
  v17[16] = 0;
  uint64_t v18 = sub_10000AA4C((uint64_t *)&unk_100185DF0);
  sub_1000FCAEC(a1, (uint64_t)&v17[*(int *)(v18 + 44)]);
  long long v39 = *(_OWORD *)(a1 + 16);
  uint64_t v19 = (void *)*((void *)&v39 + 1);
  swift_getKeyPath();
  swift_getKeyPath();
  id v20 = v19;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100104490((uint64_t)&v39);
  if (*((void *)&v35 + 1))
  {
    v37[0] = v34;
    v37[1] = v35;
    long long v38 = v36;
    *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
    *((void *)v5 + 1) = 0;
    v5[16] = 1;
    v30[2] = &v5[*(int *)(sub_10000AA4C(&qword_100185E08) + 44)];
    uint64_t v33 = *((void *)&v38 + 1);
    v30[1] = swift_getKeyPath();
    sub_1000EADA8((uint64_t)v37, (uint64_t)&v34);
    uint64_t v21 = swift_allocObject();
    long long v22 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v21 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v21 + 128) = v22;
    *(_OWORD *)(v21 + 144) = *(_OWORD *)(a1 + 128);
    long long v23 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v21 + 64) = v23;
    long long v24 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v21 + 96) = v24;
    long long v25 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v21 + 32) = v25;
    long long v26 = v35;
    *(_OWORD *)(v21 + 168) = v34;
    *(_DWORD *)(v21 + 160) = *(_DWORD *)(a1 + 144);
    *(_OWORD *)(v21 + 184) = v26;
    *(_OWORD *)(v21 + 200) = v36;
    swift_bridgeObjectRetain();
    sub_100102F64(a1);
    sub_10000AA4C(&qword_100184F70);
    type metadata accessor for BannerShareableContentActionButton(0);
    sub_10000F288(&qword_100184F78, &qword_100184F70);
    sub_100102164(&qword_100185E10, (void (*)(uint64_t))type metadata accessor for BannerShareableContentActionButton);
    ForEach<>.init(_:id:content:)();
    sub_10000F2CC((uint64_t)v5, (uint64_t)v11, &qword_100185DD8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v31);
    sub_1000608FC((uint64_t)v37);
  }
  else
  {
    sub_10000F394((uint64_t)&v34, &qword_100181AD8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v31);
  }
  sub_10000F330((uint64_t)v17, (uint64_t)v14, &qword_100185DE8);
  sub_10000F330((uint64_t)v11, (uint64_t)v8, &qword_100185DE0);
  uint64_t v27 = v32;
  sub_10000F330((uint64_t)v14, v32, &qword_100185DE8);
  uint64_t v28 = sub_10000AA4C(&qword_100185E00);
  sub_10000F330((uint64_t)v8, v27 + *(int *)(v28 + 48), &qword_100185DE0);
  sub_10000F394((uint64_t)v11, &qword_100185DE0);
  sub_10000F394((uint64_t)v17, &qword_100185DE8);
  sub_10000F394((uint64_t)v8, &qword_100185DE0);
  return sub_10000F394((uint64_t)v14, &qword_100185DE8);
}

uint64_t *sub_1000FCAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v117 = a2;
  uint64_t v3 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v3 - 8);
  long long v109 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000AA4C(&qword_1001852C0);
  __chkstk_darwin(v97);
  long long v101 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Image.Scale();
  uint64_t v99 = *(void *)(v6 - 8);
  uint64_t v100 = v6;
  __chkstk_darwin(v6);
  int v96 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C(&qword_1001852C8);
  __chkstk_darwin(v95);
  long long v103 = (uint64_t *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v98 = sub_10000AA4C(&qword_100185BB0);
  __chkstk_darwin(v98);
  long long v104 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000AA4C(&qword_100185588);
  __chkstk_darwin(v102);
  uint64_t v107 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10000AA4C(&qword_100185590);
  __chkstk_darwin(v105);
  uint64_t v108 = (uint64_t)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000AA4C(&qword_100185E18);
  uint64_t v116 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v106 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100185E20);
  __chkstk_darwin(v13 - 8);
  uint64_t v128 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v136 = (uint64_t)&v93 - v16;
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v141 = *(void *)(a1 + 80);
  uint64_t v142 = v17;
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v139 = *(void *)(a1 + 96);
  uint64_t v140 = v21;
  uint64_t v22 = *(void *)(a1 + 112);
  uint64_t v138 = *(void *)(a1 + 104);
  unint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 136);
  int v26 = *(_DWORD *)(a1 + 144);
  uint64_t v122 = a1;
  v188[0] = *(_OWORD *)(a1 + 16);
  id v127 = (id)*((void *)&v188[0] + 1);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  int v129 = v26;
  uint64_t v130 = v25;
  uint64_t v131 = v24;
  unint64_t v137 = v23;
  uint64_t v132 = v22;
  uint64_t v134 = v20;
  uint64_t v135 = v18;
  uint64_t v133 = v19;
  sub_10005EAC4(v142, v18, v20, v19, v141, v140, v139, v138, v22, v23);
  sub_100104624((uint64_t)v188);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100104490((uint64_t)v188);
  if (v179[3])
  {
    sub_10000AAF0((uint64_t)v179, (uint64_t)&v153);
    sub_1000608FC((uint64_t)v179);
    uint64_t v27 = v156;
    uint64_t v28 = v157;
    sub_10000AB54(&v153, v156);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v28 + 56))(v180, v27, v28);
    id v127 = v181;
    id v29 = v181;
    sub_10001E7C4((uint64_t)v180);
    sub_10000AB98((uint64_t)&v153);
  }
  else
  {
    sub_10000F394((uint64_t)v179, &qword_100181AD8);
    id v127 = 0;
  }
  uint64_t v30 = v117;
  uint64_t v31 = (unsigned char *)(v117 + 256);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v123 = v182;
  uint64_t v124 = v184;
  uint64_t v125 = v187;
  uint64_t KeyPath = v186;
  unsigned __int8 v178 = v183;
  unsigned __int8 v176 = v185;
  uint64_t v111 = static HorizontalAlignment.leading.getter();
  sub_1000FD758((uint64_t)&v153);
  uint64_t v32 = v154;
  LODWORD(v33) = v155;
  uint64_t v121 = v156;
  uint64_t v122 = v153;
  uint64_t v34 = v157;
  uint64_t v113 = v158;
  int v112 = v159;
  uint64_t v115 = v160;
  uint64_t v114 = swift_getKeyPath();
  type metadata accessor for SystemApertureLayoutState();
  sub_100102164((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
  uint64_t v120 = EnvironmentObject.init()();
  uint64_t v110 = v35;
  unint64_t v36 = v137;
  uint64_t v37 = 1;
  uint64_t v38 = v119;
  uint64_t v118 = v32;
  if (!(v137 >> 62))
  {
    uint64_t v39 = Image.init(systemName:)();
    uint64_t v40 = v99;
    uint64_t v41 = *(void (**)(char *, void, uint64_t))(v99 + 104);
    uint64_t v42 = v96;
    long long v93 = (unsigned char *)(v30 + 256);
    uint64_t v43 = v100;
    v41(v96, enum case for Image.Scale.medium(_:), v100);
    uint64_t v44 = swift_getKeyPath();
    int v94 = v33;
    uint64_t v45 = v44;
    uint64_t v46 = (uint64_t *)v101;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v101[*(int *)(v97 + 28)], v42, v43);
    *uint64_t v46 = v45;
    uint64_t v47 = *(int *)(v95 + 36);
    uint64_t v97 = v34;
    uint64_t v48 = v103;
    sub_10000F330((uint64_t)v46, (uint64_t)v103 + v47, &qword_1001852C0);
    *uint64_t v48 = v39;
    swift_retain();
    sub_10000F394((uint64_t)v46, &qword_1001852C0);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v43);
    swift_release();
    uint64_t v49 = (uint64_t)v109;
    static SymbolRenderingMode.monochrome.getter();
    uint64_t v50 = type metadata accessor for SymbolRenderingMode();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
    uint64_t v51 = swift_getKeyPath();
    uint64_t v52 = (uint64_t)v104;
    long long v53 = (uint64_t *)&v104[*(int *)(v98 + 36)];
    uint64_t v54 = sub_10000AA4C(&qword_100185BD0);
    sub_10000F330(v49, (uint64_t)v53 + *(int *)(v54 + 28), (uint64_t *)&unk_1001854E0);
    *long long v53 = v51;
    sub_10000F330((uint64_t)v48, v52, &qword_1001852C8);
    sub_10000F394(v49, (uint64_t *)&unk_1001854E0);
    sub_10000F394((uint64_t)v48, &qword_1001852C8);
    uint64_t v55 = static Font.title2.getter();
    uint64_t v56 = swift_getKeyPath();
    uint64_t v57 = v107;
    sub_10000F330(v52, v107, &qword_100185BB0);
    uint64_t v58 = (uint64_t *)(v57 + *(int *)(v102 + 36));
    *uint64_t v58 = v56;
    v58[1] = v55;
    sub_10000F394(v52, &qword_100185BB0);
    static Color.white.getter();
    uint64_t v33 = Color.opacity(_:)();
    swift_release();
    uint64_t v59 = swift_getKeyPath();
    uint64_t v60 = v108;
    sub_10000F330(v57, v108, &qword_100185588);
    long long v61 = (uint64_t *)(v60 + *(int *)(v105 + 36));
    uint64_t *v61 = v59;
    v61[1] = v33;
    uint64_t v31 = v93;
    sub_10000F394(v57, &qword_100185588);
    LOBYTE(v59) = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    uint64_t v70 = v106;
    sub_10000F330(v60, v106, &qword_100185590);
    uint64_t v71 = v70 + *(int *)(v119 + 36);
    *(unsigned char *)uint64_t v71 = v59;
    unint64_t v36 = v137;
    *(void *)(v71 + 8) = v63;
    *(void *)(v71 + 16) = v65;
    *(void *)(v71 + 24) = v67;
    *(void *)(v71 + 32) = v69;
    *(unsigned char *)(v71 + 40) = 0;
    uint64_t v72 = v60;
    LOBYTE(v33) = v94;
    uint64_t v32 = v118;
    sub_10000F394(v72, &qword_100185590);
    uint64_t v73 = v70;
    uint64_t v34 = v97;
    sub_10000F2CC(v73, v136, &qword_100185E18);
    uint64_t v38 = v119;
    uint64_t v37 = 0;
  }
  uint64_t v74 = v136;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v136, v37, 1, v38);
  unsigned __int8 v75 = v178;
  LODWORD(v116) = v178;
  unsigned __int8 v76 = v176;
  LODWORD(v119) = v176;
  sub_10000F330(v74, v128, &qword_100185E20);
  HIDWORD(v150) = *(_DWORD *)&v177[3];
  *(_DWORD *)((char *)&v150 + 9) = *(_DWORD *)v177;
  *(_DWORD *)((char *)&v151 + 9) = *(_DWORD *)v175;
  HIDWORD(v151) = *(_DWORD *)&v175[3];
  *(void *)(v30 + 160) = v111;
  *(unsigned char *)(v30 + 176) = 1;
  v31[32] = 1;
  *uint64_t v31 = 0;
  uint64_t v77 = v110;
  *(void *)(v30 + 264) = v120;
  *(void *)(v30 + 272) = v77;
  *(void *)&long long v143 = v142;
  *((void *)&v143 + 1) = v135;
  *(void *)&long long v144 = v134;
  *((void *)&v144 + 1) = v133;
  *(void *)&long long v145 = v141;
  *((void *)&v145 + 1) = v140;
  *(void *)&long long v146 = v139;
  *((void *)&v146 + 1) = v138;
  *(void *)&long long v147 = v132;
  *((void *)&v147 + 1) = v36;
  *(void *)&long long v148 = v131;
  *((void *)&v148 + 1) = v130;
  LODWORD(v149) = v129;
  *((void *)&v149 + 1) = v127;
  *(void *)&long long v150 = v123;
  BYTE8(v150) = v75;
  *(void *)&long long v151 = v124;
  BYTE8(v151) = v76;
  *(void *)&long long v152 = KeyPath;
  *((void *)&v152 + 1) = v125;
  long long v78 = v146;
  *(_OWORD *)(v30 + 32) = v145;
  *(_OWORD *)(v30 + 48) = v78;
  long long v79 = v148;
  *(_OWORD *)(v30 + 64) = v147;
  *(_OWORD *)(v30 + 80) = v79;
  long long v80 = v144;
  *(_OWORD *)uint64_t v30 = v143;
  *(_OWORD *)(v30 + 16) = v80;
  long long v81 = v149;
  long long v82 = v150;
  long long v83 = v152;
  *(_OWORD *)(v30 + 128) = v151;
  *(_OWORD *)(v30 + 144) = v83;
  *(_OWORD *)(v30 + 96) = v81;
  *(_OWORD *)(v30 + 112) = v82;
  *(void *)(v30 + 168) = 0;
  uint64_t v84 = v122;
  *(void *)(v30 + 184) = v122;
  *(void *)(v30 + 192) = v32;
  *(unsigned char *)(v30 + 200) = v33;
  *(void *)(v30 + 208) = v121;
  *(void *)(v30 + 216) = v34;
  uint64_t v86 = v113;
  uint64_t v85 = v114;
  *(void *)(v30 + 224) = v113;
  char v87 = v112;
  *(unsigned char *)(v30 + 232) = v112;
  *(void *)(v30 + 240) = v115;
  *(void *)(v30 + 248) = v85;
  *(void *)(v30 + 280) = 0;
  uint64_t v88 = v30 + *(int *)(sub_10000AA4C(&qword_100185E28) + 80);
  uint64_t v89 = v128;
  sub_10000F330(v128, v88, &qword_100185E20);
  sub_100104650((uint64_t *)&v143);
  uint64_t v90 = v84;
  uint64_t v91 = v118;
  sub_100055180(v90, v118, v33);
  swift_bridgeObjectRetain();
  sub_100055180(v34, v86, v87);
  swift_bridgeObjectRetain();
  sub_10002E2F8(v85, 0);
  swift_retain();
  sub_10000F394(v136, &qword_100185E20);
  sub_10000F394(v89, &qword_100185E20);
  sub_100054D14(v122, v91, v33);
  swift_bridgeObjectRelease();
  sub_100054D14(v34, v86, v87);
  swift_bridgeObjectRelease();
  sub_10002E358(v85, 0);
  swift_release();
  uint64_t v153 = v142;
  uint64_t v154 = v135;
  uint64_t v155 = v134;
  uint64_t v156 = v133;
  uint64_t v157 = v141;
  uint64_t v158 = v140;
  uint64_t v159 = v139;
  uint64_t v160 = v138;
  uint64_t v161 = v132;
  unint64_t v162 = v137;
  uint64_t v163 = v131;
  uint64_t v164 = v130;
  int v165 = v129;
  id v166 = v127;
  uint64_t v167 = v123;
  char v168 = v116;
  *(_DWORD *)long long v169 = *(_DWORD *)v177;
  *(_DWORD *)&v169[3] = *(_DWORD *)&v177[3];
  uint64_t v170 = v124;
  char v171 = v119;
  *(_DWORD *)uint64_t v172 = *(_DWORD *)v175;
  *(_DWORD *)&v172[3] = *(_DWORD *)&v175[3];
  uint64_t v173 = KeyPath;
  uint64_t v174 = v125;
  return sub_1001046B4(&v153);
}

uint64_t sub_1000FD758@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001855B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_1000FB6E4();
  uint64_t v47 = v5;
  v41[2] = sub_100054CC0();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v11 = type metadata accessor for Font.Design();
  uint64_t v12 = *(void *)(v11 - 8);
  v41[0] = *(void *)(v12 + 56);
  v41[1] = v12 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41[0])(v4, 1, 1, v11);
  static Font.system(size:weight:design:)();
  sub_10000F394((uint64_t)v4, (uint64_t *)&unk_1001855B0);
  static Font.Weight.medium.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v13 = Text.font(_:)();
  uint64_t v43 = v14;
  uint64_t v44 = v13;
  char v16 = v15;
  uint64_t v45 = v17;
  swift_release();
  int v42 = v16 & 1;
  sub_100054D14(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1000FBB7C();
  uint64_t v47 = v18;
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41[0])(v4, 1, 1, v11);
  static Font.system(size:weight:design:)();
  sub_10000F394((uint64_t)v4, (uint64_t *)&unk_1001855B0);
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  char v28 = v27;
  swift_release();
  LOBYTE(v4) = v28 & 1;
  sub_100054D14(v19, v21, v23);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  uint64_t v29 = Text.foregroundColor(_:)();
  uint64_t v31 = v30;
  char v33 = v32;
  uint64_t v35 = v34;
  swift_release();
  sub_100054D14(v24, v26, (char)v4);
  swift_bridgeObjectRelease();
  char v36 = v42;
  LOBYTE(v46) = v42;
  uint64_t v38 = v43;
  uint64_t v37 = v44;
  *(void *)a1 = v44;
  *(void *)(a1 + 8) = v38;
  *(unsigned char *)(a1 + 16) = v36;
  *(void *)(a1 + 24) = v45;
  *(void *)(a1 + 32) = v29;
  *(void *)(a1 + 40) = v31;
  *(unsigned char *)(a1 + 48) = v33 & 1;
  *(void *)(a1 + 56) = v35;
  uint64_t v39 = v37;
  sub_100055180(v37, v38, v36);
  swift_bridgeObjectRetain();
  sub_100055180(v29, v31, v33 & 1);
  swift_bridgeObjectRetain();
  sub_100054D14(v29, v31, v33 & 1);
  swift_bridgeObjectRelease();
  sub_100054D14(v39, v38, v46);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FDABC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000AB54(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  sub_10000AAF0((uint64_t)a1, (uint64_t)v24);
  sub_1000EADA8(a3, (uint64_t)v23);
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v14 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v14 + 128) = v15;
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(v14 + 160) = *(_DWORD *)(a2 + 144);
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 64) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v14 + 96) = v17;
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v14 + 32) = v18;
  sub_100063848(v24, v14 + 168);
  long long v19 = v23[1];
  *(_OWORD *)(v14 + 208) = v23[0];
  *(_OWORD *)(v14 + 224) = v19;
  *(_OWORD *)(v14 + 240) = v23[2];
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  uint64_t v20 = (uint64_t (**)())(a4 + *(int *)(type metadata accessor for BannerShareableContentActionButton(0) + 20));
  *uint64_t v20 = sub_100104614;
  v20[1] = (uint64_t (*)())v14;
  return sub_100102F64(a2);
}

uint64_t sub_1000FDC84(uint64_t a1, void *a2, uint64_t a3)
{
  long long v8 = *(_OWORD *)(a1 + 16);
  uint64_t v4 = a2[3];
  uint64_t v5 = (void (*)(char *, char *, uint64_t))a2[4];
  uint64_t v6 = sub_10000AB54(a2, v4);
  sub_10005EBD8((uint64_t)v6, a3, 0, *((id *)&v8 + 1), v4, v5);
  return sub_100104490((uint64_t)&v8);
}

uint64_t sub_1000FDD04(uint64_t a1)
{
  sub_10005EB7C(a1 + 48, (uint64_t)v2);
  uint64_t result = sub_10005EB7C((uint64_t)v2, (uint64_t)v3);
  if (!(v4 >> 62))
  {
    sub_10000AA4C(&qword_100184DB0);
    return State.wrappedValue.setter();
  }
  return result;
}

void sub_1000FDD84(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 120);
  if (v1 >> 62)
  {
    id v13 = objc_allocWithZone((Class)UIViewController);
    [v13 init];
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 144);
    uint64_t v3 = *(void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 136);
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 112);
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    v14[0] = *(void *)(a1 + 48);
    v14[1] = v12;
    void v14[2] = v11;
    v14[3] = v10;
    v14[4] = v9;
    v14[5] = v8;
    v14[6] = v7;
    v14[7] = v5;
    v14[8] = v6;
    int v15 = v1;
    uint64_t v16 = v3;
    uint64_t v17 = v4;
    int v18 = v2;
    objc_allocWithZone((Class)type metadata accessor for ContactDetailsViewController());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000A1E28((uint64_t)v14, (uint64_t)sub_1000FDEAC, 0);
  }
}

void sub_1000FDEAC(void *a1)
{
  id v1 = [a1 presentingViewController];
  if (v1)
  {
    id v2 = v1;
    [v1 dismissViewControllerAnimated:1 completion:0];
  }
}

uint64_t sub_1000FDF18@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FC194(a1);
}

uint64_t sub_1000FDF74()
{
  uint64_t v1 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, v0, v6, v8);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
LABEL_4:
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  if (v11 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:)) {
    goto LABEL_4;
  }
  sub_100102A28(v0, (uint64_t)v3, type metadata accessor for NearbySharingInteractionFailureView);
  void v14[2] = 0;
  v14[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v13._uint64_t countAndFlagsBits = 0xD000000000000040;
  v13._object = (void *)0x8000000100133DD0;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FE2CC()
{
  uint64_t v1 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, v0, v6, v8);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
LABEL_4:
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  if (v11 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:)) {
    goto LABEL_4;
  }
  sub_100102A28(v0, (uint64_t)v3, type metadata accessor for NearbySharingInteractionFailureView);
  void v14[2] = 0;
  v14[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v13._uint64_t countAndFlagsBits = 0xD000000000000040;
  v13._object = (void *)0x8000000100133DD0;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FE610@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000AA4C(&qword_100185B78);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100185B80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_100185B88);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Color.RGBColorSpace();
  __n128 v15 = __chkstk_darwin(v14);
  (*(void (**)(char *, void, __n128))(v17 + 104))((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v15);
  uint64_t v18 = Color.init(_:red:green:blue:opacity:)();
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4033000000000000;
  v6[16] = 0;
  long long v19 = &v6[*(int *)(sub_10000AA4C(&qword_100185B90) + 44)];
  *(void *)long long v19 = static VerticalAlignment.center.getter();
  *((void *)v19 + 1) = 0x402C000000000000;
  v19[16] = 0;
  uint64_t v20 = sub_10000AA4C(&qword_100185B98);
  sub_1000FE940(v18, v2, (uint64_t)&v19[*(int *)(v20 + 44)]);
  uint64_t v21 = static Alignment.center.getter();
  sub_1000F98F0(0.0, 1, 1.79769313e308, 0, 0.0, 1, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v21, v22, &qword_100185B78, &qword_100185B80);
  sub_10000F394((uint64_t)v6, &qword_100185B78);
  uint64_t v23 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000F330((uint64_t)v9, (uint64_t)v13, &qword_100185B80);
  uint64_t v25 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  *uint64_t v25 = KeyPath;
  v25[1] = v23;
  sub_10000F394((uint64_t)v9, &qword_100185B80);
  uint64_t v26 = static Color.black.getter();
  char v27 = static Edge.Set.all.getter();
  swift_release();
  sub_10000F330((uint64_t)v13, a1, &qword_100185B88);
  uint64_t v28 = a1 + *(int *)(sub_10000AA4C((uint64_t *)&unk_100185BA0) + 36);
  *(void *)uint64_t v28 = v26;
  *(unsigned char *)(v28 + 8) = v27;
  return sub_10000F394((uint64_t)v13, &qword_100185B88);
}

uint64_t sub_1000FE940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v3 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v62 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000AA4C(&qword_1001852C0) - 8;
  __chkstk_darwin(v56);
  uint64_t v6 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = type metadata accessor for Image.Scale();
  uint64_t v7 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Image.ResizingMode();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_1001852C8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = sub_10000AA4C(&qword_100185BB0) - 8;
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000AA4C(&qword_100185BB8) - 8;
  __chkstk_darwin(v59);
  uint64_t v51 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000AA4C(&qword_100185BC0) - 8;
  __chkstk_darwin(v58);
  uint64_t v57 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000AA4C(&qword_100185BC8) - 8;
  __chkstk_darwin(v61);
  uint64_t v66 = (uint64_t)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v60 = (uint64_t)&v51 - v22;
  Image.init(_internalSystemName:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v9);
  uint64_t v23 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v25 = v52;
  uint64_t v24 = v53;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v52, enum case for Image.Scale.large(_:), v53);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v6 + *(int *)(v56 + 36), v25, v24);
  *uint64_t v6 = KeyPath;
  sub_10000F330((uint64_t)v6, (uint64_t)v16 + *(int *)(v14 + 44), &qword_1001852C0);
  uint64_t *v16 = v23;
  swift_retain();
  sub_10000F394((uint64_t)v6, &qword_1001852C0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v24);
  swift_release();
  uint64_t v27 = (uint64_t)v62;
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v28 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = (uint64_t)v54;
  uint64_t v31 = (uint64_t *)&v54[*(int *)(v55 + 44)];
  uint64_t v32 = sub_10000AA4C(&qword_100185BD0);
  sub_10000F330(v27, (uint64_t)v31 + *(int *)(v32 + 28), (uint64_t *)&unk_1001854E0);
  *uint64_t v31 = v29;
  sub_10000F330((uint64_t)v16, v30, &qword_1001852C8);
  sub_10000F394(v27, (uint64_t *)&unk_1001854E0);
  sub_10000F394((uint64_t)v16, &qword_1001852C8);
  uint64_t v33 = swift_getKeyPath();
  uint64_t v34 = v51;
  sub_10000F330(v30, v51, &qword_100185BB0);
  uint64_t v35 = (uint64_t *)(v34 + *(int *)(v59 + 44));
  uint64_t v36 = v63;
  *uint64_t v35 = v33;
  v35[1] = v36;
  swift_retain();
  sub_10000F394(v30, &qword_100185BB0);
  uint64_t v37 = v57;
  sub_10000F330(v34, v57, &qword_100185BB8);
  uint64_t v38 = v37 + *(int *)(v58 + 44);
  *(void *)uint64_t v38 = 0;
  *(_WORD *)(v38 + 8) = 1;
  sub_10000F394(v34, &qword_100185BB8);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v39 = v66;
  sub_10000F330(v37, v66, &qword_100185BC0);
  uint64_t v40 = (_OWORD *)(v39 + *(int *)(v61 + 44));
  long long v41 = v68;
  *uint64_t v40 = v67;
  v40[1] = v41;
  v40[2] = v69;
  sub_10000F394(v37, &qword_100185BC0);
  uint64_t v42 = v60;
  sub_10000F2CC(v39, v60, &qword_100185BC8);
  uint64_t v63 = static HorizontalAlignment.leading.getter();
  sub_1000FF1CC(v64, v70);
  v71[304] = 1;
  memcpy(&v71[7], v70, 0x122uLL);
  memcpy(v72, v71, sizeof(v72));
  uint64_t v64 = swift_getKeyPath();
  type metadata accessor for SystemApertureLayoutState();
  sub_100102164((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
  uint64_t v43 = EnvironmentObject.init()();
  uint64_t v45 = v44;
  char v74 = 0;
  sub_10000F330(v42, v39, &qword_100185BC8);
  LOBYTE(v30) = v74;
  uint64_t v46 = v65;
  sub_10000F330(v39, v65, &qword_100185BC8);
  uint64_t v47 = (void *)(v46 + *(int *)(sub_10000AA4C(&qword_100185BD8) + 48));
  uint64_t v48 = v63;
  v77[0] = v63;
  v77[1] = 0;
  LOBYTE(v77[2]) = 1;
  memcpy((char *)&v77[2] + 1, v72, 0x129uLL);
  *(_DWORD *)((char *)&v77[39] + 2) = v75;
  HIWORD(v77[39]) = v76;
  uint64_t v49 = v64;
  v77[40] = v64;
  LOBYTE(v77[41]) = v30;
  *(_DWORD *)((char *)&v77[41] + 1) = *(_DWORD *)v73;
  HIDWORD(v77[41]) = *(_DWORD *)&v73[3];
  v77[42] = v43;
  v77[43] = v45;
  memcpy(v47, v77, 0x160uLL);
  sub_1001031EC((uint64_t)v77);
  sub_10000F394(v42, &qword_100185BC8);
  v78[0] = v48;
  v78[1] = 0;
  char v79 = 1;
  memcpy(v80, v72, sizeof(v80));
  int v81 = v75;
  __int16 v82 = v76;
  uint64_t v83 = v49;
  char v84 = v30;
  *(_DWORD *)uint64_t v85 = *(_DWORD *)v73;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v73[3];
  uint64_t v86 = v43;
  uint64_t v87 = v45;
  sub_100103294((uint64_t)v78);
  return sub_10000F394(v66, &qword_100185BC8);
}

uint64_t sub_1000FF1CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001855B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v79[0] = sub_1000FDF74();
  *((void *)&v79[0] + 1) = v5;
  unint64_t v47 = sub_100054CC0();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v45 = type metadata accessor for Font.Design();
  uint64_t v11 = *(void *)(v45 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v43 = v4;
  uint64_t v44 = v12;
  uint64_t v46 = v11 + 56;
  v12(v4, 1, 1, v45);
  static Font.system(size:weight:design:)();
  sub_10000F394((uint64_t)v4, (uint64_t *)&unk_1001855B0);
  static Font.Weight.medium.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v13 = Text.font(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  sub_100054D14(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v20 = static Alignment.leading.getter();
  sub_1000FA5B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v79, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v17 & 1, v19);
  sub_100054D14(v13, v15, v17 & 1);
  swift_bridgeObjectRelease();
  long long v65 = v79[6];
  long long v66 = v79[7];
  long long v67 = v79[8];
  long long v61 = v79[2];
  long long v62 = v79[3];
  long long v63 = v79[4];
  long long v64 = v79[5];
  long long v59 = v79[0];
  long long v60 = v79[1];
  *(void *)&v79[0] = sub_1000FE2CC();
  *((void *)&v79[0] + 1) = v22;
  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v25 = v24;
  LOBYTE(v13) = v26 & 1;
  uint64_t v27 = (uint64_t)v43;
  v44(v43, 1, 1, v45);
  static Font.system(size:weight:design:)();
  sub_10000F394(v27, (uint64_t *)&unk_1001855B0);
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v28 = Text.font(_:)();
  uint64_t v30 = v29;
  char v32 = v31;
  swift_release();
  LOBYTE(v27) = v32 & 1;
  sub_100054D14(v23, v25, v13);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  uint64_t v33 = Text.foregroundColor(_:)();
  uint64_t v35 = v34;
  LOBYTE(v25) = v36;
  uint64_t v38 = v37;
  swift_release();
  sub_100054D14(v28, v30, v27);
  swift_bridgeObjectRelease();
  uint64_t v39 = static Alignment.leading.getter();
  sub_1000FA5B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v79, 0.0, 1, 0.0, 1, v39, v40, v33, v35, v25 & 1, v38);
  sub_100054D14(v33, v35, v25 & 1);
  swift_bridgeObjectRelease();
  long long v56 = v79[6];
  long long v57 = v79[7];
  long long v58 = v79[8];
  long long v52 = v79[2];
  long long v53 = v79[3];
  long long v54 = v79[4];
  long long v55 = v79[5];
  long long v50 = v79[0];
  long long v51 = v79[1];
  v68[6] = v65;
  v68[7] = v66;
  v68[8] = v67;
  v68[2] = v61;
  v68[3] = v62;
  v68[4] = v63;
  v68[5] = v64;
  v68[0] = v59;
  v68[1] = v60;
  long long v75 = v79[6];
  long long v76 = v79[7];
  long long v77 = v79[8];
  long long v71 = v79[2];
  long long v72 = v79[3];
  long long v73 = v79[4];
  long long v74 = v79[5];
  long long v69 = v79[0];
  long long v70 = v79[1];
  v79[6] = v65;
  v79[7] = v66;
  v79[2] = v61;
  v79[3] = v62;
  v79[4] = v63;
  v79[5] = v64;
  v79[0] = v59;
  v79[1] = v60;
  v79[16] = v76;
  v79[17] = v79[8];
  v79[12] = v72;
  v79[13] = v73;
  v79[14] = v74;
  v79[15] = v75;
  v79[8] = v67;
  v79[9] = v69;
  __int16 v78 = 256;
  LOWORD(v79[18]) = 256;
  v79[10] = v70;
  v79[11] = v71;
  memcpy(v49, v79, 0x122uLL);
  v80[6] = v56;
  v80[7] = v57;
  v80[8] = v58;
  v80[2] = v52;
  v80[3] = v53;
  v80[5] = v55;
  v80[4] = v54;
  v80[0] = v50;
  v80[1] = v51;
  __int16 v81 = 256;
  sub_1000F03A0((uint64_t)v68);
  sub_1000F03A0((uint64_t)&v69);
  sub_1000F03E0((uint64_t)v80);
  v82[6] = v65;
  v82[7] = v66;
  v82[8] = v67;
  v82[2] = v61;
  v82[3] = v62;
  v82[4] = v63;
  v82[5] = v64;
  v82[0] = v59;
  v82[1] = v60;
  return sub_1000F03E0((uint64_t)v82);
}

double sub_1000FF730@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  sub_10005B40C(v6);

  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v9 = *(void *)v6;
    uint64_t v43 = *((void *)v6 + 1);
    uint64_t v44 = v9;
    uint64_t v10 = *((void *)v6 + 2);
    uint64_t v41 = *((void *)v6 + 3);
    uint64_t v42 = v10;
    uint64_t v11 = *((void *)v6 + 4);
    uint64_t v39 = *((void *)v6 + 5);
    uint64_t v40 = v11;
    uint64_t v12 = *((void *)v6 + 6);
    uint64_t v37 = *((void *)v6 + 7);
    uint64_t v38 = v12;
    uint64_t v13 = *((void *)v6 + 8);
    uint64_t v35 = *((void *)v6 + 9);
    uint64_t v36 = v13;
    uint64_t v14 = *((void *)v6 + 11);
    uint64_t v34 = *((void *)v6 + 10);
    int v15 = *((_DWORD *)v6 + 24);
    sub_1000608FC((uint64_t)(v6 + 104));
LABEL_7:
    uint64_t KeyPath = swift_getKeyPath();
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100102164(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v22 = v7;
    uint64_t v23 = ObservedObject.init(wrappedValue:)();
    uint64_t v25 = v24;
    LOBYTE(v68) = 0;
    State.init(wrappedValue:)();
    *(void *)&long long v54 = KeyPath;
    BYTE8(v54) = 0;
    *(void *)&long long v55 = v23;
    *((void *)&v55 + 1) = v25;
    LOBYTE(v56) = v77;
    *((void *)&v56 + 1) = *((void *)&v77 + 1);
    *(void *)&long long v57 = v44;
    *((void *)&v57 + 1) = v43;
    *(void *)&long long v58 = v42;
    *((void *)&v58 + 1) = v41;
    *(void *)&long long v59 = v40;
    *((void *)&v59 + 1) = v39;
    *(void *)&long long v60 = v38;
    *((void *)&v60 + 1) = v37;
    *(void *)&long long v61 = v36;
    *((void *)&v61 + 1) = v35;
    *(void *)&long long v62 = v34;
    *((void *)&v62 + 1) = v14;
    int v63 = v15;
    v64[4] = v58;
    v64[5] = v59;
    v64[2] = v56;
    v64[3] = v57;
    int v65 = v15;
    v64[7] = v61;
    v64[8] = v62;
    v64[6] = v60;
    v64[0] = v54;
    v64[1] = v55;
    sub_100102F58((uint64_t)v64);
    sub_10000F2CC((uint64_t)v64, (uint64_t)&v77, &qword_100185B70);
    sub_100102F64((uint64_t)&v54);
    sub_100102EB0();
    sub_100102F04();
    _ConditionalContent<>.init(storage:)();
    long long v74 = v51;
    long long v75 = v52;
    v76[0] = *(_OWORD *)v53;
    *(void *)((char *)v76 + 13) = *(void *)&v53[13];
    long long v70 = v47;
    long long v71 = v48;
    long long v72 = v49;
    long long v73 = v50;
    long long v68 = v45;
    long long v69 = v46;
    sub_100103028((uint64_t)&v68);
    sub_10000F2CC((uint64_t)&v68, (uint64_t)&v77, &qword_100185B48);
    sub_10000AA4C(&qword_100185B50);
    sub_1001040F4(&qword_100185B58, &qword_100185B50, (void (*)(void))sub_100102EB0, (void (*)(void))sub_100102F04);
    _ConditionalContent<>.init(storage:)();
    sub_100103030((uint64_t)&v54);
    long long v83 = v66[6];
    long long v84 = v66[7];
    v85[0] = *(_OWORD *)v67;
    *(void *)((char *)v85 + 14) = *(void *)&v67[14];
    long long v79 = v66[2];
    long long v80 = v66[3];
    long long v81 = v66[4];
    long long v82 = v66[5];
    long long v26 = v66[0];
    long long v27 = v66[1];
LABEL_9:
    long long v77 = v26;
    long long v78 = v27;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v16 = *(void *)v6;
    uint64_t v43 = *((void *)v6 + 1);
    uint64_t v44 = v16;
    uint64_t v17 = *((void *)v6 + 2);
    uint64_t v41 = *((void *)v6 + 3);
    uint64_t v42 = v17;
    uint64_t v18 = *((void *)v6 + 4);
    uint64_t v39 = *((void *)v6 + 5);
    uint64_t v40 = v18;
    uint64_t v19 = *((void *)v6 + 6);
    uint64_t v37 = *((void *)v6 + 7);
    uint64_t v38 = v19;
    uint64_t v20 = *((void *)v6 + 8);
    uint64_t v35 = *((void *)v6 + 9);
    uint64_t v36 = v20;
    uint64_t v14 = *((void *)v6 + 11);
    uint64_t v34 = *((void *)v6 + 10);
    int v15 = *((_DWORD *)v6 + 24);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload)
  {
    sub_100102EA4((uint64_t)v66);
    sub_10000F2CC((uint64_t)v66, (uint64_t)&v77, &qword_100185B48);
    sub_10000AA4C(&qword_100185B50);
    sub_1001040F4(&qword_100185B58, &qword_100185B50, (void (*)(void))sub_100102EB0, (void (*)(void))sub_100102F04);
    _ConditionalContent<>.init(storage:)();
    sub_100102104((uint64_t)v6, type metadata accessor for NearbySharingInteractionViewState);
    long long v83 = v74;
    long long v84 = v75;
    v85[0] = v76[0];
    *(void *)((char *)v85 + 14) = *(void *)((char *)v76 + 14);
    long long v79 = v70;
    long long v80 = v71;
    long long v81 = v72;
    long long v82 = v73;
    long long v26 = v68;
    long long v27 = v69;
    goto LABEL_9;
  }
  swift_release();
  sub_1001030F4((uint64_t)v64);
  sub_10000F2CC((uint64_t)v64, (uint64_t)&v77, &qword_100185B70);
  sub_100102EB0();
  sub_100102F04();
  _ConditionalContent<>.init(storage:)();
  long long v74 = v51;
  long long v75 = v52;
  v76[0] = *(_OWORD *)v53;
  *(void *)((char *)v76 + 13) = *(void *)&v53[13];
  long long v70 = v47;
  long long v71 = v48;
  long long v72 = v49;
  long long v73 = v50;
  long long v68 = v45;
  long long v69 = v46;
  sub_100103028((uint64_t)&v68);
  sub_10000F2CC((uint64_t)&v68, (uint64_t)v66, &qword_100185B48);
  sub_10000AA4C(&qword_100185B50);
  sub_1001040F4(&qword_100185B58, &qword_100185B50, (void (*)(void))sub_100102EB0, (void (*)(void))sub_100102F04);
  _ConditionalContent<>.init(storage:)();
LABEL_10:
  long long v28 = v84;
  *(_OWORD *)(a2 + 96) = v83;
  *(_OWORD *)(a2 + 112) = v28;
  *(_OWORD *)(a2 + 128) = v85[0];
  *(void *)(a2 + 142) = *(void *)((char *)v85 + 14);
  long long v29 = v80;
  *(_OWORD *)(a2 + 32) = v79;
  *(_OWORD *)(a2 + 48) = v29;
  long long v30 = v82;
  *(_OWORD *)(a2 + 64) = v81;
  *(_OWORD *)(a2 + 80) = v30;
  double result = *(double *)&v77;
  long long v32 = v78;
  *(_OWORD *)a2 = v77;
  *(_OWORD *)(a2 + 16) = v32;
  return result;
}

uint64_t sub_1000FFD3C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v5 = sub_10000AA4C(&qword_100184A48);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000AA4C(&qword_100185B30);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  int v15 = (_OWORD *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000FF730(a2, (uint64_t)&v34);
  LOBYTE(v45) = 1;
  LOBYTE(v43[0]) = 0;
  sub_1001029D4();
  uint64_t v16 = static AnyTransition.modifier<A>(active:identity:)();
  v43[6] = v40;
  v43[7] = v41;
  v44[0] = *(_OWORD *)v42;
  *(void *)((char *)v44 + 14) = *(void *)&v42[14];
  v43[2] = v36;
  v43[3] = v37;
  v43[4] = v38;
  v43[5] = v39;
  v43[0] = v34;
  v43[1] = v35;
  *((void *)&v44[1] + 1) = v16;
  long long v51 = v40;
  long long v52 = v41;
  long long v47 = v36;
  long long v48 = v37;
  long long v49 = v38;
  long long v50 = v39;
  long long v45 = v34;
  long long v46 = v35;
  long long v53 = v44[0];
  long long v54 = v44[1];
  uint64_t v17 = static Animation.default.getter();
  id v18 = a2;
  sub_10005B40C(v11);

  sub_100102A28((uint64_t)v11, (uint64_t)v8 + *(int *)(v6 + 44), type metadata accessor for NearbySharingInteractionViewState);
  *uint64_t v8 = v17;
  sub_10000F330((uint64_t)v8, (uint64_t)v15 + *(int *)(v13 + 44), &qword_100184A48);
  long long v19 = v52;
  v15[6] = v51;
  v15[7] = v19;
  long long v20 = v54;
  v15[8] = v53;
  v15[9] = v20;
  long long v21 = v48;
  v15[2] = v47;
  v15[3] = v21;
  long long v22 = v50;
  v15[4] = v49;
  v15[5] = v22;
  long long v23 = v46;
  _OWORD *v15 = v45;
  v15[1] = v23;
  sub_100102A90((uint64_t)&v45);
  sub_10000F394((uint64_t)v8, &qword_100184A48);
  sub_100102104((uint64_t)v11, type metadata accessor for NearbySharingInteractionViewState);
  sub_100102C78((uint64_t)v43);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v33;
  *(void *)(v24 + 24) = v18;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  type metadata accessor for SystemApertureLayoutState();
  sub_100102164((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
  id v27 = v18;
  swift_retain();
  uint64_t v28 = EnvironmentObject.init()();
  uint64_t v30 = v29;
  sub_10000F330((uint64_t)v15, a3, &qword_100185B30);
  swift_release();
  uint64_t v31 = a3 + *(int *)(sub_10000AA4C(&qword_100185B40) + 36);
  *(void *)uint64_t v31 = KeyPath;
  *(unsigned char *)(v31 + 8) = 0;
  *(void *)(v31 + 16) = v26;
  *(unsigned char *)(v31 + 24) = 0;
  *(void *)(v31 + 32) = v28;
  *(void *)(v31 + 40) = v30;
  *(void *)(v31 + 48) = sub_100102E9C;
  *(void *)(v31 + 56) = v24;
  return sub_10000F394((uint64_t)v15, &qword_100185B30);
}

void sub_1001000E0(uint64_t a1, void *a2)
{
  id v2 = a2;
  int v3 = sub_10005D840();

  if (v3 == 1)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B150(v4, (uint64_t)qword_10018D128);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ending nearby interaction because banner view was dismissed", v7, 2u);
      swift_slowDealloc();
    }

    id v8 = v2;
    sub_100058548();
  }
}

uint64_t sub_100100218@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FFD3C(*(void *)v1, *(void **)(v1 + 8), a1);
}

uint64_t sub_100100220@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100185C08);
  __chkstk_darwin(v3 - 8);
  long long v69 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v65);
  long long v67 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000AA4C(&qword_100185C10);
  __chkstk_darwin(v64);
  long long v68 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000AA4C(&qword_100185C18);
  __chkstk_darwin(v70);
  uint64_t v66 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t v11 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C((uint64_t *)&unk_100185A70);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  long long v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  long long v23 = (char *)&v58 - v22;
  uint64_t v24 = sub_10000AA4C(&qword_100185C20);
  __chkstk_darwin(v24);
  id v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100102164(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v28 = a1;
    uint64_t v29 = ObservedObject.init(wrappedValue:)();
    uint64_t v31 = v30;
    char v32 = static Edge.Set.all.getter();
    uint64_t v33 = static Color.black.getter();
    char v34 = static Edge.Set.all.getter();
    *(void *)id v27 = v29;
    *((void *)v27 + 1) = v31;
    v27[16] = v32;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
    v27[56] = 1;
    *((void *)v27 + 8) = v33;
    v27[72] = v34;
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C(&qword_100185C30);
    sub_100103440();
    sub_10010350C();
    uint64_t v35 = v71;
    _ConditionalContent<>.init(storage:)();
    uint64_t v36 = sub_10000AA4C(&qword_100185C28);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
  }
  long long v59 = v20;
  long long v60 = v10;
  long long v61 = v23;
  uint64_t v62 = v18;
  uint64_t v63 = v17;
  long long v38 = v68;
  uint64_t v39 = (uint64_t)v69;
  if (qword_10017F610 != -1)
  {
    uint64_t v57 = v25;
    swift_once();
    uint64_t v25 = v57;
  }
  uint64_t v40 = (uint64_t)v38;
  long long v41 = v16;
  if (*(void *)(*(void *)(qword_10018CE80
                             + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
  {
    uint64_t v58 = v25;
    swift_retain();
    Activity.attributes.getter();
    swift_release();
    sub_10000F330((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v16, (uint64_t *)&unk_100185A70);
    sub_100102104((uint64_t)v13, type metadata accessor for NearbySharingInteractionAttributes);
    uint64_t v43 = v62;
    uint64_t v42 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v16, 1, v63) != 1)
    {
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      long long v45 = v61;
      v44(v61, v41, v42);
      long long v46 = v59;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v59, v45, v42);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v48 = (uint64_t)v67;
      v44(v67, v46, v42);
      uint64_t v49 = v48 + *(int *)(v65 + 20);
      *(void *)uint64_t v49 = KeyPath;
      *(unsigned char *)(v49 + 8) = 0;
      LOBYTE(KeyPath) = static Edge.Set.all.getter();
      sub_100102A28(v48, v40, type metadata accessor for NearbySharingInteractionFailureView);
      uint64_t v50 = v40 + *(int *)(v64 + 36);
      *(unsigned char *)uint64_t v50 = KeyPath;
      *(_OWORD *)(v50 + 8) = 0u;
      *(_OWORD *)(v50 + 24) = 0u;
      *(unsigned char *)(v50 + 40) = 1;
      sub_100102104(v48, type metadata accessor for NearbySharingInteractionFailureView);
      uint64_t v51 = static Color.black.getter();
      LOBYTE(v46) = static Edge.Set.all.getter();
      uint64_t v52 = v66;
      sub_10000F330(v40, v66, &qword_100185C10);
      uint64_t v53 = v52 + *(int *)(v70 + 36);
      *(void *)uint64_t v53 = v51;
      *(unsigned char *)(v53 + 8) = (_BYTE)v46;
      sub_10000F394(v40, &qword_100185C10);
      uint64_t v54 = (uint64_t)v60;
      sub_10000F2CC(v52, (uint64_t)v60, &qword_100185C18);
      sub_10000F330(v54, (uint64_t)v27, &qword_100185C18);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100185C30);
      sub_100103440();
      sub_10010350C();
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v54, &qword_100185C18);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v61, v63);
      uint64_t v55 = sub_10000AA4C(&qword_100185C28);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v39, 0, 1, v55);
      return sub_10000F2CC(v39, v71, &qword_100185C08);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v16, 1, 1, v63);
  }
  sub_10000F394((uint64_t)v16, (uint64_t *)&unk_100185A70);
  uint64_t v56 = sub_10000AA4C(&qword_100185C28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v71, 1, 1, v56);
}

uint64_t sub_100100A08@<X0>(uint64_t a1@<X8>)
{
  return sub_100100220(*v1, a1);
}

uint64_t sub_100100A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v32 = sub_10000AA4C(&qword_100185D30) - 8;
  __chkstk_darwin(v32);
  id v2 = (uint64_t *)((char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100185D38);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000AA4C(&qword_100185D40) - 8;
  __chkstk_darwin(v33);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_100185D50);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10012C260;
  uint64_t v14 = enum case for Color.RGBColorSpace.sRGB(_:);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v15(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
  *(void *)(v13 + 32) = Color.init(_:red:green:blue:opacity:)();
  v15(v6, v14, v3);
  *(void *)(v13 + 40) = Color.init(_:red:green:blue:opacity:)();
  v15(v6, v14, v3);
  *(void *)(v13 + 48) = Color.init(_:red:green:blue:opacity:)();
  *(void *)&long long v38 = v13;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  uint64_t v19 = (uint64_t *)((char *)v2 + *(int *)(v32 + 44));
  *uint64_t v19 = static Alignment.center.getter();
  v19[1] = v20;
  uint64_t v21 = sub_10000AA4C(&qword_100185D58);
  __asm { FMOV            V0.2D, #6.0 }
  sub_100100E1C((uint64_t)v19 + *(int *)(v21 + 44), _Q0);
  *id v2 = v16;
  v2[1] = v18;
  sub_10000F330((uint64_t)v2, (uint64_t)&v10[*(int *)(v8 + 44)], &qword_100185D30);
  long long v27 = v36;
  *(_OWORD *)uint64_t v10 = v35;
  *((_OWORD *)v10 + 1) = v27;
  *((void *)v10 + 4) = v37;
  sub_10000F394((uint64_t)v2, &qword_100185D30);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000F330((uint64_t)v10, (uint64_t)v12, &qword_100185D38);
  id v28 = &v12[*(int *)(v33 + 44)];
  long long v29 = v39;
  *(_OWORD *)id v28 = v38;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v40;
  sub_10000F394((uint64_t)v10, &qword_100185D38);
  uint64_t v30 = v34;
  sub_10000F330((uint64_t)v12, v34, &qword_100185D40);
  *(_WORD *)(v30 + *(int *)(sub_10000AA4C(&qword_100185D48) + 36)) = 0;
  return sub_10000F394((uint64_t)v12, &qword_100185D40);
}

uint64_t sub_100100E1C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  __n128 v46 = a2;
  uint64_t v52 = a1;
  uint64_t v2 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v2 - 8);
  uint64_t v51 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for BlendMode();
  uint64_t v4 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C((uint64_t *)&unk_1001855B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100180D90);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (unint64_t *)((char *)v46.n128_u64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v50 = (uint64_t)&v46 - v18;
  uint64_t v19 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v19 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v46 + *(int *)(v23 + 28) - v22;
  uint64_t v25 = (__n128 *)((char *)&v46 - v22);
  uint64_t v47 = (uint64_t)&v46 - v22;
  uint64_t v26 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v27 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v24, v26, v27);
  *uint64_t v25 = v46;
  Image.init(systemName:)();
  static SymbolRenderingMode.monochrome.getter();
  uint64_t v28 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v12, 0, 1, v28);
  v46.n128_u64[0] = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_10000F394((uint64_t)v12, (uint64_t *)&unk_1001854E0);
  static Font.Weight.regular.getter();
  uint64_t v29 = enum case for Font.Design.default(_:);
  uint64_t v30 = type metadata accessor for Font.Design();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v9, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v9, 0, 1, v30);
  uint64_t v32 = static Font.system(size:weight:design:)();
  sub_10000F394((uint64_t)v9, (uint64_t *)&unk_1001855B0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = static Color.white.getter();
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = v4;
  uint64_t v37 = v49;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for BlendMode.destinationOut(_:), v49);
  long long v38 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v39 = (uint64_t)v51;
  v38(v51, v6, v37);
  sub_100102A28(v39, (uint64_t)v16 + *(int *)(v14 + 44), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  void *v16 = v46.n128_u64[0];
  v16[1] = KeyPath;
  v16[2] = v32;
  v16[3] = v35;
  void v16[4] = v34;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100102104(v39, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v37);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v40 = v50;
  sub_10000F2CC((uint64_t)v16, v50, &qword_100180D90);
  uint64_t v42 = v47;
  uint64_t v41 = v48;
  sub_100102A28(v47, v48, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000F330(v40, (uint64_t)v16, &qword_100180D90);
  uint64_t v43 = v52;
  sub_100102A28(v41, v52, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v44 = sub_10000AA4C(&qword_100185D70);
  sub_10000F330((uint64_t)v16, v43 + *(int *)(v44 + 48), &qword_100180D90);
  sub_10000F394(v40, &qword_100180D90);
  sub_100102104(v42, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000F394((uint64_t)v16, &qword_100180D90);
  return sub_100102104(v41, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
}

double sub_10010144C@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = a1;
  static Published.subscript.getter();

  swift_release();
  swift_release();
  if (v11 <= 0xFFFFFFFEFFFFFFFFLL)
  {
    swift_bridgeObjectRetain();
    if (v11 >> 62)
    {
      sub_10005E748(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10, v11);
      sub_10000AA4C(&qword_100185488);
      sub_10010522C((unint64_t *)&qword_100185490, &qword_100185488, (void (*)(void))sub_10006DF94);
      sub_10006F1E0();
      _ConditionalContent<>.init(storage:)();
    }
    else
    {
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      swift_bridgeObjectRetain();
      sub_10000AA4C(&qword_100185488);
      sub_10010522C((unint64_t *)&qword_100185490, &qword_100185488, (void (*)(void))sub_10006DF94);
      sub_10006F1E0();
      _ConditionalContent<>.init(storage:)();
      sub_10005E748(v6, *((uint64_t *)&v6 + 1), v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10, v11);
      swift_bridgeObjectRelease();
    }
  }
  sub_10000AA4C(&qword_100185BE0);
  sub_100103344();
  sub_1001033EC();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_WORD *)(a2 + 64) = v10;
  return result;
}

double sub_100101784@<D0>(uint64_t a1@<X8>)
{
  return sub_10010144C(*(void **)(v1 + 8), a1);
}

uint64_t sub_10010178C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100185A60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v6);
  long long v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100185A68);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000AA4C((uint64_t *)&unk_100185A70);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v25 = (char *)&v45 - v23;
  if (a1)
  {
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100102164(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v26 = a1;
    *uint64_t v14 = ObservedObject.init(wrappedValue:)();
    v14[1] = v27;
    swift_storeEnumTagMultiPayload();
    sub_100028D20();
    sub_100102164(&qword_100180B08, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionFailureView);
    uint64_t v28 = v48;
    _ConditionalContent<>.init(storage:)();
    uint64_t v29 = sub_10000AA4C(&qword_100180AF8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
  }
  __n128 v46 = v8;
  uint64_t v47 = v5;
  if (qword_10017F610 != -1)
  {
    uint64_t v42 = (char *)&v45 - v23;
    uint64_t v43 = v22;
    uint64_t v44 = v24;
    swift_once();
    uint64_t v25 = v42;
    uint64_t v24 = v44;
    uint64_t v22 = v43;
  }
  if (*(void *)(*(void *)(qword_10018CE80
                             + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
  {
    uint64_t v45 = v12;
    uint64_t v31 = v25;
    uint64_t v32 = v22;
    uint64_t v33 = v24;
    swift_retain();
    Activity.attributes.getter();
    swift_release();
    sub_10000F330((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v17, (uint64_t *)&unk_100185A70);
    sub_100102104((uint64_t)v11, type metadata accessor for NearbySharingInteractionAttributes);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v17, 1, v32) != 1)
    {
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v34(v31, v17, v32);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v21, v31, v32);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v36 = v6;
      uint64_t v37 = (uint64_t)v46;
      v34(v46, v21, v32);
      uint64_t v38 = v37 + *(int *)(v36 + 20);
      *(void *)uint64_t v38 = KeyPath;
      *(unsigned char *)(v38 + 8) = 0;
      sub_100102A28(v37, (uint64_t)v14, type metadata accessor for NearbySharingInteractionFailureView);
      swift_storeEnumTagMultiPayload();
      sub_100028D20();
      sub_100102164(&qword_100180B08, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionFailureView);
      uint64_t v39 = (uint64_t)v47;
      _ConditionalContent<>.init(storage:)();
      sub_100102104(v37, type metadata accessor for NearbySharingInteractionFailureView);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
      uint64_t v40 = sub_10000AA4C(&qword_100180AF8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
      return sub_10000F2CC(v39, v48, &qword_100185A60);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 56))(v17, 1, 1);
  }
  sub_10000F394((uint64_t)v17, (uint64_t *)&unk_100185A70);
  uint64_t v41 = sub_10000AA4C(&qword_100180AF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v48, 1, 1, v41);
}

uint64_t type metadata accessor for NearbySharingInteractionFailureView(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100185AE0);
}

uint64_t sub_100101E18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000AA4C(&qword_100185A60);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  type metadata accessor for SystemApertureLayoutState();
  sub_100102164((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
  uint64_t v7 = EnvironmentObject.init()();
  uint64_t v9 = v8;
  sub_10010178C(v6, (uint64_t)v5);
  sub_100103C90(&qword_100185A80, &qword_100185A60, (void (*)(void))sub_100028C74);
  uint64_t v10 = AnyView.init<A>(_:)();
  uint64_t v11 = 0;
  if (v6)
  {
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100102164(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v12 = v6;
    uint64_t v11 = ObservedObject.init(wrappedValue:)();
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v21 = v11;
  uint64_t v22 = v13;
  sub_10000AA4C(&qword_100180B10);
  sub_100103C90(&qword_100180B18, &qword_100180B10, (void (*)(void))sub_100028DEC);
  uint64_t v14 = AnyView.init<A>(_:)();
  uint64_t v15 = AnyView.init<A>(_:)();
  uint64_t v16 = 0;
  if (v6)
  {
    v20[1] = type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100102164(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v17 = v6;
    uint64_t v16 = ObservedObject.init(wrappedValue:)();
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v21 = v16;
  uint64_t v22 = v18;
  uint64_t result = AnyView.init<A>(_:)();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = result;
  *(_WORD *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 4;
  return result;
}

uint64_t sub_100102104(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100102164(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionStatusIndicator()
{
  return &type metadata for NearbySharingInteractionStatusIndicator;
}

uint64_t *sub_1001021C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    LOBYTE(v6) = v10[8];
    sub_10002E2F8(*(void *)v10, v6);
    *(void *)uint64_t v9 = v11;
    v9[8] = v6;
  }
  return a1;
}

uint64_t sub_1001022AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return sub_10002E358(v6, v7);
}

uint64_t sub_100102328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(a2) = *(unsigned char *)(v9 + 8);
  sub_10002E2F8(*(void *)v9, a2);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = a2;
  return a1;
}

uint64_t sub_1001023C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(a2) = *(unsigned char *)(v9 + 8);
  sub_10002E2F8(*(void *)v9, a2);
  uint64_t v11 = *(void *)v8;
  char v12 = *(unsigned char *)(v8 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = a2;
  sub_10002E358(v11, v12);
  return a1;
}

uint64_t sub_100102464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_1001024F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 8);
  uint64_t v11 = *(void *)v8;
  char v12 = *(unsigned char *)(v8 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = (_BYTE)v9;
  sub_10002E358(v11, v12);
  return a1;
}

uint64_t sub_100102588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010259C);
}

uint64_t sub_10010259C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10010265C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100102670);
}

uint64_t sub_100102670(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100102730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104944(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType);
}

ValueMetadata *type metadata accessor for NearbySharingInteractionBannerContent()
{
  return &type metadata for NearbySharingInteractionBannerContent;
}

void *initializeWithTake for NearbySharingInteractionSystemApertureElement(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionSystemApertureElement()
{
  return &type metadata for NearbySharingInteractionSystemApertureElement;
}

void **initializeBufferWithCopyOfBuffer for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for NearbySharingInteractionBannerView(id *a1)
{
}

void **assignWithCopy for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s9AirDropUI45NearbySharingInteractionSystemApertureElementVwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9AirDropUI45NearbySharingInteractionSystemApertureElementVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionBannerView()
{
  return &type metadata for NearbySharingInteractionBannerView;
}

uint64_t sub_1001028E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100102904(uint64_t a1)
{
  unint64_t result = sub_10010292C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10010292C()
{
  unint64_t result = qword_100185B20;
  if (!qword_100185B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185B20);
  }
  return result;
}

uint64_t sub_100102980()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010299C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001029B8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1001029D4()
{
  unint64_t result = qword_100185B38;
  if (!qword_100185B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185B38);
  }
  return result;
}

uint64_t sub_100102A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100102A90(uint64_t a1)
{
  unint64_t v3 = *(unsigned int *)(a1 + 144) | ((unint64_t)*(unsigned __int8 *)(a1 + 148) << 32);
  sub_100102B10(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v3,
    SBYTE4(v3),
    SHIWORD(v3),
    *(unsigned char *)(a1 + 149));
  swift_retain();
  return a1;
}

uint64_t sub_100102B10(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,__int16 a21,char a22)
{
  if ((a22 & 1) == 0)
  {
    char v23 = a20 & 1;
    return sub_100102B70(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, v23);
  }
  return result;
}

uint64_t sub_100102B70(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  if (a20)
  {
    sub_10002E2F8(result, a2 & 1);
    swift_retain();
    id v23 = a4;
    return sub_10005EAC4(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_100102C78(uint64_t a1)
{
  unint64_t v3 = *(unsigned int *)(a1 + 144) | ((unint64_t)*(unsigned __int8 *)(a1 + 148) << 32);
  sub_100102CF8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v3,
    SBYTE4(v3),
    SHIWORD(v3),
    *(unsigned char *)(a1 + 149));
  swift_release();
  return a1;
}

uint64_t sub_100102CF8(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,__int16 a21,char a22)
{
  if ((a22 & 1) == 0)
  {
    char v23 = a20 & 1;
    return sub_100102D58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, v23);
  }
  return result;
}

uint64_t sub_100102D58(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  if (a20)
  {
    sub_10002E358(result, a2 & 1);

    swift_release();
    return sub_10005E778(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_100102E64()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100102E9C()
{
  sub_1001000E0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100102EA4(uint64_t result)
{
  *(unsigned char *)(result + 149) = 1;
  return result;
}

unint64_t sub_100102EB0()
{
  unint64_t result = qword_100185B60;
  if (!qword_100185B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185B60);
  }
  return result;
}

unint64_t sub_100102F04()
{
  unint64_t result = qword_100185B68;
  if (!qword_100185B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185B68);
  }
  return result;
}

uint64_t sub_100102F58(uint64_t result)
{
  *(unsigned char *)(result + 148) = 1;
  return result;
}

uint64_t sub_100102F64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 112);
  sub_10002E2F8(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_retain();
  id v7 = v2;
  sub_10005EAC4(v13, v12, v11, v10, v3, v4, v5, v6, v9, *((unint64_t *)&v9 + 1));
  return a1;
}

uint64_t sub_100103028(uint64_t result)
{
  *(unsigned char *)(result + 149) = 0;
  return result;
}

uint64_t sub_100103030(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  long long v8 = *(_OWORD *)(a1 + 112);
  sub_10002E358(*(void *)a1, *(unsigned char *)(a1 + 8));

  swift_release();
  sub_10005E778(v12, v11, v10, v9, v3, v4, v5, v6, v8, *((unint64_t *)&v8 + 1));
  return a1;
}

uint64_t sub_1001030F4(uint64_t result)
{
  *(unsigned char *)(result + 148) = 0;
  return result;
}

uint64_t sub_10010310C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100103130()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100103154(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001854E0);
  __chkstk_darwin(v2 - 8);
  sub_10000F330(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1001854E0);
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_1001031EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  char v4 = *(unsigned char *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 320);
  char v6 = *(unsigned char *)(a1 + 328);
  sub_100055180(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_100055180(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_10002E2F8(v5, v6);
  swift_retain();
  return a1;
}

uint64_t sub_100103294(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  char v4 = *(unsigned char *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 320);
  char v6 = *(unsigned char *)(a1 + 328);
  sub_100054D14(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_100054D14(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_10002E358(v5, v6);
  swift_release();
  return a1;
}

unint64_t sub_100103344()
{
  unint64_t result = qword_100185BE8;
  if (!qword_100185BE8)
  {
    sub_10000B100(&qword_100185BE0);
    sub_10010522C((unint64_t *)&qword_100185490, &qword_100185488, (void (*)(void))sub_10006DF94);
    sub_10006F1E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185BE8);
  }
  return result;
}

unint64_t sub_1001033EC()
{
  unint64_t result = qword_100185C00;
  if (!qword_100185C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C00);
  }
  return result;
}

unint64_t sub_100103440()
{
  unint64_t result = qword_100185C38;
  if (!qword_100185C38)
  {
    sub_10000B100(&qword_100185C30);
    sub_10010522C(&qword_100185C40, &qword_100185C48, (void (*)(void))sub_100028D20);
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C38);
  }
  return result;
}

unint64_t sub_10010350C()
{
  unint64_t result = qword_100185C50;
  if (!qword_100185C50)
  {
    sub_10000B100(&qword_100185C18);
    sub_1001035AC();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C50);
  }
  return result;
}

unint64_t sub_1001035AC()
{
  unint64_t result = qword_100185C58;
  if (!qword_100185C58)
  {
    sub_10000B100(&qword_100185C10);
    sub_100102164(&qword_100180B08, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionFailureView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C58);
  }
  return result;
}

uint64_t destroy for NearbySharingInteractionContactView(uint64_t a1)
{
  swift_release();
  return sub_10005E778(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120));
}

uint64_t initializeWithCopy for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  char v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = v7;
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v19 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  unint64_t v12 = *(void *)(a2 + 120);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 136);
  int v18 = *(_DWORD *)(a2 + 144);
  id v13 = v6;
  swift_retain();
  sub_10005EAC4(v21, v20, v8, v9, v10, v11, v19, v22, v15, v12);
  *(void *)(a1 + 48) = v21;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  *(_DWORD *)(a1 + 144) = v18;
  return a1;
}

uint64_t assignWithCopy for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  uint64_t v8 = *(void **)(v2 + 24);
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  id v10 = v8;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(v2 + 32);
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v13 = *(void *)(v2 + 64);
  uint64_t v14 = *(void *)(v2 + 72);
  uint64_t v15 = *(void *)(v2 + 80);
  uint64_t v16 = *(void *)(v2 + 88);
  uint64_t v17 = *(void *)(v2 + 96);
  uint64_t v18 = *(void *)(v2 + 104);
  uint64_t v29 = *(void *)(v2 + 112);
  unint64_t v30 = *(void *)(v2 + 120);
  uint64_t v31 = *(void *)(v2 + 128);
  uint64_t v32 = *(void *)(v2 + 136);
  LODWORD(v2) = *(_DWORD *)(v2 + 144);
  sub_10005EAC4(v11, v12, v13, v14, v15, v16, v17, v18, v29, v30);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 88);
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v26 = *(void *)(a1 + 104);
  long long v27 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  *(void *)(a1 + 128) = v31;
  *(void *)(a1 + 136) = v32;
  *(_DWORD *)(a1 + 144) = v2;
  sub_10005E778(v19, v20, v21, v22, v23, v24, v25, v26, v27, *((unint64_t *)&v27 + 1));
  return a1;
}

__n128 initializeWithTake for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NearbySharingInteractionContactView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;

  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 40) = a2[5];
  swift_release();
  int v10 = *((_DWORD *)a2 + 36);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  long long v19 = *(_OWORD *)(a1 + 112);
  long long v20 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v20;
  long long v21 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v21;
  long long v22 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 128) = v22;
  *(_DWORD *)(a1 + 144) = v10;
  sub_10005E778(v11, v12, v13, v14, v15, v16, v17, v18, v19, *((unint64_t *)&v19 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionContactView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 148)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionContactView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 148) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 148) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionContactView()
{
  return &type metadata for NearbySharingInteractionContactView;
}

ValueMetadata *type metadata accessor for NearbyInteractionConnectionView()
{
  return &type metadata for NearbyInteractionConnectionView;
}

ValueMetadata *type metadata accessor for AirDropIcon()
{
  return &type metadata for AirDropIcon;
}

unint64_t sub_100103B3C()
{
  unint64_t result = qword_100185C60;
  if (!qword_100185C60)
  {
    sub_10000B100(&qword_100185B40);
    sub_100103BB8();
    sub_100103E50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C60);
  }
  return result;
}

unint64_t sub_100103BB8()
{
  unint64_t result = qword_100185C68;
  if (!qword_100185C68)
  {
    sub_10000B100(&qword_100185B30);
    sub_100103C90(&qword_100185C70, &qword_100185C78, (void (*)(void))sub_100103CFC);
    sub_10000F288(&qword_100184C10, &qword_100184A48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C68);
  }
  return result;
}

uint64_t sub_100103C90(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100103CFC()
{
  unint64_t result = qword_100185C80;
  if (!qword_100185C80)
  {
    sub_10000B100(&qword_100185C88);
    sub_100103D9C();
    sub_10000F288(&qword_100185CA0, &qword_100184A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C80);
  }
  return result;
}

unint64_t sub_100103D9C()
{
  unint64_t result = qword_100185C90;
  if (!qword_100185C90)
  {
    sub_10000B100(&qword_100185C98);
    sub_1001040F4(&qword_100185B58, &qword_100185B50, (void (*)(void))sub_100102EB0, (void (*)(void))sub_100102F04);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185C90);
  }
  return result;
}

unint64_t sub_100103E50()
{
  unint64_t result = qword_100185CA8;
  if (!qword_100185CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185CA8);
  }
  return result;
}

unint64_t sub_100103EA8()
{
  unint64_t result = qword_100185CB0;
  if (!qword_100185CB0)
  {
    sub_10000B100((uint64_t *)&unk_100185BA0);
    sub_100103F48();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185CB0);
  }
  return result;
}

unint64_t sub_100103F48()
{
  unint64_t result = qword_100185CB8;
  if (!qword_100185CB8)
  {
    sub_10000B100(&qword_100185B88);
    sub_100104008(&qword_100185CC0, &qword_100185B80, &qword_100185CC8, &qword_100185B78);
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185CB8);
  }
  return result;
}

uint64_t sub_100104008(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    sub_10000F288(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001040A4()
{
  return sub_1001040F4(&qword_100185CE0, &qword_100185CE8, (void (*)(void))sub_100103344, (void (*)(void))sub_1001033EC);
}

uint64_t sub_1001040F4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100104180()
{
  unint64_t result = qword_100185CF0;
  if (!qword_100185CF0)
  {
    sub_10000B100(&qword_100185C08);
    sub_1001040F4(&qword_100185CF8, &qword_100185C28, (void (*)(void))sub_100103440, (void (*)(void))sub_10010350C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185CF0);
  }
  return result;
}

uint64_t sub_10010422C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104248()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104264()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010428C()
{
  return sub_1000FDD04(v0 + 16);
}

unint64_t sub_100104294()
{
  unint64_t result = qword_100185DA8;
  if (!qword_100185DA8)
  {
    sub_10000B100(&qword_100185D90);
    sub_100104334();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185DA8);
  }
  return result;
}

unint64_t sub_100104334()
{
  unint64_t result = qword_100185DB0;
  if (!qword_100185DB0)
  {
    sub_10000B100(&qword_100185D88);
    sub_100104008(&qword_100185DB8, &qword_100185D80, (unint64_t *)&unk_100185DC0, &qword_100185D78);
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185DB0);
  }
  return result;
}

uint64_t sub_1001043F8()
{
  sub_10002E358(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  swift_release();
  sub_10005E778(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));

  return _swift_deallocObject(v0, 164, 7);
}

void sub_100104478()
{
  sub_1000FDD84(v0 + 16);
}

uint64_t sub_100104490(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001044C0()
{
  sub_10002E358(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  swift_release();
  sub_10005E778(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000AB98(v0 + 168);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 216, 7);
}

uint64_t sub_100104550@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FDABC(a1, v2 + 16, v2 + 168, a2);
}

uint64_t type metadata accessor for BannerShareableContentActionButton(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100185ED0);
}

uint64_t sub_10010457C()
{
  sub_10002E358(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  swift_release();
  sub_10005E778(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10000AB98(v0 + 168);
  sub_10000AB98(v0 + 208);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 256, 7);
}

uint64_t sub_100104614()
{
  return sub_1000FDC84(v0 + 16, (void *)(v0 + 168), v0 + 208);
}

uint64_t sub_100104624(uint64_t a1)
{
  id v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t *sub_100104650(uint64_t *a1)
{
  id v2 = (void *)a1[13];
  sub_10005EAC4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  id v3 = v2;
  return a1;
}

uint64_t *sub_1001046B4(uint64_t *a1)
{
  id v2 = (void *)a1[13];
  sub_10005E778(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);

  return a1;
}

uint64_t sub_100104718(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t sub_10010477C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100104790);
}

uint64_t sub_100104790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100104850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100104864);
}

uint64_t sub_100104864(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100104920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104944(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_100104944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1001049DC()
{
  unint64_t result = qword_100185F08;
  if (!qword_100185F08)
  {
    sub_10000B100(&qword_100185D28);
    sub_10000F288(&qword_100185F10, &qword_100185D10);
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F08);
  }
  return result;
}

unint64_t sub_100104AA4()
{
  unint64_t result = qword_100185F18;
  if (!qword_100185F18)
  {
    sub_10000B100(&qword_100185DD0);
    sub_10000B100(&qword_100185D90);
    sub_100104294();
    swift_getOpaqueTypeConformance2();
    sub_100104B54();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F18);
  }
  return result;
}

unint64_t sub_100104B54()
{
  unint64_t result = qword_100185F20;
  if (!qword_100185F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F20);
  }
  return result;
}

unint64_t sub_100104BAC()
{
  unint64_t result = qword_100185F28;
  if (!qword_100185F28)
  {
    sub_10000B100(&qword_100185D48);
    sub_10010522C(&qword_100185F30, &qword_100185D40, (void (*)(void))sub_100104C78);
    sub_10000F288((unint64_t *)&unk_100185F50, &qword_100180D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F28);
  }
  return result;
}

unint64_t sub_100104C78()
{
  unint64_t result = qword_100185F38;
  if (!qword_100185F38)
  {
    sub_10000B100(&qword_100185D38);
    sub_100104D18();
    sub_10000F288(&qword_100185F48, &qword_100185D30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F38);
  }
  return result;
}

unint64_t sub_100104D18()
{
  unint64_t result = qword_100185F40;
  if (!qword_100185F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F40);
  }
  return result;
}

uint64_t sub_100104D6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104D88()
{
  uint64_t v1 = *(void *)(type metadata accessor for BannerShareableContentActionButton(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100104E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BannerShareableContentActionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100104EE0()
{
  uint64_t v1 = type metadata accessor for BannerShareableContentActionButton(0);
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 20)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

uint64_t sub_100104F4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FAFB4(*(void *)(v1 + 16), a1);
}

unint64_t sub_100104F54()
{
  unint64_t result = qword_100185F68;
  if (!qword_100185F68)
  {
    sub_10000B100(&qword_100185F60);
    sub_10010522C(&qword_100185F70, &qword_100185F78, (void (*)(void))sub_100105020);
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F68);
  }
  return result;
}

unint64_t sub_100105020()
{
  unint64_t result = qword_100185F80;
  if (!qword_100185F80)
  {
    sub_10000B100(&qword_100185F88);
    sub_1001050C0();
    sub_10000F288(&qword_100185FB0, &qword_100185FB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F80);
  }
  return result;
}

unint64_t sub_1001050C0()
{
  unint64_t result = qword_100185F90;
  if (!qword_100185F90)
  {
    sub_10000B100(&qword_100185F98);
    sub_100105160();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185F90);
  }
  return result;
}

unint64_t sub_100105160()
{
  unint64_t result = qword_100185FA0;
  if (!qword_100185FA0)
  {
    sub_10000B100(&qword_100185FA8);
    sub_10010522C((unint64_t *)&qword_100185420, &qword_100185428, (void (*)(void))sub_1001052A8);
    sub_10000F288((unint64_t *)&unk_100185F50, &qword_100180D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185FA0);
  }
  return result;
}

uint64_t sub_10010522C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001052A8()
{
  unint64_t result = qword_100185430;
  if (!qword_100185430)
  {
    sub_10000B100(&qword_100185438);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185430);
  }
  return result;
}

uint64_t sub_10010531C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100105378(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001053AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001053D8()
{
  return sub_10000F288(&qword_100186000, &qword_100186008);
}

uint64_t sub_100105430()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded);
}

void sub_100105444()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) == 1
    && *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0;
  sub_100105E18(v1);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 publishedObjectWithName:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100064F00((uint64_t)v11, (uint64_t)v12);
  if (v12[3])
  {
    sub_10001FB40(0, (unint64_t *)&unk_100186060);
    if (swift_dynamicCast())
    {
      uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage);
      if (v5 && (id v6 = [v5 CGImage]) != 0)
      {
        v12[0] = v6;
        type metadata accessor for CGImage(0);
        uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
      }
      else
      {
        uint64_t v7 = 0;
      }
      [v10 setContents:v7];
      swift_unknownObjectRelease();
      [v10 setContentsGravity:kCAGravityResizeAspect];
      id v8 = [self clearColor];
      id v9 = [v8 CGColor];

      [v10 setBackgroundColor:v9];
    }
  }
  else
  {
    sub_100064F68((uint64_t)v12);
  }
}

void sub_1001056B8(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  *(void *)&v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = 0;
  unint64_t v10 = &v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState];
  uint64_t v11 = enum case for SFAirDropReceive.Transfer.State.created(_:);
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer.State();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
  *(void *)&v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage] = 0;
  uint64_t v13 = (objc_class *)type metadata accessor for AirDropSystemApertureIconView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v15 = self;
  uint64_t v16 = v4;
  id v17 = [v15 bundleForClass:ObjCClassFromMetadata];
  id v18 = objc_allocWithZone((Class)BSUICAPackageView);
  id v19 = v17;
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v18 initWithPackageName:v20 inBundle:v19];

  if (v21)
  {
    [v21 setTranslatesAutoresizingMaskIntoConstraints:0];
    if (qword_10017F7C8 != -1) {
      swift_once();
    }
    [v21 setFrame:0.0, 0.0, *(double *)&qword_10018D160, *(double *)&qword_10018D160];
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 setState:v22];

    *(void *)&v16[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView] = v21;
    uint64_t v23 = &v16[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_overrideIntrinsicContentSize];
    if (a4)
    {
      *(void *)uint64_t v23 = 0;
      *((void *)v23 + 1) = 0;
      v23[16] = 1;
    }
    else
    {
      *(void *)uint64_t v23 = a3;
      *((void *)v23 + 1) = a3;
      v23[16] = 0;
    }
    id v24 = v21;

    v46.receiver = v16;
    v46.super_class = v13;
    id v25 = [super init];
    [v25 addSubview:v24];
    id v26 = v25;
    sub_100106CAC(v24, a2, 0.0);

    sub_10001FB40(0, &qword_100180AC0);
    long long v27 = (char *)v26;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v27 addConstraints:isa];

    if (qword_10017F600 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v44[0] == 1)
    {
      uint64_t v29 = self;
      unint64_t v30 = v27;
      id v31 = [v29 systemPinkColor];
      id v32 = [v31 colorWithAlphaComponent:0.3];

      [v30 setBackgroundColor:v32];
      id v33 = v24;
      id v34 = [v29 systemGreenColor];
      id v35 = [v34 colorWithAlphaComponent:0.4];

      [v33 setBackgroundColor:v35];
    }
    id v36 = *(id *)&v27[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView];
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [v36 publishedObjectWithName:v37];

    if (v38)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v43, 0, sizeof(v43));
    }
    sub_100064F00((uint64_t)v43, (uint64_t)v44);
    if (v45)
    {
      sub_10001FB40(0, (unint64_t *)&unk_100186060);
      if (swift_dynamicCast())
      {
        [v42 setHidden:1];
      }
    }
    else
    {
      sub_100064F68((uint64_t)v44);
    }
    [v27 setClipsToBounds:0];
    uint64_t v39 = v27;
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v39 setAccessibilityLabel:v40];
  }
  else
  {
    __break(1u);
  }
}

void sub_100105E18(char a1)
{
  NSString v3 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 publishedObjectWithName:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100064F00((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    sub_10001FB40(0, (unint64_t *)&unk_100186060);
    if (swift_dynamicCast())
    {
      [v6 setHidden:(a1 & 1) == 0];
    }
  }
  else
  {
    sub_100064F68((uint64_t)v8);
  }
}

void sub_100105F34()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.Language();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = &unk_100186000;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) != 1)
  {
    if (*(double *)(v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) < 1.0) {
      unint64_t v13 = 0xE700000000000000;
    }
    else {
      unint64_t v13 = 0;
    }
    goto LABEL_14;
  }
  if (*(void *)(static Locale.preferredLanguages.getter() + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v10 = (void *)&unk_100186000;
    Locale.Language.init(identifier:)();
    uint64_t v11 = Locale.Language.characterDirection.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v11 == 2)
    {
      int v12 = 1;
      unint64_t v13 = 0xE800000000000000;
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  int v12 = 0;
  unint64_t v13 = 0xE400000000000000;
LABEL_10:
  if (*(double *)(v1 + v10[2]) >= 1.0)
  {
    swift_bridgeObjectRelease();
    if (v12) {
      unint64_t v13 = 0xE800000000000000;
    }
    else {
      unint64_t v13 = 0xE400000000000000;
    }
  }
LABEL_14:
  uint64_t v14 = v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v16 = sub_10000AA4C(&qword_100181490);
LABEL_32:
    (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v5, v16);
    goto LABEL_33;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    id v17 = &qword_1001806F0;
LABEL_18:
    id v18 = &v5[*(int *)(sub_10000AA4C(v17) + 48)];
    id v19 = (uint64_t *)&unk_1001827B0;
LABEL_19:
    uint64_t v20 = sub_10000AA4C(v19);
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
LABEL_20:
    uint64_t v16 = type metadata accessor for SFAirDrop.ContactInfo();
    goto LABEL_32;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:)) {
    goto LABEL_15;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v21 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    NSString v22 = &v5[*(int *)(v21 + 48)];
    swift_bridgeObjectRelease();
    uint64_t v23 = &v5[*(int *)(v21 + 80)];
    uint64_t v24 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    uint64_t v25 = type metadata accessor for SFAirDrop.Progress();
    (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v22, v25);
LABEL_31:
    uint64_t v16 = type metadata accessor for SFAirDropReceive.ItemDestination();
    goto LABEL_32;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v26 = sub_10000AA4C(&qword_1001814D0);
    swift_bridgeObjectRelease();
    long long v27 = &v5[*(int *)(v26 + 80)];
    uint64_t v28 = type metadata accessor for SFAirDrop.DeclineAction();
LABEL_30:
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
    goto LABEL_31;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || v15 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v29 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v30 = *(int *)(v29 + 64);
LABEL_29:
    long long v27 = &v5[v30];
    uint64_t v28 = sub_10000AA4C(&qword_100181490);
    goto LABEL_30;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_10000AA4C((uint64_t *)&unk_100182790);
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)
    || v15 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v33 = sub_10000AA4C(&qword_1001806D8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(int *)(v33 + 80);
    goto LABEL_29;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_10000AA4C((uint64_t *)&unk_100182810);
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    id v18 = &v5[*(int *)(sub_10000AA4C(&qword_1001806E8) + 48)];
    id v19 = &qword_100181490;
    goto LABEL_19;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.importingReceivedContact(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    goto LABEL_20;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    id v17 = (uint64_t *)&unk_100182800;
    goto LABEL_18;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    id v34 = &v5[*(int *)(sub_10000AA4C(&qword_1001827F8) + 48)];
    uint64_t v35 = type metadata accessor for SFAirDrop.ContactRequest();
    id v36 = *(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8);
    v36(v34, v35);
    v36(v5, v35);
    goto LABEL_33;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    NSString v37 = &v5[*(int *)(sub_10000AA4C(&qword_1001827F0) + 48)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
    uint64_t v39 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v5, v39);
    goto LABEL_33;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    NSString v40 = &v5[*(int *)(sub_10000AA4C(&qword_1001827E0) + 48)];
    uint64_t v41 = type metadata accessor for SFAirDropReceive.Failure();
    (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
    uint64_t v42 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v5, v42);
    goto LABEL_55;
  }
  if (v15 == enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    if (*(void *)v5 == 9 || *(void *)v5 == 3) {
      goto LABEL_60;
    }
  }
  else if (v15 != enum case for SFAirDropReceive.Transfer.State.created(_:) {
         && v15 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
  }
         && v15 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:)
         && v15 != enum case for SFAirDropReceive.Transfer.State.waitingForContactExchangeRequest(_:))
  {
    swift_bridgeObjectRelease();
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
LABEL_60:
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
LABEL_33:
  if (!v13)
  {
LABEL_55:
    NSString v32 = [*(id *)(v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView) layer];
    [v32 setBeginTime:CACurrentMediaTime()];
    goto LABEL_56;
  }
  id v31 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v31 setState:v32];
LABEL_56:
}

void sub_100106A3C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage);
}

id sub_100106AC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureIconView();
  return [super dealloc];
}

uint64_t sub_100106B90()
{
  return type metadata accessor for AirDropSystemApertureIconView();
}

uint64_t type metadata accessor for AirDropSystemApertureIconView()
{
  uint64_t result = qword_100186050;
  if (!qword_100186050) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100106BE4()
{
  uint64_t result = type metadata accessor for SFAirDropReceive.Transfer.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100106CAC(void *a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  switch(a2)
  {
    case 1:
    case 4:
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_10012CE50;
      id v9 = [a1 widthAnchor];
      id v10 = [v4 widthAnchor];
      id v11 = [v9 constraintEqualToAnchor:v10 constant:-a3];

      *(void *)(v8 + 32) = v11;
      id v12 = [a1 heightAnchor];
      id v13 = [a1 widthAnchor];
      id v14 = [v12 constraintEqualToAnchor:v13];

      *(void *)(v8 + 40) = v14;
      uint64_t v35 = v8;
      specialized Array._endMutation()();
      if (a2 == 1)
      {
        id v15 = [a1 topAnchor];
        id v16 = [v4 topAnchor];
      }
      else
      {
        id v15 = [a1 bottomAnchor];
        id v16 = [v4 bottomAnchor];
      }
      goto LABEL_4;
    case 2:
    case 8:
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_10012CE50;
      id v19 = [a1 heightAnchor];
      id v20 = [v4 heightAnchor];
      id v21 = [v19 constraintEqualToAnchor:v20 constant:-a3];

      *(void *)(v18 + 32) = v21;
      id v22 = [a1 widthAnchor];
      id v23 = [a1 heightAnchor];
      id v24 = [v22 constraintEqualToAnchor:v23];

      *(void *)(v18 + 40) = v24;
      uint64_t v35 = v18;
      specialized Array._endMutation()();
      if (a2 == 2)
      {
        id v15 = [a1 leadingAnchor];
        id v16 = [v4 leadingAnchor];
      }
      else
      {
        id v15 = [a1 trailingAnchor];
        id v16 = [v4 trailingAnchor];
      }
LABEL_4:
      id v17 = [v15 constraintEqualToAnchor:v16];
      id v33 = v17;

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      break;
    default:
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_10012CE50;
      id v26 = [a1 widthAnchor];
      id v27 = [v4 widthAnchor];
      double v28 = -a3;
      id v29 = [v26 constraintEqualToAnchor:v27 constant:v28];

      *(void *)(v25 + 32) = v29;
      id v30 = [a1 heightAnchor];
      id v31 = [v4 heightAnchor];
      id v32 = [v30 constraintEqualToAnchor:v31 constant:v28];

      *(void *)(v25 + 40) = v32;
      uint64_t v35 = v25;
      specialized Array._endMutation()();
      break;
  }
  return v35;
}

void sub_1001071F4()
{
  qword_10018D160 = 0x4037000000000000;
}

uint64_t sub_100107204()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded);
}

id sub_10010756C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureView();
  return [super dealloc];
}

uint64_t type metadata accessor for AirDropSystemApertureView()
{
  return self;
}

ValueMetadata *type metadata accessor for AirDropSystemApertureIcon()
{
  return &type metadata for AirDropSystemApertureIcon;
}

uint64_t sub_1001075D4()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)*((void *)v0 + 3);
  id v7 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureIconView());
  sub_1001056B8(v6, 2, 0, 1);
  uint64_t v9 = v8;
  long long v21 = *v1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)&v21);
  id v10 = v20;
  [v20 fractionCompleted];
  double v12 = v11;

  *(double *)(v9 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) = fmax(v12, 0.01);
  sub_100105F34();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)&v21);
  uint64_t v13 = v9 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 24))(v13, v5, v2);
  swift_endAccess();
  sub_100105F34();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(unsigned char *)(v9 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  uint64_t v14 = OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage;
  sub_100105E18(*(void *)(v9 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0);
  sub_100105F34();
  if (v1[1])
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100021E60((uint64_t)&v21);
    id v15 = v20;
    if (v20)
    {
      id v16 = *(void **)(v9 + v14);
      *(void *)(v9 + v14) = v20;
      id v17 = v15;

      sub_100105444();
    }
  }
  return v9;
}

void sub_1001078D8(uint64_t a1, uint64_t a2)
{
  sub_100107A2C(a1, a2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
}

uint64_t sub_1001078E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100107CF8();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100107948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100107CF8();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001079AC()
{
}

unint64_t sub_1001079D8()
{
  unint64_t result = qword_100186100;
  if (!qword_100186100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186100);
  }
  return result;
}

void sub_100107A2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  id v10 = v19;
  [v19 fractionCompleted];
  uint64_t v12 = v11;

  *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) = v12;
  sub_100105F34();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 24))(v13, v9, v6);
  swift_endAccess();
  sub_100105F34();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  uint64_t v14 = OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage;
  sub_100105E18(*(void *)(a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0);
  sub_100105F34();
  if (a4)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    id v15 = v19;
    if (v19)
    {
      id v16 = *(void **)(a1 + v14);
      *(void *)(a1 + v14) = v19;
      id v17 = v15;

      sub_100105444();
    }
  }
}

unint64_t sub_100107CF8()
{
  unint64_t result = qword_100186108;
  if (!qword_100186108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186108);
  }
  return result;
}

uint64_t sub_100107D4C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100186110);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100186110);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D128);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100107E14(void *a1)
{
  uint64_t v2 = v1;
  *(unsigned char *)(v2 + 48) = 0;
  uint64_t v4 = self;
  id aBlock = 0;
  id v5 = a1;
  id v6 = [v4 patternForKey:v5 error:&aBlock];
  if (!v6)
  {
    id v30 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_11:
    int v45 = 0;
    goto LABEL_12;
  }
  id v7 = aBlock;

  *(void *)(v2 + 16) = v6;
  id v8 = [v6 configurationDictionary];
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10010851C(v9);
  swift_bridgeObjectRelease();
  id v10 = objc_allocWithZone((Class)CHHapticEngine);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id aBlock = 0;
  id v12 = [v10 initWithAudioSession:0 sessionIsShared:0 options:isa error:&aBlock];

  id v13 = aBlock;
  if (!v12)
  {
    id v31 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_11;
  }
  *(void *)(v2 + 24) = v12;
  uint64_t v14 = *(void *)(v2 + 16);
  id aBlock = 0;
  id v15 = v13;
  id v16 = [v12 createPlayerWithPattern:v14 error:&aBlock];
  id v17 = aBlock;
  if (v16)
  {
    *(void *)(v2 + 32) = v16;
    *(void *)(v2 + 40) = v5;
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v50 = sub_10010BB38;
    uint64_t v51 = v18;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    uint64_t v48 = sub_100119678;
    uint64_t v49 = &unk_10016DD68;
    id v19 = _Block_copy(&aBlock);
    id v44 = v5;
    id v20 = v17;
    id v21 = v12;
    swift_release();
    [v21 setResetHandler:v19];
    _Block_release(v19);

    id v22 = *(void **)(v2 + 24);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v50 = sub_10010BB58;
    uint64_t v51 = v23;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v47 = 1107296256;
    uint64_t v48 = sub_100108FC0;
    uint64_t v49 = &unk_10016DD90;
    id v24 = _Block_copy(&aBlock);
    id v25 = v22;
    swift_release();
    [v25 setStoppedHandler:v24];
    _Block_release(v24);

    [*(id *)(v2 + 24) setAutoShutdownEnabled:1];
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10000B150(v26, (uint64_t)qword_100186110);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "ShockwaveHapticsPlayer: haptic engine setup successfully", v29, 2u);
      swift_slowDealloc();
    }

    return v2;
  }
  id v43 = aBlock;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  int v45 = 1;
LABEL_12:
  if (qword_10017F7D0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10000B150(v32, (uint64_t)qword_100186110);
  id v33 = v5;
  swift_errorRetain();
  id v34 = v33;
  swift_errorRetain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    id aBlock = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100047F98(v38, v39, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    swift_errorRetain();
    sub_10000AA4C(&qword_100180590);
    uint64_t v40 = String.init<A>(reflecting:)();
    sub_100047F98(v40, v41, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ShockwaveHapticsPlayer: Haptics for %s failed to initialize: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  if (v6) {

  }
  if (v45) {
  swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t sub_10010851C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000AA4C(&qword_100184018);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  id v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    id v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000627DC(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000627DC(v35, v36);
    sub_1000627DC(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000627DC(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100031848();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1001088DC()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t v2 = *(void **)(Strong + 24);
    id v23 = 0;
    if ([v2 startAndReturnError:&v23])
    {
      uint64_t v3 = qword_10017F7D0;
      id v4 = v23;
      if (v3 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10000B150(v5, (uint64_t)qword_100186110);
      swift_retain_n();
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v6, v7))
      {

        swift_release_n();
        return;
      }
      int64_t v8 = (uint8_t *)swift_slowAlloc();
      id v23 = (id)swift_slowAlloc();
      *(_DWORD *)int64_t v8 = 136315138;
      unint64_t v9 = *(void **)(v1 + 40);
      type metadata accessor for CHHapticPatternLibraryKey(0);
      id v10 = v9;
      uint64_t v11 = String.init<A>(reflecting:)();
      sub_100047F98(v11, v12, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "ShockwaveHapticsPlayer: restarted haptic engine %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      id v17 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      *(unsigned char *)(v1 + 48) = 0;
      if (qword_10017F7D0 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10000B150(v18, (uint64_t)qword_100186110);
      swift_errorRetain();
      swift_errorRetain();
      id v6 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        id v23 = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 136315138;
        swift_errorRetain();
        sub_10000AA4C(&qword_100180590);
        uint64_t v21 = String.init<A>(reflecting:)();
        sub_100047F98(v21, v22, (uint64_t *)&v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v19, "ShockwaveHapticsPlayer: failed restarting haptic engine: %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        swift_errorRelease();
        return;
      }
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_100186110);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      int64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "ShockwaveHapticsPlayer: self nil while resetHandler is called, exiting", v16, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100108DB0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(unsigned char *)(Strong + 48) = 0;
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B150(v1, (uint64_t)qword_100186110);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v4 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "ShockwaveHapticsPlayer: stopped haptic engine for (%ld)", v4, 0xCu);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B150(v5, (uint64_t)qword_100186110);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "ShockwaveHapticsPlayer: self nil while stoppedHandler is called, exiting", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100108FC0(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_100109014()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 48))
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v41 = v6;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      unint64_t v39 = (void *)sub_100047F98(0xD000000000000027, 0x80000001001342D0, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "ShockwaveHapticsPlayer: Haptics is playing, ignoring play request for %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B150(v8, (uint64_t)qword_100186110);
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v41 = v12;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v40 = 0x80000001001342D0;
      v13._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      unint64_t v39 = (void *)sub_100047F98(0xD000000000000027, 0x80000001001342D0, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ShockwaveHapticsPlayer: Starting engine for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    unint64_t v14 = *(void **)(v0 + 24);
    unint64_t v39 = 0;
    unsigned int v15 = [v14 startAndReturnError:&v39];
    int64_t v16 = v39;
    if (!v15) {
      goto LABEL_19;
    }
    swift_retain_n();
    id v17 = v16;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136315138;
      uint64_t v41 = v21;
      unint64_t v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v39 = (void *)0xD000000000000027;
      unint64_t v40 = 0x80000001001342D0;
      v22._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      unint64_t v39 = (void *)sub_100047F98((uint64_t)v39, v40, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "ShockwaveHapticsPlayer: Engine started for %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    id v23 = *(void **)(v1 + 32);
    unint64_t v39 = 0;
    unsigned int v24 = [v23 startAtTime:&v39 error:0.0];
    int64_t v16 = v39;
    if (v24)
    {
      swift_retain_n();
      id v25 = v16;
      int64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        long long v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)long long v28 = 136315138;
        uint64_t v41 = v29;
        unint64_t v39 = 0;
        unint64_t v40 = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        unint64_t v39 = (void *)0xD000000000000027;
        unint64_t v40 = 0x80000001001342D0;
        v30._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        unint64_t v39 = (void *)sub_100047F98((uint64_t)v39, v40, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "ShockwaveHapticsPlayer: Player started for %s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      *(unsigned char *)(v1 + 48) = 1;
    }
    else
    {
LABEL_19:
      id v31 = v16;
      uint64_t v32 = _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      long long v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315394;
        unint64_t v39 = 0;
        unint64_t v40 = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        unint64_t v39 = (void *)0xD000000000000027;
        unint64_t v40 = 0x80000001001342D0;
        v36._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        unint64_t v39 = (void *)sub_100047F98((uint64_t)v39, v40, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        unint64_t v39 = (void *)v32;
        swift_errorRetain();
        sub_10000AA4C(&qword_100180590);
        uint64_t v37 = String.init<A>(reflecting:)();
        unint64_t v39 = (void *)sub_100047F98(v37, v38, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "ShockwaveHapticsPlayer: Failed to start haptics for %s: %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
}

void sub_100109964()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v39 = v6;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v38 = 0x80000001001342D0;
      v7._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      id v37 = (id)sub_100047F98(0xD000000000000027, 0x80000001001342D0, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "ShockwaveHapticsPlayer: Stopping player for %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    unint64_t v14 = *(void **)(v0 + 32);
    id v37 = 0;
    unsigned int v15 = [v14 stopAtTime:&v37 error:0.0];
    id v16 = v37;
    if (v15)
    {
      swift_retain_n();
      id v17 = v16;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 136315138;
        id v37 = 0;
        unint64_t v38 = 0xE000000000000000;
        uint64_t v39 = v21;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        id v37 = (id)0xD000000000000027;
        unint64_t v38 = 0x80000001001342D0;
        v22._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        id v37 = (id)sub_100047F98((uint64_t)v37, v38, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "ShockwaveHapticsPlayer: Player stopped for %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      [*(id *)(v1 + 24) stopWithCompletionHandler:0];
      swift_retain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v34 = 136315138;
        id v37 = 0;
        unint64_t v38 = 0xE000000000000000;
        uint64_t v39 = v35;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        id v37 = (id)0xD000000000000027;
        unint64_t v38 = 0x80000001001342D0;
        v36._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        id v37 = (id)sub_100047F98((uint64_t)v37, v38, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "ShockwaveHapticsPlayer: Engine stopped for %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      *(unsigned char *)(v1 + 48) = 0;
    }
    else
    {
      id v23 = v37;
      unsigned int v24 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      *(unsigned char *)(v1 + 48) = 0;
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315394;
        id v37 = 0;
        unint64_t v38 = 0xE000000000000000;
        uint64_t v39 = v28;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        id v37 = (id)0xD000000000000027;
        unint64_t v38 = 0x80000001001342D0;
        v29._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        id v37 = (id)sub_100047F98((uint64_t)v37, v38, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        id v37 = v24;
        swift_errorRetain();
        sub_10000AA4C(&qword_100180590);
        uint64_t v30 = String.init<A>(reflecting:)();
        id v37 = (id)sub_100047F98(v30, v31, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "ShockwaveHapticsPlayer: Failed to stop haptics for %s: %s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B150(v8, (uint64_t)qword_100186110);
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v39 = v12;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      id v37 = (id)sub_100047F98(0xD000000000000027, 0x80000001001342D0, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ShockwaveHapticsPlayer: Haptics not playing, ignoring stop request for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_10010A2AC()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void *sub_10010A2FC()
{
  type metadata accessor for ShockwaveHapticsPlayer();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_10010A338();
  qword_10018D168 = v0;
  return result;
}

void *sub_10010A338()
{
  uint64_t v1 = (void *)v0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  uint64_t v2 = (uint64_t *)(v0 + 16);
  unsigned int v3 = [self capabilitiesForHardware] supportsHaptics];
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 48) = v3;
  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    type metadata accessor for ShockwaveHapticsPlayer.Haptic();
    uint64_t v5 = swift_allocObject();
    sub_100107E14(v4);
    *uint64_t v2 = v5;
    swift_release();
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t v7 = swift_allocObject();
    sub_100107E14(v6);
    v1[3] = v7;
    swift_release();
    NSString v8 = String._bridgeToObjectiveC()();
    uint64_t v9 = swift_allocObject();
    sub_100107E14(v8);
    v1[4] = v9;
    swift_release();
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = swift_allocObject();
    sub_100107E14(v10);
    v1[5] = v11;
    swift_release();
  }
  return v1;
}

void sub_10010A538()
{
  uint64_t v1 = v0[3];
  if (v1 && (*(unsigned char *)(v1 + 48) & 1) != 0)
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      NSString v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Skipped playing primaryHintingHaptic, secondaryHintingHaptic is currently playing", v4, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (v0[4])
    {
      swift_retain();
      sub_100109964();
      swift_release();
    }
    if (v0[2])
    {
      swift_retain();
      sub_100109014();
      swift_release();
    }
  }
}

void sub_10010A698()
{
  uint64_t v1 = v0[5];
  if (v1 && (*(unsigned char *)(v1 + 48) & 1) != 0)
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      NSString v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Skipped playing primaryConnectedHaptic, secondaryConnectedHaptic is currently playing", v4, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (v0[2])
    {
      swift_retain();
      sub_100109964();
      swift_release();
    }
    if (v0[4])
    {
      swift_retain();
      sub_100109014();
      swift_release();
    }
  }
}

void sub_10010A7F8()
{
  uint64_t v1 = v0[2];
  if (v1 && (*(unsigned char *)(v1 + 48) & 1) != 0)
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      NSString v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Skipped playing secondaryHintingHaptic, primaryHintingHaptic is currently playing", v4, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (v0[5])
    {
      swift_retain();
      sub_100109964();
      swift_release();
    }
    if (v0[3])
    {
      swift_retain();
      sub_100109014();
      swift_release();
    }
  }
}

void sub_10010A958()
{
  uint64_t v1 = v0[4];
  if (v1 && (*(unsigned char *)(v1 + 48) & 1) != 0)
  {
    if (qword_10017F7D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_100186110);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      NSString v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Skipped playing secondaryConnectedHaptic, primaryConnectedHaptic is currently playing", v4, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (v0[3])
    {
      swift_retain();
      sub_100109964();
      swift_release();
    }
    if (v0[5])
    {
      swift_retain();
      sub_100109014();
      swift_release();
    }
  }
}

uint64_t sub_10010AAB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  uint64_t result = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[2];
  if (v6 && *(unsigned char *)(v6 + 48) == 1)
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
    NSString v8 = (void *)swift_allocObject();
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v1;
    swift_retain();
    sub_10010C15C((uint64_t)v5, (uint64_t)&unk_1001863B0, (uint64_t)v8);
    uint64_t result = swift_release();
  }
  uint64_t v9 = v1[3];
  if (v9 && *(unsigned char *)(v9 + 48) == 1)
  {
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = 0;
    v11[3] = 0;
    v11[4] = v1;
    swift_retain();
    sub_10010C15C((uint64_t)v5, (uint64_t)&unk_1001863A0, (uint64_t)v11);
    uint64_t result = swift_release();
  }
  if (v1[4])
  {
    swift_retain();
    sub_100109964();
    uint64_t result = swift_release();
  }
  if (v1[5])
  {
    swift_retain();
    sub_100109964();
    return swift_release();
  }
  return result;
}

uint64_t sub_10010ACA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_10010AD64, 0, 0);
}

uint64_t sub_10010AD64()
{
  ContinuousClock.init()();
  os_log_type_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1001863B8 + dword_1001863B8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010AE2C;
  return v3(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10010AE2C()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[3];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_10010BB90;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_10010AFC4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010AFC4()
{
  if (*(void *)(*(void *)(v0 + 16) + 16))
  {
    swift_retain();
    sub_100109964();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010B044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_10010B104, 0, 0);
}

uint64_t sub_10010B104()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1001863B8 + dword_1001863B8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010B1CC;
  return v3(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10010B1CC()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[3];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_10010BB94;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_10010B364;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10010B364()
{
  if (*(void *)(*(void *)(v0 + 16) + 24))
  {
    swift_retain();
    sub_100109964();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010B3E4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShockwaveHapticsPlayer()
{
  return self;
}

uint64_t type metadata accessor for ShockwaveHapticsPlayer.Haptic()
{
  return self;
}

uint64_t sub_10010B480(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_10010B044(a1, v4, v5, v6);
}

uint64_t sub_10010B538(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_10010ACA4(a1, v4, v5, v6);
}

uint64_t sub_10010B5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10010B6F0, 0, 0);
}

uint64_t sub_10010B6F0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10010BAB8(&qword_100184B30, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10010BAB8(&qword_1001863C8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10010B890;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_10010B890()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10010BA4C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10010BA4C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010BAB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010BB00()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10010BB38()
{
}

uint64_t sub_10010BB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10010BB50()
{
  return swift_release();
}

void sub_10010BB58()
{
}

uint64_t sub_10010BB60@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10010BBA0(uint64_t a1)
{
  uint64_t result = sub_100110C6C(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  sub_1001110C4(result, v3, 0, a1);
  return swift_retain();
}

uint64_t sub_10010BC08@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for LayoutSubviews();
  sub_10011688C(&qword_100186610, (void (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v9[4] == v9[0])
  {
    uint64_t v2 = type metadata accessor for LayoutSubview();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    char v4 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v6 = v5;
    uint64_t v7 = type metadata accessor for LayoutSubview();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v6, v7);
    v4(v9, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
}

uint64_t sub_10010BDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000AA4C(&qword_100183CF8);
  uint64_t v16 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100110C6C(a1);
  if (v9) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 36) != v8)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    return v10(a2, 1, 1, v4);
  }
  else
  {
    uint64_t v11 = *(int *)(v4 + 48);
    id v12 = sub_100110CF4(v6, result, v8, 0, a1);
    *(void *)&v6[v11] = v12;
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 16))(a2, v6, v13);
    *(void *)(a2 + *(int *)(v4 + 48)) = v12;
    id v14 = v12;
    sub_10000F394((uint64_t)v6, &qword_100183CF8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v4);
  }
}

uint64_t sub_10010BF80(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10007D300(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_100110DC4(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_10007D300(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_10011103C(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10010C090(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10001FD90;
  return v5();
}

uint64_t sub_10010C15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000F394(a1, &qword_1001829C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10010C308()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_1001863D0);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_1001863D0);
  if (qword_10017F798 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0F8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

double sub_10010C3D0()
{
  type metadata accessor for AirDropUIBannerManager();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_WORD *)(v0 + 48) = 0;
  qword_10018D170 = v0;
  return result;
}

unint64_t sub_10010C408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1) {
    return 0xD00000000000001BLL;
  }
  uint64_t v7 = (void *)0x8000000100134730;
  uint64_t v8 = 0xD000000000000020;
  switch(a2)
  {
    case 0:
      if (a1) {
        uint64_t v8 = 0xD000000000000037;
      }
      else {
        uint64_t v8 = 0xD00000000000001ELL;
      }
      if (a1) {
        uint64_t v7 = (void *)0x80000001001345C0;
      }
      else {
        uint64_t v7 = (void *)0x8000000100134600;
      }
      goto LABEL_19;
    case 1:
      goto LABEL_19;
    case 2:
      uint64_t v8 = 0xD00000000000001CLL;
      uint64_t v9 = "a session request was denied";
      goto LABEL_18;
    case 3:
      uint64_t v8 = 0xD000000000000023;
      uint64_t v9 = "the owner requested an invalidation";
      goto LABEL_18;
    case 4:
      uint64_t v9 = "the server disconnected from XPC";
      goto LABEL_18;
    case 5:
      uint64_t v8 = 0xD000000000000018;
      uint64_t v9 = "the app was foregrounded";
      goto LABEL_18;
    case 6:
      uint64_t v8 = 0xD000000000000017;
      uint64_t v9 = "the assertion timed out";
      goto LABEL_18;
    case 7:
      uint64_t v9 = "the assertion request was denied";
      goto LABEL_18;
    case 8:
      uint64_t v8 = 0xD00000000000001ALL;
      uint64_t v9 = "the relevant session ended";
      goto LABEL_18;
    default:
      uint64_t v8 = 0xD000000000000014;
      uint64_t v9 = "something went wrong";
LABEL_18:
      uint64_t v7 = (void *)((unint64_t)(v9 - 32) | 0x8000000000000000);
LABEL_19:
      char v10 = (void *)0xE000000000000000;
      swift_errorRetain();
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = v8;
      v11._object = v7;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 0x3A726F727245202ELL;
      v12._object = (void *)0xE900000000000020;
      String.append(_:)(v12);
      if (a3)
      {
        swift_getErrorValue();
        swift_errorRetain();
        uint64_t v13 = Error.localizedDescription.getter();
        char v10 = v14;
        sub_100116878(a1, a2, a3);
      }
      else
      {
        uint64_t v13 = 0;
      }
      v15._uint64_t countAndFlagsBits = v13;
      v15._object = v10;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      sub_100116878(a1, a2, a3);
      unint64_t result = 0xD000000000000022;
      break;
  }
  return result;
}

unint64_t sub_10010C684()
{
  return sub_10010C408(*v0, v0[1], v0[2]);
}

uint64_t sub_10010C690()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v107 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v111 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for Date();
  uint64_t v118 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v131 = *(void (**)(char *, uint64_t))(v127 - 8);
  uint64_t v6 = __chkstk_darwin(v127);
  uint64_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v115 = (char *)&v105 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v116 = (char *)&v105 - v12;
  __chkstk_darwin(v11);
  uint64_t v124 = (char *)&v105 - v13;
  uint64_t v14 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v119 = *(void *)(v18 - 8);
  uint64_t v120 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v130 = (char *)&v105 - v22;
  uint64_t v23 = sub_10000AA4C(&qword_1001816B0);
  __chkstk_darwin(v23 - 8);
  uint64_t v134 = (uint64_t)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  Swift::String v29 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v132 = (char *)&v105 - v30;
  if (qword_10017F610 != -1) {
    swift_once();
  }
  uint64_t v121 = v17;
  uint64_t v122 = v15;
  uint64_t v123 = (void (*)(void, void, void))v14;
  uint64_t v117 = v21;
  int v112 = v8;
  uint64_t v110 = v29;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v31 = v137;
  uint64_t v32 = sub_100113150(v137);
  int v34 = v33;
  if (qword_10017F7E0 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = sub_10000B150(v35, (uint64_t)qword_1001863D0);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    int v125 = v34;
    uint64_t v128 = v25;
    uint64_t v133 = v1;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v137 = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315394;
    uint64_t v126 = v36;
    uint64_t v129 = v26;
    if (v32)
    {
      uint64_t v41 = *(void *)(v32 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      unint64_t v40 = *(void *)(v32 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v40 = 0xE300000000000000;
      uint64_t v41 = 7104878;
    }
    uint64_t v135 = sub_100047F98(v41, v40, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v39 + 12) = 2080;
    type metadata accessor for AirDropTransferSession();
    swift_bridgeObjectRetain();
    uint64_t v45 = Dictionary.Values.description.getter();
    uint64_t v46 = v32;
    uint64_t v47 = v31;
    unint64_t v49 = v48;
    swift_bridgeObjectRelease();
    uint64_t v135 = sub_100047F98(v45, v49, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v31 = v47;
    uint64_t v32 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Banner session chosen is %s from sessions %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v1 = v133;
    uint64_t v25 = v128;
    uint64_t v26 = v129;
    uint64_t v36 = v126;
    int v34 = v125;
    if (!v32) {
      goto LABEL_15;
    }
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();

    if (!v32)
    {
LABEL_15:
      uint64_t v50 = swift_bridgeObjectRetain();
      unint64_t v51 = sub_10011569C(v50);
      if (v51 >> 62) {
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v52) {
        sub_10010DE18();
      }
      else {
        sub_10010DFFC();
      }
      goto LABEL_24;
    }
  }
  if (*(void *)(v1 + 24))
  {
    uint64_t v42 = *(void **)(v1 + 16);
    if (!v42)
    {
      uint64_t v44 = v134;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v134, 1, 1, v25);
      goto LABEL_20;
    }
    swift_retain();
    id v43 = v42;
    uint64_t v44 = v134;
    sub_1000A6C74(v134);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v44, 1, v25) == 1)
    {
      swift_release();
LABEL_20:
      sub_10000F394(v44, &qword_1001816B0);
      goto LABEL_21;
    }
    uint64_t v133 = v1;
    uint64_t v55 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v132, v44, v25);
    uint64_t v56 = v121;
    SFAirDrop.NearbySharingInteraction.state.getter();
    uint64_t v58 = v122;
    uint64_t v57 = v123;
    if ((*(unsigned int (**)(char *, void (*)(void, void, void)))(v122 + 88))(v56, v123) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
    {
      int v125 = v34;
      uint64_t v128 = v25;
      uint64_t v129 = v26;
      uint64_t v126 = v36;
      uint64_t v106 = v32;
      uint64_t v134 = v31;
      uint64_t v59 = v119;
      (*(void (**)(char *, void (*)(void, void, void)))(v58 + 96))(v56, v57);
      uint64_t v60 = v120;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v130, v56, v120);
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      long long v61 = (void (*)(char *, void, uint64_t))*((void *)v131 + 13);
      uint64_t v62 = v116;
      v61(v116, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v127);
      sub_10011688C(&qword_100181BE0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v123 = (void (*)(void, void, void))v61;
      if (v137 == v135 && v138 == v136) {
        char v63 = 1;
      }
      else {
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v64 = v117;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = (void (*)(char *, uint64_t))((char *)v131 + 8);
      uint64_t v66 = (void (*)(char *, uint64_t))*((void *)v131 + 1);
      long long v67 = v62;
      uint64_t v68 = v127;
      v66(v67, v127);
      uint64_t v131 = v65;
      v66(v124, v68);
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v64, v130, v60);
      if (v63)
      {
        long long v69 = *(void (**)(char *, uint64_t))(v59 + 8);
        v69(v64, v60);
      }
      else
      {
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
        uint64_t v70 = v112;
        v123(v112, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.share(_:), v68);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v137 == v135 && v138 == v136) {
          char v71 = 1;
        }
        else {
          char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        uint64_t v72 = v129;
        LOBYTE(v34) = v125;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v73 = v127;
        v66(v70, v127);
        v66(v115, v73);
        long long v69 = *(void (**)(char *, uint64_t))(v59 + 8);
        v69(v117, v60);
        if ((v71 & 1) == 0)
        {
          uint64_t v93 = v60;
          uint64_t v32 = v106;
          swift_release();
          v69(v130, v93);
          (*(void (**)(char *, uint64_t))(v72 + 8))(v132, v128);
          goto LABEL_21;
        }
      }
      long long v74 = v132;
      uint64_t v75 = v133;
      uint64_t v76 = v128;
      uint64_t v32 = v106;
      long long v77 = v113;
      SFAirDrop.NearbySharingInteraction.creationDate.getter();
      char v78 = static Date.> infix(_:_:)();
      long long v79 = *(void (**)(char *, uint64_t))(v118 + 8);
      v118 += 8;
      v79(v77, v114);
      if (v78)
      {
        uint64_t v131 = v69;
        long long v80 = v110;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v110, v74, v76);
        swift_retain_n();
        long long v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        int v83 = v82;
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v84 = swift_slowAlloc();
          uint64_t v127 = swift_slowAlloc();
          uint64_t v137 = v127;
          *(_DWORD *)uint64_t v84 = 136315394;
          sub_10011688C(&qword_1001865F8, (void (*)(uint64_t))&type metadata accessor for Date);
          LODWORD(v124) = v83;
          uint64_t v85 = v114;
          uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v135 = sub_100047F98(v86, v87, &v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v84 + 12) = 2080;
          uint64_t v88 = v113;
          SFAirDrop.NearbySharingInteraction.creationDate.getter();
          uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v91 = v90;
          v79(v88, v85);
          uint64_t v135 = sub_100047F98(v89, v91, &v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v75 = v133;
          swift_bridgeObjectRelease();
          long long v92 = *(void (**)(char *, uint64_t))(v129 + 8);
          v92(v80, v128);
          _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v124, "Ending Boop due to AirDrop - transfer.startDate:%s > nearbySharingInteraction.creationDate:%s.", (uint8_t *)v84, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v76 = v128;
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
          long long v92 = *(void (**)(char *, uint64_t))(v129 + 8);
          v92(v80, v76);
        }

        int v94 = *(void **)(v75 + 16);
        uint64_t v95 = v131;
        if (v94)
        {
          id v96 = v94;
          uint64_t v97 = (uint64_t)v111;
          SFAirDrop.NearbySharingInteraction.id.getter();
          uint64_t v98 = sub_1000AD854(v97);
          if (v98)
          {
            uint64_t v99 = v98;
            uint64_t v100 = type metadata accessor for TaskPriority();
            uint64_t v101 = (uint64_t)v107;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v107, 1, 1, v100);
            type metadata accessor for MainActor();
            id v102 = v99;
            uint64_t v76 = v128;
            uint64_t v103 = static MainActor.shared.getter();
            long long v104 = (void *)swift_allocObject();
            void v104[2] = v103;
            v104[3] = &protocol witness table for MainActor;
            v104[4] = v102;
            sub_10010C15C(v101, (uint64_t)&unk_1001865F0, (uint64_t)v104);
            swift_release();

            id v96 = v102;
          }
          uint64_t v32 = v106;
          swift_release();

          (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v109);
        }
        else
        {
          uint64_t v32 = v106;
          swift_release();
        }
        v95(v130, v120);
        v92(v132, v76);
      }
      else
      {
        swift_release();
        v69(v130, v120);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v74, v76);
      }
      LOBYTE(v34) = v125;
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v55, v25);
    swift_release();
    (*(void (**)(char *, void (*)(void, void, void)))(v58 + 8))(v56, v57);
  }
LABEL_21:
  uint64_t v53 = swift_retain();
  sub_10010DA04(v53);
  if ((v34 & 1) == 0)
  {
    sub_1001152A8();
    swift_bridgeObjectRelease();
    swift_release();
    return v32;
  }
  sub_10010DE18();
  swift_release();
LABEL_24:
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_10010DA04(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for ActivityState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - v11;
  if (*(void *)(v1 + 32))
  {
    uint64_t v26 = a1;
    uint64_t v27 = v1;
    uint64_t v30 = v2;
    swift_retain();
    dispatch thunk of Activity.activityState.getter();
    uint64_t v13 = *(void (**)(char *, void, uint64_t))(v7 + 104);
    v13(v10, enum case for ActivityState.dismissed(_:), v6);
    char v14 = static ActivityState.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
    v15(v10, v6);
    v15(v12, v6);
    if (v14)
    {
      swift_release();
      uint64_t v3 = v30;
      a1 = v26;
      uint64_t v4 = v27;
    }
    else
    {
      dispatch thunk of Activity.activityState.getter();
      v13(v10, enum case for ActivityState.ended(_:), v6);
      char v16 = static ActivityState.== infix(_:_:)();
      swift_release();
      v15(v10, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
      uint64_t v3 = v30;
      a1 = v26;
      uint64_t v4 = v27;
      if ((v16 & 1) == 0) {
        return result;
      }
    }
  }
  if (qword_10017F7E0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000B150(v18, (uint64_t)qword_1001863D0);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Requesting AirDrop activity", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  uint64_t v29 = v22;
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = 45;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0x732D72656E6E6162;
  v24._object = (void *)0xEE006E6F69737365;
  String.append(_:)(v24);
  uint64_t v25 = sub_1000886C8(v28, v29);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    *(void *)(v4 + 32) = v25;
    swift_retain();
    swift_release();
    if (qword_10017F610 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v28)
    {
      *(void *)(v28 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = *(void *)(v4 + 32);
      swift_retain();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_10010DE00()
{
}

void sub_10010DE18()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = qword_10017F7E0;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_1001863D0);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v6 = Activity.id.getter();
      sub_100047F98(v6, v7, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Releasing AirDrop banner for activity %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v8 = Activity.id.getter();
    sub_10010F984(v8, v9);
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10010DFFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001835C0);
  uint64_t result = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 32))
  {
    uint64_t v10 = qword_10017F7E0;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_1001863D0);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v24 = v2;
      uint64_t v15 = (uint8_t *)v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v23 = v3;
      uint64_t v27 = v16;
      uint64_t v25 = v0;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = Activity.id.getter();
      uint64_t v26 = sub_100047F98(v17, v18, &v27);
      uint64_t v1 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Releasing AirDrop banner and ending activity %s", v15, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v23;
      swift_slowDealloc();
      uint64_t v2 = v24;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v19 = sub_10000AA4C(&qword_1001835C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
    static ActivityUIDismissalPolicy.immediate.getter();
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000F394((uint64_t)v9, &qword_1001835C0);
    uint64_t v20 = Activity.id.getter();
    sub_10010F984(v20, v21);
    swift_bridgeObjectRelease();
    *(void *)(v1 + 32) = 0;
    swift_release();
    if (qword_10017F610 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v27)
    {
      *(void *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = *(void *)(v1 + 32);
      swift_retain();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10010E3FC(uint64_t a1)
{
  if (*(void *)(v1 + 32))
  {
    uint64_t v3 = qword_10017F7E0;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B150(v4, (uint64_t)qword_1001863D0);
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v8 = Activity.id.getter();
      sub_100047F98(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v7 + 12) = 2080;
      uint64_t v10 = Activity.id.getter();
      sub_100047F98(v10, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ending AirDrop banner activity %s due to Boop banner activity: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    sub_10010DFFC();
    swift_release();
  }
  *(void *)(v1 + 24) = a1;
  swift_retain();
  swift_release();
  uint64_t v12 = Activity.id.getter();
  sub_10010E784(v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010E67C()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 24))
  {
    swift_retain();
    uint64_t v2 = Activity.id.getter();
    uint64_t v4 = v3;
    swift_release();
    uint64_t v5 = Activity.id.getter();
    if (v4)
    {
      if (v2 == v5 && v4 == v6)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          return result;
        }
      }
      *(void *)(v1 + 24) = 0;
      swift_release();
      uint64_t v10 = Activity.id.getter();
      sub_10010F984(v10, v11);
    }
  }
  else
  {
    Activity.id.getter();
  }

  return swift_bridgeObjectRelease();
}

void sub_10010E784(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v99 = a1;
  uint64_t v7 = type metadata accessor for ActivityState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v97 = v7;
  uint64_t v98 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  id v96 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v90 - v11;
  uint64_t v12 = *(void **)(v2 + 40);
  if (!v12) {
    goto LABEL_20;
  }
  id v13 = v12;
  id v14 = [v13 sessionIdentifier];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == v99 && v17 == a2)
  {
    swift_bridgeObjectRelease();
LABEL_12:

    if (!*(void *)(v5 + 40)) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_12;
  }
  if (qword_10017F7E0 != -1) {
    swift_once();
  }
  uint64_t v94 = v3;
  uint64_t v20 = type metadata accessor for Logger();
  sub_10000B150(v20, (uint64_t)qword_1001863D0);
  id v21 = v13;
  swift_bridgeObjectRetain_n();
  id v22 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  uint64_t v93 = v23;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    aBlock[0] = v92;
    *(_DWORD *)uint64_t v25 = 136315394;
    id v91 = (id)(v25 + 4);
    id v26 = [v22 sessionIdentifier];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v101 = sub_100047F98(v27, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v101 = sub_100047F98(v99, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v30 = v93;
    _os_log_impl((void *)&_mh_execute_header, v93, v24, "Releasing assertion for other activity %s in favour of new assertion for activity %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v35 = [v22 sessionIdentifier];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v38 = v37;

  sub_10010F984(v36, v38);
  swift_bridgeObjectRelease();

  uint64_t v4 = v94;
  if (!*(void *)(v5 + 40))
  {
LABEL_20:
    if (*(unsigned char *)(v5 + 48))
    {
      if (qword_10017F7E0 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_10000B150(v39, (uint64_t)qword_1001863D0);
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not taking assertion yet since banner is still showing", v42, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v5 + 49) = 1;
      return;
    }
    *(unsigned char *)(v5 + 49) = 0;
    if (qword_10017F7E0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = sub_10000B150(v43, (uint64_t)qword_1001863D0);
    swift_bridgeObjectRetain_n();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v94 = v4;
    if (v47)
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v48 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v101 = sub_100047F98(v99, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Acquire assertion START [sessionIdentifier = %s]", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v49 = swift_allocObject();
    swift_weakInit();
    uint64_t v50 = (void *)swift_allocObject();
    uint64_t v51 = v99;
    v50[2] = v49;
    v50[3] = v51;
    v50[4] = a2;
    id v52 = objc_allocWithZone((Class)SNAProminentPresentationAssertion);
    swift_bridgeObjectRetain();
    NSString v53 = String._bridgeToObjectiveC()();
    NSString v54 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_100115518;
    aBlock[5] = (uint64_t)v50;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001108DC;
    aBlock[3] = (uint64_t)&unk_10016DE30;
    uint64_t v55 = _Block_copy(aBlock);
    swift_release();
    id v56 = [v52 initWithExplanation:v53 sessionIdentifier:v54 invalidationHandler:v55];
    _Block_release(v55);

    if ([v56 state] == (id)1)
    {
      uint64_t v57 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v56;
      id v58 = v56;

      swift_bridgeObjectRetain_n();
      id v59 = v58;
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v101 = sub_100047F98(v99, a2, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 12) = 2048;
        id v63 = [v59 state];

        uint64_t v101 = (uint64_t)v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Acquire assertion END [sessionIdentifier = %s, assertion state %lu]", (uint8_t *)v62, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return;
    }
    if (!*(void *)(v5 + 32)) {
      goto LABEL_53;
    }
    uint64_t v92 = v44;
    uint64_t v93 = swift_retain();
    if (Activity.id.getter() == v99 && v64 == a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
LABEL_52:
        swift_release();
LABEL_53:
        swift_bridgeObjectRetain_n();
        id v84 = v56;
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v101 = sub_100047F98(v99, a2, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v87 + 12) = 2048;
          id v88 = [v84 state];

          uint64_t v101 = (uint64_t)v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Acquire assertion FAIL [sessionIdentifier = %s, assertion state %lu]", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }

        sub_10011553C();
        swift_allocError();
        *uint64_t v89 = 0;
        v89[1] = 0;
        v89[2] = 1;
        swift_willThrow();
LABEL_57:

        return;
      }
    }
    uint64_t v66 = v95;
    dispatch thunk of Activity.activityState.getter();
    uint64_t v67 = v98;
    uint64_t v68 = v96;
    unint64_t v90 = *(void (**)(char *, void, uint64_t))(v98 + 104);
    id v91 = v56;
    uint64_t v69 = v97;
    v90(v96, enum case for ActivityState.dismissed(_:), v97);
    char v70 = static ActivityState.== infix(_:_:)();
    char v71 = *(void (**)(char *, uint64_t))(v67 + 8);
    v71(v68, v69);
    uint64_t v72 = v69;
    id v56 = v91;
    uint64_t v98 = v67 + 8;
    v71(v66, v72);
    if (v70) {
      goto LABEL_60;
    }
    uint64_t v73 = v95;
    dispatch thunk of Activity.activityState.getter();
    long long v74 = v96;
    uint64_t v75 = v97;
    v90(v96, enum case for ActivityState.ended(_:), v97);
    char v76 = static ActivityState.== infix(_:_:)();
    v71(v74, v75);
    uint64_t v77 = v75;
    id v56 = v91;
    v71(v73, v77);
    if (v76)
    {
LABEL_60:
      if (qword_10017F610 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v78 = aBlock[0];
      if (aBlock[0])
      {
        long long v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v80))
        {
          long long v81 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "Acquire assertion failed due to activity being ended, recreating activity and retrying...", v81, 2u);
          swift_slowDealloc();
        }

        *(void *)(v5 + 32) = 0;
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v82 = v94;
        if (aBlock[0])
        {
          *(void *)(aBlock[0] + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = *(void *)(v5 + 32);
          swift_retain();
          swift_release();
          swift_release();
        }
        uint64_t v83 = sub_10010DA04(v78);
        if (!v82) {
          sub_1001152A8(v83);
        }
        swift_release();
        swift_release();
        goto LABEL_57;
      }
    }
    goto LABEL_52;
  }
LABEL_13:
  if (qword_10017F7E0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10000B150(v31, (uint64_t)qword_1001863D0);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    int v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Not taking assertion as it is non-nil", v34, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10010F60C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  id v14 = (void *)swift_allocObject();
  void v14[2] = v13;
  v14[3] = a4;
  void v14[4] = a5;
  v14[5] = a1;
  v14[6] = a2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &unk_1001865E0;
  *(void *)(v15 + 24) = v14;
  swift_bridgeObjectRetain();
  id v16 = a1;
  swift_errorRetain();
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v11, &qword_1001829C0);
}

uint64_t sub_10010F7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10010F894, v7, v6);
}

uint64_t sub_10010F894()
{
  swift_release();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100115EF8(*(void *)(v0 + 48), *(void *)(v0 + 56), (uint64_t)[*(id *)(v0 + 64) state], (uint64_t)objc_msgSend(*(id *)(v0 + 64), "invalidationReason"), 0, *(void *)(v0 + 72));
    swift_release();
  }
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10010F984(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 40);
  if (v5)
  {
    uint64_t v6 = v2;
    uint64_t v7 = qword_10017F7E0;
    id v8 = v5;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B150(v9, (uint64_t)qword_1001863D0);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Release assertion START [sessionIdentifier = %s]", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    [v8 invalidate];
    uint64_t v17 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;

    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Release assertion END [sessionIdentifier = %s]", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_10017F7E0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_1001863D0);
    swift_bridgeObjectRetain_n();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)id v16 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not releasing assertion for session identifier %s since assertion is nil", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  swift_bridgeObjectRelease_n();
}

uint64_t sub_10010FDEC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000AA4C(&qword_1001829C0);
  uint64_t result = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v2 + 48) = a1;
  if ((a1 & 1) == 0)
  {
    if (qword_10017F7E0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B150(v8, (uint64_t)qword_1001863D0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Banner session dismissed", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = &unk_1001865C0;
    *(void *)(v13 + 24) = v2;
    swift_retain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    return sub_10000F394((uint64_t)v7, &qword_1001829C0);
  }
  return result;
}

uint64_t sub_10010FFEC(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 32) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100110084, v3, v2);
}

uint64_t sub_100110084()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  if (*(unsigned char *)(v1 + 49) == 1)
  {
    if (qword_10017F7E0 != -1) {
      swift_once();
    }
    uint64_t v2 = (uint64_t *)(v0 + 16);
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B150(v3, (uint64_t)qword_1001863D0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Taking assertion for banner requested while racing", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 24);

    if (*(void *)(v7 + 24))
    {
      swift_retain();
      uint64_t v8 = Activity.id.getter();
      sub_10010E784(v8, v9);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_10017F610 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      if (*v2)
      {
        sub_10010DA04(*v2);
        sub_1001152A8();
        swift_release();
      }
      else
      {
        *(unsigned char *)(v1 + 49) = 0;
      }
    }
  }
  os_log_type_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100110418()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AirDropUIBannerManager()
{
  return self;
}

uint64_t sub_10011048C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001FD90;
  return sub_10010FFEC(v0);
}

uint64_t sub_10011051C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100110554()
{
  return sub_1001106C8();
}

uint64_t sub_100110568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110768(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t sub_100110590()
{
  return sub_1001106C8();
}

uint64_t sub_1001105A4(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_10000F330(a1, (uint64_t)&v9 - v6, &qword_100181400);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v7, (uint64_t)v4, &qword_100181400);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000F394((uint64_t)v7, &qword_100181400);
}

uint64_t sub_1001106B4()
{
  return sub_1001106C8();
}

uint64_t sub_1001106C8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100110740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110768(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.DisplayPriority);
}

uint64_t sub_100110768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14((char *)&v16 - v12, a1, v6, v11);
  swift_getKeyPath();
  swift_getKeyPath();
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
}

void sub_1001108DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t sub_100110970(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

void *sub_1001109A8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

void sub_100110A4C(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_100110B04@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void (*sub_100110B34(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  id v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100110BE4(v6, a2, a3);
  return sub_100110B9C;
}

void sub_100110B9C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100110BE4(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_100110C64;
  }
  __break(1u);
  return result;
}

uint64_t sub_100110C64()
{
  return swift_release();
}

uint64_t sub_100110C6C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

id sub_100110CF4(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  id v7 = result;
  uint64_t v8 = *(void *)(a5 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(id, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
  unint64_t v10 = *(void **)(*(void *)(a5 + 56) + 8 * a2);

  return v10;
}

void sub_100110DC4(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10001FB40(0, &qword_1001859E0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10001FB40(0, &qword_1001859E0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_10011103C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1001110C4(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100111114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v172 = a6;
  uint64_t v160 = a5;
  uint64_t v175 = a4;
  double v183 = *(double *)&a2;
  uint64_t v177 = a1;
  uint64_t v6 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v173 = *(void *)(v6 - 8);
  uint64_t v174 = v6;
  __chkstk_darwin(v6);
  id v166 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for SFAirDropReceive.Failure();
  uint64_t v157 = *(void *)(v156 - 8);
  uint64_t v8 = __chkstk_darwin(v156);
  uint64_t v154 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v155 = (char *)&v154 - v10;
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v178 = v11;
  uint64_t v179 = v12;
  __chkstk_darwin(v11);
  id v181 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SFAirDropSend.Failure();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v170 = v14;
  uint64_t v171 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  char v168 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  long long v169 = (char *)&v154 - v18;
  uint64_t v19 = sub_10000AA4C(&qword_100181690);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v164 = (uint64_t)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v165 = (uint64_t)&v154 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v159 = (uint64_t)&v154 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v154 - v26;
  uint64_t v180 = type metadata accessor for Date();
  uint64_t v176 = *(void *)(v180 - 8);
  uint64_t v28 = __chkstk_darwin(v180);
  uint64_t v161 = (char *)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v162 = (char *)&v154 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v163 = (char *)&v154 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v158 = (char *)&v154 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v167 = (char *)&v154 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  unint64_t v40 = (char *)&v154 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v154 - v41;
  uint64_t v43 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v43 - 8);
  uint64_t v45 = (char *)&v154 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v182 = (char *)&v154 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  uint64_t v184 = (char *)&v154 - v50;
  uint64_t v51 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  NSString v54 = (char *)&v154 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v54, enum case for SFAirDrop.DisplayPriority.high(_:), v51);
  sub_10011688C(&qword_100186608, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.DisplayPriority);
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
  if (v55)
  {
    if (qword_10017F7E0 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_10000B150(v56, (uint64_t)qword_1001863D0);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      id v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Showing banner because high display priority was requested", v59, 2u);
      swift_slowDealloc();
    }

    goto LABEL_7;
  }
  sub_10000F330(*(uint64_t *)&v183, (uint64_t)v45, &qword_100181400);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46) != 1)
  {
    uint64_t v68 = v47;
    uint64_t v69 = v184;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v184, v45, v46);
    char v70 = v182;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v182, v69, v46);
    int v71 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v70, v46);
    if (v71 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v47 + 96))(v70, v46);
      swift_bridgeObjectRelease();
      uint64_t v72 = sub_10000AA4C(&qword_1001805A8);
      swift_bridgeObjectRelease();
      sub_10000F330(v175, (uint64_t)v27, &qword_100181690);
      uint64_t v73 = v176;
      uint64_t v74 = v180;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v27, 1, v180) == 1)
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
        sub_10000F394((uint64_t)v27, &qword_100181690);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v42, v27, v74);
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v40, v42, v74);
        if ((v172 & 1) == 0)
        {
          uint64_t v98 = v167;
          static Date.now.getter();
          Date.timeIntervalSince(_:)();
          double v100 = v99;
          uint64_t v101 = *(void (**)(char *, uint64_t))(v73 + 8);
          v101(v98, v74);
          v101(v40, v74);
          v101(v42, v74);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
          char v60 = v100 <= 3.0;
          goto LABEL_36;
        }
        id v88 = *(void (**)(char *, uint64_t))(v73 + 8);
        v88(v40, v74);
        v88(v42, v74);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
      }
      char v60 = 0;
LABEL_36:
      id v102 = &v70[*(int *)(v72 + 48)];
      uint64_t v103 = &v70[*(int *)(v72 + 80)];
      uint64_t v104 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v104 - 8) + 8))(v103, v104);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v102, v174);
      return v60 & 1;
    }
    if (v71 != enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      id v96 = *(void (**)(char *, uint64_t))(v47 + 8);
      v96(v184, v46);
      v96(v70, v46);
      char v60 = 0;
      return v60 & 1;
    }
    (*(void (**)(char *, uint64_t))(v47 + 96))(v70, v46);
    uint64_t v81 = sub_10000AA4C(&qword_100180598);
    uint64_t v83 = v170;
    uint64_t v82 = v171;
    id v84 = v169;
    (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v169, &v70[*(int *)(v81 + 48)], v170);
    uint64_t v85 = v168;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v168, v84, v83);
    int v86 = (*(uint64_t (**)(char *, uint64_t))(v82 + 88))(v85, v83);
    if (v86 == enum case for SFAirDropSend.Failure.missingEndpoint(_:)) {
      goto LABEL_23;
    }
    if (v86 != enum case for SFAirDropSend.Failure.resolveFailure(_:))
    {
      if (v86 == enum case for SFAirDropSend.Failure.unexpected(_:))
      {
LABEL_23:
        uint64_t v87 = *(void (**)(char *, uint64_t))(v82 + 8);
        v87(v84, v83);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
        v87(v85, v83);
LABEL_24:
        char v60 = 1;
LABEL_34:
        uint64_t v97 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
        (*(void (**)(char *, uint64_t))(*(void *)(v97 - 8) + 8))(v70, v97);
        return v60 & 1;
      }
      if (v86 != enum case for SFAirDropSend.Failure.receiverDeclined(_:)
        && v86 != enum case for SFAirDropSend.Failure.cancelled(_:))
      {
        if (v86 == enum case for SFAirDropSend.Failure.unsupportedConnection(_:)
          || v86 == enum case for SFAirDropSend.Failure.badRequest(_:)
          || v86 == enum case for SFAirDropSend.Failure.badResponse(_:)
          || v86 == enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:)
          || v86 == enum case for SFAirDropSend.Failure.streamError(_:)
          || v86 == enum case for SFAirDropSend.Failure.missingOwnContact(_:))
        {
          (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
          goto LABEL_24;
        }
        if (v86 == enum case for SFAirDropSend.Failure.missingRecordData(_:)
          || v86 == enum case for SFAirDropSend.Failure.serverError(_:))
        {
          (*(void (**)(char *, uint64_t))(v171 + 8))(v169, v170);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
          char v60 = 1;
          char v70 = v182;
          goto LABEL_34;
        }
        char v70 = v182;
        uint64_t v83 = v170;
        uint64_t v82 = v171;
        id v84 = v169;
        if (v86 != enum case for SFAirDropSend.Failure.insufficientStorage(_:))
        {
          int v146 = _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          goto LABEL_95;
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v184, v46);
    char v60 = 0;
    goto LABEL_34;
  }
  sub_10000F394((uint64_t)v45, &qword_100181400);
  uint64_t v63 = v178;
  uint64_t v62 = v179;
  uint64_t v64 = v181;
  (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v181, v177, v178);
  int v65 = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v64, v63);
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v66 = sub_10000AA4C(&qword_100181490);
LABEL_12:
    (*(void (**)(char *, uint64_t))(*(void *)(v66 - 8) + 8))(v64, v66);
    sub_10001FB40(0, (unint64_t *)&qword_100181C80);
    uint64_t v67 = (void *)static NSUserDefaults.airdrop.getter();
    char v60 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

    return v60 & 1;
  }
  uint64_t v75 = v180;
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    char v76 = (uint64_t *)&unk_1001806F0;
LABEL_18:
    uint64_t v77 = &v64[*(int *)(sub_10000AA4C(v76) + 48)];
    uint64_t v78 = (uint64_t *)&unk_1001827B0;
LABEL_19:
    uint64_t v79 = sub_10000AA4C(v78);
    (*(void (**)(char *, uint64_t))(*(void *)(v79 - 8) + 8))(v77, v79);
    uint64_t v80 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_20:
    (*(void (**)(char *, uint64_t))(*(void *)(v80 - 8) + 8))(v64, v80);
LABEL_7:
    char v60 = 1;
    return v60 & 1;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v89 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    unint64_t v90 = &v64[*(int *)(v89 + 48)];
    swift_bridgeObjectRelease();
    uint64_t v91 = v173;
    uint64_t v92 = v174;
    uint64_t v93 = v166;
    (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v166, v90, v174);
    uint64_t v94 = v165;
    sub_10000F330(v175, v165, &qword_100181690);
    uint64_t v95 = v176;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v94, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
      sub_10000F394(v94, &qword_100181690);
    }
    else
    {
      uint64_t v111 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v163, v94, v75);
      if ((v172 & 1) == 0)
      {
        uint64_t v118 = v111;
        double v183 = COERCE_DOUBLE(SFAirDrop.Progress.percent.getter());
        LODWORD(v184) = v119;
        uint64_t v120 = v167;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        double v122 = v121;
        uint64_t v123 = *(void (**)(char *, uint64_t))(v95 + 8);
        v123(v120, v75);
        v123(v118, v75);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
        if ((v184 & 1) != 0 || v183 <= 0.9) {
          double v124 = 3.0;
        }
        else {
          double v124 = 4.0;
        }
        char v60 = v122 <= v124;
        goto LABEL_66;
      }
      (*(void (**)(char *, uint64_t))(v95 + 8))(v111, v75);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
    }
    char v60 = 0;
LABEL_66:
    uint64_t v129 = &v64[*(int *)(v89 + 80)];
    uint64_t v130 = type metadata accessor for SFAirDrop.DeclineAction();
LABEL_67:
    (*(void (**)(char *, uint64_t))(*(void *)(v130 - 8) + 8))(v129, v130);
    uint64_t v131 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_68:
    (*(void (**)(char *, uint64_t))(*(void *)(v131 - 8) + 8))(v64, v131);
    return v60 & 1;
  }
  uint64_t v105 = v176;
  if (v65 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v106 = sub_10000AA4C(&qword_1001814D0);
    swift_bridgeObjectRelease();
    uint64_t v107 = &v64[*(int *)(v106 + 80)];
    uint64_t v108 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v108 - 8) + 8))(v107, v108);
    goto LABEL_39;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v112 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v113 = &v64[*(int *)(v112 + 64)];
    uint64_t v114 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v114 - 8) + 8))(v113, v114);
    uint64_t v80 = type metadata accessor for SFAirDropReceive.ItemDestination();
    goto LABEL_20;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    sub_10000AA4C((uint64_t *)&unk_100182790);
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v109 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v109 - 8) + 8))(v64, v109);
    uint64_t v110 = v164;
    sub_10000F330(v175, v164, &qword_100181690);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v110, 1, v75) == 1)
    {
      sub_10000F394(v110, &qword_100181690);
      char v60 = 0;
    }
    else
    {
      uint64_t v115 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v162, v110, v75);
      uint64_t v116 = v161;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v161, v115, v75);
      if (v172)
      {
        uint64_t v117 = *(void (**)(char *, uint64_t))(v105 + 8);
        v117(v116, v75);
        v117(v115, v75);
        char v60 = 0;
      }
      else
      {
        int v125 = v167;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        double v127 = v126;
        uint64_t v128 = *(void (**)(char *, uint64_t))(v105 + 8);
        v128(v125, v75);
        v128(v116, v75);
        v128(v115, v75);
        char v60 = v127 <= 5.0;
      }
    }
    return v60 & 1;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v132 = sub_10000AA4C(&qword_1001806D8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v133 = v159;
    sub_10000F330(v160, v159, &qword_100181690);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v133, 1, v75) == 1)
    {
      sub_10000F394(v133, &qword_100181690);
      char v60 = 0;
    }
    else
    {
      uint64_t v134 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v158, v133, v75);
      uint64_t v135 = v167;
      static Date.now.getter();
      Date.timeIntervalSince(_:)();
      double v137 = v136;
      uint64_t v138 = *(void (**)(char *, uint64_t))(v105 + 8);
      v138(v135, v75);
      v138(v134, v75);
      char v60 = v137 <= 7.0;
    }
    uint64_t v129 = &v64[*(int *)(v132 + 80)];
    uint64_t v130 = sub_10000AA4C(&qword_100181490);
    goto LABEL_67;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v77 = &v64[*(int *)(sub_10000AA4C(&qword_1001806E8) + 48)];
    uint64_t v78 = &qword_100181490;
    goto LABEL_19;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    char v76 = (uint64_t *)&unk_100182800;
    goto LABEL_18;
  }
  if (v65 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
    uint64_t v139 = &v64[*(int *)(sub_10000AA4C(&qword_1001827F0) + 48)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v140 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v140 - 8) + 8))(v139, v140);
    uint64_t v66 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    goto LABEL_12;
  }
  if (v65 != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v63);
    char v60 = 0;
    return v60 & 1;
  }
  (*(void (**)(char *, uint64_t))(v62 + 96))(v64, v63);
  uint64_t v141 = sub_10000AA4C(&qword_1001827E0);
  uint64_t v142 = v157;
  long long v143 = v155;
  uint64_t v144 = v156;
  (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v155, &v64[*(int *)(v141 + 48)], v156);
  long long v145 = v154;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v154, v143, v144);
  int v146 = (*(uint64_t (**)(char *, uint64_t))(v142 + 88))(v145, v144);
  if (v146 == enum case for SFAirDropReceive.Failure.unsupportedType(_:))
  {
    uint64_t v147 = v157;
    uint64_t v148 = v156;
    (*(void (**)(char *, uint64_t))(v157 + 8))(v155, v156);
    long long v149 = v154;
    (*(void (**)(char *, uint64_t))(v147 + 96))(v154, v148);
    swift_bridgeObjectRelease();
    long long v150 = &v149[*(int *)(sub_10000AA4C(&qword_1001827E8) + 48)];
    uint64_t v151 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(void *)(v151 - 8) + 8))(v150, v151);
    char v60 = 1;
LABEL_101:
    uint64_t v131 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    goto LABEL_68;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.unexpected(_:))
  {
    long long v152 = *(void (**)(char *, uint64_t))(v157 + 8);
    uint64_t v153 = v156;
    v152(v155, v156);
    v152(v154, v153);
    char v60 = 1;
LABEL_100:
    uint64_t v64 = v181;
    goto LABEL_101;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.declined(_:)
    || v146 == enum case for SFAirDropReceive.Failure.askDismissed(_:))
  {
    goto LABEL_99;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.senderCancelled(_:))
  {
LABEL_92:
    (*(void (**)(char *, uint64_t))(v157 + 8))(v155, v156);
    char v60 = 1;
    goto LABEL_100;
  }
LABEL_95:
  if (v146 == enum case for SFAirDropReceive.Failure.receiverCancelled(_:)
    || v146 == enum case for SFAirDropReceive.Failure.mixedTypes(_:))
  {
    goto LABEL_99;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:)) {
    goto LABEL_92;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.missingOwnContact(_:))
  {
LABEL_99:
    (*(void (**)(char *, uint64_t))(v157 + 8))(v155, v156);
    char v60 = 0;
    goto LABEL_100;
  }
  if (v146 == enum case for SFAirDropReceive.Failure.streamError(_:)
    || v146 == enum case for SFAirDropReceive.Failure.askNotHandled(_:)
    || v146 == enum case for SFAirDropReceive.Failure.incompleteTransfer(_:)
    || v146 == enum case for SFAirDropReceive.Failure.badRequest(_:)
    || v146 == enum case for SFAirDropReceive.Failure.moveToAppFailed(_:)
    || v146 == enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
  {
    goto LABEL_92;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100112BBC(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181690);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v43 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v42 = (char *)&v32 - v5;
  uint64_t v41 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v40 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v8 - 8);
  uint64_t v39 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t result = __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v44 = a1;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v33 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v46 = &_swiftEmptyArrayStorage;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  uint64_t v36 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  int64_t v34 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v35 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v18 = (uint64_t)v37;
  uint64_t v20 = (uint64_t)v39;
  uint64_t v19 = (uint64_t)v40;
  uint64_t v22 = (uint64_t)v42;
  uint64_t v21 = (uint64_t)v43;
  if ((v16 & v14) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v25 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v25 < v34)
    {
      unint64_t v26 = *(void *)(v33 + 8 * v25);
      int64_t v27 = v13 + 1;
      if (v26) {
        goto LABEL_23;
      }
      int64_t v27 = v13 + 2;
      if (v13 + 2 >= v34) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (v26) {
        goto LABEL_23;
      }
      int64_t v27 = v13 + 3;
      if (v13 + 3 >= v34) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (v26) {
        goto LABEL_23;
      }
      int64_t v27 = v13 + 4;
      if (v13 + 4 >= v34) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (v26)
      {
LABEL_23:
        unint64_t v17 = (v26 - 1) & v26;
        int64_t v45 = v27;
        for (unint64_t i = __clz(__rbit64(v26)) + (v27 << 6); ; unint64_t i = v23 | (v13 << 6))
        {
          uint64_t v29 = *(void *)(*(void *)(v44 + 56) + 8 * i);
          swift_getKeyPath();
          swift_getKeyPath();
          swift_retain();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          uint64_t v30 = v29 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
          swift_beginAccess();
          sub_10000F330(v30, v22, &qword_100181690);
          uint64_t v31 = v29 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
          swift_beginAccess();
          sub_10000F330(v31, v21, &qword_100181690);
          LOBYTE(v31) = sub_100111114(v18, v20, v19, v22, v21, *(unsigned __int8 *)(v29+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled));
          sub_10000F394(v21, &qword_100181690);
          sub_10000F394(v22, &qword_100181690);
          (*v36)(v19, v41);
          sub_10000F394(v20, &qword_100181400);
          (*v35)(v18, v38);
          if (v31)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized ContiguousArray._endMutation()();
            int64_t v13 = v45;
            if (!v17) {
              goto LABEL_8;
            }
          }
          else
          {
            uint64_t result = swift_release();
            int64_t v13 = v45;
            if (!v17) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v23 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
          int64_t v45 = v13;
        }
      }
      uint64_t v28 = v13 + 5;
      if (v13 + 5 < v34)
      {
        unint64_t v26 = *(void *)(v33 + 8 * v28);
        if (v26)
        {
          int64_t v27 = v13 + 5;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v27 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_29;
          }
          if (v27 >= v34) {
            break;
          }
          unint64_t v26 = *(void *)(v33 + 8 * v27);
          ++v28;
          if (v26) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_27:
    swift_release();
    return (uint64_t)v46;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100113150(uint64_t a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100181690);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v166 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t)&v166 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v166 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v174 = *(char **)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (unint64_t)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v166 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v166 - v20;
  __chkstk_darwin(v19);
  uint64_t v175 = (char *)&v166 - v22;
  uint64_t v186 = (void (**)(unint64_t, uint64_t, unint64_t))type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v177 = (uint64_t)*(v186 - 1);
  uint64_t v23 = __chkstk_darwin(v186);
  uint64_t v176 = (char *)&v166 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v179 = (char *)&v166 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  id v181 = (void (**)(char *, unint64_t))((char *)&v166 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v184 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v166 - v30);
  __chkstk_darwin(v29);
  unsigned __int8 v185 = (char *)&v166 - v31;
  unint64_t v190 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v180 = *(void *)(v190 - 8);
  uint64_t v32 = __chkstk_darwin(v190);
  uint64_t v182 = (char *)&v166 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v178 = (char *)&v166 - v34;
  uint64_t v35 = sub_10000AA4C(&qword_100181400);
  uint64_t v36 = __chkstk_darwin(v35 - 8);
  double v183 = (char *)&v166 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v188 = (uint64_t)&v166 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (uint64_t)&v166 - v40;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v171 = v21;
  int v172 = v11;
  uint64_t v170 = v18;
  uint64_t v42 = swift_bridgeObjectRetain();
  unint64_t v43 = sub_100112BBC(v42);
  uint64_t v44 = v43;
  int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v43 & 0xFFFFFFFFFFFFFF8);
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v189 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))v44;
    swift_bridgeObjectRelease();
    if (!v1)
    {
      uint64_t v92 = sub_10010BBA0(a1);
      if (v92)
      {
        if (*(unsigned char *)(v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled)) {
          goto LABEL_10;
        }
        swift_release();
      }
    }
    int v46 = 0;
    uint64_t v44 = (uint64_t)v189;
    goto LABEL_81;
  }
  if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    int v46 = 0;
    goto LABEL_5;
  }
  uint64_t v189 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))v43;
  uint64_t v49 = sub_10010BBA0(a1);
  if (!v49)
  {
LABEL_14:
    int v46 = 0;
    uint64_t v44 = (uint64_t)v189;
    uint64_t v47 = *((void *)v45 + 2);
    if (v47) {
      goto LABEL_15;
    }
    goto LABEL_82;
  }
  if ((*(unsigned char *)(v49 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) == 0)
  {
    swift_release();
    goto LABEL_14;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v50 = swift_bridgeObjectRetain();
  uint64_t v44 = sub_10011569C(v50);
  swift_release();
  int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v44 & 0xFFFFFFFFFFFFFF8);
  int v46 = 1;
  if (v44 < 0 || (v44 & 0x4000000000000000) != 0)
  {
LABEL_81:
    int v80 = v46;
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    int v46 = v80;
    if (v47) {
      goto LABEL_15;
    }
LABEL_82:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  uint64_t v47 = *((void *)v45 + 2);
  if (!v47) {
    goto LABEL_82;
  }
LABEL_15:
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  if (v47 < 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v166 = v15;
    uint64_t v169 = v12;
    uint64_t v168 = v9;
    uint64_t v167 = v6;
    int v173 = v46;
    unint64_t v51 = v44 & 0xC000000000000001;
    uint64_t v189 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))(v180 + 48);
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    uint64_t v1 = v44;
    do
    {
      if (v51) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      int64_t v45 = *v189;
      int v53 = (*v189)(v41, 1, v190);
      sub_10000F394(v41, &qword_100181400);
      if (v53 == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      ++v52;
    }
    while (v47 != v52);
    swift_bridgeObjectRelease();
    uint64_t v41 = 0;
    unint64_t v187 = v191;
    unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
    uint64_t v54 = v188;
    do
    {
      if (v51) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      int v55 = v45(v54, 1, v190);
      sub_10000F394(v54, &qword_100181400);
      if (v55 == 1)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      ++v41;
    }
    while (v47 != v41);
    swift_bridgeObjectRelease();
    unint64_t v15 = v191;
    uint64_t v9 = v187;
    if ((v187 & 0x8000000000000000) == 0 && (v187 & 0x4000000000000000) == 0)
    {
      uint64_t v56 = *(void *)(v187 + 16);
      goto LABEL_35;
    }
  }
  swift_retain();
  uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_35:
  unint64_t KeyPath = (unint64_t)v178;
  uint64_t v58 = (uint64_t)v183;
  if (!v56)
  {
    swift_release();
    unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
    if ((v15 & 0x8000000000000000) == 0 && (v15 & 0x4000000000000000) == 0)
    {
      uint64_t v48 = *(void *)(v15 + 16);
      swift_retain();
      uint64_t v188 = v48;
      if (!v48) {
        goto LABEL_119;
      }
      goto LABEL_65;
    }
LABEL_118:
    swift_retain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v188 = v48;
    if (!v48)
    {
LABEL_119:
      swift_release();
      uint64_t v56 = (uint64_t)&_swiftEmptyArrayStorage;
      if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_127;
      }
LABEL_120:
      if ((v56 & 0x4000000000000000) == 0)
      {
        uint64_t v1 = *(void *)(v56 + 16);
        swift_retain();
        if (v1) {
          goto LABEL_122;
        }
LABEL_128:
        swift_release_n();
        if (!v48) {
          goto LABEL_214;
        }
        uint64_t v47 = v15 & 0xC000000000000001;
        if ((v15 & 0xC000000000000001) != 0) {
          goto LABEL_196;
        }
        if (*(void *)(v15 + 16))
        {
          uint64_t v48 = *(void *)(v15 + 32);
          swift_retain();
          swift_retain();
          goto LABEL_132;
        }
        __break(1u);
LABEL_198:
        swift_retain();
        uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
        if (!v47) {
          goto LABEL_199;
        }
LABEL_176:
        int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v56 & 0xC000000000000001);
        if ((v56 & 0xC000000000000001) != 0)
        {
LABEL_218:
          uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v110 = v47 - 1;
          if (v47 == 1) {
            goto LABEL_213;
          }
LABEL_179:
          if (v47 >= 2)
          {
            if (v45 || (unint64_t v111 = *(void *)(v56 + 16), v111 >= 2) && v110 < v111)
            {
              uint64_t v112 = 0;
              do
              {
                if (v45)
                {
                  uint64_t v113 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  uint64_t v113 = *(void *)(v56 + 8 * v112 + 40);
                  swift_retain();
                }
                if (static Date.< infix(_:_:)()) {
                  uint64_t v48 = v113;
                }
                swift_release();
                ++v112;
              }
              while (v110 != v112);
              goto LABEL_213;
            }
            __break(1u);
LABEL_296:
            __break(1u);
            goto LABEL_297;
          }
          goto LABEL_264;
        }
        if (*(void *)(v56 + 16))
        {
          uint64_t v48 = *(void *)(v56 + 32);
          swift_retain();
          unint64_t v110 = v47 - 1;
          if (v47 == 1) {
            goto LABEL_213;
          }
          goto LABEL_179;
        }
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        swift_retain();
        uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v121 = (uint64_t)v172;
        uint64_t v41 = (uint64_t)v176;
        if (!v47) {
          goto LABEL_224;
        }
LABEL_210:
        int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v56 & 0xC000000000000001);
        if ((v56 & 0xC000000000000001) != 0)
        {
LABEL_265:
          uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v48 = result;
          unint64_t v123 = v47 - 1;
          if (v47 != 1)
          {
LABEL_266:
            if (v47 >= 2)
            {
              if (v45 || (unint64_t v160 = *(void *)(v56 + 16), v160 >= 2) && v123 < v160)
              {
                uint64_t v161 = 0;
                do
                {
                  if (v45)
                  {
                    uint64_t v162 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    uint64_t v162 = *(void *)(v56 + 8 * v161 + 40);
                    swift_retain();
                  }
                  if (static Date.< infix(_:_:)()) {
                    uint64_t v48 = v162;
                  }
                  swift_release();
                  ++v161;
                }
                while (v123 != v161);
                goto LABEL_213;
              }
              goto LABEL_300;
            }
            goto LABEL_296;
          }
LABEL_213:
          swift_release_n();
LABEL_214:
          swift_release();
          return v48;
        }
        if (*(void *)(v56 + 16))
        {
          uint64_t v48 = *(void *)(v56 + 32);
          uint64_t result = swift_retain();
          unint64_t v123 = v47 - 1;
          if (v47 != 1) {
            goto LABEL_266;
          }
          goto LABEL_213;
        }
        __break(1u);
        goto LABEL_278;
      }
LABEL_127:
      swift_retain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      if (v1)
      {
LABEL_122:
        uint64_t v47 = v56 & 0xC000000000000001;
        if ((v56 & 0xC000000000000001) == 0)
        {
          if (!*(void *)(v56 + 16))
          {
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v88 = v47 - 1;
            if (v47 == 1) {
              goto LABEL_213;
            }
LABEL_101:
            if (v47 >= 2)
            {
              if (v45 || (unint64_t v89 = *(void *)(v56 + 16), v89 >= 2) && v88 < v89)
              {
                uint64_t v90 = 0;
                do
                {
                  if (v45)
                  {
                    uint64_t v91 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else
                  {
                    uint64_t v91 = *(void *)(v56 + 8 * v90 + 40);
                    swift_retain();
                  }
                  if (static Date.< infix(_:_:)()) {
                    uint64_t v48 = v91;
                  }
                  swift_release();
                  ++v90;
                }
                while (v88 != v90);
                goto LABEL_213;
              }
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            __break(1u);
            goto LABEL_217;
          }
          uint64_t v48 = *(void *)(v56 + 32);
          swift_retain();
          unint64_t KeyPath = v1 - 1;
          if (v1 == 1)
          {
LABEL_125:
            swift_release_n();
            goto LABEL_214;
          }
LABEL_147:
          if (v1 >= 2)
          {
            if (v47 || (unint64_t v97 = *(void *)(v56 + 16), v97 >= 2) && KeyPath < v97)
            {
              uint64_t v98 = 0;
              do
              {
                if (v47)
                {
                  uint64_t v99 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  uint64_t v99 = *(void *)(v56 + 8 * v98 + 40);
                  swift_retain();
                }
                if (static Date.< infix(_:_:)()) {
                  uint64_t v48 = v99;
                }
                swift_release();
                ++v98;
              }
              while (KeyPath != v98);
              goto LABEL_125;
            }
            goto LABEL_222;
          }
          goto LABEL_195;
        }
LABEL_146:
        uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t KeyPath = v1 - 1;
        if (v1 == 1) {
          goto LABEL_125;
        }
        goto LABEL_147;
      }
      goto LABEL_128;
    }
LABEL_65:
    if (v48 < 1)
    {
      __break(1u);
      goto LABEL_146;
    }
    uint64_t v68 = 0;
    unint64_t v187 = v15 & 0xC000000000000001;
    unsigned __int8 v185 = (char *)(v180 + 16);
    uint64_t v186 = (void (**)(unint64_t, uint64_t, unint64_t))(v180 + 32);
    uint64_t v69 = (uint64_t (**)(char *, unint64_t))(v180 + 88);
    LODWORD(v184) = enum case for SFAirDropSend.Transfer.State.transferFailed(_:);
    uint64_t v41 = v180 + 8;
    id v181 = (void (**)(char *, unint64_t))(v180 + 96);
    uint64_t v9 = v15;
    do
    {
      if (v187) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      unint64_t v70 = v190;
      if (v45(v58, 1, v190) == 1)
      {
        sub_10000F394(v58, &qword_100181400);
        swift_release();
      }
      else
      {
        (*v186)(KeyPath, v58, v70);
        int v71 = v182;
        (*(void (**)(char *, unint64_t, unint64_t))v185)(v182, KeyPath, v70);
        int v72 = (*v69)(v71, v70);
        unint64_t v73 = KeyPath;
        if (v72 == v184)
        {
          (*v181)(v71, v70);
          uint64_t v74 = v71;
          uint64_t v75 = &v71[*(int *)(sub_10000AA4C(&qword_100180598) + 48)];
          (*(void (**)(unint64_t, unint64_t))v41)(v73, v70);
          uint64_t v76 = type metadata accessor for SFAirDropSend.Failure();
          (*(void (**)(char *, uint64_t))(*(void *)(v76 - 8) + 8))(v75, v76);
          uint64_t v77 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
          (*(void (**)(char *, uint64_t))(*(void *)(v77 - 8) + 8))(v74, v77);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          uint64_t v78 = v71;
          uint64_t v79 = *(void (**)(char *, unint64_t))v41;
          (*(void (**)(unint64_t, unint64_t))v41)(v73, v70);
          v79(v78, v70);
          swift_release();
        }
        unint64_t KeyPath = v73;
        uint64_t v58 = (uint64_t)v183;
      }
      ++v68;
      uint64_t v48 = v188;
      unint64_t v15 = v9;
    }
    while (v188 != v68);
    swift_release();
    uint64_t v56 = v191;
    if ((v191 & 0x8000000000000000) != 0) {
      goto LABEL_127;
    }
    goto LABEL_120;
  }
  swift_release();
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  double v183 = (char *)(v56 - 1);
  if (v56 < 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v190 = v9 & 0xC000000000000001;
    unint64_t v15 = v177 + 88;
    uint64_t v41 = enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:);
    uint64_t v188 = v177 + 8;
    uint64_t v189 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))(v177 + 96);
    swift_retain();
    uint64_t v59 = 0;
    do
    {
      uint64_t v58 = v56;
      if (v190)
      {
        unint64_t KeyPath = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t KeyPath = *(void *)(v9 + 8 * v59 + 32);
        swift_retain();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      char v60 = v185;
      static Published.subscript.getter();
      swift_release();
      os_log_type_t v61 = v60;
      swift_release();
      uint64_t v1 = *(void *)v15;
      uint64_t v62 = v186;
      if ((*(unsigned int (**)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v15)(v61, v186) == v41)
      {
        ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v61, v62);
        uint64_t v63 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v63 - 8) + 8))(v61, v63);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        (*(void (**)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v188)(v61, v62);
        swift_release();
      }
      ++v59;
      uint64_t v56 = v58;
      uint64_t v9 = v187;
    }
    while (v58 != v59);
    swift_release();
    uint64_t v56 = v191;
    if ((v191 & 0x8000000000000000) == 0 && (v191 & 0x4000000000000000) == 0)
    {
      uint64_t v47 = *(void *)(v191 + 16);
      swift_retain();
      if (v47)
      {
LABEL_48:
        int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v56 & 0xC000000000000001);
        if ((v56 & 0xC000000000000001) != 0)
        {
          uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v64 = v47 - 1;
          if (v47 == 1) {
            goto LABEL_213;
          }
          goto LABEL_51;
        }
        if (*(void *)(v56 + 16))
        {
          uint64_t v48 = *(void *)(v56 + 32);
          swift_retain();
          unint64_t v64 = v47 - 1;
          if (v47 == 1) {
            goto LABEL_213;
          }
LABEL_51:
          if (v47 >= 2)
          {
            if (v45 || (unint64_t v65 = *(void *)(v56 + 16), v65 >= 2) && v64 < v65)
            {
              uint64_t v66 = 0;
              do
              {
                if (v45)
                {
                  uint64_t v67 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  uint64_t v67 = *(void *)(v56 + 8 * v66 + 40);
                  swift_retain();
                }
                if (static Date.< infix(_:_:)()) {
                  uint64_t v48 = v67;
                }
                swift_release();
                ++v66;
              }
              while (v64 != v66);
              goto LABEL_213;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
          goto LABEL_191;
        }
        __break(1u);
        goto LABEL_118;
      }
      goto LABEL_87;
    }
  }
  swift_retain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  if (v47) {
    goto LABEL_48;
  }
LABEL_87:
  swift_release_n();
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  swift_retain();
  uint64_t v81 = 0;
  unint64_t KeyPath = enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:);
  do
  {
    if (v190)
    {
      uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v41 = *(void *)(v9 + 8 * v81 + 32);
      swift_retain();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v82 = (char *)v184;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v83 = v186;
    if (((unsigned int (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v1)(v82, v186) == KeyPath)
    {
      ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v82, v83);
      uint64_t v84 = sub_10000AA4C(&qword_1001814F0);
      swift_bridgeObjectRelease();
      uint64_t v85 = &v82[*(int *)(v84 + 64)];
      uint64_t v86 = sub_10000AA4C(&qword_100181490);
      (*(void (**)(char *, uint64_t))(*(void *)(v86 - 8) + 8))(v85, v86);
      uint64_t v87 = type metadata accessor for SFAirDropReceive.ItemDestination();
      (*(void (**)(char *, uint64_t))(*(void *)(v87 - 8) + 8))(v82, v87);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      (*(void (**)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v188)(v82, v83);
      swift_release();
    }
    ++v81;
    uint64_t v9 = v187;
  }
  while (v58 != v81);
  swift_release();
  uint64_t v56 = v191;
  if ((v191 & 0x8000000000000000) != 0 || (v191 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    if (v47) {
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v47 = *(void *)(v191 + 16);
    swift_retain();
    if (v47)
    {
LABEL_98:
      int64_t v45 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v56 & 0xC000000000000001);
      if ((v56 & 0xC000000000000001) != 0) {
        goto LABEL_192;
      }
      if (*(void *)(v56 + 16))
      {
        uint64_t v48 = *(void *)(v56 + 32);
        swift_retain();
        unint64_t v88 = v47 - 1;
        if (v47 == 1) {
          goto LABEL_213;
        }
        goto LABEL_101;
      }
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      swift_retain();
      uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_132:
      unint64_t v93 = v188 - 1;
      if (v188 == 1) {
        goto LABEL_133;
      }
      if (v188 >= 2)
      {
        if (v47 || (unint64_t v94 = *(void *)(v15 + 16), v94 >= 2) && v93 < v94)
        {
          uint64_t v95 = 0;
          do
          {
            if (v47)
            {
              uint64_t v96 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v96 = *(void *)(v15 + 8 * v95 + 40);
              swift_retain();
            }
            if (static Date.< infix(_:_:)()) {
              uint64_t v48 = v96;
            }
            swift_release();
            ++v95;
          }
          while (v93 != v95);
          goto LABEL_133;
        }
LABEL_278:
        __break(1u);
        goto LABEL_279;
      }
      goto LABEL_221;
    }
  }
  swift_release_n();
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  swift_retain();
  uint64_t v100 = 0;
  unint64_t KeyPath = enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:);
  int v101 = enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:);
  LODWORD(v185) = enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:);
  do
  {
    if (v190)
    {
      uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v41 = *(void *)(v9 + 8 * v100 + 32);
      swift_retain();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v106 = (char *)v181;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v107 = v186;
    int v108 = ((uint64_t (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v1)(v106, v186);
    if (v108 == KeyPath)
    {
      ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v106, v107);
      uint64_t v109 = (uint64_t *)&unk_1001806F0;
LABEL_171:
      id v102 = &v106[*(int *)(sub_10000AA4C(v109) + 48)];
      uint64_t v103 = (uint64_t *)&unk_1001827B0;
      goto LABEL_161;
    }
    if (v108 == v101)
    {
      ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v106, v107);
      id v102 = &v106[*(int *)(sub_10000AA4C(&qword_1001806E8) + 48)];
      uint64_t v103 = &qword_100181490;
LABEL_161:
      uint64_t v104 = sub_10000AA4C(v103);
      (*(void (**)(char *, uint64_t))(*(void *)(v104 - 8) + 8))(v102, v104);
      uint64_t v105 = type metadata accessor for SFAirDrop.ContactInfo();
      (*(void (**)(char *, uint64_t))(*(void *)(v105 - 8) + 8))(v106, v105);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      goto LABEL_162;
    }
    if (v108 == v185)
    {
      ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v106, v107);
      uint64_t v109 = (uint64_t *)&unk_100182800;
      goto LABEL_171;
    }
    (*(void (**)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v188)(v106, v107);
    swift_release();
LABEL_162:
    uint64_t v9 = v187;
    ++v100;
  }
  while (v58 != v100);
  swift_release();
  uint64_t v56 = v191;
  if ((v191 & 0x8000000000000000) != 0 || (v191 & 0x4000000000000000) != 0) {
    goto LABEL_198;
  }
  uint64_t v47 = *(void *)(v191 + 16);
  swift_retain();
  if (v47) {
    goto LABEL_176;
  }
LABEL_199:
  swift_release_n();
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  swift_retain();
  uint64_t v114 = 0;
  int v115 = enum case for SFAirDropReceive.Transfer.State.transferFailed(_:);
  do
  {
    if (v190) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    swift_getKeyPath();
    unint64_t KeyPath = swift_getKeyPath();
    uint64_t v116 = v179;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v117 = v186;
    if (((unsigned int (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v1)(v116, v186) == v115)
    {
      ((void (*)(char *, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v116, v117);
      uint64_t v118 = &v116[*(int *)(sub_10000AA4C(&qword_1001827E0) + 48)];
      uint64_t v119 = type metadata accessor for SFAirDropReceive.Failure();
      (*(void (**)(char *, uint64_t))(*(void *)(v119 - 8) + 8))(v118, v119);
      uint64_t v120 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
      (*(void (**)(char *, uint64_t))(*(void *)(v120 - 8) + 8))(v116, v120);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      (*(void (**)(char *, void (**)(unint64_t, uint64_t, unint64_t)))v188)(v116, v117);
      swift_release();
    }
    ++v114;
    uint64_t v9 = v187;
  }
  while (v58 != v114);
  swift_release();
  uint64_t v56 = v191;
  if ((v191 & 0x8000000000000000) != 0 || (v191 & 0x4000000000000000) != 0) {
    goto LABEL_223;
  }
  uint64_t v47 = *(void *)(v191 + 16);
  swift_retain();
  uint64_t v121 = (uint64_t)v172;
  uint64_t v41 = (uint64_t)v176;
  if (v47) {
    goto LABEL_210;
  }
LABEL_224:
  swift_release_n();
  unint64_t v191 = (unint64_t)&_swiftEmptyArrayStorage;
  int v124 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  uint64_t v184 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48);
  uint64_t v182 = v174 + 32;
  id v181 = (void (**)(char *, unint64_t))(v174 + 8);
  swift_retain();
  uint64_t v125 = 0;
  LODWORD(v180) = v124;
  do
  {
    if (v190)
    {
      uint64_t v126 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v126 = *(void *)(v9 + 8 * v125 + 32);
      swift_retain();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    double v127 = v186;
    if (((unsigned int (*)(uint64_t, void (**)(unint64_t, uint64_t, unint64_t)))v1)(v41, v186) == v124)
    {
      ((void (*)(uint64_t, void (**)(unint64_t, uint64_t, unint64_t)))*v189)(v41, v127);
      uint64_t v128 = sub_10000AA4C(&qword_1001806D8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned __int8 v185 = (char *)(v41 + *(int *)(v128 + 80));
      uint64_t v129 = v126 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      sub_10000F330(v129, v121, &qword_100181690);
      uint64_t v130 = v121;
      uint64_t v131 = v121;
      uint64_t v132 = v169;
      if ((*v184)(v130, 1, v169) == 1)
      {
        sub_10000F394(v131, &qword_100181690);
        uint64_t v133 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v133 - 8) + 8))(v185, v133);
        uint64_t v134 = type metadata accessor for SFAirDropReceive.ItemDestination();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v134 - 8) + 8))(v41, v134);
        swift_release();
        uint64_t v9 = v187;
        uint64_t v121 = v131;
      }
      else
      {
        uint64_t v135 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))v182)(v175, v131, v132);
        double v136 = v171;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        double v138 = v137;
        uint64_t v139 = *v181;
        (*v181)(v136, v132);
        uint64_t v140 = v135;
        uint64_t v41 = (uint64_t)v176;
        v139(v140, v132);
        uint64_t v141 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v141 - 8) + 8))(v185, v141);
        uint64_t v142 = type metadata accessor for SFAirDropReceive.ItemDestination();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8))(v41, v142);
        if (v138 <= 7.0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        uint64_t v9 = v187;
        uint64_t v121 = (uint64_t)v172;
        int v124 = v180;
      }
    }
    else
    {
      (*(void (**)(uint64_t, void (**)(unint64_t, uint64_t, unint64_t)))v188)(v41, v127);
      swift_release();
      uint64_t v9 = v187;
    }
    ++v125;
  }
  while (v58 != v125);
  unint64_t KeyPath = v58;
  swift_release();
  uint64_t v56 = v191;
  if ((v191 & 0x8000000000000000) != 0 || (v191 & 0x4000000000000000) != 0)
  {
LABEL_279:
    swift_retain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v48 = result;
    long long v143 = v183;
    if (!result) {
      goto LABEL_280;
    }
LABEL_240:
    uint64_t v41 = v56 & 0xC000000000000001;
    if ((v56 & 0xC000000000000001) == 0)
    {
      if (!*(void *)(v56 + 16))
      {
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
        return result;
      }
      uint64_t v144 = *(void *)(v56 + 32);
      uint64_t result = swift_retain();
LABEL_243:
      unint64_t v190 = v48 - 1;
      if (v48 == 1)
      {
        uint64_t v48 = v144;
        goto LABEL_213;
      }
      if (v48 >= 2)
      {
        if (v41 || (unint64_t v145 = *(void *)(v56 + 16), v145 >= 2) && v190 < v145)
        {
          uint64_t v146 = 0;
          uint64_t v188 = v56;
          uint64_t v189 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))v41;
          uint64_t v147 = v169;
          while (1)
          {
            if (v41)
            {
              uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v48 = *(void *)(v56 + 8 * v146 + 40);
              swift_retain();
            }
            uint64_t v148 = v144 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
            swift_beginAccess();
            uint64_t v149 = v148;
            uint64_t v150 = v168;
            sub_10000F330(v149, v168, &qword_100181690);
            uint64_t v151 = *v184;
            if ((*v184)(v150, 1, v147) == 1) {
              goto LABEL_259;
            }
            long long v152 = *(void (**)(unint64_t, uint64_t, uint64_t))v182;
            uint64_t v153 = v170;
            (*(void (**)(char *, uint64_t, uint64_t))v182)(v170, v168, v147);
            uint64_t v154 = v48 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
            swift_beginAccess();
            uint64_t v155 = v154;
            uint64_t v150 = (uint64_t)v167;
            sub_10000F330(v155, (uint64_t)v167, &qword_100181690);
            if (v151(v150, 1, v147) == 1) {
              break;
            }
            unint64_t v156 = v166;
            v152(v166, v150, v147);
            char v157 = static Date.< infix(_:_:)();
            uint64_t v158 = *v181;
            uint64_t v159 = (char *)v156;
            uint64_t v56 = v188;
            (*v181)(v159, v147);
            v158(v153, v147);
            uint64_t v41 = (uint64_t)v189;
            if (v157) {
              goto LABEL_252;
            }
LABEL_251:
            uint64_t v48 = v144;
LABEL_252:
            swift_release();
            ++v146;
            uint64_t v144 = v48;
            if (v190 == v146) {
              goto LABEL_213;
            }
          }
          (*v181)(v153, v147);
          uint64_t v41 = (uint64_t)v189;
LABEL_259:
          sub_10000F394(v150, &qword_100181690);
          if (static Date.< infix(_:_:)()) {
            goto LABEL_252;
          }
          goto LABEL_251;
        }
        goto LABEL_302;
      }
      goto LABEL_299;
    }
LABEL_297:
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v144 = result;
    goto LABEL_243;
  }
  uint64_t v48 = *(void *)(v191 + 16);
  uint64_t result = swift_retain();
  long long v143 = v183;
  if (v48) {
    goto LABEL_240;
  }
LABEL_280:
  uint64_t result = swift_release_n();
  if (!v190)
  {
    unint64_t v163 = *(void *)(v9 + 16);
    if (v163)
    {
      uint64_t v48 = *(void *)(v9 + 32);
      swift_retain();
      uint64_t result = swift_retain();
      if (KeyPath == 1) {
        goto LABEL_133;
      }
      if (v163 >= 2 && (uint64_t)(KeyPath - 1) < (uint64_t)v163) {
        goto LABEL_288;
      }
      goto LABEL_303;
    }
    goto LABEL_301;
  }
  swift_retain();
  uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  if (KeyPath != 1)
  {
LABEL_288:
    uint64_t v164 = 0;
    do
    {
      if (v190)
      {
        uint64_t v165 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v165 = *(void *)(v9 + 8 * (void)v164 + 40);
        swift_retain();
      }
      if (static Date.< infix(_:_:)()) {
        uint64_t v48 = v165;
      }
      swift_release();
      ++v164;
    }
    while (v143 != v164);
  }
LABEL_133:
  swift_release_n();
  return v48;
}

void sub_1001152A8()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = qword_10017F7E0;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_1001863D0);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v6 = Activity.id.getter();
      sub_100047F98(v6, v7, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Requesting AirDrop banner for activity %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v8 = Activity.id.getter();
    sub_10010E784(v8, v9);
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t sub_1001154A0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001154D8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100115518(void *a1, uint64_t a2)
{
  return sub_10010F60C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100115524(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100115534()
{
  return swift_release();
}

unint64_t sub_10011553C()
{
  unint64_t result = qword_1001865D0;
  if (!qword_1001865D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001865D0);
  }
  return result;
}

uint64_t sub_100115590()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_errorRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001155E0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *unint64_t v7 = v1;
  v7[1] = sub_100013ABC;
  return sub_10010F7F4(v2, v3, v4, v5, v6);
}

uint64_t sub_10011569C(uint64_t a1)
{
  uint64_t v55 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v2 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v36 - v14;
  int64_t v15 = 0;
  uint64_t v60 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v56 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  os_log_type_t v61 = &_swiftEmptyArrayStorage;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  uint64_t v19 = v18 & v16;
  uint64_t v44 = v4 + 8;
  int64_t v57 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v52 = (uint64_t (**)(char *, uint64_t))(v13 + 88);
  int v53 = (void (**)(char *))(v13 + 32);
  int v51 = enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:);
  uint64_t v39 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v48 = (void (**)(char *, uint64_t))(v13 + 96);
  uint64_t v50 = (uint64_t (**)(char *, uint64_t))(v2 + 88);
  uint64_t v37 = (void (**)(char *, uint64_t))(v2 + 8);
  int v46 = enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:);
  uint64_t v47 = (void (**)(char *, uint64_t))(v2 + 96);
  int v41 = enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:);
  int v49 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  int v45 = enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:);
  int v42 = enum case for SFAirDropReceive.Transfer.State.created(_:);
  int v43 = enum case for SFAirDropSend.Transfer.State.created(_:);
  int v40 = enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:);
  int v38 = enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:);
  while (v19)
  {
    v19 &= v19 - 1;
LABEL_26:
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if ((*v59)(v7, 1, v8) == 1)
    {
      sub_10000F394((uint64_t)v7, &qword_100181400);
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v27 = v55;
      int v28 = (*v50)(v4, v55);
      if (v28 == v49)
      {
        (*v47)(v4, v27);
        uint64_t v20 = sub_10000AA4C(&qword_1001806D8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = &v4[*(int *)(v20 + 80)];
        uint64_t v22 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
        uint64_t v23 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_6:
        (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v4, v23);
        goto LABEL_7;
      }
      if (v28 == v45)
      {
        (*v47)(v4, v27);
        uint64_t v29 = &v4[*(int *)(sub_10000AA4C(&qword_1001827F0) + 48)];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v30 = type metadata accessor for SFAirDropReceive.ItemDestination();
        (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
        uint64_t v23 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
        goto LABEL_6;
      }
      if (v28 != v42 && v28 != v40 && v28 != v38)
      {
        (*v37)(v4, v27);
        goto LABEL_44;
      }
LABEL_7:
      uint64_t result = swift_release();
    }
    else
    {
      int64_t v58 = v15;
      uint64_t v31 = v54;
      uint64_t v32 = *v53;
      (*v53)(v54);
      ((void (*)(char *, char *, uint64_t))v32)(v11, v31, v8);
      int v33 = (*v52)(v11, v8);
      if (v33 == v51)
      {
        (*v48)(v11, v8);
        swift_bridgeObjectRelease();
        uint64_t v34 = &v11[*(int *)(sub_10000AA4C(&qword_100181940) + 64)];
        uint64_t v35 = type metadata accessor for SFAirDrop.DeclineAction();
LABEL_34:
        (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v34, v35);
        uint64_t result = swift_release();
        goto LABEL_35;
      }
      if (v33 == v46)
      {
        (*v48)(v11, v8);
        swift_bridgeObjectRelease();
        uint64_t v34 = &v11[*(int *)(sub_10000AA4C(&qword_100181938) + 48)];
        uint64_t v35 = sub_10000AA4C((uint64_t *)&unk_1001827C0);
        goto LABEL_34;
      }
      if (v33 == v43 || v33 == v41)
      {
        uint64_t result = swift_release();
LABEL_35:
        int64_t v15 = v58;
      }
      else
      {
        (*v39)(v11, v8);
        int64_t v15 = v58;
LABEL_44:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized ContiguousArray._endMutation()();
      }
    }
  }
  int64_t v24 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v24 >= v57) {
    goto LABEL_45;
  }
  uint64_t v25 = *(void *)(v56 + 8 * v24);
  ++v15;
  if (v25) {
    goto LABEL_25;
  }
  int64_t v15 = v24 + 1;
  if (v24 + 1 >= v57) {
    goto LABEL_45;
  }
  uint64_t v25 = *(void *)(v56 + 8 * v15);
  if (v25) {
    goto LABEL_25;
  }
  int64_t v15 = v24 + 2;
  if (v24 + 2 >= v57) {
    goto LABEL_45;
  }
  uint64_t v25 = *(void *)(v56 + 8 * v15);
  if (v25) {
    goto LABEL_25;
  }
  int64_t v15 = v24 + 3;
  if (v24 + 3 >= v57) {
    goto LABEL_45;
  }
  uint64_t v25 = *(void *)(v56 + 8 * v15);
  if (v25)
  {
LABEL_25:
    uint64_t v19 = (v25 - 1) & v25;
    goto LABEL_26;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v57)
  {
LABEL_45:
    swift_release();
    return (uint64_t)v61;
  }
  uint64_t v25 = *(void *)(v56 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v57) {
      goto LABEL_45;
    }
    uint64_t v25 = *(void *)(v56 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

void sub_100115EF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (qword_10017F7E0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B150(v12, (uint64_t)qword_1001863D0);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v13, v14))
  {
    swift_bridgeObjectRelease_n();

    if (a3) {
      goto LABEL_5;
    }
LABEL_11:
    if (a5) {
      a4 = 7;
    }
    sub_10011553C();
    swift_allocError();
    void *v16 = 0;
    goto LABEL_14;
  }
  char v22 = a5;
  int64_t v15 = (uint8_t *)swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  *(_DWORD *)int64_t v15 = 136315138;
  swift_bridgeObjectRetain();
  sub_100047F98(a1, a2, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v13, v14, "Assertion invalidated [sessionIdentifier = %s]", v15, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  a5 = v22;
  swift_slowDealloc();

  if (!a3) {
    goto LABEL_11;
  }
LABEL_5:
  if (a3 == 1) {
    return;
  }
  if (a3 != 2)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (a5) {
    a4 = 0;
  }
  sub_10011553C();
  swift_allocError();
  void *v16 = 2;
LABEL_14:
  v16[1] = a4;
  v16[2] = a6;
  swift_errorRetain();
  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    swift_errorRetain();
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v21;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Assertion invalidation reason: %@", v19, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1001162E8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100116328(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_1000A64FC(a1, v4, v5, v6);
}

uint64_t sub_1001163DC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100013ABC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100186600 + dword_100186600);
  return v6(a1, v4);
}

uint64_t sub_100116494()
{
  return sub_1001106C8();
}

uint64_t sub_1001164C0()
{
  return sub_1001106C8();
}

uint64_t sub_1001164E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110768(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t sub_100116524()
{
  return sub_1001106C8();
}

uint64_t sub_10011654C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100110768(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.DisplayPriority);
}

unint64_t destroy for AirDropUIBannerManager.AssertionError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t _s9AirDropUI22AirDropUIBannerManagerC14AssertionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    swift_errorRetain();
    *(void *)(a1 + 16) = v3;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  return a1;
}

void *assignWithCopy for AirDropUIBannerManager.AssertionError(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[2] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[2];
  }
  int v6 = v5 - 1;
  if (a2[2] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[2];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v11 = a2[2];
      swift_errorRetain();
      a1[2] = v11;
      swift_errorRelease();
      return a1;
    }
    swift_errorRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    long long v9 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v9;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v8 = a2[2];
  swift_errorRetain();
  a1[2] = v8;
  return a1;
}

uint64_t assignWithTake for AirDropUIBannerManager.AssertionError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = *(void *)(a2 + 16);
    }
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v6;
      swift_errorRelease();
      return a1;
    }
    swift_errorRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropUIBannerManager.AssertionError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AirDropUIBannerManager.AssertionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100116814(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_100116838(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[2] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIBannerManager.AssertionError()
{
  return &type metadata for AirDropUIBannerManager.AssertionError;
}

uint64_t sub_100116878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10011688C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropSystemApertureProgress()
{
  return &type metadata for AirDropSystemApertureProgress;
}

uint64_t sub_1001168EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100186618);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100186618);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D110);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001169B4()
{
  long long v14 = *v0;
  uint64_t v1 = (void *)sub_1001174F0();
  uint64_t v2 = (void *)*((void *)v0 + 3);
  uint64_t v3 = *((unsigned __int8 *)v0 + 16);
  objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureProgressView());
  id v4 = v1;
  id v5 = v2;
  BOOL v6 = 1;
  sub_10011BE48(v5, 8, v3, v1, 0, 1);
  uint64_t v8 = v7;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)&v14);
  long long v9 = *(void **)(v8 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress);
  *(void *)(v8 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress) = v13;
  id v10 = v13;

  sub_10011BA74();
  uint64_t v11 = OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded;
  *(unsigned char *)(v8 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  sub_10011C6D0();
  if (*(unsigned char *)(v8 + v11) == 1) {
    BOOL v6 = *(void *)(v8 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction) == 0;
  }
  [*(id *)(v8 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton) setHidden:v6];

  return v8;
}

uint64_t sub_100116B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F7F0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B150(v9, (uint64_t)qword_100186618);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cancel button was tapped. Triggering cancel on AirDropTransferSession", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v8, &qword_1001829C0);
}

uint64_t sub_100116DC0(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for SFAirDrop.DeclineAction();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MainActor();
  v2[9] = static MainActor.shared.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[10] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100116ED0;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_100116ED0()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_100117094;
  }
  else {
    uint64_t v4 = sub_10011702C;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_10011702C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100117094()
{
  char v22 = v0;
  swift_release();
  if (qword_10017F7F0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_100186618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    log = v6;
    uint64_t v13 = SFAirDrop.DeclineAction.id.getter();
    v0[2] = sub_100047F98(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop transfer cancel action %s failed with error %@", (uint8_t *)v12, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

void sub_1001173A0(uint64_t a1)
{
}

uint64_t sub_1001173A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100117D78();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10011740C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100117D78();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100117470()
{
}

unint64_t sub_10011749C()
{
  unint64_t result = qword_100186630;
  if (!qword_100186630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100186630);
  }
  return result;
}

uint64_t sub_1001174F0()
{
  uint64_t v0 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v0 - 8);
  v28[0] = (char *)v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C((uint64_t *)&unk_1001813F0);
  __chkstk_darwin(v6 - 8);
  BOOL v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v28 - v10;
  uint64_t v12 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v28[1] = v14;
  uint64_t v29 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v30 = (char *)v28 - v16;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  SFAirDropReceive.Transfer.State.cancelAction.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v17(v8, 1, v12) == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v18 = v28[0];
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v19 = type metadata accessor for SFAirDropSend.Transfer.State();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      sub_10000F394(v18, &qword_100181400);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    else
    {
      SFAirDropSend.Transfer.State.cancelAction.getter();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    sub_10000F394((uint64_t)v8, (uint64_t *)&unk_1001813F0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v8, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  if (v17(v11, 1, v12) == 1)
  {
    sub_10000F394((uint64_t)v11, (uint64_t *)&unk_1001813F0);
    return 0;
  }
  else
  {
    char v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v23 = v30;
    v22(v30, v11, v12);
    sub_100117B58();
    SFAirDrop.DeclineAction.id.getter();
    String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    int64_t v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v29, v23, v12);
    unint64_t v25 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v26 = swift_allocObject();
    v22((char *)(v26 + v25), v24, v12);
    uint64_t v21 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
  }
  return v21;
}

void sub_100117A54(uint64_t a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress);
  *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress) = v7;
  id v3 = v7;

  sub_10011BA74();
  uint64_t v4 = (void *)sub_1001174F0();
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
  *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction) = v4;
  id v6 = v4;
  sub_10011BBD8(v5);
}

unint64_t sub_100117B58()
{
  unint64_t result = qword_100183A20;
  if (!qword_100183A20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100183A20);
  }
  return result;
}

uint64_t sub_100117B9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SFAirDrop.DeclineAction() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100116B20(a1, v4);
}

uint64_t sub_100117C10()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100117CA0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.DeclineAction() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100013ABC;
  return sub_100116DC0(a1, v5);
}

unint64_t sub_100117D78()
{
  unint64_t result = qword_100186648;
  if (!qword_100186648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186648);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropCancelledFailedView()
{
  return &type metadata for AirDropCancelledFailedView;
}

uint64_t sub_100117DDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100117DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000AA4C(&qword_100186650);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100186658);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = static VerticalAlignment.center.getter();
  if (qword_10017F6E0 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_10018CF90;
  *(void *)uint64_t v10 = v14;
  *((void *)v10 + 1) = v15;
  v10[16] = 0;
  uint64_t v16 = sub_10000AA4C(&qword_100186660);
  sub_100118028(a1, a2, a3 & 1, (uint64_t)&v10[*(int *)(v16 + 44)]);
  if (a3)
  {
    if (qword_10017F690 != -1) {
      swift_once();
    }
    uint64_t v17 = &xmmword_10018CF10;
  }
  else
  {
    if (qword_10017F698 != -1) {
      swift_once();
    }
    uint64_t v17 = &xmmword_10018CF30;
  }
  uint64_t v19 = *((void *)v17 + 2);
  uint64_t v18 = *((void *)v17 + 3);
  long long v23 = *v17;
  char v20 = static Edge.Set.all.getter();
  sub_10000F330((uint64_t)v10, (uint64_t)v13, &qword_100186650);
  uint64_t v21 = &v13[*(int *)(v11 + 36)];
  *uint64_t v21 = v20;
  *(_OWORD *)(v21 + 8) = v23;
  *((void *)v21 + 3) = v19;
  *((void *)v21 + 4) = v18;
  unsigned char v21[40] = 0;
  sub_10000F394((uint64_t)v10, &qword_100186650);
  return sub_10000F2CC((uint64_t)v13, a4, &qword_100186658);
}

void sub_100118028(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v29[0] = a3;
  v29[1] = a1;
  uint64_t v6 = sub_10000AA4C(&qword_100181918);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = type metadata accessor for DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v29 - v17;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DeviceLockState.unlocked(_:), v12);
  char v19 = static DeviceLockState.== infix(_:_:)();
  char v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v15, v12);
  v20(v18, v12);
  char v21 = v29[0];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v19)
  {
    type metadata accessor for AirDropTransferSession();
    sub_100056D9C();
    swift_retain();
    uint64_t v22 = ObservedObject.init(wrappedValue:)();
    uint64_t v23 = v26;
    uint64_t v24 = v21 & 1;
    uint64_t v25 = 2;
  }
  *(void *)uint64_t v11 = static HorizontalAlignment.leading.getter();
  *((void *)v11 + 1) = 0;
  v11[16] = 0;
  uint64_t v27 = sub_10000AA4C(&qword_100181920);
  sub_100118344(a2, v21 & 1, (uint64_t)&v11[*(int *)(v27 + 44)]);
  sub_10000F330((uint64_t)v11, (uint64_t)v8, &qword_100181918);
  *(void *)a4 = v22;
  *(void *)(a4 + 8) = v23;
  *(void *)(a4 + 16) = v24;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = v25;
  *(unsigned char *)(a4 + 40) = 0;
  uint64_t v28 = sub_10000AA4C(&qword_100186668);
  sub_10000F330((uint64_t)v8, a4 + *(int *)(v28 + 48), &qword_100181918);
  sub_100056C4C(v22, v23, v24, 0, v25);
  sub_10000F394((uint64_t)v11, &qword_100181918);
  sub_10000F394((uint64_t)v8, &qword_100181918);
  sub_100056D38(v22, v23, v24, 0, v25);
}

uint64_t sub_100118344@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v40 = type metadata accessor for Font.TextStyle();
  uint64_t v5 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v41 = a2;
  if (a2)
  {
    if (qword_10017F670 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    uint64_t v17 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v18 = v43;
    uint64_t v19 = v44;
    uint64_t v20 = v45;
    uint64_t v21 = v46;
    uint64_t v22 = v47;
    uint64_t v23 = v48;
  }
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t v34 = v20;
  uint64_t v35 = v17;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  uint64_t v38 = v23;
  uint64_t v24 = sub_1001186F8();
  uint64_t v26 = v25;
  sub_100119010((uint64_t)v49);
  uint64_t v42 = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.subheadline(_:), v40);
  sub_100053610();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v27 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *uint64_t v27 = v24;
  v27[1] = v26;
  sub_100056E4C((uint64_t)v49, (uint64_t)&v10[*(int *)(v8 + 24)]);
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1);
  sub_100055248((uint64_t)v10);
  sub_10000F2CC((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_100185E30);
  sub_10000F330((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_100185E30);
  uint64_t v28 = v35;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = v28;
  *(void *)(a3 + 16) = v32;
  *(void *)(a3 + 24) = v33;
  *(void *)(a3 + 32) = v34;
  *(void *)(a3 + 40) = v36;
  *(void *)(a3 + 48) = v37;
  *(void *)(a3 + 56) = v38;
  *(unsigned char *)(a3 + 64) = (v41 & 1) == 0;
  uint64_t v29 = sub_10000AA4C(&qword_100181948);
  sub_10000F330((uint64_t)v13, a3 + *(int *)(v29 + 48), (uint64_t *)&unk_100185E30);
  sub_10000F394((uint64_t)v16, (uint64_t *)&unk_100185E30);
  return sub_10000F394((uint64_t)v13, (uint64_t *)&unk_100185E30);
}

uint64_t sub_1001186F8()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  unsigned __int8 v44 = *(char **)(v0 - 8);
  uint64_t v45 = (char *)v0;
  __chkstk_darwin(v0);
  uint64_t v43 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v47 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  unsigned __int8 v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SFAirDropSend.Failure();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v12 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v41 - v20;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10000F394((uint64_t)v14, &qword_100181400);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    uint64_t v22 = v43;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v23 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
    uint64_t v24 = v45;
    uint64_t v25 = (void (*)(char *, char *))*((void *)v44 + 1);
    v25(v22, v45);
    if (v23 == 9) {
      goto LABEL_8;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v34 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
    v25(v22, v24);
    if (v34 == 3)
    {
LABEL_8:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      return String.init(localized:table:bundle:locale:comment:)();
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      return v48;
    }
  }
  else
  {
    unsigned __int8 v44 = v8;
    uint64_t v45 = v11;
    uint64_t v26 = v41;
    uint64_t v27 = v42;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
    if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v18, v15) == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
      uint64_t v28 = sub_10000AA4C(&qword_100180598);
      uint64_t v29 = v15;
      uint64_t v30 = v45;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v45, &v18[*(int *)(v28 + 48)], v27);
      uint64_t v31 = v44;
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v44, v30, v27);
      int v32 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v31, v27);
      if (v32 == enum case for SFAirDropSend.Failure.receiverDeclined(_:))
      {
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v33 = String.init(localized:table:bundle:locale:comment:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v27);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v29);
      }
      else
      {
        uint64_t v36 = (void (**)(char *, uint64_t))(v26 + 8);
        uint64_t v37 = (void (**)(char *, uint64_t))(v16 + 8);
        if (v32 == enum case for SFAirDropSend.Failure.cancelled(_:))
        {
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          uint64_t v33 = String.init(localized:table:bundle:locale:comment:)();
          (*v36)(v45, v27);
          (*v37)(v21, v29);
        }
        else
        {
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          uint64_t v33 = String.init(localized:table:bundle:locale:comment:)();
          uint64_t v38 = *v36;
          (*v36)(v45, v27);
          (*v37)(v21, v29);
          v38(v44, v27);
        }
      }
      uint64_t v39 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
      (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v18, v39);
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v33 = v48;
      uint64_t v35 = *(void (**)(char *, uint64_t))(v16 + 8);
      v35(v21, v15);
      v35(v18, v15);
    }
  }
  return v33;
}

uint64_t sub_100119010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  v31[1] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  uint64_t v34 = type metadata accessor for SFAirDropReceive.Failure();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int v32 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v33 = (char *)v31 - v8;
  uint64_t v9 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v31 - v14;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v15, v9);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v12, v9);
LABEL_6:
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    uint64_t v28 = 0;
    char v27 = -64;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
  uint64_t v16 = sub_10000AA4C(&qword_1001827E0);
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v33, &v12[*(int *)(v16 + 48)], v34);
  uint64_t v19 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
  uint64_t v20 = v12;
  uint64_t v21 = v17;
  (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v20, v19);
  uint64_t v22 = v32;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v32, v21, v18);
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v22, v18) != enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v21, v18);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v22, v18);
    goto LABEL_6;
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v23 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  char v27 = 0;
  uint64_t v28 = 1;
LABEL_7:
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v25;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v28;
  *(unsigned char *)(a1 + 32) = v27;
  return result;
}

uint64_t sub_1001194D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100117DF8(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

unint64_t sub_100119508()
{
  unint64_t result = qword_100186670;
  if (!qword_100186670)
  {
    sub_10000B100(&qword_100186658);
    sub_100119584();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186670);
  }
  return result;
}

unint64_t sub_100119584()
{
  unint64_t result = qword_100186678;
  if (!qword_100186678)
  {
    sub_10000B100(&qword_100186650);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186678);
  }
  return result;
}

uint64_t sub_1001195E0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100119678(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1001196BC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_10011971C(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100119724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_100119730()
{
  sub_1000291CC();
  EnvironmentValues.subscript.getter();
  return v1;
}

uint64_t sub_10011976C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[2];
  if (*v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    char v4 = static Edge.Set.all.getter();
    uint64_t v5 = static Color.black.getter();
    uint64_t result = static Edge.Set.all.getter();
    *(void *)a1 = v2;
    *(unsigned char *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = v5;
    *(unsigned char *)(a1 + 64) = result;
  }
  else
  {
    type metadata accessor for SystemApertureLayoutState();
    sub_10011B8FC((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
    swift_retain();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001198B4()
{
  return sub_1001198D8();
}

uint64_t sub_1001198D8()
{
  return *(void *)(v0 + qword_100186680);
}

uint64_t sub_1001198E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100119910(a3);
}

uint64_t sub_100119910(uint64_t result)
{
  *(void *)(v1 + qword_100186680) = result;
  uint64_t v2 = *(void *)(v1 + qword_100186680);
  if ((unint64_t)(v2 - 3) <= 1) {
    *(void *)(v1 + qword_100186690) = v2;
  }
  return result;
}

uint64_t sub_100119940()
{
  return sub_100119964();
}

uint64_t sub_100119964()
{
  return *(void *)(v0 + qword_100186688);
}

uint64_t sub_100119974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011999C(a3);
}

uint64_t sub_10011999C(uint64_t result)
{
  *(void *)(v1 + qword_100186688) = result;
  return result;
}

uint64_t sub_1001199AC()
{
  return sub_1001199D0();
}

uint64_t sub_1001199D0()
{
  return *(void *)(v0 + qword_100186690);
}

uint64_t sub_1001199E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100119A08(a3);
}

uint64_t sub_100119A08(uint64_t result)
{
  *(void *)(v1 + qword_100186690) = result;
  return result;
}

uint64_t sub_100119A18()
{
  return sub_100119A3C();
}

uint64_t sub_100119A3C()
{
  return *(void *)(v0 + qword_100186698);
}

uint64_t sub_100119A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100119A74(a3);
}

uint64_t sub_100119A74(uint64_t result)
{
  *(void *)(v1 + qword_100186698) = result;
  return result;
}

id sub_100119A84()
{
  sub_10011B548();
  if (v0)
  {
    swift_bridgeObjectRetain();
    NSString v1 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v1 = 0;
  }

  return v1;
}

void sub_100119AF0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = a1;
  sub_100119B70(v4, v6);
}

uint64_t sub_100119B70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_1001866A0);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

id sub_100119B8C()
{
  uint64_t v0 = (void *)sub_10011B55C();

  return v0;
}

void sub_100119BC0(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_100119C1C((uint64_t)a3);
}

uint64_t sub_100119C1C(uint64_t a1)
{
  *(void *)(v1 + qword_1001866A8) = a1;
  return _objc_release_x1();
}

uint64_t sub_100119C30()
{
  return sub_100119C58() & 1;
}

uint64_t sub_100119C58()
{
  return *(unsigned __int8 *)(v0 + qword_1001866B0);
}

uint64_t sub_100119C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100119C90(a3);
}

uint64_t sub_100119C90(uint64_t result)
{
  *(unsigned char *)(v1 + qword_1001866B0) = result;
  return result;
}

id sub_100119CA0()
{
  uint64_t v0 = (void *)sub_10011B56C();

  return v0;
}

void sub_100119CD4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_100119D30((uint64_t)a3);
}

uint64_t sub_100119D30(uint64_t a1)
{
  *(void *)(v1 + qword_1001866D0) = a1;
  return _objc_release_x1();
}

id sub_100119D44()
{
  uint64_t v0 = (void *)sub_10011B57C();

  return v0;
}

void sub_100119D78(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_100119DD4((uint64_t)a3);
}

uint64_t sub_100119DD4(uint64_t a1)
{
  *(void *)(v1 + qword_1001866E0) = a1;
  return _objc_release_x1();
}

id sub_100119DE8()
{
  uint64_t v0 = (void *)sub_10011B58C();

  return v0;
}

void sub_100119E1C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  sub_100119E78((uint64_t)a3);
}

uint64_t sub_100119E78(uint64_t a1)
{
  *(void *)(v1 + qword_1001866F0) = a1;
  return _objc_release_x1();
}

id sub_100119E8C()
{
  id v0 = (id)sub_10011B59C();

  return v0;
}

uint64_t sub_100119EC8()
{
  return sub_100119EEC();
}

uint64_t sub_100119EEC()
{
  return *(void *)(v0 + qword_100186700);
}

void sub_100119EFC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_100119F50(a3);
}

uint64_t sub_100119F50(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_100186700);
  *(void *)(v1 + qword_100186700) = a1;
  return sub_100119F68(v2);
}

uint64_t sub_100119F68(uint64_t result)
{
  if (*(void *)&v1[qword_100186700] != result)
  {
    objc_msgSend(objc_msgSend(v1, "systemApertureElementContext"), "setElementNeedsUpdate");
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_100119FE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_10011B5A4();
}

id sub_10011A008()
{
  uint64_t v1 = *(void *)&v0[qword_100186680];
  if (v1 == 3)
  {
    uint64_t v18 = *(void **)&v0[qword_1001866D0];
    if (v18)
    {
      id v19 = v18;
      id result = [v0 view];
      if (!result)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v20 = result;
      id v21 = [result SBUISA_systemApertureLeadingConcentricContentLayoutGuide];

      [v21 layoutFrame];
      CGFloat v23 = v22;
      CGFloat v25 = v24;
      CGFloat v27 = v26;
      CGFloat v29 = v28;

      v48.origin.x = v23;
      v48.origin.y = v25;
      v48.size.width = v27;
      v48.size.height = v29;
      double MidX = CGRectGetMidX(v48);
      [v19 center];
      [v19 setCenter:MidX];
    }
    uint64_t v31 = *(void **)&v0[qword_1001866E0];
    if (!v31) {
      goto LABEL_16;
    }
    id v15 = v31;
    id result = [v0 view];
    if (result)
    {
      int v32 = result;
      id v33 = [result SBUISA_systemApertureTrailingConcentricContentLayoutGuide];

      [v33 layoutFrame];
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      CGFloat v41 = v40;

      v49.origin.x = v35;
      v49.origin.y = v37;
      v49.size.width = v39;
      v49.size.height = v41;
      double v16 = CGRectGetMidX(v49);
      [v15 center];
      goto LABEL_15;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v1 != 4) {
    goto LABEL_16;
  }
  id result = [v0 view];
  if (!result)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v3 = result;
  [result bounds];
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;

  uint64_t v12 = *(void **)&v0[qword_1001866C0];
  if (!v12) {
    goto LABEL_16;
  }
  id result = [v12 view];
  if (!result) {
    goto LABEL_26;
  }
  uint64_t v13 = result;
  [result frame];
  [v13 setFrame:];

  uint64_t v14 = *(void **)&v0[qword_1001866C0];
  if (v14)
  {
    id result = [v14 view];
    if (result)
    {
      id v15 = result;
      v46.origin.x = v5;
      v46.origin.y = v7;
      v46.size.width = v9;
      v46.size.height = v11;
      double v16 = CGRectGetMidX(v46);
      v47.origin.x = v5;
      v47.origin.y = v7;
      v47.size.width = v9;
      v47.size.height = v11;
      double MidY = CGRectGetMidY(v47);
LABEL_15:
      [v15 setCenter:v16 MidY];

      goto LABEL_16;
    }
LABEL_29:
    __break(1u);
    return result;
  }
LABEL_16:
  uint64_t v42 = *(void *)&v0[qword_100186680];
  uint64_t v43 = *(void **)&v0[qword_1001866D0];
  if (v43) {
    [v43 setHidden:v42 == 4];
  }
  unsigned __int8 v44 = *(void **)&v0[qword_1001866E0];
  if (v44) {
    [v44 setHidden:v42 == 4];
  }
  id result = *(id *)&v0[qword_1001866F0];
  if (result)
  {
    return [result setHidden:v42 == 4];
  }
  return result;
}

void sub_10011A374(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  v6[4] = sub_10011B528;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1001196BC;
  _OWORD v6[3] = &unk_10016E278;
  double v4 = _Block_copy(v6);
  id v5 = v1;
  swift_release();
  [a1 animateAlongsideTransition:v4 completion:0];
  _Block_release(v4);
}

id sub_10011A450(uint64_t a1, char *a2)
{
  type metadata accessor for SystemApertureElementHostingController();
  swift_retain();
  sub_10002DF8C(a2);
  swift_release();
  id v3 = *(id *)&a2[qword_1001866B8];
  sub_10000A584(a2, (uint64_t)v3);

  return sub_10011A008();
}

void sub_10011A518(void *a1, uint64_t a2, void *a3)
{
  swift_unknownObjectRetain();
  id v5 = a1;
  sub_10011A374(a3);
  swift_unknownObjectRelease();
}

uint64_t sub_10011A580()
{
  return 1;
}

uint64_t sub_10011A588()
{
  return 1;
}

void sub_10011A590(void *a1)
{
  swift_unknownObjectRetain();
  id v2 = a1;
  sub_10011B780();
  swift_unknownObjectRelease();
}

void sub_10011A5F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;

  sub_10011B8CC();
}

id sub_10011A664()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemApertureElementHostingController();
  return [super dealloc];
}

void sub_10011A6D8(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_release();
  objc_super v2 = *(void **)(a1 + qword_1001866F8);
}

uint64_t type metadata accessor for SystemApertureElementHostingController()
{
  return sub_10002929C();
}

uint64_t sub_10011A7D0()
{
  return sub_10011B354();
}

uint64_t sub_10011A7F4()
{
  return sub_10011B460();
}

char *sub_10011A818()
{
  uint64_t v1 = type metadata accessor for UIHostingControllerSizingOptions();
  __chkstk_darwin(v1);
  id v2 = objc_allocWithZone((Class)sub_10000AA4C((uint64_t *)&unk_1001867F0));
  id v3 = v0;
  swift_retain();
  id v4 = (void *)UIHostingController.init(rootView:)();
  sub_10000AA4C((uint64_t *)&unk_100180BB0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10012A270;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  uint64_t v17 = v5;
  sub_10011B8FC((unint64_t *)&unk_100186800, (void (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions);
  sub_10000AA4C((uint64_t *)&unk_100180BC0);
  sub_10000F288((unint64_t *)&unk_100186810, (uint64_t *)&unk_100180BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of UIHostingController.sizingOptions.setter();
  *(void *)&v3[OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController] = v4;
  id v6 = v4;
  [v6 preferredContentSize];
  double v8 = v7;
  double v10 = v9;

  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for SystemApertureAccessoryView();
  CGFloat v11 = [(char *)[super initWithFrame:0.0, 0.0, v8, v10]];
  uint64_t v12 = *(void **)&v11[OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController];
  uint64_t v13 = v11;
  id result = (char *)[v12 view];
  if (result)
  {
    id v15 = result;
    [v13 addSubview:result];

    swift_release();
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10011AC74()
{
  return sub_10011AEE4(type metadata accessor for SystemApertureAccessoryView);
}

uint64_t type metadata accessor for SystemApertureAccessoryView()
{
  return self;
}

char *sub_10011ACC0()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for SystemApertureAccessoryView());
  id v2 = v0;
  swift_retain();
  *(void *)&v2[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view] = sub_10011A818();

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for SystemApertureAccessoryViewController();
  id v3 = [super initWithNibName:0 bundle:0];
  id v4 = *(void **)(*(void *)&v3[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view]
                + OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController);
  uint64_t v5 = v3;
  id v6 = v4;
  [v5 addChildViewController:v6];

  swift_release();
  return v5;
}

id sub_10011AECC()
{
  return sub_10011AEE4(type metadata accessor for SystemApertureAccessoryViewController);
}

id sub_10011AEE4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for SystemApertureAccessoryViewController()
{
  return self;
}

uint64_t destroy for SystemApertureElement()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SystemApertureElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemApertureElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for SystemApertureElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemApertureElement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureElement()
{
  return &type metadata for SystemApertureElement;
}

uint64_t sub_10011B21C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10011B238@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_10011B2C0()
{
  return static Published.subscript.setter();
}

uint64_t sub_10011B354()
{
  id v1 = [self mainBundle];
  id countAndFlagsBits = [v1 bundleIdentifier];

  if (countAndFlagsBits)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v3 = String.lowercased()();
    id countAndFlagsBits = (id)v3._countAndFlagsBits;
    object = v3._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    object = 0;
  }
  long long v5 = &v0[qword_1001866A0];
  *(void *)long long v5 = countAndFlagsBits;
  *((void *)v5 + 1) = object;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)&v0[qword_100186700];
  *(void *)&v0[qword_100186700] = v6 & 0xFFFFFFFFFFFFFFFDLL;
  sub_100119F68(v6);
  objc_msgSend(objc_msgSend(v0, "systemApertureElementContext"), "setElementNeedsUpdate");

  return swift_unknownObjectRelease();
}

uint64_t sub_10011B460()
{
  id v1 = &v0[qword_1001866A0];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)&v0[qword_100186700];
  *(void *)&v0[qword_100186700] = v2 | 2;
  sub_100119F68(v2);
  objc_msgSend(objc_msgSend(v0, "systemApertureElementContext"), "setElementNeedsUpdate");

  return swift_unknownObjectRelease();
}

uint64_t sub_10011B4F0()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10011B528(uint64_t a1)
{
  return sub_10011A450(a1, *(char **)(v1 + 16));
}

uint64_t sub_10011B530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10011B540()
{
  return swift_release();
}

uint64_t sub_10011B548()
{
  return *(void *)(v0 + qword_1001866A0);
}

uint64_t sub_10011B55C()
{
  return *(void *)(v0 + qword_1001866A8);
}

uint64_t sub_10011B56C()
{
  return *(void *)(v0 + qword_1001866D0);
}

uint64_t sub_10011B57C()
{
  return *(void *)(v0 + qword_1001866E0);
}

uint64_t sub_10011B58C()
{
  return *(void *)(v0 + qword_1001866F0);
}

uint64_t sub_10011B59C()
{
  return v0;
}

void sub_10011B5A4()
{
  *(void *)&v0[qword_100186680] = 0;
  *(void *)&v0[qword_100186688] = 2;
  *(void *)&v0[qword_100186690] = 4;
  *(void *)&v0[qword_100186698] = 4;
  uint64_t v1 = &v0[qword_1001866A0];
  *uint64_t v1 = 0;
  v1[1] = 0;
  uint64_t v2 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(void *)&v0[qword_1001866A8] = SBUISystemApertureElementIdentifierAirDrop;
  v0[qword_1001866B0] = 1;
  uint64_t v3 = qword_1001866B8;
  id v4 = objc_allocWithZone((Class)type metadata accessor for SystemApertureElementTransitionCoordinator());
  id v5 = v2;
  *(void *)&v0[v3] = [v4 init];
  *(void *)&v0[qword_1001866C0] = 0;
  uint64_t v6 = qword_1001866C8;
  type metadata accessor for SystemApertureLayoutState();
  uint64_t v7 = swift_allocObject();
  __asm { FMOV            V0.2D, #20.0 }
  Published.init(initialValue:)();
  Published.init(initialValue:)();
  *(void *)&v0[v6] = v7;
  *(void *)&v0[qword_1001866D0] = 0;
  *(void *)&v0[qword_1001866D8] = 0;
  *(void *)&v0[qword_1001866E0] = 0;
  *(void *)&v0[qword_1001866E8] = 0;
  *(void *)&v0[qword_1001866F0] = 0;
  *(void *)&v0[qword_1001866F8] = 0;
  *(void *)&v0[qword_100186700] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_10011B780()
{
  [v0 preferredContentSize];
  double v2 = v1;
  double v4 = v3;
  uint64_t v5 = *(void *)&v0[qword_1001866C0];
  if (v5)
  {
    [*(id *)(*(void *)(v5 + OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view)+ OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController) preferredContentSize];
  }
  else
  {
    double v7 = 0.0;
    double v6 = 0.0;
  }
  [v0 setPreferredContentSize:v6, v7];
  id result = [v0 preferredContentSize];
  if (v2 != v10 || v4 != v9)
  {
    id v12 = [v0 systemApertureElementContext];
    void v14[4] = nullsub_1;
    v14[5] = 0;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    void v14[2] = sub_100119678;
    v14[3] = &unk_10016E2A0;
    uint64_t v13 = _Block_copy(v14);
    [v12 setElementNeedsUpdateWithCoordinatedAnimations:v13];
    _Block_release(v13);
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

void sub_10011B8CC()
{
}

uint64_t sub_10011B8FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HostedBySystemAperture()
{
  return &type metadata for HostedBySystemAperture;
}

unint64_t sub_10011B958()
{
  unint64_t result = qword_100186820;
  if (!qword_100186820)
  {
    sub_10000B100(&qword_100186828);
    sub_10011B9F8();
    sub_10000F288((unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186820);
  }
  return result;
}

unint64_t sub_10011B9F8()
{
  unint64_t result = qword_100186830;
  if (!qword_100186830)
  {
    sub_10000B100(&qword_100186838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100186830);
  }
  return result;
}

void sub_10011BA74()
{
  double v1 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 publishedObjectWithName:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100064F00((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    sub_10001FB40(0, &qword_1001868A0);
    if (swift_dynamicCast())
    {
      [*(id *)(v0 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress) fractionCompleted];
      double v5 = 0.999 - v4 * 0.999 / 0.999;
      BOOL v6 = v4 < 0.01;
      double v7 = 0.989;
      if (!v6) {
        double v7 = v5;
      }
      [v8 setStrokeStart:v7];
    }
  }
  else
  {
    sub_100064F68((uint64_t)v10);
  }
  sub_10011C6D0();
}

void sub_10011BBD8(id a1)
{
  if (a1)
  {
    id v3 = [a1 identifier];
    double v4 = (id *)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    double v5 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    if (!v5)
    {
      if (!v3) {
        return;
      }
      goto LABEL_15;
    }
  }
  else
  {
    double v4 = (id *)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    double v5 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    if (!v5) {
      return;
    }
    id v3 = 0;
  }
  id v6 = [v5 identifier];
  double v7 = v6;
  if (!v3)
  {
    if (!v6) {
      return;
    }
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_15:
    double v7 = v3;
LABEL_17:

LABEL_18:
    if (*v4)
    {
      uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton);
      id v15 = *v4;
      [v14 addAction:v15 forControlEvents:0x2000];
      [v14 setHidden:(*(unsigned char *)(v1 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) & 1) == 0];
    }
    if (a1)
    {
      objc_super v16 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton);
      id v17 = a1;
      [v16 removeAction:forControlEvents:];
      if (!*v4) {
        [v16 setHidden:1];
      }
    }
    return;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {

    swift_bridgeObjectRelease_n();
    return;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0) {
    goto LABEL_18;
  }
}

void sub_10011BE48(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6)
{
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress;
  uint64_t v11 = self;
  id v12 = v6;
  *(void *)&v6[v10] = [v11 progressWithTotalUnitCount:1000];
  uint64_t v13 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction;
  *(void *)&v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction] = 0;
  v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_isTouchingDownButton] = 0;
  v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification] = 0;
  type metadata accessor for AirDropSystemApertureIconView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v15 = [self bundleForClass:ObjCClassFromMetadata];
  id v16 = objc_allocWithZone((Class)BSUICAPackageView);
  id v17 = v15;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v16 initWithPackageName:v18 inBundle:v17];

  CGRect v48 = v17;
  if (v19)
  {
    [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
    if (qword_10017F7C8 != -1) {
      swift_once();
    }
    [v19 setFrame:0.0, 0.0, *(double *)&qword_10018D160, *(double *)&qword_10018D160];
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 setState:v20];

    *(void *)&v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView] = v19;
    sub_10001FB40(0, &qword_1001868A8);
    id v52 = v19;
    static UIButton.Configuration.plain()();
    id v21 = a4;
    id v22 = (id)UIButton.init(configuration:primaryAction:)();
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 setAccessibilityLabel:v23];

    [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
    *(void *)&v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton] = v22;
    double v24 = *(void **)&v12[v13];
    *(void *)&v12[v13] = a4;
    id v25 = v21;
    id v26 = v22;

    CGFloat v27 = &v12[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_overrideIntrinsicContentSize];
    if (a6)
    {
      *(void *)CGFloat v27 = 0;
      *((void *)v27 + 1) = 0;
      v27[16] = 1;
    }
    else
    {
      *(void *)CGFloat v27 = a5;
      *((void *)v27 + 1) = a5;
      v27[16] = 0;
    }

    v55.receiver = v12;
    v55.super_class = (Class)type metadata accessor for AirDropSystemApertureProgressView();
    id v28 = [super init];
    CGFloat v29 = v52;
    [v28 addSubview:v52];
    [v28 addSubview:v26];
    id v30 = v28;
    sub_100106CAC(v52, a2, 0.0);

    sub_10001FB40(0, &qword_100180AC0);
    id v31 = v30;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 addConstraints:isa];

    id v33 = v31;
    sub_100106CAC(v26, a2, 0.0);

    double v34 = (char *)v33;
    Class v35 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v34 addConstraints:v35];

    if (qword_10017F600 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v54 == 1)
    {
      double v36 = self;
      CGFloat v37 = v34;
      id v38 = [v36 systemRedColor];
      id v39 = [v38 colorWithAlphaComponent:0.3];

      [v37 setBackgroundColor:v39];
      CGFloat v29 = v52;
      id v40 = v52;
      id v41 = [v36 systemOrangeColor];
      id v42 = [v41 colorWithAlphaComponent:0.4];

      [v40 setBackgroundColor:v42];
    }
    uint64_t v43 = *(void **)&v34[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
    if (a4)
    {
      id v44 = v25;
      [v43 addAction:v44 forControlEvents:0x2000];
      [v43 setHidden:(v34[OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded] & 1) == 0];
    }
    else
    {
      [*(id *)&v34[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton] setHidden:1];
    }
    uint64_t v45 = *(void **)&v34[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
    [v45 addTarget:v34 action:"touchedDownCancelButton" forControlEvents:17];
    CGRect v46 = v34;
    [v45 addTarget:v46 action:"touchedUpCancelButton" forControlEvents:480];
  }
  else
  {
    __break(1u);
  }
}

void sub_10011C6D0()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  *(void *)&double v3 = __chkstk_darwin(v2 - 8).n128_u64[0];
  int v4 = v0[OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded];
  uint64_t v5 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress;
  unsigned __int8 v6 = [*(id *)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] isIndeterminate:v3];
  if (v4 == 1)
  {
    if ((v6 & 1) == 0)
    {
      [*(id *)&v0[v5] fractionCompleted];
      if (v7 >= 1.0)
      {
        uint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        String.init(localized:table:bundle:locale:comment:)();
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setAccessibilityLabel:v11];
      }
    }
  }
  else
  {
    if ((v6 & 1) == 0) {
      [*(id *)&v0[v5] fractionCompleted];
    }
    swift_bridgeObjectRetain();
    String.LocalizationValue.init(_:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v0 setAccessibilityLabel:v8];

    objc_msgSend(objc_msgSend(v0, "systemApertureElementContext"), "setElementNeedsUpdate");
    swift_unknownObjectRelease();
    uint64_t v9 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification;
    if ((v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification] & 1) == 0)
    {
      UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, v0);
      v0[v9] = 1;
    }
  }
  id v12 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView];
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setState:v13];
}

void sub_10011CB3C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton);
}

id sub_10011CB9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureProgressView();
  return [super dealloc];
}

uint64_t type metadata accessor for AirDropSystemApertureProgressView()
{
  return self;
}

uint64_t sub_10011CC68()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void sub_10011CC9C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "createURL: CFURLSetResourcePropertyForKey %@", (uint8_t *)&v3, 0xCu);
}

void sub_10011CD18()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithData: CGImageSourceCreateWithURL returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CD4C()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
}

void sub_10011CD80()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateWithData returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CDB4()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
}

void sub_10011CDE8()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetType image format invalid", v2, v3, v4, v5, v6);
}

void sub_10011CE1C()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex (requireJPEG2000) returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CE50()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CE84()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceCreate returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CEB8()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
}

void sub_10011CEEC()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationCreateWithData returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CF20()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationFinalize failed", v2, v3, v4, v5, v6);
}

void sub_10011CF54()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGColorSpaceCreateDeviceRGB returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CF88()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateCopyWithColorSpace returned NULL", v2, v3, v4, v5, v6);
}

void sub_10011CFBC()
{
  sub_10000836C();
  sub_100008350((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateThumb returned NULL", v2, v3, v4, v5, v6);
}

uint64_t POSIXError._nsError.getter()
{
  return POSIXError._nsError.getter();
}

uint64_t type metadata accessor for POSIXError()
{
  return type metadata accessor for POSIXError();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t LocalizedStringResource.init(stringInterpolation:)()
{
  return LocalizedStringResource.init(stringInterpolation:)();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t URL.baseURL.getter()
{
  return URL.baseURL.getter();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return URL.hasDirectoryPath.getter();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.host(percentEncoded:)(percentEncoded);
  result.value._object = v2;
  result.value._id countAndFlagsBits = v1;
  return result;
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.preferredLanguages.getter()
{
  return static Locale.preferredLanguages.getter();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t Locale.Language.init(identifier:)()
{
  return Locale.Language.init(identifier:)();
}

uint64_t Locale.Language.characterDirection.getter()
{
  return Locale.Language.characterDirection.getter();
}

uint64_t type metadata accessor for Locale.Language()
{
  return type metadata accessor for Locale.Language();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t iosmacHardware.image.getter()
{
  return iosmacHardware.image.getter();
}

uint64_t type metadata accessor for iosmacHardware()
{
  return type metadata accessor for iosmacHardware();
}

uint64_t iosmacHardware.init(_:)()
{
  return iosmacHardware.init(_:)();
}

uint64_t static Activity.activities.getter()
{
  return static Activity.activities.getter();
}

uint64_t Activity.attributes.getter()
{
  return Activity.attributes.getter();
}

uint64_t dispatch thunk of Activity.activityState.getter()
{
  return dispatch thunk of Activity.activityState.getter();
}

uint64_t Activity.id.getter()
{
  return Activity.id.getter();
}

uint64_t dispatch thunk of Activity.endSync(_:dismissalPolicy:)()
{
  return dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
}

uint64_t static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)()
{
  return static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)();
}

uint64_t static ActivityUIDismissalPolicy.immediate.getter()
{
  return static ActivityUIDismissalPolicy.immediate.getter();
}

uint64_t type metadata accessor for ActivityUIDismissalPolicy()
{
  return type metadata accessor for ActivityUIDismissalPolicy();
}

uint64_t static ActivityPresentationOptions.ActivityPresentationDestination.systemApertureOnly.getter()
{
  return static ActivityPresentationOptions.ActivityPresentationDestination.systemApertureOnly.getter();
}

uint64_t type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination()
{
  return type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination();
}

uint64_t ActivityPresentationOptions.init(destinations:)()
{
  return ActivityPresentationOptions.init(destinations:)();
}

uint64_t type metadata accessor for ActivityPresentationOptions()
{
  return type metadata accessor for ActivityPresentationOptions();
}

uint64_t static ActivityState.== infix(_:_:)()
{
  return static ActivityState.== infix(_:_:)();
}

uint64_t type metadata accessor for ActivityState()
{
  return type metadata accessor for ActivityState();
}

uint64_t SharingOptionsView.init(viewModel:)()
{
  return SharingOptionsView.init(viewModel:)();
}

uint64_t SharingOptionsViewModel.__allocating_init(collaborationShareOptions:layoutMargins:userDidChangeOption:contentSizeDidChange:)()
{
  return SharingOptionsViewModel.__allocating_init(collaborationShareOptions:layoutMargins:userDidChangeOption:contentSizeDidChange:)();
}

uint64_t type metadata accessor for SharingOptionsViewModel()
{
  return type metadata accessor for SharingOptionsViewModel();
}

uint64_t NameDropView.init(transactionIdentifier:dismissViewAction:)()
{
  return NameDropView.init(transactionIdentifier:dismissViewAction:)();
}

uint64_t type metadata accessor for NameDropView()
{
  return type metadata accessor for NameDropView();
}

uint64_t ActivitySceneMetrics.init(size:cornerRadius:)()
{
  return ActivitySceneMetrics.init(size:cornerRadius:)();
}

uint64_t type metadata accessor for ActivitySceneMetrics()
{
  return type metadata accessor for ActivitySceneMetrics();
}

uint64_t dispatch thunk of ActivityScene.subscript.getter()
{
  return dispatch thunk of ActivityScene.subscript.getter();
}

uint64_t dispatch thunk of ActivityScene.resolvedMetrics.setter()
{
  return dispatch thunk of ActivityScene.resolvedMetrics.setter();
}

uint64_t type metadata accessor for ActivityScene()
{
  return type metadata accessor for ActivityScene();
}

uint64_t SceneSettingScopes.ActivitySettings.activityIdentifier.getter()
{
  return SceneSettingScopes.ActivitySettings.activityIdentifier.getter();
}

uint64_t ImageResource.init(name:bundle:)()
{
  return ImageResource.init(name:bundle:)();
}

uint64_t type metadata accessor for ImageResource()
{
  return type metadata accessor for ImageResource();
}

uint64_t NameDropIdentity.shared.unsafeMutableAddressor()
{
  return NameDropIdentity.shared.unsafeMutableAddressor();
}

uint64_t UTType.init(exportedAs:conformingTo:)()
{
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType._groupActivity.getter()
{
  return static UTType._groupActivity.getter();
}

UTType __swiftcall UTType._bridgeToObjectiveC()()
{
  return (UTType)UTType._bridgeToObjectiveC()();
}

uint64_t UTType.localizedDescription.getter()
{
  return UTType.localizedDescription.getter();
}

uint64_t UTType.preferredFilenameExtension.getter()
{
  return UTType.preferredFilenameExtension.getter();
}

uint64_t static UTType.url.getter()
{
  return static UTType.url.getter();
}

uint64_t static UTType.image.getter()
{
  return static UTType.image.getter();
}

uint64_t UTType.conforms(to:)()
{
  return UTType.conforms(to:)();
}

uint64_t static UTType.directory.getter()
{
  return static UTType.directory.getter();
}

uint64_t static UTType.plainText.getter()
{
  return static UTType.plainText.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t UTType.init(_:)()
{
  return UTType.init(_:)();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t UIApplicationMain(_:_:_:_:)()
{
  return UIApplicationMain(_:_:_:_:)();
}

uint64_t Publishers.CombineLatest4.init(_:_:_:_:)()
{
  return Publishers.CombineLatest4.init(_:_:_:_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return AnyCancellable.store(in:)();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return type metadata accessor for AnyCancellable();
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return type metadata accessor for ObservableObjectPublisher();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return Publisher<>.removeDuplicates()();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t static SFNearbySharingInteraction.InteractionType.== infix(_:_:)()
{
  return static SFNearbySharingInteraction.InteractionType.== infix(_:_:)();
}

uint64_t type metadata accessor for SFNearbySharingInteraction.InteractionType()
{
  return type metadata accessor for SFNearbySharingInteraction.InteractionType();
}

uint64_t SFNearbySharingInteraction.isInitiator.getter()
{
  return SFNearbySharingInteraction.isInitiator.getter();
}

uint64_t SFNearbySharingInteraction.interactionType.getter()
{
  return SFNearbySharingInteraction.interactionType.getter();
}

uint64_t SFNearbySharingInteraction.isInitiatorRoleExpected.getter()
{
  return SFNearbySharingInteraction.isInitiatorRoleExpected.getter();
}

uint64_t SFNearbySharingInteraction.id.getter()
{
  return SFNearbySharingInteraction.id.getter();
}

uint64_t type metadata accessor for SFNearbySharingInteraction.Kind()
{
  return type metadata accessor for SFNearbySharingInteraction.Kind();
}

uint64_t SFNearbySharingInteraction.kind.getter()
{
  return SFNearbySharingInteraction.kind.getter();
}

uint64_t SFNearbySharingInteraction.state.getter()
{
  return SFNearbySharingInteraction.state.getter();
}

uint64_t type metadata accessor for SFNearbySharingInteraction()
{
  return type metadata accessor for SFNearbySharingInteraction();
}

uint64_t SFNearbySharingInteraction.init(_:)()
{
  return SFNearbySharingInteraction.init(_:)();
}

{
  return SFNearbySharingInteraction.init(_:)();
}

uint64_t type metadata accessor for SFNearbySharingInteractionViewState()
{
  return type metadata accessor for SFNearbySharingInteractionViewState();
}

uint64_t SFAirDropSend.ItemPromise.init(task:metadata:)()
{
  return SFAirDropSend.ItemPromise.init(task:metadata:)();
}

uint64_t type metadata accessor for SFAirDropSend.ItemPromise()
{
  return type metadata accessor for SFAirDropSend.ItemPromise();
}

uint64_t SFAirDropSend.ItemMetadata.fileSubType.getter()
{
  return SFAirDropSend.ItemMetadata.fileSubType.getter();
}

uint64_t SFAirDropSend.ItemMetadata.previewImageData.getter()
{
  return SFAirDropSend.ItemMetadata.previewImageData.getter();
}

uint64_t SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)()
{
  return SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)();
}

uint64_t SFAirDropSend.ItemMetadata.fileType.getter()
{
  return SFAirDropSend.ItemMetadata.fileType.getter();
}

uint64_t type metadata accessor for SFAirDropSend.ItemMetadata()
{
  return type metadata accessor for SFAirDropSend.ItemMetadata();
}

uint64_t SFAirDropSend.Item.init(url:metadata:)()
{
  return SFAirDropSend.Item.init(url:metadata:)();
}

uint64_t SFAirDropSend.Item.url.getter()
{
  return SFAirDropSend.Item.url.getter();
}

uint64_t SFAirDropSend.Item.metadata.getter()
{
  return SFAirDropSend.Item.metadata.getter();
}

uint64_t type metadata accessor for SFAirDropSend.Item()
{
  return type metadata accessor for SFAirDropSend.Item();
}

uint64_t type metadata accessor for SFAirDropSend.Failure()
{
  return type metadata accessor for SFAirDropSend.Failure();
}

uint64_t SFAirDropSend.Request.urlsMetadata.getter()
{
  return SFAirDropSend.Request.urlsMetadata.getter();
}

uint64_t SFAirDropSend.Request.itemPreviewData.getter()
{
  return SFAirDropSend.Request.itemPreviewData.getter();
}

uint64_t SFAirDropSend.Request.type.getter()
{
  return SFAirDropSend.Request.type.getter();
}

uint64_t SFAirDropSend.Request.urls.getter()
{
  return SFAirDropSend.Request.urls.getter();
}

uint64_t type metadata accessor for SFAirDropSend.Request()
{
  return type metadata accessor for SFAirDropSend.Request();
}

uint64_t SFAirDropSend.Transfer.sendRequest.getter()
{
  return SFAirDropSend.Transfer.sendRequest.getter();
}

uint64_t SFAirDropSend.Transfer.receiverName.getter()
{
  return SFAirDropSend.Transfer.receiverName.getter();
}

uint64_t SFAirDropSend.Transfer.displayPriority.getter()
{
  return SFAirDropSend.Transfer.displayPriority.getter();
}

uint64_t SFAirDropSend.Transfer.id.getter()
{
  return SFAirDropSend.Transfer.id.getter();
}

uint64_t SFAirDropSend.Transfer.State.cancelAction.getter()
{
  return SFAirDropSend.Transfer.State.cancelAction.getter();
}

uint64_t SFAirDropSend.Transfer.State.shortDescription.getter()
{
  return SFAirDropSend.Transfer.State.shortDescription.getter();
}

uint64_t SFAirDropSend.Transfer.State.totalProgressCount.getter()
{
  return SFAirDropSend.Transfer.State.totalProgressCount.getter();
}

uint64_t SFAirDropSend.Transfer.State.currentProgressCount.getter()
{
  return SFAirDropSend.Transfer.State.currentProgressCount.getter();
}

uint64_t SFAirDropSend.Transfer.State.sameCase(as:)()
{
  return SFAirDropSend.Transfer.State.sameCase(as:)();
}

uint64_t type metadata accessor for SFAirDropSend.Transfer.State()
{
  return type metadata accessor for SFAirDropSend.Transfer.State();
}

uint64_t SFAirDropSend.Transfer.state.getter()
{
  return SFAirDropSend.Transfer.state.getter();
}

uint64_t type metadata accessor for SFAirDropSend.Transfer.Metrics()
{
  return type metadata accessor for SFAirDropSend.Transfer.Metrics();
}

uint64_t SFAirDropSend.Transfer.presenter.getter()
{
  return SFAirDropSend.Transfer.presenter.getter();
}

uint64_t type metadata accessor for SFAirDropSend.Transfer()
{
  return type metadata accessor for SFAirDropSend.Transfer();
}

uint64_t static DeviceLockState.== infix(_:_:)()
{
  return static DeviceLockState.== infix(_:_:)();
}

uint64_t type metadata accessor for DeviceLockState()
{
  return type metadata accessor for DeviceLockState();
}

uint64_t static SFAirDropClient.Identifier.== infix(_:_:)()
{
  return static SFAirDropClient.Identifier.== infix(_:_:)();
}

uint64_t type metadata accessor for SFAirDropClient.Identifier()
{
  return type metadata accessor for SFAirDropClient.Identifier();
}

uint64_t SFAirDropClient.__allocating_init(identifier:)()
{
  return SFAirDropClient.__allocating_init(identifier:)();
}

uint64_t type metadata accessor for SFAirDropClient()
{
  return type metadata accessor for SFAirDropClient();
}

uint64_t SFAirDropReceive.AskRequest.senderIsMe.getter()
{
  return SFAirDropReceive.AskRequest.senderIsMe.getter();
}

uint64_t SFAirDropReceive.AskRequest.previewImage.getter()
{
  return SFAirDropReceive.AskRequest.previewImage.getter();
}

uint64_t SFAirDropReceive.AskRequest.contactIdentifier.getter()
{
  return SFAirDropReceive.AskRequest.contactIdentifier.getter();
}

uint64_t SFAirDropReceive.AskRequest.senderCompositeName.getter()
{
  return SFAirDropReceive.AskRequest.senderCompositeName.getter();
}

uint64_t SFAirDropReceive.AskRequest.type.getter()
{
  return SFAirDropReceive.AskRequest.type.getter();
}

uint64_t SFAirDropReceive.AskRequest.files.getter()
{
  return SFAirDropReceive.AskRequest.files.getter();
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter()
{
  return SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter();
}

uint64_t SFAirDropReceive.AskRequest.ItemInfo.fileType.getter()
{
  return SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
}

uint64_t type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo()
{
  return type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
}

uint64_t type metadata accessor for SFAirDropReceive.AskRequest()
{
  return type metadata accessor for SFAirDropReceive.AskRequest();
}

uint64_t type metadata accessor for SFAirDropReceive.ItemDestination()
{
  return type metadata accessor for SFAirDropReceive.ItemDestination();
}

uint64_t type metadata accessor for SFAirDropReceive.Failure()
{
  return type metadata accessor for SFAirDropReceive.Failure();
}

uint64_t SFAirDropReceive.Transfer.askRequest.getter()
{
  return SFAirDropReceive.Transfer.askRequest.getter();
}

uint64_t SFAirDropReceive.Transfer.cancelAction.getter()
{
  return SFAirDropReceive.Transfer.cancelAction.getter();
}

uint64_t SFAirDropReceive.Transfer.displayPriority.getter()
{
  return SFAirDropReceive.Transfer.displayPriority.getter();
}

uint64_t SFAirDropReceive.Transfer.isPreviewSensitive.getter()
{
  return SFAirDropReceive.Transfer.isPreviewSensitive.getter();
}

uint64_t SFAirDropReceive.Transfer.id.getter()
{
  return SFAirDropReceive.Transfer.id.getter();
}

uint64_t SFAirDropReceive.Transfer.State.sfTransferState.getter()
{
  return SFAirDropReceive.Transfer.State.sfTransferState.getter();
}

uint64_t SFAirDropReceive.Transfer.State.cancelAction.getter()
{
  return SFAirDropReceive.Transfer.State.cancelAction.getter();
}

uint64_t SFAirDropReceive.Transfer.State.shortDescription.getter()
{
  return SFAirDropReceive.Transfer.State.shortDescription.getter();
}

uint64_t SFAirDropReceive.Transfer.State.permissionRequest.getter()
{
  return SFAirDropReceive.Transfer.State.permissionRequest.getter();
}

uint64_t SFAirDropReceive.Transfer.State.totalProgressCount.getter()
{
  return SFAirDropReceive.Transfer.State.totalProgressCount.getter();
}

uint64_t SFAirDropReceive.Transfer.State.currentProgressCount.getter()
{
  return SFAirDropReceive.Transfer.State.currentProgressCount.getter();
}

uint64_t static SFAirDropReceive.Transfer.State.== infix(_:_:)()
{
  return static SFAirDropReceive.Transfer.State.== infix(_:_:)();
}

uint64_t SFAirDropReceive.Transfer.State.contactResponsePermissionRequest.getter()
{
  return SFAirDropReceive.Transfer.State.contactResponsePermissionRequest.getter();
}

uint64_t SFAirDropReceive.Transfer.State.sameCase(as:)()
{
  return SFAirDropReceive.Transfer.State.sameCase(as:)();
}

uint64_t type metadata accessor for SFAirDropReceive.Transfer.State()
{
  return type metadata accessor for SFAirDropReceive.Transfer.State();
}

uint64_t SFAirDropReceive.Transfer.state.getter()
{
  return SFAirDropReceive.Transfer.state.getter();
}

uint64_t type metadata accessor for SFAirDropReceive.Transfer.Metrics()
{
  return type metadata accessor for SFAirDropReceive.Transfer.Metrics();
}

uint64_t SFAirDropReceive.Transfer.presenter.getter()
{
  return SFAirDropReceive.Transfer.presenter.getter();
}

uint64_t type metadata accessor for SFAirDropReceive.Transfer()
{
  return type metadata accessor for SFAirDropReceive.Transfer();
}

uint64_t SFXPCProgressTask.makeAsyncIterator()()
{
  return SFXPCProgressTask.makeAsyncIterator()();
}

uint64_t dispatch thunk of SFLockStateMonitor.lockState.getter()
{
  return dispatch thunk of SFLockStateMonitor.lockState.getter();
}

uint64_t dispatch thunk of SFLockStateMonitor.delegate.setter()
{
  return dispatch thunk of SFLockStateMonitor.delegate.setter();
}

uint64_t SFLockStateMonitor.init()()
{
  return SFLockStateMonitor.init()();
}

uint64_t type metadata accessor for SFLockStateMonitor()
{
  return type metadata accessor for SFLockStateMonitor();
}

uint64_t SFProximityHandoff.Interaction.showDeviceDetails.getter()
{
  return SFProximityHandoff.Interaction.showDeviceDetails.getter();
}

uint64_t SFProximityHandoff.Interaction.id.getter()
{
  return SFProximityHandoff.Interaction.id.getter();
}

uint64_t SFProximityHandoff.Interaction.state.getter()
{
  return SFProximityHandoff.Interaction.state.getter();
}

uint64_t SFProximityHandoff.Interaction.content.getter()
{
  return SFProximityHandoff.Interaction.content.getter();
}

uint64_t type metadata accessor for SFProximityHandoff.Interaction()
{
  return type metadata accessor for SFProximityHandoff.Interaction();
}

uint64_t SFProximityHandoff.Content.bundleIdentifier.getter()
{
  return SFProximityHandoff.Content.bundleIdentifier.getter();
}

uint64_t SFProximityHandoff.Content.supportedActions.getter()
{
  return SFProximityHandoff.Content.supportedActions.getter();
}

uint64_t type metadata accessor for SFProximityHandoff.Content.Item()
{
  return type metadata accessor for SFProximityHandoff.Content.Item();
}

uint64_t SFProximityHandoff.Content.items.getter()
{
  return SFProximityHandoff.Content.items.getter();
}

uint64_t SFProximityHandoff.Content.title.getter()
{
  return SFProximityHandoff.Content.title.getter();
}

uint64_t type metadata accessor for SFProximityHandoff.Content.Action()
{
  return type metadata accessor for SFProximityHandoff.Content.Action();
}

uint64_t type metadata accessor for SFProximityHandoff.Content()
{
  return type metadata accessor for SFProximityHandoff.Content();
}

uint64_t SFSecurityScopedURL.url.getter()
{
  return SFSecurityScopedURL.url.getter();
}

uint64_t type metadata accessor for SFSecurityScopedURL()
{
  return type metadata accessor for SFSecurityScopedURL();
}

uint64_t SFSecurityScopedURL.init(_:readWrite:)()
{
  return SFSecurityScopedURL.init(_:readWrite:)();
}

uint64_t SFAirDropUserDefaults.moveToAppEnabled.getter()
{
  return SFAirDropUserDefaults.moveToAppEnabled.getter();
}

uint64_t SFAirDropUserDefaults.shockwaveEffectEnabled.getter()
{
  return SFAirDropUserDefaults.shockwaveEffectEnabled.getter();
}

uint64_t SFAirDropUserDefaults.shockwaveEffectVariant.getter()
{
  return SFAirDropUserDefaults.shockwaveEffectVariant.getter();
}

uint64_t SFAirDropUserDefaults.boopToCollaborateEnabled.getter()
{
  return SFAirDropUserDefaults.boopToCollaborateEnabled.getter();
}

uint64_t SFAirDropUserDefaults.systemLevelProgressEnabled.getter()
{
  return SFAirDropUserDefaults.systemLevelProgressEnabled.getter();
}

uint64_t SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter()
{
  return SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter();
}

uint64_t type metadata accessor for SFInterventionResponse()
{
  return type metadata accessor for SFInterventionResponse();
}

uint64_t type metadata accessor for SFInterventionWorkflow()
{
  return type metadata accessor for SFInterventionWorkflow();
}

uint64_t SFShockwaveEffectState.assetState.getter()
{
  return SFShockwaveEffectState.assetState.getter();
}

uint64_t SFShockwaveEffectState.isLogicallyComplete.getter()
{
  return SFShockwaveEffectState.isLogicallyComplete.getter();
}

uint64_t type metadata accessor for SFShockwaveEffectState()
{
  return type metadata accessor for SFShockwaveEffectState();
}

uint64_t type metadata accessor for SFProximityHandoffClient.Identifier()
{
  return type metadata accessor for SFProximityHandoffClient.Identifier();
}

uint64_t SFProximityHandoffClient.__allocating_init(identifier:)()
{
  return SFProximityHandoffClient.__allocating_init(identifier:)();
}

uint64_t type metadata accessor for SFProximityHandoffClient()
{
  return type metadata accessor for SFProximityHandoffClient();
}

uint64_t SFXPCResilientAsyncSequence.makeAsyncIterator()()
{
  return SFXPCResilientAsyncSequence.makeAsyncIterator()();
}

uint64_t SFProximityHandoffUIServerDomain.getter()
{
  return SFProximityHandoffUIServerDomain.getter();
}

uint64_t SFProximityHandoffUIServerService.getter()
{
  return SFProximityHandoffUIServerService.getter();
}

uint64_t static SFAirDrop.NearbySharingInteraction.FailureType.== infix(_:_:)()
{
  return static SFAirDrop.NearbySharingInteraction.FailureType.== infix(_:_:)();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
}

uint64_t SFAirDrop.NearbySharingInteraction.creationDate.getter()
{
  return SFAirDrop.NearbySharingInteraction.creationDate.getter();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceName.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceName.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceModel.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceModel.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.transactionIdentifier.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.transactionIdentifier.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.ConnectionContext.accountID.getter()
{
  return SFAirDrop.NearbySharingInteraction.ConnectionContext.accountID.getter();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
}

uint64_t SFAirDrop.NearbySharingInteraction.id.getter()
{
  return SFAirDrop.NearbySharingInteraction.id.getter();
}

uint64_t SFAirDrop.NearbySharingInteraction.State.connectionContext.getter()
{
  return SFAirDrop.NearbySharingInteraction.State.connectionContext.getter();
}

uint64_t static SFAirDrop.NearbySharingInteraction.State.< infix(_:_:)()
{
  return static SFAirDrop.NearbySharingInteraction.State.< infix(_:_:)();
}

uint64_t static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)()
{
  return static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction.State()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
}

uint64_t SFAirDrop.NearbySharingInteraction.state.getter()
{
  return SFAirDrop.NearbySharingInteraction.state.getter();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingInteraction()
{
  return type metadata accessor for SFAirDrop.NearbySharingInteraction();
}

uint64_t SFAirDrop.NearbySharingAssertionRequest.init(nearbySharingInteractionID:explanation:)()
{
  return SFAirDrop.NearbySharingAssertionRequest.init(nearbySharingInteractionID:explanation:)();
}

uint64_t type metadata accessor for SFAirDrop.NearbySharingAssertionRequest()
{
  return type metadata accessor for SFAirDrop.NearbySharingAssertionRequest();
}

uint64_t type metadata accessor for SFAirDrop.ContactInfo()
{
  return type metadata accessor for SFAirDrop.ContactInfo();
}

uint64_t SFAirDrop.AcceptAction.Single.defaultAnswer.getter()
{
  return SFAirDrop.AcceptAction.Single.defaultAnswer.getter();
}

uint64_t SFAirDrop.AcceptAction.Single.buttonConfiguration.getter()
{
  return SFAirDrop.AcceptAction.Single.buttonConfiguration.getter();
}

uint64_t SFAirDrop.AcceptAction.Single.id.getter()
{
  return SFAirDrop.AcceptAction.Single.id.getter();
}

uint64_t SFAirDrop.AcceptAction.Single.hidden.getter()
{
  return SFAirDrop.AcceptAction.Single.hidden.getter();
}

uint64_t SFAirDrop.AcceptAction.Single.prominent.getter()
{
  return SFAirDrop.AcceptAction.Single.prominent.getter();
}

uint64_t SFAirDrop.AcceptAction.hidden.getter()
{
  return SFAirDrop.AcceptAction.hidden.getter();
}

uint64_t SFAirDrop.AcceptAction.Composite.buttonConfiguration.getter()
{
  return SFAirDrop.AcceptAction.Composite.buttonConfiguration.getter();
}

uint64_t SFAirDrop.AcceptAction.Composite.actions.getter()
{
  return SFAirDrop.AcceptAction.Composite.actions.getter();
}

uint64_t SFAirDrop.TransferType.isOnlyExchange.getter()
{
  return SFAirDrop.TransferType.isOnlyExchange.getter();
}

uint64_t type metadata accessor for SFAirDrop.TransferType()
{
  return type metadata accessor for SFAirDrop.TransferType();
}

uint64_t SFAirDrop.DeclineAction.buttonConfiguration.getter()
{
  return SFAirDrop.DeclineAction.buttonConfiguration.getter();
}

uint64_t SFAirDrop.DeclineAction.id.getter()
{
  return SFAirDrop.DeclineAction.id.getter();
}

uint64_t SFAirDrop.DeclineAction.hidden.getter()
{
  return SFAirDrop.DeclineAction.hidden.getter();
}

uint64_t type metadata accessor for SFAirDrop.DeclineAction()
{
  return type metadata accessor for SFAirDrop.DeclineAction();
}

uint64_t type metadata accessor for SFAirDrop.ContactRequest()
{
  return type metadata accessor for SFAirDrop.ContactRequest();
}

uint64_t static SFAirDrop.DisplayPriority.== infix(_:_:)()
{
  return static SFAirDrop.DisplayPriority.== infix(_:_:)();
}

uint64_t type metadata accessor for SFAirDrop.DisplayPriority()
{
  return type metadata accessor for SFAirDrop.DisplayPriority();
}

uint64_t SFAirDrop.PermissionRequest.style.getter()
{
  return SFAirDrop.PermissionRequest.style.getter();
}

Swift::Void __swiftcall SFAirDrop.PermissionRequest.cancel()()
{
}

uint64_t SFAirDrop.TransferIdentifier.stringValue.getter()
{
  return SFAirDrop.TransferIdentifier.stringValue.getter();
}

uint64_t SFAirDrop.TransferIdentifier.id.getter()
{
  return SFAirDrop.TransferIdentifier.id.getter();
}

uint64_t type metadata accessor for SFAirDrop.TransferIdentifier()
{
  return type metadata accessor for SFAirDrop.TransferIdentifier();
}

uint64_t SFAirDrop.TransferIdentifier.init(_:)()
{
  return SFAirDrop.TransferIdentifier.init(_:)();
}

uint64_t SFAirDrop.ButtonConfiguration.localizedTitle.getter()
{
  return SFAirDrop.ButtonConfiguration.localizedTitle.getter();
}

uint64_t type metadata accessor for SFAirDrop.ButtonConfiguration()
{
  return type metadata accessor for SFAirDrop.ButtonConfiguration();
}

uint64_t SFAirDrop.Progress.percent.getter()
{
  return SFAirDrop.Progress.percent.getter();
}

uint64_t type metadata accessor for SFAirDrop.Progress()
{
  return type metadata accessor for SFAirDrop.Progress();
}

uint64_t SFAirDrop.Transfers.sendTransfers.getter()
{
  return SFAirDrop.Transfers.sendTransfers.getter();
}

uint64_t SFAirDrop.Transfers.receiveTransfers.getter()
{
  return SFAirDrop.Transfers.receiveTransfers.getter();
}

uint64_t type metadata accessor for SFAirDrop.Transfers()
{
  return type metadata accessor for SFAirDrop.Transfers();
}

uint64_t Animatable<>.animatableData.modify()
{
  return Animatable<>.animatableData.modify();
}

uint64_t static Animatable<>._makeAnimatable(value:inputs:)()
{
  return static Animatable<>._makeAnimatable(value:inputs:)();
}

uint64_t static Animatable._makeAnimatable(value:inputs:)()
{
  return static Animatable._makeAnimatable(value:inputs:)();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t TapGesture.init(count:)()
{
  return TapGesture.init(count:)();
}

uint64_t type metadata accessor for TapGesture()
{
  return type metadata accessor for TapGesture();
}

uint64_t Transition._makeContentTransition(transition:)()
{
  return Transition._makeContentTransition(transition:)();
}

uint64_t static Transition.properties.getter()
{
  return static Transition.properties.getter();
}

uint64_t Transition.animation(_:)()
{
  return Transition.animation(_:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return DragGesture.init<A>(minimumDistance:coordinateSpace:)();
}

uint64_t DragGesture.Value.translation.getter()
{
  return DragGesture.Value.translation.getter();
}

uint64_t DragGesture.Value.predictedEndTranslation.getter()
{
  return DragGesture.Value.predictedEndTranslation.getter();
}

uint64_t type metadata accessor for DragGesture()
{
  return type metadata accessor for DragGesture();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t static GestureMask.all.getter()
{
  return static GestureMask.all.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t Transaction.init(animation:)()
{
  return Transaction.init(animation:)();
}

uint64_t GestureState.init(wrappedValue:resetTransaction:)()
{
  return GestureState.init(wrappedValue:resetTransaction:)();
}

uint64_t GestureState.wrappedValue.getter()
{
  return GestureState.wrappedValue.getter();
}

uint64_t GestureState.projectedValue.getter()
{
  return GestureState.projectedValue.getter();
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)()
{
  return ScaledMetric.init(wrappedValue:relativeTo:)();
}

uint64_t ScaledMetric.wrappedValue.getter()
{
  return ScaledMetric.wrappedValue.getter();
}

uint64_t type metadata accessor for ScaledMetric()
{
  return type metadata accessor for ScaledMetric();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t VisualEffect.blur(radius:opaque:)()
{
  return VisualEffect.blur(radius:opaque:)();
}

uint64_t VisualEffect.scale(_:anchor:)()
{
  return VisualEffect.scale(_:anchor:)();
}

uint64_t VisualEffect.offset(x:y:)()
{
  return VisualEffect.offset(x:y:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t static AnyTransition.asymmetric(insertion:removal:)()
{
  return static AnyTransition.asymmetric(insertion:removal:)();
}

uint64_t static AnyTransition.opacity.getter()
{
  return static AnyTransition.opacity.getter();
}

uint64_t static AnyTransition.identity.getter()
{
  return static AnyTransition.identity.getter();
}

uint64_t static AnyTransition.modifier<A>(active:identity:)()
{
  return static AnyTransition.modifier<A>(active:identity:)();
}

uint64_t AnyTransition.animation(_:)()
{
  return AnyTransition.animation(_:)();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return AnyTransition.init<A>(_:)();
}

uint64_t GeometryProxy.size.getter()
{
  return GeometryProxy.size.getter();
}

uint64_t GeometryProxy.frame<A>(in:)()
{
  return GeometryProxy.frame<A>(in:)();
}

uint64_t KeyframeTrack.init(_:content:)()
{
  return KeyframeTrack.init(_:content:)();
}

uint64_t LayoutSubview.sizeThatFits(_:)()
{
  return LayoutSubview.sizeThatFits(_:)();
}

uint64_t LayoutSubview.place(at:anchor:proposal:)()
{
  return LayoutSubview.place(at:anchor:proposal:)();
}

uint64_t type metadata accessor for LayoutSubview()
{
  return type metadata accessor for LayoutSubview();
}

uint64_t static EnvironmentKey._valuesEqual(_:_:)()
{
  return static EnvironmentKey._valuesEqual(_:_:)();
}

uint64_t type metadata accessor for LayoutSubviews()
{
  return type metadata accessor for LayoutSubviews();
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t LinearKeyframe.init(_:duration:timingCurve:)()
{
  return LinearKeyframe.init(_:duration:timingCurve:)();
}

uint64_t NavigationView.init(content:)()
{
  return NavigationView.init(content:)();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t SpringKeyframe.init(_:duration:spring:startVelocity:)()
{
  return SpringKeyframe.init(_:duration:spring:startVelocity:)();
}

uint64_t static DynamicProperty._propertyBehaviors.getter()
{
  return static DynamicProperty._propertyBehaviors.getter();
}

Swift::Void __swiftcall DynamicProperty.update()()
{
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t TransitionPhase.isIdentity.getter()
{
  return TransitionPhase.isIdentity.getter();
}

uint64_t KeyframeTimeline.init<A>(initialValue:content:)()
{
  return KeyframeTimeline.init<A>(initialValue:content:)();
}

uint64_t KeyframeTimeline.value(time:)()
{
  return KeyframeTimeline.value(time:)();
}

uint64_t KeyframeTimeline.duration.getter()
{
  return KeyframeTimeline.duration.getter();
}

uint64_t static KeyframesBuilder.buildExpression<A>(_:)()
{
  return static KeyframesBuilder.buildExpression<A>(_:)();
}

uint64_t static KeyframesBuilder.buildFinalResult<A>(_:)()
{
  return static KeyframesBuilder.buildFinalResult<A>(_:)();
}

uint64_t static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
}

uint64_t static KeyframesBuilder.buildPartialBlock<A>(first:)()
{
  return static KeyframesBuilder.buildPartialBlock<A>(first:)();
}

uint64_t type metadata accessor for RoundedRectangle._Inset()
{
  return type metadata accessor for RoundedRectangle._Inset();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t type metadata accessor for _BlendModeEffect()
{
  return type metadata accessor for _BlendModeEffect();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t type metadata accessor for EmptyVisualEffect()
{
  return type metadata accessor for EmptyVisualEffect();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.imageScale.getter()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t EnvironmentValues.truncationMode.setter()
{
  return EnvironmentValues.truncationMode.setter();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t EnvironmentValues.dynamicTypeSize.setter()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t EnvironmentValues.symbolRenderingMode.setter()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t EnvironmentValues.tintColor.setter()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t OpacityTransition.init()()
{
  return OpacityTransition.init()();
}

uint64_t type metadata accessor for OpacityTransition()
{
  return type metadata accessor for OpacityTransition();
}

uint64_t static VerticalAlignment.top.getter()
{
  return static VerticalAlignment.top.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t static SymbolRenderingMode.monochrome.getter()
{
  return static SymbolRenderingMode.monochrome.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.setter()
{
  return dispatch thunk of UIHostingController.sizingOptions.setter();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return type metadata accessor for LocalCoordinateSpace();
}

uint64_t type metadata accessor for GlobalCoordinateSpace()
{
  return type metadata accessor for GlobalCoordinateSpace();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return static CoordinateSpaceProtocol<>.local.getter();
}

uint64_t static CoordinateSpaceProtocol<>.global.getter()
{
  return static CoordinateSpaceProtocol<>.global.getter();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t type metadata accessor for ButtonStyleConfiguration()
{
  return type metadata accessor for ButtonStyleConfiguration();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return UIViewRepresentableContext.coordinator.getter();
}

uint64_t static KeyframeTrackContentBuilder.buildExpression<A>(_:)()
{
  return static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
}

uint64_t static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
}

uint64_t static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)()
{
  return static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
}

uint64_t BorderedProminentButtonStyle.init()()
{
  return BorderedProminentButtonStyle.init()();
}

uint64_t type metadata accessor for BorderedProminentButtonStyle()
{
  return type metadata accessor for BorderedProminentButtonStyle();
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t static UIViewControllerRepresentable._layoutOptions(_:)()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

uint64_t UIViewControllerRepresentable._identifiedViewTree(in:)()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentable<>.makeCoordinator()()
{
  return UIViewControllerRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for AccessibilityAttachmentModifier()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t static UIHostingControllerSizingOptions.preferredContentSize.getter()
{
  return static UIHostingControllerSizingOptions.preferredContentSize.getter();
}

uint64_t type metadata accessor for UIHostingControllerSizingOptions()
{
  return type metadata accessor for UIHostingControllerSizingOptions();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t Edge.rawValue.getter()
{
  return Edge.rawValue.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.title2.getter()
{
  return static Font.title2.getter();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t Font.weight(_:)()
{
  return Font.weight(_:)();
}

uint64_t type metadata accessor for Font.Leading()
{
  return type metadata accessor for Font.Leading();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t Font.leading(_:)()
{
  return Font.leading(_:)();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Menu.init(content:label:)()
{
  return Menu.init(content:label:)();
}

uint64_t type metadata accessor for Text.TruncationMode()
{
  return type metadata accessor for Text.TruncationMode();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View._colorMatrix(_:)()
{
  return View._colorMatrix(_:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t View.visualEffect<A>(_:)()
{
  return View.visualEffect<A>(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.dynamicTypeSize<A>(_:)()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t View.navigationTitle<A>(_:)()
{
  return View.navigationTitle<A>(_:)();
}

uint64_t View.navigationBarItems<A>(trailing:)()
{
  return View.navigationBarItems<A>(trailing:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.bold(_:)()
{
  return View.bold(_:)();
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)()
{
  return View.sheet<A, B>(item:onDismiss:content:)();
}

uint64_t View.gesture<A>(_:including:)()
{
  return View.gesture<A>(_:including:)();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t View.animation<A>(_:body:)()
{
  return View.animation<A>(_:body:)();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.red.getter()
{
  return static Color.red.getter();
}

uint64_t static Color.blue.getter()
{
  return static Color.blue.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.green.getter()
{
  return static Color.green.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t Color.init(_:white:opacity:)()
{
  return Color.init(_:white:opacity:)();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t type metadata accessor for Image.Scale()
{
  return type metadata accessor for Image.Scale();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t Image.init(_:)()
{
  return Image.init(_:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t static Layout._makeLayoutView(root:inputs:body:)()
{
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t Layout.updateCache(_:subviews:)()
{
  return Layout.updateCache(_:subviews:)();
}

uint64_t static Layout.layoutProperties.getter()
{
  return static Layout.layoutProperties.getter();
}

uint64_t Layout.spacing(subviews:cache:)()
{
  return Layout.spacing(subviews:cache:)();
}

uint64_t Layout<>.makeCache(subviews:)()
{
  return Layout<>.makeCache(subviews:)();
}

uint64_t Spring.init(mass:stiffness:damping:allowOverDamping:)()
{
  return Spring.init(mass:stiffness:damping:allowOverDamping:)();
}

uint64_t type metadata accessor for Spring()
{
  return type metadata accessor for Spring();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Binding.animation(_:)()
{
  return Binding.animation(_:)();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t Gesture.onEnded(_:)()
{
  return Gesture.onEnded(_:)();
}

uint64_t Gradient.init(colors:)()
{
  return Gradient.init(colors:)();
}

uint64_t static Material.thin.getter()
{
  return static Material.thin.getter();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.bottomTrailing.getter()
{
  return static Alignment.bottomTrailing.getter();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Alignment.trailing.getter()
{
  return static Alignment.trailing.getter();
}

uint64_t static Animation.timingCurve(_:_:_:_:duration:)()
{
  return static Animation.timingCurve(_:_:_:_:duration:)();
}

uint64_t static Animation.interactiveSpring(response:dampingFraction:blendDuration:)()
{
  return static Animation.interactiveSpring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t Animation.delay(_:)()
{
  return Animation.delay(_:)();
}

uint64_t Animation.speed(_:)()
{
  return Animation.speed(_:)();
}

uint64_t static Animation.linear(duration:)()
{
  return static Animation.linear(duration:)();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t type metadata accessor for BlendMode()
{
  return type metadata accessor for BlendMode();
}

uint64_t static UnitCurve.linear.getter()
{
  return static UnitCurve.linear.getter();
}

uint64_t type metadata accessor for UnitCurve()
{
  return type metadata accessor for UnitCurve();
}

uint64_t static UnitPoint.topLeading.getter()
{
  return static UnitPoint.topLeading.getter();
}

uint64_t static UnitPoint.top.getter()
{
  return static UnitPoint.top.getter();
}

uint64_t static UnitPoint.bottom.getter()
{
  return static UnitPoint.bottom.getter();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t type metadata accessor for SFSecureWindow()
{
  return type metadata accessor for SFSecureWindow();
}

uint64_t static SFAirDropUtilities.suggestedAirDropThumbnailSize()()
{
  return static SFAirDropUtilities.suggestedAirDropThumbnailSize()();
}

uint64_t SFAirDropUtilities.FileLoadResult.previewImage.getter()
{
  return SFAirDropUtilities.FileLoadResult.previewImage.getter();
}

uint64_t SFAirDropUtilities.FileLoadResult.url.getter()
{
  return SFAirDropUtilities.FileLoadResult.url.getter();
}

uint64_t SFAirDropUtilities.FileLoadResult.dataType.getter()
{
  return SFAirDropUtilities.FileLoadResult.dataType.getter();
}

uint64_t SFAirDropUtilities.FileLoadResult.wasString.getter()
{
  return SFAirDropUtilities.FileLoadResult.wasString.getter();
}

uint64_t type metadata accessor for SFAirDropUtilities.FileLoadResult()
{
  return type metadata accessor for SFAirDropUtilities.FileLoadResult();
}

uint64_t static SFAirDropUtilities.guessedDataType(for:dataTypesToTry:)()
{
  return static SFAirDropUtilities.guessedDataType(for:dataTypesToTry:)();
}

uint64_t static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)()
{
  return static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)();
}

uint64_t static SFAirDropUtilities.standardTypeIdentifiers.getter()
{
  return static SFAirDropUtilities.standardTypeIdentifiers.getter();
}

uint64_t static SFAirDropUtilities.imageData(for:)()
{
  return static SFAirDropUtilities.imageData(for:)();
}

uint64_t type metadata accessor for SFAirDropUtilities()
{
  return type metadata accessor for SFAirDropUtilities();
}

uint64_t SFUIContactIconProvider.init(diameter:layoutDirection:)()
{
  return SFUIContactIconProvider.init(diameter:layoutDirection:)();
}

uint64_t type metadata accessor for SFUIContactIconProvider()
{
  return type metadata accessor for SFUIContactIconProvider();
}

uint64_t dispatch thunk of ShockwaveAnimationCoordinator.stopIfNecessary()()
{
  return dispatch thunk of ShockwaveAnimationCoordinator.stopIfNecessary()();
}

uint64_t static ShockwaveAnimationCoordinator.== infix(_:_:)()
{
  return static ShockwaveAnimationCoordinator.== infix(_:_:)();
}

uint64_t dispatch thunk of ShockwaveAnimationCoordinator.state.getter()
{
  return dispatch thunk of ShockwaveAnimationCoordinator.state.getter();
}

uint64_t dispatch thunk of ShockwaveAnimationCoordinator.$state.getter()
{
  return dispatch thunk of ShockwaveAnimationCoordinator.$state.getter();
}

uint64_t dispatch thunk of ShockwaveAnimationCoordinator.update(using:)()
{
  return dispatch thunk of ShockwaveAnimationCoordinator.update(using:)();
}

uint64_t ShockwaveAnimationCoordinator.init()()
{
  return ShockwaveAnimationCoordinator.init()();
}

uint64_t type metadata accessor for ShockwaveAnimationCoordinator()
{
  return type metadata accessor for ShockwaveAnimationCoordinator();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)()
{
  return dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationHandle.onDismiss.setter()
{
  return dispatch thunk of SFRemoteAlertPresentationHandle.onDismiss.setter();
}

uint64_t SFRemoteAlertPresentationManager.remoteAlertHandleDidActivate(_:)()
{
  return SFRemoteAlertPresentationManager.remoteAlertHandleDidActivate(_:)();
}

uint64_t SFRemoteAlertPresentationManager.remoteAlertHandleDidDeactivate(_:)()
{
  return SFRemoteAlertPresentationManager.remoteAlertHandleDidDeactivate(_:)();
}

uint64_t SFRemoteAlertPresentationManager.remoteAlertHandle(_:didInvalidateWithError:)()
{
  return SFRemoteAlertPresentationManager.remoteAlertHandle(_:didInvalidateWithError:)();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationManager.presentationHandle(for:)()
{
  return dispatch thunk of SFRemoteAlertPresentationManager.presentationHandle(for:)();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationManager.presentationRequest(for:)()
{
  return dispatch thunk of SFRemoteAlertPresentationManager.presentationRequest(for:)();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:onDismiss:)()
{
  return dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:onDismiss:)();
}

uint64_t dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:)()
{
  return dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:)();
}

uint64_t type metadata accessor for SFRemoteAlertPresentationRequest.PresentationType()
{
  return type metadata accessor for SFRemoteAlertPresentationRequest.PresentationType();
}

uint64_t SFRemoteAlertPresentationRequest.viewControllerToPresent.getter()
{
  return SFRemoteAlertPresentationRequest.viewControllerToPresent.getter();
}

uint64_t SFRemoteAlertPresentationRequest.contentOverlaysStatusBar.getter()
{
  return SFRemoteAlertPresentationRequest.contentOverlaysStatusBar.getter();
}

uint64_t SFRemoteAlertPresentationRequest.id.getter()
{
  return SFRemoteAlertPresentationRequest.id.getter();
}

uint64_t SFRemoteAlertPresentationRequest.animated.getter()
{
  return SFRemoteAlertPresentationRequest.animated.getter();
}

uint64_t type metadata accessor for SFRemoteAlertPresentationRequest()
{
  return type metadata accessor for SFRemoteAlertPresentationRequest();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.Values.description.getter()
{
  return Dictionary.Values.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

uint64_t String.LocalizationValue.init(_:)()
{
  return String.LocalizationValue.init(_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return static String.localizedStringWithFormat(_:_:)();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t String.init(localized:)()
{
  return String.init(localized:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._id countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._id countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return static AsyncStream.makeStream(of:bufferingPolicy:)();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.noThrow(priority:operation:)()
{
  return static Task<>.noThrow(priority:operation:)();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSUserDefaults.airdrop.getter()
{
  return static NSUserDefaults.airdrop.getter();
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItem systemItem, UIAction_optional primaryAction, UIMenu_optional menu)
{
  return (UIBarButtonItem)UIBarButtonItem.init(systemItem:primaryAction:menu:)(systemItem, primaryAction.value.super.super.isa, *(void *)&primaryAction.is_nil, menu.value.super.super.isa, *(void *)&menu.is_nil);
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)()
{
  return static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t static UISceneSessionRole.activityBanner.getter()
{
  return static UISceneSessionRole.activityBanner.getter();
}

uint64_t static UISceneSessionRole.activityListItem.getter()
{
  return static UISceneSessionRole.activityListItem.getter();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

uint64_t UIColor.init(_:)()
{
  return UIColor.init(_:)();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
}

uint64_t static UIButton.Configuration.plain()()
{
  return static UIButton.Configuration.plain()();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return type metadata accessor for UIButton.Configuration();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return UIButton.init(configuration:primaryAction:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BSNSStringFromCGSize()
{
  return _BSNSStringFromCGSize();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return _CFBagCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFBagGetCount(CFBagRef theBag)
{
  return _CFBagGetCount(theBag);
}

void CFBagGetValues(CFBagRef theBag, const void **values)
{
}

void CFBagSetValue(CFMutableBagRef theBag, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return _CFBundleCopyLocalizedString(bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return _CFBundleGetBundleWithIdentifier(bundleID);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return _CFGetAllocator(cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return _CFSetCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return _CFSetGetCount(theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return _CFStringCreateCopy(alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return _CFStringCreateMutableCopy(alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return _CFStringCreateWithSubstring(alloc, str, range);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return _CFStringFindAndReplace(theString, stringToFind, replacementString, rangeToSearch, compareOptions);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return _CFStringGetIntValue(str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return _CFStringHasSuffix(theString, suffix);
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return _CFURLCreateStringByAddingPercentEscapes(allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, encoding);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return _CFURLCreateWithString(allocator, URLString, baseURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return _CFURLGetTypeID();
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return _CFURLSetResourcePropertyForKey(url, key, propertyValue, error);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformScale(retstr, t, sx, sy);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

uint64_t CGImageCreateByMatchingToColorSpace()
{
  return _CGImageCreateByMatchingToColorSpace();
}

uint64_t CGImageCreateThumb()
{
  return _CGImageCreateThumb();
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

uint64_t CGImageGetSizeAfterOrientation()
{
  return _CGImageGetSizeAfterOrientation();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithData(data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return _CGImageSourceGetCount(isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return _CGImageSourceGetType(isrc);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t SBUIIsSystemApertureEnabled()
{
  return _SBUIIsSystemApertureEnabled();
}

uint64_t SBUISystemApertureLayoutModeDescription()
{
  return _SBUISystemApertureLayoutModeDescription();
}

uint64_t SFCreateCGImageFromData()
{
  return _SFCreateCGImageFromData();
}

uint64_t SFDeviceIsVirtualMachine()
{
  return _SFDeviceIsVirtualMachine();
}

uint64_t TUCopyIDSCanonicalAddressForDestinationID()
{
  return _TUCopyIDSCanonicalAddressForDestinationID();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return _UIImageJPEGRepresentation(image, compressionQuality);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void exit(int a1)
{
}

void free(void *a1)
{
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return _localtime_r(a1, a2);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

uint64_t utilities_log()
{
  return _utilities_log();
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

int64_t xpc_array_get_int64(xpc_object_t xarray, size_t index)
{
  return _xpc_array_get_int64(xarray, index);
}

void xpc_array_set_int64(xpc_object_t xarray, size_t index, int64_t value)
{
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_itemProvider(void *a1, const char *a2, ...)
{
  return _[a1 itemProvider];
}

id objc_msgSend_itemProviders(void *a1, const char *a2, ...)
{
  return _[a1 itemProviders];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}