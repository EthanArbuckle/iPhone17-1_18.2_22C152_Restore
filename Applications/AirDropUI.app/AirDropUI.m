uint64_t sub_100005DF4()
{
  if (qword_100186960 != -1) {
    dispatch_once(&qword_100186960, &stru_100168818);
  }
  return qword_100186968;
}

void sub_100005E38(id a1)
{
  qword_100186968 = (uint64_t)CFBundleGetBundleWithIdentifier(@"com.apple.Sharing");
  if (!qword_100186968)
  {
    CFURLRef v1 = CFURLCreateWithFileSystemPath(0, @"/System/Library/PrivateFrameworks/Sharing.framework", kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      CFURLRef v2 = v1;
      qword_100186968 = (uint64_t)CFBundleCreate(0, v1);
      CFRelease(v2);
    }
  }
}

CFStringRef sub_100005EB8(const __CFString *a1)
{
  return sub_100005EC4(a1, @"Localizable");
}

CFStringRef sub_100005EC4(const __CFString *cf, CFStringRef tableName)
{
  if (qword_100186960 != -1) {
    dispatch_once(&qword_100186960, &stru_100168818);
  }
  v4 = (__CFBundle *)qword_100186968;
  if (qword_100186968)
  {
    return CFBundleCopyLocalizedString(v4, cf, cf, tableName);
  }
  else
  {
    CFAllocatorRef v6 = CFGetAllocator(cf);
    return CFStringCreateCopy(v6, cf);
  }
}

__CFSet *sub_100005F60(const __CFAllocator *a1, CFIndex a2, CFBagRef theBag)
{
  if (!theBag) {
    return 0;
  }
  CFIndex Count = CFBagGetCount(theBag);
  if (!Count) {
    return 0;
  }
  uint64_t v7 = Count;
  __chkstk_darwin();
  v9 = (const void **)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v9, v8);
  CFBagGetValues(theBag, v9);
  Mutable = CFSetCreateMutable(a1, a2, &kCFTypeSetCallBacks);
  if (v7 >= 1)
  {
    do
    {
      v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }
    while (v7);
  }
  return Mutable;
}

CFArrayRef sub_100006068(const __CFAllocator *a1, CFSetRef theSet)
{
  if (!theSet) {
    return 0;
  }
  CFArrayRef result = (CFArrayRef)CFSetGetCount(theSet);
  if (result)
  {
    CFIndex v5 = (CFIndex)result;
    __chkstk_darwin();
    uint64_t v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFSetGetValues(theSet, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

CFArrayRef sub_10000614C(const __CFAllocator *a1, CFBagRef theBag)
{
  if (!theBag) {
    return 0;
  }
  CFArrayRef result = (CFArrayRef)CFBagGetCount(theBag);
  if (result)
  {
    CFIndex v5 = (CFIndex)result;
    __chkstk_darwin();
    uint64_t v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFBagGetValues(theBag, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

__CFBag *sub_100006230(const __CFAllocator *a1, CFArrayRef theArray)
{
  if (!theArray) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  Mutable = CFBagCreateMutable(a1, Count, &kCFTypeBagCallBacks);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFBagSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *sub_1000062C0(const __CFAllocator *a1, CFArrayRef theArray)
{
  if (!theArray) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  Mutable = CFSetCreateMutable(a1, Count, &kCFTypeSetCallBacks);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

__CFSet *sub_100006350(const __CFAllocator *a1, xpc_object_t xarray)
{
  if (!xarray) {
    return 0;
  }
  int64_t count = xpc_array_get_count(xarray);
  Mutable = CFSetCreateMutable(a1, count, (const CFSetCallBacks *)&unk_100168838);
  if (count >= 1)
  {
    for (size_t i = 0; i != count; ++i)
    {
      int64_t int64 = xpc_array_get_int64(xarray, i);
      if (qword_1001869C8 != -1) {
        dispatch_once(&qword_1001869C8, &stru_1001689F8);
      }
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1001869D0, int64);
      CFSetSetValue(Mutable, ValueAtIndex);
    }
  }
  return Mutable;
}

xpc_object_t sub_10000643C(const __CFSet *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFSetGetCount(a1);
  if (!Count) {
    return 0;
  }
  uint64_t v3 = Count;
  __chkstk_darwin();
  CFIndex v5 = (const void **)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v5, v4);
  xpc_object_t v6 = xpc_array_create(0, 0);
  CFSetGetValues(a1, v5);
  if (v3 >= 1)
  {
    do
    {
      uint64_t v7 = *v5;
      if (qword_1001869C8 != -1) {
        dispatch_once(&qword_1001869C8, &stru_100168A38);
      }
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_1001869D8, v7);
      xpc_array_set_int64(v6, 0xFFFFFFFFFFFFFFFFLL, (int64_t)Value);
      ++v5;
      --v3;
    }
    while (v3);
  }
  return v6;
}

CFArrayRef sub_100006590(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  CFArrayRef result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    CFIndex v5 = (CFIndex)result;
    __chkstk_darwin();
    uint64_t v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, (const void **)v7, 0);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

CFArrayRef sub_100006678(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  CFArrayRef result = (CFArrayRef)CFDictionaryGetCount(theDict);
  if (result)
  {
    CFIndex v5 = (CFIndex)result;
    __chkstk_darwin();
    uint64_t v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    CFDictionaryGetKeysAndValues(theDict, 0, (const void **)v7);
    return CFArrayCreate(a1, (const void **)v7, v5, &kCFTypeArrayCallBacks);
  }
  return result;
}

void sub_100006760(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value) {
    CFDictionarySetValue(theDict, key, value);
  }
  else {
    CFDictionaryRemoveValue(theDict, key);
  }
}

uint64_t sub_10000676C()
{
  return 0;
}

uint64_t sub_100006774(const void *a1)
{
  if (CFEqual(a1, kSFNodeProtocolAFP)) {
    return 548;
  }
  if (CFEqual(a1, kSFNodeProtocolSMB)) {
    return 445;
  }
  if (CFEqual(a1, kSFNodeProtocolVNC)) {
    return 5900;
  }
  if (CFEqual(a1, kSFNodeProtocolODisk) || CFEqual(a1, kSFNodeProtocolWebDAV)) {
    return 80;
  }
  if (CFEqual(a1, kSFNodeProtocolWebDAVS)) {
    return 443;
  }
  if (CFEqual(a1, kSFNodeProtocolNFS)) {
    return 2049;
  }
  if (CFEqual(a1, kSFNodeProtocolFTP)) {
    return 21;
  }
  if (CFEqual(a1, kSFNodeProtocolFTPS)) {
    return 990;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTP)) {
    return 80;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTPS)) {
    return 443;
  }
  if (CFEqual(a1, kSFNodeProtocolADisk)) {
    return 548;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFStringRef sub_1000068F8(const __CFString *originalString, CFStringRef legalURLCharactersToBeEscaped)
{
  if (originalString) {
    return CFURLCreateStringByAddingPercentEscapes(0, originalString, 0, legalURLCharactersToBeEscaped, 0x8000100u);
  }
  return originalString;
}

CFURLRef sub_10000691C(const void *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  if (CFEqual(a1, kSFNodeProtocolWebDAV) || CFEqual(a1, kSFNodeProtocolODisk))
  {
    v16 = (const void **)&kSFNodeProtocolHTTP;
LABEL_4:
    v17 = *v16;
    goto LABEL_5;
  }
  v38 = (const void *)kSFNodeProtocolAirDrop;
  CFEqual(a1, kSFNodeProtocolAirDrop);
  if (CFEqual(a1, kSFNodeProtocolWebDAVS) || (v17 = a1, CFEqual(a1, v38)))
  {
    v16 = (const void **)&kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }
LABEL_5:
  int v18 = sub_100006774(a1);
  if (a2) {
    a2 = CFURLCreateStringByAddingPercentEscapes(0, a2, 0, @";:@?/", 0x8000100u);
  }
  if (a3) {
    a3 = CFURLCreateStringByAddingPercentEscapes(0, a3, 0, @";:@?/", 0x8000100u);
  }
  if (CFStringHasPrefix(MutableCopy, @"[") && CFStringHasSuffix(MutableCopy, @"]"))
  {
    CFIndex Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0, Length, MutableCopy);
    v45.length = CFStringGetLength(MutableCopy);
    v45.location = 0;
    CFStringFindAndReplace(MutableCopy, @"%", @"%25", v45, 0);
  }
  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, @";:@?/",
                                  0x8000100u);
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%@://", v17);
  if (!a2)
  {
    if (!a3)
    {
      int v21 = 1;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0, @":%@", a3);
    int v21 = 0;
    goto LABEL_19;
  }
  int v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, @"@");
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5) {
    CFStringAppendFormat(Mutable, 0, @":%ld", a5);
  }
  if (a6)
  {
    if (CFStringHasPrefix(a6, @"/"))
    {
      v44.length = CFStringGetLength(a6) - 1;
      v44.location = 1;
      CFStringRef v22 = CFStringCreateWithSubstring(0, a6, v44);
    }
    else
    {
      CFStringRef v22 = (const __CFString *)CFRetain(a6);
    }
    CFStringRef v23 = v22;
    if (v22) {
      CFStringRef v24 = CFURLCreateStringByAddingPercentEscapes(0, v22, 0, 0, 0x8000100u);
    }
    else {
      CFStringRef v24 = 0;
    }
    CFStringAppendFormat(Mutable, 0, @"/%@", v24);
    CFRelease(v23);
    CFRelease(v24);
  }
  if (a7)
  {
    CFIndex Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      uint64_t v26 = Count;
      int v40 = v21;
      CFStringRef v41 = a3;
      int v42 = a8;
      uint64_t v39 = (uint64_t)&v39;
      __chkstk_darwin(Count);
      v28 = (const void **)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v28, v27);
      v29 = CFStringCreateMutable(0, 0);
      CFDictionaryGetKeysAndValues(a7, v28, 0);
      uint64_t v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          v31 = *v28;
          Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0, @"%@=%@", v31, Value);
          if (!v30) {
            break;
          }
          CFStringAppend(v29, @"&");
          --v30;
          ++v28;
        }
      }
      CFStringAppendFormat(Mutable, 0, @"?%@", v29);
      CFRelease(v29);
      a8 = v42;
      a3 = v41;
      LOBYTE(v21) = v40;
    }
  }
  CFURLRef v33 = CFURLCreateWithString(0, Mutable, 0);
  CFURLRef v34 = v33;
  if (a8)
  {
    CFErrorRef error = 0;
    if (!CFURLSetResourcePropertyForKey(v33, kCFURLIsDirectoryKey, kCFBooleanTrue, &error))
    {
      char v35 = v21;
      v36 = utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_10011CC9C((uint64_t *)&error, v36);
      }
      CFRelease(error);
      LOBYTE(v21) = v35;
    }
  }
  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2) {
    CFRelease(a2);
  }
  if ((v21 & 1) == 0) {
    CFRelease(a3);
  }
  return v34;
}

uint64_t sub_100006E34()
{
  return 0;
}

CGImageRef sub_100006E3C(const __CFURL *a1)
{
  CFURLRef v1 = CGImageSourceCreateWithURL(a1, 0);
  if (v1)
  {
    CFURLRef v2 = v1;
    if (CGImageSourceGetCount(v1))
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v2, 0, 0);
    }
    else
    {
      CFIndex v5 = utilities_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10011CD4C();
      }
      CGImageRef ImageAtIndex = 0;
    }
    CFRelease(v2);
  }
  else
  {
    size_t v4 = utilities_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10011CD18();
    }
    return 0;
  }
  return ImageAtIndex;
}

CGImageRef sub_100006EE0(const __CFData *a1)
{
  return sub_100006EE8(a1, 0);
}

CGImageRef sub_100006EE8(const __CFData *a1, int a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFIndex v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, kCGImageSourceTypeIdentifierHint, kUTTypeJPEG2000);
    CFDictionarySetValue(v5, kCGImageSourceFailForDataNotMatchingHint, kCFBooleanTrue);
  }
  size_t v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    uint64_t v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10011CDB4();
      }
      goto LABEL_20;
    }
    if (a2)
    {
      CFStringRef Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, kUTTypeJPEG2000))
      {
        v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_10011CDE8();
        }
        goto LABEL_20;
      }
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        uint64_t v10 = utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10011CE1C();
        }
LABEL_20:
        CGImageRef ImageAtIndex = 0;
      }
    }
    else
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        uint64_t v13 = utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_10011CE50();
        }
        goto LABEL_20;
      }
    }
    CFRelease(v7);
    goto LABEL_22;
  }
  v11 = utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_10011CD80();
  }
  CGImageRef ImageAtIndex = 0;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef sub_1000070A0(const __CFData *a1)
{
  return sub_100006EE8(a1, 1);
}

CGImageRef sub_1000070A8(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    uint64_t v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0);
  }
  else
  {
    if (v2 != CFDataGetTypeID()) {
      goto LABEL_8;
    }
    uint64_t v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  }
  size_t v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    }
    else
    {
      uint64_t v7 = utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10011CEB8();
      }
      CGImageRef ImageAtIndex = 0;
    }
    CFRelease(v4);
    return ImageAtIndex;
  }
LABEL_8:
  size_t v6 = utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_10011CE84();
  }
  return 0;
}

__CFData *sub_100007188(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFDataCreateMutable(v4, 0);
  uint64_t valuePtr = a2;
  size_t v6 = CFDictionaryCreateMutable(v4, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    uint64_t v8 = (const void **)&kCGImageDestinationRequestedFileSize;
  }
  else
  {
    int v14 = 1065353216;
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    uint64_t v8 = (const void **)&kCGImageDestinationLossyCompressionQuality;
  }
  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  v9 = CGImageDestinationCreateWithData(Mutable, kUTTypeJPEG2000, 1uLL, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      v11 = utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10011CF20();
      }
      CFRelease(Mutable);
      CFMutableStringRef Mutable = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v12 = utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10011CEEC();
    }
  }
  CFRelease(v6);
  return Mutable;
}

__CFData *sub_1000072FC(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (DeviceRGB)
  {
    CGColorSpaceRef v4 = DeviceRGB;
    CFIndex v5 = (CGImage *)CGImageCreateByMatchingToColorSpace();
    if (v5)
    {
      size_t v6 = v5;
      size_t Width = CGImageGetWidth(v5);
      size_t Height = CGImageGetHeight(v6);
      if (Width > 0x21C || Height >= 0x21D) {
        Thumb = (void *)CGImageCreateThumb();
      }
      else {
        Thumb = (void *)CFRetain(v6);
      }
      uint64_t v13 = Thumb;
      if (Thumb)
      {
        v11 = sub_100007188(Thumb, a2);
        CFRelease(v13);
      }
      else
      {
        int v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_10011CFBC();
        }
        v11 = 0;
      }
      CFRelease(v6);
    }
    else
    {
      v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10011CF88();
      }
      v11 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    uint64_t v10 = utilities_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10011CF54();
    }
    return 0;
  }
  return v11;
}

uint64_t sub_10000742C()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100186970;
  if (!qword_100186970)
  {
    if (SFDeviceIsVirtualMachine()) {
      uint64_t v1 = 1;
    }
    else {
      uint64_t v1 = sub_1000074C4(@"EnableDemoMode", 0);
    }
    int v2 = sub_1000074C4(@"BrowseAllInterfaces", v1);
    uint64_t v3 = &kCFBooleanTrue;
    if (!v2) {
      uint64_t v3 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v3;
    qword_100186970 = (uint64_t)*v3;
  }

  return CFBooleanGetValue(v0);
}

uint64_t sub_1000074B4()
{
  return sub_1000074C4(@"EnableDemoMode", 0);
}

uint64_t sub_1000074C4(const __CFString *a1, uint64_t a2)
{
  CFBooleanRef v3 = (const __CFBoolean *)sub_10000779C(a1);
  if (v3)
  {
    CFBooleanRef v4 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    v9 = sub_1000079B0;
    uint64_t v10 = &unk_100168888;
    CFBooleanRef v11 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      uint64_t Value = CFBooleanGetValue(v4);
    }
    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        v9((uint64_t)v8);
        return a2;
      }
      uint64_t Value = sub_10000788C((const __CFString *)v4);
    }
    a2 = Value;
    goto LABEL_7;
  }
  return a2;
}

uint64_t sub_100007590()
{
  return sub_1000074C4(@"ForceOldMode", 0);
}

uint64_t sub_1000075A0()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100186978;
  if (!qword_100186978)
  {
    int v1 = sub_1000074C4(@"DisableAirDrop", 0);
    int v2 = &kCFBooleanTrue;
    if (!v1) {
      int v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_100186978 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

uint64_t sub_100007608()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100186980;
  if (!qword_100186980)
  {
    int v1 = sub_1000074C4(@"EnableSimulator", 0);
    int v2 = &kCFBooleanTrue;
    if (!v1) {
      int v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_100186980 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

uint64_t sub_100007670()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100186988;
  if (!qword_100186988)
  {
    int v1 = sub_1000074C4(@"EnableDeviceImages", 0);
    int v2 = &kCFBooleanTrue;
    if (!v1) {
      int v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_100186988 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

uint64_t sub_1000076D8()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100186990;
  if (!qword_100186990)
  {
    int v1 = sub_1000074C4(@"EnableDirectIP", 0);
    int v2 = &kCFBooleanTrue;
    if (!v1) {
      int v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_100186990 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

BOOL sub_100007740(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2)) {
      return 1;
    }
  }
  else if (cf1 && !cf2)
  {
    return 1;
  }
  return cf2 && cf1 == 0;
}

CFPropertyListRef sub_10000779C(const __CFString *a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(a1, @"/private/var/Managed Preferences/mobile/com.apple.Sharing");
  if (!result)
  {
    return CFPreferencesCopyAppValue(a1, @"com.apple.Sharing");
  }
  return result;
}

uint64_t sub_1000077F4(const __CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t valuePtr = a2;
  CFNumberRef v3 = (const __CFNumber *)sub_10000779C(a1);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID()) {
        uint64_t valuePtr = CFStringGetIntValue((CFStringRef)v4);
      }
    }
    CFRelease(v4);
    return valuePtr;
  }
  return v2;
}

BOOL sub_10000788C(const __CFString *a1)
{
  CFRetain(a1);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  CFTypeID v5 = sub_1000079A8;
  CFTypeID v6 = &unk_100168868;
  CFStringRef v7 = a1;
  if (CFEqual(a1, @"1"))
  {
    BOOL v2 = 1;
  }
  else
  {
    BOOL v2 = 1;
    if (CFStringCompare(a1, @"true", 1uLL))
    {
      BOOL v2 = 1;
      if (CFStringCompare(a1, @"yes", 1uLL))
      {
        BOOL v2 = 1;
        if (CFStringCompare(a1, @"y", 1uLL)) {
          BOOL v2 = CFStringCompare(a1, @"on", 1uLL) == kCFCompareEqualTo;
        }
      }
    }
  }
  v5((uint64_t)v4);
  return v2;
}

void sub_1000079A8(uint64_t a1)
{
}

void sub_1000079B0(uint64_t a1)
{
}

CFStringRef sub_1000079B8(const __CFAllocator *a1)
{
  memset(&v4, 0, sizeof(v4));
  v3.tv_sec = 0;
  *(void *)&v3.tv_usec = 0;
  gettimeofday(&v3, 0);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat(a1, 0, @"%02d:%02d:%02d.%03d", v4.tm_hour, v4.tm_min, v4.tm_sec, (v3.tv_usec / 1000));
}

CFStringRef sub_100007A4C()
{
  CFBooleanRef v0 = (const __CFBoolean *)sub_10000779C(@"AlternateService");
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1)) {
        CFStringRef v3 = @"_airdrop-alt._tcp.";
      }
      else {
        CFStringRef v3 = @"_airdrop._tcp.";
      }
      goto LABEL_16;
    }
    CFTypeID v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, @"1"))
      {
        CFStringRef v3 = @"_airdrop-alt._tcp.";
LABEL_16:
        CFRelease(v1);
        return v3;
      }
      if (!CFEqual(v1, @"0"))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          CFStringRef v7 = (void *)CFRetain(v1);
        }
        else
        {
          v11.location = 0;
          v11.length = 7;
          CFStringRef v7 = (void *)CFStringCreateWithSubstring(0, (CFStringRef)v1, v11);
        }
        uint64_t v8 = v7;
        CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"_airdrop-%@._tcp.", v7);
        CFStringRef v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_16;
      }
    }
    CFStringRef v3 = @"_airdrop._tcp.";
    goto LABEL_16;
  }
  if (!sub_1000074C4(@"EnableDemoMode", 0)) {
    return @"_airdrop._tcp.";
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"_airdrop-%@._tcp.", @"demo");

  return (const __CFString *)CFAutorelease(v4);
}

uint64_t sub_100007BE8()
{
  if (qword_100186998 != -1) {
    dispatch_once(&qword_100186998, &stru_1001688C8);
  }
  return qword_1001869A0;
}

CFArrayRef sub_100007C30()
{
  int v14 = @"_adisk._tcp.";
  CFStringRef v15 = @"_afpovertcp._tcp.";
  CFStringRef v16 = @"_smb._tcp.";
  CFStringRef v17 = @"_rfb._tcp.";
  CFStringRef v18 = @"_odisk._tcp.";
  CFStringRef v19 = @"_http._tcp.";
  CFStringRef v20 = sub_100007A4C();
  CFStringRef v21 = @"_file._tcp.";
  CFStringRef v22 = @"_netbios._udp.";
  CFStringRef v23 = @"_workgroups._udp.";
  CFStringRef v24 = @"_nwnode._tcp.";
  uint64_t v0 = kSFNodeProtocolAFP;
  values = (void *)kSFNodeProtocolADisk;
  uint64_t v4 = kSFNodeProtocolAFP;
  uint64_t v1 = kSFNodeProtocolSMB;
  uint64_t v5 = kSFNodeProtocolSMB;
  uint64_t v6 = kSFNodeProtocolVNC;
  uint64_t v7 = kSFNodeProtocolODisk;
  uint64_t v8 = kSFNodeProtocolHTTP;
  uint64_t v9 = kSFNodeProtocolAirDrop;
  uint64_t v10 = kSFNodeProtocolFile;
  uint64_t v11 = kSFNodeProtocolNetBIOS;
  uint64_t v12 = kSFNodeProtocolWorkgroups;
  uint64_t v13 = kSFNodeProtocolNWNode;
  if (sub_1000074C4(@"PreferSMBFileSharing", 0))
  {
    CFStringRef v15 = @"_smb._tcp.";
    CFStringRef v16 = @"_afpovertcp._tcp.";
    uint64_t v4 = v1;
    uint64_t v5 = v0;
  }
  qword_1001869A8 = (uint64_t)CFArrayCreate(0, (const void **)&values, 11, &kCFTypeArrayCallBacks);
  CFArrayRef result = CFArrayCreate(0, (const void **)&v14, 11, &kCFTypeArrayCallBacks);
  qword_1001869A0 = (uint64_t)result;
  return result;
}

uint64_t sub_100007DEC()
{
  if (qword_100186998 != -1) {
    dispatch_once(&qword_100186998, &stru_100168908);
  }
  return qword_1001869A8;
}

const void *sub_100007E34(void *key)
{
  if (qword_1001869B0 != -1) {
    dispatch_once(&qword_1001869B0, &stru_100168948);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)qword_1001869B8;

  return CFDictionaryGetValue(v2, key);
}

CFDictionaryRef sub_100007E9C()
{
  if (qword_100186998 != -1) {
    dispatch_once(&qword_100186998, &stru_1001688C8);
  }
  CFArrayRef v0 = (const __CFArray *)qword_1001869A0;
  CFArrayRef v1 = (const __CFArray *)qword_1001869A8;
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1001869A0);
  CFIndex v3 = CFArrayGetCount(v1);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v7);
  v11.location = 0;
  v11.length = Count;
  CFArrayGetValues(v0, v11, (const void **)v5);
  v12.location = 0;
  v12.length = v3;
  CFArrayGetValues(v1, v12, (const void **)v8);
  qword_1001869B8 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)v8, (const void **)v5, Count, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef result = CFDictionaryCreate(kCFAllocatorDefault, (const void **)v5, (const void **)v8, v3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_1001869C0 = (uint64_t)result;
  return result;
}

const void *sub_100008048(void *key)
{
  if (qword_1001869B0 != -1) {
    dispatch_once(&qword_1001869B0, &stru_100168988);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)qword_1001869C0;

  return CFDictionaryGetValue(v2, key);
}

uint64_t sub_1000080B0()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.retain)();
}

uint64_t sub_1000080C0()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.release)();
}

uint64_t sub_1000080D0()
{
  return ((uint64_t (*)(void))kCFTypeSetCallBacks.copyDescription)();
}

uint64_t sub_1000080E0()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.retain)();
}

uint64_t sub_1000080F0()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.release)();
}

uint64_t sub_100008100()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.copyDescription)();
}

CFDictionaryRef sub_100008114()
{
  uint64_t v0 = 0;
  values[0] = (void *)kSFNodeKindRoot;
  values[1] = (void *)kSFNodeKindBonjour;
  values[2] = (void *)kSFNodeKindWindows;
  values[3] = (void *)kSFNodeKindDomain;
  values[4] = (void *)kSFNodeKindWorkgroup;
  values[5] = (void *)kSFNodeKindVolume;
  values[6] = (void *)kSFNodeKindPrinter;
  values[7] = (void *)kSFNodeKindADisk;
  values[8] = (void *)kSFNodeKindODisk;
  values[9] = (void *)kSFNodeKindPerson;
  values[10] = (void *)kSFNodeKindMe;
  values[11] = (void *)kSFNodeKindDisabled;
  values[12] = (void *)kSFNodeKindUnknown;
  values[13] = (void *)kSFNodeKindMonogram;
  values[14] = (void *)kSFNodeKindRecent;
  values[15] = (void *)kSFNodeKindConnected;
  values[16] = (void *)kSFNodeKindManaged;
  values[17] = (void *)kSFNodeKindAirDrop;
  values[18] = (void *)kSFNodeKindClassroom;
  values[19] = (void *)kSFNodeKindClassroomGroup;
  values[20] = (void *)kSFNodeKindClassroomCourse;
  values[21] = (void *)kSFNodeKindSuggestion;
  values[22] = (void *)kSFNodeKindRapport;
  values[23] = (void *)kSFNodeKindAll;
  memset(v4, 0, sizeof(v4));
  int64x2_t v1 = (int64x2_t)xmmword_1001296E0;
  int64x2_t v2 = vdupq_n_s64(2uLL);
  do
  {
    v4[v0] = v1;
    int64x2_t v1 = vaddq_s64(v1, v2);
    ++v0;
  }
  while (v0 != 12);
  qword_1001869D0 = (uint64_t)CFArrayCreate(0, (const void **)values, 24, &kCFTypeArrayCallBacks);
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)values, (const void **)v4, 24, (const CFDictionaryKeyCallBacks *)&unk_1001689A8, 0);
  qword_1001869D8 = (uint64_t)result;
  return result;
}

void sub_100008350(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_100008458()
{
  int64x2_t v1 = &v0[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate];
  *(_OWORD *)int64x2_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  int64x2_t v2 = &v0[OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen];
  *(_OWORD *)int64x2_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  uint64_t v3 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_screenWidth;
  size_t v4 = self;
  uint64_t v5 = v0;
  id v6 = [v4 mainScreen];
  [v6 bounds];
  uint64_t v8 = v7;

  *(void *)&v0[v3] = v8;
  uint64_t v9 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_animationPositionTransformYOffset;
  id v10 = [v4 mainScreen];
  [v10 bounds];
  double v12 = v11;

  *(double *)&v5[v9] = v12 / 3.0;
  uint64_t v13 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_cornerRadius;
  int v14 = self;
  id v15 = [v14 sharedInstanceForEmbeddedDisplay];
  [v15 maximumContinuousCornerRadius];
  uint64_t v17 = v16;

  *(void *)&v5[v13] = v17;
  uint64_t v18 = OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureEdgeInset;
  id v19 = [v14 sharedInstanceForEmbeddedDisplay];
  [v19 minimumScreenEdgeInsets];
  uint64_t v21 = v20;

  *(void *)&v5[v18] = v21;
  v23.receiver = v5;
  v23.super_class = (Class)type metadata accessor for SystemApertureElementTransitionCoordinator();
  return [super init];
}

id sub_100008614(uint64_t a1)
{
  return sub_100008F7C(a1, type metadata accessor for SystemApertureElementTransitionCoordinator);
}

uint64_t type metadata accessor for SystemApertureElementTransitionCoordinator()
{
  return self;
}

void sub_10000866C(void *a1)
{
  id v3 = [a1 viewControllerForKey:UITransitionContextFromViewControllerKey];
  if (!v3)
  {
    __break(1u);
    goto LABEL_26;
  }
  size_t v4 = v3;
  id v5 = [a1 viewControllerForKey:UITransitionContextToViewControllerKey];
  if (!v5)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return;
  }
  id v6 = v5;
  uint64_t v7 = OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay;
  if (v1[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay]) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v4;
  }
  id v9 = v8;
  id v51 = [v9 view];
  if (!v51) {
    goto LABEL_27;
  }
  uint64_t v10 = OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator;
  double v11 = (double *)(*(void *)&v1[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator]
                 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen);
  double v12 = *v11;
  double v13 = v11[1];
  double v15 = v11[2];
  double v14 = v11[3];
  uint64_t v16 = &selRef_initialFrameForViewController_;
  if (v1[v7]) {
    uint64_t v16 = &selRef_finalFrameForViewController_;
  }
  [a1 *v16 v9];
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  double v24 = v23;
  id v25 = [self effectWithStyle:8];
  id v26 = [objc_allocWithZone((Class)UIVisualEffectView) init];
  [v26 setFrame:v18, v20, v22, v24];
  [v26 setAutoresizingMask:18];
  v50 = v6;
  if (v1[v7] == 1) {
    id v27 = v25;
  }
  else {
    id v27 = 0;
  }
  [v26 setEffect:v27];

  id v28 = [objc_allocWithZone((Class)UIView) init];
  id v29 = [self whiteColor];
  [v28 setBackgroundColor:v29];

  [v28 setClipsToBounds:1];
  id v30 = [v28 layer];
  [v30 setCornerRadius:*(double *)(*(void *)&v1[v10] + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_cornerRadius)];

  id v31 = [v28 layer];
  [v31 setCornerCurve:kCACornerCurveID0];

  id v32 = [a1 containerView];
  [v32 addSubview:v51];

  id v33 = [a1 containerView];
  [v33 addSubview:v26];

  [v51 setFrame:v18, v20, v22, v24];
  [v51 frame];
  [v51 setFrame:];
  id v34 = [a1 containerView];
  [v34 setMaskView:v28];

  if (v1[v7]) {
    double v35 = v12;
  }
  else {
    double v35 = v18;
  }
  if (v1[v7]) {
    double v36 = v13;
  }
  else {
    double v36 = v20;
  }
  if (v1[v7]) {
    double v37 = v15;
  }
  else {
    double v37 = v22;
  }
  if (v1[v7]) {
    double v38 = v14;
  }
  else {
    double v38 = v24;
  }
  [v28 setFrame:v35, v36, v37, v38];
  id v48 = self;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v26;
  *(void *)(v39 + 24) = v1;
  *(void *)(v39 + 32) = v25;
  *(void *)(v39 + 40) = v51;
  *(double *)(v39 + 48) = v18;
  *(double *)(v39 + 56) = v20;
  *(double *)(v39 + 64) = v22;
  *(double *)(v39 + 72) = v24;
  *(void *)(v39 + 80) = v28;
  *(double *)(v39 + 88) = v12;
  *(double *)(v39 + 96) = v13;
  *(double *)(v39 + 104) = v15;
  *(double *)(v39 + 112) = v14;
  v57 = sub_10000A958;
  v58 = (void *)v39;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256;
  v55 = sub_100119678;
  v56 = &unk_100168F70;
  int v40 = _Block_copy(&aBlock);
  id v49 = v25;
  id v41 = v26;
  int v42 = v1;
  id v52 = v51;
  id v43 = v28;
  swift_release();
  CFRange v44 = (void *)swift_allocObject();
  v44[2] = v41;
  v44[3] = a1;
  v44[4] = v42;
  v57 = sub_10000A9D8;
  v58 = v44;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256;
  v55 = sub_1000D7ABC;
  v56 = &unk_100168FC0;
  CFRange v45 = _Block_copy(&aBlock);
  id v46 = v41;
  v47 = v42;
  swift_unknownObjectRetain();
  swift_release();
  [v48 _animateUsingSpringWithDuration:0 delay:v40 options:v45 mass:0.8 stiffness:0.0 damping:2.0 initialVelocity:300.0 animations:50.0 completion:0.0];

  _Block_release(v45);
  _Block_release(v40);
}

id sub_100008C58(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v23 = OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay;
  if (*(unsigned char *)(a2
                + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay))
    a3 = 0;
  [a1 setEffect:a3];
  [a4 setFrame:a6, a7, a8, a9];
  [a4 frame];
  [a4 setFrame:];
  if (*(unsigned char *)(a2 + v23)) {
    double v24 = a6;
  }
  else {
    double v24 = a10;
  }
  if (*(unsigned char *)(a2 + v23)) {
    double v25 = a7;
  }
  else {
    double v25 = a11;
  }
  if (*(unsigned char *)(a2 + v23)) {
    double v26 = a8;
  }
  else {
    double v26 = a12;
  }
  double v27 = a13;
  if (*(unsigned char *)(a2 + v23)) {
    double v27 = a9;
  }

  return [a5 setFrame:v24, v25, v26, v27];
}

void sub_100008D90(char a1, id a2, void *a3, uint64_t a4)
{
  [a2 removeFromSuperview];
  id v7 = [a3 containerView];
  [v7 setMaskView:0];

  [a3 completeTransition:a1 & 1];
  uint64_t v8 = *(void **)(a4
                + OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator);
  uint64_t v9 = (uint64_t)v8 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess();
  sub_10000A9E4(v9, (uint64_t)v16);
  if (v17)
  {
    sub_10000AAF0((uint64_t)v16, (uint64_t)v13);
    id v10 = v8;
    sub_10000AA90((uint64_t)v16);
    uint64_t v11 = v14;
    uint64_t v12 = v15;
    sub_10000AB54(v13, v14);
    (*(void (**)(id, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    sub_10000AB98((uint64_t)v13);
  }
  else
  {
    sub_10000AA90((uint64_t)v16);
  }
}

id sub_100008F60()
{
  return sub_100008F7C(0, type metadata accessor for SystemApertureElementTransition);
}

id sub_100008F7C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for SystemApertureElementTransition()
{
  return self;
}

void type metadata accessor for SBUISystemAperturePresentationBehaviors(uint64_t a1)
{
}

void type metadata accessor for CHHapticPatternLibraryKey(uint64_t a1)
{
}

__n128 initializeWithTake for AirDropActivityAttributes(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes.ContentState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes.ContentState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureElementIdentifier(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
}

void type metadata accessor for _UIBackgroundLuminanceLevel(uint64_t a1)
{
}

__n128 initializeWithTake for SystemApertureLayoutMode(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000090D8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000090F8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void sub_100009138(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100009144()
{
  sub_10000A8AC();
  EnvironmentValues.subscript.getter();
  return v1;
}

void sub_100009180(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFRemoteAlertPresentationRequest.PresentationType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a2 == 1 && (*a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t))(a3 + 40);
    uint64_t v29 = *(void *)(a3 + 48);
    uint64_t v12 = (void *)v11(v8);
    uint64_t v13 = *(void *)a3;
    char v14 = *(unsigned char *)(a3 + 8);
    sub_10000AD54(*(void *)a3, v14);
    uint64_t v15 = sub_10006C660(v13, v14);
    sub_10000ADB0(v13, v14);
    if (v15)
    {
      [v12 setModalPresentationStyle:4];
      [v12 setTransitioningDelegate:v15];
      swift_unknownObjectRelease();
      if ((*(unsigned char *)(a3 + 33) & 1) == 0)
      {
LABEL_5:
        type metadata accessor for AUIRemoteAlertPresentationManager();
        id v16 = sub_100084E60();
        aBlock[0] = *(void *)(a3 + 16);
        uint64_t v17 = swift_allocObject();
        long long v18 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v17 + 16) = *(_OWORD *)a3;
        *(_OWORD *)(v17 + 32) = v18;
        *(_OWORD *)(v17 + 48) = *(_OWORD *)(a3 + 32);
        *(void *)(v17 + 64) = *(void *)(a3 + 48);
        (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for SFRemoteAlertPresentationRequest.PresentationType.unknown(_:), v6);
        sub_10000AD54(v13, v14);
        swift_retain();
        sub_10000B078((uint64_t)aBlock);
        swift_retain();
        dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:onDismiss:)();

        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        return;
      }
    }
    else
    {
      [v12 setModalPresentationStyle:0];
      if ((*(unsigned char *)(a3 + 33) & 1) == 0) {
        goto LABEL_5;
      }
    }
    id v19 = [objc_allocWithZone((Class)SBSLockScreenService) init];
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10000B150(v20, (uint64_t)qword_10018D128);
    double v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Requesting device unlock if necessary", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = *(void *)(a3 + 16);
    uint64_t v24 = swift_allocObject();
    long long v25 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
    *(void *)(v24 + 16) = v12;
    *(_OWORD *)(v24 + 40) = v25;
    *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 32);
    *(void *)(v24 + 72) = *(void *)(a3 + 48);
    *(void *)(v24 + 80) = v19;
    aBlock[4] = sub_10000B1EC;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D7ABC;
    aBlock[3] = &unk_1001691F0;
    double v26 = _Block_copy(aBlock);
    sub_10000AD54(v13, v14);
    id v27 = v12;
    sub_10000B078((uint64_t)&v31);
    swift_retain();
    swift_retain();
    id v28 = v19;
    swift_release();
    [v28 requestPasscodeUnlockUIWithOptions:0 withCompletion:v26];

    _Block_release(v26);
  }
}

id sub_1000095BC(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for SFRemoteAlertPresentationRequest.PresentationType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Device was unlocked", v14, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AUIRemoteAlertPresentationManager();
    id v15 = sub_100084E60();
    *(void *)&long long v23 = *(void *)a3;
    BYTE8(v23) = *(unsigned char *)(a3 + 8);
    uint64_t v25 = *(void *)(a3 + 16);
    uint64_t v16 = swift_allocObject();
    long long v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v16 + 32) = v17;
    *(_OWORD *)(v16 + 48) = *(_OWORD *)(a3 + 32);
    *(void *)(v16 + 64) = *(void *)(a3 + 48);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for SFRemoteAlertPresentationRequest.PresentationType.unknown(_:), v7);
    sub_10000B048((uint64_t)&v23);
    sub_10000B078((uint64_t)&v25);
    swift_retain();
    swift_retain();
    dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:presentationType:onDismiss:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_10018D128);
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      double v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Device was not unlocked", v21, 2u);
      swift_slowDealloc();
    }

    long long v23 = *(_OWORD *)(a3 + 16);
    char v24 = *(unsigned char *)(a3 + 32);
    LOBYTE(v25) = 0;
    sub_10000AA4C(&qword_10017FBD0);
    Binding.wrappedValue.setter();
  }
  return [a4 invalidate];
}

uint64_t sub_100009934()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100009950()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  char v3 = *((unsigned char *)v0 + 32);
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v11 = v2;
  uint64_t v8 = v2;
  uint64_t v9 = v1;
  char v10 = v3;
  sub_10000AA4C(&qword_10017FBD0);
  Binding.wrappedValue.getter();
  uint64_t v8 = *v0;
  LOBYTE(v9) = *((unsigned char *)v0 + 8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = v1;
  *(unsigned char *)(v6 + 48) = v3;
  *(_DWORD *)(v6 + 49) = *(_DWORD *)((char *)v0 + 33);
  *(_DWORD *)(v6 + 52) = *((_DWORD *)v0 + 9);
  *(void *)(v6 + 56) = v5;
  *(void *)(v6 + 64) = v4;
  sub_10000B048((uint64_t)&v8);
  sub_10000B078((uint64_t)&v11);
  swift_retain();
  swift_retain();
  sub_10000AA4C(&qword_10017FBD8);
  sub_10000B0A4();
  View.onChange<A>(of:initial:_:)();
  return swift_release();
}

BOOL sub_100009AA4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100009AB8(uint64_t a1, uint64_t a2)
{
  return sub_10000A1AC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100009AE4(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100009B5C(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100009BDC@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *sub_100009C20@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100009C30(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100009C40@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100009C54(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100009C84(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100009C98(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100009CAC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100009CC0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100009CD4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100009D00@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100009D24(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100009D38@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100009D4C(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100009D60(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100009D74(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100009D88()
{
  return *v0 == 0;
}

uint64_t sub_100009D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100009DB0(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100009DC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *sub_100009DF0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100009E00(uint64_t a1)
{
  uint64_t v2 = sub_100009F4C(&qword_10017FA48, type metadata accessor for SBUISystemApertureElementIdentifier);
  uint64_t v3 = sub_100009F4C(&qword_10017FA50, type metadata accessor for SBUISystemApertureElementIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009EBC()
{
  return sub_100009F4C(&qword_10017F9E8, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_100009F04()
{
  return sub_100009F4C(&qword_10017F9F0, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_100009F4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009F94(uint64_t a1)
{
  uint64_t v2 = sub_100009F4C(&qword_10017FBB0, type metadata accessor for OpenExternalURLOptionsKey);
  uint64_t v3 = sub_100009F4C(&qword_10017FBB8, type metadata accessor for OpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A050@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000A098(uint64_t a1)
{
  uint64_t v2 = sub_100009F4C(&qword_10017FA38, type metadata accessor for CHHapticPatternLibraryKey);
  uint64_t v3 = sub_100009F4C(&qword_10017FA40, type metadata accessor for CHHapticPatternLibraryKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A154@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000A874(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10000A194(uint64_t a1, uint64_t a2)
{
  return sub_10000A1AC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000A1AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000A1F0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000A244()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000A2B8()
{
  return sub_100009F4C(&qword_10017F9F8, type metadata accessor for SBUISystemApertureElementIdentifier);
}

uint64_t sub_10000A300()
{
  return sub_100009F4C(&qword_10017FA00, type metadata accessor for CHHapticPatternLibraryKey);
}

uint64_t sub_10000A348()
{
  return sub_100009F4C(&qword_10017FA08, type metadata accessor for CHHapticPatternLibraryKey);
}

uint64_t sub_10000A390()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10000A41C()
{
  return sub_100009F4C(&qword_10017FA10, type metadata accessor for CHHapticPatternLibraryKey);
}

uint64_t sub_10000A464()
{
  return sub_100009F4C(&qword_10017FA18, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_10000A4AC()
{
  return sub_100009F4C(&qword_10017FA20, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_10000A4F4()
{
  return sub_100009F4C(&qword_10017FA28, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

uint64_t sub_10000A53C()
{
  return sub_100009F4C(&qword_10017FA30, type metadata accessor for SBUISystemAperturePresentationBehaviors);
}

void sub_10000A584(void *a1, uint64_t a2)
{
  if ([a1 activeLayoutMode] == (id)4)
  {
    id v4 = [a1 view];
    if (v4)
    {
      char v5 = v4;
      [v4 frame];
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;

      double v14 = *(double *)(a2 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_screenWidth) * 0.5;
      v18.origin.x = v7;
      v18.origin.y = v9;
      v18.size.width = v11;
      v18.size.height = v13;
      CGFloat Width = CGRectGetWidth(v18);
      uint64_t v16 = *(void *)(a2
                      + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureEdgeInset);
      uint64_t v17 = a2
          + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_systemApertureLayoutModeCustomFrameInScreen;
      *(double *)uint64_t v17 = v14 - Width * 0.5;
      *(void *)(v17 + 8) = v16;
      *(CGFloat *)(v17 + 16) = v11;
      *(CGFloat *)(v17 + 24) = v13;
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_10000A668()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)v0 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess();
  sub_10000A9E4(v2, (uint64_t)v13);
  if (v14)
  {
    sub_10000AAF0((uint64_t)v13, (uint64_t)v9);
    sub_10000AA90((uint64_t)v13);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    sub_10000AB54(v9, v10);
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 8))(v1, v3, v4);
    sub_10000AB98((uint64_t)v9);
  }
  else
  {
    sub_10000AA90((uint64_t)v13);
  }
  char v5 = (objc_class *)type metadata accessor for SystemApertureElementTransition();
  double v6 = objc_allocWithZone(v5);
  v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay] = 1;
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator] = v1;
  v12.receiver = v6;
  v12.super_class = v5;
  id v7 = v1;
  return [super init];
}

id sub_10000A770()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)v0 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess();
  sub_10000A9E4(v2, (uint64_t)v13);
  if (v14)
  {
    sub_10000AAF0((uint64_t)v13, (uint64_t)v9);
    sub_10000AA90((uint64_t)v13);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    sub_10000AB54(v9, v10);
    (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v1, v3, v4);
    sub_10000AB98((uint64_t)v9);
  }
  else
  {
    sub_10000AA90((uint64_t)v13);
  }
  char v5 = (objc_class *)type metadata accessor for SystemApertureElementTransition();
  double v6 = objc_allocWithZone(v5);
  v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_isPresentingFullScreenOverlay] = 0;
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUIP33_545EB857E99384AFBD8884C8F47F06D831SystemApertureElementTransition_transitionCoordinator] = v1;
  v12.receiver = v6;
  v12.super_class = v5;
  id v7 = v1;
  return [super init];
}

uint64_t sub_10000A874(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_10000A8AC()
{
  unint64_t result = qword_100180B90;
  if (!qword_100180B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B90);
  }
  return result;
}

uint64_t sub_10000A900()
{
  return _swift_deallocObject(v0, 120, 7);
}

id sub_10000A958()
{
  return sub_100008C58(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 80), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(double *)(v0 + 112));
}

uint64_t sub_10000A978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000A988()
{
  return swift_release();
}

uint64_t sub_10000A990()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10000A9D8(char a1)
{
  sub_100008D90(a1, *(id *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10000A9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_10017FB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000AA4C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000AA90(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_10017FB20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_10000AB54(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000AB98(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

ValueMetadata *type metadata accessor for RemoteAlertTransitioningDelegateKey()
{
  return &type metadata for RemoteAlertTransitioningDelegateKey;
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t sub_10000AC20()
{
  return sub_100009F4C(&qword_10017FB38, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000AC68()
{
  return sub_100009F4C(&qword_10017FB40, type metadata accessor for OpenExternalURLOptionsKey);
}

uint64_t sub_10000ACB0()
{
  return sub_100009F4C(&qword_10017FB48, type metadata accessor for OpenExternalURLOptionsKey);
}

void type metadata accessor for SNAInvalidationReason(uint64_t a1)
{
}

void type metadata accessor for SNAAssertionState(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for RemoteAlertViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_10000AD54(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for RemoteAlertViewModifier(uint64_t a1)
{
  sub_10000ADB0(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10000ADB0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10000AD54(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10000AD54(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10000ADB0(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for RemoteAlertViewModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RemoteAlertViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10000ADB0(v6, v7);
  swift_release();
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteAlertViewModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteAlertViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteAlertViewModifier()
{
  return &type metadata for RemoteAlertViewModifier;
}

uint64_t sub_10000B020()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10000B040(unsigned char *a1, unsigned char *a2)
{
  sub_100009180(a1, a2, v2 + 16);
}

uint64_t sub_10000B048(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000B078(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000B0A4()
{
  unint64_t result = qword_10017FBE0;
  if (!qword_10017FBE0)
  {
    sub_10000B100(&qword_10017FBD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FBE0);
  }
  return result;
}

uint64_t sub_10000B100(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000B150(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000B188()
{
  sub_10000ADB0(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

id sub_10000B1EC(char a1)
{
  return sub_1000095BC(a1, *(void *)(v1 + 16), v1 + 24, *(void **)(v1 + 80));
}

uint64_t sub_10000B200()
{
  sub_10000ADB0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10000B254()
{
  return Binding.wrappedValue.setter();
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void sub_10000B2BC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000B304()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for AirDropUIButtonStyle.Style(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIButtonStyle()
{
  return &type metadata for AirDropUIButtonStyle;
}

uint64_t sub_10000B3E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000B404(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v4);
  if (a2)
  {
    if (a2 != 1)
    {
      switch(a1)
      {
        case 3:
        case 4:
          break;
        default:
          goto LABEL_5;
      }
    }
    id v7 = [self systemGray2Color];
    Color.init(_:)();
    uint64_t v8 = Color.opacity(_:)();
    swift_release();
    return v8;
  }
  else
  {
LABEL_5:
    (*(void (**)(char *, void))(v6 + 104))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
    return Color.init(_:red:green:blue:opacity:)();
  }
}

uint64_t sub_10000B61C(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v4);
  if (a2)
  {
    if (a2 != 1)
    {
      switch(a1)
      {
        case 3:
        case 4:
          break;
        default:
          goto LABEL_7;
      }
    }
    id v7 = [self labelColor];
    return Color.init(_:)();
  }
  else
  {
LABEL_7:
    (*(void (**)(char *, void))(v6 + 104))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
    return Color.init(_:red:green:blue:opacity:)();
  }
}

BOOL sub_10000B800(uint64_t a1, uint64_t a2)
{
  return sub_10000F3F0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_10000B818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v276 = a1;
  uint64_t v277 = a2;
  uint64_t v273 = a4;
  int v257 = a3;
  unsigned int v4 = a3;
  uint64_t v274 = sub_10000AA4C(&qword_10017FD70);
  uint64_t v5 = __chkstk_darwin(v274);
  v226 = (char *)&v215 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v227 = (uint64_t)&v215 - v7;
  uint64_t v243 = sub_10000AA4C(&qword_10017FD78);
  uint64_t v8 = __chkstk_darwin(v243);
  v223 = (char *)&v215 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v222 = (char *)&v215 - v10;
  uint64_t v244 = sub_10000AA4C(&qword_10017FD80);
  uint64_t v11 = __chkstk_darwin(v244);
  uint64_t v224 = (uint64_t)&v215 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v221 = (uint64_t)&v215 - v13;
  uint64_t v261 = sub_10000AA4C(&qword_10017FD88);
  uint64_t v14 = __chkstk_darwin(v261);
  uint64_t v220 = (uint64_t)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v225 = (uint64_t)&v215 - v16;
  uint64_t v259 = sub_10000AA4C(&qword_10017FD90);
  __chkstk_darwin(v259);
  uint64_t v260 = (uint64_t)&v215 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v269 = sub_10000AA4C(&qword_10017FD98);
  __chkstk_darwin(v269);
  v262 = (char *)&v215 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_10000AA4C(&qword_10017FDA0);
  __chkstk_darwin(v263);
  uint64_t v264 = (uint64_t)&v215 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = sub_10000AA4C(&qword_10017FDA8);
  __chkstk_darwin(v250);
  uint64_t v252 = (uint64_t)&v215 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = sub_10000AA4C(&qword_10017FDB0);
  __chkstk_darwin(v249);
  v251 = (char *)&v215 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = sub_10000AA4C(&qword_10017FDB8);
  __chkstk_darwin(v254);
  uint64_t v255 = (uint64_t)&v215 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = sub_10000AA4C(&qword_10017FDC0);
  uint64_t v23 = __chkstk_darwin(v258);
  uint64_t v253 = (uint64_t)&v215 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v256 = (uint64_t)&v215 - v25;
  uint64_t v26 = type metadata accessor for Capsule();
  __chkstk_darwin(v26 - 8);
  v230 = (char *)&v215 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v270 = sub_10000AA4C(&qword_10017FDC8);
  __chkstk_darwin(v270);
  uint64_t v29 = (char *)&v215 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = sub_10000AA4C(&qword_10017FDD0);
  uint64_t v234 = *(void *)(v236 - 8);
  __chkstk_darwin(v236);
  v233 = (char *)&v215 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_10000AA4C((uint64_t *)&unk_100185FD0);
  __chkstk_darwin(v231);
  v235 = (char *)&v215 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000AA4C(&qword_10017FDD8);
  __chkstk_darwin(v32 - 8);
  uint64_t v237 = (uint64_t)&v215 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = sub_10000AA4C(&qword_10017FDE0);
  __chkstk_darwin(v232);
  v240 = (char *)&v215 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_10000AA4C(&qword_10017FDE8);
  __chkstk_darwin(v238);
  v229 = (char *)&v215 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v248 = sub_10000AA4C(&qword_10017FDF0);
  uint64_t v36 = __chkstk_darwin(v248);
  v228 = (char *)&v215 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v242 = (uint64_t)&v215 - v38;
  uint64_t v271 = sub_10000AA4C(&qword_10017FDF8);
  __chkstk_darwin(v271);
  v272 = (char *)&v215 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v265 = sub_10000AA4C(&qword_10017FE00);
  __chkstk_darwin(v265);
  uint64_t v267 = (uint64_t)&v215 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = sub_10000AA4C(&qword_10017FE08);
  __chkstk_darwin(v245);
  uint64_t v246 = (uint64_t)&v215 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v266 = sub_10000AA4C(&qword_10017FE10);
  __chkstk_darwin(v266);
  v247 = (char *)&v215 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = sub_10000AA4C(&qword_10017FE18);
  __chkstk_darwin(v275);
  v268 = (char *)&v215 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v239);
  v241 = (char *)&v215 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v46 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  id v48 = (char *)&v215 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000AA4C(&qword_10017FE20);
  uint64_t v215 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  id v51 = (char *)&v215 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000AA4C((uint64_t *)&unk_100185FC0);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v215 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000AA4C(&qword_10017FE28);
  __chkstk_darwin(v55 - 8);
  uint64_t v216 = (uint64_t)&v215 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000AA4C(&qword_10017FE30);
  __chkstk_darwin(v57);
  v218 = (char *)&v215 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = sub_10000AA4C(&qword_10017FE38);
  __chkstk_darwin(v217);
  uint64_t v219 = (uint64_t)&v215 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000AA4C(&qword_10017FE40);
  uint64_t v61 = __chkstk_darwin(v60);
  uint64_t v62 = __chkstk_darwin(v61);
  if (v4 >= 2)
  {
    uint64_t v88 = v276;
    switch(v277)
    {
      case 2:
        ButtonStyleConfiguration.label.getter();
        uint64_t v126 = static Font.headline.getter();
        uint64_t KeyPath = swift_getKeyPath();
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v29, v48, v45);
        v128 = (uint64_t *)&v29[*(int *)(v270 + 36)];
        uint64_t *v128 = KeyPath;
        v128[1] = v126;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        char v129 = static Edge.Set.all.getter();
        uint64_t v130 = v264;
        sub_10000F330((uint64_t)v29, v264, &qword_10017FDC8);
        uint64_t v131 = v130 + *(int *)(v263 + 36);
        *(unsigned char *)uint64_t v131 = v129;
        __asm { FMOV            V0.2D, #10.0 }
        *(_OWORD *)(v131 + 8) = _Q0;
        *(_OWORD *)(v131 + 24) = xmmword_10012A0C0;
        *(unsigned char *)(v131 + 40) = 0;
        sub_10000F394((uint64_t)v29, &qword_10017FDC8);
        uint64_t v133 = (uint64_t)v222;
        v134 = &v222[*(int *)(v243 + 36)];
        v135 = &v134[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier() + 20)];
        uint64_t v136 = type metadata accessor for ButtonStyleConfiguration();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(v135, v88, v136);
        *(void *)v134 = 2;
        v134[8] = 2;
        sub_10000F2CC(v130, v133, &qword_10017FDA0);
        if (ButtonStyleConfiguration.isPressed.getter()) {
          uint64_t v137 = sub_10000B404(2, 2);
        }
        else {
          uint64_t v137 = sub_10000B61C(2, 2);
        }
        uint64_t v181 = v137;
        uint64_t v117 = (uint64_t)v272;
        uint64_t v182 = swift_getKeyPath();
        uint64_t v183 = v221;
        sub_10000F330(v133, v221, &qword_10017FD78);
        v184 = (uint64_t *)(v183 + *(int *)(v244 + 36));
        uint64_t *v184 = v182;
        v184[1] = v181;
        sub_10000F394(v133, &qword_10017FD78);
        uint64_t v185 = v220;
        sub_10000F330(v183, v220, &qword_10017FD80);
        *(_WORD *)(v185 + *(int *)(v261 + 36)) = 256;
        sub_10000F394(v183, &qword_10017FD80);
        v122 = &qword_10017FD88;
        uint64_t v123 = v225;
        sub_10000F2CC(v185, v225, &qword_10017FD88);
        sub_10000F330(v123, v260, &qword_10017FD88);
        swift_storeEnumTagMultiPayload();
        sub_10000E3CC();
        sub_10000E690();
        uint64_t v124 = (uint64_t)v262;
        goto LABEL_9;
      case 3:
        uint64_t v270 = v64;
        uint64_t v277 = (uint64_t)&v215 - v63;
        uint64_t v264 = v62;
        uint64_t v150 = v276;
        ButtonStyleConfiguration.label.getter();
        sub_10000DFB0(&qword_10017FE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
        View.bold(_:)();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        char v151 = static Edge.Set.all.getter();
        EdgeInsets.init(_all:)();
        uint64_t v153 = v152;
        uint64_t v155 = v154;
        uint64_t v157 = v156;
        uint64_t v159 = v158;
        uint64_t v160 = v215;
        (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v54, v51, v49);
        v161 = &v54[*(int *)(v52 + 36)];
        char *v161 = v151;
        *((void *)v161 + 1) = v153;
        *((void *)v161 + 2) = v155;
        *((void *)v161 + 3) = v157;
        *((void *)v161 + 4) = v159;
        v161[40] = 0;
        (*(void (**)(char *, uint64_t))(v160 + 8))(v51, v49);
        uint64_t v162 = static Alignment.center.getter();
        uint64_t v163 = v216;
        sub_1000F9838(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v216, 0.0, 1, 0.0, 1, v162, v164);
        sub_10000F394((uint64_t)v54, (uint64_t *)&unk_100185FC0);
        uint64_t v165 = *(int *)(v57 + 36);
        uint64_t v166 = (uint64_t)v218;
        v167 = &v218[v165];
        v168 = &v167[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier() + 20)];
        uint64_t v169 = type metadata accessor for ButtonStyleConfiguration();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v169 - 8) + 16))(v168, v150, v169);
        *(void *)v167 = 3;
        v167[8] = 2;
        sub_10000F2CC(v163, v166, &qword_10017FE28);
        char v170 = ButtonStyleConfiguration.isPressed.getter();
        uint64_t v117 = (uint64_t)v272;
        if (v170) {
          uint64_t v171 = sub_10000B404(3, 2);
        }
        else {
          uint64_t v171 = sub_10000B61C(3, 2);
        }
        uint64_t v202 = v171;
        uint64_t v203 = swift_getKeyPath();
        uint64_t v204 = v219;
        sub_10000F330(v166, v219, &qword_10017FE30);
        v205 = (uint64_t *)(v204 + *(int *)(v217 + 36));
        uint64_t *v205 = v203;
        v205[1] = v202;
        sub_10000F394(v166, &qword_10017FE30);
        v206 = v241;
        v207 = &v241[*(int *)(v239 + 20)];
        uint64_t v208 = enum case for RoundedCornerStyle.continuous(_:);
        uint64_t v209 = type metadata accessor for RoundedCornerStyle();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v209 - 8) + 104))(v207, v208, v209);
        __asm { FMOV            V0.2D, #12.0 }
        _OWORD *v206 = _Q0;
        uint64_t v211 = v270;
        uint64_t v212 = v270 + *(int *)(v264 + 36);
        sub_10000E91C((uint64_t)v206, v212, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        *(_WORD *)(v212 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
        sub_10000F330(v204, v211, &qword_10017FE38);
        sub_10000E984((uint64_t)v206, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        sub_10000F394(v204, &qword_10017FE38);
        v122 = &qword_10017FE40;
        uint64_t v123 = v277;
        sub_10000F2CC(v211, v277, &qword_10017FE40);
        sub_10000F330(v123, v246, &qword_10017FE40);
        swift_storeEnumTagMultiPayload();
        sub_10000DCBC();
        sub_10000DFF8();
        uint64_t v124 = (uint64_t)v247;
        goto LABEL_24;
      case 4:
        ButtonStyleConfiguration.label.getter();
        uint64_t v138 = static Font.headline.getter();
        uint64_t v139 = swift_getKeyPath();
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v29, v48, v45);
        v140 = (uint64_t *)&v29[*(int *)(v270 + 36)];
        uint64_t *v140 = v139;
        v140[1] = v138;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        char v141 = static Edge.Set.all.getter();
        uint64_t v142 = v264;
        sub_10000F330((uint64_t)v29, v264, &qword_10017FDC8);
        uint64_t v143 = v142 + *(int *)(v263 + 36);
        *(unsigned char *)uint64_t v143 = v141;
        __asm { FMOV            V0.2D, #9.0 }
        *(_OWORD *)(v143 + 8) = _Q0;
        *(_OWORD *)(v143 + 24) = xmmword_10012A0B0;
        *(unsigned char *)(v143 + 40) = 0;
        sub_10000F394((uint64_t)v29, &qword_10017FDC8);
        uint64_t v145 = (uint64_t)v223;
        v146 = &v223[*(int *)(v243 + 36)];
        v147 = &v146[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier() + 20)];
        uint64_t v148 = type metadata accessor for ButtonStyleConfiguration();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v148 - 8) + 16))(v147, v88, v148);
        *(void *)v146 = 4;
        v146[8] = 2;
        sub_10000F2CC(v142, v145, &qword_10017FDA0);
        if (ButtonStyleConfiguration.isPressed.getter()) {
          uint64_t v149 = sub_10000B404(4, 2);
        }
        else {
          uint64_t v149 = sub_10000B61C(4, 2);
        }
        uint64_t v186 = v149;
        uint64_t v187 = v274;
        uint64_t v188 = (uint64_t)v272;
        uint64_t v189 = swift_getKeyPath();
        uint64_t v190 = v224;
        sub_10000F330(v145, v224, &qword_10017FD78);
        v191 = (uint64_t *)(v190 + *(int *)(v244 + 36));
        uint64_t *v191 = v189;
        v191[1] = v186;
        sub_10000F394(v145, &qword_10017FD78);
        v192 = v241;
        v193 = &v241[*(int *)(v239 + 20)];
        uint64_t v194 = enum case for RoundedCornerStyle.continuous(_:);
        uint64_t v195 = type metadata accessor for RoundedCornerStyle();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v195 - 8) + 104))(v193, v194, v195);
        __asm { FMOV            V0.2D, #12.0 }
        _OWORD *v192 = _Q0;
        uint64_t v197 = (uint64_t)v226;
        uint64_t v198 = (uint64_t)&v226[*(int *)(v187 + 36)];
        sub_10000E91C((uint64_t)v192, v198, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        *(_WORD *)(v198 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
        sub_10000F330(v190, v197, &qword_10017FD80);
        sub_10000E984((uint64_t)v192, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        sub_10000F394(v190, &qword_10017FD80);
        v122 = &qword_10017FD70;
        uint64_t v199 = v197;
        uint64_t v200 = v227;
        sub_10000F2CC(v199, v227, &qword_10017FD70);
        sub_10000F330(v200, v188, &qword_10017FD70);
        swift_storeEnumTagMultiPayload();
        sub_10000DC44();
        sub_10000E87C();
        _ConditionalContent<>.init(storage:)();
        uint64_t v201 = v200;
        return sub_10000F394(v201, v122);
      default:
        uint64_t v264 = v62;
        uint64_t v89 = v276;
        ButtonStyleConfiguration.label.getter();
        uint64_t v90 = static Font.title3.getter();
        uint64_t v91 = swift_getKeyPath();
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v29, v48, v45);
        v92 = (uint64_t *)&v29[*(int *)(v270 + 36)];
        uint64_t *v92 = v91;
        v92[1] = v90;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
        sub_10000E2C0();
        v93 = v233;
        View.bold(_:)();
        sub_10000F394((uint64_t)v29, &qword_10017FDC8);
        char v94 = static Edge.Set.all.getter();
        EdgeInsets.init(_all:)();
        uint64_t v96 = v95;
        uint64_t v98 = v97;
        uint64_t v100 = v99;
        uint64_t v102 = v101;
        uint64_t v103 = v234;
        uint64_t v104 = (uint64_t)v235;
        uint64_t v105 = v236;
        (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v235, v93, v236);
        uint64_t v106 = v104 + *(int *)(v231 + 36);
        *(unsigned char *)uint64_t v106 = v94;
        *(void *)(v106 + 8) = v96;
        *(void *)(v106 + 16) = v98;
        *(void *)(v106 + 24) = v100;
        *(void *)(v106 + 32) = v102;
        *(unsigned char *)(v106 + 40) = 0;
        (*(void (**)(char *, uint64_t))(v103 + 8))(v93, v105);
        uint64_t v107 = static Alignment.center.getter();
        uint64_t v108 = v237;
        sub_1000F9894(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v237, 0.0, 1, 0.0, 1, v107, v109);
        sub_10000F394(v104, (uint64_t *)&unk_100185FD0);
        uint64_t v110 = (uint64_t)v240;
        v111 = &v240[*(int *)(v232 + 36)];
        v112 = &v111[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier() + 20)];
        uint64_t v113 = type metadata accessor for ButtonStyleConfiguration();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v113 - 8) + 16))(v112, v89, v113);
        uint64_t v114 = v277;
        *(void *)v111 = v277;
        v111[8] = 2;
        sub_10000F2CC(v108, v110, &qword_10017FDD8);
        if (ButtonStyleConfiguration.isPressed.getter()) {
          uint64_t v115 = sub_10000B404(v114, 2);
        }
        else {
          uint64_t v115 = sub_10000B61C(v114, 2);
        }
        uint64_t v172 = v115;
        uint64_t v117 = (uint64_t)v272;
        uint64_t v173 = (uint64_t)v230;
        uint64_t v174 = (uint64_t)v229;
        uint64_t v175 = (uint64_t)v228;
        uint64_t v176 = swift_getKeyPath();
        sub_10000F330(v110, v174, &qword_10017FDE0);
        v177 = (uint64_t *)(v174 + *(int *)(v238 + 36));
        uint64_t *v177 = v176;
        v177[1] = v172;
        sub_10000F394(v110, &qword_10017FDE0);
        uint64_t v178 = enum case for RoundedCornerStyle.continuous(_:);
        uint64_t v179 = type metadata accessor for RoundedCornerStyle();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 104))(v173, v178, v179);
        uint64_t v180 = v175 + *(int *)(v248 + 36);
        sub_10000E91C(v173, v180, (uint64_t (*)(void))&type metadata accessor for Capsule);
        *(_WORD *)(v180 + *(int *)(sub_10000AA4C(&qword_10017FED8) + 36)) = 256;
        sub_10000F330(v174, v175, &qword_10017FDE8);
        sub_10000E984(v173, (uint64_t (*)(void))&type metadata accessor for Capsule);
        sub_10000F394(v174, &qword_10017FDE8);
        v122 = &qword_10017FDF0;
        uint64_t v123 = v242;
        sub_10000F2CC(v175, v242, &qword_10017FDF0);
        sub_10000F330(v123, v246, &qword_10017FDF0);
        swift_storeEnumTagMultiPayload();
        sub_10000DCBC();
        sub_10000DFF8();
        uint64_t v124 = (uint64_t)v247;
LABEL_24:
        _ConditionalContent<>.init(storage:)();
        v125 = &qword_10017FE10;
        sub_10000F330(v124, v267, &qword_10017FE10);
        break;
    }
  }
  else
  {
    uint64_t v65 = v276;
    ButtonStyleConfiguration.label.getter();
    uint64_t v66 = static Font.title2.getter();
    uint64_t v67 = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v29, v48, v45);
    v68 = (uint64_t *)&v29[*(int *)(v270 + 36)];
    uint64_t *v68 = v67;
    v68[1] = v66;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
    char v69 = static Edge.Set.all.getter();
    uint64_t v70 = v264;
    sub_10000F330((uint64_t)v29, v264, &qword_10017FDC8);
    uint64_t v71 = v70 + *(int *)(v263 + 36);
    *(unsigned char *)uint64_t v71 = v69;
    __asm { FMOV            V0.2D, #10.0 }
    *(_OWORD *)(v71 + 8) = _Q0;
    *(_OWORD *)(v71 + 24) = xmmword_10012A0C0;
    *(unsigned char *)(v71 + 40) = 0;
    sub_10000F394((uint64_t)v29, &qword_10017FDC8);
    static Alignment.center.getter();
    uint64_t v77 = v277;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v78 = v252;
    sub_10000F330(v70, v252, &qword_10017FDA0);
    v79 = (_OWORD *)(v78 + *(int *)(v250 + 36));
    long long v80 = v279;
    _OWORD *v79 = v278;
    v79[1] = v80;
    v79[2] = v280;
    sub_10000F394(v70, &qword_10017FDA0);
    uint64_t v81 = (uint64_t)v251;
    v82 = &v251[*(int *)(v249 + 36)];
    v83 = &v82[*(int *)(type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier() + 20)];
    uint64_t v84 = type metadata accessor for ButtonStyleConfiguration();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(v83, v65, v84);
    *(void *)v82 = v77;
    char v85 = v257;
    v82[8] = v257;
    sub_10000F2CC(v78, v81, &qword_10017FDA8);
    uint64_t v86 = v81;
    if (ButtonStyleConfiguration.isPressed.getter()) {
      uint64_t v87 = sub_10000B404(v77, v85);
    }
    else {
      uint64_t v87 = sub_10000B61C(v77, v85);
    }
    uint64_t v116 = v87;
    uint64_t v117 = (uint64_t)v272;
    uint64_t v118 = swift_getKeyPath();
    uint64_t v119 = v255;
    sub_10000F330(v86, v255, &qword_10017FDB0);
    v120 = (uint64_t *)(v119 + *(int *)(v254 + 36));
    uint64_t *v120 = v118;
    v120[1] = v116;
    sub_10000F394(v86, &qword_10017FDB0);
    uint64_t v121 = v253;
    sub_10000F330(v119, v253, &qword_10017FDB8);
    *(_WORD *)(v121 + *(int *)(v258 + 36)) = 256;
    sub_10000F394(v119, &qword_10017FDB8);
    v122 = &qword_10017FDC0;
    uint64_t v123 = v256;
    sub_10000F2CC(v121, v256, &qword_10017FDC0);
    sub_10000F330(v123, v260, &qword_10017FDC0);
    swift_storeEnumTagMultiPayload();
    sub_10000E3CC();
    sub_10000E690();
    uint64_t v124 = (uint64_t)v262;
LABEL_9:
    _ConditionalContent<>.init(storage:)();
    v125 = &qword_10017FD98;
    sub_10000F330(v124, v267, &qword_10017FD98);
  }
  swift_storeEnumTagMultiPayload();
  sub_10000DC80();
  sub_10000E390();
  uint64_t v213 = (uint64_t)v268;
  _ConditionalContent<>.init(storage:)();
  sub_10000F394(v124, v125);
  sub_10000F330(v213, v117, &qword_10017FE18);
  swift_storeEnumTagMultiPayload();
  sub_10000DC44();
  sub_10000E87C();
  _ConditionalContent<>.init(storage:)();
  sub_10000F394(v213, &qword_10017FE18);
  uint64_t v201 = v123;
  return sub_10000F394(v201, v122);
}

uint64_t sub_10000D6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v46 = a2;
  uint64_t v47 = sub_10000AA4C(&qword_10017FFE0);
  uint64_t v3 = __chkstk_darwin(v47);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v44 = sub_10000AA4C(&qword_10017FFE8);
  __chkstk_darwin(v44);
  uint64_t v45 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Material();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_10017FFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000AA4C(&qword_10017FFF8);
  uint64_t v15 = __chkstk_darwin(v43);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)v2;
  int v21 = *(unsigned __int8 *)(v2 + 8);
  type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier();
  if ((ButtonStyleConfiguration.isPressed.getter() & 1) == 0
    && (v21 == 1 || v21 == 2 && (unint64_t)(v20 - 3) <= 1))
  {
    static Material.thin.getter();
    char v22 = static Edge.Set.all.getter();
    uint64_t v23 = &v14[*(int *)(v12 + 36)];
    uint64_t v25 = v40;
    uint64_t v24 = v41;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v23, v11, v41);
    v23[*(int *)(sub_10000AA4C(&qword_100180028) + 36)] = v22;
    uint64_t v26 = sub_10000AA4C(&qword_100180000);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v14, v42, v26);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v24);
    char v27 = static Edge.Set.all.getter();
    sub_10000F330((uint64_t)v14, (uint64_t)v17, &qword_10017FFF0);
    uint64_t v28 = &v17[*(int *)(v43 + 36)];
    *(void *)uint64_t v28 = 2;
    v28[8] = v27;
    sub_10000F394((uint64_t)v14, &qword_10017FFF0);
    sub_10000F2CC((uint64_t)v17, (uint64_t)v19, &qword_10017FFF8);
    sub_10000F330((uint64_t)v19, v45, &qword_10017FFF8);
    swift_storeEnumTagMultiPayload();
    sub_10000F100();
    sub_10000F1C0(&qword_100180040, &qword_10017FFE0, (unint64_t *)&unk_1001853E0, &qword_100180048);
    _ConditionalContent<>.init(storage:)();
    uint64_t v29 = (uint64_t)v19;
    uint64_t v30 = &qword_10017FFF8;
  }
  else
  {
    if (ButtonStyleConfiguration.isPressed.getter()) {
      uint64_t v31 = sub_10000B61C(v20, v21);
    }
    else {
      uint64_t v31 = sub_10000B404(v20, v21);
    }
    uint64_t v32 = v31;
    uint64_t v33 = v47;
    uint64_t v34 = v45;
    uint64_t v35 = v42;
    char v36 = static Edge.Set.all.getter();
    uint64_t v37 = sub_10000AA4C(&qword_100180000);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v5, v35, v37);
    uint64_t v38 = &v5[*(int *)(v33 + 36)];
    *(void *)uint64_t v38 = v32;
    v38[8] = v36;
    sub_10000F2CC((uint64_t)v5, (uint64_t)v7, &qword_10017FFE0);
    sub_10000F330((uint64_t)v7, v34, &qword_10017FFE0);
    swift_storeEnumTagMultiPayload();
    sub_10000F100();
    sub_10000F1C0(&qword_100180040, &qword_10017FFE0, (unint64_t *)&unk_1001853E0, &qword_100180048);
    _ConditionalContent<>.init(storage:)();
    uint64_t v29 = (uint64_t)v7;
    uint64_t v30 = &qword_10017FFE0;
  }
  return sub_10000F394(v29, v30);
}

uint64_t sub_10000DBDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000B818(a1, *(void *)v2, *(unsigned __int8 *)(v2 + 8), a2);
}

uint64_t type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier()
{
  uint64_t result = qword_10017FF98;
  if (!qword_10017FF98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000DC44()
{
  return sub_10000F05C(&qword_10017FE48, &qword_10017FE18, (void (*)(void))sub_10000DC80, (void (*)(void))sub_10000E390);
}

uint64_t sub_10000DC80()
{
  return sub_10000F05C(&qword_10017FE50, &qword_10017FE10, (void (*)(void))sub_10000DCBC, (void (*)(void))sub_10000DFF8);
}

unint64_t sub_10000DCBC()
{
  unint64_t result = qword_10017FE58;
  if (!qword_10017FE58)
  {
    sub_10000B100(&qword_10017FE40);
    sub_10000DD5C();
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FE58);
  }
  return result;
}

unint64_t sub_10000DD5C()
{
  unint64_t result = qword_10017FE60;
  if (!qword_10017FE60)
  {
    sub_10000B100(&qword_10017FE38);
    sub_10000DDFC();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FE60);
  }
  return result;
}

unint64_t sub_10000DDFC()
{
  unint64_t result = qword_10017FE68;
  if (!qword_10017FE68)
  {
    sub_10000B100(&qword_10017FE30);
    sub_10000E614(&qword_10017FE70, &qword_10017FE28, (void (*)(void))sub_10000DED4);
    sub_10000DFB0(&qword_10017FE88, (void (*)(uint64_t))type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FE68);
  }
  return result;
}

unint64_t sub_10000DED4()
{
  unint64_t result = qword_10017FE78;
  if (!qword_10017FE78)
  {
    sub_10000B100((uint64_t *)&unk_100185FC0);
    type metadata accessor for ButtonStyleConfiguration.Label();
    sub_10000DFB0(&qword_10017FE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FE78);
  }
  return result;
}

uint64_t sub_10000DFB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000DFF8()
{
  unint64_t result = qword_10017FE98;
  if (!qword_10017FE98)
  {
    sub_10000B100(&qword_10017FDF0);
    sub_10000E098();
    sub_10000F288(&qword_10017FED0, &qword_10017FED8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FE98);
  }
  return result;
}

unint64_t sub_10000E098()
{
  unint64_t result = qword_10017FEA0;
  if (!qword_10017FEA0)
  {
    sub_10000B100(&qword_10017FDE8);
    sub_10000E138();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEA0);
  }
  return result;
}

unint64_t sub_10000E138()
{
  unint64_t result = qword_10017FEA8;
  if (!qword_10017FEA8)
  {
    sub_10000B100(&qword_10017FDE0);
    sub_10000E614(&qword_10017FEB0, &qword_10017FDD8, (void (*)(void))sub_10000E210);
    sub_10000DFB0(&qword_10017FE88, (void (*)(uint64_t))type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEA8);
  }
  return result;
}

unint64_t sub_10000E210()
{
  unint64_t result = qword_10017FEB8;
  if (!qword_10017FEB8)
  {
    sub_10000B100((uint64_t *)&unk_100185FD0);
    sub_10000B100(&qword_10017FDC8);
    sub_10000E2C0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEB8);
  }
  return result;
}

unint64_t sub_10000E2C0()
{
  unint64_t result = qword_10017FEC0;
  if (!qword_10017FEC0)
  {
    sub_10000B100(&qword_10017FDC8);
    sub_10000DFB0(&qword_10017FE80, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_10000F288((unint64_t *)&unk_100185640, &qword_10017FEC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEC0);
  }
  return result;
}

uint64_t sub_10000E390()
{
  return sub_10000F05C(&qword_10017FEE0, &qword_10017FD98, (void (*)(void))sub_10000E3CC, (void (*)(void))sub_10000E690);
}

unint64_t sub_10000E3CC()
{
  unint64_t result = qword_10017FEE8;
  if (!qword_10017FEE8)
  {
    sub_10000B100(&qword_10017FDC0);
    sub_10000E46C();
    sub_10000F288(&qword_10017FF10, &qword_10017FF18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEE8);
  }
  return result;
}

unint64_t sub_10000E46C()
{
  unint64_t result = qword_10017FEF0;
  if (!qword_10017FEF0)
  {
    sub_10000B100(&qword_10017FDB8);
    sub_10000E50C();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEF0);
  }
  return result;
}

unint64_t sub_10000E50C()
{
  unint64_t result = qword_10017FEF8;
  if (!qword_10017FEF8)
  {
    sub_10000B100(&qword_10017FDB0);
    sub_10000E614(&qword_10017FF00, &qword_10017FDA8, (void (*)(void))sub_10000E5E4);
    sub_10000DFB0(&qword_10017FE88, (void (*)(uint64_t))type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FEF8);
  }
  return result;
}

uint64_t sub_10000E5E4()
{
  return sub_10000E614(&qword_10017FF08, &qword_10017FDA0, (void (*)(void))sub_10000E2C0);
}

uint64_t sub_10000E614(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000E690()
{
  unint64_t result = qword_10017FF20;
  if (!qword_10017FF20)
  {
    sub_10000B100(&qword_10017FD88);
    sub_10000E730();
    sub_10000F288(&qword_10017FF10, &qword_10017FF18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FF20);
  }
  return result;
}

unint64_t sub_10000E730()
{
  unint64_t result = qword_10017FF28;
  if (!qword_10017FF28)
  {
    sub_10000B100(&qword_10017FD80);
    sub_10000E7D0();
    sub_10000F288((unint64_t *)&unk_100185CD0, (uint64_t *)&unk_100185110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FF28);
  }
  return result;
}

unint64_t sub_10000E7D0()
{
  unint64_t result = qword_10017FF30;
  if (!qword_10017FF30)
  {
    sub_10000B100(&qword_10017FD78);
    sub_10000E5E4();
    sub_10000DFB0(&qword_10017FE88, (void (*)(uint64_t))type metadata accessor for AirDropUIButtonStyle.BackgroundStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FF30);
  }
  return result;
}

unint64_t sub_10000E87C()
{
  unint64_t result = qword_10017FF38;
  if (!qword_10017FF38)
  {
    sub_10000B100(&qword_10017FD70);
    sub_10000E730();
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FF38);
  }
  return result;
}

uint64_t sub_10000E91C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E984(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10000E9E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10000EAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for ButtonStyleConfiguration();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10000EB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000EBA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_10000EC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000ECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10000ED30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000ED44);
}

uint64_t sub_10000ED44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 2) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10000EDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000EE00);
}

uint64_t sub_10000EE00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10000EEA4()
{
  uint64_t result = type metadata accessor for ButtonStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VisualEffectView.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualEffectView.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10000EFC8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10000EFE4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIButtonStyle.Style()
{
  return &type metadata for AirDropUIButtonStyle.Style;
}

uint64_t sub_10000F00C()
{
  return sub_10000F05C(&qword_10017FFD0, &qword_10017FFD8, (void (*)(void))sub_10000DC44, (void (*)(void))sub_10000E87C);
}

uint64_t sub_10000F05C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F0E4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10000F100()
{
  unint64_t result = qword_100180008;
  if (!qword_100180008)
  {
    sub_10000B100(&qword_10017FFF8);
    sub_10000F1C0(&qword_100180010, &qword_10017FFF0, &qword_100180020, &qword_100180028);
    sub_10000F288(&qword_100180030, &qword_100180038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180008);
  }
  return result;
}

uint64_t sub_10000F1C0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    sub_10000F288(&qword_100180018, &qword_100180000);
    sub_10000F288(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F288(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F2CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AA4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F330(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AA4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F394(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000AA4C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_10000F3F0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4)
    {
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  if (a2 == 1)
  {
    if (a4 == 1)
    {
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  switch(a1)
  {
    case 1:
      if (a4 != 2 || a3 != 1) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 2:
      if (a4 != 2 || a3 != 2) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 3:
      if (a4 != 2 || a3 != 3) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 4:
      if (a4 != 2 || a3 != 4) {
        return 0;
      }
      BOOL result = 1;
      break;
    default:
      if (a4 != 2 || a3) {
        return 0;
      }
      BOOL result = 1;
      break;
  }
  return result;
}

unint64_t sub_10000F504()
{
  unint64_t result = qword_100180050;
  if (!qword_100180050)
  {
    sub_10000B100(&qword_100180058);
    sub_10000F100();
    sub_10000F1C0(&qword_100180040, &qword_10017FFE0, (unint64_t *)&unk_1001853E0, &qword_100180048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180050);
  }
  return result;
}

uint64_t destroy for ActionableShareableContent(uint64_t a1)
{
  sub_10000AB98(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ActionableShareableContent(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_10000F684(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ActionableShareableContent(uint64_t a1, uint64_t a2)
{
  sub_10000AB98(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionableShareableContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionableShareableContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionableShareableContent()
{
  return &type metadata for ActionableShareableContent;
}

uint64_t sub_10000F9B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100180060);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100180060);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D128);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10000FA78()
{
  return swift_getDynamicType();
}

uint64_t sub_10000FA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  sub_10000AA4C(&qword_1001804B0);
  v7[9] = swift_task_alloc();
  return _swift_task_switch(sub_10000FB28, 0, 0);
}

uint64_t sub_10000FB28()
{
  uint64_t v1 = v0[9];
  uint64_t v13 = v0[7];
  uint64_t v2 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32)
                                                                                              + **(int **)(v13 + 32));
  long long v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  *long long v3 = v0;
  v3[1] = sub_10000FC64;
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[3];
  uint64_t v10 = v0[2];
  return v12(v10, v9, v7, v8, v4, v5, v6);
}

uint64_t sub_10000FC64()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  sub_10000F394(v2, &qword_1001804B0);
  if (v0)
  {
    return _swift_task_switch(sub_10000FDD0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_10000FDD0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_10000FE34(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

id sub_10000FEA8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v13 = v12;
    sub_10001FB40(0, &qword_1001800A8);
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        int v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        char v27 = *v25++;
        uint64_t v26 = v27;
        uint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100010194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      unint64_t v30 = (void (**)(uint64_t, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        id v20 = v9;
        int v21 = v32;
        v32((uint64_t)v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        sub_100018D14(&qword_1001800A0, (void (*)(uint64_t))&type metadata accessor for URL);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24((uint64_t)v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_1000103B8(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10000AB54(a1, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 64);
  unint64_t v4 = v3(v1, v2);
  if (v4 >> 62) {
    goto LABEL_36;
  }
  for (uint64_t i = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    if (i < 1)
    {
      if (qword_10017F5E0 == -1)
      {
LABEL_27:
        uint64_t v20 = type metadata accessor for Logger();
        sub_10000B150(v20, (uint64_t)qword_100180060);
        int v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          char v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "no item providers", v23, 2u);
          swift_slowDealloc();
        }

        return 0;
      }
LABEL_42:
      swift_once();
      goto LABEL_27;
    }
    unint64_t v6 = v3(v1, v2);
    uint64_t v1 = v6;
    if (v6 >> 62) {
      break;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      goto LABEL_38;
    }
LABEL_6:
    unint64_t v26 = v1 & 0xC000000000000001;
    if ((v1 & 0xC000000000000001) == 0)
    {
      if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v8 = *(id *)(v1 + 32);
        goto LABEL_9;
      }
      __break(1u);
      goto LABEL_42;
    }
LABEL_40:
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    uint64_t v9 = v8;
    type metadata accessor for SFAirDropUtilities();
    uint64_t v10 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_31:
      swift_bridgeObjectRelease();

LABEL_32:
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v25 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v24 = v1 + 32;
    unint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = v7;
      swift_bridgeObjectRetain();
      uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v14 = [v9 hasItemConformingToTypeIdentifier:v3];

      if ((v14 & 1) == 0) {
        break;
      }
LABEL_12:

      uint64_t result = swift_bridgeObjectRelease();
      if (v12 == v13) {
        goto LABEL_38;
      }
      uint64_t v7 = v13;
      if (v26)
      {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v12 >= *(void *)(v25 + 16))
        {
          __break(1u);
          return result;
        }
        id v16 = *(id *)(v24 + 8 * v12);
      }
      uint64_t v9 = v16;
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v10 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
      uint64_t v11 = *(void *)(v10 + 16);
      if (!v11) {
        goto LABEL_31;
      }
    }
    if (v11 == 1)
    {
LABEL_30:

      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    uint64_t v2 = v10 + 56;
    uint64_t v1 = 1;
    while (1)
    {
      uint64_t v17 = v1 + 1;
      if (__OFADD__(v1, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))[v9 hasItemConformingToTypeIdentifier:v18];

      if (v3) {
        goto LABEL_12;
      }
      ++v1;
      v2 += 16;
      if (v17 == v11) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_36:
    ;
  }
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (v7) {
    goto LABEL_6;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  return 1;
}

void *sub_100010748(unint64_t a1, uint64_t a2)
{
  uint64_t v85 = a2;
  uint64_t v84 = type metadata accessor for SFAirDropSend.ItemPromise();
  uint64_t v87 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  unint64_t v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFAirDropSend.ItemMetadata();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v83 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v64 - v9;
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v89 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_1001804B0);
  __chkstk_darwin(v14 - 8);
  v82 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v81 - 8);
  uint64_t v16 = *(void *)(v86 + 64);
  __chkstk_darwin(v81);
  long long v80 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v17 - 8);
  uint64_t v96 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SFAirDropUtilities();
  static SFAirDropUtilities.suggestedAirDropThumbnailSize()();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v79 = v19;
  uint64_t v94 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
  if (!(a1 >> 62))
  {
    uint64_t v24 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  if (!v24) {
    goto LABEL_30;
  }
LABEL_3:
  uint64_t result = self;
  id v78 = result;
  if (v24 >= 1)
  {
    uint64_t v26 = 0;
    unint64_t v73 = a1 & 0xC000000000000001;
    uint64_t v72 = v86 + 16;
    uint64_t v71 = v16 + 7;
    uint64_t v70 = v86 + 32;
    char v69 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v88 = (void (**)(char *, uint64_t))(v12 + 8);
    v68 = (void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v67 = v87 + 32;
    uint64_t v66 = (void (**)(char *, uint64_t))(v6 + 8);
    unint64_t v65 = a1;
    uint64_t v77 = v4;
    char v27 = &_swiftEmptyArrayStorage;
    uint64_t v76 = v5;
    v75 = v10;
    uint64_t v90 = v11;
    uint64_t v74 = v24;
    do
    {
      v93 = v27;
      uint64_t v95 = v26;
      if (v73) {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v28 = *(id *)(a1 + 8 * v26 + 32);
      }
      id v92 = v28;
      uint64_t v29 = type metadata accessor for TaskPriority();
      uint64_t v91 = *(void *)(v29 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v96, 1, 1, v29);
      uint64_t v30 = v86;
      uint64_t v31 = v80;
      uint64_t v32 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v80, v85, v81);
      unint64_t v33 = (*(unsigned __int8 *)(v30 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      unint64_t v34 = (v71 + v33) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v35 = (char *)swift_allocObject();
      *((void *)v35 + 2) = 0;
      id v36 = v92;
      *((void *)v35 + 3) = 0;
      *((void *)v35 + 4) = v36;
      *((void *)v35 + 5) = v94;
      *((void *)v35 + 6) = v21;
      *((void *)v35 + 7) = v23;
      uint64_t v37 = v31;
      uint64_t v38 = v91;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v35[v33], v37, v32);
      uint64_t v39 = v96;
      *(void *)&v35[v34] = v95;
      LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v29);
      id v40 = v36;
      swift_bridgeObjectRetain();
      if (v33 == 1)
      {
        sub_10000F394(v96, &qword_1001829C0);
      }
      else
      {
        uint64_t v41 = v96;
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v29);
      }
      uint64_t v42 = v90;
      if (*((void *)v35 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v43 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v45 = v44;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v45 = 0;
      }
      type metadata accessor for SFAirDropSend.Item();
      if (v45 | v43)
      {
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        uint64_t v99 = v43;
        uint64_t v100 = v45;
      }
      swift_task_create();
      id v46 = [v40 _sanitizedSuggestedName];
      if (v46)
      {
        uint64_t v47 = v46;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v48 = static SFAirDropUtilities.guessedDataType(for:dataTypesToTry:)();
      swift_bridgeObjectRetain();
      uint64_t v49 = (uint64_t)v82;
      uint64_t v91 = v48;
      UTType.init(_:)();
      int v50 = (*v69)(v49, 1, v42);
      id v92 = v40;
      if (v50 == 1)
      {
        sub_10000F394(v49, &qword_1001804B0);
      }
      else
      {
        id v51 = v89;
        static UTType.directory.getter();
        uint64_t v52 = v49;
        UTType.conforms(to:)();
        uint64_t v53 = *v88;
        (*v88)(v51, v42);
        v53((char *)v52, v42);
      }
      swift_bridgeObjectRetain();
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v55 = [v78 _typeWithIdentifier:v54 allowUndeclared:1];

      if (v55)
      {
        uint64_t v56 = v89;
        static UTType.plainText.getter();
        Class isa = UTType._bridgeToObjectiveC()().super.isa;
        (*v88)(v56, v90);
        [v55 conformsToType:isa];
      }
      uint64_t v58 = v95;
      uint64_t v59 = v75;
      SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)();
      uint64_t v60 = v76;
      (*v68)(v83, v59, v76);
      swift_retain();
      uint64_t v61 = v77;
      SFAirDropSend.ItemPromise.init(task:metadata:)();
      char v27 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v27 = (void *)sub_1000B52D8(0, v27[2] + 1, 1, (unint64_t)v27);
      }
      a1 = v65;
      unint64_t v63 = v27[2];
      unint64_t v62 = v27[3];
      if (v63 >= v62 >> 1) {
        char v27 = (void *)sub_1000B52D8(v62 > 1, v63 + 1, 1, (unint64_t)v27);
      }
      uint64_t v26 = v58 + 1;
      v27[2] = v63 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))((unint64_t)v27+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v63, v61, v84);

      swift_release();
      (*v66)(v59, v60);
    }
    while (v74 != v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v27;
  }
  __break(1u);
  return result;
}

uint64_t sub_100011180(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 176) = a8;
  *(void *)(v9 + 184) = a9;
  *(double *)(v9 + 160) = a2;
  *(double *)(v9 + 168) = a3;
  *(void *)(v9 + 144) = a6;
  *(void *)(v9 + 152) = a7;
  *(void *)(v9 + 136) = a1;
  uint64_t v10 = type metadata accessor for SFAirDropUtilities.FileLoadResult();
  *(void *)(v9 + 192) = v10;
  *(void *)(v9 + 200) = *(void *)(v10 - 8);
  *(void *)(v9 + 208) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFSecurityScopedURL();
  *(void *)(v9 + 216) = v11;
  *(void *)(v9 + 224) = *(void *)(v11 - 8);
  *(void *)(v9 + 232) = swift_task_alloc();
  *(void *)(v9 + 240) = swift_task_alloc();
  *(void *)(v9 + 248) = swift_task_alloc();
  sub_10000AA4C(&qword_100181540);
  *(void *)(v9 + 256) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropSend.ItemMetadata();
  *(void *)(v9 + 264) = v12;
  *(void *)(v9 + 272) = *(void *)(v12 - 8);
  *(void *)(v9 + 280) = swift_task_alloc();
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for URL();
  *(void *)(v9 + 304) = v13;
  *(void *)(v9 + 312) = *(void *)(v13 - 8);
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  *(void *)(v9 + 336) = swift_task_alloc();
  *(void *)(v9 + 344) = swift_task_alloc();
  *(void *)(v9 + 352) = swift_task_alloc();
  return _swift_task_switch(sub_1000113FC, 0, 0);
}

uint64_t sub_1000113FC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = self;
  if ([v2 hasiWorkSendCopyRepresentationForItemProvider:v1])
  {
    uint64_t v3 = v0[43];
    uint64_t v4 = v0[18];
    v0[2] = v0;
    v0[7] = v3;
    v0[3] = sub_100011644;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10001268C;
    v0[13] = &unk_1001695B8;
    v0[14] = v5;
    [v2 loadiWorkCopyRepresentationURLForItemProvider:v4 completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    id v6 = [(id)v0[18] _sanitizedSuggestedName];
    if (v6)
    {
      uint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = 0;
    }
    v0[46] = v9;
    v0[47] = type metadata accessor for SFAirDropUtilities();
    UUID.uuidString.getter();
    v0[48] = v10;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[49] = v11;
    void *v11 = v0;
    v11[1] = sub_100011CC8;
    uint64_t v12 = v0[26];
    v13.n128_u64[0] = v0[20];
    v14.n128_u64[0] = v0[21];
    uint64_t v15 = v0[18];
    uint64_t v16 = v0[19];
    return static SFAirDropUtilities.loadFile(from:dataTypesToTry:customDataType:acceptOtherFileRepresentations:ignoreStrings:generatePreviewImage:renameURLs:suggestedThumbnailSize:filename:sessionID:fileIndex:)(v12, v15, v16, 0, 0, 0, 0, 1, v13, v14);
  }
}

uint64_t sub_100011644()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 360) = v1;
  if (v1) {
    uint64_t v2 = sub_100012100;
  }
  else {
    uint64_t v2 = sub_100011754;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100011754()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[32];
  (*(void (**)(void, void, uint64_t))(v2 + 32))(v0[44], v0[43], v1);
  URL.baseURL.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000F394(v0[32], &qword_100181540);
  }
  else
  {
    uint64_t v4 = v0[38];
    uint64_t v5 = v0[39];
    uint64_t v6 = v0[32];
    URL.lastPathComponent.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  }
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[38];
  uint64_t v10 = v0[39];
  URL.hasDirectoryPath.getter();
  SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v7, v9);
  SFSecurityScopedURL.init(_:readWrite:)();
  uint64_t v11 = v0[38];
  uint64_t v12 = v0[39];
  uint64_t v13 = v0[37];
  uint64_t v14 = v0[36];
  uint64_t v22 = v0[44];
  uint64_t v15 = v0[33];
  uint64_t v16 = v0[34];
  uint64_t v18 = v0[27];
  uint64_t v17 = v0[28];
  uint64_t v21 = v0[31];
  (*(void (**)(void))(v17 + 16))(v0[30]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v13, v15);
  SFAirDropSend.Item.init(url:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v18);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v22, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100011CC8()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000123C0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100011DF0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100011DF0()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[39];
  uint64_t v14 = v0[38];
  uint64_t v17 = v0[40];
  uint64_t v18 = v0[36];
  uint64_t v19 = v0[34];
  uint64_t v20 = v0[35];
  uint64_t v21 = v0[33];
  uint64_t v3 = v0[29];
  uint64_t v24 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[26];
  uint64_t v22 = v0[25];
  uint64_t v23 = v0[24];
  uint64_t v7 = (void *)SFAirDropUtilities.FileLoadResult.previewImage.getter();
  uint64_t v8 = static SFAirDropUtilities.imageData(for:)();
  unint64_t v15 = v9;
  uint64_t v16 = v8;

  SFAirDropUtilities.FileLoadResult.url.getter();
  SFSecurityScopedURL.url.getter();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v24, v5);
  URL.lastPathComponent.getter();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v1, v14);
  SFAirDropUtilities.FileLoadResult.dataType.getter();
  SFAirDropUtilities.FileLoadResult.url.getter();
  SFSecurityScopedURL.url.getter();
  v10(v3, v5);
  URL.hasDirectoryPath.getter();
  v11(v17, v14);
  sub_10001EEC0(v16, v15);
  SFAirDropUtilities.FileLoadResult.wasString.getter();
  SFAirDropSend.ItemMetadata.init(fileName:fileType:fileSubType:fileSize:fileBOMPath:fileIsDirectory:description:previewImageData:wasString:)();
  SFAirDropUtilities.FileLoadResult.url.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v20, v18, v21);
  SFAirDropSend.Item.init(url:metadata:)();
  sub_10001EBC4(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v6, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100012100()
{
  swift_willThrow();
  if (qword_10017F5E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100180060);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[23];
    uint64_t v5 = v2;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    v0[15] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v3, "Failed to load item %ld: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v5;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000123C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10017F5E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100180060);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[23];
    uint64_t v5 = v2;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134218242;
    v0[15] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v3, "Failed to load item %ld: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v5;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10001268C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000AA4C(&qword_100180590);
    uint64_t v10 = swift_allocError();
    void *v11 = a3;
    id v12 = a3;
    return _swift_continuation_throwingResumeWithError(v9, v10);
  }
  else
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(v9 + 64) + 40), v8, v5);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000127EC(void *a1)
{
  return sub_1000103B8(a1) & 1;
}

uint64_t sub_100012808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[5] = a5;
  v6[6] = v5;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a1;
  return _swift_task_switch(sub_100012830, 0, 0);
}

uint64_t sub_100012830()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10000AB54(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
  v0[7] = v4;
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  sub_10000AB54(v1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 80))(v5, v6);
  v0[8] = v7;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100180560 + dword_100180560);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100012964;
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[3];
  uint64_t v11 = v0[4];
  return v13(v4, v10, v11, v9, v7);
}

uint64_t sub_100012964()
{
  uint64_t v2 = (void *)*v1;
  v2[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100012AA8, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)v2[8];
    swift_bridgeObjectRelease();

    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100012AA8()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100012B10@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL sub_100012B18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100012B30()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100012B78()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100012BA4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100012BF8(uint64_t a1, void *a2)
{
  id v15 = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100180520);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType._groupActivity.getter();
  UTType.identifier.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v12 + v11, (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  aBlock[4] = sub_10001E8A8;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000133F4;
  aBlock[3] = &unk_100169518;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  [v15 loadItemForTypeIdentifier:v10 options:0 completionHandler:v13];
  _Block_release(v13);
}

uint64_t sub_100012E70(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_unknownObjectRetain_n();
    sub_10000AA4C(&qword_100180530);
    if (swift_dynamicCast())
    {
      unint64_t v2 = v24;
      sub_10001FB40(0, &qword_100180538);
      sub_10001FB40(0, &qword_100180518);
      uint64_t v3 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10000B150(v13, (uint64_t)qword_10018D128);
      id v14 = v3;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412290;
        if (v3)
        {
          uint64_t v21 = &v24;
          id v17 = v14;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v22 = v3;

        _os_log_impl((void *)&_mh_execute_header, v6, v15, "Unarchiving activity from item provider data: %@", v16, 0xCu);
        sub_10000AA4C(&qword_100180510);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10001E998(v23, v2);
        goto LABEL_26;
      }

      sub_10001E998(v23, v24);
      if (!v3) {
        goto LABEL_29;
      }
    }
    else
    {
      self;
      uint64_t v3 = (void *)swift_dynamicCastObjCClass();
      if (v3) {
        swift_unknownObjectRetain();
      }
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_10000B150(v4, (uint64_t)qword_10018D128);
      id v5 = v3;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 138412290;
        if (v3) {
          id v10 = v5;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v9 = v3;

        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received activity object from item provider: %@", v8, 0xCu);
        sub_10000AA4C(&qword_100180510);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_26:

        if (!v3) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }

      if (!v3) {
        goto LABEL_29;
      }
    }
LABEL_27:
    id v18 = [v3 sanitizedCopy:v21];
    if (v18)
    {
      id v19 = v18;
      sub_10000AA4C(&qword_100180520);
      CheckedContinuation.resume(returning:)();

      return swift_unknownObjectRelease();
    }
LABEL_29:
    sub_10001E944();
    swift_allocError();
    *uint64_t v20 = 0;
    sub_10000AA4C(&qword_100180520);
    CheckedContinuation.resume(throwing:)();

    return swift_unknownObjectRelease();
  }
  if (!a2)
  {
    sub_10001E944();
    swift_allocError();
    unsigned char *v11 = 1;
  }
  swift_errorRetain();
  sub_10000AA4C(&qword_100180520);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1000133F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100013474(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_10000AB54(a1, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 56))(v17, v2, v3);
  uint64_t v4 = v18;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  sub_10001E7C4((uint64_t)v17);
  if (*(void *)(v4 + 16)
    && (Hasher.init(_seed:)(),
        String.hash(into:)(),
        Swift::Int v5 = Hasher._finalize()(),
        uint64_t v6 = -1 << *(unsigned char *)(v4 + 32),
        unint64_t v7 = v5 & ~v6,
        ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0))
  {
    uint64_t v8 = ~v6;
    while ((*(unsigned char *)(*(void *)(v4 + 48) + v7) & 1) != 0)
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_9;
      }
      unint64_t v7 = (v7 + 1) & v8;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
LABEL_9:
    sub_10001E9F0((uint64_t)&v19);
    sub_10000AAF0((uint64_t)a1, (uint64_t)v14);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    sub_10000AB54(v14, v15);
    char v10 = sub_100013648(v11, v12) ^ 1;
  }
  else
  {
LABEL_7:
    sub_10001E9F0((uint64_t)&v19);
    sub_10000AAF0((uint64_t)a1, (uint64_t)v14);
    char v10 = 0;
  }
  sub_10000AB98((uint64_t)v14);
  return v10 & 1;
}

uint64_t sub_100013648(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v10 = sub_100013D34(v6, v9, &qword_10017F5E8, (uint64_t)qword_10018CE20);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v10) {
    unsigned __int8 v11 = 1;
  }
  else {
    unsigned __int8 v11 = sub_100013D34(a1, a2, &qword_10017F5F0, (uint64_t)qword_10018CE38);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v11 & 1;
}

uint64_t sub_100013790(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = [v5 registeredTypeIdentifiers];
      uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v10 = *(void *)(v9 + 16);
      int64_t v11 = *((void *)v3 + 2);
      int64_t v12 = v11 + v10;
      if (__OFADD__(v11, v10)) {
        goto LABEL_29;
      }
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v12 <= *((void *)v3 + 3) >> 1)
      {
        if (*(void *)(v9 + 16)) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v11 <= v12) {
          int64_t v14 = v11 + v10;
        }
        else {
          int64_t v14 = v11;
        }
        uint64_t v3 = sub_1000B56B0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
        if (*(void *)(v9 + 16))
        {
LABEL_19:
          uint64_t v15 = *((void *)v3 + 2);
          if ((*((void *)v3 + 3) >> 1) - v15 < v10) {
            goto LABEL_31;
          }
          unint64_t v16 = (unint64_t)&v3[16 * v15 + 32];
          if (v9 + 32 < v16 + 16 * v10 && v16 < v9 + 32 + 16 * v10)
          {
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v10)
          {
            uint64_t v18 = *((void *)v3 + 2);
            BOOL v19 = __OFADD__(v18, v10);
            uint64_t v20 = v18 + v10;
            if (v19) {
              goto LABEL_32;
            }
            *((void *)v3 + 2) = v20;
          }
          goto LABEL_5;
        }
      }
      if (v10) {
        goto LABEL_30;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      ++v4;
      if (v7 == v2) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = (char *)&_swiftEmptyArrayStorage;
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

uint64_t sub_1000139D0(void *a1)
{
  return sub_100013474(a1) & 1;
}

uint64_t sub_1000139EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001804D8 + dword_1001804D8);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *id v8 = v4;
  v8[1] = sub_100013ABC;
  return v10(a1, a3, a4);
}

uint64_t sub_100013ABC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  Swift::UInt v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100013BB0(uint64_t a1)
{
  return sub_100013BF8(a1, qword_10018CE20);
}

uint64_t sub_100013BD4(uint64_t a1)
{
  return sub_100013BF8(a1, qword_10018CE38);
}

uint64_t sub_100013BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000AA4C(&qword_1001804B0);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UTType();
  sub_10001EA1C(v6, a2);
  sub_10000B150(v6, (uint64_t)a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  return UTType.init(exportedAs:conformingTo:)();
}

id sub_100013CEC(uint64_t a1, uint64_t a2)
{
  return sub_100013D34(a1, a2, &qword_10017F5E8, (uint64_t)qword_10018CE20);
}

id sub_100013D10(uint64_t a1, uint64_t a2)
{
  return sub_100013D34(a1, a2, &qword_10017F5F0, (uint64_t)qword_10018CE38);
}

id sub_100013D34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = (*(uint64_t (**)(void))(a2 + 64))();
  unint64_t v7 = v6;
  if (v6 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    while (1)
    {
      id v10 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (*a3 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for UTType();
      sub_10000B150(v13, a4);
      UTType.identifier.getter();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v15 = [v11 hasRepresentationConformingToTypeIdentifier:v14 fileOptions:0];

      if ((v15 & 1) == 0)
      {
        ++v9;
        if (v12 != v8) {
          continue;
        }
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
  id v15 = 0;
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v15;
}

uint64_t sub_100013EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[27] = *(void *)(a2 - 8);
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_100013F90, 0, 0);
}

uint64_t sub_100013F90()
{
  uint64_t v38 = v0;
  id v36 = v0;
  if (sub_100013D34(v0[24], v0[25], &qword_10017F5E8, (uint64_t)qword_10018CE20))
  {
    if (qword_10017F5E8 != -1) {
      swift_once();
    }
    Swift::UInt v1 = qword_10018CE20;
  }
  else
  {
    if ((sub_100013D34(v0[24], v0[25], &qword_10017F5F0, (uint64_t)qword_10018CE38) & 1) == 0) {
      goto LABEL_19;
    }
    if (qword_10017F5F0 != -1) {
      swift_once();
    }
    Swift::UInt v1 = qword_10018CE38;
  }
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[24];
  uint64_t v4 = type metadata accessor for UTType();
  sub_10000B150(v4, (uint64_t)v1);
  uint64_t v5 = UTType.identifier.getter();
  v0[29] = v6;
  v0[30] = v5;
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  unint64_t v8 = v7;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9)
    {
LABEL_11:
      uint64_t v10 = 0;
      while (1)
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v8 + 8 * v10 + 32);
        }
        uint64_t v12 = v11;
        v0[31] = v11;
        uint64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        NSString v14 = String._bridgeToObjectiveC()();
        unsigned __int8 v15 = [v12 hasRepresentationConformingToTypeIdentifier:v14 fileOptions:0];

        if (v15) {
          break;
        }

        ++v10;
        uint64_t v0 = v36;
        if (v13 == v9) {
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      NSString v34 = String._bridgeToObjectiveC()();
      v36[32] = v34;
      v36[2] = v36;
      v36[7] = v36 + 17;
      v36[3] = sub_100014574;
      uint64_t v35 = swift_continuation_init();
      v36[10] = _NSConcreteStackBlock;
      v36[11] = 0x40000000;
      v36[12] = sub_100014BEC;
      v36[13] = &unk_1001695D0;
      v36[14] = v35;
      [v12 loadItemForTypeIdentifier:v34 options:0 completionHandler:v36 + 10];
      return _swift_continuation_await(v36 + 2);
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_11;
    }
  }
LABEL_18:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_19:
  if (qword_10017F7A8 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v17 = v0[27];
  uint64_t v16 = v0[28];
  uint64_t v18 = v0[26];
  uint64_t v19 = v0[24];
  uint64_t v20 = type metadata accessor for Logger();
  sub_10000B150(v20, (uint64_t)qword_10018D128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v25 = v0[27];
  uint64_t v24 = v0[28];
  uint64_t v26 = v0[24];
  if (v23)
  {
    char v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)char v27 = 136315138;
    uint64_t v28 = sub_1000292CC(v24);
    v36[19] = sub_100047F98(v28, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v0 = v36;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not find a nearby SharePlay URL on content: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v25 + 8))(v0[28], v0[24]);
  }

  uint64_t v30 = v0[23];
  uint64_t v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_100014574()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 264) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100014B34;
  }
  else
  {
    uint64_t v2 = sub_1000146B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000146B8()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 136);

  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = (id)v2;
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
LABEL_3:
    uint64_t v4 = *(void **)(v0 + 248);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    swift_unknownObjectRelease();

    uint64_t v5 = 0;
    goto LABEL_4;
  }
  *(void *)(v0 + 144) = v1;
  swift_unknownObjectRetain();
  sub_10000AA4C(&qword_100180530);
  if (swift_dynamicCast())
  {
    uint64_t v11 = *(void *)(v0 + 120);
    unint64_t v10 = *(void *)(v0 + 128);
    uint64_t v12 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 176) = 0;
    id v3 = [v12 objectWithItemProviderData:isa typeIdentifier:v14 error:v0 + 176];

    id v15 = *(id *)(v0 + 176);
    if (v3)
    {
      sub_10001E998(v11, v10);
      goto LABEL_3;
    }
    uint64_t v24 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_10001FB40(0, &qword_100180538);
    sub_10001FB40(0, &qword_1001805E0);
    id v3 = (id)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    sub_10001E998(v11, v10);
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000B150(v16, (uint64_t)qword_10018D128);
  swift_unknownObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void **)(v0 + 248);
  if (v19)
  {
    uint64_t v25 = *(void **)(v0 + 248);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    *(void *)(v0 + 160) = v1;
    swift_unknownObjectRetain();
    uint64_t v22 = String.init<A>(reflecting:)();
    *(void *)(v0 + 168) = sub_100047F98(v22, v23, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to coerce nearby SharePlay item to an NSURL: %s", v21, 0xCu);
    uint64_t v5 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease_n();

    uint64_t v5 = 1;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, v5, 1, v7);
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100014B34()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = (void *)v0[31];
  swift_willThrow();

  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100014BEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000AA4C(&qword_100180590);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  swift_unknownObjectRetain();

  return swift_continuation_throwingResume();
}

uint64_t sub_100014CB0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10000AB54(a1, v1);
  return sub_100013648(v1, v2) & 1;
}

uint64_t sub_100014CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100180540 + dword_100180540);
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *unint64_t v10 = v5;
  v10[1] = sub_10001FD90;
  return v12(a1, a3, a4, a5);
}

id sub_100014DC0(uint64_t a1)
{
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v2 = (void *)static NSUserDefaults.airdrop.getter();
  char v3 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if ((v3 & 1) == 0) {
    return 0;
  }
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v5 = result;
    NSString v6 = String._bridgeToObjectiveC()();
    unsigned int v7 = [v5 applicationIsInstalled:v6];

    if (v7)
    {
      sub_10000AAF0(a1, (uint64_t)v11);
      sub_10000AA4C(&qword_1001804C8);
      sub_10001FB40(0, &qword_100180600);
      if (swift_dynamicCast())
      {
        id v8 = [v10 content];
        id v9 = [v8 hasPossibleCollaborationRepresentation];

        return v9;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100014F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_100014FF0, 0, 0);
}

uint64_t sub_100014FF0()
{
  uint64_t v25 = v0;
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v1 = (void *)static NSUserDefaults.airdrop.getter();
  char v2 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if (v2)
  {
    uint64_t v3 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
    v0[19] = v3;
    v0[20] = v4;
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      v0[21] = type metadata accessor for StartCollaborationAction(0);
      unsigned int v7 = (void *)swift_task_alloc();
      v0[22] = v7;
      *unsigned int v7 = v0;
      v7[1] = sub_100015334;
      return sub_10007BD6C(v5, v6);
    }
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[17];
    uint64_t v9 = v0[18];
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[14];
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_10018D128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    NSString v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v18 = v0[17];
    uint64_t v17 = v0[18];
    uint64_t v19 = v0[16];
    if (v16)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_100047F98(v21, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cannot start Collaboration on nearby sharing interaction with ID as it's an unknown contact: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v18 + 8))(v0[18], v0[16]);
    }
  }
  swift_task_dealloc();
  unint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100015334(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100015434, 0, 0);
}

uint64_t sub_100015434()
{
  uint64_t v25 = v0;
  unint64_t v1 = v0[24];
  if (v1)
  {
    uint64_t v2 = (uint64_t)(v0 + 2);
    swift_bridgeObjectRelease();
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B150(v3, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = v0[23];
      unsigned int v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unsigned int v7 = 136315138;
      swift_bridgeObjectRetain();
      v0[10] = sub_100047F98(v6, v1, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "starting Collaboration with iMessage-able handle: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = (uint64_t)(v0 + 2);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10000AAF0(v0[11], v2);
    sub_10000AA4C(&qword_1001804C8);
    sub_10001FB40(0, &qword_100180600);
    if (swift_dynamicCast())
    {
      uint64_t v15 = v0[23];
      uint64_t v16 = v0[12];
      uint64_t v17 = (void *)v0[9];
      uint64_t v18 = *(void **)(v0[15] + *(int *)(v0[21] + 24));
      id v19 = [v17 content];
      sub_10000AA4C((uint64_t *)&unk_1001800B0);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10012A270;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v1;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v18 initiateBackgroundCollaborationForContent:v19 shareOptions:v16 recipients:isa faceTimeConversationUUID:0];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B150(v8, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    unint64_t v12 = v0[20];
    if (v11)
    {
      uint64_t v13 = v0[19];
      NSString v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)NSString v14 = 136315138;
      swift_bridgeObjectRetain();
      v0[8] = sub_100047F98(v13, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cannot start Collaboration on nearby sharing interaction with ID as the contact with identifier does not contain a iMessage-able handle: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  swift_task_dealloc();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

unint64_t sub_1000158C4(uint64_t a1)
{
  return (unint64_t)sub_100014DC0(a1) & 1;
}

uint64_t sub_1000158E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10001FD90;
  return sub_100014F28(a1, a2, a3, a4);
}

uint64_t sub_10001599C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100015A04(uint64_t a1)
{
  sub_10000AAF0(a1, (uint64_t)v6);
  sub_10000AA4C(&qword_1001804C8);
  uint64_t v1 = swift_dynamicCast();
  if (v1)
  {
  }
  return v1;
}

uint64_t sub_100015A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001805E8 + dword_1001805E8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_10001FD90;
  return v10(a1, a3, a4);
}

uint64_t sub_100015B50()
{
  uint64_t v1 = type metadata accessor for SFProximityHandoff.Content.Action();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ProximityHandoffContentAction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(int *)(v5 + 20), v1);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v6 == enum case for SFProximityHandoff.Content.Action.open(_:)
    || v6 == enum case for SFProximityHandoff.Content.Action.send(_:)
    || v6 == enum case for SFProximityHandoff.Content.Action.share(_:)
    || v6 == enum case for SFProximityHandoff.Content.Action.transfer(_:))
  {
    return LocalizedStringResource.init(stringLiteral:)();
  }
  LocalizedStringResource.init(stringLiteral:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100015D18(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFProximityHandoff.Content.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_1001804C0);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ProximityHandoffInteractionContent(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AAF0(a1, (uint64_t)v35);
  sub_10000AA4C(&qword_1001804C8);
  int v15 = swift_dynamicCast();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v15)
  {
    v16(v10, 1, 1, v11);
    sub_10000F394((uint64_t)v10, &qword_1001804C0);
    return 0;
  }
  v16(v10, 0, 1, v11);
  sub_10001E6AC((uint64_t)v10, (uint64_t)v14);
  uint64_t v17 = SFProximityHandoff.Content.supportedActions.getter();
  uint64_t v34 = *(void *)(v17 + 16);
  if (!v34) {
    goto LABEL_7;
  }
  uint64_t v18 = v2 + *(int *)(type metadata accessor for ProximityHandoffContentAction(0) + 20);
  unint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  v33(v7, v17 + v19, v4);
  uint64_t v31 = sub_100018D14(&qword_1001804D0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoff.Content.Action);
  uint64_t v32 = v18;
  LOBYTE(v18) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v7, v4);
  if (v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = 1;
LABEL_8:
    sub_10001E710((uint64_t)v14);
    return v21;
  }
  if (v34 == 1)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v21 = 0;
    goto LABEL_8;
  }
  v29[1] = v17;
  uint64_t v30 = v14;
  unint64_t v23 = v19;
  uint64_t v24 = *(void *)(v5 + 72);
  uint64_t v25 = v17 + v24 + v23;
  uint64_t v26 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v7, v25, v4);
    uint64_t v27 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20(v7, v4);
    if (v28)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = 1;
      NSString v14 = v30;
      goto LABEL_8;
    }
    ++v26;
    v25 += v24;
    if (v27 == v34)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = 0;
      NSString v14 = v30;
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000160E4(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1001804B8 + dword_1001804B8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001FD90;
  return v5(a1);
}

uint64_t sub_1000161B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000162D4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000161D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016434(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000161F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016584(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100016214(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000167CC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100016234(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016938(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100016254(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016AC4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100016274(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016C68(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100016294(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016DD8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000162B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100016F54(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000162D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_100180078);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    os_log_type_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  NSString v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016434(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_100180080);
    os_log_type_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    os_log_type_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016584(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000AA4C(&qword_100180610);
  uint64_t v10 = *(void *)(sub_10000AA4C(&qword_100181480) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000AA4C(&qword_100181480) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000167CC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C((uint64_t *)&unk_1001800B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016938(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_1001800C8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000AA4C(&qword_1001800D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016AC4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_100180090);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_10000AA4C(&qword_100180098);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016C68(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_1001800C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016DD8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_100183CF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100016F54(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000AA4C(&qword_100180088);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_100017194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = &_swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v21 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000161B4(0, v4, 0);
    uint64_t v6 = v3 + 32;
    uint64_t v5 = &_swiftEmptyArrayStorage;
    do
    {
      sub_10000AAF0(v6, (uint64_t)v19);
      sub_10000AB54(v19, v20);
      DynamicCFStringRef Type = swift_getDynamicType();
      sub_10000AB98((uint64_t)v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000161B4(0, v5[2] + 1, 1);
        uint64_t v5 = v21;
      }
      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000161B4(v8 > 1, v9 + 1, 1);
        uint64_t v5 = v21;
      }
      v5[2] = v9 + 1;
      v5[v9 + 4] = DynamicType;
      v6 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void *)(a2 + 40);
  int64_t v11 = *(void *)(v10 + 16);
  unint64_t v12 = &_swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v21 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000161B4(0, v11, 0);
    uint64_t v13 = v10 + 32;
    unint64_t v12 = v21;
    do
    {
      sub_10000AAF0(v13, (uint64_t)v19);
      sub_10000AB54(v19, v20);
      uint64_t v14 = swift_getDynamicType();
      sub_10000AB98((uint64_t)v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000161B4(0, v12[2] + 1, 1);
        unint64_t v12 = v21;
      }
      unint64_t v16 = v12[2];
      unint64_t v15 = v12[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000161B4(v15 > 1, v16 + 1, 1);
        unint64_t v12 = v21;
      }
      v12[2] = v16 + 1;
      v12[v16 + 4] = v14;
      v13 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  BOOL v17 = sub_10000FE34(v5, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1000173F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017408);
}

uint64_t sub_10001740C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017420);
}

uint64_t type metadata accessor for StartCollaborationAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100180130);
}

uint64_t *sub_100017448(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    unint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    swift_retain();
    id v10 = v9;
  }
  return a1;
}

void sub_100017524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_1000175A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain();
  id v9 = v8;
  return a1;
}

uint64_t sub_100017630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1000176D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100017758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000177F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017804);
}

uint64_t sub_100017808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001781C);
}

uint64_t type metadata accessor for AddToActiveSharePlaySessionAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_1001801C8);
}

uint64_t sub_100017840()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000178E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    uint64_t v8 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    id v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), v11, v7);
    uint64_t v12 = type metadata accessor for SendOverAirDropAction(0);
    *(void *)&v10[*(int *)(v12 + 20)] = *(void *)&v11[*(int *)(v12 + 20)];
  }
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for SendOverAirDropAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100180380);
}

uint64_t sub_100017A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  type metadata accessor for SendOverAirDropAction(0);

  return swift_release();
}

uint64_t sub_100017AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  uint64_t v11 = type metadata accessor for SendOverAirDropAction(0);
  *(void *)(v9 + *(int *)(v11 + 20)) = *(void *)(v10 + *(int *)(v11 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_100017B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  uint64_t v11 = type metadata accessor for SendOverAirDropAction(0);
  *(void *)(v9 + *(int *)(v11 + 20)) = *(void *)(v10 + *(int *)(v11 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100017C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  uint64_t v11 = type metadata accessor for SendOverAirDropAction(0);
  *(void *)(v9 + *(int *)(v11 + 20)) = *(void *)(v10 + *(int *)(v11 + 20));
  return a1;
}

uint64_t sub_100017CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  uint64_t v11 = type metadata accessor for SendOverAirDropAction(0);
  *(void *)(v9 + *(int *)(v11 + 20)) = *(void *)(v10 + *(int *)(v11 + 20));
  swift_release();
  return a1;
}

uint64_t sub_100017DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017DB8);
}

uint64_t sub_100017DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for SendOverAirDropAction(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100017EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017EC4);
}

uint64_t sub_100017EC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SendOverAirDropAction(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for StartNearbySharePlayAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100180260);
}

uint64_t sub_100017FE8()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SendOverAirDropAction(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000180C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000180DC);
}

uint64_t sub_1000180E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000180F4);
}

uint64_t type metadata accessor for StartSharePlayAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_1001802F0);
}

uint64_t *sub_10001811C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000181E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_10001825C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_1000182DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100018368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000183E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_100018468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001847C);
}

uint64_t sub_100018480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100018540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018554);
}

uint64_t sub_100018558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100018614()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000186AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SFProximityHandoff.Content.Action();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100018790(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SFProximityHandoff.Content.Action();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100018808(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFProximityHandoff.Content.Action();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_1000188A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SFProximityHandoff.Content.Action();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100018934(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFProximityHandoff.Content.Action();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1000189B0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SFProximityHandoff.Content.Action();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100018A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018A50);
}

uint64_t sub_100018A50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SFProximityHandoff.Content.Action();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100018B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018B14);
}

void *sub_100018B14(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFProximityHandoff.Content.Action();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ProximityHandoffContentAction(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100180410);
}

uint64_t sub_100018BDC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100018C14()
{
  uint64_t result = type metadata accessor for SFProximityHandoff.Content.Action();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100018CB0()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_100018CBC(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_100180450, (void (*)(uint64_t))type metadata accessor for StartCollaborationAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018D14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100018D5C(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_100180460, (void (*)(uint64_t))type metadata accessor for SendOverAirDropAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018DB4(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_100180470, (void (*)(uint64_t))type metadata accessor for AddToActiveSharePlaySessionAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018E0C(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_100180480, (void (*)(uint64_t))type metadata accessor for StartNearbySharePlayAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018E64(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_100180490, (void (*)(uint64_t))type metadata accessor for StartSharePlayAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018EBC(uint64_t a1)
{
  uint64_t result = sub_100018D14(&qword_1001804A0, (void (*)(uint64_t))type metadata accessor for ProximityHandoffContentAction);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100018F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[20] = a5;
  v6[21] = v5;
  v6[18] = a2;
  v6[19] = a3;
  v6[17] = a1;
  uint64_t v7 = type metadata accessor for SFAirDropSend.Failure();
  v6[22] = v7;
  v6[23] = *(void *)(v7 - 8);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropSend.Transfer.State();
  v6[26] = v8;
  v6[27] = *(void *)(v8 - 8);
  v6[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropSend.Transfer();
  v6[29] = v9;
  v6[30] = *(void *)(v9 - 8);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  sub_10000AA4C(&qword_100180568);
  v6[33] = swift_task_alloc();
  uint64_t v10 = sub_10000AA4C(&qword_100180570);
  v6[34] = v10;
  v6[35] = *(void *)(v10 - 8);
  v6[36] = swift_task_alloc();
  uint64_t v11 = sub_10000AA4C(&qword_100180578);
  v6[37] = v11;
  v6[38] = *(void *)(v11 - 8);
  v6[39] = swift_task_alloc();
  sub_10000AA4C(&qword_100180580);
  unsigned char v6[40] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropSend.ItemMetadata();
  v6[41] = v12;
  v6[42] = *(void *)(v12 - 8);
  v6[43] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFSecurityScopedURL();
  v6[44] = v13;
  v6[45] = *(void *)(v13 - 8);
  v6[46] = swift_task_alloc();
  sub_10000AA4C(&qword_100181540);
  v6[47] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for URL();
  v6[48] = v14;
  v6[49] = *(void *)(v14 - 8);
  v6[50] = swift_task_alloc();
  v6[51] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDropSend.Item();
  v6[52] = v15;
  v6[53] = *(void *)(v15 - 8);
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  v6[56] = v16;
  v6[57] = *(void *)(v16 - 8);
  v6[58] = swift_task_alloc();
  v6[59] = swift_task_alloc();
  v6[60] = swift_task_alloc();
  v6[61] = swift_task_alloc();
  v6[62] = swift_task_alloc();
  v6[63] = swift_task_alloc();
  return _swift_task_switch(sub_100019430, 0, 0);
}

uint64_t sub_100019430()
{
  uint64_t v21 = v0;
  if (qword_10017F5E0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  v0[64] = sub_10000B150(v5, (uint64_t)qword_100180060);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[65] = v6;
  v0[66] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[63];
  uint64_t v11 = v0[56];
  uint64_t v12 = v0[57];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_100047F98(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "performing AirDrop action for interactionID:%s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[63], v0[56]);
  }

  v0[67] = v16;
  BOOL v17 = sub_100010748(v0[17], v0[19]);
  v0[68] = v17;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[69] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1000196FC;
  return static SFAirDropSend.loadItemPromises(_:customPayload:)(v17, 0, 0xF000000000000000);
}

uint64_t sub_1000196FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 560) = a1;
  *(void *)(v3 + 568) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10001B4D0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10001981C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001981C()
{
  v111 = v0;
  uint64_t v1 = v0[70];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[53];
    uint64_t v4 = v0[49];
    type = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
    uint64_t v5 = (char *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v98 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
    uint64_t v99 = (void (**)(uint64_t, uint64_t))(v0[45] + 8);
    uint64_t v102 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    os_log_t v103 = *(os_log_t *)(v3 + 72);
    uint64_t v97 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v93 = v4;
    uint64_t v100 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    swift_bridgeObjectRetain();
    uint64_t v6 = &_swiftEmptyArrayStorage;
    uint64_t v94 = v2;
    uint64_t v95 = v5;
    do
    {
      unint64_t v106 = (unint64_t)v6;
      uint64_t v7 = v0[55];
      uint64_t v8 = v0[52];
      uint64_t v10 = v0[47];
      uint64_t v9 = v0[48];
      uint64_t v11 = v0[46];
      uint64_t v12 = v0[44];
      type(v7, v5, v8);
      SFAirDropSend.Item.url.getter();
      SFSecurityScopedURL.url.getter();
      (*v99)(v11, v12);
      (*v98)(v10, 0, 1, v9);
      uint64_t v13 = *v102;
      (*v102)(v7, v8);
      if ((*v97)(v10, 1, v9) == 1)
      {
        sub_10000F394(v0[47], &qword_100181540);
        uint64_t v6 = (void *)v106;
      }
      else
      {
        uint64_t v14 = v0[50];
        uint64_t v15 = v0[51];
        uint64_t v16 = v0[48];
        BOOL v17 = *v100;
        (*v100)(v15, v0[47], v16);
        v17(v14, v15, v16);
        uint64_t v6 = (void *)v106;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = (void *)sub_1000B540C(0, *(void *)(v106 + 16) + 1, 1, v106);
        }
        unint64_t v19 = v6[2];
        unint64_t v18 = v6[3];
        if (v19 >= v18 >> 1) {
          uint64_t v6 = (void *)sub_1000B540C(v18 > 1, v19 + 1, 1, (unint64_t)v6);
        }
        uint64_t v20 = v0[50];
        uint64_t v21 = v0[48];
        v6[2] = v19 + 1;
        v17((uint64_t)v6+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(void *)(v93 + 72) * v19, v20, v21);
      }
      uint64_t v5 = (char *)v103 + (void)v5;
      --v2;
    }
    while (v2);
    uint64_t v22 = v0[20];
    swift_bridgeObjectRelease();
    v0[12] = &_swiftEmptyArrayStorage;
    if (v22)
    {
      unint64_t v23 = (void *)v0[20];
LABEL_14:
      id v24 = v23;
      swift_bridgeObjectRelease();
      sub_10000AA4C((uint64_t *)&unk_1001805C0);
      uint64_t v25 = (char *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_10012A270;
      type metadata accessor for SFAirDropUtilities();
      id v26 = v24;
      uint64_t v27 = static SFAirDropUtilities.imageData(for:)();
      uint64_t v29 = v28;

      *((void *)v25 + 4) = v27;
      *((void *)v25 + 5) = v29;

      goto LABEL_24;
    }
    uint64_t v107 = v13;
    uint64_t v101 = (void (**)(uint64_t, uint64_t))(v0[42] + 8);
    swift_bridgeObjectRetain();
    uint64_t v25 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v30 = v95;
    do
    {
      uint64_t v31 = v0[54];
      uint64_t v32 = v0[52];
      uint64_t v33 = v0[43];
      uint64_t v34 = v0[41];
      uint64_t v96 = v30;
      ((void (*)(uint64_t))type)(v31);
      SFAirDropSend.Item.metadata.getter();
      uint64_t v35 = SFAirDropSend.ItemMetadata.previewImageData.getter();
      uint64_t v37 = v36;
      (*v101)(v33, v34);
      v107(v31, v32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = sub_1000B52FC(0, *((void *)v25 + 2) + 1, 1, v25);
      }
      unint64_t v39 = *((void *)v25 + 2);
      unint64_t v38 = *((void *)v25 + 3);
      if (v39 >= v38 >> 1) {
        uint64_t v25 = sub_1000B52FC((char *)(v38 > 1), v39 + 1, 1, v25);
      }
      *((void *)v25 + 2) = v39 + 1;
      id v40 = &v25[16 * v39];
      *((void *)v40 + 4) = v35;
      *((void *)v40 + 5) = v37;
      uint64_t v30 = (char *)v103 + (void)v96;
      --v94;
    }
    while (v94);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v6 = &_swiftEmptyArrayStorage;
    unint64_t v23 = (void *)v0[20];
    v0[12] = &_swiftEmptyArrayStorage;
    if (v23) {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
LABEL_24:
  v0[72] = v6;
  uint64_t v41 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
  uint64_t v42 = v0[62];
  uint64_t v43 = v0[56];
  uint64_t v44 = v0[19];
  v0[12] = v25;
  v41(v42, v44, v43);
  swift_bridgeObjectRetain_n();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v48 = (void (*)(uint64_t, uint64_t))v0[67];
  uint64_t v49 = v0[62];
  uint64_t v50 = v0[56];
  if (v47)
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136315394;
    os_log_type_t typea = v46;
    sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[14] = sub_100047F98(v52, v53, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v48(v49, v50);
    *(_WORD *)(v51 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v54 = Array.description.getter();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    v0[15] = sub_100047F98(v54, v56, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v45, typea, "%s: loaded items = %s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v48(v0[62], v0[56]);
    swift_bridgeObjectRelease_n();
  }
  ((void (*)(void, void, void))v0[65])(v0[61], v0[19], v0[56]);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v60 = (void (*)(uint64_t, uint64_t))v0[67];
  uint64_t v61 = v0[61];
  uint64_t v62 = v0[56];
  if (v59)
  {
    os_log_type_t v108 = v58;
    uint64_t v63 = swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136315394;
    sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_100047F98(v64, v65, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v60(v61, v62);
    *(_WORD *)(v63 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10000AA4C(&qword_1001805B8);
    uint64_t v66 = Array.description.getter();
    unint64_t v68 = v67;
    swift_bridgeObjectRelease();
    v0[13] = sub_100047F98(v66, v68, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v108, "%s: item preview data = %s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v60(v0[61], v0[56]);
  }

  uint64_t v69 = v0[56];
  uint64_t v70 = v0[57];
  uint64_t v71 = v0[40];
  SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v71, 1, v69) == 1)
  {
    uint64_t v72 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
    uint64_t v73 = v0[58];
    uint64_t v74 = v0[56];
    uint64_t v75 = v0[40];
    uint64_t v76 = v0[19];
    swift_bridgeObjectRelease();
    sub_10000F394(v75, &qword_100180580);
    v72(v73, v76, v74);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    uint64_t v80 = v0[58];
    uint64_t v81 = v0[56];
    if (v79)
    {
      uint64_t v109 = (void (*)(uint64_t, uint64_t))v0[67];
      v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v110 = swift_slowAlloc();
      *(_DWORD *)v82 = 136315138;
      sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100047F98(v83, v84, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v109(v80, v81);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "%s: context.endpointIdentifier is nil.", v82, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[67])(v0[58], v0[56]);
    }

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v88 = (uint64_t (*)(void))v0[1];
    return v88();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[57] + 32))(v0[60], v0[40], v0[56]);
    type metadata accessor for SendOverAirDropAction(0);
    swift_beginAccess();
    uint64_t v85 = (void *)v0[12];
    if (v85[2] && (unint64_t v86 = v85[5], v86 >> 60 != 15))
    {
      uint64_t v87 = v85[4];
      sub_10001EC34(v87, v85[5]);
    }
    else
    {
      uint64_t v87 = 0;
      unint64_t v86 = 0xF000000000000000;
    }
    v0[74] = v86;
    v0[73] = v87;
    uint64_t v90 = (void *)swift_task_alloc();
    v0[75] = v90;
    *uint64_t v90 = v0;
    v90[1] = sub_10001A574;
    uint64_t v91 = v0[60];
    uint64_t v92 = v0[39];
    return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:)(v92, v6, v91, v87, v86, 0, 0, 0);
  }
}

uint64_t sub_10001A574()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  unint64_t v3 = *(void *)(v2 + 592);
  uint64_t v4 = *(void *)(v2 + 584);
  if (v0)
  {
    sub_10001EBC4(v4, v3);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10001B664;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001EBC4(v4, v3);
    uint64_t v5 = sub_10001A6FC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001A6FC()
{
  uint64_t v15 = v0;
  (*(void (**)(void, void, void))(v0 + 520))(*(void *)(v0 + 472), *(void *)(v0 + 152), *(void *)(v0 + 448));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 472);
    uint64_t v4 = *(void *)(v0 + 448);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 80) = sub_100047F98(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v13(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: starting AirDrop send", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 536))(*(void *)(v0 + 472), *(void *)(v0 + 448));
  }

  SFXPCProgressTask.makeAsyncIterator()();
  *(_DWORD *)(v0 + 632) = enum case for SFAirDropSend.Transfer.State.transferring(_:);
  *(_DWORD *)(v0 + 636) = enum case for SFAirDropSend.Transfer.State.transferFailed(_:);
  unint64_t v8 = sub_10001EBD8();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v9;
  void *v9 = v0;
  v9[1] = sub_10001A984;
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 272);
  return dispatch thunk of AsyncIteratorProtocol.next()(v10, v11, v8);
}

uint64_t sub_10001A984()
{
  *(void *)(*(void *)v1 + 624) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10001B258;
  }
  else {
    os_log_type_t v2 = sub_10001AA98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001AA98()
{
  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 480);
    uint64_t v6 = *(void *)(v0 + 448);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v7 = *(void *)(v0 + 312);
    uint64_t v9 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v4(v5, v6);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v12 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12, v1, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v13, v12, v2);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);
  unint64_t v19 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 240) + 8);
  if (v16)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_100018D14(&qword_1001805B0, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v20 + 4) = sub_100047F98(v21, v22, &v65);
    swift_bridgeObjectRelease();
    unint64_t v23 = *v19;
    (*v19)(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "AirDrop send updated:%s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v23 = *v19;
    (*v19)(*(void *)(v0 + 248), *(void *)(v0 + 232));
  }

  int v24 = *(_DWORD *)(v0 + 632);
  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 208);
  SFAirDropSend.Transfer.state.getter();
  int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v25, v27);
  if (v28 == v24)
  {
    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v31 = *(void *)(v0 + 208);
    v23(*(void *)(v0 + 256), *(void *)(v0 + 232));
    (*(void (**)(uint64_t, uint64_t))(v30 + 96))(v29, v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_10000AA4C(&qword_1001805A8);
    uint64_t v33 = v29 + *(int *)(v32 + 48);
    swift_bridgeObjectRelease();
    uint64_t v34 = v29 + *(int *)(v32 + 80);
    uint64_t v35 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v34, v35);
    uint64_t v36 = type metadata accessor for SFAirDrop.Progress();
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v33, v36);
    goto LABEL_17;
  }
  if (v28 == *(_DWORD *)(v0 + 636))
  {
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v38 = *(void *)(v0 + 200);
    uint64_t v40 = *(void *)(v0 + 184);
    uint64_t v39 = *(void *)(v0 + 192);
    uint64_t v41 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 216) + 96))(v37, *(void *)(v0 + 208));
    uint64_t v42 = sub_10000AA4C(&qword_100180598);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v38, v37 + *(int *)(v42 + 48), v41);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
    v43(v39, v38, v41);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v48 = *(void *)(v0 + 184);
    uint64_t v47 = *(void *)(v0 + 192);
    uint64_t v49 = *(void *)(v0 + 176);
    if (v46)
    {
      uint64_t v64 = v43;
      uint64_t v50 = swift_slowAlloc();
      uint64_t v63 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 138412290;
      sub_100018D14(&qword_1001805A0, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
      swift_allocError();
      v64(v51, v47, v49);
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v50 + 4) = v52;
      *uint64_t v63 = v52;
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v53(v47, v49);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "AirDrop transfer failed with failure: %@", (uint8_t *)v50, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v53(v47, v49);
    }
    uint64_t v57 = *(void *)(v0 + 256);
    uint64_t v58 = *(void *)(v0 + 232);
    uint64_t v33 = *(void *)(v0 + 224);
    v53(*(void *)(v0 + 200), *(void *)(v0 + 176));
    v23(v57, v58);
    uint64_t v36 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
    goto LABEL_16;
  }
  uint64_t v55 = *(void *)(v0 + 216);
  uint64_t v54 = *(void *)(v0 + 224);
  uint64_t v56 = *(void *)(v0 + 208);
  v23(*(void *)(v0 + 256), *(void *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
LABEL_17:
  unint64_t v59 = sub_10001EBD8();
  uint64_t v60 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_10001A984;
  uint64_t v61 = *(void *)(v0 + 264);
  uint64_t v62 = *(void *)(v0 + 272);
  return dispatch thunk of AsyncIteratorProtocol.next()(v61, v62, v59);
}

uint64_t sub_10001B258()
{
  *(void *)(v0 + 72) = *(void *)(v0 + 624);
  sub_10000AA4C(&qword_100180590);
  swift_willThrowTypedImpl();
  return _swift_task_switch(sub_10001B2E4, 0, 0);
}

uint64_t sub_10001B2E4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[67];
  uint64_t v2 = v0[60];
  uint64_t v3 = v0[56];
  uint64_t v5 = v0[38];
  uint64_t v4 = v0[39];
  uint64_t v6 = v0[37];
  (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10001B4D0()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B664()
{
  (*(void (**)(void, void))(v0 + 536))(*(void *)(v0 + 480), *(void *)(v0 + 448));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001B814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[28] = a3;
  v4[29] = v3;
  v4[26] = a1;
  v4[27] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[30] = v5;
  v4[31] = *(void *)(v5 - 8);
  v4[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UTType();
  v4[33] = v6;
  v4[34] = *(void *)(v6 - 8);
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_10001B934, 0, 0);
}

uint64_t sub_10001B934()
{
  unint64_t v23 = v0;
  uint64_t v1 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
  v0[36] = v1;
  v0[37] = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    type metadata accessor for StartSharePlayAction(0);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[38] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10001BC4C;
    return sub_10007AF44(v3, v4);
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[31];
    uint64_t v7 = v0[32];
    uint64_t v9 = v0[30];
    uint64_t v10 = v0[28];
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = v0[31];
    uint64_t v15 = v0[32];
    uint64_t v17 = v0[30];
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[21] = sub_100047F98(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cannot start SharePlay on nearby sharing interaction with ID as it's an unknown contact: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v16 + 8))(v0[32], v0[30]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_10001BC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 312) = a1;
  *(void *)(v3 + 320) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001BD4C, 0, 0);
}

uint64_t sub_10001BD4C()
{
  unint64_t v68 = v0;
  uint64_t v1 = v0;
  unint64_t v2 = v0[40];
  if (!v2)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B150(v10, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[37];
    if (!v13)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_33;
    }
    uint64_t v15 = v0[36];
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v67[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    v0[20] = sub_100047F98(v15, v14, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cannot start SharePlay on nearby sharing interaction with ID as the contact with identifier does not contain a FaceTime-able handle: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_14:
    swift_slowDealloc();

LABEL_33:
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v59 = (uint64_t (*)(void))v1[1];
    return v59();
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 normalizedHandleWithDestinationID:v4];
  v0[41] = v5;

  if (!v5)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000B150(v17, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v18))
    {
      swift_bridgeObjectRelease_n();

      goto LABEL_33;
    }
    uint64_t v19 = v0[39];
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    v67[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    v0[19] = sub_100047F98(v19, v2, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v18, "Unable to create a normalized handle with destination ID: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  id v6 = [objc_allocWithZone((Class)TUConversationMember) initWithHandle:v5];
  v0[42] = v6;
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10012A280;
  *(void *)(inited + 32) = v6;
  v67[0] = inited;
  specialized Array._endMutation()();
  if (!((unint64_t)v67[0] >> 62))
  {
    uint64_t v8 = *(void *)((v67[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v9 = v6;
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  id v21 = v6;
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22) {
LABEL_5:
  }
    sub_10009CC64(v67[0]);
LABEL_18:
  unint64_t v23 = (void *)v0[26];
  swift_bridgeObjectRelease();
  id v24 = objc_allocWithZone((Class)TUJoinConversationRequest);
  sub_10001FB40(0, &qword_1001804F0);
  sub_10001E76C(&qword_1001804F8, &qword_1001804F0);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v26 = [v24 initWithRemoteMembers:isa];
  v1[43] = v26;

  id v27 = [self invitationPreferencesForAllHandlesWithStyles:1];
  sub_10001FB40(0, &qword_100180500);
  sub_10001E76C(&qword_100180508, &qword_100180500);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  Class v28 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v26 setInvitationPreferences:v28];

  uint64_t v64 = v26;
  [v26 setAvMode:0];
  uint64_t v29 = v23[3];
  uint64_t v30 = v23[4];
  sub_10000AB54(v23, v29);
  unint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 64))(v29, v30);
  unint64_t v32 = v31;
  if (!(v31 >> 62))
  {
    uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v33) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_40:
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  if (!v33)
  {
LABEL_27:
    swift_bridgeObjectRelease_n();
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v41 = v1[26];
    uint64_t v42 = type metadata accessor for Logger();
    sub_10000B150(v42, (uint64_t)qword_10018D128);
    sub_10000AAF0(v41, (uint64_t)(v1 + 9));
    id v43 = v64;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      loga = v44;
      uint64_t v47 = (void *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412546;
      v1[22] = v43;
      id v48 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v47 = v43;

      *(_WORD *)(v46 + 12) = 2080;
      uint64_t v49 = v1[12];
      uint64_t v50 = v1[13];
      sub_10000AB54(v1 + 9, v49);
      unint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 64))(v49, v50);
      sub_100013790(v51);
      swift_bridgeObjectRelease();
      uint64_t v52 = Array.description.getter();
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      v1[23] = sub_100047F98(v52, v54, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000AB98((uint64_t)(v1 + 9));
      _os_log_impl((void *)&_mh_execute_header, loga, v45, "Starting SharePlay via Messages with request without an activity: %@ item provider registered types: %s", (uint8_t *)v46, 0x16u);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10000AB98((uint64_t)(v1 + 9));
    }
    uint64_t v56 = (void *)v1[42];
    uint64_t v55 = (void *)v1[43];
    uint64_t v57 = (void *)v1[41];
    id v58 = [self sharedInstance];
    [v58 launchAppForJoinRequest:v55];

    goto LABEL_33;
  }
LABEL_20:
  uint64_t v34 = 0;
  os_log_t log = (os_log_t)(v1[34] + 8);
  while (1)
  {
    if ((v32 & 0xC000000000000001) != 0) {
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v35 = *(id *)(v32 + 8 * v34 + 32);
    }
    uint64_t v36 = v35;
    v1[44] = v35;
    uint64_t v37 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v38 = v1[35];
    uint64_t v39 = v1[33];
    static UTType._groupActivity.getter();
    UTType.identifier.getter();
    ((void (*)(uint64_t, uint64_t))log->isa)(v38, v39);
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LOBYTE(v39) = [v36 hasItemConformingToTypeIdentifier:v40];

    if (v39) {
      break;
    }

    ++v34;
    if (v37 == v33) {
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v61 = swift_task_alloc();
  v1[45] = v61;
  *(void *)(v61 + 16) = v36;
  uint64_t v62 = (void *)swift_task_alloc();
  v1[46] = v62;
  uint64_t v63 = sub_10001FB40(0, &qword_100180518);
  *uint64_t v62 = v1;
  v62[1] = sub_10001C860;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 24, 0, 0, 0xD00000000000001CLL, 0x80000001001313E0, sub_10001E7BC, v61, v63);
}

uint64_t sub_10001C860()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v2 = sub_10001CC80;
  }
  else
  {
    swift_task_dealloc();
    unint64_t v2 = sub_10001C97C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001C97C()
{
  uint64_t v1 = (void *)v0[26];
  unint64_t v2 = (void *)v0[43];
  uint64_t v3 = v0[24];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  sub_10000AB54(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 56))(v4, v5);
  swift_bridgeObjectRetain();
  sub_10001E7C4((uint64_t)(v0 + 2));
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setBundleIdentifier:v6];

  [v3 setStartWhenStaged:1];
  [v2 setActivity:v3];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)v0[43];
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_10018D128);
  id v9 = v7;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  BOOL v13 = (void *)v0[43];
  unint64_t v14 = v0[44];
  if (v12)
  {
    os_log_t log = v10;
    id v26 = (void *)v0[44];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412290;
    v0[25] = v13;
    id v17 = v13;
    os_log_type_t v18 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v13;

    _os_log_impl((void *)&_mh_execute_header, log, v11, "Starting SharePlay via Messages with request using an advertised activity: %@", v15, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    BOOL v13 = v26;
    unint64_t v14 = log;
  }
  else
  {

    os_log_type_t v18 = v10;
  }

  unint64_t v20 = (void *)v0[42];
  uint64_t v19 = (void *)v0[43];
  id v21 = (void *)v0[41];
  id v22 = [self sharedInstance];
  [v22 launchAppForJoinRequest:v19];

  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10001CC80()
{
  uint64_t v1 = (void *)v0[44];
  uint64_t v3 = (void *)v0[42];
  unint64_t v2 = (void *)v0[43];
  uint64_t v4 = (void *)v0[41];
  swift_task_dealloc();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10001CD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[30] = a4;
  v5[31] = v4;
  v5[28] = a2;
  v5[29] = a3;
  v5[27] = a1;
  uint64_t v6 = type metadata accessor for UTType();
  v5[32] = v6;
  v5[33] = *(void *)(v6 - 8);
  v5[34] = swift_task_alloc();
  sub_10000AA4C(&qword_100181540);
  v5[35] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[36] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[37] = v8;
  v5[38] = *(void *)(v8 + 64);
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  return _swift_task_switch(sub_10001CEB4, 0, 0);
}

uint64_t sub_10001CEB4()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  sub_10000AB54(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[44] = v4;
  void *v4 = v0;
  v4[1] = sub_10001CF70;
  uint64_t v5 = v0[35];
  return sub_100013EAC(v5, v3, v2);
}

uint64_t sub_10001CF70()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10001DF9C;
  }
  else {
    uint64_t v2 = sub_10001D084;
  }
  return _swift_task_switch(v2, 0, 0);
}

id sub_10001D084()
{
  uint64_t v92 = v0;
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[35];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000F394(v3, &qword_100181540);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[27];
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B150(v5, (uint64_t)qword_10018D128);
    sub_10000AAF0(v4, (uint64_t)(v0 + 8));
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_10000AAF0((uint64_t)(v0 + 8), (uint64_t)(v0 + 13));
      sub_10000AA4C(&qword_1001804C8);
      uint64_t v9 = String.init<A>(reflecting:)();
      v0[25] = sub_100047F98(v9, v10, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000AB98((uint64_t)(v0 + 8));
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not find a URL to start nearby SharePlay from content: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000AB98((uint64_t)(v0 + 8));
    }

LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return (id)v30();
  }
  os_log_type_t v11 = (void **)(v0 + 27);
  BOOL v12 = (void *)v0[27];
  BOOL v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32);
  v13(v0[43], v3, v1);
  uint64_t v14 = v12[3];
  uint64_t v15 = v12[4];
  sub_10000AB54(v12, v14);
  if ((sub_100013D34(v14, v15, &qword_10017F5E8, (uint64_t)qword_10018CE20) & 1) == 0)
  {
    uint64_t v32 = (*v11)[3];
    uint64_t v33 = (*v11)[4];
    sub_10000AB54(*v11, v32);
    if (sub_100013D34(v32, v33, &qword_10017F5F0, (uint64_t)qword_10018CE38))
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v34 = v0[43];
      uint64_t v35 = v0[40];
      uint64_t v37 = v0[36];
      uint64_t v36 = v0[37];
      uint64_t v87 = type metadata accessor for Logger();
      sub_10000B150(v87, (uint64_t)qword_10018D128);
      os_log_t log = *(os_log_t *)(v36 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))log)(v35, v34, v37);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v0[40];
      uint64_t v42 = v0[36];
      uint64_t v43 = v0[37];
      if (v40)
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        sub_100018D14((unint64_t *)&unk_100181550, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[23] = sub_100047F98(v45, v46, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v47(v41, v42);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting nearby SharePlay for participant using URL: %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v47(v41, v42);
      }

      id result = [self defaultWorkspace];
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v66 = result;
      URL._bridgeToObjectiveC()(v65);
      unint64_t v68 = v67;
      unsigned __int8 v69 = [v66 openURL:v67 withOptions:0];

      if (v69)
      {
        v47(v0[43], v0[36]);
      }
      else
      {
        unint64_t v84 = v47;
        if (qword_10017F5E0 != -1) {
          swift_once();
        }
        uint64_t v70 = v0[43];
        uint64_t v71 = v0[39];
        uint64_t v72 = v0[36];
        sub_10000B150(v87, (uint64_t)qword_100180060);
        ((void (*)(uint64_t, uint64_t, uint64_t))log)(v71, v70, v72);
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        BOOL v75 = os_log_type_enabled(v73, v74);
        uint64_t v76 = v0[43];
        uint64_t v77 = v0[39];
        uint64_t v78 = v0[36];
        if (v75)
        {
          uint64_t v88 = v0[36];
          BOOL v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v91 = swift_slowAlloc();
          *(_DWORD *)BOOL v79 = 136315138;
          uint64_t v80 = URL.absoluteString.getter();
          v0[24] = sub_100047F98(v80, v81, &v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v84(v77, v88);
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to open nearby SharePlay URL: %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v84(v76, v88);
        }
        else
        {

          v84(v77, v78);
          v84(v76, v78);
        }
      }
    }
    else
    {
      (*(void (**)(void, void))(v0[37] + 8))(v0[43], v0[36]);
    }
    goto LABEL_13;
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v89 = v13;
  uint64_t v16 = v0[42];
  uint64_t v17 = v0[43];
  uint64_t v19 = v0[36];
  uint64_t v18 = v0[37];
  uint64_t v20 = type metadata accessor for Logger();
  sub_10000B150(v20, (uint64_t)qword_10018D128);
  unint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v86(v16, v17, v19);
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = v0[42];
  uint64_t v26 = v0[36];
  uint64_t v25 = v0[37];
  if (v23)
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    sub_100018D14((unint64_t *)&unk_100181550, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_100047F98(v28, v29, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting nearby SharePlay for host using URL: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v25 + 8))(v0[42], v0[36]);
  }
  uint64_t v48 = v0[41];
  uint64_t v49 = v0[36];
  uint64_t v82 = v0[43];
  uint64_t v83 = v0[37];
  uint64_t v51 = v0[33];
  uint64_t v50 = v0[34];
  uint64_t v52 = v0[32];
  id v53 = [objc_allocWithZone((Class)NSItemProvider) init];
  v0[46] = v53;
  static UTType.url.getter();
  UTType.identifier.getter();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v86(v48, v82, v49);
  unint64_t v55 = (*(unsigned __int8 *)(v83 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  uint64_t v56 = swift_allocObject();
  v89(v56 + v55, v48, v49);
  v0[6] = sub_10001EB10;
  v0[7] = v56;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000F1554;
  v0[5] = &unk_100169568;
  uint64_t v57 = _Block_copy(v0 + 2);
  swift_release();
  [v53 registerItemForTypeIdentifier:v54 loadHandler:v57];
  _Block_release(v57);

  type metadata accessor for StartNearbySharePlayAction(0);
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t inited = swift_initStackObject();
  v0[47] = inited;
  *(_OWORD *)(inited + 16) = xmmword_10012A280;
  *(void *)(inited + 32) = v53;
  uint64_t v91 = inited;
  specialized Array._endMutation()();
  uint64_t v59 = v91;
  v0[48] = v91;
  uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100180560 + dword_100180560);
  id v60 = v53;
  uint64_t v61 = (void *)swift_task_alloc();
  v0[49] = v61;
  *uint64_t v61 = v0;
  v61[1] = sub_10001DCB4;
  uint64_t v62 = v0[29];
  uint64_t v63 = v0[30];
  uint64_t v64 = v0[28];
  return (id)v90(v59, v64, v62, v63, 0);
}

uint64_t sub_10001DCB4()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_10001DEBC;
  }
  else {
    uint64_t v2 = sub_10001DDE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001DDE4()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10001DEBC()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10001DF9C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001E054(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  sub_10000AA4C(&qword_1001804C0);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ProximityHandoffInteractionContent(0);
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10001E144, 0, 0);
}

uint64_t sub_10001E144()
{
  os_log_type_t v22 = v0;
  uint64_t v1 = v0[17];
  sub_10000AAF0(v0[13], (uint64_t)(v0 + 2));
  sub_10000AA4C(&qword_1001804C8);
  int v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v1 + 56);
  if (v2)
  {
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[14];
    v3(v5, 0, 1, v0[16]);
    sub_10001E6AC(v5, v4);
    uint64_t v7 = v6 + *(int *)(type metadata accessor for ProximityHandoffContentAction(0) + 20);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SFProximityHandoffClient.performHandoffContent(action:on:)
                                                   + async function pointer to dispatch thunk of SFProximityHandoffClient.performHandoffContent(action:on:));
    uint64_t v8 = (void *)swift_task_alloc();
    v0[19] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10001E4A4;
    uint64_t v9 = v0[18];
    return v20(v7, v9);
  }
  else
  {
    uint64_t v11 = v0[15];
    v3(v11, 1, 1, v0[16]);
    sub_10000F394(v11, &qword_1001804C0);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[13];
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_10018D128);
    sub_10000AAF0(v12, (uint64_t)(v0 + 7));
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      sub_10000AB54(v0 + 7, v0[10]);
      swift_getDynamicType();
      uint64_t v17 = _typeName(_:qualified:)();
      v0[12] = sub_100047F98(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000AB98((uint64_t)(v0 + 7));
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unsupported content type for proximity handoff client Share action: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000AB98((uint64_t)(v0 + 7));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_10001E4A4()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = sub_10001E630;
  }
  else {
    int v2 = sub_10001E5B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001E5B8()
{
  sub_10001E710(*(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001E630()
{
  sub_10001E710(*(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001E6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProximityHandoffInteractionContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E710(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ProximityHandoffInteractionContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001E76C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001FB40(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10001E7BC(uint64_t a1)
{
  sub_100012BF8(a1, *(void **)(v1 + 16));
}

uint64_t sub_10001E7C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_10001E814()
{
  uint64_t v1 = sub_10000AA4C(&qword_100180520);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001E8A8(uint64_t a1, uint64_t a2)
{
  sub_10000AA4C(&qword_100180520);

  return sub_100012E70(a1, a2);
}

uint64_t sub_10001E92C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E93C()
{
  return swift_release();
}

unint64_t sub_10001E944()
{
  unint64_t result = qword_100180528;
  if (!qword_100180528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180528);
  }
  return result;
}

uint64_t sub_10001E998(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001E9F0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10001EA1C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10001EA80()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10001EB10(void (*a1)(void))
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  if (a1)
  {
    URL._bridgeToObjectiveC()((NSURL *)((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
    id v4 = v3;
    a1();
  }
}

uint64_t sub_10001EBC4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001E998(a1, a2);
  }
  return a1;
}

unint64_t sub_10001EBD8()
{
  unint64_t result = qword_100180588;
  if (!qword_100180588)
  {
    sub_10000B100(&qword_100180570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180588);
  }
  return result;
}

uint64_t sub_10001EC34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10001EC8C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10001ED74(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  uint64_t v8 = *((void *)v1 + 4);
  uint64_t v9 = *((void *)v1 + 5);
  double v10 = v1[6];
  double v11 = v1[7];
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  void *v14 = v2;
  v14[1] = sub_100013ABC;
  return sub_100011180(a1, v10, v11, v6, v7, v8, v9, v12, v13);
}

uint64_t sub_10001EEC0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001EC34(a1, a2);
  }
  return a1;
}

uint64_t sub_10001EED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[26] = a3;
  v4[27] = v3;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_10001EF98, 0, 0);
}

uint64_t sub_10001EF98()
{
  uint64_t v34 = v0;
  sub_10000AAF0(v0[24], (uint64_t)(v0 + 2));
  sub_10000AA4C(&qword_1001804C8);
  if (swift_dynamicCast())
  {
    uint64_t v2 = (void *)v0[17];
    uint64_t v1 = (void *)v0[18];
    v0[31] = v2;
    v0[32] = v1;
    uint64_t v3 = (void *)v0[19];
    v0[33] = v3;
    uint64_t v4 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
    v0[34] = v4;
    v0[35] = v5;
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      v0[36] = type metadata accessor for AddToActiveSharePlaySessionAction(0);
      uint64_t v8 = (void *)swift_task_alloc();
      v0[37] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_10001F4B8;
      return sub_10007AF44(v6, v7);
    }
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v19 = v0[29];
    uint64_t v18 = v0[30];
    uint64_t v20 = v0[28];
    uint64_t v21 = v0[26];
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000B150(v22, (uint64_t)qword_10018D128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v27 = v0[29];
    uint64_t v26 = v0[30];
    uint64_t v28 = v0[28];
    if (v25)
    {
      os_log_t log = v23;
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 136315138;
      sub_100018D14((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[23] = sub_100047F98(v30, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, log, v24, "Cannot add to SharePlay on nearby sharing interaction with ID as it's an unknown contact: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    }
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[24];
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    sub_10000AAF0(v10, (uint64_t)(v0 + 12));
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_10000AB54(v0 + 12, v0[15]);
      swift_getDynamicType();
      uint64_t v15 = _typeName(_:qualified:)();
      v0[20] = sub_100047F98(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000AB98((uint64_t)(v0 + 12));
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unsupported content type for add to SharePlay action: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000AB98((uint64_t)(v0 + 12));
    }
  }
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10001F4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001F5B8, 0, 0);
}

uint64_t sub_10001F5B8()
{
  uint64_t v38 = v0;
  unint64_t v1 = *(void *)(v0 + 312);
  if (!v1)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = *(void *)(v0 + 280);
    if (v14)
    {
      uint64_t v16 = *(void *)(v0 + 272);
      uint64_t v34 = *(void **)(v0 + 256);
      id v36 = *(id *)(v0 + 264);
      uint64_t v33 = *(void **)(v0 + 248);
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      unint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 168) = sub_100047F98(v16, v15, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cannot start SharePlay on nearby sharing interaction with ID as the contact with identifier does not contain a FaceTime-able handle: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_14:
      swift_slowDealloc();

      goto LABEL_20;
    }
    uint64_t v23 = *(void **)(v0 + 256);
    uint64_t v22 = *(void **)(v0 + 264);

    swift_bridgeObjectRelease_n();
LABEL_17:

    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 normalizedHandleWithDestinationID:v3];

  if (!v4)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B150(v18, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v19))
    {
      uint64_t v20 = *(void *)(v0 + 304);
      uint64_t v34 = *(void **)(v0 + 256);
      id v36 = *(id *)(v0 + 264);
      uint64_t v33 = *(void **)(v0 + 248);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      unint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 176) = sub_100047F98(v20, v1, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v19, "Unable to create a normalized handle with destination ID: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_14;
    }
    os_log_type_t v24 = *(void **)(v0 + 256);
    uint64_t v22 = *(void **)(v0 + 264);

    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease();
  id v7 = [objc_allocWithZone((Class)TUConversationMember) initWithHandle:v4];
  id v35 = *(id *)(v6 + *(int *)(v5 + 24));
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10012A280;
  *(void *)(inited + 32) = v7;
  unint64_t v37 = inited;
  specialized Array._endMutation()();
  if (v37 >> 62)
  {
    id v25 = v7;
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26) {
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v10 = v7;
  if (v9) {
LABEL_5:
  }
    sub_10009CC64(v37);
LABEL_19:
  uint64_t v27 = *(void **)(v0 + 256);
  uint64_t v28 = *(void **)(v0 + 264);
  unint64_t v29 = *(void **)(v0 + 248);
  swift_bridgeObjectRelease();
  sub_10001FB40(0, &qword_1001804F0);
  sub_10001E76C(&qword_1001804F8, &qword_1001804F0);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v35 addRemoteMembers:isa toConversation:v29];

LABEL_20:
  swift_task_dealloc();
  unint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10001FB40(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unsigned char *_s31TUConversationActivityLoadErrorOwCP(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s31TUConversationActivityLoadErrorOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s31TUConversationActivityLoadErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001FCE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10001FD0C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001FD14(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *_s31TUConversationActivityLoadErrorOMa()
{
  return &_s31TUConversationActivityLoadErrorON;
}

unint64_t sub_10001FD34()
{
  unint64_t result = qword_100180608;
  if (!qword_100180608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180608);
  }
  return result;
}

void destroy for AirDropPlatter(uint64_t a1)
{
  swift_release();
  int v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)(a2 + 24);
  id v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AirDropPlatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropPlatter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropPlatter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropPlatter()
{
  return &type metadata for AirDropPlatter;
}

uint64_t sub_10001FF98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10001FFB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v110 = a1;
  uint64_t v96 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v95 = *(void *)(v96 - 8);
  uint64_t v2 = __chkstk_darwin(v96);
  uint64_t v94 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v91 = (char *)&v90 - v4;
  uint64_t v92 = type metadata accessor for AirDropAskRequestView();
  __chkstk_darwin(v92);
  id v6 = (uint64_t *)((char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v101 = sub_10000AA4C(&qword_100180618);
  uint64_t v7 = __chkstk_darwin(v101);
  uint64_t v93 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v97 = (char *)&v90 - v9;
  uint64_t v107 = sub_10000AA4C(&qword_100180620);
  __chkstk_darwin(v107);
  uint64_t v109 = (uint64_t *)((char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_10000AA4C(&qword_100180628);
  __chkstk_darwin(v102);
  uint64_t v104 = (_OWORD *)((char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v99 = sub_10000AA4C(&qword_100180630);
  __chkstk_darwin(v99);
  uint64_t v98 = (uint64_t *)((char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = sub_10000AA4C(&qword_100180638);
  __chkstk_darwin(v103);
  uint64_t v100 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000AA4C(&qword_100180640);
  __chkstk_darwin(v108);
  uint64_t v105 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)&v90 - v23;
  unint64_t v106 = v1;
  v119[0] = *v1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)v119);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10000F394((uint64_t)v17, &qword_100181400);
    if (sub_100021F54())
    {
      char v25 = *((unsigned char *)v106 + 16);
      *id v6 = swift_getKeyPath();
      sub_10000AA4C(&qword_1001806E0);
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = (int *)v92;
      uint64_t v27 = (uint64_t *)((char *)v6 + *(int *)(v92 + 20));
      type metadata accessor for AirDropTransferSession();
      sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
      swift_retain();
      *uint64_t v27 = ObservedObject.init(wrappedValue:)();
      v27[1] = v28;
      *((unsigned char *)v6 + v26[6]) = v25;
      uint64_t v29 = v26[7];
      *(uint64_t *)((char *)v6 + v29) = (uint64_t)[objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
      uint64_t v30 = v26[8];
      if (qword_10017F600 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      *((unsigned char *)v6 + v30) = v115;
      uint64_t v31 = v93;
      sub_100022920((uint64_t)v6, v93);
      uint64_t v32 = (unsigned char *)(v31 + *(int *)(v101 + 36));
      *uint64_t v32 = v25;
      v32[1] = 1;
      sub_100022984((uint64_t)v6);
      uint64_t v33 = (uint64_t)v97;
      sub_10000F2CC(v31, (uint64_t)v97, &qword_100180618);
      sub_10000F330(v33, (uint64_t)v98, &qword_100180618);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100180668);
      sub_100022488();
      sub_1000226F8();
      uint64_t v34 = (uint64_t)v100;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v34, (uint64_t)v104, &qword_100180638);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_1001806B8);
      sub_10002240C();
      sub_1000227A4();
      uint64_t v35 = (uint64_t)v105;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v34, &qword_100180638);
      sub_10000F330(v35, (uint64_t)v109, &qword_100180640);
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100180648);
      sub_100022390();
      sub_100022628();
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v35, &qword_100180640);
      return sub_10000F394(v33, &qword_100180618);
    }
    sub_100022348();
    uint64_t v49 = (void *)static NSUserDefaults.airdrop.getter();
    char v50 = SFAirDropUserDefaults.moveToAppEnabled.getter();

    uint64_t v51 = v96;
    uint64_t v52 = v95;
    id v53 = v94;
    if (v50)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      NSString v54 = v91;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_100021E60((uint64_t)v119);
      int v55 = (*(uint64_t (**)(char *, uint64_t))(v52 + 88))(v54, v51);
      if (v55 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)
        || v55 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
      {
        (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v51);
        uint64_t v56 = sub_10000AA4C(&qword_1001806D8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v57 = &v54[*(int *)(v56 + 80)];
        uint64_t v58 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v57, v58);
        uint64_t v59 = type metadata accessor for SFAirDropReceive.ItemDestination();
        (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v54, v59);
        int v60 = *((unsigned __int8 *)v106 + 16);
        type metadata accessor for AirDropTransferSession();
        sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
        swift_retain();
        uint64_t v61 = ObservedObject.init(wrappedValue:)();
        if (v60) {
          __int16 v63 = 256;
        }
        else {
          __int16 v63 = 0;
        }
        uint64_t v111 = v61;
        uint64_t v112 = v62;
        __int16 v113 = v63 | v60;
        __int16 v64 = 1;
        goto LABEL_31;
      }
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100021E60((uint64_t)v119);
    uint64_t v72 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
    uint64_t v73 = *(void (**)(char *, uint64_t))(v52 + 8);
    v73(v53, v51);
    if (v72 != 3)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_100021E60((uint64_t)v119);
      uint64_t v74 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
      v73(v53, v51);
      if (v74 != 9) {
        goto LABEL_32;
      }
    }
    BOOL v75 = (void *)static NSUserDefaults.airdrop.getter();
    char v76 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

    if ((v76 & 1) == 0)
    {
LABEL_32:
      char v86 = *((unsigned char *)v106 + 16);
      type metadata accessor for AirDropTransferSession();
      sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
      swift_retain();
      uint64_t v87 = ObservedObject.init(wrappedValue:)();
      uint64_t v88 = v109;
      *uint64_t v109 = v87;
      v88[1] = v89;
      *((unsigned char *)v88 + 16) = v86;
      *((unsigned char *)v88 + 17) = v86;
      *((unsigned char *)v88 + 18) = 1;
      swift_storeEnumTagMultiPayload();
      sub_10000AA4C(&qword_100180648);
      sub_100022390();
      sub_100022628();
      return _ConditionalContent<>.init(storage:)();
    }
    int v77 = *((unsigned __int8 *)v106 + 16);
    type metadata accessor for AirDropTransferSession();
    sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
    swift_retain();
    uint64_t v78 = ObservedObject.init(wrappedValue:)();
    if (v77) {
      __int16 v80 = 256;
    }
    else {
      __int16 v80 = 0;
    }
    uint64_t v111 = v78;
    uint64_t v112 = v79;
    __int16 v113 = v80 | v77;
    __int16 v64 = 257;
LABEL_31:
    __int16 v114 = v64;
    swift_retain();
    sub_10000AA4C(&qword_1001806C8);
    sub_10000AA4C(&qword_100180678);
    sub_100022820();
    sub_100022504();
    _ConditionalContent<>.init(storage:)();
    unsigned __int16 v81 = v116;
    unsigned __int8 v82 = v117;
    char v83 = v118;
    unint64_t v84 = v104;
    *uint64_t v104 = v115;
    *((unsigned char *)v84 + 18) = v82;
    *((_WORD *)v84 + 8) = v81;
    *((unsigned char *)v84 + 19) = v83;
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C(&qword_1001806B8);
    sub_10002240C();
    sub_1000227A4();
    uint64_t v85 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v85, (uint64_t)v109, &qword_100180640);
    swift_storeEnumTagMultiPayload();
    sub_10000AA4C(&qword_100180648);
    sub_100022390();
    sub_100022628();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v85, &qword_100180640);
    return swift_release();
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
  unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  uint64_t v97 = v24;
  v37(v22, v24, v18);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v22, v18) == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    uint64_t v38 = &v22[*(int *)(sub_10000AA4C(&qword_100180598) + 48)];
    int v39 = *((unsigned __int8 *)v106 + 16);
    type metadata accessor for AirDropTransferSession();
    sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
    swift_retain();
    uint64_t v40 = ObservedObject.init(wrappedValue:)();
    if (v39) {
      __int16 v42 = 256;
    }
    else {
      __int16 v42 = 0;
    }
    uint64_t v111 = v40;
    uint64_t v112 = v41;
    __int16 v113 = v42 | v39;
    __int16 v114 = 1;
    sub_10000AA4C(&qword_100180678);
    sub_10000AA4C(&qword_100180648);
    sub_100022504();
    sub_100022628();
    _ConditionalContent<>.init(storage:)();
    uint64_t v44 = (_OWORD *)*((void *)&v115 + 1);
    uint64_t v43 = v115;
    int v45 = v116 | (v117 << 16);
    char v46 = v118;
    uint64_t v47 = type metadata accessor for SFAirDropSend.Failure();
    (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v38, v47);
    uint64_t v48 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v22, v48);
  }
  else
  {
    int v65 = *((unsigned __int8 *)v106 + 16);
    type metadata accessor for AirDropTransferSession();
    sub_100022F0C((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
    swift_retain();
    uint64_t v66 = ObservedObject.init(wrappedValue:)();
    if (v65) {
      __int16 v68 = 256;
    }
    else {
      __int16 v68 = 0;
    }
    uint64_t v111 = v66;
    uint64_t v112 = v67;
    __int16 v113 = v68 | v65;
    __int16 v114 = 257;
    sub_10000AA4C(&qword_100180678);
    sub_10000AA4C(&qword_100180648);
    sub_100022504();
    sub_100022628();
    _ConditionalContent<>.init(storage:)();
    uint64_t v44 = (_OWORD *)*((void *)&v115 + 1);
    uint64_t v43 = v115;
    int v45 = v116 | (v117 << 16);
    char v46 = v118;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  uint64_t v96 = v43;
  unint64_t v106 = v44;
  unsigned __int8 v69 = v98;
  *uint64_t v98 = v43;
  v69[1] = (uint64_t)v44;
  *((_WORD *)v69 + 8) = v45;
  *((unsigned char *)v69 + 18) = BYTE2(v45);
  *((unsigned char *)v69 + 19) = v46;
  swift_storeEnumTagMultiPayload();
  sub_1000229E0();
  sub_10000AA4C(&qword_100180668);
  sub_100022488();
  sub_1000226F8();
  uint64_t v70 = (uint64_t)v100;
  _ConditionalContent<>.init(storage:)();
  sub_10000F330(v70, (uint64_t)v104, &qword_100180638);
  swift_storeEnumTagMultiPayload();
  sub_10000AA4C(&qword_1001806B8);
  sub_10002240C();
  sub_1000227A4();
  uint64_t v71 = (uint64_t)v105;
  _ConditionalContent<>.init(storage:)();
  sub_10000F394(v70, &qword_100180638);
  sub_10000F330(v71, (uint64_t)v109, &qword_100180640);
  swift_storeEnumTagMultiPayload();
  sub_10000AA4C(&qword_100180648);
  sub_100022390();
  sub_100022628();
  _ConditionalContent<>.init(storage:)();
  sub_1000229E8();
  sub_10000F394(v71, &qword_100180640);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v97, v18);
}

uint64_t sub_100021228()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100021248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v86 = a1;
  uint64_t v90 = a2;
  uint64_t v91 = sub_10000AA4C(&qword_100180708);
  __chkstk_darwin(v91);
  uint64_t v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_10000AA4C(&qword_100180710);
  uint64_t v4 = __chkstk_darwin(v81);
  uint64_t v74 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v71 - v6;
  uint64_t v8 = type metadata accessor for DynamicTypeSize();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v79 = sub_10000AA4C(&qword_100180718);
  uint64_t v15 = __chkstk_darwin(v79);
  uint64_t v72 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v76 = (uint64_t)&v71 - v17;
  uint64_t v78 = sub_10000AA4C(&qword_100180720);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  BOOL v75 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000AA4C(&qword_100180728);
  uint64_t v19 = __chkstk_darwin(v84);
  uint64_t v73 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v80 = (uint64_t)&v71 - v21;
  uint64_t v87 = sub_10000AA4C(&qword_100180730);
  __chkstk_darwin(v87);
  uint64_t v89 = (uint64_t)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000AA4C(&qword_100180738);
  __chkstk_darwin(v83);
  uint64_t v82 = (uint64_t)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000AA4C(&qword_100180740);
  __chkstk_darwin(v88);
  uint64_t v85 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_100180748);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000AA4C(&qword_100180750);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v35 = (char *)&v71 - v34;
  if (v33)
  {
    uint64_t v39 = v32;
    id v40 = [self mainScreen];
    [v40 bounds];
    CGFloat v42 = v41;
    CGFloat v44 = v43;
    CGFloat v46 = v45;
    CGFloat v48 = v47;

    v95.origin.x = v42;
    v95.origin.y = v44;
    v95.size.width = v46;
    v95.size.height = v48;
    CGRectGetWidth(v95);
    if (qword_10017F678 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v49 = sub_10000AA4C(&qword_100180758);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v27, v86, v49);
    char v50 = &v27[*(int *)(v25 + 36)];
    long long v51 = v93;
    *(_OWORD *)char v50 = v92;
    *((_OWORD *)v50 + 1) = v51;
    *((_OWORD *)v50 + 2) = v94;
    sub_10000F330((uint64_t)v27, (uint64_t)v31, &qword_100180748);
    *(_WORD *)&v31[*(int *)(v39 + 36)] = 256;
    sub_10000F394((uint64_t)v27, &qword_100180748);
    unint64_t v37 = &qword_100180750;
    sub_10000F2CC((uint64_t)v31, (uint64_t)v35, &qword_100180750);
    sub_10000F330((uint64_t)v35, v82, &qword_100180750);
    swift_storeEnumTagMultiPayload();
    sub_100022CBC();
    sub_100022DE8();
    uint64_t v52 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v52, v89, &qword_100180740);
    swift_storeEnumTagMultiPayload();
    sub_100022C40();
    sub_100022D50(&qword_100180790, &qword_100180708);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v52, &qword_100180740);
    uint64_t v38 = (uint64_t)v35;
    return sub_10000F394(v38, v37);
  }
  if ((v33 & 0x100) == 0)
  {
    uint64_t v36 = sub_10000AA4C(&qword_100180758);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v3, v86, v36);
    *(_WORD *)&v3[*(int *)(v91 + 36)] = 256;
    unint64_t v37 = &qword_100180708;
    sub_10000F330((uint64_t)v3, v89, &qword_100180708);
    swift_storeEnumTagMultiPayload();
    sub_100022C40();
    sub_100022D50(&qword_100180790, &qword_100180708);
    _ConditionalContent<>.init(storage:)();
    uint64_t v38 = (uint64_t)v3;
    return sub_10000F394(v38, v37);
  }
  uint64_t v71 = v32;
  id v53 = (void (*)(char *, void, uint64_t))v9[13];
  v53(v14, enum case for DynamicTypeSize.xSmall(_:), v8);
  v53(v12, enum case for DynamicTypeSize.large(_:), v8);
  sub_100022F0C(&qword_100180798, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v55 = v81;
    uint64_t v56 = &v7[*(int *)(v81 + 48)];
    uint64_t v57 = (void (*)(char *, char *, uint64_t))v9[4];
    v57(v7, v14, v8);
    v57(v56, v12, v8);
    uint64_t v58 = v74;
    uint64_t v59 = &v74[*(int *)(v55 + 48)];
    int v60 = (void (*)(char *, char *, uint64_t))v9[2];
    v60(v74, v7, v8);
    v60(v59, v56, v8);
    uint64_t v61 = (uint64_t)v72;
    v57(v72, v58, v8);
    uint64_t v62 = (void (*)(char *, uint64_t))v9[1];
    v62(v59, v8);
    __int16 v63 = &v58[*(int *)(v81 + 48)];
    v57(v58, v7, v8);
    v57(v63, v56, v8);
    v57((char *)(v61 + *(int *)(v79 + 36)), v63, v8);
    v62(v58, v8);
    uint64_t v64 = v76;
    sub_10000F2CC(v61, v76, &qword_100180718);
    sub_10000AA4C(&qword_100180758);
    sub_10000F288(&qword_100180778, &qword_100180758);
    sub_10000F288(&qword_100180788, &qword_100180718);
    int v65 = v75;
    View.dynamicTypeSize<A>(_:)();
    sub_10000F394(v64, &qword_100180718);
    uint64_t v66 = v77;
    uint64_t v67 = (uint64_t)v73;
    uint64_t v68 = v78;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v73, v65, v78);
    *(_WORD *)(v67 + *(int *)(v84 + 36)) = 256;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v68);
    unint64_t v37 = &qword_100180728;
    uint64_t v69 = v80;
    sub_10000F2CC(v67, v80, &qword_100180728);
    sub_10000F330(v69, v82, &qword_100180728);
    swift_storeEnumTagMultiPayload();
    sub_100022CBC();
    sub_100022DE8();
    uint64_t v70 = (uint64_t)v85;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v70, v89, &qword_100180740);
    swift_storeEnumTagMultiPayload();
    sub_100022C40();
    sub_100022D50(&qword_100180790, &qword_100180708);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v70, &qword_100180740);
    uint64_t v38 = v69;
    return sub_10000F394(v38, v37);
  }
  __break(1u);
  return result;
}

uint64_t sub_100021E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100021248(a1, a2);
}

uint64_t sub_100021E60(uint64_t a1)
{
  return a1;
}

uint64_t sub_100021E8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t sub_100021F54()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - v5;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v6, v0);
  if (v7 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v6, v0);
    uint64_t v8 = (uint64_t *)&unk_1001806F0;
  }
  else
  {
    if (v7 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v1 + 96))(v6, v0);
      uint64_t v13 = sub_10000AA4C(&qword_1001814F0);
      swift_bridgeObjectRelease();
      uint64_t v14 = &v6[*(int *)(v13 + 64)];
      uint64_t v15 = sub_10000AA4C(&qword_100181490);
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
      uint64_t v12 = type metadata accessor for SFAirDropReceive.ItemDestination();
      goto LABEL_7;
    }
    if (v7 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v1 + 96))(v6, v0);
      uint64_t v9 = &v6[*(int *)(sub_10000AA4C(&qword_1001806E8) + 48)];
      uint64_t v10 = &qword_100181490;
      goto LABEL_4;
    }
    if (v7 != enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      char v16 = 0;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v1 + 96))(v6, v0);
    uint64_t v8 = (uint64_t *)&unk_100182800;
  }
  uint64_t v9 = &v6[*(int *)(sub_10000AA4C(v8) + 48)];
  uint64_t v10 = (uint64_t *)&unk_1001827B0;
LABEL_4:
  uint64_t v11 = sub_10000AA4C(v10);
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
  uint64_t v12 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_7:
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
  char v16 = 1;
LABEL_8:
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v17 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if ((v16 & 1) != 0 || v17 == 1)
  {
    sub_100022348();
    uint64_t v19 = (void *)static NSUserDefaults.airdrop.getter();
    char v18 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();
  }
  else
  {
    char v18 = 0;
  }
  return v18 & 1;
}

unint64_t sub_100022348()
{
  unint64_t result = qword_100181C80;
  if (!qword_100181C80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100181C80);
  }
  return result;
}

unint64_t sub_100022390()
{
  unint64_t result = qword_100180650;
  if (!qword_100180650)
  {
    sub_10000B100(&qword_100180640);
    sub_10002240C();
    sub_1000227A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180650);
  }
  return result;
}

unint64_t sub_10002240C()
{
  unint64_t result = qword_100180658;
  if (!qword_100180658)
  {
    sub_10000B100(&qword_100180638);
    sub_100022488();
    sub_1000226F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180658);
  }
  return result;
}

unint64_t sub_100022488()
{
  unint64_t result = qword_100180660;
  if (!qword_100180660)
  {
    sub_10000B100(&qword_100180668);
    sub_100022504();
    sub_100022628();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180660);
  }
  return result;
}

unint64_t sub_100022504()
{
  unint64_t result = qword_100180670;
  if (!qword_100180670)
  {
    sub_10000B100(&qword_100180678);
    sub_100022580();
    sub_1000225D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180670);
  }
  return result;
}

unint64_t sub_100022580()
{
  unint64_t result = qword_100180680;
  if (!qword_100180680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180680);
  }
  return result;
}

unint64_t sub_1000225D4()
{
  unint64_t result = qword_100180688;
  if (!qword_100180688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180688);
  }
  return result;
}

unint64_t sub_100022628()
{
  unint64_t result = qword_100180690;
  if (!qword_100180690)
  {
    sub_10000B100(&qword_100180648);
    sub_1000226A4();
    sub_1000225D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180690);
  }
  return result;
}

unint64_t sub_1000226A4()
{
  unint64_t result = qword_100180698;
  if (!qword_100180698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180698);
  }
  return result;
}

unint64_t sub_1000226F8()
{
  unint64_t result = qword_1001806A0;
  if (!qword_1001806A0)
  {
    sub_10000B100(&qword_100180618);
    sub_100022F0C(&qword_1001806A8, (void (*)(uint64_t))type metadata accessor for AirDropAskRequestView);
    sub_1000225D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806A0);
  }
  return result;
}

unint64_t sub_1000227A4()
{
  unint64_t result = qword_1001806B0;
  if (!qword_1001806B0)
  {
    sub_10000B100(&qword_1001806B8);
    sub_100022820();
    sub_100022504();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806B0);
  }
  return result;
}

unint64_t sub_100022820()
{
  unint64_t result = qword_1001806C0;
  if (!qword_1001806C0)
  {
    sub_10000B100(&qword_1001806C8);
    sub_10002289C();
    sub_1000225D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806C0);
  }
  return result;
}

unint64_t sub_10002289C()
{
  unint64_t result = qword_1001806D0;
  if (!qword_1001806D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806D0);
  }
  return result;
}

uint64_t sub_1000228F0()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_100022920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirDropAskRequestView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022984(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirDropAskRequestView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000229E0()
{
  return swift_retain();
}

uint64_t sub_1000229E8()
{
  return swift_release();
}

_WORD *initializeBufferWithCopyOfBuffer for PlatterEnvironmentModifier(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PlatterEnvironmentModifier(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatterEnvironmentModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100022B6CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatterEnvironmentModifier()
{
  return &type metadata for PlatterEnvironmentModifier;
}

unint64_t sub_100022BA8()
{
  unint64_t result = qword_1001806F8;
  if (!qword_1001806F8)
  {
    sub_10000B100(&qword_100180700);
    sub_100022390();
    sub_100022628();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001806F8);
  }
  return result;
}

uint64_t sub_100022C24()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100022C40()
{
  unint64_t result = qword_100180760;
  if (!qword_100180760)
  {
    sub_10000B100(&qword_100180740);
    sub_100022CBC();
    sub_100022DE8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180760);
  }
  return result;
}

unint64_t sub_100022CBC()
{
  unint64_t result = qword_100180768;
  if (!qword_100180768)
  {
    sub_10000B100(&qword_100180750);
    sub_100022D50(&qword_100180770, &qword_100180748);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180768);
  }
  return result;
}

uint64_t sub_100022D50(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    sub_10000F288(&qword_100180778, &qword_100180758);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100022DE8()
{
  unint64_t result = qword_100180780;
  if (!qword_100180780)
  {
    sub_10000B100(&qword_100180728);
    sub_10000B100(&qword_100180758);
    sub_10000B100(&qword_100180718);
    sub_10000F288(&qword_100180778, &qword_100180758);
    sub_10000F288(&qword_100180788, &qword_100180718);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180780);
  }
  return result;
}

uint64_t sub_100022F0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100022F58()
{
  unint64_t result = qword_1001807A0;
  if (!qword_1001807A0)
  {
    sub_10000B100(&qword_1001807A8);
    sub_100022C40();
    sub_100022D50(&qword_100180790, &qword_100180708);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001807A0);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for InteractiveSwipeModifier.DragState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InteractiveSwipeModifier.DragState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveSwipeModifier.DragState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveSwipeModifier.DragState()
{
  return &type metadata for InteractiveSwipeModifier.DragState;
}

uint64_t destroy for InteractiveSwipeModifier()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

__n128 initializeWithTake for InteractiveSwipeModifier(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for InteractiveSwipeModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractiveSwipeModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveSwipeModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveSwipeModifier()
{
  return &type metadata for InteractiveSwipeModifier;
}

uint64_t sub_100023418()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_100023434(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

uint64_t sub_100023468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v39 = a1;
  uint64_t v46 = a2;
  *(void *)&long long v40 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v40);
  uint64_t v42 = type metadata accessor for DragGesture();
  uint64_t v4 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  long long v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_1001807B0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000AA4C(&qword_1001807B8);
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  double v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_1001807C0);
  uint64_t v41 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = v2[4];
  long long v53 = v2[3];
  long long v54 = v14;
  long long v16 = v2[3];
  long long v15 = v2[4];
  long long v55 = v2[5];
  long long v50 = v16;
  long long v51 = v15;
  long long v52 = v2[5];
  sub_10000AA4C(&qword_1001807C8);
  GestureState.wrappedValue.getter();
  uint64_t v17 = *((void *)&v47 + 1);
  uint64_t v18 = v48;
  uint64_t v19 = sub_10000AA4C(&qword_1001807D0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v13, v39, v19);
  uint64_t v20 = &v13[*(int *)(v11 + 36)];
  *(void *)uint64_t v20 = v17;
  *((void *)v20 + 1) = v18;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  long long v47 = v53;
  long long v48 = v54;
  long long v49 = v55;
  GestureState.projectedValue.getter();
  char v21 = v50;
  uint64_t v22 = *((void *)&v50 + 1);
  long long v23 = v51;
  long long v40 = v52;
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v24 + 96) = v25;
  *(_OWORD *)(v24 + 112) = *(_OWORD *)(v3 + 96);
  *(unsigned char *)(v24 + 128) = *(unsigned char *)(v3 + 112);
  long long v26 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v24 + 32) = v26;
  long long v27 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v24 + 64) = v27;
  uint64_t v28 = v42;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v42);
  uint64_t v29 = &v9[*(int *)(v7 + 44)];
  char *v29 = v21;
  *((void *)v29 + 1) = v22;
  *((_OWORD *)v29 + 1) = v23;
  *((_OWORD *)v29 + 2) = v40;
  uint64_t v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v9[*(int *)(v7 + 48)];
  *uint64_t v30 = sub_100023BEC;
  v30[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v24;
  sub_100023BF4(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v28);
  uint64_t v31 = swift_allocObject();
  long long v32 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v31 + 80) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v31 + 96) = v32;
  *(_OWORD *)(v31 + 112) = *(_OWORD *)(v3 + 96);
  *(unsigned char *)(v31 + 128) = *(unsigned char *)(v3 + 112);
  long long v33 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v31 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v31 + 32) = v33;
  long long v34 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v31 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v31 + 64) = v34;
  sub_100023BF4(v3);
  sub_10000F288(&qword_1001807D8, &qword_1001807B0);
  uint64_t v35 = v43;
  Gesture.onEnded(_:)();
  swift_release();
  sub_10000F394((uint64_t)v9, &qword_1001807B0);
  static GestureMask.all.getter();
  sub_100023CC0();
  sub_10000F288((unint64_t *)&unk_1001807F0, &qword_1001807B8);
  uint64_t v36 = v44;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v36);
  return sub_10000F394((uint64_t)v13, &qword_1001807C0);
}

uint64_t sub_1000239D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DragGesture.Value.translation.getter();
  if (v6 > 0.0)
  {
    double v7 = *(double *)(a4 + 8);
    double v8 = fabs(v7);
    if (fabs(v6) >= 2.22044605e-16 && v8 >= 2.22044605e-16)
    {
      if (v6 >= 0.0) {
        double v10 = 1.0;
      }
      else {
        double v10 = -1.0;
      }
      double v6 = v10 * (v7 * (-1.0 / (v10 * (v6 / v7) * *(double *)(a4 + 16) + 1.0) + 1.0));
    }
  }
  *(void *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = v6;
  static Animation.interactiveSpring(response:dampingFraction:blendDuration:)();
  Transaction.animation.setter();
  sub_10000AA4C(&qword_10017FBD0);
  return Binding.wrappedValue.setter();
}

uint64_t sub_100023AD0(uint64_t a1, uint64_t a2)
{
  int v3 = Edge.rawValue.getter();
  if (v3 == Edge.rawValue.getter()) {
    double v4 = -1.0;
  }
  else {
    double v4 = 1.0;
  }
  uint64_t v5 = DragGesture.Value.predictedEndTranslation.getter();
  if (*(double *)a2 < v6 * v4 || (uint64_t v5 = DragGesture.Value.translation.getter(), *(double *)(a2 + 8) < v4 * v7)) {
    (*(void (**)(uint64_t))(a2 + 32))(v5);
  }
  sub_10000AA4C(&qword_10017FBD0);
  return Binding.wrappedValue.setter();
}

uint64_t sub_100023B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100023468(a1, a2);
}

uint64_t sub_100023BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000239D4(a1, a2, a3, v3 + 16);
}

uint64_t sub_100023BF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100023C60()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 129, 7);
}

uint64_t sub_100023CB8(uint64_t a1)
{
  return sub_100023AD0(a1, v1 + 16);
}

unint64_t sub_100023CC0()
{
  unint64_t result = qword_1001807E0;
  if (!qword_1001807E0)
  {
    sub_10000B100(&qword_1001807C0);
    sub_10000F288(&qword_1001807E8, &qword_1001807D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001807E0);
  }
  return result;
}

uint64_t sub_100023D60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100023E04(uint64_t a1)
{
  unint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = sub_100025E10(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_10018CE60) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_100023E84()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100180800);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100180800);
  if (qword_10017F788 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100024288()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SessionSceneDelegate();
  [super dealloc];
}

uint64_t type metadata accessor for SessionSceneDelegate()
{
  return self;
}

uint64_t sub_100024330()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100024374()
{
  return 1;
}

uint64_t sub_10002437C()
{
  return 1;
}

uint64_t sub_100024384()
{
  return 1;
}

void *sub_10002438C(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1000243D0(a1, a2);
}

void *sub_1000243D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_10018CE60);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v11 - v6);
  double v7 = (void *)UIHostingController.init(coder:rootView:)();
  double v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v9 = v7;
  v8(a2, v4);
  if (v7) {

  }
  return v7;
}

id sub_100024508(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecureHostingController();
  id v3 = [super initWithCoder:a1];

  return v3;
}

id sub_1000245A0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100024508(a3);
}

id sub_1000245C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureHostingController();
  return [super dealloc];
}

uint64_t type metadata accessor for SecureHostingController()
{
  return sub_10002929C();
}

uint64_t sub_10002465C()
{
  return swift_initClassMetadata2();
}

double sub_1000246A4(void *a1)
{
  id v1 = a1;
  sub_1000246E8();
  double v3 = v2;

  return v3;
}

id sub_1000246E8()
{
  return [*(id *)(v0 + qword_1001809F0) preferredContentSize];
}

void sub_100024700(void *a1)
{
  id v1 = a1;
  sub_100024760();
}

id sub_100024760()
{
  return [*(id *)(v0 + qword_1001809F0) setPreferredContentSize:];
}

void sub_100024778()
{
}

uint64_t sub_1000247D0(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

uint64_t sub_1000247E8()
{
  return 1;
}

uint64_t sub_1000247F0()
{
  return 1;
}

void sub_1000247F8()
{
  v33.receiver = v0;
  v33.super_class = (Class)type metadata accessor for LiveActivitiesHostingController();
  [super viewWillLayoutSubviews];
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10012A980;
  double v2 = *(void **)&v0[qword_1001809F0];
  id v3 = [v2 view];
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  id v5 = [v3 topAnchor];

  id v6 = [v0 view];
  if (!v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  double v7 = v6;
  id v8 = [v6 topAnchor];

  id v9 = [v5 constraintEqualToAnchor:v8];
  *(void *)(v1 + 32) = v9;
  id v10 = [v2 view];
  if (!v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v10;
  id v12 = [v10 leadingAnchor];

  id v13 = [v0 view];
  if (!v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v14 = v13;
  id v15 = [v13 leadingAnchor];

  id v16 = [v12 constraintEqualToAnchor:v15];
  *(void *)(v1 + 40) = v16;
  id v17 = [v2 view];
  if (!v17)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = v17;
  id v19 = [v17 trailingAnchor];

  id v20 = [v0 view];
  if (!v20)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  char v21 = v20;
  id v22 = [v20 trailingAnchor];

  id v23 = [v19 constraintEqualToAnchor:v22];
  *(void *)(v1 + 48) = v23;
  id v24 = [v2 view];
  if (!v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  long long v25 = v24;
  id v26 = [v24 bottomAnchor];

  id v27 = [v0 view];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = self;
    id v30 = [v28 bottomAnchor];

    id v31 = [v26 constraintEqualToAnchor:v30];
    *(void *)(v1 + 56) = v31;
    specialized Array._endMutation()();
    sub_10001FB40(0, &qword_100180AC0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v29 activateConstraints:isa];

    return;
  }
LABEL_17:
  __break(1u);
}

void sub_100024BA4(void *a1)
{
  id v1 = a1;
  sub_1000247F8();
}

void sub_100024BEC(char a1)
{
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for LiveActivitiesHostingController();
  [super viewIsAppearing:a1 & 1];
  sub_100024D28();
}

void sub_100024C74(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_100024BEC(a3);
}

void sub_100024CC8(void *a1)
{
  swift_unknownObjectRetain();
  id v2 = a1;
  sub_100028C14();
  swift_unknownObjectRelease();
}

void sub_100024D28()
{
  [v0 preferredContentSize];
  if (v2 == 0.0 && v1 == 0.0)
  {
    if (qword_10017F788 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B150(v3, (uint64_t)qword_10018D0C8);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "LiveActivitiesHostingController: skipping setMetrics because content size is 0", v5, 2u);
      swift_slowDealloc();
    }
LABEL_23:

    return;
  }
  id v6 = [v0 view];
  if (!v6)
  {
    __break(1u);
    return;
  }
  double v7 = v6;
  osos_log_t log = [v6 window];

  if (oslog)
  {
    id v8 = [oslog windowScene];
    if (v8)
    {
      id v9 = v8;
      type metadata accessor for ActivityScene();
      if (swift_dynamicCastClass())
      {
        if (qword_10017F788 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10000B150(v10, (uint64_t)qword_10018D0C8);
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 134218240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v13 + 12) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "LiveActivitiesHostingController: setMetrics with size {%f, %f}", (uint8_t *)v13, 0x16u);
          swift_slowDealloc();
        }

        id v14 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics());
        ActivitySceneMetrics.init(size:cornerRadius:)();
        dispatch thunk of ActivityScene.resolvedMetrics.setter();

        return;
      }
    }
    if (qword_10017F788 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B150(v15, (uint64_t)qword_10018D0C8);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "LiveActivitiesHostingController used in a scene that's not an ActivityScene", v18, 2u);
      swift_slowDealloc();
    }

    goto LABEL_23;
  }
}

void sub_1000250D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;

  sub_100028C18();
}

id sub_10002514C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveActivitiesHostingController();
  return [super dealloc];
}

void sub_1000251C0(uint64_t a1)
{
}

uint64_t type metadata accessor for LiveActivitiesHostingController()
{
  return sub_10002929C();
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewControllerFactory()
{
  return &type metadata for NearbySharingInteractionViewControllerFactory;
}

ValueMetadata *type metadata accessor for AirDropTransferSessionViewControllerFactory()
{
  return &type metadata for AirDropTransferSessionViewControllerFactory;
}

char *sub_100025208(void *a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100185A60);
  __chkstk_darwin(v3);
  id v5 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[qword_100186680] = 0;
  *(void *)&v1[qword_100186688] = 2;
  *(void *)&v1[qword_100186690] = 4;
  *(void *)&v1[qword_100186698] = 4;
  id v6 = &v1[qword_1001866A0];
  *id v6 = 0;
  v6[1] = 0;
  double v7 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(void *)&v1[qword_1001866A8] = SBUISystemApertureElementIdentifierAirDrop;
  v1[qword_1001866B0] = 1;
  uint64_t v8 = qword_1001866B8;
  id v9 = objc_allocWithZone((Class)type metadata accessor for SystemApertureElementTransitionCoordinator());
  uint64_t v10 = v1;
  id v11 = v7;
  *(void *)&v1[v8] = [v9 init];
  *(void *)&v10[qword_1001866C0] = 0;
  uint64_t v12 = qword_1001866C8;
  type metadata accessor for SystemApertureLayoutState();
  uint64_t v13 = swift_allocObject();
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  __asm { FMOV            V0.2D, #20.0 }
  long long v93 = _Q0;
  long long v94 = _Q0;
  Published.init(initialValue:)();
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  LOBYTE(v93) = 0;
  Published.init(initialValue:)();
  *(void *)&v10[v12] = v13;
  *(void *)&v10[qword_1001866D0] = 0;
  *(void *)&v10[qword_1001866D8] = 0;
  *(void *)&v10[qword_1001866E0] = 0;
  *(void *)&v10[qword_1001866E8] = 0;
  *(void *)&v10[qword_1001866F0] = 0;
  *(void *)&v10[qword_1001866F8] = 0;
  *(void *)&v10[qword_100186700] = 1;

  id v19 = (objc_class *)sub_10000AA4C((uint64_t *)&unk_100180AD0);
  v103.receiver = v10;
  v103.super_class = v19;
  uint64_t v87 = v19;
  id v20 = [super initWithNibName:0 bundle:0];
  uint64_t v21 = sub_100029220((unint64_t *)&qword_100180AE0, (void (*)(uint64_t))type metadata accessor for SystemApertureLayoutState);
  uint64_t v86 = (char *)v20;
  uint64_t v84 = v21;
  uint64_t v22 = EnvironmentObject.init()();
  uint64_t v85 = v23;
  sub_10010178C(a1, (uint64_t)v5);
  sub_100028D74(&qword_100185A80, &qword_100185A60, (void (*)(void))sub_100028C74);
  uint64_t v24 = AnyView.init<A>(_:)();
  uint64_t v25 = 0;
  if (a1)
  {
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100029220(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v26 = a1;
    uint64_t v25 = ObservedObject.init(wrappedValue:)();
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v91 = (char *)v25;
  uint64_t v92 = v27;
  sub_10000AA4C(&qword_100180B10);
  sub_100028D74(&qword_100180B18, &qword_100180B10, (void (*)(void))sub_100028DEC);
  uint64_t v90 = AnyView.init<A>(_:)();
  uint64_t v89 = AnyView.init<A>(_:)();
  id v83 = a1;
  uint64_t v88 = v24;
  uint64_t v28 = 0;
  if (a1)
  {
    type metadata accessor for NearbySharingInteractionViewModel(0);
    sub_100029220(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    id v29 = a1;
    uint64_t v28 = ObservedObject.init(wrappedValue:)();
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t v91 = (char *)v28;
  uint64_t v92 = v30;
  uint64_t v31 = AnyView.init<A>(_:)();
  long long v32 = v86;
  uint64_t v33 = *(void *)&v86[qword_1001866C8];
  swift_retain();
  uint64_t v34 = static ObservableObject.environmentStore.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = swift_getKeyPath();
  uint64_t v84 = qword_1001866B8;
  unint64_t v37 = *(void **)&v32[qword_1001866B8];
  uint64_t v91 = (char *)v22;
  uint64_t v92 = v85;
  *(void *)&long long v93 = v88;
  *((void *)&v93 + 1) = v90;
  *(void *)&long long v94 = v89;
  *((void *)&v94 + 1) = v31;
  __int16 v95 = 1;
  uint64_t v96 = 4;
  uint64_t v97 = v34;
  uint64_t v98 = v33;
  uint64_t v99 = KeyPath;
  char v100 = 1;
  uint64_t v101 = v36;
  uint64_t v102 = v37;
  v82[5] = v22;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v85 = v31;
  swift_retain_n();
  v82[3] = v34;
  swift_retain();
  v82[4] = v33;
  swift_retain();
  v82[2] = KeyPath;
  swift_retain();
  v82[1] = v36;
  swift_retain();
  swift_unknownObjectRetain();
  id v38 = v37;
  sub_10000AA4C(&qword_100180B28);
  sub_100028F30();
  AnyView.init<A>(_:)();
  uint64_t v39 = (objc_class *)type metadata accessor for SystemApertureAccessoryViewController();
  id v40 = objc_allocWithZone(v39);
  uint64_t v41 = sub_10011ACC0();
  uint64_t v42 = *(void **)&v32[qword_1001866C0];
  *(void *)&v32[qword_1001866C0] = v41;
  double v43 = v41;

  uint64_t v44 = *(void **)&v32[v84];
  *((void *)&v93 + 1) = v87;
  *(void *)&long long v94 = &off_10016E230;
  uint64_t v91 = v32;
  uint64_t v45 = (uint64_t)v44 + OBJC_IVAR____TtC9AirDropUI42SystemApertureElementTransitionCoordinator_delegate;
  swift_beginAccess();
  uint64_t v46 = v32;
  id v47 = v44;
  sub_100029164((uint64_t)&v91, v45);
  swift_endAccess();

  [v46 addChildViewController:v43];
  unint64_t result = (char *)[v46 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_21;
  }
  long long v49 = result;
  unint64_t result = (char *)[v43 view];
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  long long v50 = result;
  [v49 addSubview:result];

  [v43 didMoveToParentViewController:v46];
  id v51 = objc_allocWithZone(v39);
  swift_retain();
  long long v52 = sub_10011ACC0();
  long long v53 = *(void **)&v46[qword_1001866D8];
  *(void *)&v46[qword_1001866D8] = v52;
  long long v54 = v52;

  long long v55 = *(void **)&v54[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  uint64_t v56 = *(void **)&v46[qword_1001866D0];
  *(void *)&v46[qword_1001866D0] = v55;
  id v57 = v55;

  [v46 addChildViewController:v54];
  unint64_t result = (char *)[v46 view];
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v58 = result;
  unint64_t result = (char *)[v54 view];
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v59 = result;
  [v58 addSubview:result];

  [v54 didMoveToParentViewController:v46];
  id v60 = objc_allocWithZone(v39);
  swift_retain();
  uint64_t v61 = sub_10011ACC0();
  uint64_t v62 = *(void **)&v46[qword_1001866E8];
  *(void *)&v46[qword_1001866E8] = v61;
  __int16 v63 = v61;

  uint64_t v64 = *(void **)&v63[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  int v65 = *(void **)&v46[qword_1001866E0];
  *(void *)&v46[qword_1001866E0] = v64;
  id v66 = v64;

  [v46 addChildViewController:v63];
  unint64_t result = (char *)[v46 view];
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v67 = result;
  unint64_t result = (char *)[v63 view];
  if (!result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v68 = result;
  [v67 addSubview:result];

  [v63 didMoveToParentViewController:v46];
  id v69 = objc_allocWithZone(v39);
  swift_retain();
  uint64_t v70 = sub_10011ACC0();
  uint64_t v71 = *(void **)&v46[qword_1001866F8];
  *(void *)&v46[qword_1001866F8] = v70;
  uint64_t v72 = v70;

  uint64_t v73 = *(void **)&v72[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view];
  uint64_t v74 = *(void **)&v46[qword_1001866F0];
  *(void *)&v46[qword_1001866F0] = v73;
  id v75 = v73;

  [v46 addChildViewController:v72];
  unint64_t result = (char *)[v46 view];
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v76 = result;
  unint64_t result = (char *)[v72 view];
  if (!result)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v77 = result;
  [v76 addSubview:result];

  uint64_t v78 = v46;
  [v72 didMoveToParentViewController:v78];

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v79 = *(void *)&v78[qword_100186700];
  if ((v79 & 8) == 0) {
    *(void *)&v78[qword_100186700] = v79 | 8;
  }

  uint64_t v80 = qword_100186690;
  uint64_t v81 = *(void *)&v78[qword_100186690];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v81 != 4) {
    *(void *)&v78[v80] = 4;
  }
  return v78;
}

uint64_t sub_100025CC4@<X0>(unsigned char *a1@<X8>)
{
  sub_1000291CC();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100025D14()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_100025D60@<X0>(void *a1@<X8>)
{
  sub_10000A8AC();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100025DB0()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_100025E10(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - v1);
  return UIHostingController.init(rootView:)();
}

id sub_100025EF8(uint64_t a1)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100180800);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain();
    sub_100047F98(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Creating AirDropTransfer system aperture view controller for transfer ID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  id v8 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureViewController());
  uint64_t v9 = swift_retain();
  id v10 = sub_1000747B8(v9);
  swift_release();
  return v10;
}

char *sub_1000260E0(long long *a1)
{
  uint64_t v3 = type metadata accessor for UIHostingControllerSizingOptions();
  __chkstk_darwin(v3);
  long long v28 = *a1;
  os_log_type_t v4 = (void *)*((void *)a1 + 3);
  id v5 = objc_allocWithZone((Class)sub_10000AA4C((uint64_t *)&unk_100180BE0));
  long long v6 = a1[1];
  long long v25 = *a1;
  long long v26 = v6;
  char v27 = *((unsigned char *)a1 + 32);
  sub_100029270((uint64_t)&v28);
  id v7 = v4;
  id v8 = v1;
  uint64_t v9 = (void *)UIHostingController.init(rootView:)();
  sub_10000AA4C((uint64_t *)&unk_100180BB0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10012A270;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  *(void *)&long long v25 = v10;
  sub_100029220((unint64_t *)&unk_100186800, (void (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions);
  sub_10000AA4C((uint64_t *)&unk_100180BC0);
  sub_10000F288((unint64_t *)&unk_100186810, (uint64_t *)&unk_100180BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of UIHostingController.sizingOptions.setter();
  *(void *)&v8[qword_1001809F0] = v9;
  id v11 = v9;

  v24.receiver = v8;
  v24.super_class = (Class)sub_10000AA4C(&qword_100180BD8);
  uint64_t v12 = (char *)[super initWithNibName:0 bundle:0];
  uint64_t result = (char *)[v12 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v14 = result;
  uint64_t v15 = qword_1001809F0;
  uint64_t result = (char *)[*(id *)&v12[qword_1001809F0] view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v16 = result;
  [v14 addSubview:result];

  [v12 addChildViewController:*(void *)&v12[v15]];
  uint64_t result = (char *)[v12 view];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  os_log_type_t v17 = result;
  uint64_t v18 = self;
  id v19 = [v18 clearColor];
  [v17 setBackgroundColor:v19];

  uint64_t result = (char *)[v11 view];
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v20 = result;
  id v21 = [v18 clearColor];
  [v20 setBackgroundColor:v21];

  uint64_t result = (char *)[v12 view];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v22 = result;
  [result setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t result = (char *)[v11 view];
  if (result)
  {
    uint64_t v23 = result;
    [result setTranslatesAutoresizingMaskIntoConstraints:0];

    return v12;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_1000264C4(uint64_t a1)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100180800);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v16 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain();
    sub_100047F98(v6, v7, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Creating AirDropTransfer hosting controller for transfer ID: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  type metadata accessor for AirDropTransferSession();
  sub_100029220((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
  swift_retain();
  uint64_t v8 = ObservedObject.init(wrappedValue:)();
  uint64_t v10 = v9;
  id v11 = [objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
  if (qword_10017F600 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v12 = v16;
  *(void *)&long long v16 = v8;
  *((void *)&v16 + 1) = v10;
  char v17 = 0;
  id v18 = v11;
  char v19 = v12;
  id v13 = objc_allocWithZone((Class)sub_10000AA4C(&qword_100180BD8));
  id v14 = sub_1000260E0(&v16);

  swift_release();
  return v14;
}

char *sub_1000267D4(void *a1)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100180800);
  id v3 = a1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v13 = v7;
    type metadata accessor for UUID();
    sub_100029220((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100047F98(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating system aperture view controller for nearby sharing interaction with ID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v10 = objc_allocWithZone((Class)sub_10000AA4C((uint64_t *)&unk_100180AD0));
  id v11 = v3;
  return sub_100025208(v3);
}

char *sub_1000269F0(void *a1)
{
  uint64_t v3 = type metadata accessor for UIHostingControllerSizingOptions();
  __chkstk_darwin(v3);
  id v4 = objc_allocWithZone((Class)sub_10000AA4C(&qword_100180BA8));
  id v5 = a1;
  uint64_t v6 = v1;
  uint64_t v7 = (void *)UIHostingController.init(rootView:)();
  sub_10000AA4C((uint64_t *)&unk_100180BB0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10012A270;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  uint64_t v23 = v8;
  sub_100029220((unint64_t *)&unk_100186800, (void (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions);
  sub_10000AA4C((uint64_t *)&unk_100180BC0);
  sub_10000F288((unint64_t *)&unk_100186810, (uint64_t *)&unk_100180BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of UIHostingController.sizingOptions.setter();
  *(void *)&v6[qword_1001809F0] = v7;
  id v9 = v7;

  v22.receiver = v6;
  v22.super_class = (Class)sub_10000AA4C(&qword_100180AC8);
  id v10 = [super initWithNibName:0 bundle:0];
  uint64_t result = (char *)[v10 view];
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  char v12 = result;
  uint64_t v13 = qword_1001809F0;
  uint64_t result = (char *)[*(id *)&v10[qword_1001809F0] view];
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v14 = result;
  [v12 addSubview:result];

  [v10 addChildViewController:*(void *)&v10[v13]];
  uint64_t result = (char *)[v10 view];
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = result;
  long long v16 = self;
  id v17 = [v16 clearColor];
  [v15 setBackgroundColor:v17];

  uint64_t result = (char *)[v9 view];
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v18 = result;
  id v19 = [v16 clearColor];
  [v18 setBackgroundColor:v19];

  uint64_t result = (char *)[v10 view];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v20 = result;
  [result setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t result = (char *)[v9 view];
  if (result)
  {
    id v21 = result;
    [result setTranslatesAutoresizingMaskIntoConstraints:0];

    return v10;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_100026DAC(void *a1)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100180800);
  id v3 = a1;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v14 = v7;
    type metadata accessor for UUID();
    sub_100029220((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100047F98(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating live activities view controller for nearby sharing interaction with ID: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v10 = objc_allocWithZone((Class)sub_10000AA4C(&qword_100180AC8));
  id v11 = v3;
  char v12 = sub_1000269F0(v3);

  return v12;
}

void sub_100026FD8(void *a1, void *a2)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_100180800);
  id v5 = a2;
  id v6 = a1;
  id v7 = v5;
  id v8 = v6;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v142[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [v7 role];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v143 = sub_100047F98(v13, v15, v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    type metadata accessor for ActivityScene();
    if (swift_dynamicCastClass()
      && (swift_getKeyPath(), dispatch thunk of ActivityScene.subscript.getter(), swift_release(), (unint64_t v16 = v144) != 0))
    {
      uint64_t v17 = v143;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xE500000000000000;
      uint64_t v17 = 0x3E6C696E3CLL;
    }
    uint64_t v143 = sub_100047F98(v17, v16, v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SessionSceneDelegate: Scene will connect called with role: %s, activity identifier: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  type metadata accessor for ActivityScene();
  uint64_t v18 = swift_dynamicCastClass();
  if (!v18)
  {
    long long v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "SessionSceneDelegate: Received a UIScene that is not of type SessionScene.", v30, 2u);
      swift_slowDealloc();
    }
    goto LABEL_16;
  }
  id v19 = (void *)v18;
  id v20 = v8;
  id v21 = [v20 session];
  id v22 = [v21 role];

  uint64_t v23 = (void *)static UISceneSessionRole.activityBanner.getter();
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0) {
      goto LABEL_21;
    }
  }
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  *(unsigned char *)(qword_10018D170 + 48) = 1;
LABEL_21:
  id v32 = v20;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v143 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    id v36 = [v19 description];
    unint64_t v37 = v19;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    uint64_t v41 = v38;
    id v19 = v37;
    v142[0] = sub_100047F98(v41, v40, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "SessionSceneDelegate: Connecting session scene: %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_getKeyPath();
  dispatch thunk of ActivityScene.subscript.getter();
  swift_release();
  uint64_t v42 = v144;
  double v43 = &off_10017F000;
  uint64_t v44 = &unk_10018C000;
  if (v144)
  {
    uint64_t v45 = v143;
    if (qword_10017F610 != -1) {
      swift_once();
    }
    uint64_t v46 = qword_10018CE80;
    uint64_t v47 = sub_100031DA0(v45, v42);
    id v48 = objc_retain(*(id *)(v46
                            + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
    uint64_t v49 = v45;
    uint64_t v50 = v47;
    uint64_t v44 = &unk_10018C000;
    unint64_t v51 = (unint64_t)sub_1000AD5BC(v49, v42);

    swift_bridgeObjectRelease();
    if (v50 | v51) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v58 = v32;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v138 = v51;
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v137 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412290;
      uint64_t v143 = (uint64_t)v19;
      uint64_t v62 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v137 = v19;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unable to find an AirDrop transfer, nearby sharing interaction, or background activity to represent with session scene: %@", v61, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v51 = v138;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v59 = v58;
    }

    goto LABEL_39;
  }
  long long v52 = v32;
  long long v53 = Logger.logObject.getter();
  uint64_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, (os_log_type_t)v54))
  {
    long long v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v55 = 138412290;
    uint64_t v143 = (uint64_t)v19;
    id v57 = v52;
    double v43 = &off_10017F000;
    uint64_t v44 = (void *)&unk_10018C000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v56 = v19;

    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "Falling back to first AirDrop transfer for session scene with missing activity ID: %@", v55, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    long long v53 = v52;
  }

  if (v43[194] != (_UNKNOWN *)-1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v50 = sub_10010BBA0(v143);
  swift_bridgeObjectRelease();
  unint64_t v51 = 0;
  if (!v50) {
    goto LABEL_35;
  }
LABEL_39:
  unsigned int v63 = [v19 SBUI_isHostedBySystemAperture];
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.default.getter();
  BOOL v66 = os_log_type_enabled(v64, v65);
  if (v63)
  {
    uint64_t v139 = (void *)v51;
    if (v66)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "SessionSceneDelegate: Received ActivityKit scene hosted by system aperture", v67, 2u);
      swift_slowDealloc();
    }

    swift_getKeyPath();
    dispatch thunk of ActivityScene.subscript.getter();
    swift_release();
    uint64_t v68 = v144;
    if (v144)
    {
      uint64_t v69 = v143;
    }
    else
    {
      id v76 = [v19 session];
      id v77 = [v76 persistentIdentifier];

      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v68 = v78;
    }
    if (qword_10017F610 != -1) {
      swift_once();
    }
    uint64_t v79 = &qword_100180000;
    if (*(void *)(*(void *)(v44[464]
                               + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                   + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
    {
      uint64_t v80 = v19;
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v81, v82))
      {
        id v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Creating system aperture view controller for nearby sharing interaction failure", v83, 2u);
        uint64_t v79 = &qword_100180000;
        swift_slowDealloc();
      }

      id v84 = objc_allocWithZone((Class)sub_10000AA4C((uint64_t *)&unk_100180AD0));
      uint64_t v85 = sub_100025208(0);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "SessionSceneDelegate: using boop failure", v88, 2u);
        uint64_t v79 = &qword_100180000;
        swift_slowDealloc();
      }

      goto LABEL_85;
    }
    id v90 = v32;
    uint64_t v91 = (uint64_t *)(v140 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_systemApertureElementProvidersByID);
    swift_beginAccess();
    uint64_t v92 = *v91;
    if (*(void *)(*v91 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v93 = sub_100048730(v69, v68);
      if (v94)
      {
        uint64_t v80 = v19;
        uint64_t v85 = *(void **)(*(void *)(v92 + 56) + 8 * v93);
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int16 v95 = Logger.logObject.getter();
        os_log_type_t v96 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v95, v96))
        {

          swift_unknownObjectRelease();
          goto LABEL_84;
        }
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v97 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "SessionSceneDelegate: using cachedSystemApertureElementProvider", v97, 2u);
        uint64_t v79 = &qword_100180000;
        swift_slowDealloc();
        swift_unknownObjectRelease();
LABEL_76:

LABEL_84:
        id v32 = v90;
LABEL_85:
        swift_getObjectType();
        uint64_t v119 = swift_conformsToProtocol2();
        if (v119) {
          uint64_t v120 = v119;
        }
        else {
          uint64_t v120 = 0;
        }
        if (v119) {
          uint64_t v121 = v85;
        }
        else {
          uint64_t v121 = 0;
        }
        if (v50)
        {
          if (v121)
          {
            *(void *)(v50 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate + 8) = v120;
            swift_unknownObjectWeakAssign();
          }
        }
        swift_unknownObjectRetain();
        [v80 setSystemApertureElementViewControllerProvider:v85];
        v122 = (uint64_t *)(v140 + v79[260]);
        swift_beginAccess();
        swift_unknownObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v141 = *v122;
        uint64_t *v122 = 0x8000000000000000;
        sub_1000B718C((uint64_t)v85, v69, v68, isUniquelyReferenced_nonNull_native);
        uint64_t *v122 = v141;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();

        swift_unknownObjectRelease_n();
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v139)
    {
      uint64_t v80 = v19;
      __int16 v95 = v139;
      uint64_t v85 = sub_1000267D4(v95);
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "SessionSceneDelegate: using nearbySharingInteractionViewModel", v107, 2u);
        uint64_t v79 = &qword_100180000;
        swift_slowDealloc();
      }

      goto LABEL_76;
    }
    uint64_t v80 = v19;
    if (v50)
    {
      uint64_t v108 = swift_retain();
      uint64_t v85 = sub_100025EF8(v108);
      uint64_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v111 = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "SessionSceneDelegate: using airDropTransferSession", v111, 2u);
        uint64_t v79 = &qword_100180000;
        swift_slowDealloc();
      }

      swift_release();
      goto LABEL_85;
    }
    swift_bridgeObjectRelease();
    id v124 = v32;
    long long v28 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v125))
    {
      uint64_t v126 = (uint8_t *)swift_slowAlloc();
      v127 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v126 = 138412290;
      v142[0] = (uint64_t)v19;
      id v128 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v127 = v19;

      _os_log_impl((void *)&_mh_execute_header, v28, v125, "Unable to find an AirDrop transfer or a nearby sharing interaction to show in system aperture scene: %@", v126, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
LABEL_16:

    return;
  }
  if (v66)
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "SessionSceneDelegate: Received ActivityKit scene not hosted in system aperture", v70, 2u);
    swift_slowDealloc();
  }

  if (qword_10017F610 != -1) {
    swift_once();
  }
  if (*(void *)(*(void *)(v44[464]
                             + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity))
  {
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Creating live activities view controller for nearby sharing interaction failure", v73, 2u);
      swift_slowDealloc();
    }

    id v74 = objc_allocWithZone((Class)sub_10000AA4C(&qword_100180AC8));
    id v75 = sub_1000269F0(0);
    goto LABEL_70;
  }
  if (v51)
  {
    id v89 = (id)v51;
    id v75 = sub_100026DAC(v89);

LABEL_70:
    id v101 = objc_allocWithZone((Class)type metadata accessor for SFSecureWindow());
    uint64_t v102 = v75;
    id v103 = [v101 initWithWindowScene:v19];
    [v103 setRootViewController:v102];
    [v103 makeKeyAndVisible];
    uint64_t v104 = *(void **)(v140 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_window);
    *(void *)(v140 + OBJC_IVAR____TtC9AirDropUI20SessionSceneDelegate_window) = v103;

    swift_release();
    return;
  }
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v98 = (void *)static NSUserDefaults.airdrop.getter();
  char v99 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  if (v50 && (v99 & 1) != 0)
  {
    uint64_t v100 = swift_retain();
    id v75 = sub_1000264C4(v100);
    swift_release();
    goto LABEL_70;
  }
  uint64_t v112 = v32;
  __int16 v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v113, v114))
  {
    long long v115 = (uint8_t *)swift_slowAlloc();
    unsigned __int16 v116 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v115 = 138412290;
    uint64_t v143 = (uint64_t)v19;
    unsigned __int8 v117 = v19;
    char v118 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned __int16 v116 = v117;

    _os_log_impl((void *)&_mh_execute_header, v113, v114, "Unable to find an AirDrop transfer or a nearby sharing interaction to represent with session scene: %@", v115, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    __int16 v113 = v112;
  }

  id v129 = [v112 session];
  id v130 = [v129 role];

  uint64_t v131 = (void *)static UISceneSessionRole.activityBanner.getter();
  uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v134 = v133;
  if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v134 == v135)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v136 & 1) == 0)
    {

      swift_release();
      return;
    }
  }
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10010FDEC(0);
  swift_release();

  swift_release();
}

void sub_100028498(void *a1)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100180800);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    id v7 = [v3 session];
    id v8 = [v7 role];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    uint64_t v29 = sub_100047F98(v9, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    type metadata accessor for ActivityScene();
    if (swift_dynamicCastClass()
      && (swift_getKeyPath(), dispatch thunk of ActivityScene.subscript.getter(), swift_release(), (unint64_t v12 = v30) != 0))
    {
      uint64_t v13 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xE500000000000000;
      uint64_t v13 = 0x3E6C696E3CLL;
    }
    uint64_t v29 = sub_100047F98(v13, v12, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SessionSceneDelegate: sceneDidDisconnect with role: %s, activity identifier: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = [v3 session];
  id v15 = [v14 role];

  unint64_t v16 = (void *)static UISceneSessionRole.activityBanner.getter();
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10010FDEC(0);
  swift_release();
LABEL_17:
  type metadata accessor for ActivityScene();
  if (swift_dynamicCastClass())
  {
    swift_getKeyPath();
    id v22 = v3;
    dispatch thunk of ActivityScene.subscript.getter();
    swift_release();
    uint64_t v23 = v30;
    if (v30)
    {
      uint64_t v24 = v29;
      if (qword_10017F610 != -1) {
        swift_once();
      }
      id v25 = objc_retain(*(id *)(qword_10018CE80
                              + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
      sub_1000A61AC(v24, v23);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v22 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "SessionSceneDelegate: Received a UIScene that is not of type SessionScene.", v27, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10002898C(void *a1, const char *a2)
{
  if (qword_10017F5F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_100180800);
  id v13 = a1;
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    id v8 = [v13 session];
    id v9 = [v8 role];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    sub_100047F98(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100028BB8()
{
}

void sub_100028C18()
{
}

uint64_t sub_100028C48()
{
  return SceneSettingScopes.ActivitySettings.activityIdentifier.getter();
}

unint64_t sub_100028C74()
{
  unint64_t result = qword_100180AF0;
  if (!qword_100180AF0)
  {
    sub_10000B100(&qword_100180AF8);
    sub_100028D20();
    sub_100029220(&qword_100180B08, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionFailureView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180AF0);
  }
  return result;
}

unint64_t sub_100028D20()
{
  unint64_t result = qword_100180B00;
  if (!qword_100180B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B00);
  }
  return result;
}

uint64_t sub_100028D74(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100028DEC()
{
  unint64_t result = qword_100180B20;
  if (!qword_100180B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B20);
  }
  return result;
}

uint64_t sub_100028E40@<X0>(unsigned char *a1@<X8>)
{
  sub_1000291CC();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100028E90()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_100028EDC@<X0>(void *a1@<X8>)
{
  sub_10000A8AC();
  uint64_t result = EnvironmentValues.subscript.getter();
  *a1 = v3;
  return result;
}

unint64_t sub_100028F30()
{
  unint64_t result = qword_100180B30;
  if (!qword_100180B30)
  {
    sub_10000B100(&qword_100180B28);
    sub_100028FD0();
    sub_10000F288(&qword_100180B80, &qword_100180B88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B30);
  }
  return result;
}

unint64_t sub_100028FD0()
{
  unint64_t result = qword_100180B38;
  if (!qword_100180B38)
  {
    sub_10000B100(&qword_100180B40);
    sub_100029070();
    sub_10000F288(&qword_100180B70, &qword_100180B78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B38);
  }
  return result;
}

unint64_t sub_100029070()
{
  unint64_t result = qword_100180B48;
  if (!qword_100180B48)
  {
    sub_10000B100(&qword_100180B50);
    sub_100029110();
    sub_10000F288(&qword_100180B60, &qword_100180B68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B48);
  }
  return result;
}

unint64_t sub_100029110()
{
  unint64_t result = qword_100180B58;
  if (!qword_100180B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B58);
  }
  return result;
}

uint64_t sub_100029164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_10017FB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000291CC()
{
  unint64_t result = qword_100180B98;
  if (!qword_100180B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180B98);
  }
  return result;
}

uint64_t sub_100029220(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029270(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002929C()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000292CC(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(reflecting:)();
}

uint64_t destroy for AirDropIncomingPreviewImage(uint64_t a1)
{
  swift_release();
  uint64_t result = *(void *)(a1 + 32);
  if ((unint64_t)(result - 1) >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  os_log_type_t v5 = (void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_retain();
  if ((unint64_t)(v6 - 1) >= 2)
  {
    *(void *)(a1 + 24) = *v5;
    *(void *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32) - 1;
  if ((unint64_t)(*(void *)(a1 + 32) - 1) >= 2)
  {
    if (v4 >= 2)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_10000F394(a1 + 24, &qword_1001800D0);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_8:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AirDropIncomingPreviewImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  os_log_type_t v5 = (void *)(a2 + 24);
  if ((unint64_t)(*(void *)(a1 + 32) - 1) >= 2)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    if ((unint64_t)(v6 - 1) >= 2)
    {
      *(void *)(a1 + 24) = *v5;
      *(void *)(a1 + 32) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10000F394(a1 + 24, &qword_1001800D0);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
LABEL_6:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropIncomingPreviewImage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropIncomingPreviewImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropIncomingPreviewImage()
{
  return &type metadata for AirDropIncomingPreviewImage;
}

uint64_t sub_1000296A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000296BC()
{
  uint64_t v1 = sub_10000AA4C(&qword_100180C50);
  __chkstk_darwin(v1 - 8);
  long long v3 = (uint64_t *)((char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_10000AA4C(&qword_100180C58);
  uint64_t v5 = __chkstk_darwin(v4);
  id v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)v23 - v8;
  uint64_t v10 = sub_10000AA4C(&qword_100180C60);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100180C68);
  __chkstk_darwin(v13);
  id v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    if (qword_10017F6B0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  if (*(unsigned char *)(v0 + 16))
  {
    if (qword_10017F6A8 == -1) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  if (qword_10017F6A0 != -1) {
LABEL_14:
  }
    swift_once();
LABEL_8:
  sub_10002B508((_OWORD *)(v0 + 24), &v24);
  sub_10002B508(&v24, &v25);
  if (*((void *)&v25 + 1) == 2)
  {
LABEL_12:
    *long long v3 = static Alignment.bottomTrailing.getter();
    v3[1] = v18;
    uint64_t v19 = sub_10000AA4C(&qword_100180C70);
    sub_10002ADBC(v0, (uint64_t)v3 + *(int *)(v19 + 44));
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000F330((uint64_t)v3, (uint64_t)v7, &qword_100180C50);
    uint64_t v20 = &v7[*(int *)(v4 + 36)];
    long long v21 = v23[1];
    *(_OWORD *)uint64_t v20 = v23[0];
    *((_OWORD *)v20 + 1) = v21;
    *((_OWORD *)v20 + 2) = v23[2];
    sub_10000F394((uint64_t)v3, &qword_100180C50);
    unint64_t v16 = &qword_100180C58;
    sub_10000F2CC((uint64_t)v7, (uint64_t)v9, &qword_100180C58);
    sub_10000F330((uint64_t)v9, (uint64_t)v12, &qword_100180C58);
    swift_storeEnumTagMultiPayload();
    sub_10002B518();
    sub_10002BC08();
    _ConditionalContent<>.init(storage:)();
    uint64_t v17 = (uint64_t)v9;
    return sub_10000F394(v17, v16);
  }
  if (*((void *)&v25 + 1) != 1)
  {
    sub_10000F2CC((uint64_t)&v25, (uint64_t)v26, &qword_1001800D0);
    goto LABEL_12;
  }
  sub_100029AC4((uint64_t)v15);
  unint64_t v16 = &qword_100180C68;
  sub_10000F330((uint64_t)v15, (uint64_t)v12, &qword_100180C68);
  swift_storeEnumTagMultiPayload();
  sub_10002B518();
  sub_10002BC08();
  _ConditionalContent<>.init(storage:)();
  uint64_t v17 = (uint64_t)v15;
  return sub_10000F394(v17, v16);
}

uint64_t sub_100029AC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v112 = a1;
  id v100 = (id)sub_10000AA4C(&qword_100180D78);
  __chkstk_darwin(v100);
  long long v3 = (char *)&v86 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100180D60);
  __chkstk_darwin(v4);
  id v101 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000AA4C(&qword_100180D50);
  __chkstk_darwin(v113);
  id v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000AA4C(&qword_100180D80);
  __chkstk_darwin(v109);
  uint64_t v111 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000AA4C(&qword_100180D88);
  __chkstk_darwin(v103);
  uint64_t v104 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000AA4C(&qword_100180C88);
  __chkstk_darwin(v110);
  uint64_t v105 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for RoundedRectangle();
  uint64_t v11 = __chkstk_darwin(v108);
  char v99 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v93 = (char *)&v86 - v13;
  uint64_t v90 = sub_10000AA4C(&qword_100180D20);
  __chkstk_darwin(v90);
  uint64_t v91 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Image.ResizingMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000AA4C(&qword_100180CE8);
  __chkstk_darwin(v87);
  uint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000AA4C(&qword_100180CD8);
  __chkstk_darwin(v88);
  uint64_t v92 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000AA4C(&qword_100180CC8);
  __chkstk_darwin(v89);
  uint64_t v106 = (uint64_t)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000AA4C(&qword_100180CB8);
  __chkstk_darwin(v94);
  uint64_t v107 = (uint64_t)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000AA4C(&qword_100180CA8);
  __chkstk_darwin(v97);
  os_log_type_t v96 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000AA4C(&qword_100180C98);
  uint64_t v25 = __chkstk_darwin(v102);
  __int16 v95 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v98 = (uint64_t)&v86 - v27;
  os_log_type_t v114 = v1;
  long long v129 = *v1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)&v129);
  if (v115 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_100021E60((uint64_t)&v129);
    if (v115)
    {
      id v101 = (char *)v4;
      id v100 = v115;
      Image.init(uiImage:)();
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
      uint64_t v86 = Image.resizable(capInsets:resizingMode:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      id v28 = v115;
      char v29 = v116;
      uint64_t v30 = v117;
      char v31 = LOBYTE(v118);
      uint64_t v32 = v119;
      uint64_t v33 = v120;
      if (sub_10002BCC0()) {
        double v34 = 15.0;
      }
      else {
        double v34 = 0.0;
      }
      uint64_t v35 = static Alignment.center.getter();
      uint64_t v37 = v36;
      uint64_t v38 = v91;
      sub_10002B0B4(v91);
      unint64_t v39 = (uint64_t *)(v38 + *(int *)(v90 + 36));
      *unint64_t v39 = v35;
      v39[1] = v37;
      sub_10000F330(v38, (uint64_t)&v20[*(int *)(v87 + 36)], &qword_100180D20);
      *(void *)uint64_t v20 = v86;
      *((void *)v20 + 1) = 0;
      *((_WORD *)v20 + 8) = 257;
      *((void *)v20 + 3) = v28;
      v20[32] = v29;
      *((void *)v20 + 5) = v30;
      v20[48] = v31;
      *((void *)v20 + 7) = v32;
      *((void *)v20 + 8) = v33;
      *((double *)v20 + 9) = v34;
      v20[80] = 0;
      sub_10000F394(v38, &qword_100180D20);
      uint64_t v40 = v92;
      sub_10000F330((uint64_t)v20, v92, &qword_100180CE8);
      *(_WORD *)(v40 + *(int *)(v88 + 36)) = 0;
      sub_10000F394((uint64_t)v20, &qword_100180CE8);
      uint64_t v41 = v93;
      uint64_t v42 = &v93[*(int *)(v108 + 20)];
      uint64_t v43 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v44 = type metadata accessor for RoundedCornerStyle();
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104);
      LODWORD(v91) = v43;
      uint64_t v90 = (uint64_t)v45;
      v45(v42, v43, v44);
      __asm { FMOV            V0.2D, #11.0 }
      *uint64_t v41 = _Q0;
      uint64_t v51 = v106;
      uint64_t v52 = v106 + *(int *)(v89 + 36);
      sub_10002BFEC((uint64_t)v41, v52, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      uint64_t v53 = sub_10000AA4C(&qword_100185120);
      *(_WORD *)(v52 + *(int *)(v53 + 36)) = 256;
      sub_10000F330(v40, v51, &qword_100180CD8);
      sub_10002C054((uint64_t)v41, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      sub_10000F394(v40, &qword_100180CD8);
      if (qword_10017F600 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      if (LOBYTE(v123) == 1) {
        uint64_t v54 = static Color.green.getter();
      }
      else {
        uint64_t v54 = static Color.clear.getter();
      }
      uint64_t v65 = v54;
      StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
      double v66 = v123;
      uint64_t v67 = v125;
      uint64_t v68 = v126;
      uint64_t v69 = v127;
      swift_retain();
      uint64_t v70 = static Alignment.center.getter();
      uint64_t v72 = v71;
      uint64_t v73 = v106;
      uint64_t v74 = v107;
      sub_10000F330(v106, v107, &qword_100180CC8);
      swift_release();
      uint64_t v75 = v74 + *(int *)(v94 + 36);
      *(double *)uint64_t v75 = v66 * 0.5;
      *(double *)(v75 + 8) = v66;
      *(void *)(v75 + 16) = v124;
      *(void *)(v75 + 24) = v67;
      *(void *)(v75 + 32) = v68;
      *(void *)(v75 + 40) = v69;
      *(void *)(v75 + 48) = v65;
      *(_WORD *)(v75 + 56) = 256;
      *(void *)(v75 + 64) = v70;
      *(void *)(v75 + 72) = v72;
      sub_10000F394(v73, &qword_100180CC8);
      if (*((unsigned char *)v114 + 40) & 1) != 0 && (v114[1])
      {
        if (qword_10017F6B8 != -1) {
          swift_once();
        }
        id v76 = &qword_10018CF68;
      }
      else
      {
        if (qword_10017F6C0 != -1) {
          swift_once();
        }
        id v76 = &qword_10018CF70;
      }
      uint64_t v77 = *v76;
      uint64_t v78 = (uint64_t *)v99;
      ((void (*)(char *, void, uint64_t))v90)(&v99[*(int *)(v108 + 20)], v91, v44);
      *uint64_t v78 = v77;
      v78[1] = v77;
      uint64_t v79 = (uint64_t)v96;
      uint64_t v80 = (uint64_t)&v96[*(int *)(v97 + 36)];
      sub_10002BFEC((uint64_t)v78, v80, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v80 + *(int *)(v53 + 36)) = 256;
      uint64_t v81 = v107;
      sub_10000F330(v107, v79, &qword_100180CB8);
      sub_10002C054((uint64_t)v78, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      sub_10000F394(v81, &qword_100180CB8);
      sub_10002B64C();
      uint64_t v82 = (uint64_t)v95;
      View.accessibilityHidden(_:)();
      sub_10000F394(v79, &qword_100180CA8);
      uint64_t v64 = &qword_100180C98;
      uint64_t v83 = v98;
      sub_10000F2CC(v82, v98, &qword_100180C98);
      sub_10000F330(v83, v104, &qword_100180C98);
      swift_storeEnumTagMultiPayload();
      sub_10002B5D0();
      sub_10002BB10();
      uint64_t v84 = (uint64_t)v105;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v84, v111, &qword_100180C88);
      swift_storeEnumTagMultiPayload();
      sub_10002B554();
      sub_10002BB8C();
      _ConditionalContent<>.init(storage:)();

      sub_10000F394(v84, &qword_100180C88);
      uint64_t v60 = v83;
      goto LABEL_27;
    }
  }
  uint64_t v55 = (uint64_t)v7;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100021E60((uint64_t)&v129);
  if (v115 != 1
    || (swift_getKeyPath(),
        swift_getKeyPath(),
        swift_retain(),
        static Published.subscript.getter(),
        swift_release(),
        swift_release(),
        sub_100021E60((uint64_t)&v129),
        !v115))
  {
    sub_10002B508((_OWORD *)((char *)v114 + 24), &v128);
    sub_10002B508(&v128, &v130);
    if (*((void *)&v130 + 1) == 1)
    {
      swift_storeEnumTagMultiPayload();
      sub_10002BB10();
      uint64_t v62 = (uint64_t)v101;
      _ConditionalContent<>.init(storage:)();
    }
    else
    {
      Image.init(systemName:)();
      (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
      unsigned int v63 = (void *)Image.resizable(capInsets:resizingMode:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      id v115 = v63;
      uint64_t v116 = 0;
      LOWORD(v117) = 1;
      double v118 = v123;
      LOBYTE(v119) = v124;
      uint64_t v120 = v125;
      char v121 = v126;
      long long v122 = v127;
      sub_10000AA4C(&qword_100180D08);
      sub_10002B998();
      View.accessibilityHidden(_:)();
      swift_release();
      sub_10000F330(v55, (uint64_t)v3, &qword_100180D50);
      swift_storeEnumTagMultiPayload();
      sub_10002BB10();
      uint64_t v62 = (uint64_t)v101;
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v55, &qword_100180D50);
    }
    uint64_t v64 = &qword_100180D60;
    sub_10000F330(v62, v111, &qword_100180D60);
    swift_storeEnumTagMultiPayload();
    sub_10002B554();
    sub_10002BB8C();
    _ConditionalContent<>.init(storage:)();
    uint64_t v60 = v62;
LABEL_27:
    uint64_t v61 = v64;
    return sub_10000F394(v60, v61);
  }
  id v56 = v115;
  Image.init(uiImage:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
  id v57 = (void *)Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  id v115 = v57;
  uint64_t v116 = 0;
  LOWORD(v117) = 1;
  double v118 = v123;
  LOBYTE(v119) = v124;
  uint64_t v120 = v125;
  char v121 = v126;
  long long v122 = v127;
  sub_10000AA4C(&qword_100180D08);
  sub_10002B998();
  uint64_t v58 = v55;
  View.accessibilityHidden(_:)();
  swift_release();
  sub_10000F330(v55, v104, &qword_100180D50);
  swift_storeEnumTagMultiPayload();
  sub_10002B5D0();
  sub_10002BB10();
  uint64_t v59 = (uint64_t)v105;
  _ConditionalContent<>.init(storage:)();
  sub_10000F330(v59, v111, &qword_100180C88);
  swift_storeEnumTagMultiPayload();
  sub_10002B554();
  sub_10002BB8C();
  _ConditionalContent<>.init(storage:)();

  sub_10000F394(v59, &qword_100180C88);
  uint64_t v60 = v58;
  uint64_t v61 = &qword_100180D50;
  return sub_10000F394(v60, v61);
}

uint64_t sub_10002ADBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for Image.ResizingMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100180C68);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  sub_100029AC4((uint64_t)&v24 - v11);
  sub_10002C0CC(*(void *)(a1 + 24), *(void *)(a1 + 32));
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
  uint64_t v13 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_10017F6C8 != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v14 = v26;
  char v15 = v27;
  uint64_t v16 = v28;
  char v17 = v29;
  uint64_t v18 = v30;
  uint64_t v24 = v31;
  if (qword_10017F6D0 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_10018CF80;
  sub_10000F330((uint64_t)v12, (uint64_t)v10, &qword_100180C68);
  uint64_t v20 = v25;
  sub_10000F330((uint64_t)v10, v25, &qword_100180C68);
  uint64_t v21 = v20 + *(int *)(sub_10000AA4C(&qword_100180D98) + 48);
  *(void *)uint64_t v21 = v13;
  *(void *)(v21 + 8) = 0;
  *(_WORD *)(v21 + 16) = 257;
  *(void *)(v21 + 24) = v14;
  *(unsigned char *)(v21 + 32) = v15;
  *(void *)(v21 + 40) = v16;
  *(unsigned char *)(v21 + 48) = v17;
  uint64_t v22 = v24;
  *(void *)(v21 + 56) = v18;
  *(void *)(v21 + 64) = v22;
  *(void *)(v21 + 72) = v19;
  *(void *)(v21 + 80) = v19;
  swift_retain();
  sub_10000F394((uint64_t)v12, &qword_100180C68);
  swift_release();
  return sub_10000F394((uint64_t)v10, &qword_100180C68);
}

uint64_t sub_10002B0B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BlendMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100180D90);
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (sub_10002BCC0())
  {
    uint64_t v27 = Image.init(systemName:)();
    uint64_t v25 = static Font.title.getter();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v16 = v12;
    uint64_t v26 = v12;
    uint64_t v17 = KeyPath;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Color.RGBColorSpace.sRGB(_:), v8);
    uint64_t v18 = Color.init(_:white:opacity:)();
    uint64_t v19 = swift_getKeyPath();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for BlendMode.multiply(_:), v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
    sub_10002BFEC((uint64_t)v3, (uint64_t)v14 + *(int *)(v16 + 36), (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
    uint64_t *v14 = v27;
    v14[1] = v17;
    v14[2] = v25;
    void v14[3] = v19;
    v14[4] = v18;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10002C054((uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v20 = v29;
    sub_10000F2CC((uint64_t)v14, v29, &qword_100180D90);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v20, 0, 1, v26);
  }
  else
  {
    uint64_t v22 = v29;
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    return v23(v22, 1, 1, v12);
  }
}

uint64_t sub_10002B4CC()
{
  return sub_1000296BC();
}

_OWORD *sub_10002B508(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t sub_10002B518()
{
  return sub_10002C76C(&qword_100180C78, &qword_100180C68, (void (*)(void))sub_10002B554, (void (*)(void))sub_10002BB8C);
}

unint64_t sub_10002B554()
{
  unint64_t result = qword_100180C80;
  if (!qword_100180C80)
  {
    sub_10000B100(&qword_100180C88);
    sub_10002B5D0();
    sub_10002BB10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180C80);
  }
  return result;
}

unint64_t sub_10002B5D0()
{
  unint64_t result = qword_100180C90;
  if (!qword_100180C90)
  {
    sub_10000B100(&qword_100180C98);
    sub_10002B64C();
    sub_10002BAB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180C90);
  }
  return result;
}

unint64_t sub_10002B64C()
{
  unint64_t result = qword_100180CA0;
  if (!qword_100180CA0)
  {
    sub_10000B100(&qword_100180CA8);
    sub_10002B6EC();
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180CA0);
  }
  return result;
}

unint64_t sub_10002B6EC()
{
  unint64_t result = qword_100180CB0;
  if (!qword_100180CB0)
  {
    sub_10000B100(&qword_100180CB8);
    sub_10002B78C();
    sub_10000F288(&qword_100180D30, &qword_100180D38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180CB0);
  }
  return result;
}

unint64_t sub_10002B78C()
{
  unint64_t result = qword_100180CC0;
  if (!qword_100180CC0)
  {
    sub_10000B100(&qword_100180CC8);
    sub_10002B82C();
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180CC0);
  }
  return result;
}

unint64_t sub_10002B82C()
{
  unint64_t result = qword_100180CD0;
  if (!qword_100180CD0)
  {
    sub_10000B100(&qword_100180CD8);
    sub_10002B8CC();
    sub_10000F288((unint64_t *)&unk_100185F50, &qword_100180D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180CD0);
  }
  return result;
}

unint64_t sub_10002B8CC()
{
  unint64_t result = qword_100180CE0;
  if (!qword_100180CE0)
  {
    sub_10000B100(&qword_100180CE8);
    sub_10002B9C8(&qword_100180CF0, &qword_100180CF8, (void (*)(void))sub_10002B998);
    sub_10000F288(&qword_100180D18, &qword_100180D20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180CE0);
  }
  return result;
}

uint64_t sub_10002B998()
{
  return sub_10002B9C8(&qword_100180D00, &qword_100180D08, (void (*)(void))sub_10002BA44);
}

uint64_t sub_10002B9C8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002BA44()
{
  unint64_t result = qword_100185570;
  if (!qword_100185570)
  {
    sub_10000B100(&qword_100180D10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185570);
  }
  return result;
}

unint64_t sub_10002BAB8()
{
  unint64_t result = qword_100180D40;
  if (!qword_100180D40)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180D40);
  }
  return result;
}

unint64_t sub_10002BB10()
{
  unint64_t result = qword_100180D48;
  if (!qword_100180D48)
  {
    sub_10000B100(&qword_100180D50);
    sub_10002B998();
    sub_10002BAB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180D48);
  }
  return result;
}

unint64_t sub_10002BB8C()
{
  unint64_t result = qword_100180D58;
  if (!qword_100180D58)
  {
    sub_10000B100(&qword_100180D60);
    sub_10002BB10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180D58);
  }
  return result;
}

unint64_t sub_10002BC08()
{
  unint64_t result = qword_100180D68;
  if (!qword_100180D68)
  {
    sub_10000B100(&qword_100180C58);
    sub_10000F288(&qword_100180D70, &qword_100180C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180D68);
  }
  return result;
}

uint64_t sub_10002BCC0()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v1 + 88))(v3, v0) == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(unsigned char *, uint64_t))(v1 + 96))(v3, v0);
    uint64_t v4 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v5 = &v3[*(int *)(v4 + 64)];
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    char v6 = v10[13] ^ 1;
    uint64_t v7 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    uint64_t v8 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v8 - 8) + 8))(v3, v8);
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v10[15] == 1)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      char v6 = v10[14] ^ 1;
    }
    else
    {
      char v6 = 0;
    }
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6 & 1;
}

uint64_t sub_10002BFEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002C054(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002C0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ImageResource();
  __chkstk_darwin(v3 - 8);
  if (!a2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (!v12) {
      goto LABEL_14;
    }
    return Image.init(uiImage:)();
  }
  if (a2 == 2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (!v12)
    {
LABEL_14:
      type metadata accessor for AirDropSystemApertureIconView();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v10 = [self bundleForClass:ObjCClassFromMetadata];
      ImageResource.init(name:bundle:)();
      uint64_t v8 = Image.init(_:)();

      return v8;
    }
    return Image.init(uiImage:)();
  }
  if (a2 != 1)
  {
    if (qword_10017F788 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B150(v4, (uint64_t)qword_10018D0C8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Corner icon for apps on preview image is not yet implemented!", v7, 2u);
      swift_slowDealloc();
    }

    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (!v12) {
      goto LABEL_14;
    }
    return Image.init(uiImage:)();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t destroy for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9AirDropUI27AirDropIncomingPreviewImageV10CornerIconOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for AirDropIncomingPreviewImage.CornerIcon(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  unsigned int v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  unsigned int v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if ((v5 + 1) > 1) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropIncomingPreviewImage.CornerIcon(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 3) {
    return (v3 - 2);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AirDropIncomingPreviewImage.CornerIcon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10002C6BC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_10002C6DC(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    result[1] = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropIncomingPreviewImage.CornerIcon()
{
  return &type metadata for AirDropIncomingPreviewImage.CornerIcon;
}

uint64_t sub_10002C71C()
{
  return sub_10002C76C(&qword_100180DA0, &qword_100180DA8, (void (*)(void))sub_10002B518, (void (*)(void))sub_10002BC08);
}

uint64_t sub_10002C76C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002C7F4()
{
  return sub_10002C81C();
}

uint64_t sub_10002C808()
{
  return sub_10002C81C();
}

uint64_t sub_10002C81C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002C888()
{
  type metadata accessor for AirDropUISettings();
  uint64_t v0 = swift_allocObject();
  Published.init(initialValue:)();
  uint64_t result = Published.init(initialValue:)();
  qword_10018CE70 = v0;
  return result;
}

uint64_t sub_10002C910()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AirDropUI17AirDropUISettings__expandWhenCancelled;
  uint64_t v2 = sub_10000AA4C(&qword_100180E80);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC9AirDropUI17AirDropUISettings__showsDebugBackgrounds, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10002C9E4()
{
  return type metadata accessor for AirDropUISettings();
}

uint64_t type metadata accessor for AirDropUISettings()
{
  uint64_t result = qword_100180DE8;
  if (!qword_100180DE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002CA38()
{
  sub_10002CAC8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10002CAC8()
{
  if (!qword_100180DF8)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100180DF8);
    }
  }
}

void *sub_10002CB20()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10002CB2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002CB8C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) ^ 1u;
  }
  return 0;
}

double sub_10002CBC8@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_10002CC4C(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return static EdgeInsets.== infix(_:_:)(a1[2], a1[3], a1[4], a1[5], a2[2], a2[3], a2[4], a2[5]);
  }
  else {
    return 0;
  }
}

uint64_t sub_10002CC7C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002CCF4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AirDropUI25SystemApertureLayoutState__metrics;
  uint64_t v2 = sub_10000AA4C(&qword_100180FC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC9AirDropUI25SystemApertureLayoutState__context;
  uint64_t v4 = sub_10000AA4C(&qword_100180FD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10002CDE0()
{
  return type metadata accessor for SystemApertureLayoutState();
}

uint64_t type metadata accessor for SystemApertureLayoutState()
{
  uint64_t result = qword_100180EC0;
  if (!qword_100180EC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002CE34()
{
  sub_10002CF1C(319, &qword_100180ED0);
  if (v0 <= 0x3F)
  {
    sub_10002CF1C(319, (unint64_t *)&unk_100180ED8);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10002CF1C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

__n128 initializeBufferWithCopyOfBuffer for SystemApertureLayoutState.Context(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemApertureLayoutState.Context(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureLayoutState.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutState.Context()
{
  return &type metadata for SystemApertureLayoutState.Context;
}

uint64_t getEnumTagSinglePayload for SystemApertureLayoutState.Metrics(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SystemApertureLayoutState.Metrics(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutState.Metrics()
{
  return &type metadata for SystemApertureLayoutState.Metrics;
}

uint64_t sub_10002D088@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SystemApertureLayoutState();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

uint64_t sub_10002D0E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v49 = sub_10000AA4C(&qword_100180FD8);
  __chkstk_darwin(v49);
  BOOL v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100180FE0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100180FE8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v46 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = *(void *)v2;
  char v15 = *(unsigned char *)(v2 + 8);
  sub_10002E2F8(*(void *)v2, v15);
  char v16 = sub_10006C874(v14, v15);
  sub_10002E358(v14, v15);
  if ((v16 & 1) == 0)
  {
    long long v24 = *(_OWORD *)(v2 + 32);
    long long v54 = *(_OWORD *)(v2 + 16);
    long long v55 = v24;
    uint64_t v57 = *(void *)(v2 + 16);
    char v58 = *(unsigned char *)(v2 + 24);
    long long v56 = v24;
    uint64_t v46 = *(char **)(v2 + 56);
    uint64_t v25 = (_OWORD *)swift_allocObject();
    long long v26 = *(_OWORD *)(v2 + 16);
    v25[1] = *(_OWORD *)v2;
    v25[2] = v26;
    long long v27 = *(_OWORD *)(v2 + 48);
    v25[3] = *(_OWORD *)(v2 + 32);
    v25[4] = v27;
    uint64_t v28 = sub_10000AA4C(&qword_100180FF0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v4, v47, v28);
    uint64_t v29 = &v4[*(int *)(v49 + 36)];
    *(void *)uint64_t v29 = 0;
    *((void *)v29 + 1) = 0;
    *((void *)v29 + 2) = sub_10002E648;
    *((void *)v29 + 3) = v25;
    sub_10000F330((uint64_t)v4, (uint64_t)v7, &qword_100180FD8);
    swift_storeEnumTagMultiPayload();
    sub_10002E2F8(v14, v15);
    sub_10002E670((uint64_t)&v57);
    sub_10000B078((uint64_t)&v56);
    uint64_t v30 = sub_10000F288(&qword_100180FF8, &qword_100180FF0);
    unint64_t v31 = sub_10002E6A0();
    swift_retain();
    uint64_t v50 = v28;
    uint64_t v51 = &type metadata for SystemApertureLayoutState.Context;
    uint64_t v52 = v30;
    unint64_t v53 = v31;
    swift_getOpaqueTypeConformance2();
    sub_10002E6F4();
    _ConditionalContent<>.init(storage:)();
    return sub_10000F394((uint64_t)v4, &qword_100180FD8);
  }
  uint64_t v43 = v13;
  uint64_t v44 = v9;
  uint64_t v45 = v5;
  uint64_t v42 = v7;
  uint64_t v17 = *(void *)(v2 + 16);
  uint64_t v18 = *(void *)(v2 + 32);
  uint64_t v19 = *(ValueMetadata **)(v2 + 40);
  char v20 = *(unsigned char *)(v2 + 24) & 1;
  sub_10002E2F8(v17, v20);
  char v21 = sub_10006C874(v17, v20);
  sub_10002E358(v17, v20);
  if (v21)
  {
    if (!v18)
    {
      type metadata accessor for SystemApertureLayoutState();
      sub_10002E82C();
      uint64_t result = EnvironmentObject.error()();
      __break(1u);
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    long long v22 = v54;
    char v23 = v55;
  }
  else
  {
    char v23 = 0;
    long long v22 = 0uLL;
  }
  long long v54 = v22;
  LOBYTE(v55) = v23;
  uint64_t v50 = v18;
  uint64_t v51 = v19;
  uint64_t v33 = (_OWORD *)swift_allocObject();
  long long v34 = *(_OWORD *)(v2 + 16);
  v33[1] = *(_OWORD *)v2;
  v33[2] = v34;
  long long v35 = *(_OWORD *)(v2 + 48);
  v33[3] = *(_OWORD *)(v2 + 32);
  v33[4] = v35;
  sub_10002E2F8(v14, v15);
  sub_10002E2F8(v17, v20);
  sub_10000B078((uint64_t)&v50);
  swift_retain();
  uint64_t v36 = sub_10000AA4C(&qword_100180FF0);
  uint64_t v37 = sub_10000F288(&qword_100180FF8, &qword_100180FF0);
  unint64_t v38 = sub_10002E6A0();
  unint64_t v39 = v46;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  uint64_t v41 = v43;
  uint64_t v40 = v44;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v39, v8);
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v42, v41, v8);
  swift_storeEnumTagMultiPayload();
  *(void *)&long long v54 = v36;
  *((void *)&v54 + 1) = &type metadata for SystemApertureLayoutState.Context;
  *(void *)&long long v55 = v37;
  *((void *)&v55 + 1) = v38;
  swift_getOpaqueTypeConformance2();
  sub_10002E6F4();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v8);
}

uint64_t sub_10002D6BC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181078);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for LayoutSubview();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10010BC08((uint64_t)v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return sub_10000F394((uint64_t)v8, &qword_100181078);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v14[24] = a2 & 1;
  v14[16] = a4 & 1;
  LayoutSubview.sizeThatFits(_:)();
  static UnitPoint.topLeading.getter();
  v14[8] = 0;
  v14[0] = 0;
  LayoutSubview.place(at:anchor:proposal:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

double sub_10002D8E0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_10002EDCC(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_10002D8F8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_10002D6BC(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_10002D910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10002D980(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10002D948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10002D980(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10002D980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_10002D9C4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_10002DA34;
}

void sub_10002DA34(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_10002DA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a1;
  uint64_t v28 = a6;
  uint64_t v9 = sub_10000AA4C(&qword_100181010);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100181018);
  __chkstk_darwin(v13);
  char v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000AA4C(&qword_100181020);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 &= 1u;
  sub_10002E2F8(a2, a3);
  char v18 = sub_10006C874(a2, a3);
  sub_10002E358(a2, a3);
  if (v18)
  {
    if (!a4)
    {
      type metadata accessor for SystemApertureLayoutState();
      sub_10002E82C();
      uint64_t result = EnvironmentObject.error()();
      __break(1u);
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    v20.n128_u64[0] = v29;
    v19.n128_u64[0] = 1.0;
    if (*(double *)&v29 >= 1.0)
    {
      v20.n128_u64[0] = *((void *)&v29 + 1);
      if (*((double *)&v29 + 1) >= 1.0)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        swift_retain();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_release();
        long long v21 = v30;
        long long v22 = v31;
        *(_OWORD *)uint64_t v17 = v29;
        *((_OWORD *)v17 + 1) = v21;
        *((_OWORD *)v17 + 2) = v22;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(&v17[*(int *)(v27 + 44)], v26, v9);
        sub_10000F330((uint64_t)v17, (uint64_t)v15, &qword_100181020);
        swift_storeEnumTagMultiPayload();
        sub_10002E884();
        sub_10000F288(&qword_100181040, &qword_100181010);
        _ConditionalContent<>.init(storage:)();
        return sub_10000F394((uint64_t)v17, &qword_100181020);
      }
    }
  }
  long long v24 = *(void (**)(char *, uint64_t, uint64_t, __n128, __n128))(v10 + 16);
  v24(v12, v26, v9, v19, v20);
  ((void (*)(char *, char *, uint64_t))v24)(v15, v12, v9);
  swift_storeEnumTagMultiPayload();
  sub_10002E884();
  sub_10000F288(&qword_100181040, &qword_100181010);
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10002DE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002DA80(a1, *(void *)v2, *(unsigned char *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

double sub_10002DE80@<D0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_10002DF08()
{
  return static Published.subscript.setter();
}

id sub_10002DF8C(void *a1)
{
  id v2 = [a1 activeLayoutMode];
  id result = [a1 view];
  if (result)
  {
    char v4 = result;
    id v5 = [result SBUISA_systemApertureObstructedAreaLayoutGuide];

    [v5 layoutFrame];
    double v7 = v6;
    double v9 = v8;

    if (v2 == (id)4)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      if (v21[0] != v7 || v21[1] != v9)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v11 = (void (*)(double *, void))static Published.subscript.modify();
        double *v12 = v7;
        v12[1] = v9;
        v11(v21, 0);
        swift_release();
        swift_release();
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    id result = (id)swift_release();
    if (*(id *)&v21[0] != v2)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v13 = (void (*)(double *, void))static Published.subscript.modify();
      void *v14 = v2;
      v13(v21, 0);
      swift_release();
      swift_release();
      id v15 = objc_msgSend(objc_msgSend(a1, "systemApertureElementContext"), "transitionContext");
      id result = (id)swift_unknownObjectRelease();
      if (v15)
      {
        id v16 = [v15 fromLayoutMode];
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v17 = (void (*)(double *, void))static Published.subscript.modify();
        *(void *)(v18 + 8) = v16;
        v17(v21, 0);
        swift_release();
        swift_release();
        LOBYTE(v16) = [v15 isUserInitiated];
        swift_getKeyPath();
        swift_getKeyPath();
        __n128 v19 = (void (*)(double *, void))static Published.subscript.modify();
        *(unsigned char *)(v20 + 16) = (_BYTE)v16;
        v19(v21, 0);

        swift_release();
        return (id)swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002E2F8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for SystemApertureDismissalModifier(uint64_t a1)
{
  sub_10002E358(*(void *)a1, *(unsigned char *)(a1 + 8));
  sub_10002E358(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_release();

  return swift_release();
}

uint64_t sub_10002E358(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  sub_10002E2F8(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  sub_10002E2F8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  sub_10002E358(v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for SystemApertureDismissalModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SystemApertureDismissalModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  sub_10002E358(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemApertureDismissalModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureDismissalModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureDismissalModifier()
{
  return &type metadata for SystemApertureDismissalModifier;
}

ValueMetadata *type metadata accessor for SystemApertureVerticalPlacementViewModifier()
{
  return &type metadata for SystemApertureVerticalPlacementViewModifier;
}

uint64_t sub_10002E60C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002E628()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002E648()
{
  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t sub_10002E670(uint64_t a1)
{
  return a1;
}

unint64_t sub_10002E6A0()
{
  unint64_t result = qword_100181000;
  if (!qword_100181000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181000);
  }
  return result;
}

unint64_t sub_10002E6F4()
{
  unint64_t result = qword_100181008;
  if (!qword_100181008)
  {
    sub_10000B100(&qword_100180FD8);
    sub_10000F288(&qword_100180FF8, &qword_100180FF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181008);
  }
  return result;
}

uint64_t sub_10002E798()
{
  sub_10002E358(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  sub_10002E358(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10002E7F0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 == 3 && *(unsigned char *)(a2 + 16) != 0) {
    return (*(uint64_t (**)(void))(v2 + 64))();
  }
  return result;
}

unint64_t sub_10002E82C()
{
  unint64_t result = qword_100180AE0;
  if (!qword_100180AE0)
  {
    type metadata accessor for SystemApertureLayoutState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180AE0);
  }
  return result;
}

unint64_t sub_10002E884()
{
  unint64_t result = qword_100181028;
  if (!qword_100181028)
  {
    sub_10000B100(&qword_100181020);
    sub_10000F288(&qword_100181030, &qword_100181038);
    sub_10000F288(&qword_100181040, &qword_100181010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181028);
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureVerticalPlacementLayout()
{
  return &type metadata for SystemApertureVerticalPlacementLayout;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwxx_0(uint64_t a1)
{
  sub_10002E358(*(void *)a1, *(unsigned char *)(a1 + 8));

  return swift_release();
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_retain();
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_10002E2F8(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwta_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10002E358(v6, v7);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  *(void *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9AirDropUI24SystemApertureLayoutModeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureLayoutMode()
{
  return &type metadata for SystemApertureLayoutMode;
}

unint64_t sub_10002EB88()
{
  unint64_t result = qword_100181048;
  if (!qword_100181048)
  {
    sub_10000B100(&qword_100181050);
    sub_10000B100(&qword_100180FF0);
    sub_10000F288(&qword_100180FF8, &qword_100180FF0);
    sub_10002E6A0();
    swift_getOpaqueTypeConformance2();
    sub_10002E6F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181048);
  }
  return result;
}

unint64_t sub_10002EC7C()
{
  unint64_t result = qword_100181058;
  if (!qword_100181058)
  {
    sub_10000B100(&qword_100181060);
    sub_10002E884();
    sub_10000F288(&qword_100181040, &qword_100181010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181058);
  }
  return result;
}

unint64_t sub_10002ED20()
{
  unint64_t result = qword_100181068;
  if (!qword_100181068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181068);
  }
  return result;
}

unint64_t sub_10002ED78()
{
  unint64_t result = qword_100181070;
  if (!qword_100181070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181070);
  }
  return result;
}

double sub_10002EDCC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181078);
  __chkstk_darwin(v6 - 8);
  char v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for LayoutSubview();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10010BC08((uint64_t)v8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000F394((uint64_t)v8, &qword_100181078);
    return 0.0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v16[8] = a2 & 1;
    v16[0] = a4 & 1;
    LayoutSubview.sizeThatFits(_:)();
    double v13 = v14;
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

void sub_10002F130(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6 = qword_10017F7A0;
  id v12 = a3;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_10018D110);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 2u);
    swift_slowDealloc();
  }
}

id sub_10002F2E0()
{
  return sub_10003008C((uint64_t (*)(void))type metadata accessor for RemoteAlertSceneDelegate);
}

uint64_t sub_10002F344()
{
  return type metadata accessor for RemoteAlertSceneDelegate();
}

uint64_t type metadata accessor for RemoteAlertSceneDelegate()
{
  uint64_t result = qword_1001810B0;
  if (!qword_1001810B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002F398()
{
  sub_10002F434();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10002F434()
{
  if (!qword_1001810C0)
  {
    type metadata accessor for SFRemoteAlertPresentationRequest();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001810C0);
    }
  }
}

void sub_10002F5AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFRemoteAlertPresentationRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_10000B150(v8, (uint64_t)qword_10018D110);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v26[3] = a1;
    double v13 = (uint8_t *)v12;
    aBlock[0] = swift_slowAlloc();
    uint64_t v27 = v2;
    *(_DWORD *)double v13 = 136315138;
    v26[1] = v13 + 4;
    v26[2] = v9;
    uint64_t v14 = SFRemoteAlertPresentationRequest.id.getter();
    uint64_t v28 = sub_100047F98(v14, v15, aBlock);
    uint64_t v2 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Presenting view controller in remote alert for request: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  id v16 = [v2 view];
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = [v16 window];

    if (v18)
    {
      __n128 v19 = SFRemoteAlertPresentationRequest.viewControllerToPresent.getter();
      char v20 = SFRemoteAlertPresentationRequest.animated.getter();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v18;
      aBlock[4] = (uint64_t)sub_100030138;
      aBlock[5] = v21;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100119678;
      aBlock[3] = (uint64_t)&unk_100169F38;
      long long v22 = _Block_copy(aBlock);
      id v23 = v18;
      swift_release();
      [v2 presentViewController:v19 animated:v20 & 1 completion:v22];
      _Block_release(v22);
    }
    else
    {
      __n128 v19 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v24, "Attempting to present without window", v25, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10002F994(void *a1)
{
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_10018D110);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    id v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Keeping window: %@ alive until presented", v6, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10002FB44(char a1, uint64_t a2, uint64_t a3)
{
  id v7 = [v3 view];
  if (v7)
  {
    id v8 = v7;
    id v9 = [v7 window];

    if (v9)
    {
      os_log_type_t v10 = (void *)swift_allocObject();
      v10[2] = v9;
      v10[3] = a2;
      v10[4] = a3;
      v10[5] = v3;
      aBlock[4] = sub_100030220;
      aBlock[5] = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100119678;
      aBlock[3] = &unk_100169FB0;
      os_log_type_t v11 = _Block_copy(aBlock);
      id v12 = v9;
      sub_100030254(a2);
      id v13 = v3;
      swift_release();
      v18.receiver = v13;
      v18.super_class = (Class)type metadata accessor for RemoteAlertRootViewController();
      [super dismissViewControllerAnimated:a1 & 1 completion:v11];
      _Block_release(v11);
    }
    else
    {
      if (qword_10017F7A0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10000B150(v14, (uint64_t)qword_10018D110);
      osos_log_t log = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Attempting to dismiss without window", v16, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10002FD88(void (*a1)(void), uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    a1();
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  [Strong invalidate];

  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000B150(v6, (uint64_t)qword_10018D110);
  id v7 = a4;
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 138412290;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Keeping window: %@ alive until dismissal ends", v10, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id sub_100030074()
{
  return sub_10003008C((uint64_t (*)(void))type metadata accessor for RemoteAlertRootViewController);
}

id sub_10003008C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteAlertRootViewController()
{
  return self;
}

uint64_t sub_100030100()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100030138()
{
  sub_10002F994(*(void **)(v0 + 16));
}

uint64_t sub_100030168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100030178()
{
  return swift_release();
}

uint64_t sub_100030180(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100030190()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000301C8()
{
  return sub_1000D7B10(*(void *)(v0 + 16));
}

uint64_t sub_1000301D0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100030220()
{
  sub_10002FD88(*(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 16));
}

uint64_t sub_100030254(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_100030264()
{
  unint64_t result = qword_100181160;
  if (!qword_100181160)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100181160);
  }
  return result;
}

unint64_t sub_1000302A4()
{
  unint64_t result = qword_100181168;
  if (!qword_100181168)
  {
    sub_100030264();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181168);
  }
  return result;
}

uint64_t sub_1000302FC(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

void sub_100030338(void *a1)
{
  uint64_t v3 = sub_10000AA4C((uint64_t *)&unk_100181170);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)v70 - v7;
  uint64_t v9 = type metadata accessor for SFRemoteAlertPresentationRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)v70 - v14;
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v18 = a1;
    id v19 = [v17 configurationIdentifier];
    if (v19)
    {
      char v20 = v19;
      uint64_t v79 = v1;
      id v80 = v18;
      uint64_t v78 = v6;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      type metadata accessor for AUIRemoteAlertPresentationManager();
      id v24 = sub_100084E60();
      dispatch thunk of SFRemoteAlertPresentationManager.presentationRequest(for:)();

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_1000318B8((uint64_t)v8);
        if (qword_10017F7A0 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        sub_10000B150(v25, (uint64_t)qword_10018D110);
        swift_bridgeObjectRetain();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          v81[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v83 = sub_100047F98(v21, v23, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Could not find a remote alert presentation request for ID: %s", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
        if (qword_10017F7A0 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        uint64_t v42 = sub_10000B150(v41, (uint64_t)qword_10018D110);
        uint64_t v43 = v10 + 16;
        uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
        v77(v13, v15, v9);
        id v44 = v80;
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.default.getter();
        int v47 = v46;
        BOOL v48 = os_log_type_enabled(v45, v46);
        id v80 = v44;
        if (v48)
        {
          uint64_t v49 = swift_slowAlloc();
          uint64_t v75 = v42;
          uint64_t v50 = v49;
          uint64_t v51 = swift_slowAlloc();
          uint64_t v73 = v10;
          uint64_t v52 = (void *)v51;
          v70[1] = v51;
          uint64_t v74 = swift_slowAlloc();
          v81[0] = v74;
          *(_DWORD *)uint64_t v50 = 138412546;
          os_log_t v71 = v45;
          int v72 = v47;
          uint64_t v83 = (uint64_t)v17;
          uint64_t v76 = v43;
          id v53 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v52 = v17;
          uint64_t v10 = v73;

          *(_WORD *)(v50 + 12) = 2080;
          uint64_t v54 = SFRemoteAlertPresentationRequest.id.getter();
          uint64_t v83 = sub_100047F98(v54, v55, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          long long v56 = *(void (**)(char *, uint64_t))(v10 + 8);
          v56(v13, v9);
          uint64_t v45 = v71;
          _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v72, "Configuring remote alert scene: %@ for request with ID: %s", (uint8_t *)v50, 0x16u);
          sub_10000AA4C(&qword_100180510);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          long long v56 = *(void (**)(char *, uint64_t))(v10 + 8);
          v56(v13, v9);
        }

        if (SFRemoteAlertPresentationRequest.contentOverlaysStatusBar.getter())
        {
          if ([v17 respondsToSelector:"setContentOverlaysStatusBar:animationSettings:"])
          {
            [v17 setContentOverlaysStatusBar:1 animationSettings:0];
          }
          else
          {
            char v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v60 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v60 = 0;
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "Wanted to set contentOverlaysStatusBar to true, but this version of SpringBoard does not support it.", v60, 2u);
              swift_slowDealloc();
            }
          }
        }
        [v17 setAllowsAlertStacking:1];
        [v17 setOrientationChangedEventsDisabled:1];
        id v61 = [objc_allocWithZone((Class)type metadata accessor for SFSecureWindow()) initWithWindowScene:v17];
        uint64_t v62 = (objc_class *)type metadata accessor for RemoteAlertRootViewController();
        id v63 = objc_allocWithZone(v62);
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        v82.receiver = v63;
        v82.super_class = v62;
        id v64 = [super initWithNibName:0 bundle:0];
        [v61 setRootViewController:v64];
        [v61 makeKeyAndVisible];
        uint64_t v65 = v79;
        double v66 = *(void **)(v79 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window);
        *(void *)(v79 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window) = v61;
        id v67 = v61;

        uint64_t v68 = (uint64_t)v78;
        v77(v78, v15, v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v68, 0, 1, v9);
        uint64_t v69 = v65 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_presentationRequest;
        swift_beginAccess();
        sub_100031918(v68, v69);
        swift_endAccess();

        v56(v15, v9);
      }
      return;
    }
    if (qword_10017F7A0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10000B150(v35, (uint64_t)qword_10018D110);
    id v80 = v18;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      unint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 138412290;
      v81[0] = (uint64_t)v17;
      id v40 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v39 = v17;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Could not find configuration identifier on remote alert scene: %@", v38, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_10017F7A0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10000B150(v29, (uint64_t)qword_10018D110);
    id v80 = a1;
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      swift_getObjectType();
      uint64_t v33 = _typeName(_:qualified:)();
      uint64_t v83 = sub_100047F98(v33, v34, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Cannot configure scene, expected a remote alert scene but got a scene of type: %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  id v57 = v80;
}

void sub_100030E60()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_100181170);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFRemoteAlertPresentationRequest();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B150(v9, (uint64_t)qword_10018D110);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RemoteAlertSceneDelegate: sceneDidBecomeActive", v12, 2u);
    swift_slowDealloc();
  }

  id v13 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_window);
  if (v13)
  {
    id v14 = [v13 rootViewController];
    if (v14)
    {
      id v19 = v14;
      type metadata accessor for RemoteAlertRootViewController();
      os_log_type_t v15 = (void *)swift_dynamicCastClass();
      if (v15
        && (id v16 = [v15 presentedViewController],
            v16,
            !v16))
      {
        uint64_t v18 = v1 + OBJC_IVAR____TtC9AirDropUI24RemoteAlertSceneDelegate_presentationRequest;
        swift_beginAccess();
        sub_100031850(v18, (uint64_t)v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {

          sub_1000318B8((uint64_t)v4);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
          sub_10002F5AC((uint64_t)v8);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
      }
      else
      {
        id v17 = v19;
      }
    }
  }
}

void sub_10003115C(void *a1, uint64_t a2)
{
  if (qword_10017F7A0 != -1) {
LABEL_48:
  }
    swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_10018D110);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100030264();
    sub_1000302A4();
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v40 = sub_100047F98(v8, v10, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RemoteAlertSceneDelegate: handle buttonActions: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v11 = [a1 configurationIdentifier];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    type metadata accessor for AUIRemoteAlertPresentationManager();
    id v16 = sub_100084E60();
    a1 = (void *)dispatch thunk of SFRemoteAlertPresentationManager.presentationHandle(for:)();

    if (a1)
    {
      swift_bridgeObjectRelease();
      if ((a2 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        sub_100030264();
        sub_1000302A4();
        Set.Iterator.init(_cocoa:)();
        a2 = v41[0];
        uint64_t v39 = v41[1];
        uint64_t v17 = v41[2];
        uint64_t v18 = v41[3];
        unint64_t v19 = v41[4];
      }
      else
      {
        uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
        uint64_t v39 = a2 + 56;
        uint64_t v17 = ~v28;
        uint64_t v29 = -v28;
        if (v29 < 64) {
          uint64_t v30 = ~(-1 << v29);
        }
        else {
          uint64_t v30 = -1;
        }
        unint64_t v19 = v30 & *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        uint64_t v18 = 0;
      }
      int64_t v31 = (unint64_t)(v17 + 64) >> 6;
      while (1)
      {
        if (a2 < 0)
        {
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_46;
          }
          sub_100030264();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v35 = (id)v40;
          swift_unknownObjectRelease();
          uint64_t v34 = v18;
          uint64_t v32 = v19;
          if (!v40) {
            goto LABEL_46;
          }
        }
        else
        {
          if (v19)
          {
            uint64_t v32 = (v19 - 1) & v19;
            unint64_t v33 = __clz(__rbit64(v19)) | (v18 << 6);
            uint64_t v34 = v18;
          }
          else
          {
            int64_t v36 = v18 + 1;
            if (__OFADD__(v18, 1))
            {
              __break(1u);
              goto LABEL_48;
            }
            if (v36 >= v31) {
              goto LABEL_46;
            }
            unint64_t v37 = *(void *)(v39 + 8 * v36);
            uint64_t v34 = v18 + 1;
            if (!v37)
            {
              uint64_t v34 = v18 + 2;
              if (v18 + 2 >= v31) {
                goto LABEL_46;
              }
              unint64_t v37 = *(void *)(v39 + 8 * v34);
              if (!v37)
              {
                uint64_t v34 = v18 + 3;
                if (v18 + 3 >= v31) {
                  goto LABEL_46;
                }
                unint64_t v37 = *(void *)(v39 + 8 * v34);
                if (!v37)
                {
                  uint64_t v34 = v18 + 4;
                  if (v18 + 4 >= v31) {
                    goto LABEL_46;
                  }
                  unint64_t v37 = *(void *)(v39 + 8 * v34);
                  if (!v37)
                  {
                    uint64_t v38 = v18 + 5;
                    while (v31 != v38)
                    {
                      unint64_t v37 = *(void *)(v39 + 8 * v38++);
                      if (v37)
                      {
                        uint64_t v34 = v38 - 1;
                        goto LABEL_41;
                      }
                    }
LABEL_46:
                    sub_100031848();
                    swift_release();
                    return;
                  }
                }
              }
            }
LABEL_41:
            uint64_t v32 = (v37 - 1) & v37;
            unint64_t v33 = __clz(__rbit64(v37)) + (v34 << 6);
          }
          id v35 = *(id *)(*(void *)(a2 + 48) + 8 * v33);
          if (!v35) {
            goto LABEL_46;
          }
        }
        if ([v35 events] == (id)16) {
          dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)();
        }
        else {
          [v35 sendResponseWithUnHandledEvents:[v35 events]];
        }

        uint64_t v18 = v34;
        unint64_t v19 = v32;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v27 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(v13, v15, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v26, "Could not find a remote alert presentation request for ID: %s", v27, 0xCu);
      swift_arrayDestroy();
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v20 = a1;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      id v24 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 138412290;
      v41[0] = (uint64_t)v20;
      id v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v24 = v20;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not find configuration identifier on remote alert scene: %@", v23, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
LABEL_13:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_100031848()
{
  return swift_release();
}

uint64_t sub_100031850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100181170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000318B8(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_100181170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100181170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031988(uint64_t a1)
{
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v5 = *(void *)(v49 - 8);
  uint64_t v6 = __chkstk_darwin(v49);
  BOOL v48 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int v47 = (char *)&v36 - v8;
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = &_swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  uint64_t v36 = v1;
  uint64_t v54 = &_swiftEmptyArrayStorage;
  sub_100016214(0, v9, 0);
  uint64_t result = sub_10004CB90(a1);
  uint64_t v12 = result;
  int v14 = v13;
  uint64_t v15 = 0;
  uint64_t v16 = a1 + 64;
  uint64_t v41 = v5 + 32;
  uint64_t v42 = v5 + 16;
  uint64_t v44 = v5;
  uint64_t v45 = a1;
  uint64_t v39 = v5 + 8;
  uint64_t v40 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v37 = a1 + 80;
  int64_t v38 = v9;
  uint64_t v43 = v13;
  uint64_t v46 = a1 + 64;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v19 = (unint64_t)v12 >> 6;
    if ((*(void *)(v16 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_26;
    }
    uint64_t v20 = v44;
    uint64_t v21 = v47;
    uint64_t v22 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v47, *(void *)(a1 + 48) + *(void *)(v44 + 72) * v12, v49);
    unint64_t v23 = v48;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v21, v22);
    id v24 = v50;
    SFAirDrop.TransferIdentifier.id.getter();
    uint64_t v25 = UUID.uuidString.getter();
    uint64_t v52 = v26;
    uint64_t v53 = v25;
    (*v40)(v24, v51);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
    unint64_t v10 = v54;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100016214(0, v10[2] + 1, 1);
      unint64_t v10 = v54;
    }
    unint64_t v28 = v10[2];
    unint64_t v27 = v10[3];
    int v14 = v43;
    uint64_t v16 = v46;
    if (v28 >= v27 >> 1)
    {
      uint64_t result = sub_100016214(v27 > 1, v28 + 1, 1);
      uint64_t v16 = v46;
      unint64_t v10 = v54;
    }
    v10[2] = v28 + 1;
    uint64_t v29 = (char *)&v10[2 * v28];
    uint64_t v30 = v52;
    *((void *)v29 + 4) = v53;
    *((void *)v29 + 5) = v30;
    a1 = v45;
    int64_t v17 = 1 << *(unsigned char *)(v45 + 32);
    if (v12 >= v17) {
      goto LABEL_27;
    }
    uint64_t v31 = *(void *)(v16 + 8 * v19);
    if ((v31 & (1 << v12)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v45 + 36) != v14) {
      goto LABEL_29;
    }
    unint64_t v32 = v31 & (-2 << (v12 & 0x3F));
    if (v32)
    {
      int64_t v17 = __clz(__rbit64(v32)) | v12 & 0xFFFFFFFFFFFFFFC0;
      int64_t v18 = v38;
    }
    else
    {
      unint64_t v33 = v19 + 1;
      unint64_t v34 = (unint64_t)(v17 + 63) >> 6;
      int64_t v18 = v38;
      if (v19 + 1 < v34)
      {
        unint64_t v35 = *(void *)(v16 + 8 * v33);
        if (v35)
        {
LABEL_22:
          int64_t v17 = __clz(__rbit64(v35)) + (v33 << 6);
        }
        else
        {
          while (v34 - 2 != v19)
          {
            unint64_t v35 = *(void *)(v37 + 8 * v19++);
            if (v35)
            {
              unint64_t v33 = v19 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v15;
    uint64_t v12 = v17;
    if (v15 == v18) {
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100031DA0(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v4 = v27;
  if (!v27) {
    goto LABEL_9;
  }
  if (*(void *)(v27 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
  {
    swift_retain();
    uint64_t v5 = Activity.id.getter();
    uint64_t v7 = v6;
    swift_release();
    if (v5 == a1 && v7 == a2)
    {
LABEL_39:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_8;
      }
    }
    return v4;
  }
LABEL_8:
  swift_release();
LABEL_9:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  int64_t v11 = 0;
  uint64_t v12 = v27 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v27 + 64);
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
LABEL_30:
    uint64_t v4 = *(void *)(*(void *)(v27 + 56) + 8 * v17);
    if (*(void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
    {
      swift_retain();
      swift_retain();
      uint64_t v21 = Activity.id.getter();
      uint64_t v23 = v22;
      swift_release();
      if (v21 == a1 && v23 == a2)
      {
        swift_release();
        goto LABEL_39;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25)
      {
        swift_release();
        return v4;
      }
      uint64_t result = swift_release();
    }
  }
  int64_t v18 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v18 >= v26) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v12 + 8 * v18);
  ++v11;
  if (v19) {
    goto LABEL_29;
  }
  int64_t v11 = v18 + 1;
  if (v18 + 1 >= v26) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v12 + 8 * v11);
  if (v19) {
    goto LABEL_29;
  }
  int64_t v11 = v18 + 2;
  if (v18 + 2 >= v26) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v12 + 8 * v11);
  if (v19) {
    goto LABEL_29;
  }
  int64_t v11 = v18 + 3;
  if (v18 + 3 >= v26) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v12 + 8 * v11);
  if (v19)
  {
LABEL_29:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_30;
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v26)
  {
LABEL_37:
    swift_release();
    return 0;
  }
  unint64_t v19 = *(void *)(v12 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v19 = *(void *)(v12 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_29;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000320BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100032130()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100181180);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100181180);
  if (qword_10017F790 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0E0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1000321F8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AirDropTransferSessionsController()) init];
  qword_10018CE80 = (uint64_t)result;
  return result;
}

uint64_t sub_10003222C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000322AC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_100032324()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100032398()
{
  uint64_t v1 = v0;
  ObjectCFStringRef Type = (objc_class *)swift_getObjectType();
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  id v63 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for SFAirDropClient.Identifier();
  uint64_t v62 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  id v61 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_1001815D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (objc_class *)((char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000AA4C(&qword_1001815E0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = 0;
  uint64_t v13 = OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator;
  uint64_t v14 = qword_10017F780;
  unint64_t v15 = v1;
  if (v14 != -1) {
    swift_once();
  }
  unint64_t v16 = (void *)qword_10018D0C0;
  *(void *)&v1[v13] = qword_10018D0C0;
  unint64_t v17 = &v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController__airDropSessionsByID];
  id v18 = v16;
  uint64_t v60 = v13;
  aBlock[0] = sub_1000A3580((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000AA4C(&qword_100181238);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, v9);
  unint64_t v19 = &v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController__bannerAirDropSession];
  aBlock[0] = 0;
  sub_10000AA4C(&qword_100181248);
  Published.init(initialValue:)();
  (*(void (**)(char *, objc_class *, uint64_t))(v6 + 32))(v19, v8, v5);
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded] = &_swiftEmptyArrayStorage;
  id v20 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithBundleIdentifier:v21];

  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter] = v22;
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_interventionTasks] = sub_1000A369C((uint64_t)&_swiftEmptyArrayStorage);
  type metadata accessor for SFAirDropClient();
  (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, enum case for SFAirDropClient.Identifier.airdropUI(_:), v65);
  uint64_t v23 = SFAirDropClient.__allocating_init(identifier:)();
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airdropClient] = v23;
  uint64_t v24 = type metadata accessor for TaskPriority();
  char v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v26 = (uint64_t)v63;
  v25(v63, 1, 1, v24);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = v23;
  LOBYTE(v8) = 2;
  swift_retain_n();
  uint64_t v28 = v26;
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask] = sub_1000F0F5C(v26, (uint64_t)&unk_1001815F0, (uint64_t)v27);
  uint64_t v29 = *(char **)&v1[v60];
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient] = v23;
  swift_retain_n();
  uint64_t v30 = v29;
  swift_release();
  sub_1000A4900();
  swift_release();

  type metadata accessor for SFLockStateMonitor();
  swift_allocObject();
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_lockStateMonitor] = SFLockStateMonitor.init()();
  id v31 = [self sharedApplication];
  unint64_t v32 = (unint64_t)[v31 userInterfaceLayoutDirection];

  if ((v32 & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  if (qword_10017F738 != -1) {
    swift_once();
  }
  id v33 = objc_allocWithZone((Class)type metadata accessor for SFUIContactIconProvider());
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_contactIconProvider] = SFUIContactIconProvider.init(diameter:layoutDirection:)();
  id v34 = [self mainScreen];
  id v35 = [v34 traitCollection];

  id v36 = [v35 userInterfaceStyle];
  id v37 = [objc_allocWithZone((Class)SFUIPeopleSuggestionImageProvider) initWithTargetSize:v32 layoutDirection:v36 userInterfaceStyle:1.0];
  *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_appCornerIconProvider] = v37;

  uint64_t v8 = ObjectType;
  v67.receiver = v15;
  v67.super_class = ObjectType;
  id v38 = [super init];
  v25((char *)v28, 1, 1, v24);
  uint64_t v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = &unk_100181600;
  *(void *)(v40 + 24) = v39;
  id v41 = v38;
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  sub_10000F394(v28, &qword_1001829C0);
  sub_1000502BC(&qword_100181610, (void (*)(uint64_t))type metadata accessor for AirDropTransferSessionsController);
  uint64_t v42 = (char *)v41;
  swift_retain();
  dispatch thunk of SFLockStateMonitor.delegate.setter();
  swift_release();
  uint64_t v43 = *(void **)&v42[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter];
  [v43 setDelegate:v42];
  uint64_t v44 = &v60;
  __chkstk_darwin([v43 setWantsNotificationResponsesDelivered]);
  char v58 = v42;
  os_log_type_t v59 = v8;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_10004FD94;
  *(void *)(v45 + 24) = &v56;
  aBlock[4] = sub_10004FAE8;
  aBlock[5] = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000639D0;
  aBlock[3] = &unk_10016A390;
  uint64_t v46 = _Block_copy(aBlock);
  int v47 = self;
  swift_retain();
  id v48 = [v47 listenerWithConfigurator:v46];
  _Block_release(v46);
  swift_release();
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v46)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v44 = (uint64_t *)OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener;
  uint64_t v49 = *(void **)&v42[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener];
  *(void *)&v42[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_listener] = v48;

  if (qword_10017F608 != -1) {
LABEL_13:
  }
    swift_once();
  uint64_t v50 = type metadata accessor for Logger();
  sub_10000B150(v50, (uint64_t)qword_100181180);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "AirDropTransferSessionsController listener is activating...", v53, 2u);
    swift_slowDealloc();
  }

  uint64_t v54 = *(void **)((char *)v44 + (void)v42);
  if (v54)
  {
    [v54 activate];
    sub_1000330C8();

    swift_release();
    return (uint64_t)v42;
  }
  __break(1u);
LABEL_15:
  LODWORD(v58) = 0;
  uint64_t v57 = 3451;
  char v56 = (char)v8;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100032DD0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013ABC;
  return SFAirDropClient.registerTransfersMonitor()(a1);
}

uint64_t sub_100032E70(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100032F08, v3, v2);
}

uint64_t sub_100032F08()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (char *)Strong;
    if (qword_10017F7E8 != -1) {
      swift_once();
    }
    uint64_t v3 = qword_10018D170;
    uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator];
    swift_retain();
    id v5 = v4;

    uint64_t v6 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v5;
    swift_release();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

id sub_100033008(void *a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 setDomain:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [a1 setService:v5];

  return [a1 setDelegate:a2];
}

uint64_t sub_1000330C8()
{
  uint64_t v1 = v0;
  ObjectCFStringRef Type = swift_getObjectType();
  uint64_t v3 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v3 - 8);
  NSString v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = ObjectType;
  id v8 = v1;
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v5, &qword_1001829C0);
}

uint64_t sub_100033224(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000332BC, v3, v2);
}

uint64_t sub_1000332BC()
{
  swift_release();
  sub_100033320();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100033320()
{
  uint64_t v1 = v0;
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  uint64_t v2 = &qword_10018D000;
  swift_retain();
  uint64_t v3 = sub_10010C690();
  swift_release();
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    v41[0] = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    v41[1] = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = 45;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 0x732D72656E6E6162;
    v7._object = (void *)0xEE006E6F69737365;
    String.append(_:)(v7);
    uint64_t v8 = v41[0];
    uint64_t v9 = (void (*)(void, void))v5;
    if (qword_10017F608 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B150(v10, (uint64_t)qword_100181180);
    swift_retain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = *v4;
      unint64_t v14 = v4[1];
      swift_bridgeObjectRetain();
      uint64_t v16 = v15;
      uint64_t v2 = &qword_10018D000;
      uint64_t v42 = sub_100047F98(v16, v14, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Banner session updated for transfer %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v41[0])
    {
      if (sub_10008E11C(v3))
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Skipping update because session is the same", v26, 2u);
          swift_slowDealloc();
          swift_release();
LABEL_29:

LABEL_38:
          swift_release_n();
          return;
        }
      }
      else
      {
        uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
        uint64_t v37 = *(void *)(v2[46] + 32);
        swift_retain();
        if (Strong)
        {
          sub_100074070(v3, v8, (uint64_t)v9, v37, 0);
        }
        else
        {
          sub_10008B518(v3, v8, (uint64_t)v9, v37);
        }
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v24, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v39, "Banner session update(with:) run", v40, 2u);
          swift_slowDealloc();

          swift_release();
          goto LABEL_38;
        }
      }
      swift_release_n();
      swift_release();
    }
    else
    {
      uint64_t v27 = *(void *)(v2[46] + 32);
      type metadata accessor for AirDropTransferSession();
      swift_allocObject();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_100090DB0(v3, v8, v9, v27);
      swift_release();
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      v41[0] = v28;
      id v29 = v1;
      static Published.subscript.setter();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v30 = v41[0];
      if (v41[0])
      {
        uint64_t v31 = swift_unknownObjectWeakLoadStrong();
        if (v31)
        {
          unint64_t v32 = (void *)v31;
          uint64_t v33 = *(void *)(qword_10018D170 + 32);
          swift_retain();
          sub_100074070(v30, v8, (uint64_t)v9, v33, 1);
          swift_release();
        }
        swift_release();
      }
      swift_bridgeObjectRelease();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v34))
      {
        id v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v34, "Banner session newly created", v35, 2u);
        swift_slowDealloc();
        goto LABEL_29;
      }
      swift_release_n();
    }
  }
  else
  {
    if (qword_10017F608 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000B150(v17, (uint64_t)qword_100181180);
    id v18 = v0;
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      NSString v21 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)NSString v21 = 136315138;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      if (v42) {
        uint64_t v22 = 0x6465766F6D6572;
      }
      else {
        uint64_t v22 = 0x776F687320746F6ELL;
      }
      if (v42) {
        unint64_t v23 = 0xE700000000000000;
      }
      else {
        unint64_t v23 = 0xE90000000000006ELL;
      }
      uint64_t v42 = sub_100047F98(v22, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Banner session %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_getKeyPath();
    swift_getKeyPath();
    v41[0] = 0;
    id v38 = v18;
    static Published.subscript.setter();
  }
}

uint64_t sub_100033B78(uint64_t a1, uint64_t a2)
{
  v2[32] = a2;
  uint64_t v3 = type metadata accessor for SFAirDropSend.Transfer.State();
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropSend.Request();
  v2[36] = v4;
  v2[37] = *(void *)(v4 - 8);
  v2[38] = swift_task_alloc();
  sub_10000AA4C((uint64_t *)&unk_1001813F0);
  v2[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDrop.DisplayPriority();
  v2[40] = v5;
  v2[41] = *(void *)(v5 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v2[44] = v6;
  v2[45] = *(void *)(v6 - 8);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v2[49] = v7;
  v2[50] = *(void *)(v7 - 8);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferType();
  v2[54] = v8;
  v2[55] = *(void *)(v8 - 8);
  v2[56] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[57] = v9;
  v2[58] = *(void *)(v9 - 8);
  v2[59] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropSend.Transfer();
  v2[60] = v10;
  v2[61] = *(void *)(v10 - 8);
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDropClient.Identifier();
  v2[71] = v11;
  v2[72] = *(void *)(v11 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer();
  v2[75] = v12;
  v2[76] = *(void *)(v12 - 8);
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  v2[85] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDrop.Transfers();
  v2[86] = v13;
  v2[87] = *(void *)(v13 - 8);
  v2[88] = swift_task_alloc();
  sub_10000AA4C(&qword_100181628);
  v2[89] = swift_task_alloc();
  uint64_t v14 = sub_10000AA4C(&qword_1001815C0);
  v2[90] = v14;
  v2[91] = *(void *)(v14 - 8);
  v2[92] = swift_task_alloc();
  v2[93] = type metadata accessor for MainActor();
  v2[94] = static MainActor.shared.getter();
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[95] = v16;
  v2[96] = v15;
  return _swift_task_switch(sub_1000341EC, v16, v15);
}

uint64_t sub_1000341EC()
{
  uint64_t v1 = *(void *)(v0[32] + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask);
  v0[97] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[98] = v2;
  uint64_t v3 = sub_10000AA4C(&qword_100180590);
  v0[99] = v3;
  *uint64_t v2 = v0;
  v2[1] = sub_1000342C8;
  uint64_t v4 = v0[92];
  uint64_t v5 = v0[90];
  return Task.value.getter(v4, v1, v5, v3, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000342C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 800) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 768);
    uint64_t v4 = *(void *)(v2 + 760);
    uint64_t v5 = sub_100037A90;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 768);
    uint64_t v4 = *(void *)(v2 + 760);
    uint64_t v5 = sub_1000343EC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000343EC()
{
  uint64_t v1 = *(void *)(v0 + 736);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  swift_release();
  uint64_t v4 = SFXPCResilientAsyncSequence.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 176) = v4;
  *(void *)(v0 + 808) = OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded;
  *(_DWORD *)(v0 + 840) = enum case for SFAirDropClient.Identifier.airdropUI(_:);
  *(void *)(v0 + 816) = static MainActor.shared.getter();
  uint64_t v5 = sub_10000AA4C(&qword_100181630);
  uint64_t v6 = sub_10000F288(&qword_100181638, &qword_100181630);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003453C;
  uint64_t v8 = *(void *)(v0 + 712);
  return dispatch thunk of AsyncIteratorProtocol.next()(v8, v5, v6);
}

uint64_t sub_10003453C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 832) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 816);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000375F4;
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000346D4;
  }
  return _swift_task_switch(v7, v4, v6);
}

uint64_t sub_1000346D4()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  return _swift_task_switch(sub_10003473C, v2, v1);
}

uint64_t sub_10003473C()
{
  v408 = v0;
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[86];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    swift_release();
    swift_release();
    if (qword_10017F608 != -1) {
      goto LABEL_183;
    }
    goto LABEL_3;
  }
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[88], v1, v3);
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B150(v10, (uint64_t)qword_100181180);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "AirDropTransferSessionController transfers CHANGED", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = SFAirDrop.Transfers.receiveTransfers.getter();
  uint64_t v378 = v14 + 64;
  uint64_t v382 = v14;
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & *(void *)(v14 + 64);
  swift_beginAccess();
  int64_t v18 = 0;
  int64_t v380 = (unint64_t)(63 - v15) >> 6;
  uint64_t v375 = v0[104];
  v337 = v0;
  while (1)
  {
    if (v17)
    {
      uint64_t v384 = (v17 - 1) & v17;
      int64_t v386 = v18;
      unint64_t v20 = __clz(__rbit64(v17)) | (v18 << 6);
      goto LABEL_33;
    }
    BOOL v21 = __OFADD__(v18, 1);
    int64_t v22 = v18 + 1;
    if (v21)
    {
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    if (v22 >= v380) {
      goto LABEL_78;
    }
    unint64_t v23 = *(void *)(v378 + 8 * v22);
    if (!v23) {
      break;
    }
LABEL_32:
    uint64_t v384 = (v23 - 1) & v23;
    int64_t v386 = v22;
    unint64_t v20 = __clz(__rbit64(v23)) + (v22 << 6);
LABEL_33:
    unsigned int v389 = *((_DWORD *)v0 + 210);
    uint64_t v25 = v0[85];
    uint64_t v26 = v0[84];
    uint64_t v27 = v0[76];
    uint64_t v28 = v0[75];
    uint64_t v29 = v0[74];
    uint64_t v30 = v0[73];
    uint64_t v31 = v0;
    uint64_t v32 = v0[72];
    uint64_t v33 = v31[71];
    v396 = *(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16);
    v396(v25, *(void *)(v382 + 56) + *(void *)(v27 + 72) * v20, v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v26, v25, v28);
    SFAirDropReceive.Transfer.presenter.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v30, v389, v33);
    LOBYTE(v26) = static SFAirDropClient.Identifier.== infix(_:_:)();
    os_log_type_t v34 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v34(v30, v33);
    v34(v29, v33);
    uint64_t v0 = v31;
    unint64_t v35 = v31[84];
    if (v26)
    {
      uint64_t v37 = v31[58];
      uint64_t v36 = v31[59];
      uint64_t v39 = v0[56];
      uint64_t v38 = v0[57];
      uint64_t v40 = v0[54];
      uint64_t v41 = v0[55];
      SFAirDropReceive.Transfer.askRequest.getter();
      SFAirDropReceive.AskRequest.type.getter();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      char v42 = SFAirDrop.TransferType.isOnlyExchange.getter();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
      if (v42)
      {
        v396(v0[80], v0[84], v0[75]);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        BOOL v45 = os_log_type_enabled(v43, v44);
        uint64_t v46 = v0[84];
        uint64_t v47 = v0[80];
        uint64_t v48 = v0[76];
        uint64_t v49 = v0[75];
        if (v45)
        {
          uint64_t v50 = v0[52];
          uint64_t v397 = v0[84];
          uint64_t v51 = v0[50];
          uint64_t v370 = v0[49];
          uint64_t v52 = swift_slowAlloc();
          v407[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v52 = 136315138;
          SFAirDropReceive.Transfer.id.getter();
          sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
          uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)type = v49;
          unint64_t v55 = v54;
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v370);
          *(void *)(v52 + 4) = sub_100047F98(v53, v55, v407);
          swift_bridgeObjectRelease();
          char v56 = *(void (**)(uint64_t, void))(v48 + 8);
          v56(v47, *(void *)type);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "AirDropTransferSessionController transfers skipped, transfer is of type onlyExchange, not monitoring on AirDropUI {id: %s}", (uint8_t *)v52, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v0 = v337;
          swift_slowDealloc();

          v56(v397, *(void *)type);
          goto LABEL_17;
        }

        uint64_t v109 = *(void (**)(uint64_t, NSObject *))(v48 + 8);
        v109(v47, v49);
        goto LABEL_76;
      }
      uint64_t v79 = v0[53];
      uint64_t v80 = v0[49];
      uint64_t v81 = v0[50];
      objc_super v82 = *(void **)(v0[32] + v0[101]);
      swift_bridgeObjectRetain();
      SFAirDropReceive.Transfer.id.getter();
      uint64_t v83 = SFAirDrop.TransferIdentifier.stringValue.getter();
      uint64_t v85 = v84;
      v371 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
      v371(v79, v80);
      uint64_t v86 = v82[2];
      if (v86)
      {
        if (v82[4] == v83 && v82[5] == v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_73:
          unint64_t v148 = v0[84];
          uint64_t v149 = v0[81];
          uint64_t v150 = v0[75];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v396(v149, v148, v150);
          char v151 = Logger.logObject.getter();
          os_log_type_t v152 = static os_log_type_t.default.getter();
          BOOL v153 = os_log_type_enabled(v151, v152);
          uint64_t v46 = v0[84];
          uint64_t v154 = v0[81];
          uint64_t v155 = v0[76];
          uint64_t v49 = v0[75];
          if (v153)
          {
            uint64_t v156 = v0[52];
            uint64_t v401 = v0[84];
            uint64_t v157 = v0[49];
            uint64_t v158 = swift_slowAlloc();
            v407[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v158 = 136315138;
            SFAirDropReceive.Transfer.id.getter();
            sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
            uint64_t v159 = dispatch thunk of CustomStringConvertible.description.getter();
            os_log_t logc = v49;
            unint64_t v161 = v160;
            v371(v156, v157);
            *(void *)(v158 + 4) = sub_100047F98(v159, v161, v407);
            swift_bridgeObjectRelease();
            uint64_t v109 = *(void (**)(uint64_t, NSObject *))(v155 + 8);
            uint64_t v49 = logc;
            v109(v154, logc);
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "AirDropTransferSessionController transfer update for %s skipped, this transfer is being ended to save live activity space", (uint8_t *)v158, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v162 = v401;
LABEL_77:
            v109(v162, v49);
            goto LABEL_17;
          }

          uint64_t v109 = *(void (**)(uint64_t, NSObject *))(v155 + 8);
          v109(v154, v49);
LABEL_76:
          uint64_t v162 = v46;
          goto LABEL_77;
        }
        if (v86 != 1)
        {
          if (v82[6] == v83 && v82[7] == v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_73;
          }
          if (v86 != 2)
          {
            unint64_t v144 = v82 + 9;
            uint64_t v145 = 2;
            do
            {
              uint64_t v146 = v145 + 1;
              if (__OFADD__(v145, 1)) {
                goto LABEL_181;
              }
              BOOL v147 = *(v144 - 1) == v83 && *v144 == v85;
              if (v147 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_73;
              }
              ++v145;
              v144 += 2;
            }
            while (v146 != v86);
          }
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v87 = v0[84];
      uint64_t v88 = v0[83];
      uint64_t v89 = v0[82];
      uint64_t v90 = v0[75];
      swift_bridgeObjectRelease();
      v396(v88, v87, v90);
      unint64_t v91 = v87;
      uint64_t v92 = v396;
      v396(v89, v91, v90);
      unint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.debug.getter();
      BOOL v95 = os_log_type_enabled(v93, v94);
      uint64_t v96 = v0[83];
      os_log_t log = (os_log_t)v0[82];
      uint64_t v97 = v0[76];
      uint64_t v98 = v0[75];
      if (v95)
      {
        os_log_type_t v353 = v94;
        uint64_t v99 = v0[52];
        uint64_t v100 = v0[49];
        uint64_t v335 = v0[48];
        uint64_t v339 = v0[44];
        uint64_t v342 = v0[45];
        uint64_t v101 = swift_slowAlloc();
        v407[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v101 = 136315394;
        v346 = v93;
        SFAirDropReceive.Transfer.id.getter();
        sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v104 = v103;
        v371(v99, v100);
        v0[21] = sub_100047F98(v102, v104, v407);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
        v105(v96, v98);
        *(_WORD *)(v101 + 12) = 2080;
        SFAirDropReceive.Transfer.state.getter();
        sub_1000502BC(&qword_100181658, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
        uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v108 = v107;
        (*(void (**)(uint64_t, uint64_t))(v342 + 8))(v335, v339);
        v0[31] = sub_100047F98(v106, v108, v407);
        uint64_t v92 = v396;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v105((uint64_t)log, v98);
        unint64_t v93 = v346;
        _os_log_impl((void *)&_mh_execute_header, v346, v353, "AirDropTransferSessionController receive transfer {id: %s, state: %s}", (uint8_t *)v101, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
        v105(v96, v0[75]);
        v105((uint64_t)log, v98);
      }

      uint64_t v110 = sub_100037E9C((void (*)(void, void, void, void))v0[84], 0, 0);
      if (v375)
      {
        v92(v0[77], v0[84], v0[75]);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.error.getter();
        BOOL v113 = os_log_type_enabled(v111, v112);
        uint64_t v114 = v0[84];
        uint64_t v115 = v0[77];
        uint64_t v116 = v0[75];
        if (v113)
        {
          os_log_type_t logb = v112;
          v354 = v111;
          uint64_t v117 = v0[52];
          v399 = v105;
          uint64_t v118 = v0[49];
          uint64_t v119 = swift_slowAlloc();
          v350 = (void *)swift_slowAlloc();
          v407[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v119 = 136315394;
          uint64_t v390 = v114;
          SFAirDropReceive.Transfer.id.getter();
          sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
          uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v121 = v116;
          unint64_t v123 = v122;
          v371(v117, v118);
          v0[18] = sub_100047F98(v120, v123, v407);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v399(v115, v121);
          *(_WORD *)(v119 + 12) = 2112;
          swift_errorRetain();
          uint64_t v124 = _swift_stdlib_bridgeErrorToNSError();
          v0[19] = v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v350 = v124;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v354, logb, "Failed to update transfer %s: %@", (uint8_t *)v119, 0x16u);
          sub_10000AA4C(&qword_100180510);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          v399(v390, v121);
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          v105(v115, v116);
          swift_errorRelease();
          v105(v114, v116);
        }
      }
      else
      {
        uint64_t v125 = v110;
        v400 = v105;
        uint64_t v126 = v0[48];
        uint64_t v127 = v0[44];
        uint64_t v128 = v0[45];
        SFAirDropReceive.Transfer.state.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        v391 = v125;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        sub_1000502BC(&qword_100181650, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
        char v129 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v130 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
        v130(v126, v127);
        if ((v129 & 1) == 0)
        {
          uint64_t v132 = v0[47];
          uint64_t v131 = v0[48];
          uint64_t v134 = v0[45];
          uint64_t v133 = v0[46];
          uint64_t v135 = v0[44];
          sub_100088F84(v132);
          char v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16);
          v136(v131, v132, v135);
          swift_getKeyPath();
          swift_getKeyPath();
          v136(v133, v131, v135);
          swift_retain();
          static Published.subscript.setter();
          v130(v131, v135);
        }
        uint64_t v137 = v0[84];
        uint64_t v376 = v0[75];
        uint64_t v138 = v0[43];
        uint64_t v139 = v0[41];
        uint64_t v140 = v0[42];
        uint64_t v141 = v0[39];
        uint64_t v142 = v0[40];
        v130(v0[47], v0[44]);
        SFAirDropReceive.Transfer.displayPriority.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v140, v138, v142);
        swift_retain();
        static Published.subscript.setter();
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v142);
        SFAirDropReceive.Transfer.cancelAction.getter();
        v400(v137, v376);
        uint64_t v143 = (uint64_t)&v391[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction];
        swift_beginAccess();
        sub_10004FE60(v141, v143, (uint64_t *)&unk_1001813F0);
        swift_endAccess();
        swift_release();
      }
      uint64_t v375 = 0;
    }
    else
    {
      uint64_t v57 = v31[79];
      uint64_t v58 = v31[78];
      uint64_t v59 = v0[75];
      v396(v57, v35, v59);
      v396(v58, v35, v59);
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      BOOL v62 = os_log_type_enabled(v60, v61);
      uint64_t v63 = v0[84];
      uint64_t v64 = v0[79];
      uint64_t v65 = v0[78];
      uint64_t v66 = v0[76];
      uint64_t v67 = v0[75];
      if (v62)
      {
        uint64_t v349 = v0[74];
        *(void *)v352 = v0[71];
        uint64_t v68 = v0[52];
        uint64_t v338 = v0[50];
        os_log_t v345 = (os_log_t)v0[78];
        uint64_t v69 = v0[49];
        uint64_t v398 = v0[84];
        uint64_t v70 = swift_slowAlloc();
        v407[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v70 = 136315394;
        loga = v60;
        os_log_type_t typea = v61;
        SFAirDropReceive.Transfer.id.getter();
        sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v72 = v67;
        uint64_t v341 = v67;
        unint64_t v74 = v73;
        (*(void (**)(uint64_t, uint64_t))(v338 + 8))(v68, v69);
        *(void *)(v70 + 4) = sub_100047F98(v71, v74, v407);
        swift_bridgeObjectRelease();
        uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v75(v64, v72);
        *(_WORD *)(v70 + 12) = 2080;
        SFAirDropReceive.Transfer.presenter.getter();
        sub_1000502BC(&qword_100181648, (void (*)(uint64_t))&type metadata accessor for SFAirDropClient.Identifier);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v78 = v77;
        v34(v349, *(void *)v352);
        *(void *)(v70 + 14) = sub_100047F98(v76, v78, v407);
        swift_bridgeObjectRelease();
        v75((uint64_t)v345, v341);
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "AirDropTransferSessionController transfer update for %s skipped, presenter is %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v75(v398, v341);
      }
      else
      {

        unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v19(v65, v67);
        v19(v64, v67);
        v19(v63, v67);
      }
    }
LABEL_17:
    unint64_t v17 = v384;
    int64_t v18 = v386;
  }
  int64_t v24 = v22 + 1;
  if (v22 + 1 >= v380) {
    goto LABEL_78;
  }
  unint64_t v23 = *(void *)(v378 + 8 * v24);
  if (v23) {
    goto LABEL_31;
  }
  int64_t v24 = v22 + 2;
  if (v22 + 2 >= v380) {
    goto LABEL_78;
  }
  unint64_t v23 = *(void *)(v378 + 8 * v24);
  if (v23) {
    goto LABEL_31;
  }
  int64_t v24 = v22 + 3;
  if (v22 + 3 >= v380) {
    goto LABEL_78;
  }
  unint64_t v23 = *(void *)(v378 + 8 * v24);
  if (v23)
  {
LABEL_31:
    int64_t v22 = v24;
    goto LABEL_32;
  }
  int64_t v24 = v22 + 4;
  if (v22 + 4 < v380)
  {
    unint64_t v23 = *(void *)(v378 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v22 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          break;
        }
        if (v22 >= v380) {
          goto LABEL_78;
        }
        unint64_t v23 = *(void *)(v378 + 8 * v22);
        ++v24;
        if (v23) {
          goto LABEL_32;
        }
      }
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    goto LABEL_31;
  }
LABEL_78:
  swift_release();
  uint64_t v163 = SFAirDrop.Transfers.sendTransfers.getter();
  uint64_t v379 = v163 + 64;
  uint64_t v383 = v163;
  uint64_t v164 = -1 << *(unsigned char *)(v163 + 32);
  if (-v164 < 64) {
    uint64_t v165 = ~(-1 << -(char)v164);
  }
  else {
    uint64_t v165 = -1;
  }
  unint64_t v166 = v165 & *(void *)(v163 + 64);
  swift_beginAccess();
  int64_t v167 = 0;
  int64_t v381 = (unint64_t)(63 - v164) >> 6;
  while (2)
  {
    if (v166)
    {
      uint64_t v385 = (v166 - 1) & v166;
      int64_t v387 = v167;
      unint64_t v174 = __clz(__rbit64(v166)) | (v167 << 6);
      goto LABEL_99;
    }
    BOOL v21 = __OFADD__(v167, 1);
    int64_t v175 = v167 + 1;
    if (v21) {
      goto LABEL_176;
    }
    if (v175 >= v381)
    {
LABEL_143:
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v301 = sub_100093FF0(v0[28]);
      uint64_t v302 = SFAirDrop.Transfers.receiveTransfers.getter();
      uint64_t v303 = v375;
      uint64_t v304 = sub_100031988(v302);
      swift_bridgeObjectRelease();
      v305 = sub_1000B7888(v304, v301);
      swift_bridgeObjectRelease();
      uint64_t v306 = SFAirDrop.Transfers.sendTransfers.getter();
      uint64_t v307 = sub_100031988(v306);
      swift_bridgeObjectRelease();
      v308 = sub_1000B7888(v307, (uint64_t)v305);
      swift_bridgeObjectRelease();
      int64_t v309 = 0;
      unint64_t v310 = v308[7];
      v388 = v308 + 7;
      uint64_t v311 = -1;
      uint64_t v312 = -1 << *((unsigned char *)v308 + 32);
      if (-v312 < 64) {
        uint64_t v311 = ~(-1 << -(char)v312);
      }
      unint64_t v313 = v311 & v310;
      int64_t v395 = (unint64_t)(63 - v312) >> 6;
      if ((v311 & v310) == 0) {
        goto LABEL_147;
      }
LABEL_146:
      unint64_t v314 = __clz(__rbit64(v313));
      v313 &= v313 - 1;
      for (unint64_t i = v314 | (v309 << 6); ; unint64_t i = __clz(__rbit64(v317)) + (v309 << 6))
      {
        v319 = (uint64_t *)(v308[6] + 16 * i);
        uint64_t v320 = *v319;
        unint64_t v321 = v319[1];
        swift_bridgeObjectRetain_n();
        v322 = Logger.logObject.getter();
        os_log_type_t v323 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v322, v323))
        {
          uint64_t v406 = v303;
          v324 = v308;
          uint64_t v325 = swift_slowAlloc();
          v407[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v325 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v325 + 4) = sub_100047F98(v320, v321, v407);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v322, v323, "AirDropTransferSessionController transfers removing %s", (uint8_t *)v325, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          v308 = v324;
          uint64_t v303 = v406;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v326 = (char **)(v0[32] + v0[101]);
        sub_100039D3C(v320, v321);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v327 = sub_10004D010(v326, v320, v321);
        swift_bridgeObjectRelease();
        int64_t v328 = *((void *)*v326 + 2);
        if (v328 < v327)
        {
          __break(1u);
          goto LABEL_175;
        }
        sub_10004D1C4(v327, v328);
        swift_endAccess();
        swift_bridgeObjectRelease();
        if (v313) {
          goto LABEL_146;
        }
LABEL_147:
        int64_t v316 = v309 + 1;
        if (__OFADD__(v309, 1)) {
          goto LABEL_177;
        }
        if (v316 >= v395)
        {
LABEL_167:
          swift_release();
          sub_100033320();
          sub_10000AA4C(&qword_100181668);
          unint64_t v329 = static Activity.activities.getter();
          if (v329 >> 62) {
            uint64_t v330 = _CocoaArrayWrapper.endIndex.getter();
          }
          else {
            uint64_t v330 = *(void *)((v329 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v330 > 8) {
            sub_10003A4BC();
          }
          (*(void (**)(void, void))(v0[87] + 8))(v0[88], v0[86]);
          v0[102] = static MainActor.shared.getter();
          uint64_t v331 = sub_10000AA4C(&qword_100181630);
          uint64_t v332 = sub_10000F288(&qword_100181638, &qword_100181630);
          v333 = (void *)swift_task_alloc();
          v0[103] = v333;
          void *v333 = v0;
          v333[1] = sub_10003453C;
          uint64_t v334 = v0[89];
          return dispatch thunk of AsyncIteratorProtocol.next()(v334, v331, v332);
        }
        unint64_t v317 = v388[v316];
        ++v309;
        if (!v317)
        {
          int64_t v309 = v316 + 1;
          if (v316 + 1 >= v395) {
            goto LABEL_167;
          }
          unint64_t v317 = v388[v309];
          if (!v317)
          {
            int64_t v309 = v316 + 2;
            if (v316 + 2 >= v395) {
              goto LABEL_167;
            }
            unint64_t v317 = v388[v309];
            if (!v317)
            {
              int64_t v318 = v316 + 3;
              if (v318 >= v395) {
                goto LABEL_167;
              }
              unint64_t v317 = v388[v318];
              if (!v317)
              {
                while (1)
                {
                  int64_t v309 = v318 + 1;
                  if (__OFADD__(v318, 1)) {
                    goto LABEL_178;
                  }
                  if (v309 >= v395) {
                    goto LABEL_167;
                  }
                  unint64_t v317 = v388[v309];
                  ++v318;
                  if (v317) {
                    goto LABEL_160;
                  }
                }
              }
              int64_t v309 = v318;
            }
          }
        }
LABEL_160:
        unint64_t v313 = (v317 - 1) & v317;
      }
    }
    unint64_t v176 = *(void *)(v379 + 8 * v175);
    if (v176)
    {
LABEL_98:
      uint64_t v385 = (v176 - 1) & v176;
      int64_t v387 = v175;
      unint64_t v174 = __clz(__rbit64(v176)) + (v175 << 6);
LABEL_99:
      unsigned int v402 = *((_DWORD *)v0 + 210);
      uint64_t v178 = v0[74];
      uint64_t v179 = v0[73];
      uint64_t v180 = v0[72];
      uint64_t v181 = v0[71];
      uint64_t v182 = v0[70];
      uint64_t v183 = v0[69];
      uint64_t v184 = v0[60];
      uint64_t v185 = v0[61];
      v392 = *(void (**)(uint64_t, unint64_t, uint64_t))(v185 + 16);
      v392(v182, *(void *)(v383 + 56) + *(void *)(v185 + 72) * v174, v184);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v185 + 32))(v183, v182, v184);
      SFAirDropSend.Transfer.presenter.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v180 + 104))(v179, v402, v181);
      LOBYTE(v184) = static SFAirDropClient.Identifier.== infix(_:_:)();
      uint64_t v186 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
      v186(v179, v181);
      v186(v178, v181);
      unint64_t v187 = v0[69];
      if ((v184 & 1) == 0)
      {
        uint64_t v210 = v0[63];
        uint64_t v211 = v0[60];
        v392(v0[64], v0[69], v211);
        v392(v210, v187, v211);
        uint64_t v212 = Logger.logObject.getter();
        os_log_type_t v213 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v212, v213))
        {
          *(void *)v355 = v0[74];
          typec = v212;
          os_log_t v347 = (os_log_t)v0[71];
          uint64_t v393 = v0[69];
          uint64_t v214 = v0[64];
          uint64_t v351 = v0[63];
          uint64_t v215 = v0[61];
          uint64_t v343 = v0[60];
          uint64_t v216 = v0[52];
          uint64_t v218 = v0[49];
          uint64_t v217 = v0[50];
          uint64_t v219 = swift_slowAlloc();
          v407[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v219 = 136315394;
          os_log_type_t logd = v213;
          SFAirDropSend.Transfer.id.getter();
          sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
          uint64_t v220 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v222 = v221;
          (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v216, v218);
          *(void *)(v219 + 4) = sub_100047F98(v220, v222, v407);
          swift_bridgeObjectRelease();
          v223 = *(void (**)(uint64_t, uint64_t))(v215 + 8);
          v223(v214, v343);
          *(_WORD *)(v219 + 12) = 2080;
          SFAirDropSend.Transfer.presenter.getter();
          sub_1000502BC(&qword_100181648, (void (*)(uint64_t))&type metadata accessor for SFAirDropClient.Identifier);
          uint64_t v224 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v226 = v225;
          v186(*(void *)v355, (uint64_t)v347);
          *(void *)(v219 + 14) = sub_100047F98(v224, v226, v407);
          swift_bridgeObjectRelease();
          v223(v351, v343);
          _os_log_impl((void *)&_mh_execute_header, typec, logd, "AirDropTransferSessionController transfer update for %s skipped, presenter is %s", (uint8_t *)v219, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v223(v393, v343);
        }
        else
        {
          uint64_t v168 = v0[69];
          uint64_t v170 = v0[63];
          uint64_t v169 = v0[64];
          uint64_t v171 = v0[60];
          uint64_t v172 = v0[61];

          uint64_t v173 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
          v173(v170, v171);
          v173(v169, v171);
          v173(v168, v171);
        }
        goto LABEL_83;
      }
      uint64_t v189 = v0[55];
      uint64_t v188 = v0[56];
      uint64_t v190 = v0[54];
      uint64_t v192 = v0[37];
      uint64_t v191 = v0[38];
      uint64_t v193 = v0[36];
      SFAirDropSend.Transfer.sendRequest.getter();
      SFAirDropSend.Request.type.getter();
      (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v191, v193);
      char v194 = SFAirDrop.TransferType.isOnlyExchange.getter();
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v188, v190);
      if (v194)
      {
        v392(v0[65], v0[69], v0[60]);
        uint64_t v195 = Logger.logObject.getter();
        os_log_type_t v196 = static os_log_type_t.default.getter();
        BOOL v197 = os_log_type_enabled(v195, v196);
        uint64_t v198 = v0[69];
        uint64_t v199 = v0[65];
        uint64_t v200 = v0[60];
        uint64_t v201 = v0[61];
        if (!v197)
        {

          v251 = *(void (**)(uint64_t, uint64_t))(v201 + 8);
          v251(v199, v200);
          v251(v198, v200);
          goto LABEL_83;
        }
        uint64_t v202 = v0[52];
        uint64_t v403 = v0[69];
        uint64_t v203 = v0[50];
        uint64_t v372 = v0[49];
        uint64_t v204 = swift_slowAlloc();
        v407[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v204 = 136315138;
        SFAirDropSend.Transfer.id.getter();
        sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v205 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)typeb = v200;
        unint64_t v207 = v206;
        (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v202, v372);
        *(void *)(v204 + 4) = sub_100047F98(v205, v207, v407);
        swift_bridgeObjectRelease();
        uint64_t v208 = *(void (**)(uint64_t, os_log_t))(v201 + 8);
        os_log_t v209 = *(os_log_t *)typeb;
        v208(v199, *(os_log_t *)typeb);
        _os_log_impl((void *)&_mh_execute_header, v195, v196, "AirDropTransferSessionController transfers skipped, transfer is of type onlyExchange, not monitoring on AirDropUI {id: %s}", (uint8_t *)v204, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v0 = v337;
LABEL_111:
        swift_slowDealloc();

        v208(v403, v209);
LABEL_83:
        unint64_t v166 = v385;
        int64_t v167 = v387;
        continue;
      }
      uint64_t v228 = v0[50];
      uint64_t v227 = v0[51];
      uint64_t v229 = v0[49];
      v230 = *(void **)(v0[32] + v0[101]);
      swift_bridgeObjectRetain();
      SFAirDropSend.Transfer.id.getter();
      uint64_t v231 = SFAirDrop.TransferIdentifier.stringValue.getter();
      uint64_t v233 = v232;
      v373 = *(void (**)(uint64_t, uint64_t))(v228 + 8);
      v373(v227, v229);
      uint64_t v234 = v230[2];
      v235 = (void (*)(uint64_t, uint64_t, uint64_t))v392;
      if (v234)
      {
        if (v230[4] == v231 && v230[5] == v233 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_109;
        }
        if (v234 != 1)
        {
          if (v230[6] == v231 && v230[7] == v233 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_109:
            uint64_t v236 = v0[69];
            uint64_t v237 = v0[66];
            uint64_t v238 = v0[60];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v235(v237, v236, v238);
            uint64_t v195 = Logger.logObject.getter();
            os_log_type_t v239 = static os_log_type_t.default.getter();
            BOOL v240 = os_log_type_enabled(v195, v239);
            uint64_t v241 = v0[69];
            uint64_t v242 = v0[66];
            uint64_t v243 = v0[61];
            uint64_t v244 = v0[60];
            if (!v240)
            {

              uint64_t v252 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
              v252(v242, v244);
              v252(v241, v244);
              goto LABEL_83;
            }
            uint64_t v245 = v0[52];
            uint64_t v403 = v0[69];
            uint64_t v246 = v0[49];
            os_log_t loge = (os_log_t)v0[60];
            uint64_t v247 = swift_slowAlloc();
            v407[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v247 = 136315138;
            SFAirDropSend.Transfer.id.getter();
            sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
            uint64_t v248 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v250 = v249;
            v373(v245, v246);
            *(void *)(v247 + 4) = sub_100047F98(v248, v250, v407);
            swift_bridgeObjectRelease();
            uint64_t v208 = *(void (**)(uint64_t, os_log_t))(v243 + 8);
            os_log_t v209 = loge;
            v208(v242, loge);
            _os_log_impl((void *)&_mh_execute_header, v195, v239, "AirDropTransferSessionController transfer update for %s skipped, this transfer is being ended to save live activity space", (uint8_t *)v247, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_111;
          }
          if (v234 != 2)
          {
            v297 = v230 + 9;
            uint64_t v298 = 2;
            do
            {
              uint64_t v299 = v298 + 1;
              if (__OFADD__(v298, 1)) {
                goto LABEL_182;
              }
              BOOL v300 = *(v297 - 1) == v231 && *v297 == v233;
              if (v300 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                v235 = (void (*)(uint64_t, uint64_t, uint64_t))v392;
                goto LABEL_109;
              }
              ++v298;
              v297 += 2;
              BOOL v147 = v299 == v234;
              v235 = (void (*)(uint64_t, uint64_t, uint64_t))v392;
            }
            while (!v147);
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v253 = v0[69];
      uint64_t v254 = v0[68];
      uint64_t v255 = v0[67];
      uint64_t v256 = v0[60];
      swift_bridgeObjectRelease();
      v235(v254, v253, v256);
      v235(v255, v253, v256);
      int v257 = Logger.logObject.getter();
      os_log_type_t v258 = static os_log_type_t.debug.getter();
      BOOL v259 = os_log_type_enabled(v257, v258);
      uint64_t v260 = v0[68];
      uint64_t v261 = v0[67];
      uint64_t v262 = v0[61];
      uint64_t v263 = v0[60];
      if (v259)
      {
        os_log_t logf = (os_log_t)v0[67];
        uint64_t v264 = v0[52];
        uint64_t v265 = v0[49];
        uint64_t v336 = v0[35];
        uint64_t v340 = v0[33];
        uint64_t v344 = v0[34];
        os_log_type_t v356 = v258;
        uint64_t v266 = swift_slowAlloc();
        v407[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v266 = 136315394;
        v348 = v257;
        SFAirDropSend.Transfer.id.getter();
        sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v267 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v269 = v268;
        v373(v264, v265);
        v0[26] = sub_100047F98(v267, v269, v407);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v235 = (void (*)(uint64_t, uint64_t, uint64_t))v392;
        swift_bridgeObjectRelease();
        uint64_t v270 = *(void (**)(uint64_t, uint64_t))(v262 + 8);
        v270(v260, v263);
        *(_WORD *)(v266 + 12) = 2080;
        SFAirDropSend.Transfer.state.getter();
        sub_1000502BC(&qword_100181660, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State);
        uint64_t v271 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v273 = v272;
        (*(void (**)(uint64_t, uint64_t))(v344 + 8))(v336, v340);
        v0[27] = sub_100047F98(v271, v273, v407);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v274 = v270;
        v270((uint64_t)logf, v263);
        int v257 = v348;
        _os_log_impl((void *)&_mh_execute_header, v348, v356, "AirDropTransferSessionController send transfer {id: %s, state: %s}", (uint8_t *)v266, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v275 = *(void (**)(uint64_t, uint64_t))(v262 + 8);
        v275(v0[68], v0[60]);
        uint64_t v274 = v275;
        v275(v261, v263);
      }

      sub_1000393E8(v0[69], 0, 0);
      uint64_t v276 = v0[69];
      uint64_t v277 = v0[60];
      if (v375)
      {
        v235(v0[62], v276, v277);
        swift_errorRetain();
        swift_errorRetain();
        long long v278 = Logger.logObject.getter();
        os_log_type_t v279 = static os_log_type_t.error.getter();
        BOOL v280 = os_log_type_enabled(v278, v279);
        uint64_t v281 = v0[69];
        uint64_t v282 = v0[62];
        v283 = v0[60];
        if (v280)
        {
          uint64_t v284 = v0[52];
          v404 = v274;
          uint64_t v285 = v0[49];
          uint64_t v286 = v0[60];
          os_log_t logg = v283;
          uint64_t v287 = swift_slowAlloc();
          v357 = (void *)swift_slowAlloc();
          v407[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v287 = 136315394;
          SFAirDropSend.Transfer.id.getter();
          sub_1000502BC(&qword_100181640, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
          uint64_t v288 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v394 = v281;
          unint64_t v290 = v289;
          v373(v284, v285);
          v337[24] = sub_100047F98(v288, v290, v407);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v404(v282, v286);
          *(_WORD *)(v287 + 12) = 2112;
          swift_errorRetain();
          uint64_t v291 = _swift_stdlib_bridgeErrorToNSError();
          v337[25] = v291;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v357 = v291;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v278, v279, "Failed to update transfer %s: %@", (uint8_t *)v287, 0x16u);
          sub_10000AA4C(&qword_100180510);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v0 = v337;
          swift_slowDealloc();

          swift_errorRelease();
          v404(v394, (uint64_t)logg);
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          v274(v282, (uint64_t)v283);
          swift_errorRelease();
          v274(v281, (uint64_t)v283);
        }
      }
      else
      {
        uint64_t v292 = v0[43];
        uint64_t v374 = v0[42];
        uint64_t v293 = v0[41];
        uint64_t v377 = v0[40];
        uint64_t v294 = v0[34];
        uint64_t v295 = v0[35];
        v405 = v274;
        uint64_t v296 = v0[33];
        SFAirDropSend.Transfer.state.getter();
        sub_10008A464(v295);
        (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v295, v296);
        SFAirDropSend.Transfer.displayPriority.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v293 + 16))(v374, v292, v377);
        swift_retain();
        static Published.subscript.setter();
        (*(void (**)(uint64_t, uint64_t))(v293 + 8))(v292, v377);
        swift_release();
        v405(v276, v277);
      }
      uint64_t v375 = 0;
      goto LABEL_83;
    }
    break;
  }
  int64_t v177 = v175 + 1;
  if (v175 + 1 >= v381) {
    goto LABEL_143;
  }
  unint64_t v176 = *(void *)(v379 + 8 * v177);
  if (v176) {
    goto LABEL_97;
  }
  int64_t v177 = v175 + 2;
  if (v175 + 2 >= v381) {
    goto LABEL_143;
  }
  unint64_t v176 = *(void *)(v379 + 8 * v177);
  if (v176) {
    goto LABEL_97;
  }
  int64_t v177 = v175 + 3;
  if (v175 + 3 >= v381) {
    goto LABEL_143;
  }
  unint64_t v176 = *(void *)(v379 + 8 * v177);
  if (v176) {
    goto LABEL_97;
  }
  int64_t v177 = v175 + 4;
  if (v175 + 4 >= v381) {
    goto LABEL_143;
  }
  unint64_t v176 = *(void *)(v379 + 8 * v177);
  if (v176)
  {
LABEL_97:
    int64_t v175 = v177;
    goto LABEL_98;
  }
  while (1)
  {
    int64_t v175 = v177 + 1;
    if (__OFADD__(v177, 1)) {
      break;
    }
    if (v175 >= v381) {
      goto LABEL_143;
    }
    unint64_t v176 = *(void *)(v379 + 8 * v175);
    ++v177;
    if (v176) {
      goto LABEL_98;
    }
  }
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  swift_once();
LABEL_3:
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_100181180);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AirDropTransferSessionController transfers ENDED", v7, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000375F4()
{
  v0[17] = v0[104];
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[96];
  uint64_t v2 = v0[95];
  return _swift_task_switch(sub_10003767C, v2, v1);
}

uint64_t sub_10003767C()
{
  uint64_t v10 = v0;
  swift_release();
  swift_release();
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 160) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirDropTransferSessionController transfers FAILED {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100037A90()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 160) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirDropTransferSessionController transfers FAILED {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

char *sub_100037E9C(void (*a1)(void, void, void, void), uint64_t a2, uint64_t a3)
{
  uint64_t v178 = a2;
  uint64_t v182 = a1;
  uint64_t v149 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v148 = *(void *)(v149 - 8);
  uint64_t v4 = __chkstk_darwin(v149);
  uint64_t v146 = (char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  BOOL v147 = (char *)&v138 - v6;
  uint64_t v155 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  BOOL v153 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v150 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_1001816B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v157 = (uint64_t)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v160 = *(void *)(v159 - 8);
  uint64_t v11 = __chkstk_darwin(v159);
  uint64_t v143 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = v12;
  __chkstk_darwin(v11);
  uint64_t v156 = (char *)&v138 - v13;
  uint64_t v14 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v14 - 8);
  uint64_t v158 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SFAirDrop.DisplayPriority();
  __chkstk_darwin(v16 - 8);
  uint64_t v171 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DeviceLockState();
  __chkstk_darwin(v18 - 8);
  uint64_t v170 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v20 - 8);
  uint64_t v169 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v168 = *(void *)(v165 - 8);
  uint64_t v22 = __chkstk_darwin(v165);
  int64_t v167 = (char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v164 = (uint64_t)&v138 - v25;
  __chkstk_darwin(v24);
  uint64_t v172 = (char *)&v138 - v26;
  uint64_t v176 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v173 = *(void *)(v176 - 8);
  uint64_t v27 = __chkstk_darwin(v176);
  uint64_t v145 = (char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v166 = (char *)&v138 - v30;
  uint64_t v144 = v31;
  __chkstk_darwin(v29);
  int64_t v177 = (char *)&v138 - v32;
  uint64_t v33 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for SFAirDropReceive.Transfer();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v138 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v138 - v42;
  uint64_t v163 = *(void (**)(void, void, void))(v38 + 16);
  v163((char *)&v138 - v42, v182, v37);
  if (a3)
  {
    os_log_type_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
    swift_bridgeObjectRetain();
    v44(v43, v37);
    uint64_t v45 = a3;
  }
  else
  {
    SFAirDropReceive.Transfer.id.getter();
    uint64_t v178 = SFAirDrop.TransferIdentifier.stringValue.getter();
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    uint64_t v45 = v47;
    os_log_type_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
    v44(v43, v37);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v48 = v181[0];
  uint64_t v49 = v177;
  if (!*((void *)v181[0] + 2) || (unint64_t v50 = sub_100048730(v178, v45), (v51 & 1) == 0))
  {
    uint64_t v162 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    SFAirDropReceive.Transfer.askRequest.getter();
    SFAirDropReceive.AskRequest.contactIdentifier.getter();
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    uint64_t v55 = v173 + 16;
    char v56 = v166;
    uint64_t v139 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
    v139(v166, v49, v176);
    uint64_t v140 = v55;
    if (v54) {
      LOBYTE(v57) = 1;
    }
    else {
      uint64_t v57 = SFAirDropReceive.AskRequest.senderIsMe.getter();
    }
    uint64_t v58 = v56;
    uint64_t v59 = v163;
    uint64_t v60 = v173 + 8;
    unint64_t v166 = *(char **)(v173 + 8);
    ((void (*)(char *, uint64_t))v166)(v58, v176);
    v59(v41, v182, v37);
    uint64_t v161 = v60;
    if (v57) {
      int v141 = 1;
    }
    else {
      int v141 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
    }
    uint64_t v61 = v164;
    uint64_t v62 = v165;
    v162(v41, v37);
    swift_bridgeObjectRetain();
    LODWORD(v165) = SFAirDropReceive.AskRequest.senderIsMe.getter();
    uint64_t v164 = SFAirDropReceive.AskRequest.senderCompositeName.getter();
    uint64_t v163 = v63;
    SFAirDropReceive.Transfer.state.getter();
    uint64_t v64 = type metadata accessor for SFAirDropSend.Transfer.State();
    uint64_t v65 = (uint64_t)v169;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v169, 1, 1, v64);
    SFAirDropReceive.Transfer.state.getter();
    uint64_t v162 = (void (*)(char *, uint64_t))SFAirDropReceive.Transfer.State.currentProgressCount.getter();
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
    v66(v61, v62);
    uint64_t v67 = v167;
    SFAirDropReceive.Transfer.state.getter();
    uint64_t v68 = (void *)SFAirDropReceive.Transfer.State.totalProgressCount.getter();
    v66((uint64_t)v67, v62);
    uint64_t v69 = v175;
    uint64_t v70 = (uint64_t)v170;
    dispatch thunk of SFLockStateMonitor.lockState.getter();
    uint64_t v52 = v171;
    SFAirDropReceive.Transfer.displayPriority.getter();
    char v71 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
    type metadata accessor for AirDropTransferSession();
    swift_allocObject();
    uint64_t v72 = v69;
    uint64_t v73 = v174;
    uint64_t v74 = sub_100086494(v178, v45, v165 & 1, v164, (uint64_t)v163, 0, 0, (uint64_t)v172, v65, v162, v68, v70, v52, v72, (uint64_t)&off_100169FD8, v71 & 1);
    if (v73)
    {
      ((void (*)(char *, uint64_t))v166)(v177, v176);
      swift_bridgeObjectRelease();
      return v52;
    }
    uint64_t v75 = v74;
    uint64_t v174 = 0;
    uint64_t v172 = v72;
    uint64_t v182 = (void (*)(void, void, void, void))v45;
    uint64_t v76 = SFAirDropReceive.AskRequest.previewImage.getter();
    if (v76)
    {
      unint64_t v77 = (void *)v76;
      id v78 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v76];
      swift_getKeyPath();
      swift_getKeyPath();
      v181[0] = v78;
      swift_retain();
      static Published.subscript.setter();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v181[0]) = v141 & 1;
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v79 = (uint64_t)v182;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v80 = (void (*)(id *, void))static Published.subscript.modify();
    objc_super v82 = v81;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v179 = *v82;
    void *v82 = (void *)0x8000000000000000;
    int64_t v175 = (void *)v75;
    uint64_t v84 = v75;
    uint64_t v85 = v178;
    sub_1000B72FC(v84, v178, v79, isUniquelyReferenced_nonNull_native);
    void *v82 = v179;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80(v181, 0);
    swift_release();
    swift_release();
    uint64_t v86 = SFAirDropReceive.AskRequest.contactIdentifier.getter();
    uint64_t v88 = (uint64_t)v158;
    if (v87)
    {
      uint64_t v89 = v86;
      uint64_t v90 = v87;
      uint64_t v91 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v88, 1, 1, v91);
      uint64_t v92 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v93 = (void *)swift_allocObject();
      v93[2] = v92;
      v93[3] = v89;
      v93[4] = v90;
      v93[5] = v85;
      v93[6] = v79;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static Task<>.noThrow(priority:operation:)();
      swift_release();
      swift_release();
      sub_10000F394(v88, &qword_1001829C0);
      swift_bridgeObjectRelease();
    }
    uint64_t v178 = v85;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v52 = (char *)v175;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v94 = v181[0];

    if (!v94)
    {
      uint64_t v95 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v88, 1, 1, v95);
      uint64_t v96 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v97 = v145;
      uint64_t v98 = v176;
      v139(v145, v177, v176);
      uint64_t v99 = v173;
      unint64_t v100 = (*(unsigned __int8 *)(v173 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80);
      unint64_t v101 = (v144 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = v96;
      uint64_t v103 = v98;
      uint64_t v52 = (char *)v175;
      (*(void (**)(unint64_t, char *, uint64_t))(v99 + 32))(v102 + v100, v97, v103);
      unint64_t v104 = (void *)(v102 + v101);
      uint64_t v105 = v182;
      *unint64_t v104 = v178;
      v104[1] = v105;
      swift_bridgeObjectRetain();
      static Task<>.noThrow(priority:operation:)();
      swift_release();
      swift_release();
      sub_10000F394(v88, &qword_1001829C0);
    }
    uint64_t v106 = type metadata accessor for TaskPriority();
    uint64_t v107 = *(void *)(v106 - 8);
    unint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56);
    uint64_t v109 = v107 + 56;
    v108(v88, 1, 1, v106);
    uint64_t v110 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v111 = (void *)swift_allocObject();
    uint64_t v112 = v178;
    v111[2] = v110;
    v111[3] = v112;
    v111[4] = v182;
    swift_bridgeObjectRetain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    sub_10000F394(v88, &qword_1001829C0);
    swift_bridgeObjectRelease();
    uint64_t v113 = v157;
    sub_1000A6C74(v157);
    uint64_t v114 = v160;
    uint64_t v115 = v159;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v113, 1, v159) == 1)
    {
      ((void (*)(char *, uint64_t))v166)(v177, v176);
      sub_10000F394(v113, &qword_1001816B0);
      return v52;
    }
    uint64_t v173 = v109;
    uint64_t v178 = v106;
    uint64_t v182 = v108;
    uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 32);
    uint64_t v117 = v156;
    v116(v156, v113, v115);
    uint64_t v118 = v153;
    SFAirDrop.NearbySharingInteraction.state.getter();
    uint64_t v119 = v154;
    uint64_t v120 = v155;
    if ((*(unsigned int (**)(char *, uint64_t))(v154 + 88))(v118, v155) != enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
    {
      (*(void (**)(char *, uint64_t))(v114 + 8))(v117, v115);
      ((void (*)(char *, uint64_t))v166)(v177, v176);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
      return v52;
    }
    (*(void (**)(char *, uint64_t))(v119 + 96))(v118, v120);
    (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v150, v118, v152);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v146, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v149);
    sub_1000502BC(&qword_100181BE0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v181[0] == v179 && v181[1] == v180)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v121 = *(void (**)(char *, uint64_t))(v148 + 8);
      uint64_t v122 = v149;
      v121(v146, v149);
      v121(v147, v122);
      uint64_t v123 = v159;
    }
    else
    {
      char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v125 = *(void (**)(char *, uint64_t))(v148 + 8);
      uint64_t v126 = v149;
      v125(v146, v149);
      v125(v147, v126);
      uint64_t v117 = v156;
      uint64_t v123 = v159;
      uint64_t v127 = (void (*)(char *, uint64_t))v166;
      if ((v124 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v151 + 8))(v150, v152);
        (*(void (**)(char *, uint64_t))(v160 + 8))(v117, v123);
        v127(v177, v176);
        return (char *)v175;
      }
    }
    uint64_t v128 = (uint64_t)v158;
    v182(v158, 1, 1, v178);
    uint64_t v129 = v160;
    long long v130 = v143;
    (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v143, v117, v123);
    unint64_t v131 = (*(unsigned __int8 *)(v129 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
    uint64_t v132 = (char *)swift_allocObject();
    uint64_t v133 = (void (*)(char *, char *, uint64_t))v116;
    uint64_t v134 = (uint64_t)v132;
    *((void *)v132 + 2) = 0;
    *((void *)v132 + 3) = 0;
    uint64_t v135 = v172;
    *((void *)v132 + 4) = v172;
    v133(&v132[v131], v130, v123);
    id v136 = v135;
    sub_1000F0F68(v128, (uint64_t)&unk_1001816D8, v134);
    swift_release();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v150, v152);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v117, v123);
    ((void (*)(char *, uint64_t))v166)(v177, v176);
    return (char *)v175;
  }
  uint64_t v52 = *(char **)(v48[7] + 8 * v50);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v52;
}

uint64_t sub_1000393E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a2;
  uint64_t v91 = a3;
  uint64_t v4 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v75 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for SFAirDropSend.Request();
  uint64_t v77 = *(void *)(v81 - 8);
  uint64_t v6 = __chkstk_darwin(v81);
  uint64_t v74 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v7;
  __chkstk_darwin(v6);
  uint64_t v76 = (char *)&v73 - v8;
  uint64_t v9 = type metadata accessor for SFAirDrop.DisplayPriority();
  __chkstk_darwin(v9 - 8);
  uint64_t v87 = (void (*)(char *, uint64_t))((char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DeviceLockState();
  __chkstk_darwin(v11 - 8);
  uint64_t v86 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v83 = *(void *)(v13 - 8);
  uint64_t v84 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  objc_super v82 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v73 - v17;
  __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v73 - v19;
  uint64_t v20 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, a1, v24);
  if (v91)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    swift_bridgeObjectRetain();
    v29(v27, v24);
  }
  else
  {
    SFAirDropSend.Transfer.id.getter();
    uint64_t v90 = SFAirDrop.TransferIdentifier.stringValue.getter();
    uint64_t v91 = v30;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v31 = v91;
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v32 = v92[0];
  if (*((void *)v92[0] + 2) && (unint64_t v33 = sub_100048730(v90, v31), (v34 & 1) != 0))
  {
    uint64_t v35 = *(void *)(v32[7] + 8 * v33);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v36 = (void (*)(char *, uint64_t, uint64_t))SFAirDropSend.Transfer.receiverName.getter();
    uint64_t v79 = v37;
    uint64_t v80 = v36;
    uint64_t v38 = (uint64_t)v85;
    SFAirDropSend.Transfer.state.getter();
    SFAirDropSend.Transfer.state.getter();
    id v78 = (void *)SFAirDropSend.Transfer.State.currentProgressCount.getter();
    uint64_t v39 = v28;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v83 + 8);
    uint64_t v41 = v18;
    uint64_t v42 = v84;
    v40(v41, v84);
    uint64_t v43 = v82;
    SFAirDropSend.Transfer.state.getter();
    os_log_type_t v44 = (void *)SFAirDropSend.Transfer.State.totalProgressCount.getter();
    v40(v43, v42);
    uint64_t v45 = v89;
    uint64_t v46 = (uint64_t)v86;
    dispatch thunk of SFLockStateMonitor.lockState.getter();
    uint64_t v35 = (uint64_t)v87;
    uint64_t v84 = v39;
    SFAirDropSend.Transfer.displayPriority.getter();
    uint64_t v47 = v45;
    uint64_t v48 = v90;
    uint64_t v49 = v88;
    uint64_t v50 = sub_100092718(v90, v31, v80, v79, v38, v78, v44, v46, v35, v47, (uint64_t)&off_100169FD8);
    if (v49) {
      goto LABEL_8;
    }
    uint64_t v35 = v50;
    uint64_t v88 = 0;
    char v51 = v76;
    SFAirDropSend.Transfer.sendRequest.getter();
    uint64_t v52 = sub_10004CC50();
    uint64_t v53 = *(void (**)(char *, uint64_t))(v77 + 8);
    uint64_t v89 = (void *)(v77 + 8);
    uint64_t v87 = v53;
    v53(v51, v81);
    swift_getKeyPath();
    swift_getKeyPath();
    v92[0] = v52;
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v92[0]) = 1;
    swift_retain();
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v86 = v47;
    uint64_t v54 = (void (*)(id *, void))static Published.subscript.modify();
    char v56 = v55;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v93 = *v56;
    uint64_t *v56 = 0x8000000000000000;
    sub_1000B72FC(v35, v48, v31, isUniquelyReferenced_nonNull_native);
    uint64_t *v56 = v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54(v92, 0);
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v58 = v92[0];

    if (v58)
    {
LABEL_8:
      swift_bridgeObjectRelease();
    }
    else
    {
      SFAirDropSend.Transfer.sendRequest.getter();
      uint64_t v59 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v75, 1, 1, v59);
      uint64_t v60 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v61 = v77;
      uint64_t v62 = v74;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v51, v81);
      unint64_t v63 = (*(unsigned __int8 *)(v61 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      unint64_t v64 = (v73 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v65 = v48;
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v60;
      uint64_t v67 = v62;
      uint64_t v68 = v81;
      (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v66 + v63, v67, v81);
      uint64_t v69 = (uint64_t *)(v66 + v64);
      uint64_t v70 = v91;
      *uint64_t v69 = v65;
      v69[1] = v70;
      swift_bridgeObjectRetain();
      uint64_t v71 = (uint64_t)v75;
      static Task<>.noThrow(priority:operation:)();
      swift_release();
      swift_release();
      sub_10000F394(v71, &qword_1001829C0);
      swift_bridgeObjectRelease();
      v87(v51, v68);
    }
  }
  return v35;
}

void sub_100039D3C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a1;
  uint64_t v5 = sub_10000AA4C(&qword_100181448);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v33 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B150(v11, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100047F98(v36, a2, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "End session for transfer identifier: %s.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v16 = v37[0];
  if (!*(void *)(v37[0] + 16) || (unint64_t v17 = sub_100048730(v36, a2), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_100047F98(v36, a2, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "AirDrop transfer session not active for ID: %s, returning", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_16:

      return;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32[1] = v19;
  sub_10008D368();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  sub_100048E18(v36, a2);
  swift_release();
  v20(v37, 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  SFAirDrop.TransferIdentifier.init(_:)();
  uint64_t v24 = v3;
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v7, 0, 1, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v7, 1, v25) == 1)
  {
    sub_10000F394((uint64_t)v7, &qword_100181448);
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_100047F98(v36, a2, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v27, "Failed to parse transfer id {tranferIdentifier: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      goto LABEL_16;
    }
    swift_release();
    goto LABEL_15;
  }
  uint64_t v29 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v33, v7, v25);
  uint64_t v30 = v24 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_interventionTasks;
  swift_beginAccess();
  if (*(void *)(*(void *)v30 + 16) && (sub_1000487A8(v29), (v31 & 1) != 0))
  {
    swift_endAccess();
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  swift_beginAccess();
  sub_100048EE8(v29);
  swift_endAccess();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
}

uint64_t sub_10003A4BC()
{
  uint64_t v0 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v0 - 8);
  id v94 = (char *)v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000AA4C(&qword_100181470);
  uint64_t v96 = *(void *)(v93 - 8);
  uint64_t v2 = __chkstk_darwin(v93);
  uint64_t v91 = (char *)v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v3;
  __chkstk_darwin(v2);
  uint64_t v106 = (char *)v89 - v4;
  uint64_t v5 = sub_10000AA4C(&qword_100181478);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000AA4C(&qword_100181480);
  uint64_t v108 = *(void *)(v103 - 8);
  uint64_t v8 = __chkstk_darwin(v103);
  uint64_t v105 = (char *)v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v89 - v10;
  uint64_t v12 = sub_10000AA4C(&qword_100181488);
  uint64_t v113 = *(void (***)(char *, char *, uint64_t *))(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t)v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v119 = *(void (***)(char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v129 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = sub_10000AA4C(&qword_100181490);
  uint64_t v115 = *(void (***)(char *, unint64_t))(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v114 = (char *)v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000B150(v19, (uint64_t)qword_100181180);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "We have too many live activities. Transitioning oldest transfers in .waitingForOpenResponse state to completed successfully", v22, 2u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v23 = 0;
  uint64_t v24 = sub_10003FE2C(v131);
  if (v24 < 0 || (v24 & 0x4000000000000000) != 0) {
    goto LABEL_79;
  }
  uint64_t v25 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v123 = v17;
    unint64_t v131 = v25;
    sub_10004A92C((uint64_t *)&v131);
    if (v23) {
      goto LABEL_86;
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v131;
    if ((v131 & 0x8000000000000000) != 0) {
      unint64_t v17 = 1;
    }
    else {
      unint64_t v17 = (v131 >> 62) & 1;
    }
    unint64_t v104 = v11;
    uint64_t v121 = v14;
    uint64_t v122 = v12;
    if (v17 != 1)
    {
      if (*(uint64_t *)(v131 + 16) >= 5) {
        uint64_t v14 = 5;
      }
      else {
        uint64_t v14 = *(void *)(v131 + 16);
      }
LABEL_16:
      os_log_type_t v27 = v129;
      if ((v26 & 0xC000000000000001) != 0 && v14)
      {
        type metadata accessor for AirDropTransferSession();
        Swift::Int v28 = 0;
        do
        {
          Swift::Int v29 = v28 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v28);
          Swift::Int v28 = v29;
        }
        while (v14 != v29);
      }
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        unint64_t v36 = v35;
        swift_release_n();
        uint64_t v26 = v30;
        uint64_t v128 = v15;
        if ((v36 & 1) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v32 = v26 + 32;
        unint64_t v36 = (2 * v14) | 1;
        uint64_t v128 = v15;
        if ((v36 & 1) == 0) {
          goto LABEL_24;
        }
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v37 = (void *)swift_dynamicCastClass();
      if (!v37)
      {
        swift_unknownObjectRelease();
        uint64_t v37 = _swiftEmptyArrayStorage;
      }
      uint64_t v38 = v37[2];
      swift_release();
      if (__OFSUB__(v36 >> 1, v34)) {
        goto LABEL_83;
      }
      if (v38 != (v36 >> 1) - (void)v34) {
        goto LABEL_84;
      }
      uint64_t v32 = swift_dynamicCastClass();
      uint64_t v15 = v128;
      os_log_type_t v27 = v129;
      if (!v32)
      {
        swift_unknownObjectRelease();
        uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
      }
      while (1)
      {
        swift_unknownObjectRelease();
        BOOL v39 = v32 < 0 || (v32 & 0x4000000000000000) != 0;
        uint64_t v102 = v7;
        if (v39)
        {
          swift_bridgeObjectRetain();
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        else
        {
          uint64_t v26 = *(void *)(v32 + 16);
        }
        uint64_t v7 = (char *)_swiftEmptyArrayStorage;
        uint64_t v130 = v32;
        if (v26)
        {
          unint64_t v131 = (unint64_t)_swiftEmptyArrayStorage;
          uint64_t v34 = (uint64_t *)&v131;
          sub_100016214(0, v26 & ~(v26 >> 63), 0);
          if (v26 < 0)
          {
            __break(1u);
            goto LABEL_82;
          }
          unint64_t v36 = 0;
          uint64_t v7 = (char *)v131;
          unint64_t v40 = v32 & 0xC000000000000001;
          do
          {
            if (v40)
            {
              uint64_t v41 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v41 = *(void *)(v32 + 8 * v36 + 32);
              swift_retain();
            }
            uint64_t v42 = *(void *)(v41 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
            uint64_t v43 = *(void *)(v41 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
            swift_bridgeObjectRetain();
            swift_release();
            unint64_t v131 = (unint64_t)v7;
            unint64_t v45 = *((void *)v7 + 2);
            unint64_t v44 = *((void *)v7 + 3);
            if (v45 >= v44 >> 1)
            {
              sub_100016214(v44 > 1, v45 + 1, 1);
              uint64_t v7 = (char *)v131;
            }
            ++v36;
            *((void *)v7 + 2) = v45 + 1;
            uint64_t v46 = &v7[16 * v45];
            *((void *)v46 + 4) = v42;
            *((void *)v46 + 5) = v43;
            uint64_t v15 = v128;
            os_log_type_t v27 = v129;
            uint64_t v32 = v130;
          }
          while (v26 != v36);
        }
        uint64_t v47 = (void *)(v107 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersBeingEnded);
        swift_beginAccess();
        void *v47 = v7;
        swift_bridgeObjectRelease();
        if (v39)
        {
          swift_bridgeObjectRetain();
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
        }
        else
        {
          uint64_t v26 = *(void *)(v32 + 16);
        }
        uint64_t v48 = (uint64_t)v102;
        uint64_t v34 = (uint64_t *)v103;
        uint64_t v7 = v114;
        if (!v26) {
          return swift_release();
        }
        if (v26 >= 1)
        {
          uint64_t v49 = 0;
          unint64_t v127 = v32 & 0xC000000000000001;
          uint64_t v50 = v119;
          uint64_t v125 = (uint64_t (**)(char *, uint64_t))(v119 + 11);
          int v126 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
          v119 += 12;
          uint64_t v120 = v50 + 1;
          uint64_t v118 = (void (**)(char *, char *, unint64_t))(v115 + 4);
          uint64_t v117 = (uint64_t (**)(uint64_t, uint64_t))(v113 + 11);
          int v116 = enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:);
          ++v115;
          uint64_t v112 = (void (**)(uint64_t, uint64_t))(v113 + 1);
          uint64_t v111 = (void (**)(uint64_t, uint64_t))(v113 + 12);
          uint64_t v113 = (void (**)(char *, char *, uint64_t *))(v108 + 16);
          uint64_t v110 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v108 + 56);
          uint64_t v109 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v108 + 48);
          unint64_t v101 = (void (**)(char *, uint64_t, uint64_t *))(v108 + 32);
          unint64_t v100 = (uint64_t (**)(char *, uint64_t *))(v108 + 88);
          int v99 = enum case for SFAirDrop.AcceptAction.single<A>(_:);
          uint64_t v98 = (void (**)(char *, uint64_t *))(v108 + 8);
          uint64_t v90 = (void (**)(char *, uint64_t *))(v108 + 96);
          uint64_t v97 = v96 + 32;
          v89[3] = v96 + 16;
          v89[2] = v96 + 8;
          v89[1] = (char *)&type metadata for () + 8;
          uint64_t v124 = v26;
          while (1)
          {
            uint64_t v51 = v48;
            uint64_t v52 = v34;
            if (v127)
            {
              uint64_t v53 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v53 = *(void *)(v32 + 8 * v49 + 32);
              swift_retain();
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            int v54 = (*v125)(v27, v15);
            if (v54 == v126)
            {
              (*v119)(v27, v15);
              uint64_t v55 = sub_10000AA4C(&qword_1001806D8);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v56 = v7;
              uint64_t v57 = v7;
              unint64_t v58 = v123;
              (*v118)(v56, &v27[*(int *)(v55 + 80)], v123);
              uint64_t v59 = type metadata accessor for SFAirDropReceive.ItemDestination();
              (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v27, v59);
              uint64_t v60 = v121;
              SFAirDrop.PermissionRequest.style.getter();
              uint64_t v61 = v122;
              int v62 = (*v117)(v60, v122);
              if (v62 == v116)
              {
                (*v111)(v60, v61);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v63 = *(void *)(v60 + 32);
                uint64_t v64 = v60 + *(int *)(sub_10000AA4C(&qword_1001814B0) + 80);
                uint64_t v65 = type metadata accessor for SFAirDrop.DeclineAction();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8))(v64, v65);
                if (*(void *)(v63 + 16))
                {
                  uint64_t v48 = v51;
                  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v108 + 16))(v51, v63+ ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80)), v52);
                  uint64_t v66 = 0;
                  uint64_t v7 = v114;
                  uint64_t v32 = v130;
                }
                else
                {
                  uint64_t v66 = 1;
                  uint64_t v7 = v114;
                  uint64_t v32 = v130;
                  uint64_t v48 = v51;
                }
                (*v110)(v48, v66, 1, v52);
                swift_bridgeObjectRelease();
                uint64_t v34 = v52;
                if ((*v109)(v48, 1, v52) == 1)
                {
                  (*v115)(v7, v123);
                  swift_release();
                  sub_10000F394(v48, &qword_100181478);
                  os_log_type_t v27 = v129;
                }
                else
                {
                  uint64_t v67 = v104;
                  (*v101)(v104, v48, v34);
                  uint64_t v68 = v105;
                  (*v113)(v105, v67, v34);
                  int v69 = (*v100)(v68, v34);
                  os_log_type_t v27 = v129;
                  if (v69 == v99)
                  {
                    (*v90)(v68, v34);
                    uint64_t v70 = &v68[*(int *)(sub_10000AA4C(&qword_1001814B8) + 48)];
                    uint64_t v71 = v96;
                    uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
                    uint64_t v72 = v106;
                    uint64_t v73 = v68;
                    uint64_t v74 = v93;
                    v95(v106, v73, v93);
                    uint64_t v75 = type metadata accessor for UUID();
                    (*(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 8))(v70, v75);
                    uint64_t v76 = type metadata accessor for TaskPriority();
                    uint64_t v77 = (uint64_t)v94;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v94, 1, 1, v76);
                    id v78 = v91;
                    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v91, v72, v74);
                    unint64_t v79 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
                    unint64_t v80 = swift_allocObject() + v79;
                    uint64_t v32 = v130;
                    v95((char *)v80, v78, v74);
                    static Task<>.noThrow(priority:operation:)();
                    swift_release();
                    swift_release();
                    sub_10000F394(v77, &qword_1001829C0);
                    uint64_t v81 = *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
                    unint64_t v82 = *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
                    swift_bridgeObjectRetain();
                    sub_100039D3C(v81, v82);
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v7 = v114;
                    uint64_t v34 = (uint64_t *)v103;
                    uint64_t v48 = (uint64_t)v102;
                    (*(void (**)(char *, uint64_t))(v71 + 8))(v106, v74);
                    (*v98)(v67, v34);
                    (*v115)(v7, v123);
                  }
                  else
                  {
                    swift_release();
                    uint64_t v83 = *v98;
                    (*v98)(v67, v34);
                    (*v115)(v7, v123);
                    v83(v68, v34);
                    uint64_t v48 = v51;
                  }
                  uint64_t v15 = v128;
                }
                goto LABEL_53;
              }
              (*v115)(v57, v58);
              swift_release();
              (*v112)(v60, v61);
              uint64_t v7 = v57;
              uint64_t v32 = v130;
            }
            else
            {
              swift_release();
              (*v120)(v27, v15);
            }
            uint64_t v48 = v51;
            uint64_t v34 = v52;
LABEL_53:
            if (v124 == ++v49) {
              return swift_release();
            }
          }
        }
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        swift_unknownObjectRelease();
        uint64_t v15 = v128;
        os_log_type_t v27 = v129;
LABEL_24:
        uint64_t v32 = (uint64_t)sub_10004A6B0(v26, v32, (uint64_t)v34, v36);
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v23 < 0) {
      break;
    }
    if (v85 >= 5) {
      uint64_t v86 = 5;
    }
    else {
      uint64_t v86 = v85;
    }
    if (v85 >= 0) {
      uint64_t v14 = v86;
    }
    else {
      uint64_t v14 = 5;
    }
    swift_bridgeObjectRetain();
    uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v87 >= v14) {
      goto LABEL_16;
    }
    __break(1u);
LABEL_79:
    unint64_t v88 = swift_bridgeObjectRetain();
    uint64_t v25 = (uint64_t)sub_10004A834(v88);
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_86:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

id sub_10003B5AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10003B760()
{
  return type metadata accessor for AirDropTransferSessionsController();
}

uint64_t type metadata accessor for AirDropTransferSessionsController()
{
  uint64_t result = qword_100181220;
  if (!qword_100181220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10003B7B4()
{
  sub_10003B8F4(319, &qword_100181230, &qword_100181238);
  if (v0 <= 0x3F)
  {
    sub_10003B8F4(319, &qword_100181240, &qword_100181248);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10003B8F4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10000B100(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10003B944@<X0>(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void sub_10003B984(void *a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [self interfaceWithIdentifier:v4];

  uint64_t v6 = self;
  id v7 = [v6 protocolForProtocol:&OBJC_PROTOCOL___SFAirDropUIServer];
  [v5 setServer:v7];

  id v8 = [v6 protocolForProtocol:&OBJC_PROTOCOL___SFAirDropUIClient];
  [v5 setClient:v8];

  [v5 setClientMessagingExpectation:0];
  sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  [a1 setTargetQueue:v9];

  id v10 = [self userInitiated];
  [a1 setServiceQuality:v10];

  [a1 setInterface:v5];
  [a1 setInterfaceTarget:a2];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = sub_10004FAF0;
  uint64_t v21 = v11;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_1000639D4;
  uint64_t v19 = &unk_10016A278;
  uint64_t v12 = _Block_copy(&v16);
  swift_release();
  [a1 setActivationHandler:v12];
  _Block_release(v12);
  uint64_t v20 = sub_10003BEF8;
  uint64_t v21 = 0;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_1000639D4;
  uint64_t v19 = &unk_10016A2A0;
  uint64_t v13 = _Block_copy(&v16);
  [a1 setInterruptionHandler:v13];
  _Block_release(v13);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  uint64_t v20 = sub_10004FB30;
  uint64_t v21 = v14;
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  uint64_t v18 = sub_1000639D4;
  uint64_t v19 = &unk_10016A2F0;
  uint64_t v15 = _Block_copy(&v16);
  swift_release();
  [a1 setInvalidationHandler:v15];
  _Block_release(v15);
}

void sub_10003BD08(void *a1)
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181180);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirDropTransferSessionsController: connection activated from client!", v5, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v7 = (char *)Strong;
    if ([a1 remoteTarget])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
    sub_10000F2CC((uint64_t)&v9, (uint64_t)v11, &qword_100181560);
    sub_10000F2CC((uint64_t)v11, (uint64_t)&v9, &qword_100181560);
    if (*((void *)&v10 + 1))
    {
      sub_10000AA4C(&qword_1001815C8);
      if (swift_dynamicCast())
      {
        *(void *)&v7[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = v8;

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
    else
    {

      sub_10000F394((uint64_t)&v9, &qword_100181560);
    }
  }
}

id sub_10003BEF8(void *a1)
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181180);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirDropTransferSessionsController: connection interrupted, reconnecting", v5, 2u);
    swift_slowDealloc();
  }

  return [a1 activate];
}

uint64_t sub_10003BFF0()
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B150(v0, (uint64_t)qword_100181180);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AirDropTransferSessionsController: connection invalidated", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v5 = *(void **)&Strong[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection];
  *(void *)&Strong[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = 0;

  uint64_t v6 = (char *)swift_unknownObjectUnownedLoadStrong();
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = 0;

  return swift_unknownObjectRelease();
}

uint64_t sub_10003C1B4()
{
  v1[2] = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001815C0);
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_10003C278, 0, 0);
}

uint64_t sub_10003C278()
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[6] = sub_10000B150(v1, (uint64_t)qword_100181180);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "waiting for userInteractionmodels START", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[2];

  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_transfersMonitorTask);
  v0[7] = v6;
  swift_retain();
  id v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  uint64_t v8 = sub_10000AA4C(&qword_100180590);
  *id v7 = v0;
  v7[1] = sub_10003C410;
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[3];
  return Task.value.getter(v9, v6, v10, v8, &protocol self-conformance witness table for Error);
}

uint64_t sub_10003C410()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    os_log_type_t v3 = sub_10003C648;
  }
  else
  {
    (*(void (**)(void, void))(v2[4] + 8))(v2[5], v2[3]);
    swift_release();
    os_log_type_t v3 = sub_10003C568;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003C568()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "waiting for userInteractionmodels END", v3, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10003C648()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003C814(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_10003C8BC;
  return sub_10003C1B4();
}

uint64_t sub_10003C8BC()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

id sub_10003CA40(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  uint64_t v13 = v12;
  uint64_t v86 = a8;
  int v99 = (void *)a6;
  unint64_t v100 = a7;
  id v91 = a4;
  id v92 = a3;
  uint64_t v102 = a2;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v95 = *(void *)(v20 - 8);
  uint64_t v96 = v20;
  __chkstk_darwin(v20);
  uint64_t v98 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DeviceLockState();
  __chkstk_darwin(v22 - 8);
  uint64_t v97 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v24 - 8);
  id v94 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v90 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v93 = (uint64_t *)((char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10000B150(v16, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  id v28 = a5;
  uint64_t v88 = v27;
  Swift::Int v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v85 = v16;
  uint64_t v84 = v17;
  uint64_t v83 = v19;
  unint64_t v101 = (uint8_t *)a1;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v87 = v13;
    uint64_t v33 = v32;
    uint64_t v81 = (void *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    v104[0] = v82;
    *(_DWORD *)uint64_t v33 = 136315394;
    unint64_t v34 = v102;
    swift_bridgeObjectRetain();
    uint64_t v103 = sub_100047F98(a1, v34, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 2112;
    uint64_t v103 = (uint64_t)v28;
    id v35 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v81 = v28;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Start session with identifier: %s, itemCount: %@", (uint8_t *)v33, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = v87;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v36 = v28;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v104[0] + 16))
  {
    uint64_t v37 = (uint64_t)v101;
    sub_100048730((uint64_t)v101, v102);
    char v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v40 = a12;
    if ((v39 & 1) == 0) {
      goto LABEL_14;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v87 = v13;
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      unint64_t v44 = v102;
      swift_bridgeObjectRetain();
      uint64_t v103 = sub_100047F98(v37, v44, v104);
      uint64_t v13 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tried to start a session with an existing transfer: %s. Ending existing session, and starting new one", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100039D3C(v37, v102);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v40 = a12;
LABEL_14:
  id v45 = [v91 unsignedIntegerValue];
  swift_bridgeObjectRetain();
  LODWORD(v92) = [v92 BOOLValue];
  uint64_t v46 = (uint64_t)v93;
  void *v93 = v45;
  (*(void (**)(uint64_t, void, uint64_t))(v90 + 104))(v46, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v89);
  uint64_t v47 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v48 = v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v94, 1, 1, v47);
  uint64_t v49 = v100;
  swift_bridgeObjectRetain();
  id v50 = [v36 integerValue];
  uint64_t v51 = (uint64_t)v97;
  dispatch thunk of SFLockStateMonitor.lockState.getter();
  uint64_t v52 = v98;
  (*(void (**)(char *, void, uint64_t))(v95 + 104))(v98, enum case for SFAirDrop.DisplayPriority.normal(_:), v96);
  unsigned __int8 v53 = [v40 BOOLValue];
  type metadata accessor for AirDropTransferSession();
  swift_allocObject();
  id v54 = v13;
  uint64_t v79 = (uint64_t)v48;
  uint64_t v55 = (uint64_t)v101;
  uint64_t v56 = sub_100086494((uint64_t)v101, v102, (int)v92, (uint64_t)v99, v49, 0, 0, v46, v79, 0, v50, v51, v52, v54, (uint64_t)&off_100169FD8, v53);
  int v99 = v40;
  unint64_t v100 = a11;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v57 = v102;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v58 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  uint64_t v60 = v59;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v103 = *v60;
  *uint64_t v60 = 0x8000000000000000;
  sub_1000B72FC(v56, v55, v57, isUniquelyReferenced_nonNull_native);
  *uint64_t v60 = v103;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58(v104, 0);
  swift_release();
  swift_release();
  if (a9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    v104[0] = v86;
    v104[1] = a9;
    swift_bridgeObjectRetain();
    swift_retain();
    static Published.subscript.setter();
  }
  uint64_t v63 = v99;
  unint64_t v62 = v100;
  if (v100 >> 60 == 15) {
    goto LABEL_24;
  }
  sub_10001EC34(a10, v100);
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CGImageRef v65 = sub_100006EE0(isa);

  if (!v65)
  {
    sub_10001EBC4(a10, v62);
LABEL_24:
    unsigned __int8 v78 = [v63 BOOLValue];
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v104[0]) = v78;
    return (id)static Published.subscript.setter();
  }
  CGImageGetSizeAfterOrientation();
  uint64_t v66 = v84;
  uint64_t v67 = v83;
  uint64_t v68 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v88, v85);
  int v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v69, v70))
  {

    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
    goto LABEL_23;
  }
  uint64_t v71 = (uint8_t *)swift_slowAlloc();
  uint64_t v102 = swift_slowAlloc();
  v104[0] = v102;
  *(_DWORD *)uint64_t v71 = 136315138;
  id result = (id)BSNSStringFromCGSize();
  if (result)
  {
    uint64_t v73 = result;
    unint64_t v101 = v71 + 4;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;

    uint64_t v103 = sub_100047F98(v74, v76, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Transfer session contains preview image of size: %s", v71, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
    uint64_t v63 = v99;
LABEL_23:
    id v77 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v65];
    swift_getKeyPath();
    swift_getKeyPath();
    v104[0] = (uint64_t)v77;
    swift_retain();
    static Published.subscript.setter();
    sub_10001EBC4(a10, v100);

    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003D7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_10003D8B4, 0, 0);
}

uint64_t sub_10003D8B4()
{
  SFAirDrop.NearbySharingInteraction.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003D968;
  uint64_t v2 = *(void *)(v0 + 48);
  return SFAirDropClient.endNearbySharingInteraction(_:)(v2);
}

uint64_t sub_10003D968()
{
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *v1;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_10003DB10, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_10003DB10()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003DB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[7] = a2;
  type metadata accessor for MainActor();
  v6[12] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[13] = v8;
  v6[14] = v7;
  return _swift_task_switch(sub_10003DC14, v8, v7);
}

uint64_t sub_10003DC14()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[15] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void **)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_contactIconProvider);
    v0[16] = v2;
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SFUIContactIconProvider.icon(for:)
                                                  + async function pointer to dispatch thunk of SFUIContactIconProvider.icon(for:));
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[17] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10003DD48;
    uint64_t v5 = v0[8];
    uint64_t v4 = v0[9];
    return v8(v5, v4);
  }
  else
  {
    swift_release();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10003DD48(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 104);
    uint64_t v6 = *(void *)(v4 + 112);
    uint64_t v7 = sub_10003DF28;
  }
  else
  {

    *(void *)(v4 + 152) = a1;
    uint64_t v5 = *(void *)(v4 + 104);
    uint64_t v6 = *(void *)(v4 + 112);
    uint64_t v7 = sub_10003DE78;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003DE78()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = (void *)v0[15];
  uint64_t v3 = (void *)v0[11];
  uint64_t v4 = v0[10];
  swift_release();
  uint64_t v5 = v1;
  sub_10003F1E0(v1, v4, v3);

  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003DF28()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void **)(v0 + 128);
  swift_release();

  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = *(void *)(v0 + 72);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v13 = *(void **)(v0 + 120);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_100047F98(v7, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get contact image for %s: %@", (uint8_t *)v8, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10003E1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v6;
  v4[11] = v5;
  return _swift_task_switch(sub_10003E298, v6, v5);
}

uint64_t sub_10003E298()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[12] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void **)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_appCornerIconProvider);
    v0[13] = v2;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    v0[14] = v4;
    v2;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[15] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10003E3DC;
    return SFUIPeopleSuggestionImageProvider.previewCornerIcon(for:)(v3, v5);
  }
  else
  {
    swift_release();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10003E3DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 88);
    uint64_t v7 = sub_10003E5C4;
  }
  else
  {

    swift_bridgeObjectRelease();
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = *(void *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 88);
    uint64_t v7 = sub_10003E514;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003E514()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = (void *)v0[12];
  uint64_t v3 = (void *)v0[8];
  uint64_t v4 = v0[7];
  swift_release();
  uint64_t v5 = v1;
  sub_10003F1E0(v1, v4, v3);

  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003E5C4()
{
  uint64_t v1 = *(void **)(v0 + 104);
  swift_release();
  swift_bridgeObjectRelease();

  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181180);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v10 = *(void **)(v0 + 96);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to get image for AirDrop: %@", v5, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10003E7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[14] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[15] = v8;
  v5[16] = v7;
  return _swift_task_switch(sub_10003E8EC, v8, v7);
}

uint64_t sub_10003E8EC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[17] = Strong;
  if (Strong)
  {
    uint64_t v2 = SFAirDropReceive.AskRequest.files.getter();
    int64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = v0[12];
      sub_100016234(0, v3, 0);
      uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
      v4 += 16;
      unint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
      uint64_t v36 = *(void *)(v4 + 56);
      char v38 = v5;
      uint64_t v7 = (void (**)(uint64_t, uint64_t))(v4 - 8);
      do
      {
        uint64_t v8 = v0[13];
        uint64_t v9 = v0[11];
        v38(v8, v6, v9);
        uint64_t v10 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
        uint64_t v12 = v11;
        (*v7)(v8, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100016234(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        if (v14 >= v13 >> 1) {
          sub_100016234(v13 > 1, v14 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        v6 += v36;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
    v0[18] = _swiftEmptyArrayStorage;
    uint64_t v18 = SFAirDropReceive.AskRequest.files.getter();
    int64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v20 = v0[12];
      sub_100016234(0, v19, 0);
      uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16);
      v20 += 16;
      unint64_t v22 = v18 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
      uint64_t v37 = *(void *)(v20 + 56);
      char v39 = v21;
      uint64_t v23 = (void (**)(uint64_t, uint64_t))(v20 - 8);
      do
      {
        uint64_t v24 = v0[13];
        uint64_t v25 = v0[11];
        v39(v24, v22, v25);
        uint64_t v26 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter();
        uint64_t v28 = v27;
        (*v23)(v24, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100016234(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v30 = _swiftEmptyArrayStorage[2];
        unint64_t v29 = _swiftEmptyArrayStorage[3];
        if (v30 >= v29 >> 1) {
          sub_100016234(v29 > 1, v30 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v30 + 1;
        BOOL v31 = &_swiftEmptyArrayStorage[2 * v30];
        v31[4] = v26;
        v31[5] = v28;
        v22 += v37;
        --v19;
      }
      while (v19);
    }
    swift_bridgeObjectRelease();
    v0[19] = _swiftEmptyArrayStorage;
    type metadata accessor for SFAirDropUtilities();
    if (qword_10017F6A8 != -1) {
      swift_once();
    }
    uint64_t v32 = qword_10018CF58;
    uint64_t v33 = (void *)swift_task_alloc();
    v0[20] = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_10003ED08;
    v34.n128_u64[0] = v32;
    v35.n128_u64[0] = v32;
    return static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)(0, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v34, v35);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_10003ED08(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = sub_10003EEF8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[22] = a1;
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = sub_10003EE40;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003EE40()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v2 = (void *)v0[17];
  uint64_t v4 = v0[9];
  int64_t v3 = (void *)v0[10];
  swift_release();
  uint64_t v5 = v1;
  sub_10003F1E0(v1, v4, v3);

  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003EEF8()
{
  uint64_t v14 = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 80);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v12 = *(void **)(v0 + 136);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_100047F98(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get fallback preview image for transfer %s: %@", (uint8_t *)v7, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10003F1E0(void *a1, uint64_t a2, void *a3)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v12[2] && (sub_100048730(a2, (uint64_t)a3), (v6 & 1) != 0))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v12 = a1;
    uint64_t v7 = a1;
    static Published.subscript.setter();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v12)
  {
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    Swift::Bool v10 = String.hasPrefix(_:)(v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v11 = a1;
      return static Published.subscript.setter();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10003F3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  uint64_t v6 = type metadata accessor for SFAirDropSend.ItemMetadata();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[14] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[15] = v8;
  v5[16] = v7;
  return _swift_task_switch(sub_10003F4D0, v8, v7);
}

uint64_t sub_10003F4D0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[17] = Strong;
  if (Strong)
  {
    uint64_t v2 = SFAirDropSend.Request.urls.getter();
    v0[18] = v2;
    uint64_t v3 = SFAirDropSend.Request.urlsMetadata.getter();
    if (v3)
    {
      uint64_t v4 = v3;
      int64_t v5 = *(void *)(v3 + 16);
      if (v5)
      {
        uint64_t v39 = v2;
        uint64_t v6 = v0[12];
        sub_100016234(0, v5, 0);
        uint64_t v7 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
        v6 += 16;
        unint64_t v8 = v4 + ((*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64));
        uint64_t v41 = *(void *)(v6 + 56);
        uint64_t v43 = v7;
        Swift::String v9 = (void (**)(uint64_t, uint64_t))(v6 - 8);
        do
        {
          uint64_t v10 = v0[13];
          uint64_t v11 = v0[11];
          v43(v10, v8, v11);
          uint64_t v12 = SFAirDropSend.ItemMetadata.fileType.getter();
          uint64_t v14 = v13;
          (*v9)(v10, v11);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_100016234(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v16 = _swiftEmptyArrayStorage[2];
          unint64_t v15 = _swiftEmptyArrayStorage[3];
          if (v16 >= v15 >> 1) {
            sub_100016234(v15 > 1, v16 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v16 + 1;
          uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
          v17[4] = v12;
          void v17[5] = v14;
          v8 += v41;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        uint64_t v2 = v39;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v0[19] = _swiftEmptyArrayStorage;
    uint64_t v20 = SFAirDropSend.Request.urlsMetadata.getter();
    if (v20)
    {
      uint64_t v21 = v20;
      int64_t v22 = *(void *)(v20 + 16);
      if (v22)
      {
        uint64_t v40 = v2;
        uint64_t v23 = v0[12];
        sub_100016234(0, v22, 0);
        uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
        v23 += 16;
        unint64_t v25 = v21 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
        uint64_t v42 = *(void *)(v23 + 56);
        unint64_t v44 = v24;
        uint64_t v26 = (void (**)(uint64_t, uint64_t))(v23 - 8);
        do
        {
          uint64_t v27 = v0[13];
          uint64_t v28 = v0[11];
          v44(v27, v25, v28);
          uint64_t v29 = SFAirDropSend.ItemMetadata.fileSubType.getter();
          uint64_t v31 = v30;
          (*v26)(v27, v28);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_100016234(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v33 = _swiftEmptyArrayStorage[2];
          unint64_t v32 = _swiftEmptyArrayStorage[3];
          if (v33 >= v32 >> 1) {
            sub_100016234(v32 > 1, v33 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v33 + 1;
          __n128 v34 = &_swiftEmptyArrayStorage[2 * v33];
          v34[4] = v29;
          v34[5] = v31;
          v25 += v42;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease();
        uint64_t v2 = v40;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v0[20] = _swiftEmptyArrayStorage;
    type metadata accessor for SFAirDropUtilities();
    if (qword_10017F6A8 != -1) {
      swift_once();
    }
    uint64_t v35 = qword_10018CF58;
    uint64_t v36 = (void *)swift_task_alloc();
    v0[21] = v36;
    void *v36 = v0;
    v36[1] = sub_10003F900;
    v37.n128_u64[0] = v35;
    v38.n128_u64[0] = v35;
    return static SFAirDropUtilities.generatePreviewIcon(for:fileTypes:fileSubTypes:size:)(v2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v37, v38);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10003F900(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 176) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = sub_10003FB58;
  }
  else
  {
    v4[23] = a1;
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[15];
    uint64_t v6 = v4[16];
    uint64_t v7 = sub_10003FAA0;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_10003FAA0()
{
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = (void *)v0[17];
  uint64_t v4 = v0[9];
  uint64_t v3 = (void *)v0[10];
  swift_release();
  uint64_t v5 = v1;
  sub_10003F1E0(v1, v4, v3);

  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10003FB58()
{
  uint64_t v14 = v0;
  swift_release();
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 80);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v12 = *(void **)(v0 + 136);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 40) = sub_100047F98(v6, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get fallback preview image for transfer %s: %@", (uint8_t *)v7, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10003FE2C(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181690);
  __chkstk_darwin(v2 - 8);
  BOOL v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v48 - 8);
  uint64_t v6 = __chkstk_darwin(v48 - 8);
  unint64_t v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v43 = (char *)&v37 - v8;
  uint64_t v9 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  unsigned __int8 v53 = &_swiftEmptyArrayStorage;
  uint64_t v52 = a1;
  uint64_t v15 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(a1 + 64);
  int64_t v49 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v51 = (uint64_t (**)(char *, uint64_t))(v11 + 88);
  int v50 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  uint64_t v46 = (void (**)(char *, uint64_t))(v11 + 96);
  uint64_t v47 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v39 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v40 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v41 = a1 + 64;
  uint64_t v42 = result;
  __n128 v38 = v4;
  if (v18) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v21 < v49)
    {
      unint64_t v22 = *(void *)(v15 + 8 * v21);
      ++v14;
      if (v22) {
        goto LABEL_23;
      }
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v49) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v15 + 8 * v14);
      if (v22) {
        goto LABEL_23;
      }
      int64_t v14 = v21 + 2;
      if (v21 + 2 >= v49) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v15 + 8 * v14);
      if (v22) {
        goto LABEL_23;
      }
      int64_t v14 = v21 + 3;
      if (v21 + 3 >= v49) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v15 + 8 * v14);
      if (v22)
      {
LABEL_23:
        unint64_t v18 = (v22 - 1) & v22;
        for (unint64_t i = __clz(__rbit64(v22)) + (v14 << 6); ; unint64_t i = v19 | (v14 << 6))
        {
          uint64_t v24 = *(void *)(*(void *)(v52 + 56) + 8 * i);
          swift_getKeyPath();
          swift_getKeyPath();
          swift_retain();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          int v25 = (*v51)(v13, v9);
          if (v25 != v50) {
            break;
          }
          (*v46)(v13, v9);
          uint64_t v26 = sub_10000AA4C(&qword_1001806D8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v27 = &v13[*(int *)(v26 + 80)];
          uint64_t v28 = sub_10000AA4C(&qword_100181490);
          (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
          uint64_t v29 = type metadata accessor for SFAirDropReceive.ItemDestination();
          (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v13, v29);
          uint64_t v30 = v24 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
          swift_beginAccess();
          sub_10000F330(v30, (uint64_t)v4, &qword_100181690);
          uint64_t v31 = v48;
          if ((*v45)(v4, 1, v48) == 1)
          {
            sub_10000F394((uint64_t)v4, &qword_100181690);
LABEL_6:
            uint64_t result = swift_release();
            if (!v18) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
          unint64_t v32 = v43;
          (*v40)(v43, v4, v31);
          unint64_t v33 = v44;
          static Date.now.getter();
          Date.timeIntervalSince(_:)();
          double v35 = v34;
          uint64_t v36 = *v39;
          (*v39)(v33, v31);
          v36(v32, v31);
          if (v35 <= 7.0)
          {
            uint64_t result = swift_release();
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized ContiguousArray._endMutation()();
          }
          BOOL v4 = v38;
          uint64_t v15 = v41;
          uint64_t v9 = v42;
          if (!v18) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v19 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
        }
        (*v47)(v13, v9);
        goto LABEL_6;
      }
      int64_t v23 = v21 + 4;
      if (v23 < v49)
      {
        unint64_t v22 = *(void *)(v15 + 8 * v23);
        if (v22)
        {
          int64_t v14 = v23;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v14 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_34;
          }
          if (v14 >= v49) {
            break;
          }
          unint64_t v22 = *(void *)(v15 + 8 * v14);
          ++v23;
          if (v22) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_32:
    swift_release();
    return (uint64_t)v53;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000403F0(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100181470);
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100040510, 0, 0);
}

uint64_t sub_100040510()
{
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for SFAirDropReceive.ItemDestination.noItem(_:), v0[8]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[11] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000405D0;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[5];
  return SFAirDrop.AcceptAction.Single.accept(with:)(v2, v3);
}

uint64_t sub_1000405D0()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100040784, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100040784()
{
  unint64_t v22 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_100181180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    unint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_t log = v6;
    uint64_t v13 = SFAirDrop.AcceptAction.Single.id.getter();
    v0[2] = sub_100047F98(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v19 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop ReadyForOpen action %s failed with error %@", (uint8_t *)v12, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100040A94(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000AA4C((uint64_t *)&unk_1001813F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v54 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v55 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v12 - 8);
  uint64_t v56 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B150(v14, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_100047F98(a1, a2, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Scene session discarded for activity %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = sub_100031DA0(a1, a2);
  if (result)
  {
    uint64_t v19 = result;
    swift_retain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      v58[0] = v23;
      uint64_t v24 = v3;
      uint64_t v25 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      unint64_t v26 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100047F98(v25, v26, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v3 = v24;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ending transfer %s because scene session was discarded", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v27 = (uint64_t)v56;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v28 = type metadata accessor for SFAirDropSend.Transfer.State();
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28);
    sub_10000F394(v27, &qword_100181400);
    if (v29 == 1)
    {
      uint64_t v30 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      uint64_t v31 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_getKeyPath();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      unint64_t v32 = v51;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v33 = v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
      swift_beginAccess();
      uint64_t v34 = v33;
      uint64_t v35 = v54;
      sub_10000F330(v34, v54, (uint64_t *)&unk_1001813F0);
      sub_10004D704(v30, v31, v32, v35);
      swift_bridgeObjectRelease();
      sub_10000F394(v35, (uint64_t *)&unk_1001813F0);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v53);
    }
    else
    {
      uint64_t v36 = type metadata accessor for TaskPriority();
      uint64_t v37 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v55, 1, 1, v36);
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v3;
      *(void *)(v38 + 24) = v19;
      swift_retain();
      id v39 = v3;
      static Task<>.noThrow(priority:operation:)();
      swift_release();
      swift_release();
      sub_10000F394(v37, &qword_1001829C0);
    }
    uint64_t v40 = (uint64_t *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    uint64_t v41 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    unint64_t v42 = *(void *)(v19 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain();
    sub_100039D3C(v41, v42);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v57)
    {
      uint64_t v43 = *v40;
      unint64_t v44 = (void *)v40[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45._countAndFlagsBits = v43;
      v45._object = v44;
      Swift::Bool v46 = String.hasPrefix(_:)(v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v46)
      {
        uint64_t v47 = type metadata accessor for TaskPriority();
        uint64_t v48 = (uint64_t)v55;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v55, 1, 1, v47);
        uint64_t v49 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = &unk_100181410;
        *(void *)(v50 + 24) = v49;
        sub_10000AA4C(&qword_100181428);
        static Task<>.noThrow(priority:operation:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return sub_10000F394(v48, &qword_1001829C0);
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100041314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000413D4, 0, 0);
}

uint64_t sub_1000413D4()
{
  v0[9] = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier;
  swift_bridgeObjectRetain();
  SFAirDrop.TransferIdentifier.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100041778;
  uint64_t v2 = v0[8];
  return SFAirDropClient.cancelTransfer(_:)(v2);
}

uint64_t sub_100041778()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
  if (v0)
  {
    return _swift_task_switch(sub_100041910, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
}

uint64_t sub_100041910()
{
  uint64_t v13 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint64_t *)(v0[5] + v0[9]);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = *v4;
    unint64_t v6 = v4[1];
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to cancel transfer %s: %@", (uint8_t *)v5, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100041BE0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100041C78, v3, v2);
}

uint64_t sub_100041C78()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_100033320();
  }
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(Strong == 0);
}

uint64_t sub_100041D14(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100041DE4;
  return v5();
}

uint64_t sub_100041DE4(char a1)
{
  uint64_t v3 = *(unsigned char **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  *uint64_t v3 = a1 & 1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_100041EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_100041FBC, 0, 0);
}

uint64_t sub_100041FBC()
{
  (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for SFAirDropReceive.ItemDestination.noItem(_:), v0[7]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[10] = v1;
  uint64_t v2 = sub_10000AA4C(&qword_100181470);
  *uint64_t v1 = v0;
  v1[1] = sub_10004208C;
  uint64_t v3 = v0[9];
  return SFAirDrop.AcceptAction.Single.accept(with:)(v3, v2);
}

uint64_t sub_10004208C()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100042234, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100042234()
{
  uint64_t v13 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[6];
  if (v4)
  {
    uint64_t v11 = v0[5];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to decline ask for %s: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000424EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  sub_10000AA4C((uint64_t *)&unk_1001813F0);
  v4[7] = swift_task_alloc();
  return _swift_task_switch(sub_100042584, 0, 0);
}

uint64_t sub_100042584()
{
  uint64_t v1 = v0[7];
  sub_10000F330(v0[4], v1, (uint64_t *)&unk_1001813F0);
  uint64_t v2 = type metadata accessor for SFAirDrop.DeclineAction();
  v0[8] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[9] = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10000F394(v0[7], (uint64_t *)&unk_1001813F0);
    swift_task_dealloc();
    BOOL v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[10] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000426D8;
    return SFAirDrop.DeclineAction.decline()();
  }
}

uint64_t sub_1000426D8()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004282C, 0, 0);
  }
  else
  {
    (*(void (**)(void, void))(v2[9] + 8))(v2[7], v2[8]);
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

uint64_t sub_10004282C()
{
  uint64_t v13 = v0;
  (*(void (**)(void, void))(v0[9] + 8))(v0[7], v0[8]);
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[6];
  if (v4)
  {
    uint64_t v11 = v0[5];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to cancel transfer for %s: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100042AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  unint64_t v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_100042B94;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_100042B94()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100042CC8, 0, 0);
  }
  else
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100042CC8()
{
  uint64_t v13 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v11 = v0[4];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to decline ask for %s: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100042F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  unint64_t v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_100043014;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_100043014()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100043148, 0, 0);
  }
  else
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100043148()
{
  uint64_t v13 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v11 = v0[4];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to cancel transfer for %s: %@", (uint8_t *)v6, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1000433FC(id a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v71 = a4;
  id v72 = a3;
  uint64_t v18 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v73 = (os_log_t *)((char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000B150(v21, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  id v22 = a5;
  id v23 = a6;
  id v24 = v22;
  id v25 = v23;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  LODWORD(v75) = v27;
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v69 = v19;
  unint64_t v68 = a8;
  uint64_t v74 = a7;
  id v70 = v24;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    os_log_t v64 = v26;
    uint64_t v30 = v29;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v67 = v18;
    unint64_t v32 = (void *)v31;
    uint64_t v65 = swift_slowAlloc();
    v76[0] = v65;
    *(_DWORD *)uint64_t v30 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_100047F98((uint64_t)a1, a2, v76);
    id v66 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2112;
    uint64_t v78 = (uint64_t)v24;
    id v33 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v32 = v24;

    *(_WORD *)(v30 + 22) = 2112;
    uint64_t v78 = (uint64_t)v25;
    id v34 = v25;
    a1 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32[1] = v25;

    os_log_t v35 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v75, "Update transfer %s. Completed unit count: %@. Total unit count: %@", (uint8_t *)v30, 0x20u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    uint64_t v18 = v67;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v36 = v76[0];
  if (*(void *)(v76[0] + 16) && (unint64_t v37 = sub_100048730((uint64_t)a1, a2), (v38 & 1) != 0))
  {
    id v66 = v25;
    uint64_t v75 = *(void *)(*(void *)(v36 + 56) + 8 * v37);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v39 = [v72 unsignedIntegerValue];
    if (a10 >> 60 == 15)
    {
      id v72 = 0;
    }
    else
    {
      sub_10001FB40(0, &qword_100180538);
      sub_10001EC34(a9, a10);
      static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
      sub_10001EBC4(a9, a10);
      if (v77)
      {
        sub_10000AA4C(&qword_100181570);
        int v43 = swift_dynamicCast();
        unint64_t v44 = (void *)v78;
        if (!v43) {
          unint64_t v44 = 0;
        }
        id v72 = v44;
      }
      else
      {
        sub_10000F394((uint64_t)v76, &qword_100181560);
        id v72 = 0;
      }
    }
    if (a12 >> 60 == 15)
    {
      uint64_t v47 = 0;
      uint64_t v48 = v69;
      unint64_t v49 = v68;
      Swift::Bool v46 = v70;
      Swift::String v45 = v71;
    }
    else
    {
      sub_10001FB40(0, &qword_100180538);
      sub_10001EC34(a11, a12);
      static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
      sub_10001EBC4(a11, a12);
      Swift::Bool v46 = v70;
      Swift::String v45 = v71;
      if (v77)
      {
        sub_10000AA4C(&qword_100181568);
        if (swift_dynamicCast()) {
          uint64_t v47 = v78;
        }
        else {
          uint64_t v47 = 0;
        }
      }
      else
      {
        sub_10000F394((uint64_t)v76, &qword_100181560);
        uint64_t v47 = 0;
      }
      uint64_t v48 = v69;
      unint64_t v49 = v68;
    }
    uint64_t v50 = (uint64_t)v73;
    *uint64_t v73 = v39;
    (*(void (**)(uint64_t, void, uint64_t))(v48 + 104))(v50, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v18);
    int v51 = [v45 BOOLValue];
    id v52 = [v46 integerValue];
    id v53 = [v66 integerValue];
    unint64_t v54 = v49;
    uint64_t v55 = v75;
    sub_10008C438(v50, v51, (uint64_t)v52, (uint64_t)v53, v74, v54, (uint64_t)v72, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v18);
    if (qword_10017F600 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v39 == (id)3 && (v76[0] & 1) == 0)
    {
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v56, v57))
      {
        unint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Transfer was cancelled by sender. Ending our session locally.", v58, 2u);
        swift_slowDealloc();
      }

      uint64_t v60 = *(void *)(v55 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      unint64_t v59 = *(void *)(v55 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain_n();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v78 = sub_100047F98(v60, v59, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "After opening URLs for transfer %s. Ending session locally.", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_100039D3C(v60, v59);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v42 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v78 = sub_100047F98((uint64_t)a1, a2, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "AirDrop transfer session not active for ID: %s, returning", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1000442F4(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v29 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000B150(v6, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v27 = v3;
    uint64_t v28 = v4;
    v31[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100047F98(v30, a2, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accept transfer for transfer identifier: %s.", v9, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v27;
    uint64_t v4 = v28;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = v31[0];
  if (*(void *)(v31[0] + 16) && (unint64_t v12 = sub_100048730(v30, a2), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)v29;
    void *v29 = 2;
    uint64_t v16 = v4;
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v15, enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:), v3);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v17 = v31[0];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v18 = v31[0];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v19 = *(void *)(v14 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
    uint64_t v20 = v31[0];
    unint64_t v21 = v31[1];
    uint64_t v22 = *(void *)(v14 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10008C438(v15, 1, v17, v18, v20, v21, v19, v22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)id v25 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100047F98(v30, a2, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "AirDrop transfer session not active for ID: %s, returning", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1000448F4(uint64_t a1)
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B150(v3, (uint64_t)qword_100181180);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received cancellation request by the AirDropTransfer session", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient);
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 cancellationWasRequestedForTransferIdentifier:v10];

    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Notified AirDropUIClient of cancellation. Ending session locally for faster feedback to the user.", v13, 2u);
      swift_slowDealloc();
    }

    sub_100039D3C(v8, v7);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v16, "AirDropUIClient is nil. Ending session locally.", v17, 2u);
      swift_slowDealloc();
    }

    sub_100039D3C(v8, v7);
    return swift_bridgeObjectRelease();
  }
}

void sub_100044B88(uint64_t a1)
{
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B150(v3, (uint64_t)qword_100181180);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received accepted request by the AirDropTransfer session", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient);
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 acceptWasRequestedForTransferIdentifier:v10];

    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Notified AirDropUIClient of transfer accept.", v12, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    char v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, (os_log_type_t)v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v14, "AirDropUIClient is nil, accepting local session.", v15, 2u);
      swift_slowDealloc();
    }

    sub_1000442F4(v8, v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100044E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  uint64_t v4 = type metadata accessor for SFInterventionWorkflow();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFInterventionResponse();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_100044F60, 0, 0);
}

uint64_t sub_100044F60()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  sub_10000AA4C(&qword_100181490);
  SFAirDrop.PermissionRequest.cancel()();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for SFInterventionWorkflow.moreInfo(_:), v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  void *v4 = v0;
  v4[1] = sub_100045048;
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[11];
  return SFAirDropClient.showIntervention(workflow:)(v5, v6);
}

uint64_t sub_100045048()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_100045244;
  }
  else
  {
    (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
    uint64_t v6 = sub_1000451D8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000451D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100045244()
{
  uint64_t v10 = v0;
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_100181180);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100047F98(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to show more info {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_100045480(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181540);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  unint64_t v58 = &v51[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  unint64_t v6 = &v51[-v5];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v53 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = &v51[-v12];
  __chkstk_darwin(v11);
  os_log_type_t v57 = &v51[-v14];
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  uint64_t v18 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  unint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  if (*(void *)(v17 + 16))
  {
    uint64_t v54 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    id v20 = objc_allocWithZone((Class)UNMutableNotificationContent);
    swift_bridgeObjectRetain();
    unint64_t v55 = v19;
    swift_bridgeObjectRetain();
    id v56 = [v20 init];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (!v61)
    {
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      String.init(localized:table:bundle:locale:comment:)();
    }
    uint64_t v21 = v59;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = v56;
    [v56 setBody:v22];

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    os_log_type_t v24 = aBlock;
    if (aBlock)
    {
      sub_100046104(aBlock, (uint64_t)v6);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {

        sub_10000F394((uint64_t)v6, &qword_100181540);
        if (!*(void *)(v17 + 16)) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      id v52 = v24;
      uint64_t v30 = v57;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v57, v6, v7);
      sub_10001FB40(0, &qword_100181548);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v13, v30, v7);
      id v31 = sub_100046A38(0xD000000000000015, 0x8000000100131EE0, (uint64_t)v13, 0);
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_10012A280;
      *(void *)(v32 + 32) = v31;
      aBlock = (UIImage *)v32;
      specialized Array._endMutation()();
      id v33 = v31;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = v56;
      [v56 setAttachments:isa];

      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v57, v7);
      uint64_t v21 = v59;
    }
    if (!*(void *)(v17 + 16))
    {
LABEL_17:
      uint64_t v36 = 1;
      os_log_t v35 = v58;
      goto LABEL_18;
    }
LABEL_16:
    os_log_t v35 = v58;
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v8 + 16))(v58, v17 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    uint64_t v36 = 0;
LABEL_18:
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v35, v36, 1, v7);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v35, 1, v7) == 1)
    {
      char v38 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v37);
      char v38 = v39;
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v35, v7);
    }
    [v23 setDefaultActionURL:v38];

    [v23 setShouldBackgroundDefaultAction:1];
    id v40 = [self triggerWithTimeInterval:0 repeats:0.1];
    id v41 = v23;
    id v42 = v40;
    NSString v43 = String._bridgeToObjectiveC()();
    id v44 = [self requestWithIdentifier:v43 content:v41 trigger:v42];

    Swift::String v45 = *(void **)(v21 + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_userNotificationsCenter);
    os_log_t v64 = sub_100046BF4;
    uint64_t v65 = 0;
    aBlock = (UIImage *)_NSConcreteStackBlock;
    uint64_t v61 = 1107296256;
    os_log_type_t v62 = sub_100046E00;
    uint64_t v63 = &unk_10016A138;
    Swift::Bool v46 = _Block_copy(&aBlock);
    [v45 addNotificationRequest:v44 withCompletionHandler:v46];
    _Block_release(v46);
    if (qword_10017F608 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_10000B150(v47, (uint64_t)qword_100181180);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Notification hopefully shown for transfer. Ending session.", v50, 2u);
      swift_slowDealloc();
    }

    sub_100039D3C(v54, v55);
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v25 = qword_10017F608;
  swift_bridgeObjectRetain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10000B150(v26, (uint64_t)qword_100181180);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    aBlock = (UIImage *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_100047F98(v18, v19, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "AirDropTransfer %s has no completed URLs, so nothing to present to user. Ending session.", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100039D3C(v18, v19);
  swift_bridgeObjectRelease();
}

uint64_t sub_100046104@<X0>(UIImage *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v63 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = (void *)v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v62 = (char *)&v55 - v14;
  uint64_t v15 = sub_10000AA4C(&qword_100181540);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v56 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v67 = (char *)&v55 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  NSString v22 = (char *)&v55 - v21;
  __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)&v55 - v23;
  uint64_t v66 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v10[7];
  v66((char *)&v55 - v23, 1, 1, v9);
  uint64_t v25 = UIImageJPEGRepresentation(a1, 1.0);
  if (!v25) {
    goto LABEL_10;
  }
  uint64_t v26 = v25;
  uint64_t v57 = a2;
  uint64_t v58 = v4;
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v59 = v27;

  os_log_type_t v28 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v69 = (char *)0xD000000000000017;
  unint64_t v70 = 0x8000000100131F00;
  UUID.init()();
  uint64_t v29 = UUID.uuidString.getter();
  id v31 = v30;
  (*(void (**)(char *, void *))(v60 + 8))(v8, v61);
  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = (uint64_t)v62;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  id v34 = (void (*)(char *, uint64_t))v10[1];
  v34(v13, v9);
  URL.appendingPathExtension(_:)();
  v34((char *)v33, v9);
  uint64_t v61 = v10 + 7;
  v66(v22, 0, 1, v9);
  sub_10004FE60((uint64_t)v22, (uint64_t)v24, &qword_100181540);
  os_log_type_t v62 = v24;
  uint64_t v35 = (uint64_t)v67;
  sub_10000F330((uint64_t)v24, (uint64_t)v67, &qword_100181540);
  char v38 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v10[6];
  uint64_t v36 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v10 + 6);
  unint64_t v37 = v38;
  if (v38(v35, 1, v9) == 1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v39 = v59;
    Data.write(to:options:)();
    id v40 = v63;
    uint64_t v41 = v64;
    uint64_t v66 = v36;
    v34(v67, v9);
    if (qword_10017F608 != -1) {
      swift_once();
    }
    uint64_t v42 = v58;
    uint64_t v43 = sub_10000B150(v58, (uint64_t)qword_100181180);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
    id v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v44, v45))
    {
      sub_10001E998(v65, v39);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
      goto LABEL_9;
    }
    Swift::Bool v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = (char *)swift_slowAlloc();
    uint64_t v69 = v67;
    *(_DWORD *)Swift::Bool v46 = 136315138;
    uint64_t v47 = (uint64_t)v62;
    swift_beginAccess();
    uint64_t v48 = v47;
    uint64_t v49 = v56;
    sub_10000F330(v48, v56, &qword_100181540);
    if (v37(v49, 1, v9) != 1)
    {
      uint64_t v50 = v9;
      uint64_t v51 = URL.absoluteString.getter();
      unint64_t v53 = v52;
      v34((char *)v49, v50);
      uint64_t v68 = sub_100047F98(v51, v53, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Saved temporary image URL to: %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001E998(v65, v59);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v58);
LABEL_9:
      a2 = v57;
      os_log_type_t v24 = v62;
LABEL_10:
      swift_beginAccess();
      sub_10000F330((uint64_t)v24, a2, &qword_100181540);
      return sub_10000F394((uint64_t)v24, &qword_100181540);
    }
  }
  uint64_t result = sub_10000F394((uint64_t)v62, &qword_100181540);
  __break(1u);
  return result;
}

id sub_100046A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  if (a4)
  {
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  id v19 = 0;
  id v11 = [(id)swift_getObjCClassFromMetadata() attachmentWithIdentifier:v6 URL:v9 options:v10.super.isa error:&v19];

  id v12 = v19;
  if (v11)
  {
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    id v15 = v12;
    v14(a3, v13);
  }
  else
  {
    id v16 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a3, v17);
  }
  return v11;
}

void sub_100046BF4(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_10017F608 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B150(v1, (uint64_t)qword_100181180);
    swift_errorRetain();
    swift_errorRetain();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_100047F98(v4, v5, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Couldn't post notification: %s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100046E00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_100046F04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v39 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  __chkstk_darwin(v6);
  int64_t v10 = (int64_t)&v35 - v9;
  if (qword_10017F608 != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B150(v11, (uint64_t)qword_100181180);
  id v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v43 = a1;
  unint64_t v37 = v12;
  uint64_t v38 = v3 + 16;
  v12((char *)v10, (char *)a1, v2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)id v15 = 136315138;
    uint64_t KeyPath = (uint64_t)(v15 + 4);
    sub_1000502BC(&qword_1001813D8, (void (*)(uint64_t))&type metadata accessor for DeviceLockState);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = sub_100047F98(v16, v17, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(int64_t, uint64_t))(v3 + 8);
    v18(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Lock state changed to %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = *(void (**)(int64_t, uint64_t))(v3 + 8);
    v18(v10, v2);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v19 = v43;
  uint64_t v36 = v18;
  if (v46)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_1000502BC(&qword_1001813D0, (void (*)(uint64_t))&type metadata accessor for DeviceLockState);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18((int64_t)v8, v2);
    if ((v20 & 1) == 0)
    {
      uint64_t v21 = v37;
      v37(v8, (char *)v19, v2);
      swift_getKeyPath();
      swift_getKeyPath();
      v21(v39, v8, v2);
      uint64_t v18 = v36;
      swift_retain();
      static Published.subscript.setter();
      v18((int64_t)v8, v2);
    }
    swift_release();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int64_t v10 = 0;
  a1 = v46;
  uint64_t v22 = *(void *)(v46 + 64);
  uint64_t v40 = v46 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v46 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v41 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      uint64_t v44 = (v25 - 1) & v25;
      unint64_t v26 = __clz(__rbit64(v25)) | (v10 << 6);
      goto LABEL_31;
    }
    int64_t v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v27 >= v41) {
      return swift_release();
    }
    unint64_t v28 = *(void *)(v40 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v41) {
        return swift_release();
      }
      unint64_t v28 = *(void *)(v40 + 8 * v10);
      if (!v28)
      {
        int64_t v10 = v27 + 2;
        if (v27 + 2 >= v41) {
          return swift_release();
        }
        unint64_t v28 = *(void *)(v40 + 8 * v10);
        if (!v28)
        {
          int64_t v10 = v27 + 3;
          if (v27 + 3 >= v41) {
            return swift_release();
          }
          unint64_t v28 = *(void *)(v40 + 8 * v10);
          if (!v28) {
            break;
          }
        }
      }
    }
LABEL_30:
    uint64_t v44 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_31:
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8 * v26);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_1000502BC(&qword_1001813D0, (void (*)(uint64_t))&type metadata accessor for DeviceLockState);
    uint64_t v30 = v43;
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18((int64_t)v8, v2);
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = a1;
      uint64_t v33 = v37;
      v37(v8, (char *)v30, v2);
      uint64_t KeyPath = swift_getKeyPath();
      swift_getKeyPath();
      v33(v39, v8, v2);
      a1 = v32;
      swift_retain();
      uint64_t v18 = v36;
      static Published.subscript.setter();
      v18((int64_t)v8, v2);
    }
    swift_release();
    unint64_t v25 = v44;
  }
  int64_t v29 = v27 + 4;
  if (v29 < v41)
  {
    unint64_t v28 = *(void *)(v40 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        int64_t v10 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_35;
        }
        if (v10 >= v41) {
          return swift_release();
        }
        unint64_t v28 = *(void *)(v40 + 8 * v10);
        ++v29;
        if (v28) {
          goto LABEL_30;
        }
      }
    }
    int64_t v10 = v29;
    goto LABEL_30;
  }
  return swift_release();
}

uint64_t sub_100047698@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10004771C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_1000477A0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100047820(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  v9(v6, (uint64_t)v8, v2);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_100047994(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000479A4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000479E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_10001FD90;
  return v6();
}

uint64_t sub_100047AAC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10001FD90;
  return v7();
}

uint64_t sub_100047B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000F394(a1, &qword_1001829C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100047D24(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100047E00;
  return v6(a1);
}

uint64_t sub_100047E00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100047EF8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100047F20(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100047F98(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100047F98(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10004806C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectCFStringRef Type = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100048600((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectCFStringRef Type = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100048600((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000AB98((uint64_t)v12);
  return v7;
}

uint64_t sub_10004806C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100048228(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100048228(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000482C0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000484A0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000484A0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000482C0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100048438(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100048438(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000AA4C(&qword_1001813E0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000484A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_1001813E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_1000485F0(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100048600(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10004865C(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1000502BC((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100048A38(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100048730(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100048954(a1, a2, v4);
}

unint64_t sub_1000487A8(uint64_t a1)
{
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1000502BC(&qword_100181450, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100048A38(a1, v2, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, (unint64_t *)&unk_100181460, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_10004887C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100048BD8(a1, v4);
}

unint64_t sub_1000488C0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100048CA0(a1, v2);
}

unint64_t sub_100048954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100048A38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    unint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    id v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_1000502BC(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100048BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100050828(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100050884((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100048CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100048E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100048730(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100049A84();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100049100(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100048EE8(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000487A8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100049C3C();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1000492D8(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100048FE0(uint64_t a1)
{
  return sub_100048FF8(a1, &qword_100181528);
}

uint64_t sub_100048FEC(uint64_t a1)
{
  return sub_100048FF8(a1, &qword_100181520);
}

uint64_t sub_100048FF8(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10004865C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  uint64_t *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004A41C(a2);
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1000495D4(v6, v9);
  uint64_t *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_100049100(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000492D8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1000502BC(&qword_100181450, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000495D4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_1000502BC((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            uint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void *sub_1000498CC()
{
  uint64_t v1 = v0;
  sub_10000AA4C((uint64_t *)&unk_100181700);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100049A84()
{
  uint64_t v1 = v0;
  sub_10000AA4C((uint64_t *)&unk_100183FA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100049C3C()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_100181458);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100049ED4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C((uint64_t *)&unk_100183D10);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10004A16C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_100181530);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10004A404()
{
  return sub_10004A41C(&qword_100181528);
}

void *sub_10004A410()
{
  return sub_10004A41C(&qword_100181520);
}

void *sub_10004A41C(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004A6B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return &_swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = &_swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for AirDropTransferSession();
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      void v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10004A834(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_10000AA4C((uint64_t *)&unk_100182AC0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10004C958((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_10004A92C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_10004C944(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10004A9A8(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_10004A9A8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000AA4C(&qword_100181690);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v195 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  int64_t v10 = (char *)&v195 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  int64_t v13 = (char *)&v195 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v225 = (uint64_t)&v195 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v195 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v209 = (uint64_t)&v195 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v203 = (char *)&v195 - v22;
  __chkstk_darwin(v21);
  uint64_t v202 = (uint64_t)&v195 - v23;
  uint64_t v24 = type metadata accessor for Date();
  v223 = *(void **)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v216 = (char *)&v195 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v219 = (uint64_t *)((char *)&v195 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v215 = (char *)&v195 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v195 - v32);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v205 = (char *)&v195 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v195 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v199 = (char *)&v195 - v40;
  __chkstk_darwin(v39);
  uint64_t v201 = (char *)&v195 - v41;
  uint64_t v204 = a1;
  Swift::Int v42 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v42);
  uint64_t v211 = (char *)v42;
  if (result < v42)
  {
    if (v42 >= 0) {
      uint64_t v44 = v42;
    }
    else {
      uint64_t v44 = v42 + 1;
    }
    if (v42 < -1) {
      goto LABEL_176;
    }
    Swift::Int v198 = result;
    uint64_t v224 = v24;
    if (v42 < 2)
    {
      uint64_t v69 = (char *)_swiftEmptyArrayStorage;
      uint64_t v226 = (uint64_t)_swiftEmptyArrayStorage;
      os_log_type_t v213 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
      if (v42 != 1)
      {
        unint64_t v73 = _swiftEmptyArrayStorage[2];
        if (v73 < 2) {
          goto LABEL_144;
        }
        goto LABEL_132;
      }
    }
    else
    {
      uint64_t v45 = v44 >> 1;
      type metadata accessor for AirDropTransferSession();
      uint64_t v46 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) = v45;
      os_log_type_t v213 = (char *)((v46 & 0xFFFFFFFFFFFFFF8) + 32);
      uint64_t v226 = v46;
    }
    uint64_t v214 = v1;
    uint64_t v70 = *v204;
    uint64_t v219 = v223 + 4;
    uint64_t v217 = (void (**)(uint64_t, uint64_t))(v223 + 1);
    uint64_t v197 = v70 + 16;
    uint64_t v196 = v70 - 8;
    uint64_t v69 = (char *)_swiftEmptyArrayStorage;
    uint64_t v216 = v13;
    unint64_t v207 = v18;
    Swift::Int v71 = 0;
    uint64_t v220 = v33;
    unint64_t v206 = v38;
    uint64_t v72 = v70;
    unint64_t v222 = (char *)v70;
    unint64_t v221 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 6);
LABEL_28:
    Swift::Int v74 = v71;
    Swift::Int v75 = v71 + 1;
    uint64_t v210 = (void *)v71;
    if (v71 + 1 >= v42) {
      goto LABEL_57;
    }
    uint64_t v200 = v69;
    uint64_t v76 = *(void *)(v72 + 8 * v75);
    v223 = *(void **)(v72 + 8 * v71);
    uint64_t v77 = v76 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess();
    uint64_t v78 = v221;
    uint64_t v79 = v202;
    sub_10000F330(v77, v202, &qword_100181690);
    uint64_t v80 = *v78;
    uint64_t v81 = v224;
    unsigned int v82 = (*v78)(v79, 1, v224);
    uint64_t v83 = (uint64_t)v203;
    if (v82 == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v84 = v79;
    }
    else
    {
      uint64_t v218 = *v219;
      ((void (*)(char *, uint64_t, uint64_t))v218)(v201, v79, v81);
      uint64_t v85 = (uint64_t)v223 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      uint64_t v86 = v85;
      uint64_t v87 = v224;
      sub_10000F330(v86, v83, &qword_100181690);
      if (v80(v83, 1, v87) != 1)
      {
        uint64_t v89 = v199;
        ((void (*)(char *, uint64_t, uint64_t))v218)(v199, v83, v87);
        swift_retain();
        swift_retain();
        uint64_t v90 = v201;
        LODWORD(v218) = static Date.< infix(_:_:)();
        uint64_t v91 = v87;
        id v92 = *v217;
        (*v217)((uint64_t)v89, v91);
        v92((uint64_t)v90, v91);
        Swift::Int v42 = (Swift::Int)v211;
        goto LABEL_35;
      }
      uint64_t v88 = *v217;
      swift_retain();
      swift_retain();
      v88((uint64_t)v201, v87);
      uint64_t v84 = v83;
      Swift::Int v42 = (Swift::Int)v211;
    }
    sub_10000F394(v84, &qword_100181690);
    LODWORD(v218) = static Date.< infix(_:_:)();
LABEL_35:
    Swift::Int v74 = (Swift::Int)v210;
    swift_release();
    swift_release();
    Swift::Int v75 = v74 + 2;
    if (v74 + 2 >= v42) {
      goto LABEL_48;
    }
    uint64_t v212 = (char *)v80;
    uint64_t v93 = (void *)(v197 + 8 * v74);
    while (1)
    {
      v223 = (void *)v75;
      uint64_t v94 = *(v93 - 1);
      uint64_t v95 = *v93 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      uint64_t v96 = v95;
      uint64_t v97 = v209;
      sub_10000F330(v96, v209, &qword_100181690);
      uint64_t v98 = v224;
      int v99 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v212;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v212)(v97, 1, v224) == 1) {
        break;
      }
      unint64_t v100 = (void (*)(char *, uint64_t, uint64_t))*v219;
      unint64_t v101 = v206;
      ((void (*)(char *, uint64_t, uint64_t))*v219)(v206, v97, v98);
      uint64_t v102 = v94 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      uint64_t v103 = v102;
      uint64_t v97 = (uint64_t)v207;
      sub_10000F330(v103, (uint64_t)v207, &qword_100181690);
      if (v99(v97, 1, v98) == 1)
      {
        unint64_t v104 = *v217;
        swift_retain();
        swift_retain();
        v104((uint64_t)v101, v98);
        uint64_t v72 = (uint64_t)v222;
        goto LABEL_41;
      }
      uint64_t v106 = v101;
      uint64_t v107 = v205;
      v100(v205, v97, v98);
      swift_retain();
      swift_retain();
      int v105 = static Date.< infix(_:_:)();
      uint64_t v108 = *v217;
      (*v217)((uint64_t)v107, v98);
      v108((uint64_t)v106, v98);
      uint64_t v72 = (uint64_t)v222;
LABEL_43:
      swift_release();
      swift_release();
      if ((v218 ^ v105))
      {
        Swift::Int v42 = (Swift::Int)v211;
        Swift::Int v75 = (Swift::Int)v223;
LABEL_47:
        Swift::Int v74 = (Swift::Int)v210;
LABEL_48:
        uint64_t v69 = v200;
        if (v218)
        {
          if (v75 < v74) {
            goto LABEL_168;
          }
          if (v74 < v75)
          {
            uint64_t v109 = (uint64_t *)(v196 + 8 * v75);
            Swift::Int v110 = v75;
            Swift::Int v111 = v74;
            uint64_t v112 = (uint64_t *)(v72 + 8 * v74);
            do
            {
              if (v111 != --v110)
              {
                if (!v72) {
                  goto LABEL_174;
                }
                uint64_t v113 = *v112;
                uint64_t *v112 = *v109;
                *uint64_t v109 = v113;
              }
              ++v111;
              --v109;
              ++v112;
            }
            while (v111 < v110);
          }
        }
LABEL_57:
        if (v75 >= v42) {
          goto LABEL_81;
        }
        if (__OFSUB__(v75, v74)) {
          goto LABEL_166;
        }
        if (v75 - v74 >= v198) {
          goto LABEL_81;
        }
        if (__OFADD__(v74, v198)) {
          goto LABEL_169;
        }
        if (v74 + v198 >= v42) {
          Swift::Int v114 = v42;
        }
        else {
          Swift::Int v114 = v74 + v198;
        }
        if (v114 >= v74)
        {
          if (v75 == v114) {
            goto LABEL_81;
          }
          uint64_t v200 = v69;
          uint64_t v115 = (char *)(v196 + 8 * v75);
          Swift::Int v208 = v114;
          while (2)
          {
            uint64_t v117 = *(void *)(v72 + 8 * v75);
            uint64_t v118 = v210;
            uint64_t v212 = v115;
            v223 = (void *)v75;
            while (2)
            {
              uint64_t v119 = *(void *)v115;
              uint64_t v120 = v117 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
              swift_beginAccess();
              uint64_t v121 = v120;
              uint64_t v122 = v225;
              sub_10000F330(v121, v225, &qword_100181690);
              unint64_t v123 = *v221;
              uint64_t v124 = v224;
              if ((*v221)(v122, 1, v224) == 1)
              {
                swift_retain();
                swift_retain();
                uint64_t v125 = v225;
LABEL_74:
                uint64_t v72 = (uint64_t)v222;
                sub_10000F394(v125, &qword_100181690);
                char v130 = static Date.< infix(_:_:)();
                swift_release();
                swift_release();
                if ((v130 & 1) == 0) {
                  break;
                }
                goto LABEL_77;
              }
              uint64_t v218 = *v219;
              ((void (*)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v218)(v220, v225, v124);
              uint64_t v126 = v119 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
              swift_beginAccess();
              uint64_t v127 = v126;
              uint64_t v128 = (uint64_t)v216;
              sub_10000F330(v127, (uint64_t)v216, &qword_100181690);
              if (v123(v128, 1, v124) == 1)
              {
                uint64_t v129 = *v217;
                swift_retain();
                swift_retain();
                v129((uint64_t)v220, v124);
                uint64_t v125 = v128;
                goto LABEL_74;
              }
              unint64_t v131 = v215;
              ((void (*)(char *, uint64_t, uint64_t))v218)(v215, v128, v124);
              swift_retain();
              swift_retain();
              uint64_t v132 = v220;
              LODWORD(v218) = static Date.< infix(_:_:)();
              uint64_t v133 = *v217;
              (*v217)((uint64_t)v131, v124);
              v133((uint64_t)v132, v124);
              swift_release();
              swift_release();
              uint64_t v72 = (uint64_t)v222;
              if (v218)
              {
LABEL_77:
                if (!v72) {
                  goto LABEL_172;
                }
                uint64_t v134 = *(void *)v115;
                uint64_t v117 = *((void *)v115 + 1);
                *(void *)uint64_t v115 = v117;
                *((void *)v115 + 1) = v134;
                v115 -= 8;
                uint64_t v118 = (void *)((char *)v118 + 1);
                int v116 = v223;
                if (v223 == v118) {
                  goto LABEL_68;
                }
                continue;
              }
              break;
            }
            int v116 = v223;
LABEL_68:
            Swift::Int v75 = (Swift::Int)v116 + 1;
            uint64_t v115 = v212 + 8;
            if (v75 != v208) {
              continue;
            }
            break;
          }
          Swift::Int v75 = v208;
          uint64_t v69 = v200;
          Swift::Int v74 = (Swift::Int)v210;
LABEL_81:
          if (v75 < v74) {
            goto LABEL_161;
          }
          uint64_t v135 = v69;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v69 = v135;
          }
          else {
            uint64_t v69 = sub_10004C778(0, *((void *)v135 + 2) + 1, 1, v135);
          }
          unint64_t v137 = *((void *)v69 + 2);
          unint64_t v136 = *((void *)v69 + 3);
          unint64_t v73 = v137 + 1;
          if (v137 >= v136 >> 1) {
            uint64_t v69 = sub_10004C778((char *)(v136 > 1), v137 + 1, 1, v69);
          }
          *((void *)v69 + 2) = v73;
          uint64_t v138 = v69 + 32;
          uint64_t v139 = &v69[16 * v137 + 32];
          *(void *)uint64_t v139 = v210;
          *((void *)v139 + 1) = v75;
          v223 = (void *)v75;
          if (v137)
          {
            while (2)
            {
              unint64_t v140 = v73 - 1;
              if (v73 >= 4)
              {
                uint64_t v145 = &v138[16 * v73];
                uint64_t v146 = *((void *)v145 - 8);
                uint64_t v147 = *((void *)v145 - 7);
                BOOL v151 = __OFSUB__(v147, v146);
                uint64_t v148 = v147 - v146;
                if (v151) {
                  goto LABEL_150;
                }
                uint64_t v150 = *((void *)v145 - 6);
                uint64_t v149 = *((void *)v145 - 5);
                BOOL v151 = __OFSUB__(v149, v150);
                uint64_t v143 = v149 - v150;
                char v144 = v151;
                if (v151) {
                  goto LABEL_151;
                }
                unint64_t v152 = v73 - 2;
                BOOL v153 = &v138[16 * v73 - 32];
                uint64_t v155 = *(void *)v153;
                uint64_t v154 = *((void *)v153 + 1);
                BOOL v151 = __OFSUB__(v154, v155);
                uint64_t v156 = v154 - v155;
                if (v151) {
                  goto LABEL_153;
                }
                BOOL v151 = __OFADD__(v143, v156);
                uint64_t v157 = v143 + v156;
                if (v151) {
                  goto LABEL_156;
                }
                if (v157 >= v148)
                {
                  int64_t v175 = &v138[16 * v140];
                  uint64_t v177 = *(void *)v175;
                  uint64_t v176 = *((void *)v175 + 1);
                  BOOL v151 = __OFSUB__(v176, v177);
                  uint64_t v178 = v176 - v177;
                  if (v151) {
                    goto LABEL_160;
                  }
                  BOOL v168 = v143 < v178;
                }
                else
                {
LABEL_100:
                  if (v144) {
                    goto LABEL_152;
                  }
                  unint64_t v152 = v73 - 2;
                  uint64_t v158 = &v138[16 * v73 - 32];
                  uint64_t v160 = *(void *)v158;
                  uint64_t v159 = *((void *)v158 + 1);
                  BOOL v161 = __OFSUB__(v159, v160);
                  uint64_t v162 = v159 - v160;
                  char v163 = v161;
                  if (v161) {
                    goto LABEL_155;
                  }
                  uint64_t v164 = &v138[16 * v140];
                  uint64_t v166 = *(void *)v164;
                  uint64_t v165 = *((void *)v164 + 1);
                  BOOL v151 = __OFSUB__(v165, v166);
                  uint64_t v167 = v165 - v166;
                  if (v151) {
                    goto LABEL_158;
                  }
                  if (__OFADD__(v162, v167)) {
                    goto LABEL_159;
                  }
                  if (v162 + v167 < v143) {
                    goto LABEL_112;
                  }
                  BOOL v168 = v143 < v167;
                }
                if (v168) {
                  unint64_t v140 = v152;
                }
              }
              else
              {
                if (v73 == 3)
                {
                  uint64_t v142 = *((void *)v69 + 4);
                  uint64_t v141 = *((void *)v69 + 5);
                  BOOL v151 = __OFSUB__(v141, v142);
                  uint64_t v143 = v141 - v142;
                  char v144 = v151;
                  goto LABEL_100;
                }
                uint64_t v169 = *((void *)v69 + 4);
                uint64_t v170 = *((void *)v69 + 5);
                BOOL v151 = __OFSUB__(v170, v169);
                uint64_t v162 = v170 - v169;
                char v163 = v151;
LABEL_112:
                if (v163) {
                  goto LABEL_154;
                }
                uint64_t v171 = &v138[16 * v140];
                uint64_t v173 = *(void *)v171;
                uint64_t v172 = *((void *)v171 + 1);
                BOOL v151 = __OFSUB__(v172, v173);
                uint64_t v174 = v172 - v173;
                if (v151) {
                  goto LABEL_157;
                }
                if (v174 < v162) {
                  goto LABEL_27;
                }
              }
              unint64_t v179 = v140 - 1;
              if (v140 - 1 >= v73)
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                goto LABEL_170;
              }
              if (!v72) {
                goto LABEL_173;
              }
              id v180 = v69;
              uint64_t v181 = v72;
              uint64_t v182 = &v138[16 * v179];
              uint64_t v183 = *(void *)v182;
              uint64_t v184 = &v138[16 * v140];
              uint64_t v185 = *((void *)v184 + 1);
              uint64_t v186 = v214;
              sub_10004BE38((char *)(v181 + 8 * *(void *)v182), (char *)(v181 + 8 * *(void *)v184), v181 + 8 * v185, v213);
              uint64_t v214 = v186;
              if (v186) {
                goto LABEL_144;
              }
              if (v185 < v183) {
                goto LABEL_147;
              }
              if (v140 > *((void *)v180 + 2)) {
                goto LABEL_148;
              }
              *(void *)uint64_t v182 = v183;
              *(void *)&v138[16 * v179 + 8] = v185;
              unint64_t v187 = *((void *)v180 + 2);
              if (v140 >= v187) {
                goto LABEL_149;
              }
              unint64_t v73 = v187 - 1;
              memmove(&v138[16 * v140], v184 + 16, 16 * (v187 - 1 - v140));
              uint64_t v69 = v180;
              *((void *)v180 + 2) = v187 - 1;
              uint64_t v72 = (uint64_t)v222;
              if (v187 <= 2) {
                goto LABEL_27;
              }
              continue;
            }
          }
          unint64_t v73 = 1;
LABEL_27:
          Swift::Int v42 = (Swift::Int)v211;
          Swift::Int v71 = (Swift::Int)v223;
          if ((uint64_t)v223 >= (uint64_t)v211)
          {
            uint64_t v2 = v214;
            if (v73 < 2)
            {
LABEL_144:
              swift_bridgeObjectRelease();
              *(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
              specialized Array._endMutation()();
              return swift_bridgeObjectRelease();
            }
LABEL_132:
            uint64_t v188 = *v204;
            while (1)
            {
              unint64_t v189 = v73 - 2;
              if (v73 < 2) {
                goto LABEL_162;
              }
              if (!v188) {
                goto LABEL_175;
              }
              uint64_t v190 = v69;
              uint64_t v191 = *(void *)&v69[16 * v189 + 32];
              uint64_t v192 = *(void *)&v69[16 * v73 + 24];
              sub_10004BE38((char *)(v188 + 8 * v191), (char *)(v188 + 8 * *(void *)&v69[16 * v73 + 16]), v188 + 8 * v192, v213);
              if (v2) {
                goto LABEL_144;
              }
              if (v192 < v191) {
                goto LABEL_163;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v190 = sub_10004C930((uint64_t)v190);
              }
              if (v189 >= *((void *)v190 + 2)) {
                goto LABEL_164;
              }
              uint64_t v193 = &v190[16 * v189 + 32];
              *(void *)uint64_t v193 = v191;
              *((void *)v193 + 1) = v192;
              unint64_t v194 = *((void *)v190 + 2);
              if (v73 > v194) {
                goto LABEL_165;
              }
              memmove(&v190[16 * v73 + 16], &v190[16 * v73 + 32], 16 * (v194 - v73));
              uint64_t v69 = v190;
              *((void *)v190 + 2) = v194 - 1;
              unint64_t v73 = v194 - 1;
              if (v194 <= 2) {
                goto LABEL_144;
              }
            }
          }
          goto LABEL_28;
        }
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      Swift::Int v75 = (Swift::Int)v223 + 1;
      ++v93;
      if (v211 == (char *)v223 + 1)
      {
        Swift::Int v42 = (Swift::Int)v211;
        Swift::Int v75 = (Swift::Int)v211;
        goto LABEL_47;
      }
    }
    swift_retain();
    swift_retain();
LABEL_41:
    sub_10000F394(v97, &qword_100181690);
    int v105 = static Date.< infix(_:_:)();
    goto LABEL_43;
  }
  if (v42 < 0) {
    goto LABEL_167;
  }
  if ((unint64_t)v42 >= 2)
  {
    uint64_t v224 = v24;
    unint64_t v222 = v10;
    uint64_t v218 = (uint64_t)v7;
    uint64_t v214 = v1;
    uint64_t v47 = (void *)*v204;
    uint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 6);
    unint64_t v221 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 4);
    uint64_t v217 = (void (**)(uint64_t, uint64_t))(v223 + 1);
    uint64_t v49 = -1;
    uint64_t v50 = 1;
    v223 = v47;
    uint64_t v51 = v219;
    do
    {
      os_log_type_t v213 = (char *)v50;
      uint64_t v52 = v223[v50];
      uint64_t v215 = (char *)v49;
      uint64_t v225 = v49;
      uint64_t v212 = (char *)v47;
      do
      {
        uint64_t v53 = *v47;
        uint64_t v54 = v52 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess();
        uint64_t v55 = v54;
        uint64_t v56 = (uint64_t)v222;
        sub_10000F330(v55, (uint64_t)v222, &qword_100181690);
        uint64_t v57 = *v48;
        uint64_t v58 = v224;
        if ((*v48)(v56, 1, v224) == 1)
        {
          swift_retain();
          swift_retain();
          goto LABEL_17;
        }
        uint64_t v220 = *v221;
        v220((uint64_t)v51, v56, v58);
        uint64_t v59 = v58;
        uint64_t v60 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess();
        uint64_t v61 = v60;
        uint64_t v56 = v218;
        sub_10000F330(v61, v218, &qword_100181690);
        if (v57(v56, 1, v58) == 1)
        {
          os_log_type_t v62 = *v217;
          swift_retain();
          swift_retain();
          v62((uint64_t)v51, v58);
LABEL_17:
          sub_10000F394(v56, &qword_100181690);
          char v63 = static Date.< infix(_:_:)();
          swift_release();
          Swift::Int result = swift_release();
          if ((v63 & 1) == 0) {
            break;
          }
          goto LABEL_20;
        }
        uint64_t v64 = (uint64_t)v216;
        v220((uint64_t)v216, v56, v58);
        swift_retain();
        swift_retain();
        LODWORD(v220) = static Date.< infix(_:_:)();
        uint64_t v65 = v48;
        uint64_t v66 = *v217;
        uint64_t v51 = v219;
        (*v217)(v64, v59);
        v66((uint64_t)v51, v59);
        uint64_t v48 = v65;
        swift_release();
        Swift::Int result = swift_release();
        if ((v220 & 1) == 0) {
          break;
        }
LABEL_20:
        if (!v223) {
          goto LABEL_171;
        }
        uint64_t v67 = *v47;
        uint64_t v52 = v47[1];
        void *v47 = v52;
        v47[1] = v67;
        --v47;
      }
      while (!__CFADD__(v225++, 1));
      uint64_t v50 = (uint64_t)(v213 + 1);
      uint64_t v47 = v212 + 8;
      uint64_t v49 = (uint64_t)(v215 - 1);
    }
    while (v213 + 1 != v211);
  }
  return result;
}

uint64_t sub_10004BE38(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8 = sub_10000AA4C(&qword_100181690);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = &v81[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v88 = &v81[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v89 = &v81[-v15];
  __chkstk_darwin(v14);
  uint64_t v91 = &v81[-v16];
  uint64_t v94 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v94 - 8);
  uint64_t v18 = __chkstk_darwin(v94);
  unsigned int v82 = (void (**)(char *, char *, uint64_t))&v81[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v84 = &v81[-v22];
  __chkstk_darwin(v21);
  uint64_t v25 = a2 - a1;
  uint64_t v26 = a2 - a1 + 7;
  if (a2 - a1 >= 0) {
    uint64_t v26 = a2 - a1;
  }
  uint64_t v27 = v26 >> 3;
  unint64_t v92 = a3;
  uint64_t v93 = a4;
  uint64_t v28 = a3 - (void)a2;
  uint64_t v29 = v28 / 8;
  uint64_t v96 = a1;
  int v99 = a1;
  uint64_t v98 = a4;
  if (v26 >> 3 >= v28 / 8)
  {
    uint64_t v87 = v24;
    uint64_t v85 = v11;
    if (v28 < -7) {
      goto LABEL_57;
    }
    uint64_t v53 = v93;
    uint64_t v54 = (uint64_t)v88;
    if (v93 != a2 || &a2[8 * v29] <= v93) {
      memmove(v93, a2, 8 * v29);
    }
    uint64_t v55 = &v53[8 * v29];
    uint64_t v97 = v55;
    int v99 = a2;
    BOOL v56 = v28 < 8;
    unint64_t v57 = v92;
    if (v56 || v96 >= a2)
    {
LABEL_56:
      sub_10004C874((void **)&v99, (const void **)&v98, &v97);
      return 1;
    }
    uint64_t v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    uint64_t v84 = (unsigned char *)(v17 + 32);
    uint64_t v83 = (void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v17 + 8);
    uint64_t v58 = a2;
    while (1)
    {
      uint64_t v95 = a2;
      uint64_t v91 = v55;
      uint64_t v59 = *((void *)v55 - 1);
      uint64_t v60 = *((void *)v58 - 1);
      uint64_t v89 = v55 - 8;
      uint64_t v90 = v58 - 8;
      uint64_t v61 = v59 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      sub_10000F330(v61, v54, &qword_100181690);
      os_log_type_t v62 = *v86;
      uint64_t v63 = v94;
      if ((*v86)(v54, 1, v94) == 1) {
        break;
      }
      unint64_t v92 = v57;
      uint64_t v66 = *(void (**)(unsigned char *, void *, uint64_t))v84;
      (*(void (**)(void, uint64_t, uint64_t))v84)(v87, v54, v63);
      uint64_t v67 = v60 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      uint64_t v68 = v67;
      uint64_t v69 = v94;
      uint64_t v70 = v85;
      sub_10000F330(v68, (uint64_t)v85, &qword_100181690);
      if (v62((uint64_t)v70, 1, v69) == 1)
      {
        Swift::Int v71 = *v83;
        swift_retain();
        swift_retain();
        v71(v87, v69);
        uint64_t v64 = (uint64_t)v70;
        unint64_t v57 = v92;
        uint64_t v65 = v93;
LABEL_39:
        uint64_t v72 = v95;
        sub_10000F394(v64, &qword_100181690);
        char v73 = static Date.< infix(_:_:)();
        swift_release();
        swift_release();
        Swift::Int v74 = (char *)(v57 - 8);
        if ((v73 & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_40;
      }
      Swift::Int v75 = v82;
      v66(v82, v70, v69);
      swift_retain();
      swift_retain();
      uint64_t v76 = v87;
      uint64_t v77 = v69;
      char v78 = static Date.< infix(_:_:)();
      uint64_t v79 = *v83;
      (*v83)(v75, v77);
      v79(v76, v77);
      swift_release();
      swift_release();
      unint64_t v57 = v92;
      uint64_t v65 = v93;
      Swift::Int v74 = (char *)(v92 - 8);
      uint64_t v72 = v95;
      if ((v78 & 1) == 0)
      {
LABEL_45:
        uint64_t v55 = v89;
        uint64_t v97 = v89;
        if (v57 < (unint64_t)v91 || v74 >= v91)
        {
          *(void *)Swift::Int v74 = *(void *)v89;
          uint64_t v58 = v72;
        }
        else
        {
          if ((char *)v57 != v91) {
            *(void *)Swift::Int v74 = *(void *)v89;
          }
          uint64_t v58 = v72;
        }
        goto LABEL_51;
      }
LABEL_40:
      uint64_t v58 = v90;
      if ((char *)v57 != v72 || v74 >= v72) {
        *(void *)Swift::Int v74 = *(void *)v90;
      }
      int v99 = v58;
      uint64_t v55 = v91;
LABEL_51:
      BOOL v56 = v55 > v65;
      uint64_t v54 = (uint64_t)v88;
      if (v56)
      {
        a2 = v58;
        unint64_t v57 = (unint64_t)v74;
        if (v58 > v96) {
          continue;
        }
      }
      goto LABEL_56;
    }
    swift_retain();
    swift_retain();
    uint64_t v64 = v54;
    uint64_t v65 = v93;
    goto LABEL_39;
  }
  uint64_t v90 = &v81[-v23];
  if (v25 >= -7)
  {
    uint64_t v30 = v93;
    if (v93 != v96 || &v96[8 * v27] <= v93) {
      memmove(v93, v96, 8 * v27);
    }
    uint64_t v31 = &v30[8 * v27];
    uint64_t v97 = v31;
    if (v25 >= 8 && (unint64_t)a2 < v92)
    {
      uint64_t v32 = v30;
      uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      uint64_t v85 = (void *)(v17 + 8);
      uint64_t v87 = (void (**)(char *, char *, uint64_t))(v17 + 32);
      uint64_t v88 = v31;
      uint64_t v86 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
      while (1)
      {
        uint64_t v34 = *(void *)a2;
        uint64_t v95 = *(char **)v32;
        uint64_t v35 = v34 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
        swift_beginAccess();
        uint64_t v36 = v35;
        uint64_t v37 = v91;
        sub_10000F330(v36, (uint64_t)v91, &qword_100181690);
        uint64_t v38 = *v33;
        uint64_t v39 = v94;
        if ((*v33)(v37, 1, v94) == 1) {
          break;
        }
        uint64_t v93 = v32;
        Swift::Int v42 = *v87;
        (*v87)(v90, v37, v39);
        uint64_t v43 = (uint64_t)&v95[OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime];
        swift_beginAccess();
        uint64_t v44 = v43;
        uint64_t v45 = v89;
        sub_10000F330(v44, (uint64_t)v89, &qword_100181690);
        if (v38(v45, 1, v39) == 1)
        {
          uint64_t v46 = (void (*)(char *, uint64_t))*v85;
          swift_retain();
          swift_retain();
          v46(v90, v39);
          uint64_t v40 = (uint64_t)v45;
          unint64_t v41 = v92;
          uint64_t v32 = v93;
          uint64_t v31 = v88;
          uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))v86;
LABEL_15:
          sub_10000F394(v40, &qword_100181690);
          char v47 = static Date.< infix(_:_:)();
          swift_release();
          swift_release();
          if ((v47 & 1) == 0) {
            goto LABEL_22;
          }
          goto LABEL_16;
        }
        uint64_t v49 = v84;
        v42(v84, v45, v39);
        swift_retain();
        swift_retain();
        uint64_t v50 = v90;
        char v51 = static Date.< infix(_:_:)();
        uint64_t v52 = (void (*)(char *, uint64_t))*v85;
        ((void (*)(unsigned char *, uint64_t))*v85)(v49, v39);
        v52(v50, v39);
        swift_release();
        swift_release();
        unint64_t v41 = v92;
        uint64_t v32 = v93;
        uint64_t v31 = v88;
        uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))v86;
        if ((v51 & 1) == 0)
        {
LABEL_22:
          if (v96 != v32) {
            *(void *)uint64_t v96 = *(void *)v32;
          }
          v32 += 8;
          uint64_t v98 = v32;
          unint64_t v48 = (unint64_t)a2;
          goto LABEL_25;
        }
LABEL_16:
        unint64_t v48 = (unint64_t)(a2 + 8);
        if (v96 < a2 || (unint64_t)v96 >= v48)
        {
          *(void *)uint64_t v96 = *(void *)a2;
        }
        else if (v96 != a2)
        {
          *(void *)uint64_t v96 = *(void *)a2;
        }
LABEL_25:
        v96 += 8;
        int v99 = v96;
        if (v32 < v31)
        {
          a2 = (char *)v48;
          if (v48 < v41) {
            continue;
          }
        }
        goto LABEL_56;
      }
      swift_retain();
      swift_retain();
      uint64_t v40 = (uint64_t)v37;
      unint64_t v41 = v92;
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_57:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10004C778(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AA4C(&qword_100181698);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10004C874(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_10004C930(uint64_t a1)
{
  return sub_10004C778(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004C944(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10004C958(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000F288(&qword_100181688, &qword_100181680);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000AA4C(&qword_100181680);
          uint64_t v12 = sub_100110B34(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AirDropTransferSession();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10004CB7C(uint64_t a1)
{
  return sub_1000B56B0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004CB90(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

id sub_10004CC50()
{
  uint64_t v0 = SFAirDropSend.Request.itemPreviewData.getter();
  if (v1 >> 60 != 15)
  {
    uint64_t v7 = v0;
    unint64_t v8 = v1;
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v10 = sub_100006EE0(isa);

    if (v10)
    {
      id v11 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v10];
    }
    else
    {
      Class v12 = Data._bridgeToObjectiveC()().super.isa;
      unint64_t v10 = (void *)SFCreateCGImageFromData();

      id v13 = objc_allocWithZone((Class)UIImage);
      uint64_t v14 = v13;
      if (!v10)
      {
        sub_10001EC34(v7, v8);
        Class v16 = Data._bridgeToObjectiveC()().super.isa;
        id v6 = [v14 initWithData:v16];
        sub_10001EBC4(v7, v8);

        if (!v6)
        {
          if (qword_10017F608 != -1) {
            swift_once();
          }
          uint64_t v17 = type metadata accessor for Logger();
          sub_10000B150(v17, (uint64_t)qword_100181180);
          sub_10001EC34(v7, v8);
          sub_10001EC34(v7, v8);
          uint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = (uint8_t *)swift_slowAlloc();
            uint64_t v24 = swift_slowAlloc();
            *(_DWORD *)uint64_t v20 = 136315138;
            sub_10001EC34(v7, v8);
            uint64_t v21 = Data.description.getter();
            unint64_t v23 = v22;
            sub_10001EBC4(v7, v8);
            sub_100047F98(v21, v23, &v24);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001EBC4(v7, v8);
            sub_10001EBC4(v7, v8);
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create image from preview image data: %s", v20, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_10001EBC4(v7, v8);
          }
          else
          {
            sub_10001EBC4(v7, v8);
            sub_10001EBC4(v7, v8);
            sub_10001E998(v7, v8);
          }
          return 0;
        }
LABEL_13:
        sub_10001EBC4(v7, v8);
        return v6;
      }
      id v11 = [v13 initWithCGImage:v10];
    }
    id v6 = v11;

    goto LABEL_13;
  }
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181180);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing preview image data", v5, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_10004D010(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 2);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t result = *(void *)&v3[v7 + 32];
    if (result == a2 && *(void *)&v3[v7 + 40] == a3) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v8;
    v7 += 16;
    if (v4 == v8) {
      return v4;
    }
  }
  unint64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v11 == v4) {
      return v8;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v3 + 2);
      if (v11 >= v13) {
        break;
      }
      uint64_t v14 = &v3[v7];
      uint64_t result = *(void *)&v3[v7 + 48];
      if (result != a2 || *(void *)&v3[v7 + 56] != a3)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v11 != v8)
          {
            if (v8 >= v13) {
              goto LABEL_31;
            }
            Class v16 = &v3[16 * v8 + 32];
            uint64_t v17 = *((void *)v16 + 1);
            uint64_t v22 = *(void *)v16;
            uint64_t v18 = *((void *)v14 + 6);
            uint64_t v19 = *((void *)v14 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v3 = sub_10004CB7C((uint64_t)v3);
            }
            uint64_t v20 = &v3[16 * v8];
            *((void *)v20 + 4) = v18;
            *((void *)v20 + 5) = v19;
            uint64_t result = swift_bridgeObjectRelease();
            if (v11 >= *((void *)v3 + 2)) {
              goto LABEL_32;
            }
            uint64_t v21 = &v3[v7];
            *((void *)v21 + 6) = v22;
            *((void *)v21 + 7) = v17;
            uint64_t result = swift_bridgeObjectRelease();
            *a1 = v3;
          }
          if (__OFADD__(v8++, 1)) {
            goto LABEL_30;
          }
        }
      }
      ++v11;
      v7 += 16;
      if (v11 == *((void *)v3 + 2)) {
        return v8;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004D1C4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1000B56B0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    Class v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004D330(void *a1)
{
  uint64_t v2 = v1;
  ObjectCFStringRef Type = swift_getObjectType();
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_100181180);
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v19 = ObjectType;
    int64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)int64_t v9 = 138412290;
    aBlock[0] = v6;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v10 = v6;

    ObjectCFStringRef Type = v19;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "AirDropTransferSessionsController received a connection! %@", v9, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = ObjectType;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10004FAD0;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_10004FAE8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000639D0;
  aBlock[3] = &unk_10016A250;
  BOOL v14 = _Block_copy(aBlock);
  uint64_t v15 = v2;
  swift_retain();
  swift_release();
  [v6 configureConnection:v14];
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    [v6 activate];
    uint64_t v17 = *(void **)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection];
    *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_connection] = v6;
    id v18 = v6;

    if ([v18 remoteTarget])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    sub_10000F2CC((uint64_t)&v21, (uint64_t)aBlock, &qword_100181560);
    sub_10000F2CC((uint64_t)aBlock, (uint64_t)&v21, &qword_100181560);
    if (*((void *)&v22 + 1))
    {
      sub_10000AA4C(&qword_1001815C8);
      if (swift_dynamicCast())
      {
        *(void *)&v15[OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airDropClient] = v20;
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_10000F394((uint64_t)&v21, &qword_100181560);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10004D704(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v140 = a4;
  uint64_t v154 = a3;
  uint64_t v150 = a2;
  uint64_t v152 = a1;
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_1001813F0);
  uint64_t v138 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v139 = v5;
  uint64_t v141 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_10000AA4C(&qword_100181470);
  uint64_t v134 = *(void *)(v130 - 8);
  uint64_t v6 = *(void *)(v134 + 64);
  __chkstk_darwin(v130);
  unint64_t v131 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v137 = (char *)&v126 - v8;
  uint64_t v9 = sub_10000AA4C(&qword_100181478);
  __chkstk_darwin(v9 - 8);
  uint64_t v132 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000AA4C(&qword_100181480);
  uint64_t v136 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v133 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v135 = (char *)&v126 - v13;
  uint64_t v14 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v14 - 8);
  BOOL v151 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100181488);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v145 = v16;
  uint64_t v146 = v17;
  __chkstk_darwin(v16);
  uint64_t v143 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v21 = (char *)&v126 - v20;
  uint64_t v22 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v153 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v147 = (char *)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v142 = (char *)&v126 - v28;
  uint64_t v148 = v29;
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v126 - v31;
  uint64_t v33 = sub_10000AA4C(&qword_100181490);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v126 - v39;
  (*(void (**)(char *, char *, uint64_t, __n128))(v23 + 16))(v25, v154, v22, v38);
  int v41 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v25, v22);
  if (v41 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v23 + 96))(v25, v22);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, v25, v33);
    goto LABEL_3;
  }
  uint64_t v129 = v32;
  uint64_t v59 = v143;
  uint64_t v128 = v36;
  uint64_t v127 = v6;
  uint64_t v154 = v25;
  uint64_t v60 = v144;
  if (v41 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    uint64_t v61 = v154;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v154, v22);
    uint64_t v62 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    uint64_t v63 = &v61[*(int *)(v62 + 48)];
    swift_bridgeObjectRelease();
    uint64_t v64 = &v61[*(int *)(v62 + 80)];
    uint64_t v65 = v153;
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v153 + 32);
    uint64_t v67 = v129;
    uint64_t v68 = v149;
    v66(v129, v64, v149);
    uint64_t v69 = type metadata accessor for SFAirDrop.Progress();
    (*(void (**)(char *, uint64_t))(*(void *)(v69 - 8) + 8))(v63, v69);
LABEL_10:
    uint64_t v72 = v150;
    char v73 = v147;
    uint64_t v74 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v74 - 8) + 8))(v61, v74);
    uint64_t v75 = type metadata accessor for TaskPriority();
    uint64_t v76 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v151, 1, 1, v75);
    v66(v73, v67, v68);
    unint64_t v77 = (*(unsigned __int8 *)(v65 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    unint64_t v78 = (v148 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v79 = swift_allocObject();
    v66((char *)(v79 + v77), v73, v68);
    uint64_t v80 = (void *)(v79 + v78);
    *uint64_t v80 = v152;
    v80[1] = v72;
    swift_bridgeObjectRetain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    return sub_10000F394(v76, &qword_1001829C0);
  }
  if (v41 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    uint64_t v61 = v154;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v154, v22);
    uint64_t v70 = sub_10000AA4C(&qword_1001814D0);
    swift_bridgeObjectRelease();
    Swift::Int v71 = &v61[*(int *)(v70 + 80)];
    uint64_t v65 = v153;
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v153 + 32);
    uint64_t v67 = v129;
    uint64_t v68 = v149;
    v66(v129, v71, v149);
    goto LABEL_10;
  }
  if (v41 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    uint64_t v81 = v154;
    (*(void (**)(char *, uint64_t))(v23 + 96))(v154, v22);
    uint64_t v82 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, &v81[*(int *)(v82 + 64)], v33);
    uint64_t v83 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v81, v83);
LABEL_3:
    uint64_t v42 = v153;
    uint64_t v43 = v145;
    SFAirDrop.PermissionRequest.style.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
    uint64_t v44 = v146;
    if ((*(unsigned int (**)(char *, uint64_t))(v146 + 88))(v21, v43) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:)) {
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v21, v43);
    }
    (*(void (**)(char *, uint64_t))(v44 + 96))(v21, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = &v21[*(int *)(sub_10000AA4C(&qword_1001814B0) + 80)];
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    char v47 = v142;
    uint64_t v48 = v149;
    v46(v142, v45, v149);
    uint64_t v49 = type metadata accessor for TaskPriority();
    uint64_t v50 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v151, 1, 1, v49);
    char v51 = v147;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v147, v47, v48);
    unint64_t v52 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    unint64_t v53 = (v148 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = v42;
    uint64_t v55 = swift_allocObject();
    v46((char *)(v55 + v52), v51, v48);
    BOOL v56 = (void *)(v55 + v53);
    uint64_t v57 = v150;
    void *v56 = v152;
    v56[1] = v57;
    swift_bridgeObjectRetain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    sub_10000F394(v50, &qword_1001829C0);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v47, v48);
  }
  if (v41 != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    uint64_t v101 = type metadata accessor for TaskPriority();
    uint64_t v102 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v151, 1, 1, v101);
    uint64_t v103 = v141;
    sub_10000F330(v140, v141, (uint64_t *)&unk_1001813F0);
    unint64_t v104 = (*(unsigned __int8 *)(v138 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    unint64_t v105 = (v139 + v104 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v106 = swift_allocObject();
    sub_10000F2CC(v103, v106 + v104, (uint64_t *)&unk_1001813F0);
    uint64_t v107 = (void *)(v106 + v105);
    uint64_t v108 = v150;
    *uint64_t v107 = v152;
    v107[1] = v108;
    swift_bridgeObjectRetain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    sub_10000F394(v102, &qword_1001829C0);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v154, v22);
  }
  uint64_t v84 = v154;
  (*(void (**)(char *, uint64_t))(v23 + 96))(v154, v22);
  uint64_t v85 = sub_10000AA4C(&qword_1001806D8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v86 = &v84[*(int *)(v85 + 80)];
  uint64_t v87 = v128;
  uint64_t v88 = v33;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v128, v86, v33);
  SFAirDrop.PermissionRequest.style.getter();
  uint64_t v89 = v145;
  uint64_t v90 = v146;
  if ((*(unsigned int (**)(char *, uint64_t))(v146 + 88))(v59, v145) == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v90 + 96))(v59, v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v91 = *((void *)v59 + 4);
    uint64_t v92 = sub_10000AA4C(&qword_1001814B0);
    (*(void (**)(char *, uint64_t))(v153 + 8))(&v59[*(int *)(v92 + 80)], v149);
    if (*(void *)(v91 + 16))
    {
      uint64_t v93 = v136;
      uint64_t v94 = (uint64_t)v132;
      uint64_t v95 = v60;
      (*(void (**)(char *, unint64_t, uint64_t))(v136 + 16))(v132, v91 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80)), v60);
      uint64_t v96 = 0;
      uint64_t v98 = v134;
      uint64_t v97 = v135;
      int v99 = v137;
      unint64_t v100 = v133;
    }
    else
    {
      uint64_t v96 = 1;
      uint64_t v98 = v134;
      uint64_t v97 = v135;
      uint64_t v93 = v136;
      int v99 = v137;
      uint64_t v95 = v60;
      unint64_t v100 = v133;
      uint64_t v94 = (uint64_t)v132;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v94, v96, 1, v95);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v94, 1, v95) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v128, v88);
      sub_10000F394(v94, &qword_100181478);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v97, v94, v95);
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v100, v97, v95);
      if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v100, v95) == enum case for SFAirDrop.AcceptAction.single<A>(_:))
      {
        (*(void (**)(char *, uint64_t))(v93 + 96))(v100, v95);
        uint64_t v109 = &v100[*(int *)(sub_10000AA4C(&qword_1001814B8) + 48)];
        Swift::Int v110 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
        uint64_t v111 = v130;
        v110(v99, v100, v130);
        uint64_t v112 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v112 - 8) + 8))(v109, v112);
        uint64_t v113 = type metadata accessor for TaskPriority();
        Swift::Int v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56);
        uint64_t v153 = v88;
        uint64_t v115 = (uint64_t)v151;
        v114(v151, 1, 1, v113);
        int v116 = v131;
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v131, v99, v111);
        unint64_t v117 = (*(unsigned __int8 *)(v98 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        unint64_t v118 = (v127 + v117 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v119 = swift_allocObject();
        v110((char *)(v119 + v117), v116, v111);
        uint64_t v120 = (void *)(v119 + v118);
        uint64_t v121 = v150;
        void *v120 = v152;
        v120[1] = v121;
        swift_bridgeObjectRetain();
        static Task<>.noThrow(priority:operation:)();
        swift_release();
        swift_release();
        sub_10000F394(v115, &qword_1001829C0);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v137, v111);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v144);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v128, v153);
        uint64_t v122 = type metadata accessor for SFAirDropReceive.ItemDestination();
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v122 - 8) + 8))(v154, v122);
      }
      unint64_t v123 = *(void (**)(char *, uint64_t))(v93 + 8);
      v123(v97, v95);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v128, v88);
      v123(v100, v95);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v87, v88);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v59, v89);
  }
  uint64_t v124 = v154;
  uint64_t v125 = type metadata accessor for SFAirDropReceive.ItemDestination();
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v125 - 8) + 8))(v124, v125);
}

uint64_t sub_10004E8CC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004E904()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004E994;
  return sub_100041BE0(v0);
}

uint64_t sub_10004E994(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10004EA90(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001FD90;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100181418 + dword_100181418);
  return v6(a1, v4);
}

uint64_t sub_10004EB48()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004EB88(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10001FD90;
  return sub_100041314(a1, v5, v4);
}

uint64_t sub_10004EC34()
{
  uint64_t v1 = *(void *)(sub_10000AA4C((uint64_t *)&unk_1001813F0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10004ED74(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C((uint64_t *)&unk_1001813F0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001FD90;
  return sub_1000424EC(a1, v6, v8, v9);
}

uint64_t sub_10004EE90()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181470);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10004EF3C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100181470) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001FD90;
  return sub_100041EF8(a1, v6, v8, v9);
}

uint64_t sub_10004F05C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.DeclineAction() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001FD90;
  return sub_100042F7C(a1, v6, v8, v9);
}

uint64_t sub_10004F178()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10004F220(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.DeclineAction() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001FD90;
  return sub_100042AFC(a1, v6, v8, v9);
}

uint64_t sub_10004F348(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004F358()
{
  return swift_release();
}

uint64_t sub_10004F360(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181540);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 actionIdentifier];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    }
  }
  if (qword_10017F608 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000B150(v18, (uint64_t)qword_100181180);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    long long v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Notification was tapped, they navigated to the completed url", v21, 2u);
    swift_slowDealloc();
  }

  id v22 = [a1 notification];
  id v23 = [v22 request];

  id v24 = [v23 content];
  id v25 = [v24 defaultActionURL];

  if (v25)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_10000F394((uint64_t)v10, &qword_100181540);
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10004F6E8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004F728()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_10001FD90;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100181578 + dword_100181578);
  return v5(v2, v3);
}

uint64_t sub_10004F7D8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001FD90;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100181588 + dword_100181588);
  return v6(v2, v3, v4);
}

uint64_t sub_10004F89C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004F8DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100181598 + dword_100181598);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10004F9A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004F9E0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001FD90;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001815A8 + dword_1001815A8);
  return v6(a1, v4);
}

uint64_t sub_10004FA98()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004FAD0(void *a1)
{
  sub_10003B984(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004FAD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FAE8(uint64_t a1)
{
  return sub_1000639A8(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_10004FAF0(void *a1)
{
}

uint64_t sub_10004FAF8()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004FB30()
{
  return sub_10003BFF0();
}

uint64_t sub_10004FB38()
{
  return sub_1000501B0((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_10004FB64(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001FD90;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_100013ABC;
  return SFAirDropClient.registerTransfersMonitor()(a1);
}

uint64_t sub_10004FC4C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001FD90;
  return sub_100032E70(v0);
}

uint64_t sub_10004FCDC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001FD90;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001865C8 + dword_1001865C8);
  return v6(a1, v4);
}

id sub_10004FD94(void *a1)
{
  return sub_100033008(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004FD9C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FDAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001FD90;
  return sub_100033B78(a1, v4);
}

uint64_t sub_10004FE60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AA4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004FEC4()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181470);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004FF58(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100181470) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10001FD90;
  return sub_1000403F0(a1, v5);
}

uint64_t sub_10005003C()
{
  return sub_1000504EC((uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Request);
}

uint64_t sub_100050054(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDropSend.Request() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  id v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10001FD90;
  return sub_10003F3D8(a1, v6, v7, v9, v10);
}

uint64_t sub_100050184()
{
  return sub_1000501B0((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000501B0(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100050208(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_10003E1FC(a1, v4, v5, v6);
}

uint64_t sub_1000502BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050304()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000503D8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100013ABC;
  return sub_10003D7F4(a1, v5, v6, v7, v8);
}

uint64_t sub_1000504D4()
{
  return sub_1000504EC((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest);
}

uint64_t sub_1000504EC(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v7, v6);
}

uint64_t sub_1000505E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDropReceive.AskRequest() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10001FD90;
  return sub_10003E7F4(a1, v6, v7, v9, v10);
}

uint64_t sub_100050708()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100050750(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10001FD90;
  return sub_10003DB74(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100050828(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100050884(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005092C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState + 8);
  *uint64_t v3 = result;
  v3[1] = a2;
  if (!a2)
  {
    if (!v5) {
      return result;
    }
    goto LABEL_10;
  }
  if (!v5
    || (v4 == result ? (BOOL v6 = v5 == a2) : (BOOL v6 = 0), !v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
LABEL_10:
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_hasSetInitialState) == 1) {
      sub_10005114C(1);
    }
  }

  return swift_bridgeObjectRelease();
}

void sub_1000509C4()
{
  v0[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_hasSetInitialState] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState];
  uint64_t v2 = type metadata accessor for SFShockwaveEffectState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = &v0[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState];
  sub_100022348();
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = v0;
  uint64_t v5 = (void *)static NSUserDefaults.airdrop.getter();
  SFAirDropUserDefaults.shockwaveEffectVariant.getter();

  BOOL v6 = (objc_class *)type metadata accessor for ShockwaveEffectViewController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v8 = [self bundleForClass:ObjCClassFromMetadata];
  id v9 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithPackageName:v10 inBundle:v8];

  if (!v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  *(void *)&v4[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView] = v11;

  v73.receiver = v4;
  v73.super_class = v6;
  uint64_t v12 = (char *)[super initWithNibName:0 bundle:0];
  id v13 = [v12 view];
  if (!v13)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  uint64_t v15 = self;
  id v16 = [v15 clearColor];
  [v14 setBackgroundColor:v16];

  uint64_t v17 = OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView;
  id v18 = *(id *)&v12[OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView];
  id v19 = [v15 clearColor];
  [v18 setBackgroundColor:v19];

  os_log_type_t v20 = *(void **)&v12[v17];
  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v21 = v20;
  id v22 = [v12 view];
  if (!v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v23 = v22;
  [v22 frame];
  double v25 = v24;
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;

  [v21 setFrame:v25, v27, v29, v31];
  id v32 = [v12 view];
  if (!v32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v33 = v32;
  [v32 addSubview:*(void *)&v12[v17]];

  [*(id *)&v12[v17] sizeThatFits:0.0, 0.0];
  double v35 = v34;
  double v37 = v36;
  id v38 = [v12 view];
  if (!v38)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v39 = v38;
  [v38 frame];
  CGFloat v41 = v40;
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;

  v74.origin.x = v41;
  v74.origin.y = v43;
  v74.size.width = v45;
  v74.size.height = v47;
  double Height = CGRectGetHeight(v74);
  id v49 = *(id *)&v12[v17];
  [v49 transform];
  CGFloat b = v72.b;
  CGFloat c = v72.c;
  CGFloat d = v72.d;
  CGFloat tx = v72.tx;
  CGFloat a = v72.a;
  CGFloat ty = v72.ty;
  id v53 = [v12 view];
  if (!v53)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v54 = v53;
  double v55 = v35 / v37 * Height;
  [v53 frame];
  CGFloat v57 = v56;
  CGFloat v59 = v58;
  CGFloat v61 = v60;
  CGFloat v63 = v62;

  v75.origin.x = v57;
  v75.origin.y = v59;
  v75.size.width = v61;
  v75.size.height = v63;
  CGFloat Width = CGRectGetWidth(v75);
  v72.CGFloat a = a;
  v72.CGFloat b = b;
  v72.CGFloat c = c;
  v72.CGFloat d = d;
  v72.CGFloat tx = tx;
  v72.CGFloat ty = ty;
  CGAffineTransformScale(&v71, &v72, Width / v55 * 1.003, 1.0);
  CGAffineTransform v72 = v71;
  [v49 setTransform:&v72];

  id v65 = [v12 view];
  if (v65)
  {
    uint64_t v66 = v65;
    [v65 setUserInteractionEnabled:0];

    id v67 = *(id *)&v12[v17];
    [v67 bs_setHitTestingDisabled:1];

    return;
  }
LABEL_15:
  __break(1u);
}

void sub_10005114C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000AA4C(&qword_100181760);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v88 - v8;
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_100181768);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v94 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v93 = (char *)&v88 - v23;
  unint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState + 8);
  if (!v24) {
    return;
  }
  uint64_t v88 = v22;
  uint64_t v89 = v21;
  uint64_t v91 = v9;
  uint64_t v92 = v20;
  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_assetState);
  double v26 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectAssetView);
  swift_bridgeObjectRetain();
  uint64_t v90 = v25;
  NSString v27 = String._bridgeToObjectiveC()();
  [v26 setState:v27 animated:a1 & 1 transitionSpeed:0 completion:0.7];

  if (qword_10017F610 != -1) {
    swift_once();
  }
  id v28 = objc_retain(*(id *)(qword_10018CE80
                          + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator));
  sub_1000A6594((uint64_t)v16);

  uint64_t v29 = v94;
  uint64_t v30 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v16, 1, v92) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v93, v16, v30);
    __int16 v100 = 0;
    SFNearbySharingInteraction.state.getter();
    int v35 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
    if (v35 == enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:))
    {
      HIBYTE(v100) = 1;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      uint64_t v36 = (uint64_t)v91;
    }
    else
    {
      uint64_t v36 = (uint64_t)v91;
      if (v35 == enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:)) {
        LOBYTE(v100) = 1;
      }
      else {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
    }
    uint64_t v37 = v2 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState;
    swift_beginAccess();
    sub_100052840(v37, v36);
    uint64_t v38 = type metadata accessor for SFShockwaveEffectState();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38) == 1) {
      goto LABEL_16;
    }
    sub_100052840(v36, (uint64_t)v7);
    int v44 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v7, v38);
    if (v44 != enum case for SFShockwaveEffectState.connectionHint(_:))
    {
      if (v44 == enum case for SFShockwaveEffectState.shockwave(_:))
      {
        if (qword_10017F7A8 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_10000B150(v48, (uint64_t)qword_10018D128);
        uint64_t v49 = v94;
        uint64_t v50 = v88;
        (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v88, v93, v30);
        swift_bridgeObjectRetain();
        char v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          v96[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136315394;
          char v54 = SFNearbySharingInteraction.isInitiator.getter();
          BOOL v55 = (v54 & 1) == 0;
          if (v54) {
            uint64_t v56 = 0x6F74616974696E69;
          }
          else {
            uint64_t v56 = 0x7265766965636572;
          }
          if (v55) {
            unint64_t v57 = 0xE800000000000000;
          }
          else {
            unint64_t v57 = 0xE900000000000072;
          }
          uint64_t v95 = sub_100047F98(v56, v57, v96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          double v58 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
          v58(v50, v92);
          *(_WORD *)(v53 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v95 = sub_100047F98(v90, v24, v96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Playing shockwave haptics as %s for SFShockwaveEffectState: %s", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy();
          uint64_t v30 = v92;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          double v58 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
          v58(v50, v30);

          swift_bridgeObjectRelease_n();
        }
        if (SFNearbySharingInteraction.isInitiator.getter())
        {
          if (qword_10017F7D8 != -1) {
            swift_once();
          }
          sub_10010A698();
        }
        else
        {
          if (qword_10017F7D8 != -1) {
            swift_once();
          }
          sub_10010A958();
        }
        v58((uint64_t)v93, v30);
        uint64_t v36 = (uint64_t)v91;
        goto LABEL_49;
      }
      if (v44 == enum case for SFShockwaveEffectState.cleaningUp(_:))
      {
        if (qword_10017F7A8 != -1) {
          swift_once();
        }
        uint64_t v70 = type metadata accessor for Logger();
        sub_10000B150(v70, (uint64_t)qword_10018D128);
        swift_bridgeObjectRetain();
        CGAffineTransform v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v71, v72))
        {
          objc_super v73 = (uint8_t *)swift_slowAlloc();
          v96[0] = swift_slowAlloc();
          *(_DWORD *)objc_super v73 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v95 = sub_100047F98(v90, v24, v96);
          uint64_t v30 = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "Cleaning up haptics for SFShockwaveEffectState: %s", v73, 0xCu);
          swift_arrayDestroy();
          uint64_t v36 = (uint64_t)v91;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (qword_10017F7D8 != -1) {
          swift_once();
        }
        sub_10010AAB8();
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v38);
LABEL_16:
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_10000B150(v40, (uint64_t)qword_10018D128);
      swift_bridgeObjectRetain();
      CGFloat v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        CGFloat v43 = (uint8_t *)swift_slowAlloc();
        v96[0] = swift_slowAlloc();
        *(_DWORD *)CGFloat v43 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v95 = sub_100047F98(v90, v24, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Not playing haptics for SFShockwaveEffectState: %s", v43, 0xCu);
        swift_arrayDestroy();
        uint64_t v36 = (uint64_t)v91;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v30);
LABEL_49:
        sub_10000F394(v36, &qword_100181760);
        return;
      }
      swift_bridgeObjectRelease_n();

LABEL_25:
      (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v30);
      goto LABEL_49;
    }
    sub_100022348();
    CGFloat v45 = (void *)static NSUserDefaults.airdrop.getter();
    char v46 = SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter();

    if ((v46 & 1) != 0 && (v100 & 0x100) != 0) {
      int v47 = 1;
    }
    else {
      int v47 = v100;
    }
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    uint64_t v60 = sub_10000B150(v59, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain();
    CGFloat v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v88 = v60;
      uint64_t v98 = v64;
      *(_DWORD *)uint64_t v63 = 136316162;
      swift_bridgeObjectRetain();
      v96[0] = sub_100047F98(v90, v24, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      if (v47) {
        uint64_t v65 = 5457241;
      }
      else {
        uint64_t v65 = 20302;
      }
      if (v47) {
        unint64_t v66 = 0xE300000000000000;
      }
      else {
        unint64_t v66 = 0xE200000000000000;
      }
      v96[0] = sub_100047F98(v65, v66, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 1024;
      id v67 = (void *)static NSUserDefaults.airdrop.getter();
      char v68 = SFAirDropUserDefaults.shockwaveHapticsPlayerStartsEarly.getter();

      int v69 = v68 & 1;
      uint64_t v36 = (uint64_t)v91;
      LODWORD(v96[0]) = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 28) = 1024;
      swift_beginAccess();
      LODWORD(v95) = HIBYTE(v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 34) = 1024;
      swift_beginAccess();
      LODWORD(v97) = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Should play haptics for SFShockwaveEffectState: %s? %s , shockwaveHapticsPlayerStartsEarly:%{BOOL}d, isInteractionStatePresenceDetected:%{BOOL}d, isInteractionStateConnecting:%{BOOL}d", (uint8_t *)v63, 0x28u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v47) {
        goto LABEL_48;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!v47)
      {
LABEL_48:
        (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v92);
        goto LABEL_49;
      }
    }
    CGRect v74 = v93;
    char v75 = SFNearbySharingInteraction.isInitiator.getter();
    uint64_t v76 = v94;
    uint64_t v77 = v89;
    uint64_t v78 = v92;
    (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v89, v74, v92);
    if (v75)
    {
      char v79 = 1;
    }
    else
    {
      char v80 = SFNearbySharingInteraction.isInitiatorRoleExpected.getter();
      uint64_t v76 = v94;
      char v79 = v80;
    }
    uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v81(v77, v78);
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136315138;
      uint64_t v98 = v85;
      if (v79) {
        uint64_t v86 = 0x6F74616974696E69;
      }
      else {
        uint64_t v86 = 0x7265766965636572;
      }
      if (v79) {
        unint64_t v87 = 0xE900000000000072;
      }
      else {
        unint64_t v87 = 0xE800000000000000;
      }
      uint64_t v97 = sub_100047F98(v86, v87, &v98);
      uint64_t v36 = (uint64_t)v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v78 = v92;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Playing hinting haptics as %s", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (v79)
    {
      if (qword_10017F7D8 != -1) {
        swift_once();
      }
      sub_10010A538();
    }
    else
    {
      if (qword_10017F7D8 != -1) {
        swift_once();
      }
      sub_10010A7F8();
    }
    v81((uint64_t)v93, v78);
    goto LABEL_49;
  }
  sub_10000F394((uint64_t)v16, &qword_100181768);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10000B150(v31, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain();
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    double v34 = (uint8_t *)swift_slowAlloc();
    v99[0] = swift_slowAlloc();
    *(_DWORD *)double v34 = 136315138;
    swift_bridgeObjectRetain();
    v96[0] = sub_100047F98(v90, v24, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping playing Haptics with ShockwaveEffectView's state change to %s, currentNearbyInteraction was nil", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

id sub_100052308()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShockwaveEffectViewController();
  return [super dealloc];
}

uint64_t sub_1000523A8()
{
  return type metadata accessor for ShockwaveEffectViewController();
}

uint64_t type metadata accessor for ShockwaveEffectViewController()
{
  uint64_t result = qword_100181748;
  if (!qword_100181748) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000523FC()
{
  sub_1000524AC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000524AC()
{
  if (!qword_100181758)
  {
    type metadata accessor for SFShockwaveEffectState();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100181758);
    }
  }
}

uint64_t sub_100052504(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFShockwaveEffectState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100181760);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  dispatch thunk of ShockwaveAnimationCoordinator.state.getter();
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t v9 = a1 + OBJC_IVAR____TtC9AirDropUI29ShockwaveEffectViewController_effectState;
  swift_beginAccess();
  sub_100052AA4((uint64_t)v8, v9);
  swift_endAccess();
  swift_retain();
  dispatch thunk of ShockwaveAnimationCoordinator.state.getter();
  swift_release();
  uint64_t v10 = SFShockwaveEffectState.assetState.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_10005092C(v10, v12);
}

id sub_1000526C8()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ShockwaveEffectViewController());

  return [v0 init];
}

uint64_t sub_100052700(uint64_t a1)
{
  return sub_100052504(a1);
}

uint64_t sub_100052714()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_100052750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100052A50();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000527B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100052A50();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100052818()
{
}

uint64_t sub_100052840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for ShockwaveEffectView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ShockwaveEffectView()
{
  return swift_release();
}

void *assignWithCopy for ShockwaveEffectView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ShockwaveEffectView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropActivityAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShockwaveEffectView()
{
  return &type metadata for ShockwaveEffectView;
}

unint64_t sub_1000529F0()
{
  unint64_t result = qword_100181770;
  if (!qword_100181770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181770);
  }
  return result;
}

void *sub_100052A44()
{
  return &protocol witness table for Never;
}

unint64_t sub_100052A50()
{
  unint64_t result = qword_100181778;
  if (!qword_100181778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181778);
  }
  return result;
}

uint64_t sub_100052AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100052B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if ((a5 >> 6) - 1 >= 2)
  {
    if (a5 >> 6) {
      return result;
    }
    swift_retain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for AirDropDescriptionView.Subtitle(uint64_t a1)
{
  return sub_100052B80(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_100052B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  int v6 = a5 >> 6;
  if (v6 == 2 || v6 == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!(a5 >> 6))
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100052B10(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100052B10(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_100052B80(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AirDropDescriptionView.Subtitle(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_100052B80(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropDescriptionView.Subtitle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 32) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirDropDescriptionView.Subtitle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 32) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_100052DC0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_100052DDC(uint64_t result)
{
  *(unsigned char *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_100052DEC(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(unsigned char *)(result + 32) = *(unsigned char *)(result + 32) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropDescriptionView.Subtitle()
{
  return &type metadata for AirDropDescriptionView.Subtitle;
}

uint64_t *sub_100052E2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_10000AA4C(&qword_100181780);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    id v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v9);
    uint64_t v16 = *((void *)v14 + 1);
    uint64_t v17 = *((void *)v14 + 2);
    uint64_t v18 = *((void *)v14 + 3);
    unsigned __int8 v19 = v14[32];
    swift_bridgeObjectRetain();
    sub_100052B10(v15, v16, v17, v18, v19);
    *(void *)id v13 = v15;
    *((void *)v13 + 1) = v16;
    *((void *)v13 + 2) = v17;
    *((void *)v13 + 3) = v18;
    v13[32] = v19;
  }
  return a1;
}

uint64_t sub_100052F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181780);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  unsigned __int8 v10 = *(unsigned char *)(v5 + 32);

  return sub_100052B80(v6, v7, v8, v9, v10);
}

uint64_t sub_100052FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unsigned __int8 v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = *(void *)(a2 + v8);
  uint64_t v15 = *(void *)(a2 + v8 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  unsigned __int8 v18 = *(unsigned char *)(v13 + 32);
  swift_bridgeObjectRetain();
  sub_100052B10(v14, v15, v16, v17, v18);
  *(void *)uint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(unsigned char *)(v12 + 32) = v18;
  return a1;
}

uint64_t sub_1000530B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = *(void *)(v12 + 24);
  unsigned __int8 v17 = *(unsigned char *)(v12 + 32);
  sub_100052B10(*(void *)v12, v14, v15, v16, v17);
  uint64_t v18 = *(void *)v11;
  uint64_t v19 = *(void *)(v11 + 8);
  uint64_t v20 = *(void *)(v11 + 16);
  uint64_t v21 = *(void *)(v11 + 24);
  *(void *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(void *)(v11 + 16) = v15;
  *(void *)(v11 + 24) = v16;
  unsigned __int8 v22 = *(unsigned char *)(v11 + 32);
  *(unsigned char *)(v11 + 32) = v17;
  sub_100052B80(v18, v19, v20, v21, v22);
  return a1;
}

uint64_t sub_1000531B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  return a1;
}

uint64_t sub_10005324C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 32);
  uint64_t v16 = *(void *)v13;
  uint64_t v17 = *(void *)(v13 + 8);
  uint64_t v18 = *(void *)(v13 + 16);
  uint64_t v19 = *(void *)(v13 + 24);
  long long v20 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v20;
  unsigned __int8 v21 = *(unsigned char *)(v13 + 32);
  *(unsigned char *)(v13 + 32) = v15;
  sub_100052B80(v16, v17, v18, v19, v21);
  return a1;
}

uint64_t sub_100053308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005331C);
}

uint64_t sub_10005331C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_100181780);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000533F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053404);
}

uint64_t sub_100053404(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000AA4C(&qword_100181780);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AirDropDescriptionView()
{
  uint64_t result = qword_1001817E0;
  if (!qword_1001817E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100053514()
{
  sub_1000535B4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000535B4()
{
  if (!qword_1001817F0)
  {
    sub_100053610();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001817F0);
    }
  }
}

unint64_t sub_100053610()
{
  unint64_t result = qword_1001817F8;
  if (!qword_1001817F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001817F8);
  }
  return result;
}

uint64_t sub_100053664()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100053680()
{
  uint64_t v1 = sub_10000AA4C((uint64_t *)&unk_1001855B0);
  __chkstk_darwin(v1 - 8);
  unsigned int v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AirDropDescriptionView();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + *(int *)(v5 + 32);
  if (*(unsigned __int8 *)(v8 + 32) > 0x3Fu)
  {
    sub_10000AA4C(&qword_100181780);
    ScaledMetric.wrappedValue.getter();
    uint64_t v10 = type metadata accessor for Font.Design();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
    uint64_t v9 = static Font.system(size:weight:design:)();
    sub_10000F394((uint64_t)v3, (uint64_t *)&unk_1001855B0);
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 16);
    sub_1000551E4(v0, (uint64_t)v7);
    if (v9)
    {
      swift_retain();
    }
    else
    {
      sub_10000AA4C(&qword_100181780);
      ScaledMetric.wrappedValue.getter();
      uint64_t v11 = type metadata accessor for Font.Design();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v3, 1, 1, v11);
      uint64_t v9 = static Font.system(size:weight:design:)();
      sub_10000F394((uint64_t)v3, (uint64_t *)&unk_1001855B0);
    }
    sub_100055248((uint64_t)v7);
  }
  return v9;
}

uint64_t sub_100053888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181838);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v26 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = sub_10000AA4C(&qword_100181840);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v26 - v17;
  if (qword_10017F740 != -1) {
    swift_once();
  }
  sub_100053B18((uint64_t)v18);
  uint64_t v19 = sub_100053680();
  uint64_t v20 = a1 + *(int *)(type metadata accessor for AirDropDescriptionView() + 24);
  unsigned int v21 = *(unsigned __int8 *)(v20 + 32);
  int v22 = 1;
  uint64_t v23 = 0;
  switch(v21 >> 6)
  {
    case 1u:
    case 2u:
      int v22 = 0;
      uint64_t v23 = 1;
      break;
    case 3u:
      break;
    default:
      uint64_t v23 = *(void *)(v20 + 24);
      int v22 = v21 & 1;
      break;
  }
  sub_100053FCC(v19, v23, v22, (uint64_t)v10);
  swift_release();
  sub_10000F2CC((uint64_t)v10, (uint64_t)v12, &qword_100181838);
  sub_10000F330((uint64_t)v18, (uint64_t)v16, &qword_100181840);
  sub_10000F330((uint64_t)v12, (uint64_t)v7, &qword_100181838);
  sub_10000F330((uint64_t)v16, a2, &qword_100181840);
  uint64_t v24 = sub_10000AA4C(&qword_100181848);
  sub_10000F330((uint64_t)v7, a2 + *(int *)(v24 + 48), &qword_100181838);
  sub_10000F394((uint64_t)v12, &qword_100181838);
  sub_10000F394((uint64_t)v18, &qword_100181840);
  sub_10000F394((uint64_t)v7, &qword_100181838);
  return sub_10000F394((uint64_t)v16, &qword_100181840);
}

uint64_t sub_100053B18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v40 = sub_10000AA4C(&qword_100181858);
  __chkstk_darwin(v40);
  int v44 = (uint64_t *)((char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for Text.TruncationMode();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  CGFloat v41 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000AA4C((uint64_t *)&unk_100185FF0);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AirDropDescriptionView() + 20));
  if (v9[1])
  {
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v10 = String.init(localized:table:bundle:locale:comment:)();
  }
  uint64_t v46 = v10;
  uint64_t v47 = v11;
  sub_100054CC0();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  sub_100054D14(v12, v14, v16);
  swift_bridgeObjectRelease();
  static Color.primary.getter();
  uint64_t v22 = Text.foregroundColor(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v38 = v27;
  swift_release();
  LOBYTE(v12) = v26 & 1;
  sub_100054D14(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = v41;
  uint64_t v30 = v42;
  uint64_t v31 = v43;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for Text.TruncationMode.tail(_:), v43);
  uint64_t v32 = swift_getKeyPath();
  os_log_type_t v33 = v44;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))((char *)v44 + *(int *)(v40 + 28), v29, v31);
  *os_log_type_t v33 = v32;
  sub_10000F330((uint64_t)v33, (uint64_t)&v6[*(int *)(v39 + 36)], &qword_100181858);
  *(void *)uint64_t v6 = v22;
  *((void *)v6 + 1) = v24;
  v6[16] = v12;
  *((void *)v6 + 3) = v38;
  *((void *)v6 + 4) = KeyPath;
  *((void *)v6 + 5) = 1;
  v6[48] = 0;
  sub_100055180(v22, v24, v12);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000F394((uint64_t)v33, &qword_100181858);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
  sub_100054D14(v22, v24, v12);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = static Alignment.leading.getter();
  sub_1000F9DC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v45, 0.0, 1, 0.0, 1, v34, v35);
  return sub_10000F394((uint64_t)v6, (uint64_t *)&unk_100185FF0);
}

uint64_t sub_100053FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  LODWORD(v97) = a3;
  uint64_t v94 = a2;
  uint64_t v98 = a1;
  uint64_t v101 = sub_10000AA4C(&qword_100181850);
  __chkstk_darwin(v101);
  uint64_t v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000AA4C(&qword_100181858);
  __chkstk_darwin(v86);
  uint64_t v92 = (uint64_t *)((char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Text.TruncationMode();
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v91 = v9;
  __chkstk_darwin(v9);
  uint64_t v88 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000AA4C((uint64_t *)&unk_100185FF0);
  __chkstk_darwin(v85);
  uint64_t v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000AA4C((uint64_t *)&unk_100185FE0);
  __chkstk_darwin(v87);
  uint64_t v93 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000AA4C(&qword_100181860);
  uint64_t v14 = __chkstk_darwin(v99);
  uint64_t v89 = (uint64_t)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v95 = (uint64_t)&v85 - v16;
  uint64_t v105 = sub_10000AA4C(&qword_100181868);
  __chkstk_darwin(v105);
  __int16 v100 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000AA4C(&qword_100181870);
  __chkstk_darwin(v103);
  uint64_t v104 = (uint64_t)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v4 + *(int *)(type metadata accessor for AirDropDescriptionView() + 24);
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *(void *)(v19 + 8);
  uint64_t v23 = *(void *)(v19 + 16);
  uint64_t v22 = *(void *)(v19 + 24);
  unsigned int v24 = *(unsigned __int8 *)(v19 + 32);
  uint64_t v102 = v7;
  switch(v24 >> 6)
  {
    case 1u:
    case 2u:
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_100054A6C(v21, v20);
      uint64_t v27 = v26;
      sub_100052B80(v21, v20, v23, v22, v24);
      uint64_t v21 = v25;
      uint64_t v20 = v27;
      goto LABEL_4;
    case 3u:
      uint64_t v84 = v20 | v21;
      uint64_t v20 = 0xE000000000000000;
      uint64_t v21 = 0;
      if (v84 | v23 | v22 || v24 != 192) {
        goto LABEL_4;
      }
      swift_storeEnumTagMultiPayload();
      sub_100054FB4();
      uint64_t result = _ConditionalContent<>.init(storage:)();
      break;
    default:
      swift_bridgeObjectRetain();
LABEL_4:
      uint64_t v96 = a4;
      *(void *)&long long v115 = v21;
      *((void *)&v115 + 1) = v20;
      if (v97)
      {
        sub_100054CC0();
        uint64_t v58 = Text.init<A>(_:)();
        uint64_t v60 = v59;
        char v62 = v61 & 1;
        uint64_t v63 = Text.font(_:)();
        uint64_t v65 = v64;
        char v67 = v66 & 1;
        sub_100054D14(v58, v60, v62);
        swift_bridgeObjectRelease();
        static Color.primary.getter();
        uint64_t v68 = Text.foregroundColor(_:)();
        uint64_t v70 = v69;
        char v72 = v71;
        uint64_t v74 = v73;
        swift_release();
        v72 &= 1u;
        sub_100054D14(v63, v65, v67);
        swift_bridgeObjectRelease();
        uint64_t v125 = v68;
        uint64_t v126 = v70;
        char v127 = v72;
        uint64_t v128 = v74;
        uint64_t v129 = 0x3FE0000000000000;
        static Alignment.leading.getter();
        sub_1000F9E7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v106, 0.0, 1, 0.0, 1);
        sub_100054D14(v68, v70, v72);
        swift_bridgeObjectRelease();
        long long v121 = v111;
        long long v122 = v112;
        long long v123 = v113;
        uint64_t v124 = v114;
        long long v75 = v107;
        long long v117 = v107;
        long long v118 = v108;
        long long v119 = v109;
        long long v120 = v110;
        long long v115 = v106[0];
        long long v116 = v106[1];
        long long v76 = v112;
        long long v77 = v113;
        uint64_t v78 = (uint64_t)v102;
        *((_OWORD *)v102 + 6) = v111;
        *(_OWORD *)(v78 + 112) = v76;
        *(_OWORD *)(v78 + 128) = v77;
        *(void *)(v78 + 144) = v124;
        long long v79 = v118;
        long long v80 = v119;
        *(_OWORD *)(v78 + 32) = v75;
        *(_OWORD *)(v78 + 48) = v79;
        long long v81 = v120;
        *(_OWORD *)(v78 + 64) = v80;
        *(_OWORD *)(v78 + 80) = v81;
        long long v82 = v116;
        *(_OWORD *)uint64_t v78 = v115;
        *(_OWORD *)(v78 + 16) = v82;
        *(_WORD *)(v78 + 152) = 256;
        swift_storeEnumTagMultiPayload();
        sub_10000AA4C(&qword_100181878);
        sub_100054D54(&qword_100181880, &qword_100181860, (void (*)(void))sub_100054D24);
        sub_100054D54(&qword_1001818C0, &qword_100181878, (void (*)(void))sub_100054F10);
        uint64_t v57 = (uint64_t)v100;
        _ConditionalContent<>.init(storage:)();
      }
      else
      {
        sub_100054CC0();
        uint64_t v28 = Text.init<A>(_:)();
        uint64_t v30 = v29;
        char v32 = v31 & 1;
        uint64_t v33 = Text.font(_:)();
        uint64_t v35 = v34;
        char v37 = v36 & 1;
        sub_100054D14(v28, v30, v32);
        swift_bridgeObjectRelease();
        static Color.primary.getter();
        uint64_t v38 = Text.foregroundColor(_:)();
        uint64_t v97 = v39;
        uint64_t v98 = v38;
        uint64_t v41 = v40;
        LOBYTE(v28) = v42;
        swift_release();
        char v43 = v28 & 1;
        sub_100054D14(v33, v35, v37);
        swift_bridgeObjectRelease();
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v46 = v90;
        uint64_t v45 = v91;
        uint64_t v47 = v88;
        (*(void (**)(char *, void, uint64_t))(v90 + 104))(v88, enum case for Text.TruncationMode.tail(_:), v91);
        uint64_t v48 = swift_getKeyPath();
        uint64_t v49 = v92;
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v92 + *(int *)(v86 + 28), v47, v45);
        *uint64_t v49 = v48;
        sub_10000F330((uint64_t)v49, (uint64_t)&v12[*(int *)(v85 + 36)], &qword_100181858);
        uint64_t v51 = v97;
        uint64_t v50 = v98;
        *(void *)uint64_t v12 = v98;
        *((void *)v12 + 1) = v41;
        v12[16] = v43;
        *((void *)v12 + 3) = v51;
        *((void *)v12 + 4) = KeyPath;
        *((void *)v12 + 5) = v94;
        v12[48] = 0;
        sub_100055180(v50, v41, v43);
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000F394((uint64_t)v49, &qword_100181858);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
        sub_100054D14(v98, v41, v43);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v52 = v93;
        sub_10000F330((uint64_t)v12, v93, (uint64_t *)&unk_100185FF0);
        *(void *)(v52 + *(int *)(v87 + 36)) = 0x3FE0000000000000;
        sub_10000F394((uint64_t)v12, (uint64_t *)&unk_100185FF0);
        uint64_t v53 = static Alignment.leading.getter();
        uint64_t v54 = v89;
        sub_1000F9E20(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v89, 0.0, 1, 0.0, 1, v53, v55);
        sub_10000F394(v52, (uint64_t *)&unk_100185FE0);
        uint64_t v56 = v95;
        sub_10000F2CC(v54, v95, &qword_100181860);
        sub_10000F330(v56, (uint64_t)v102, &qword_100181860);
        swift_storeEnumTagMultiPayload();
        sub_10000AA4C(&qword_100181878);
        sub_100054D54(&qword_100181880, &qword_100181860, (void (*)(void))sub_100054D24);
        sub_100054D54(&qword_1001818C0, &qword_100181878, (void (*)(void))sub_100054F10);
        uint64_t v57 = (uint64_t)v100;
        _ConditionalContent<>.init(storage:)();
        sub_10000F394(v56, &qword_100181860);
      }
      sub_10000F330(v57, v104, &qword_100181868);
      swift_storeEnumTagMultiPayload();
      sub_100054FB4();
      _ConditionalContent<>.init(storage:)();
      uint64_t result = sub_10000F394(v57, &qword_100181868);
      break;
  }
  return result;
}

uint64_t sub_100054A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  if (a2)
  {
    uint64_t v6 = a2;
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    a1 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v6 = v7;
  }
  sub_10000AA4C(&qword_1001837B0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10012A270;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_100055190();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100054C78@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = sub_10000AA4C(&qword_100181830);
  return sub_100053888(v1, a1 + *(int *)(v3 + 44));
}

unint64_t sub_100054CC0()
{
  unint64_t result = qword_100184CE0;
  if (!qword_100184CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100184CE0);
  }
  return result;
}

uint64_t sub_100054D14(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100054D24()
{
  return sub_100054D54(&qword_100181888, (uint64_t *)&unk_100185FE0, (void (*)(void))sub_100054DD0);
}

uint64_t sub_100054D54(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100054DD0()
{
  unint64_t result = qword_100181890;
  if (!qword_100181890)
  {
    sub_10000B100((uint64_t *)&unk_100185FF0);
    sub_100054E70();
    sub_10000F288(&qword_1001818B8, &qword_100181858);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181890);
  }
  return result;
}

unint64_t sub_100054E70()
{
  unint64_t result = qword_100181898;
  if (!qword_100181898)
  {
    sub_10000B100(&qword_1001818A0);
    sub_10000F288(&qword_1001818A8, &qword_1001818B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181898);
  }
  return result;
}

uint64_t sub_100054F10()
{
  return sub_100054D54(&qword_1001818C8, &qword_1001818D0, (void (*)(void))sub_100054F40);
}

unint64_t sub_100054F40()
{
  unint64_t result = qword_1001818D8;
  if (!qword_1001818D8)
  {
    sub_10000B100(&qword_1001818E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001818D8);
  }
  return result;
}

unint64_t sub_100054FB4()
{
  unint64_t result = qword_1001818E8;
  if (!qword_1001818E8)
  {
    sub_10000B100(&qword_100181868);
    sub_100054D54(&qword_100181880, &qword_100181860, (void (*)(void))sub_100054D24);
    sub_100054D54(&qword_1001818C0, &qword_100181878, (void (*)(void))sub_100054F10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001818E8);
  }
  return result;
}

uint64_t sub_100055090()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_1000550B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Text.TruncationMode();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.truncationMode.setter();
}

uint64_t sub_100055180(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_100055190()
{
  unint64_t result = qword_1001850A0;
  if (!qword_1001850A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001850A0);
  }
  return result;
}

uint64_t sub_1000551E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirDropDescriptionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055248(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirDropDescriptionView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000552A4()
{
  return sub_10000F288(&qword_1001818F0, &qword_1001818F8);
}

uint64_t sub_1000552E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AirDropProgressView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AirDropProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropProgressView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirDropProgressView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropProgressView()
{
  return &type metadata for AirDropProgressView;
}

uint64_t sub_10005544C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100055468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000AA4C(&qword_100181900);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (qword_10017F690 != -1) {
      swift_once();
    }
    uint64_t v11 = &xmmword_10018CF10;
  }
  else
  {
    if (qword_10017F698 != -1) {
      swift_once();
    }
    uint64_t v11 = &xmmword_10018CF30;
  }
  uint64_t v13 = *((void *)v11 + 2);
  uint64_t v12 = *((void *)v11 + 3);
  uint64_t v15 = *(void *)v11;
  uint64_t v14 = *((void *)v11 + 1);
  uint64_t v16 = static VerticalAlignment.center.getter();
  if (qword_10017F6E0 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_10018CF90;
  *(void *)uint64_t v10 = v16;
  *((void *)v10 + 1) = v17;
  unsigned char v10[16] = 0;
  uint64_t v18 = sub_10000AA4C(&qword_100181908);
  sub_10005563C(a1, a2, a3 & 1, &v10[*(int *)(v18 + 44)]);
  char v19 = static Edge.Set.all.getter();
  sub_10000F330((uint64_t)v10, a4, &qword_100181900);
  uint64_t v20 = a4 + *(int *)(sub_10000AA4C(&qword_100181910) + 36);
  *(unsigned char *)uint64_t v20 = v19;
  *(void *)(v20 + 8) = v15;
  *(void *)(v20 + 16) = v14;
  *(void *)(v20 + 24) = v13;
  *(void *)(v20 + 32) = v12;
  *(unsigned char *)(v20 + 40) = 0;
  return sub_10000F394((uint64_t)v10, &qword_100181900);
}

void sub_10005563C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v58 = a1;
  uint64_t v59 = a4;
  uint64_t v5 = sub_10000AA4C(&qword_100181918);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v64 = (uint64_t)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v52 - v8;
  uint64_t v10 = type metadata accessor for DeviceLockState();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v52 - v15;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v17 = enum case for DeviceLockState.unlocked(_:);
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v60(v14, enum case for DeviceLockState.unlocked(_:), v10);
  char v18 = static DeviceLockState.== infix(_:_:)();
  char v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  uint64_t v57 = v19;
  v19(v16, v10);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (v18)
  {
    type metadata accessor for AirDropTransferSession();
    sub_100056D9C();
    swift_retain();
    uint64_t v20 = ObservedObject.init(wrappedValue:)();
    uint64_t v22 = v61 & 1;
    uint64_t v23 = 2;
  }
  uint64_t v65 = v23;
  uint64_t v66 = v21;
  uint64_t v62 = v22;
  uint64_t v67 = v20;
  *(void *)uint64_t v9 = static HorizontalAlignment.leading.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 0;
  uint64_t v24 = *(int *)(sub_10000AA4C(&qword_100181920) + 44);
  uint64_t v63 = v9;
  LODWORD(v56) = v61 & 1;
  sub_100055CF0(v58, a2, v61 & 1, (uint64_t)&v9[v24]);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v60(v14, v17, v10);
  char v25 = static DeviceLockState.== infix(_:_:)();
  uint64_t v26 = v57;
  v57(v14, v10);
  v26(v16, v10);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v60 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (v25)
  {
    if (sub_1000566E4())
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v60 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
    }
    else
    {
      type metadata accessor for AirDropTransferSession();
      sub_100056D9C();
      swift_retain();
      uint64_t v27 = ObservedObject.init(wrappedValue:)();
      uint64_t v28 = v37;
      sub_100056DF4();
      if (qword_10017F750 != -1) {
        swift_once();
      }
      swift_retain();
      uint64_t v60 = (void (*)(char *, uint64_t, uint64_t))UIColor.init(_:)();
      char v38 = v61;
      if (qword_10017F600 != -1) {
        swift_once();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v30 = v68;
      if (qword_10017F6D8 != -1) {
        swift_once();
      }
      static Alignment.trailing.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v31 = v68;
      unint64_t v32 = v69;
      uint64_t v33 = v70;
      uint64_t v34 = v71;
      uint64_t v29 = v38 & 1;
      uint64_t v35 = v72;
      uint64_t v36 = v73;
    }
  }
  uint64_t v55 = v31;
  uint64_t v56 = v35;
  uint64_t v57 = (void (*)(char *, uint64_t))v32;
  uint64_t v58 = v33;
  uint64_t v61 = v34;
  uint64_t v39 = v64;
  uint64_t v40 = v36;
  v52[1] = v36;
  sub_10000F330((uint64_t)v63, v64, &qword_100181918);
  uint64_t v41 = v59;
  uint64_t v53 = v28;
  uint64_t v54 = v30;
  uint64_t v42 = v66;
  *uint64_t v59 = v67;
  v41[1] = v42;
  uint64_t v43 = v30;
  uint64_t v44 = v62;
  uint64_t v41[2] = v62;
  v41[3] = 0;
  v41[4] = v65;
  *((unsigned char *)v41 + 40) = 0;
  uint64_t v45 = sub_10000AA4C(&qword_100181928);
  sub_10000F330(v39, (uint64_t)v41 + *(int *)(v45 + 48), &qword_100181918);
  uint64_t v46 = (void *)((char *)v41 + *(int *)(v45 + 64));
  *uint64_t v46 = v27;
  v46[1] = v28;
  uint64_t v47 = v60;
  v46[2] = v29;
  v46[3] = (uint64_t)v47;
  uint64_t v49 = v55;
  uint64_t v48 = v56;
  v46[4] = v43;
  v46[5] = v49;
  uint64_t v50 = v58;
  v46[6] = (uint64_t)v57;
  v46[7] = v50;
  v46[8] = v61;
  v46[9] = v48;
  v46[10] = v40;
  sub_100056C4C(v67, v66, v44, 0, v65);
  uint64_t v51 = v53;
  sub_100056CB0(v27, v53, v29, v47);
  sub_10000F394((uint64_t)v63, &qword_100181918);
  sub_100056CF4(v27, v51, v29, v47);
  sub_10000F394(v64, &qword_100181918);
  sub_100056D38(v67, v66, v62, 0, v65);
}

uint64_t sub_100055CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v6 = type metadata accessor for Font.TextStyle();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v19 = (char *)&v37 - v18;
  uint64_t v48 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = a3;
  if (a3)
  {
    if (qword_10017F670 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    uint64_t v48 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v20 = v50;
    uint64_t v21 = v51;
    uint64_t v22 = v52;
    uint64_t v23 = v53;
    uint64_t v24 = v54;
    uint64_t v25 = v55;
  }
  uint64_t v38 = v21;
  uint64_t v39 = v22;
  uint64_t v40 = v23;
  uint64_t v41 = v24;
  uint64_t v42 = v20;
  uint64_t v43 = v25;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v27 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v29 = v28;
  sub_10005617C(v45, (uint64_t)v56);
  uint64_t v49 = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v8, enum case for Font.TextStyle.subheadline(_:), v47);
  sub_100053610();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v30 = (uint64_t *)&v13[*(int *)(v11 + 20)];
  *uint64_t v30 = v27;
  v30[1] = v29;
  sub_100056E4C((uint64_t)v56, (uint64_t)&v13[*(int *)(v11 + 24)]);
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, 0.0, 1);
  sub_100055248((uint64_t)v13);
  sub_100056EA8((uint64_t)v17, (uint64_t)v19);
  sub_10000F330((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_100185E30);
  uint64_t v31 = v48;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v31;
  uint64_t v32 = v38;
  *(void *)(a4 + 16) = v42;
  *(void *)(a4 + 24) = v32;
  uint64_t v33 = v40;
  *(void *)(a4 + 32) = v39;
  *(void *)(a4 + 40) = v33;
  uint64_t v34 = v43;
  *(void *)(a4 + 48) = v41;
  *(void *)(a4 + 56) = v34;
  *(unsigned char *)(a4 + 64) = (v26 & 1) == 0;
  uint64_t v35 = sub_10000AA4C(&qword_100181948);
  sub_10000F330((uint64_t)v17, a4 + *(int *)(v35 + 48), (uint64_t *)&unk_100185E30);
  sub_10000F394((uint64_t)v19, (uint64_t *)&unk_100185E30);
  return sub_10000F394((uint64_t)v17, (uint64_t *)&unk_100185E30);
}

uint64_t sub_10005617C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v37 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - v14;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v29(v15, v8, v9);
    v29(v13, v15, v9);
    if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v13, v9) == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      swift_bridgeObjectRelease();
      uint64_t v30 = (int *)sub_10000AA4C(&qword_1001805A8);
      uint64_t v31 = &v13[v30[12]];
      uint64_t v32 = &v13[v30[16]];
      uint64_t v20 = *(void *)v32;
      uint64_t v21 = *((void *)v32 + 1);
      uint64_t v33 = &v13[v30[20]];
      uint64_t v34 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
      uint64_t v35 = type metadata accessor for SFAirDrop.Progress();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v31, v35);
      uint64_t v36 = v38;
      if (v21)
      {
        char v27 = 0;
        uint64_t v28 = 1;
        goto LABEL_11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      uint64_t v36 = v38;
    }
    uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
    uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    char v27 = 0x80;
    goto LABEL_11;
  }
  sub_10000F394((uint64_t)v8, &qword_100181400);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v16 = v37;
  if ((*(unsigned int (**)(char *, uint64_t))(v37 + 88))(v5, v3) == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v16 + 96))(v5, v3);
    uint64_t v17 = (int *)sub_10000AA4C((uint64_t *)&unk_1001827A0);
    uint64_t v18 = &v5[v17[12]];
    char v19 = &v5[v17[16]];
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *((void *)v19 + 1);
    uint64_t v22 = &v5[v17[20]];
    uint64_t v23 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
    uint64_t v24 = type metadata accessor for SFAirDrop.Progress();
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v18, v24);
    uint64_t v25 = type metadata accessor for SFAirDropReceive.ItemDestination();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v5, v25);
    char v27 = 0;
    uint64_t v28 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v3);
    uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
    uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    char v27 = 64;
  }
  uint64_t v36 = v38;
LABEL_11:
  *(void *)uint64_t v36 = v20;
  *(void *)(v36 + 8) = v21;
  *(void *)(v36 + 16) = 0;
  *(void *)(v36 + 24) = v28;
  *(unsigned char *)(v36 + 32) = v27;
  return result;
}

uint64_t sub_1000566E4()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v25 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000F394((uint64_t)v5, &qword_100181400);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v13 = v25;
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v2, v0);
    if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:)) {
      goto LABEL_10;
    }
    int v15 = v14;
    if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v13 + 96))(v2, v0);
      uint64_t v16 = &v2[*(int *)(sub_10000AA4C(&qword_1001806F0) + 48)];
      uint64_t v17 = sub_10000AA4C((uint64_t *)&unk_1001827B0);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      uint64_t v18 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_12:
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v2, v18);
      return 1;
    }
    if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
    {
LABEL_10:
      (*(void (**)(char *, uint64_t))(v13 + 96))(v2, v0);
      uint64_t v22 = &qword_100181490;
      goto LABEL_11;
    }
    uint64_t result = 1;
    if (v15 != enum case for SFAirDropReceive.Transfer.State.created(_:)
      && v15 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
      && v15 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v2, v0);
      return 0;
    }
  }
  else
  {
    char v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v19(v12, v5, v6);
    v19(v10, v12, v6);
    int v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
    if (v20 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
      swift_bridgeObjectRelease();
      unint64_t v2 = &v10[*(int *)(sub_10000AA4C(&qword_100181940) + 64)];
      uint64_t v18 = type metadata accessor for SFAirDrop.DeclineAction();
      goto LABEL_12;
    }
    int v21 = v20;
    if (v20 == enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
      swift_bridgeObjectRelease();
      unint64_t v2 = &v10[*(int *)(sub_10000AA4C(&qword_100181938) + 48)];
      uint64_t v22 = (uint64_t *)&unk_1001827C0;
LABEL_11:
      uint64_t v18 = sub_10000AA4C(v22);
      goto LABEL_12;
    }
    uint64_t result = 1;
    if (v21 != enum case for SFAirDropSend.Transfer.State.created(_:)
      && v21 != enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100056C38@<X0>(uint64_t a1@<X8>)
{
  return sub_100055468(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

void sub_100056C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_retain();
    sub_100056C98(a4, a5);
  }
}

uint64_t sub_100056C98(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100056CB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_retain();
    id v4 = a4;
  }
}

void sub_100056CF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_release();
  }
}

void sub_100056D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_release();
    sub_100056D84(a4, a5);
  }
}

uint64_t sub_100056D84(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100056D9C()
{
  unint64_t result = qword_100180BD0;
  if (!qword_100180BD0)
  {
    type metadata accessor for AirDropTransferSession();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180BD0);
  }
  return result;
}

unint64_t sub_100056DF4()
{
  unint64_t result = qword_100181930;
  if (!qword_100181930)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100181930);
  }
  return result;
}

uint64_t sub_100056E4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100056EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100056F14()
{
  unint64_t result = qword_100181950;
  if (!qword_100181950)
  {
    sub_10000B100(&qword_100181910);
    sub_100056F90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181950);
  }
  return result;
}

unint64_t sub_100056F90()
{
  unint64_t result = qword_100181958;
  if (!qword_100181958)
  {
    sub_10000B100(&qword_100181900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100181958);
  }
  return result;
}

uint64_t sub_100056FEC()
{
  return sub_1000571DC();
}

uint64_t sub_100057000()
{
  return sub_1000571DC();
}

uint64_t sub_100057014()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10005708C()
{
  return sub_1000570C8();
}

uint64_t sub_1000570A0()
{
  return sub_1000570C8();
}

uint64_t sub_1000570B4()
{
  return sub_1000570C8();
}

uint64_t sub_1000570C8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

double sub_100057134@<D0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 96) = v9;
  return result;
}

uint64_t sub_1000571C8()
{
  return sub_1000571DC();
}

uint64_t sub_1000571DC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

void (*sub_10005724C())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  if (v2)
  {
    long long v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v0
                                                                                    + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback);
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = *v1;
    long long v3 = sub_1000627EC;
    *uint64_t v1 = (uint64_t)sub_1000627EC;
    v1[1] = v4;
    swift_retain();
    sub_100030180(v5);
  }
  sub_100030254(v2);
  return v3;
}

void sub_100057308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    long long v8 = (void *)Strong;
    swift_getKeyPath();
    swift_getKeyPath();
    id v11 = a6;
    id v9 = a6;
    id v10 = v8;
    static Published.subscript.setter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v11)
    {
      [v11 setShareOptions:v9];
      swift_unknownObjectRelease();
    }
  }
}

void sub_10005741C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ShockwaveAnimationCoordinator();
  sub_10005E9E8(&qword_100181CC8, (void (*)(uint64_t))&type metadata accessor for ShockwaveAnimationCoordinator);
  v11[1] = ObservableObject<>.objectWillChange.getter();
  type metadata accessor for NearbySharingInteractionViewModel(0);
  sub_10005E9E8(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
  uint64_t v5 = ObservableObject<>.objectWillChange.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = j___s7Combine25ObservableObjectPublisherC4sendyyF;
  *(void *)(v6 + 24) = v5;
  type metadata accessor for ObservableObjectPublisher();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  type metadata accessor for MainActor();
  id v8 = v1;
  uint64_t v9 = static MainActor.shared.getter();
  id v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v8;
  sub_1000F0F68((uint64_t)v4, (uint64_t)&unk_100181CE0, (uint64_t)v10);
  swift_release();
  sub_1000598A0();
}

id sub_10005769C()
{
  if (*(void *)&v0[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask])
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySharingInteractionViewModel(0);
  return [super dealloc];
}

uint64_t sub_100057AE8()
{
  return type metadata accessor for NearbySharingInteractionViewModel(0);
}

uint64_t type metadata accessor for NearbySharingInteractionViewModel(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100181AB0);
}

void sub_100057B10(uint64_t a1)
{
  uint64_t v86 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v78 = *(void **)(v86 - 8);
  __chkstk_darwin(v86);
  os_log_type_t v83 = &v68[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v5 = &v68[-v4];
  long long v80 = (void *)type metadata accessor for UUID();
  uint64_t v72 = *(v80 - 1);
  __chkstk_darwin(v80);
  uint64_t v7 = &v68[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v76 = &v68[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  long long v77 = &v68[-v12];
  __chkstk_darwin(v13);
  uint64_t v74 = &v68[-v14];
  __chkstk_darwin(v15);
  uint64_t v17 = &v68[-v16];
  __chkstk_darwin(v18);
  int v20 = &v68[-v19];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_10000B150(v21, (uint64_t)qword_10018D128);
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
  v23(v20, a1, v8);
  long long v81 = v23;
  uint64_t v82 = v9 + 16;
  v23(v17, a1, v8);
  uint64_t v73 = v22;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  BOOL v27 = os_log_type_enabled(v24, v25);
  uint64_t v87 = v5;
  uint64_t v84 = v9;
  uint64_t v85 = v8;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    os_log_t v70 = v24;
    uint64_t v29 = v28;
    os_log_t v71 = (os_log_t)swift_slowAlloc();
    v89[0] = (uint64_t)v71;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v75 = a1;
    int v69 = v26;
    SFNearbySharingInteraction.id.getter();
    sub_10005E9E8((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = v80;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = v9;
    unint64_t v34 = v33;
    (*(void (**)(unsigned char *, void *))(v72 + 8))(v7, v30);
    uint64_t v88 = sub_100047F98(v31, v34, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void **)(v32 + 8);
    ((void (*)(unsigned char *, uint64_t))v35)(v20, v8);
    *(_WORD *)(v29 + 12) = 2080;
    long long v80 = (void *)(v29 + 14);
    SFNearbySharingInteraction.state.getter();
    sub_10005E9E8((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
    uint64_t v36 = v86;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v39 = v38;
    uint64_t v40 = v78;
    ((void (*)(unsigned char *, uint64_t))v78[1])(v87, v36);
    uint64_t v88 = sub_100047F98(v37, v39, v89);
    uint64_t v5 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v80 = v35;
    ((void (*)(unsigned char *, uint64_t))v35)(v17, v8);
    a1 = v75;
    os_log_t v41 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "Updating nearby sharing interaction ID: %s with state: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v42 = *(void **)(v9 + 8);
    ((void (*)(unsigned char *, uint64_t))v42)(v20, v8);
    long long v80 = v42;
    ((void (*)(unsigned char *, uint64_t))v42)(v17, v8);

    uint64_t v36 = v86;
    uint64_t v40 = v78;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v43 = v5;
  uint64_t v44 = v79;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v45 = v83;
  SFNearbySharingInteraction.state.getter();
  char v46 = static SFAirDrop.NearbySharingInteraction.State.< infix(_:_:)();
  uint64_t v47 = (void (*)(unsigned char *, uint64_t))v40[1];
  v47(v45, v36);
  v47(v43, v36);
  if (v46)
  {
    uint64_t v48 = v74;
    uint64_t v49 = v85;
    v81(v74, a1, v85);
    uint64_t v78 = v44;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      v89[0] = v73;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v75 = a1;
      LODWORD(v72) = v52;
      uint64_t v54 = v87;
      os_log_t v71 = v50;
      SFNearbySharingInteraction.state.getter();
      sub_10005E9E8((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v57 = v56;
      v47(v54, v86);
      uint64_t v88 = sub_100047F98(v55, v57, v89);
      os_log_t v70 = (os_log_t)v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, uint64_t))v80)(v48, v85);
      *(_WORD *)(v53 + 12) = 2080;
      swift_getKeyPath();
      swift_getKeyPath();
      id v58 = v78;
      static Published.subscript.getter();
      a1 = v75;
      swift_release();
      swift_release();
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v61 = v60;
      v47(v54, v86);
      uint64_t v88 = sub_100047F98(v59, v61, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v36 = v86;
      swift_bridgeObjectRelease();

      os_log_t v62 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v72, "Nearby sharing interaction new state < previousState: %s < %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v44 = v79;
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(unsigned char *, uint64_t))v80)(v48, v49);
      id v63 = v78;

      uint64_t v54 = v87;
    }
    SFNearbySharingInteraction.state.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v40[2])(v83, v54, v36);
    uint64_t v64 = v78;
    static Published.subscript.setter();
    v47(v54, v36);
  }
  uint64_t v65 = v77;
  uint64_t v66 = v85;
  uint64_t v67 = (void (*)(unsigned char *, unsigned char *, uint64_t))v81;
  v81(v77, a1, v85);
  swift_getKeyPath();
  swift_getKeyPath();
  v67(v76, v65, v66);
  v44;
  static Published.subscript.setter();
  ((void (*)(unsigned char *, uint64_t))v80)(v65, v66);
  dispatch thunk of ShockwaveAnimationCoordinator.update(using:)();
  sub_1000598A0();
}

uint64_t sub_100058548()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v9 = *(void (**)(void))(v3 + 104);
  unsigned int v29 = enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:);
  uint64_t v28 = (void (*)(char *, void, uint64_t))v9;
  v9(v6);
  sub_10005E9E8((unint64_t *)&unk_100181CB8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
  if ((v10 & 1) == 0)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B150(v13, (uint64_t)qword_10018D128);
    id v14 = v1;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v27 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      int v26 = v15;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v24 = v18;
      os_log_type_t v25 = v11;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v31 = v18;
      uint64_t v22 = v17 + 4;
      uint64_t v23 = v17;
      type metadata accessor for UUID();
      sub_10005E9E8((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_100047F98(v19, v20, &v31);
      uint64_t v11 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "Ending interaction with ID: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    dispatch thunk of ShockwaveAnimationCoordinator.stopIfNecessary()();
    v28(v8, v29, v2);
    swift_getKeyPath();
    swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    id v21 = v14;
    static Published.subscript.setter();
    return ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
  }
  return result;
}

uint64_t sub_100058990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[49] = a4;
  sub_10000AA4C(&qword_100181540);
  v4[50] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[51] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[52] = v6;
  v4[53] = v5;
  return _swift_task_switch(sub_100058A58, v6, v5);
}

uint64_t sub_100058A58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100058B04;
  return sub_1000A0528(v0 + 16, 2);
}

uint64_t sub_100058B04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 424);
  uint64_t v4 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v5 = sub_1000595D0;
  }
  else {
    uint64_t v5 = sub_100058C40;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100058C40()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v24 = v0 + 112;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = (long long *)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 392);
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_10018D128);
  sub_10000F330(v0 + 16, v0 + 64, &qword_100181AD8);
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void **)(v0 + 392);
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_10000F330(v0 + 64, v0 + 304, &qword_100181AD8);
    sub_10000AA4C(&qword_100181AD8);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 376) = sub_100047F98(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v1 = v0 + 16;
    sub_10000F394(v0 + 64, &qword_100181AD8);
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10005E9E8((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 384) = sub_100047F98(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Suggesting content to be be shared with the nearby interaction: %s for interaction ID: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = (long long *)(v0 + 256);
    swift_slowDealloc();
  }
  else
  {
    sub_10000F394(v0 + 64, &qword_100181AD8);
  }
  uint64_t v15 = *(void **)(v0 + 392);
  sub_10000F330(v1, v24, &qword_100181AD8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330(v24, v0 + 160, &qword_100181AD8);
  id v16 = v15;
  static Published.subscript.setter();
  sub_10000F394(v24, &qword_100181AD8);
  sub_10000F330(v1, (uint64_t)v2, &qword_100181AD8);
  if (*(void *)(v0 + 280))
  {
    long long v17 = v2[2];
    long long v18 = *v2;
    *(_OWORD *)(v0 + 224) = v2[1];
    *(_OWORD *)(v0 + 240) = v17;
    *(_OWORD *)(v0 + 208) = v18;
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 240);
    sub_100062710(v0 + 208, v20);
    id v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v21;
    *id v21 = v0;
    v21[1] = sub_1000590A4;
    return sub_10009453C(v20, v19);
  }
  else
  {
    sub_10000F394(v1, &qword_100181AD8);
    swift_release();
    sub_10000F394((uint64_t)v2, &qword_100181AD8);
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_1000590A4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 424);
  uint64_t v4 = *(void *)(v2 + 416);
  return _swift_task_switch(sub_1000591CC, v4, v3);
}

void sub_1000591CC()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void **)(v0 + 392);
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 368) = v1;
  id v4 = v3;
  static Published.subscript.setter();
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  sub_10000AB54((void *)(v0 + 208), v5);
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6);
  sub_10005963C(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  id v10 = v4;
  v11.super.CFDataRef isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v2, 1, v8);
  unint64_t v14 = 0;
  if (v12 != 1)
  {
    uint64_t v15 = *(void *)(v0 + 400);
    URL._bridgeToObjectiveC()(v13);
    unint64_t v14 = v16;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v8);
  }
  long long v17 = *(char **)(v0 + 392);
  id v18 = [objc_allocWithZone((Class)SFCollaborationItemsProvider) initWithActivityItems:v11.super.isa delegate:v17 managedFileURL:v14 isURLProviderSupported:0];

  uint64_t v19 = OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider;
  uint64_t v20 = *(void **)&v17[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider];
  *(void *)&v17[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider] = v18;

  id v21 = [objc_allocWithZone((Class)type metadata accessor for PlaceholderSFCollaborationService()) init];
  uint64_t v22 = *(void **)&v17[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService];
  *(void *)&v17[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService] = v21;

  uint64_t v23 = *(void **)&v17[v19];
  if (!v23)
  {
    id v24 = 0;
    goto LABEL_12;
  }
  id v24 = [v23 collaborationItems];
  if (v24)
  {
    sub_10000AA4C(&qword_100181CF0);
    unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      id v24 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24)
      {
LABEL_7:
        if ((v25 & 0xC000000000000001) != 0)
        {
          id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v24 = *(id *)(v25 + 32);
          swift_unknownObjectRetain();
        }
      }
    }
    else
    {
      id v24 = *(id *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v24) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_12:
  uint64_t v26 = *(void **)(v0 + 392);
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 352) = v24;
  id v27 = v26;
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 360))
  {
    [*(id *)(v0 + 360) registerChangeObserver:*(void *)(v0 + 392)];
    swift_unknownObjectRelease();
  }
  sub_10000F394(v0 + 16, &qword_100181AD8);
  sub_1000608FC(v0 + 208);
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_1000595D0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005963C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100016274(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10001FB40(0, (unint64_t *)&unk_100181CF8);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100016274(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_100016274(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_1000627DC(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_10001FB40(0, (unint64_t *)&unk_100181CF8);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100016274(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_100016274(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000627DC(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void sub_1000598A0()
{
  uint64_t v1 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v102 = (uint64_t)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000AA4C((uint64_t *)&unk_100181C90);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v96 = (uint8_t **)((char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v99 = sub_10000AA4C(&qword_1001829F0);
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  __int16 v100 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v4;
  __chkstk_darwin(v5);
  uint64_t v101 = (char *)&v89 - v6;
  uint64_t v7 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v108 = *(void *)(v7 - 8);
  uint64_t v109 = v7;
  __chkstk_darwin(v7);
  long long v107 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v105 = *(void *)(v9 - 8);
  uint64_t v106 = v9;
  __chkstk_darwin(v9);
  uint64_t v104 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v110 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  long long v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v89 - v19;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_10000B150(v21, (uint64_t)qword_10018D128);
  uint64_t v23 = v0;
  long long v111 = (char *)v22;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    int v92 = v26;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v93 = v12;
    uint64_t v28 = v11;
    uint64_t v29 = (uint8_t *)v27;
    uint64_t v91 = swift_slowAlloc();
    uint64_t v113 = v91;
    uint64_t v90 = v29;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v89 = v29 + 4;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v103 = v28;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10005E9E8((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    long long v112 = (void *)sub_100047F98(v30, v32, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = v103;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v92, "resolveContactDetailsIfNecessary: state: %s", v90, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v93;
    swift_slowDealloc();
  }
  else
  {
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v17, v14) != enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v15 + 96))(v17, v14);
  unint64_t v33 = v110;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v110, v17, v11);
  uint64_t v34 = OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask;
  if (*(void *)&v23[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask])
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
LABEL_10:
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Can not resolve remote person details without a connectionContext or a non-nil contactDetailsResolvingTask", v37, 2u);
      swift_slowDealloc();
    }

    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v38 = v104;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v39 = v107;
  SFNearbySharingInteraction.interactionType.getter();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v38, v106);
  uint64_t v41 = v108;
  uint64_t v40 = v109;
  int v42 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v39, v109);
  if (v42 != enum case for SFNearbySharingInteraction.InteractionType.connect(_:))
  {
    if (v42 != enum case for SFNearbySharingInteraction.InteractionType.handoff(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
      return;
    }
    uint64_t v62 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceName.getter();
    if (v63)
    {
      uint64_t v64 = v62;
      uint64_t v65 = v63;
      uint64_t v66 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceModel.getter();
      if (v67)
      {
        uint64_t v68 = v66;
        uint64_t v69 = v67;
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v113 = v64;
        uint64_t v114 = v65;
        uint64_t v115 = v68;
        uint64_t v116 = v69;
        long long v117 = &_swiftEmptySetSingleton;
        long long v118 = 0u;
        long long v119 = 0u;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        unint64_t v120 = 0x8000000000000000;
        int v123 = 0;
        os_log_t v70 = v23;
        static Published.subscript.setter();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
        return;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v84, v85)) {
      goto LABEL_32;
    }
    uint64_t v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v86 = 0;
    uint64_t v87 = "Can not resolve remote person details without a device name and model";
    goto LABEL_31;
  }
  uint64_t v43 = SFAirDrop.NearbySharingInteraction.ConnectionContext.contactIdentifier.getter();
  if (v44)
  {
    uint64_t v45 = v43;
    char v46 = v44;
    uint64_t v47 = v96;
    *uint64_t v96 = 1;
    uint64_t v48 = (*(uint64_t (**)(void *, void, uint64_t))(v94 + 104))(v47, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v95);
    uint64_t v103 = v11;
    __chkstk_darwin(v48);
    *(&v89 - 4) = v49;
    *(&v89 - 3) = (uint8_t *)v45;
    *(&v89 - 2) = v46;
    *(&v89 - 1) = v50;
    swift_retain();
    os_log_type_t v51 = v101;
    AsyncStream.init(_:bufferingPolicy:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v52 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v102, 1, 1, v52);
    uint64_t v53 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v54 = v98;
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
    long long v111 = v23;
    uint64_t v56 = v99;
    v55(v100, v51, v99);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v57 = static MainActor.shared.getter();
    unint64_t v58 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    unint64_t v59 = (v97 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = v57;
    *(void *)(v60 + 24) = &protocol witness table for MainActor;
    (*(void (**)(unint64_t, char *, uint64_t))(v54 + 32))(v60 + v58, v100, v56);
    *(void *)(v60 + v59) = v53;
    swift_release();
    uint64_t v61 = sub_10010C15C(v102, (uint64_t)&unk_100181CA8, v60);
    *(void *)&v111[v34] = v61;
    swift_release();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v101, v56);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v103);
    return;
  }
  uint64_t v71 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceName.getter();
  if (!v72)
  {
LABEL_29:
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v84, v85))
    {
LABEL_32:

      (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
      return;
    }
    uint64_t v86 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v86 = 0;
    uint64_t v87 = "Can not resolve remote person details without a provided contact identifier or device model and identifier, is"
          " this a boop to meet?";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v84, v85, v87, v86, 2u);
    swift_slowDealloc();
    goto LABEL_32;
  }
  uint64_t v73 = v71;
  uint64_t v74 = v72;
  uint64_t v75 = SFAirDrop.NearbySharingInteraction.ConnectionContext.deviceModel.getter();
  if (!v76)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  uint64_t v77 = v75;
  uint64_t v78 = v76;
  long long v79 = v23;
  uint64_t v80 = v12;
  long long v81 = &_swiftEmptySetSingleton;
  long long v112 = &_swiftEmptySetSingleton;
  Swift::Int v82 = SFAirDrop.NearbySharingInteraction.ConnectionContext.accountID.getter();
  if (v83)
  {
    sub_100099C6C((uint64_t)&v113, v82, v83, 0);
    swift_bridgeObjectRelease();
    long long v81 = v112;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v113 = v73;
  uint64_t v114 = v74;
  uint64_t v115 = v77;
  uint64_t v116 = v78;
  long long v117 = v81;
  long long v118 = 0u;
  long long v119 = 0u;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  unint64_t v120 = 0x4000000000000000;
  int v123 = 0;
  id v88 = v79;
  static Published.subscript.setter();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v110, v11);
}

uint64_t sub_10005A674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[31] = a4;
  v5[32] = a5;
  uint64_t v6 = sub_10000AA4C(&qword_100181CB0);
  v5[33] = v6;
  v5[34] = *(void *)(v6 - 8);
  v5[35] = swift_task_alloc();
  v5[36] = type metadata accessor for MainActor();
  v5[37] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[38] = v8;
  v5[39] = v7;
  return _swift_task_switch(sub_10005A770, v8, v7);
}

uint64_t sub_10005A770()
{
  sub_10000AA4C(&qword_1001829F0);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = static MainActor.shared.getter();
  v0[40] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[41] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10005A878;
  uint64_t v3 = v0[33];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v1, &protocol witness table for MainActor, v3);
}

uint64_t sub_10005A878()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 312);
  uint64_t v3 = *(void *)(v1 + 304);
  return _swift_task_switch(sub_10005A9BC, v3, v2);
}

uint64_t sub_10005A9BC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 104);
    int v7 = *(_DWORD *)(v0 + 112);
    if (swift_unknownObjectWeakLoadStrong())
    {
      swift_getKeyPath();
      swift_getKeyPath();
      *(void *)(v0 + 120) = v2;
      *(void *)(v0 + 128) = v1;
      *(void *)(v0 + 136) = v13;
      *(void *)(v0 + 144) = v14;
      *(void *)(v0 + 152) = v15;
      *(void *)(v0 + 160) = v16;
      *(void *)(v0 + 168) = v17;
      *(void *)(v0 + 176) = v18;
      *(void *)(v0 + 184) = v3;
      *(void *)(v0 + 192) = v5;
      *(void *)(v0 + 200) = v4;
      *(void *)(v0 + 208) = v6;
      *(_DWORD *)(v0 + 216) = v7;
      static Published.subscript.setter();
    }
    else
    {
      sub_100062554(v2, v1);
    }
    uint64_t v10 = static MainActor.shared.getter();
    *(void *)(v0 + 320) = v10;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v11;
    void *v11 = v0;
    v11[1] = sub_10005A878;
    uint64_t v12 = *(void *)(v0 + 264);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, v10, &protocol witness table for MainActor, v12);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_release();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

void sub_10005AE38()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10005B20C(319, &qword_100181AC0, (uint64_t (*)(uint64_t))&type metadata accessor for SFNearbySharingInteraction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v1 <= 0x3F)
    {
      sub_10005B20C(319, &qword_100181AC8, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v2 <= 0x3F)
      {
        sub_10003B8F4(319, &qword_100181AD0, &qword_100181AD8);
        if (v3 <= 0x3F)
        {
          sub_10003B8F4(319, &qword_100181AE0, &qword_100181AE8);
          if (v4 <= 0x3F)
          {
            sub_10003B8F4(319, &qword_100181AF0, &qword_100181AF8);
            if (v5 <= 0x3F)
            {
              sub_10003B8F4(319, (unint64_t *)&unk_100181B00, (uint64_t *)&unk_100183710);
              if (v6 <= 0x3F)
              {
                sub_10003B8F4(319, &qword_100181B10, &qword_100181B18);
                if (v7 <= 0x3F)
                {
                  sub_10003B8F4(319, (unint64_t *)&unk_100181B20, &qword_100184B10);
                  if (v8 <= 0x3F)
                  {
                    sub_10005B20C(319, &qword_100181B30, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                    if (v9 <= 0x3F) {
                      swift_updateClassMetadata2();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10005B20C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10005B270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10005B2E8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NearbySharingInteractionViewModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id sub_10005B36C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaceholderSFCollaborationService();
  return [super dealloc];
}

uint64_t type metadata accessor for PlaceholderSFCollaborationService()
{
  return self;
}

uint64_t sub_10005B3C4()
{
  return sub_10005E9E8((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10005B40C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v16 = a1;
  uint64_t v17 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v3 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v10 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  SFNearbySharingInteraction.interactionType.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10005E6D8((uint64_t)v18, (uint64_t)v19);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10005B798((void (*)(void, void, void))v12, (uint64_t)v5, v13, (uint64_t)v19, (uint64_t)v18, v16);
  sub_10005EA30((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
  sub_10000F394((uint64_t)v18, &qword_100181AD8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v15);
}

uint64_t sub_10005B798@<X0>(void (*a1)(void, void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v160 = a5;
  uint64_t v161 = a4;
  uint64_t v179 = a2;
  uint64_t v180 = a3;
  uint64_t v181 = a6;
  uint64_t v182 = a1;
  sub_10005E6D8(a4, (uint64_t)v189);
  uint64_t v143 = v189[0];
  uint64_t v144 = v189[1];
  uint64_t v145 = v189[2];
  uint64_t v146 = v189[3];
  uint64_t v147 = v189[4];
  uint64_t v148 = v189[5];
  uint64_t v149 = v189[6];
  uint64_t v150 = v189[7];
  unint64_t v141 = v189[9];
  uint64_t v142 = v189[8];
  uint64_t v139 = v189[11];
  uint64_t v140 = v189[10];
  int v138 = v190;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v170 = v6;
  uint64_t v171 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v152 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v151 = (char *)&v135 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v153 = (char *)&v135 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v154 = (char *)&v135 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v155 = (char *)&v135 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v156 = (char *)&v135 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v162 = (char *)&v135 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  char v163 = (char *)&v135 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v164 = (char *)&v135 - v25;
  __chkstk_darwin(v24);
  BOOL v168 = (char *)&v135 - v26;
  uint64_t v27 = sub_10000AA4C(&qword_100181BC8);
  __chkstk_darwin(v27 - 8);
  uint64_t v169 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v172 = v29;
  uint64_t v173 = v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v165 = (char *)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v166 = (char *)&v135 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v167 = (char *)&v135 - v36;
  __chkstk_darwin(v35);
  int64_t v175 = (char *)&v135 - v37;
  uint64_t v38 = type metadata accessor for SFShockwaveEffectState();
  uint64_t v176 = *(void (***)(char *, uint64_t))(v38 - 8);
  uint64_t v177 = v38;
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v178 = *(void *)(v41 - 8);
  uint64_t v42 = __chkstk_darwin(v41);
  unint64_t v137 = (char *)&v135 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v135 - v44;
  uint64_t v46 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v159 = (char *)&v135 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v174 = (char *)&v135 - v51;
  __chkstk_darwin(v50);
  uint64_t v53 = (char *)&v135 - v52;
  uint64_t v54 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v55 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v57 = (char *)&v135 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = *(void (**)(char *, void, uint64_t))(v47 + 16);
  uint64_t v158 = v47 + 16;
  v157(v53, v182, v46);
  if ((*(unsigned int (**)(char *, uint64_t))(v47 + 88))(v53, v46) != enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:))
  {
    uint64_t v136 = v41;
    uint64_t v61 = *(void (**)(char *, uint64_t))(v47 + 8);
    v61(v53, v46);
    uint64_t v62 = v180;
    dispatch thunk of ShockwaveAnimationCoordinator.state.getter();
    char v63 = SFShockwaveEffectState.isLogicallyComplete.getter();
    v176[1](v40, v177);
    uint64_t v64 = v62;
    uint64_t v65 = v182;
    if ((v63 & 1) != 0
      && (uint64_t v66 = *(void (**)(char *, void, uint64_t))(v47 + 104),
          uint64_t v67 = v174,
          v66(v174, enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:), v46),
          sub_10005E9E8((unint64_t *)&unk_100181BD0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State), char v68 = dispatch thunk of static Comparable.< infix(_:_:)(), v61(v67, v46), (v68 & 1) != 0))
    {
      uint64_t v69 = (uint64_t)v169;
      SFAirDrop.NearbySharingInteraction.State.connectionContext.getter();
      uint64_t v70 = v172;
      uint64_t v71 = v173;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v69, 1, v172) == 1)
      {
        sub_10000F394(v69, &qword_100181BC8);
        uint64_t v72 = v174;
        v66(v174, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v46);
        char v73 = static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)();
        v61(v72, v46);
        if ((v73 & 1) == 0)
        {
          if (qword_10017F7A8 != -1) {
            swift_once();
          }
          uint64_t v74 = type metadata accessor for Logger();
          sub_10000B150(v74, (uint64_t)qword_10018D128);
          uint64_t v75 = v159;
          v157(v159, v65, v46);
          sub_10000F330(v160, (uint64_t)&v191, &qword_100181AD8);
          uint64_t v76 = v161;
          sub_10005EA30(v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EA94);
          sub_10005EA30(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005EA94);
          uint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.error.getter();
          int v79 = v78;
          if (os_log_type_enabled(v77, v78))
          {
            uint64_t v80 = v75;
            uint64_t v81 = swift_slowAlloc();
            uint64_t v182 = (void (*)(void, void, void))swift_slowAlloc();
            *(void *)&long long v186 = v182;
            *(_DWORD *)uint64_t v81 = 136315650;
            sub_10005E9E8((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
            LODWORD(v180) = v79;
            uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v195 = sub_100047F98(v82, v83, (uint64_t *)&v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v61(v80, v46);
            *(_WORD *)(v81 + 12) = 2080;
            sub_10005E6D8(v76, (uint64_t)&v195);
            if (v197 <= 0xFFFFFFFEFFFFFFFFLL) {
              uint64_t v84 = 1701670771;
            }
            else {
              uint64_t v84 = 1701736302;
            }
            *(void *)&long long v183 = sub_100047F98(v84, 0xE400000000000000, (uint64_t *)&v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10005EA30(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
            sub_10005EA30(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
            *(_WORD *)(v81 + 22) = 2080;
            if (v193) {
              uint64_t v85 = 1701670771;
            }
            else {
              uint64_t v85 = 1701736302;
            }
            *(void *)&long long v183 = sub_100047F98(v85, 0xE400000000000000, (uint64_t *)&v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10000F394((uint64_t)&v191, &qword_100181AD8);
            _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v180, "Encountered unknown state not represented by a view: %s resolvedRemotePerson: %s shareableContent: %s", (uint8_t *)v81, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v61(v75, v46);
            sub_10005EA30(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
            sub_10005EA30(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
            sub_10000F394((uint64_t)&v191, &qword_100181AD8);
          }
        }
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v175, v69, v70);
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      uint64_t v87 = v171;
      id v88 = v164;
      uint64_t v182 = *(void (**)(void, void, void))(v171 + 104);
      v182(v164, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:), v170);
      uint64_t v89 = sub_10005E9E8(&qword_100181BE0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v177 = v89;
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v195 == v191 && v196 == v192) {
        char v90 = 1;
      }
      else {
        char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      uint64_t v91 = v167;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v92 = *(void (**)(char *, uint64_t))(v87 + 8);
      uint64_t v93 = v88;
      uint64_t v94 = v170;
      v92(v93, v170);
      uint64_t v171 = v87 + 8;
      v92(v168, v94);
      uint64_t v95 = v172;
      uint64_t v96 = v173;
      uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
      v97(v91, v175, v172);
      if (v90)
      {
        uint64_t v98 = *(void (***)(char *, uint64_t))(v96 + 8);
        ((void (*)(char *, uint64_t))v98)(v91, v95);
LABEL_33:
        __int16 v100 = v166;
        v97(v166, v175, v95);
        uint64_t v101 = v165;
        ((void (*)(char *, uint64_t))v98)(v100, v95);
LABEL_34:
        v97(v101, v175, v95);
        ((void (*)(char *, uint64_t))v98)(v101, v95);
LABEL_35:
        ((void (*)(char *, uint64_t))v98)(v175, v95);
LABEL_36:
        type metadata accessor for NearbySharingInteractionViewState(0);
        return swift_storeEnumTagMultiPayload();
      }
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      v182(v162, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v94);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v195 == v191 && v196 == v192)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v99 = v170;
        v92(v162, v170);
        v92(v163, v99);
        uint64_t v95 = v172;
        uint64_t v98 = *(void (***)(char *, uint64_t))(v173 + 8);
        ((void (*)(char *, uint64_t))v98)(v167, v172);
        goto LABEL_33;
      }
      LODWORD(v174) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = v170;
      v92(v162, v170);
      uint64_t v103 = v92;
      v92(v163, v102);
      uint64_t v95 = v172;
      uint64_t v104 = *(void (***)(char *, uint64_t))(v173 + 8);
      v173 += 8;
      uint64_t v176 = v104;
      ((void (*)(char *, uint64_t))v104)(v167, v172);
      uint64_t v105 = v166;
      v97(v166, v175, v95);
      if (v174)
      {
        uint64_t v101 = v165;
        uint64_t v98 = v176;
        ((void (*)(char *, uint64_t))v176)(v105, v95);
        goto LABEL_34;
      }
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      uint64_t v106 = v155;
      v182(v155, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.unknown(_:), v102);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v195 == v191 && v196 == v192)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v107 = v170;
        v92(v106, v170);
        v92(v156, v107);
        uint64_t v95 = v172;
        uint64_t v98 = v176;
        ((void (*)(char *, uint64_t))v176)(v166, v172);
        uint64_t v101 = v165;
        goto LABEL_34;
      }
      LODWORD(v174) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v108 = v106;
      uint64_t v109 = v170;
      v92(v108, v170);
      v92(v156, v109);
      uint64_t v95 = v172;
      ((void (*)(char *, uint64_t))v176)(v166, v172);
      long long v110 = v165;
      v97(v165, v175, v95);
      if (v174)
      {
        uint64_t v98 = v176;
        ((void (*)(char *, uint64_t))v176)(v110, v95);
        goto LABEL_35;
      }
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      long long v111 = v153;
      v182(v153, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:), v109);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v195 == v191 && v196 == v192)
      {
        swift_bridgeObjectRelease_n();
        v92(v111, v109);
        v92(v154, v109);
        uint64_t v112 = v172;
        uint64_t v113 = v176;
        ((void (*)(char *, uint64_t))v176)(v165, v172);
        ((void (*)(char *, uint64_t))v113)(v175, v112);
        goto LABEL_36;
      }
      char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v92(v111, v109);
      v92(v154, v109);
      uint64_t v115 = v172;
      ((void (*)(char *, uint64_t))v176)(v165, v172);
      if (v114)
      {
        ((void (*)(char *, uint64_t))v176)(v175, v115);
        goto LABEL_36;
      }
      uint64_t v116 = v151;
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
      v182(v152, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v109);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v195 == v191 && v196 == v192)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v117 = v170;
        v103(v152, v170);
        v103(v116, v117);
        long long v118 = v176;
LABEL_55:
        uint64_t v121 = v175;
        SFAirDrop.NearbySharingInteraction.ConnectionContext.transactionIdentifier.getter();
        ((void (*)(char *, uint64_t))v118)(v121, v172);
        type metadata accessor for NearbySharingInteractionViewState(0);
        return swift_storeEnumTagMultiPayload();
      }
      char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v120 = v170;
      v103(v152, v170);
      v103(v116, v120);
      long long v118 = v176;
      if (v119) {
        goto LABEL_55;
      }
      sub_10005E6D8(v161, (uint64_t)&v191);
      if (v194 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        sub_10005EB7C((uint64_t)&v191, (uint64_t)&v195);
        sub_10000F330(v160, (uint64_t)&v183, &qword_100181AD8);
        if (*((void *)&v184 + 1))
        {
          sub_10005EAC4(v143, v144, v145, v146, v147, v148, v149, v150, v142, v141);
          ((void (*)(char *, uint64_t))v176)(v175, v172);
          long long v186 = v183;
          long long v187 = v184;
          long long v188 = v185;
          uint64_t v122 = v181;
          sub_10005EB7C((uint64_t)&v195, (uint64_t)v181);
          long long v123 = v187;
          *(_OWORD *)(v122 + 13) = v186;
          *(_OWORD *)(v122 + 15) = v123;
          *(_OWORD *)(v122 + 17) = v188;
          type metadata accessor for NearbySharingInteractionViewState(0);
          return swift_storeEnumTagMultiPayload();
        }
        sub_10000F394((uint64_t)&v183, &qword_100181AD8);
        uint64_t v124 = v178;
        uint64_t v125 = v136;
        uint64_t v126 = v137;
        (*(void (**)(char *, void, uint64_t))(v178 + 104))(v137, enum case for SFNearbySharingInteraction.InteractionType.connect(_:), v136);
        sub_10005EAC4(v143, v144, v145, v146, v147, v148, v149, v150, v142, v141);
        char v127 = static SFNearbySharingInteraction.InteractionType.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v125);
        ((void (*)(char *, uint64_t))v176)(v175, v172);
        if (v127)
        {
          uint64_t v128 = v181;
          uint64_t v129 = v144;
          *uint64_t v181 = v143;
          v128[1] = v129;
          uint64_t v130 = v146;
          v128[2] = v145;
          v128[3] = v130;
          uint64_t v131 = v148;
          v128[4] = v147;
          v128[5] = v131;
          uint64_t v132 = v150;
          v128[6] = v149;
          v128[7] = v132;
          unint64_t v133 = v141;
          v128[8] = v142;
          v128[9] = v133;
          uint64_t v134 = v139;
          v128[10] = v140;
          v128[11] = v134;
          *((_DWORD *)v128 + 24) = v138;
          type metadata accessor for NearbySharingInteractionViewState(0);
          return swift_storeEnumTagMultiPayload();
        }
        sub_10005EA30(v161, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10005E748);
      }
      else
      {
        ((void (*)(char *, uint64_t))v118)(v175, v172);
      }
      *uint64_t v181 = v180;
      type metadata accessor for NearbySharingInteractionViewState(0);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *uint64_t v181 = v64;
      type metadata accessor for NearbySharingInteractionViewState(0);
      swift_storeEnumTagMultiPayload();
    }
    return swift_retain();
  }
  (*(void (**)(char *, uint64_t))(v47 + 96))(v53, v46);
  unint64_t v58 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v58(v57, v53, v54);
  uint64_t v59 = v178;
  (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v45, v179, v41);
  int v60 = (*(uint64_t (**)(char *, uint64_t))(v59 + 88))(v45, v41);
  if (v60 != enum case for SFNearbySharingInteraction.InteractionType.connect(_:))
  {
    if (v60 != enum case for SFNearbySharingInteraction.InteractionType.handoff(_:))
    {
      v58((char *)v181, v57, v54);
      type metadata accessor for NearbySharingInteractionViewState(0);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v45, v41);
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
    goto LABEL_36;
  }
  v58((char *)v181, v57, v54);
  type metadata accessor for NearbySharingInteractionViewState(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10005CE5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v45 = a1;
  ObjectCFStringRef Type = swift_getObjectType();
  uint64_t v41 = sub_10000AA4C(&qword_100181BF0);
  __chkstk_darwin(v41);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000AA4C(&qword_100181BF8);
  __chkstk_darwin(v40);
  uint64_t v36 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000AA4C(&qword_100181C00);
  __chkstk_darwin(v39);
  uint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000AA4C(&qword_100181C08);
  __chkstk_darwin(v38);
  uint64_t v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C((uint64_t *)&unk_100181C10);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  uint64_t v43 = v8;
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v14 = *(void *)(v34 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v31 = (char *)&v28 - v17;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  SFNearbySharingInteraction.interactionType.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v29 = *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator);
  swift_beginAccess();
  sub_10000AA4C((uint64_t *)&unk_100183E50);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_beginAccess();
  sub_10000AA4C(&qword_100181C20);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_beginAccess();
  sub_10000AA4C(&qword_100181C28);
  Published.projectedValue.getter();
  swift_endAccess();
  dispatch thunk of ShockwaveAnimationCoordinator.$state.getter();
  sub_10000F288(&qword_100181C30, &qword_100181C08);
  sub_10000F288(&qword_100181C38, &qword_100181C00);
  sub_10000F288(&qword_100181C40, &qword_100181BF8);
  sub_10000F288(&qword_100181C48, &qword_100181BF0);
  uint64_t v18 = v35;
  Publishers.CombineLatest4.init(_:_:_:_:)();
  uint64_t v20 = v33;
  uint64_t v19 = v34;
  uint64_t v21 = v31;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v33, v31, v34);
  unint64_t v22 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v24 + v22, v20, v19);
  *(void *)(v24 + v23) = v29;
  *(void *)(v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1000609FC;
  *(void *)(v25 + 24) = v24;
  type metadata accessor for NearbySharingInteractionViewState(0);
  sub_10000F288(&qword_100181C50, (uint64_t *)&unk_100181C10);
  swift_retain();
  uint64_t v26 = v42;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v21, v19);
}

uint64_t sub_10005D4FC(uint64_t a1, uint64_t (*a2)(uint64_t, unsigned char *, uint64_t, uint64_t))
{
  uint64_t v4 = (int *)sub_10000AA4C(&qword_100181C58);
  sub_10005E6D8(a1 + v4[12], (uint64_t)v6);
  return a2(a1, v6, a1 + v4[16], a1 + v4[20]);
}

uint64_t sub_10005D584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v18 - v13;
  sub_10005B40C((uint64_t *)((char *)&v18 - v13));
  swift_storeEnumTagMultiPayload();
  char v15 = sub_10005F800((uint64_t)v14, (uint64_t)v11);
  sub_100060810((uint64_t)v11);
  if (v15)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      ContinuousClock.Instant.advanced(by:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100060810((uint64_t)v14);
      uint64_t v16 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v16, 1, v5);
    }
    sub_100060810((uint64_t)v14);
    sub_10000F394((uint64_t)v4, &qword_100184B10);
  }
  else
  {
    sub_100060810((uint64_t)v14);
  }
  uint64_t v16 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, v16, 1, v5);
}

uint64_t sub_10005D840()
{
  uint64_t v0 = type metadata accessor for NearbySharingInteractionViewState(0);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v12 - v4);
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v6 = (void *)static NSUserDefaults.airdrop.getter();
  char v7 = SFAirDropUserDefaults.shockwaveEffectEnabled.getter();

  if (v7)
  {
    sub_10005B40C(v5);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t result = 2;
    switch(EnumCaseMultiPayload)
    {
      case 1:
      case 3:
        uint64_t v10 = (uint64_t)v5;
        goto LABEL_6;
      case 4:
        sub_10005E778(*v5, v5[1], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7], v5[8], v5[9]);
        sub_1000608FC((uint64_t)(v5 + 13));
        uint64_t result = 0;
        break;
      case 5:
        return result;
      default:
        sub_100060810((uint64_t)v5);
        uint64_t result = 0;
        break;
    }
  }
  else
  {
    sub_10005B40C(v3);
    int v11 = swift_getEnumCaseMultiPayload();
    uint64_t result = 2;
    switch(v11)
    {
      case 2:
        sub_100060810((uint64_t)v3);
        uint64_t result = 2;
        break;
      case 4:
        sub_10005E778(*v3, v3[1], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9]);
        sub_1000608FC((uint64_t)(v3 + 13));
        goto LABEL_7;
      case 5:
        return result;
      default:
        uint64_t v10 = (uint64_t)v3;
LABEL_6:
        sub_100060810(v10);
LABEL_7:
        uint64_t result = 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10005DA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  type metadata accessor for MainActor();
  v8[8] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[9] = v10;
  v8[10] = v9;
  return _swift_task_switch(sub_10005DB24, v10, v9);
}

uint64_t sub_10005DB24()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void *)v0[3];
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  sub_10000AB54(v2, v4);
  uint64_t v5 = v1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005DBF8;
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[4];
  return sub_10000FA88(v9, v7, v8, v5, v4, v3);
}

uint64_t sub_10005DBF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v5 = sub_10005DD9C;
  }
  else {
    uint64_t v5 = sub_10005DD34;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10005DD34()
{
  swift_release();
  sub_100058548();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005DD9C()
{
  swift_release();
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_10018D128);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error sending shareable content: %@", v4, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100058548();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10005DFB0()
{
  return sub_10005E844();
}

uint64_t sub_10005DFC4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10005E050(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFNearbySharingInteraction);
}

uint64_t sub_10005DFEC()
{
  return sub_10005E844();
}

uint64_t sub_10005E000()
{
  return sub_10005E844();
}

uint64_t sub_10005E028(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10005E050(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
}

uint64_t sub_10005E050(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14((char *)&v18 - v12, a1, v7);
  char v15 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v14(v11, (uint64_t)v13, v7);
  id v16 = v15;
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_10005E1C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10005E050(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
}

uint64_t sub_10005E1FC()
{
  return sub_10005E844();
}

uint64_t sub_10005E224(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10005E050(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFNearbySharingInteraction);
}

uint64_t sub_10005E260()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10005E2DC(uint64_t a1, void **a2)
{
  sub_10000F330(a1, (uint64_t)v7, &qword_100181AD8);
  os_log_type_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v7, (uint64_t)&v6, &qword_100181AD8);
  id v4 = v3;
  static Published.subscript.setter();
  return sub_10000F394((uint64_t)v7, &qword_100181AD8);
}

uint64_t sub_10005E378@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

uint64_t sub_10005E38C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_unknownObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_10005E404@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

uint64_t sub_10005E418(void **a1, void **a2)
{
  return sub_10005E4D0(a1, a2);
}

uint64_t sub_10005E42C@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

uint64_t sub_10005E440@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10005E4BC(void **a1, void **a2)
{
  return sub_10005E4D0(a1, a2);
}

uint64_t sub_10005E4D0(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return static Published.subscript.setter();
}

double sub_10005E540@<D0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 96) = v9;
  return result;
}

uint64_t sub_10005E5DC(uint64_t *a1, void **a2)
{
  uint64_t v12 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v2 = a1[3];
  uint64_t v11 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[8];
  unint64_t v8 = a1[9];
  uint64_t v14 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10005EA94(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8);
  id v9 = v14;
  return static Published.subscript.setter();
}

uint64_t sub_10005E6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181B18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E748(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a10 <= 0xFFFFFFFEFFFFFFFFLL) {
    return sub_10005E778(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_10005E778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if ((a10 >> 62) - 1 >= 2)
  {
    if (a10 >> 62) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005E830()
{
  return sub_10005E844();
}

uint64_t sub_10005E844()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10005E8BC(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100184B10);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v13 - v8;
  sub_10000F330(a1, (uint64_t)&v13 - v8, &qword_100184B10);
  uint64_t v10 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v9, (uint64_t)v7, &qword_100184B10);
  id v11 = v10;
  static Published.subscript.setter();
  return sub_10000F394((uint64_t)v9, &qword_100184B10);
}

uint64_t type metadata accessor for NearbySharingInteractionViewState(uint64_t a1)
{
  return sub_100018BDC(a1, qword_100181D88);
}

uint64_t sub_10005E9E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005EA30(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t sub_10005EA94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a10 <= 0xFFFFFFFEFFFFFFFFLL) {
    return sub_10005EAC4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_10005EAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if ((a10 >> 62) - 1 >= 2)
  {
    if (a10 >> 62) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10005EB7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005EBD8(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(char *, char *, uint64_t))
{
  uint64_t v101 = a6;
  id v90 = a3;
  uint64_t v89 = a2;
  uint64_t v9 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v94 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v11 - 8);
  uint64_t v88 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v87 = (char *)&v84 - v14;
  __chkstk_darwin(v15);
  uint64_t v93 = (char *)&v84 - v16;
  uint64_t v17 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v17 - 8);
  int v92 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v99 = *(void (**)(char *, uint64_t))(v19 - 8);
  __int16 v100 = (uint8_t *)v19;
  __chkstk_darwin(v19);
  uint64_t v98 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v84 - v22;
  uint64_t v24 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v96 = *(void *)(v24 - 8);
  uint64_t v97 = v24;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v91 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v84 - v31;
  uint64_t v33 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v95 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v86 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v34;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v84 - v36;
  v104[3] = a5;
  v104[4] = (uint64_t)v101;
  uint64_t v38 = sub_1000636E4(v104);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v38, a1, a5);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v28 + 88))(v32, v27) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 96))(v32, v27);
    uint64_t v39 = v95;
    uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    uint64_t v91 = (char *)(v95 + 32);
    v101(v37, v32, v33);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v40 = a4;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    SFNearbySharingInteraction.interactionType.getter();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v26, v97);
    uint64_t v42 = v98;
    uint64_t v41 = v99;
    uint64_t v43 = v100;
    (*((void (**)(char *, void, uint8_t *))v99 + 13))(v98, enum case for SFNearbySharingInteraction.InteractionType.connect(_:), v100);
    char v44 = static SFNearbySharingInteraction.InteractionType.== infix(_:_:)();
    uint64_t v45 = (void (*)(char *, uint8_t *))*((void *)v41 + 1);
    v45(v42, v43);
    v45(v23, v43);
    uint64_t v46 = v39;
    if (v44)
    {
      uint64_t v47 = (uint64_t)v92;
      SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter();
      uint64_t v48 = type metadata accessor for UUID();
      int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 1, v48);
      sub_10000F394(v47, &qword_100180580);
      if (v49 == 1)
      {
        if (qword_10017F7A8 != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        sub_10000B150(v50, (uint64_t)qword_10018D128);
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Can not share content: we don't have a resolved endpoint.", v53, 2u);
          swift_slowDealloc();
        }

        goto LABEL_15;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v65 = (uint64_t)v93;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v66 = type metadata accessor for ContinuousClock.Instant();
    uint64_t v67 = *(void *)(v66 - 8);
    int v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66);
    sub_10000F394(v65, &qword_100184B10);
    if (v68 != 1)
    {
LABEL_15:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v33);
      return sub_10000AB98((uint64_t)v104);
    }
    uint64_t v69 = v33;
    uint64_t v70 = (uint64_t)v87;
    static ContinuousClock.Instant.now.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v70, 0, 1, v66);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10000F330(v70, v88, &qword_100184B10);
    id v71 = v40;
    static Published.subscript.setter();
    sub_10000F394(v70, &qword_100184B10);
    uint64_t v72 = type metadata accessor for TaskPriority();
    uint64_t v73 = v69;
    uint64_t v74 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v94, 1, 1, v72);
    sub_10000AAF0((uint64_t)v104, (uint64_t)v103);
    sub_10000AAF0(v89, (uint64_t)v102);
    uint64_t v75 = v86;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v86, v37, v73);
    type metadata accessor for MainActor();
    id v76 = v90;
    id v77 = v90;
    id v78 = v71;
    uint64_t v79 = static MainActor.shared.getter();
    unint64_t v80 = (*(unsigned __int8 *)(v46 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    unint64_t v81 = (v85 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v82 = (char *)swift_allocObject();
    *((void *)v82 + 2) = v79;
    *((void *)v82 + 3) = &protocol witness table for MainActor;
    sub_100063848(v103, (uint64_t)(v82 + 32));
    sub_100063848(v102, (uint64_t)(v82 + 72));
    *((void *)v82 + 14) = v76;
    v101(&v82[v80], v75, v73);
    *(void *)&v82[v81] = v78;
    sub_10010C15C(v94, (uint64_t)&unk_100181DD0, (uint64_t)v82);
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v74, v73);
  }
  else
  {
    uint64_t v54 = *(void (**)(char *, uint64_t))(v28 + 8);
    v54(v32, v27);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_10000B150(v55, (uint64_t)qword_10018D128);
    id v56 = a4;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v99 = v54;
      int v60 = (uint8_t *)v59;
      uint64_t v101 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
      *(void *)&v103[0] = v101;
      *(_DWORD *)int v60 = 136315138;
      __int16 v100 = v60 + 4;
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v61 = v91;
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_10005E9E8((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v64 = v63;
      v99(v61, v27);
      *(void *)&v102[0] = sub_100047F98(v62, v64, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Can not share content as the state of the interaction is not connected: %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return sub_10000AB98((uint64_t)v104);
}

uint64_t sub_10005F800(uint64_t a1, uint64_t a2)
{
  uint64_t v179 = (unsigned char *)a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v177 = *(void *)(v3 - 8);
  uint64_t v178 = v3;
  __chkstk_darwin(v3);
  uint64_t v174 = &v152[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v175 = *(void *)(v5 - 8);
  uint64_t v176 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = &v152[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v152[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v13 = &v152[-v12];
  __chkstk_darwin(v14);
  uint64_t v16 = &v152[-v15];
  __chkstk_darwin(v17);
  uint64_t v19 = &v152[-v18];
  __chkstk_darwin(v20);
  uint64_t v22 = &v152[-v21];
  uint64_t v23 = sub_10000AA4C(&qword_100181BE8);
  __chkstk_darwin(v23 - 8);
  uint64_t v26 = &v152[*(int *)(v25 + 56) - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = a1;
  uint64_t v28 = &v152[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100060898(v27, (uint64_t)v28);
  sub_100060898((uint64_t)v179, (uint64_t)v26);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100060898((uint64_t)v28, (uint64_t)v19);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = v175;
        uint64_t v29 = v176;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v175 + 32))(v7, v26, v176);
        char v31 = static SFAirDrop.NearbySharingInteraction.FailureType.== infix(_:_:)();
        uint64_t v32 = *(void (**)(unsigned char *, uint64_t))(v30 + 8);
        v32(v7, v29);
        v32(v19, v29);
        goto LABEL_28;
      }
      (*(void (**)(unsigned char *, uint64_t))(v175 + 8))(v19, v176);
      goto LABEL_26;
    case 2u:
      sub_100060898((uint64_t)v28, (uint64_t)v16);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v34 = v177;
        uint64_t v33 = v178;
        uint64_t v35 = v174;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v177 + 32))(v174, v26, v178);
        char v31 = static UUID.== infix(_:_:)();
        uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
        v36(v35, v33);
        v36(v16, v33);
        goto LABEL_28;
      }
      (*(void (**)(unsigned char *, uint64_t))(v177 + 8))(v16, v178);
      goto LABEL_26;
    case 3u:
      uint64_t v179 = v28;
      sub_100060898((uint64_t)v28, (uint64_t)v13);
      uint64_t v37 = *(void *)v13;
      uint64_t v38 = (unsigned char *)*((void *)v13 + 1);
      unint64_t v173 = *((void *)v13 + 2);
      uint64_t v174 = v38;
      uint64_t v39 = *((void *)v13 + 4);
      uint64_t v175 = *((void *)v13 + 3);
      uint64_t v176 = v37;
      uint64_t v40 = *((void *)v13 + 6);
      uint64_t v41 = *((void *)v13 + 7);
      uint64_t v42 = *((void *)v13 + 8);
      uint64_t v177 = *((void *)v13 + 5);
      uint64_t v178 = v41;
      unint64_t v43 = *((void *)v13 + 9);
      uint64_t v44 = *((void *)v13 + 10);
      uint64_t v45 = *((void *)v13 + 11);
      int v46 = *((_DWORD *)v13 + 24);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        sub_10005E778(v176, (uint64_t)v174, v173, v175, v39, v177, v40, v178, v42, v43);
        goto LABEL_25;
      }
      uint64_t v167 = v45;
      uint64_t v168 = v44;
      uint64_t v169 = v42;
      uint64_t v47 = v173;
      uint64_t v48 = v174;
      uint64_t v50 = v177;
      uint64_t v49 = v178;
      uint64_t v52 = *(void *)v26;
      uint64_t v51 = *((void *)v26 + 1);
      uint64_t v53 = *((void *)v26 + 2);
      uint64_t v171 = *((void *)v26 + 3);
      uint64_t v172 = v53;
      uint64_t v170 = *((void *)v26 + 4);
      uint64_t v54 = *((void *)v26 + 6);
      uint64_t v164 = *((void *)v26 + 5);
      uint64_t v165 = v54;
      uint64_t v166 = *((void *)v26 + 7);
      unint64_t v55 = *((void *)v26 + 9);
      uint64_t v163 = *((void *)v26 + 8);
      uint64_t v56 = *((void *)v26 + 10);
      unint64_t v161 = v55;
      uint64_t v162 = v56;
      uint64_t v160 = *((void *)v26 + 11);
      unint64_t v57 = v43;
      LODWORD(v159) = *((_DWORD *)v26 + 24);
      if (v43 >> 62)
      {
        uint64_t v58 = v178;
        uint64_t v59 = v40;
        uint64_t v60 = v177;
        uint64_t v61 = v39;
        uint64_t v62 = v175;
        uint64_t v63 = v176;
        uint64_t v64 = v173;
        uint64_t v65 = v174;
        uint64_t v66 = v169;
        unint64_t v67 = v55 >> 62;
        if (v43 >> 62 == 1)
        {
          if (v67 != 1) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
        if (v67 == 2)
        {
LABEL_33:
          uint64_t v158 = v52;
          if (v176 != v52 || v174 != (unsigned char *)v51)
          {
            uint64_t v106 = v51;
            char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v57 = v43;
            uint64_t v66 = v169;
            uint64_t v62 = v175;
            uint64_t v63 = v176;
            uint64_t v65 = v48;
            uint64_t v64 = v47;
            uint64_t v61 = v39;
            uint64_t v60 = v50;
            uint64_t v59 = v40;
            uint64_t v58 = v49;
            uint64_t v52 = v158;
            uint64_t v51 = v106;
            if ((v107 & 1) == 0) {
              goto LABEL_41;
            }
          }
          if (v64 != v172 || v62 != v171)
          {
            uint64_t v108 = v51;
            unint64_t v109 = v57;
            char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v57 = v109;
            uint64_t v66 = v169;
            uint64_t v62 = v175;
            uint64_t v63 = v176;
            uint64_t v65 = v48;
            uint64_t v64 = v47;
            uint64_t v61 = v39;
            uint64_t v60 = v50;
            uint64_t v59 = v40;
            uint64_t v58 = v49;
            uint64_t v52 = v158;
            uint64_t v51 = v108;
            if ((v110 & 1) == 0) {
              goto LABEL_41;
            }
          }
          uint64_t v155 = v61;
          uint64_t v156 = v59;
          uint64_t v157 = v51;
          uint64_t v111 = (uint64_t)v65;
          uint64_t v112 = v62;
          uint64_t v113 = v64;
          uint64_t v114 = v63;
          uint64_t v115 = v66;
          unint64_t v116 = v57;
          LODWORD(v176) = sub_1000771E4(v61, v170);
          sub_10005E778(v114, v111, v113, v112, v155, v177, v156, v178, v115, v116);
          sub_10005E778(v158, v157, v172, v171, v170, v164, v165, v166, v163, v161);
          if ((v176 & 1) == 0) {
            goto LABEL_63;
          }
          goto LABEL_40;
        }
LABEL_41:
        uint64_t v117 = v52;
        uint64_t v118 = v51;
        sub_10005E778(v63, (uint64_t)v65, v64, v62, v61, v60, v59, v58, v66, v57);
        sub_10005E778(v117, v118, v172, v171, v170, v164, v165, v166, v163, v161);
        goto LABEL_63;
      }
      uint64_t v62 = v175;
      uint64_t v63 = v176;
      uint64_t v187 = v176;
      long long v188 = v174;
      uint64_t v65 = v174;
      uint64_t v64 = v173;
      uint64_t v189 = v173;
      uint64_t v190 = v175;
      uint64_t v61 = v39;
      uint64_t v191 = v39;
      uint64_t v192 = v177;
      uint64_t v60 = v177;
      uint64_t v59 = v40;
      uint64_t v193 = v40;
      uint64_t v194 = v178;
      uint64_t v58 = v178;
      uint64_t v66 = v169;
      uint64_t v195 = v169;
      int v196 = v43;
      uint64_t v197 = v168;
      uint64_t v198 = v167;
      int v199 = v46;
      if (v55 >> 62) {
        goto LABEL_41;
      }
      uint64_t v200 = v52;
      uint64_t v201 = v51;
      uint64_t v202 = v172;
      uint64_t v203 = v171;
      uint64_t v204 = v170;
      uint64_t v205 = v164;
      uint64_t v206 = v165;
      uint64_t v207 = v166;
      uint64_t v208 = v163;
      int v209 = v161;
      uint64_t v210 = v162;
      uint64_t v211 = v160;
      int v212 = v159;
      uint64_t v157 = v51;
      uint64_t v158 = v52;
      uint64_t v155 = v39;
      uint64_t v156 = v40;
      uint64_t v102 = v175;
      uint64_t v103 = v176;
      uint64_t v104 = v169;
      unint64_t v105 = v57;
      LODWORD(v154) = sub_1000776F0((uint64_t)&v187, (uint64_t)&v200);
      sub_10005E778(v103, (uint64_t)v174, v47, v102, v155, v177, v156, v178, v104, v105);
      sub_10005E778(v158, v157, v172, v171, v170, v164, v165, v166, v163, v161);
      if ((v154 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_40:
      uint64_t v101 = (uint64_t)v179;
LABEL_20:
      sub_100060810(v101);
      char v31 = 1;
      return v31 & 1;
    case 4u:
      uint64_t v179 = v28;
      sub_100060898((uint64_t)v28, (uint64_t)v10);
      uint64_t v68 = *(void *)v10;
      uint64_t v174 = (unsigned char *)*((void *)v10 + 1);
      uint64_t v175 = v68;
      uint64_t v69 = *((void *)v10 + 3);
      uint64_t v70 = *((void *)v10 + 4);
      uint64_t v71 = *((void *)v10 + 5);
      uint64_t v72 = *((void *)v10 + 6);
      uint64_t v176 = *((void *)v10 + 2);
      uint64_t v177 = v71;
      uint64_t v73 = *((void *)v10 + 8);
      uint64_t v178 = *((void *)v10 + 7);
      unint64_t v74 = *((void *)v10 + 9);
      uint64_t v75 = *((void *)v10 + 10);
      uint64_t v172 = v69;
      unint64_t v173 = v74;
      uint64_t v76 = *((void *)v10 + 11);
      id v77 = v10 + 104;
      int v78 = *((_DWORD *)v10 + 24);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        sub_1000608FC((uint64_t)v77);
        sub_10005E778(v175, (uint64_t)v174, v176, v172, v70, v177, v72, v178, v73, v173);
LABEL_25:
        uint64_t v28 = v179;
LABEL_26:
        sub_10000F394((uint64_t)v28, &qword_100181BE8);
        goto LABEL_64;
      }
      uint64_t v166 = v76;
      uint64_t v167 = v75;
      uint64_t v168 = v73;
      uint64_t v79 = v174;
      uint64_t v80 = v172;
      uint64_t v82 = v177;
      uint64_t v81 = v178;
      uint64_t v84 = *(void *)v26;
      uint64_t v83 = *((void *)v26 + 1);
      uint64_t v85 = *((void *)v26 + 2);
      uint64_t v170 = *((void *)v26 + 3);
      uint64_t v171 = v85;
      uint64_t v169 = *((void *)v26 + 4);
      uint64_t v86 = *((void *)v26 + 6);
      uint64_t v163 = *((void *)v26 + 5);
      uint64_t v164 = v86;
      uint64_t v165 = *((void *)v26 + 7);
      unint64_t v87 = *((void *)v26 + 9);
      uint64_t v162 = *((void *)v26 + 8);
      uint64_t v160 = *((void *)v26 + 10);
      unint64_t v161 = v87;
      uint64_t v159 = *((void *)v26 + 11);
      LODWORD(v158) = *((_DWORD *)v26 + 24);
      long long v88 = v77[1];
      v185[0] = *v77;
      v185[1] = v88;
      long long v186 = v77[2];
      long long v89 = *(_OWORD *)(v26 + 120);
      v183[0] = *(_OWORD *)(v26 + 104);
      v183[1] = v89;
      unint64_t v90 = v173;
      long long v184 = *(_OWORD *)(v26 + 136);
      if (v173 >> 62)
      {
        uint64_t v91 = v178;
        uint64_t v92 = v72;
        uint64_t v93 = v177;
        uint64_t v94 = v70;
        uint64_t v95 = v172;
        uint64_t v97 = v175;
        uint64_t v96 = v176;
        uint64_t v98 = v174;
        uint64_t v99 = v168;
        unint64_t v100 = v87 >> 62;
        if (v173 >> 62 == 1)
        {
          if (v100 != 1) {
            goto LABEL_61;
          }
          goto LABEL_46;
        }
        if (v100 == 2)
        {
LABEL_46:
          if (v175 != v84 || v174 != (unsigned char *)v83)
          {
            uint64_t v123 = v84;
            uint64_t v124 = v83;
            char v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v90 = v173;
            uint64_t v99 = v168;
            uint64_t v97 = v175;
            uint64_t v96 = v176;
            uint64_t v98 = v79;
            uint64_t v95 = v80;
            uint64_t v94 = v70;
            uint64_t v93 = v82;
            uint64_t v92 = v72;
            uint64_t v91 = v81;
            uint64_t v84 = v123;
            uint64_t v83 = v124;
            if ((v125 & 1) == 0) {
              goto LABEL_61;
            }
          }
          uint64_t v157 = v84;
          if (v96 != v171 || v95 != v170)
          {
            uint64_t v126 = v83;
            unint64_t v127 = v90;
            char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v90 = v127;
            uint64_t v99 = v168;
            uint64_t v97 = v175;
            uint64_t v96 = v176;
            uint64_t v98 = v79;
            uint64_t v95 = v80;
            uint64_t v94 = v70;
            uint64_t v93 = v82;
            uint64_t v92 = v72;
            uint64_t v91 = v81;
            uint64_t v84 = v157;
            uint64_t v83 = v126;
            if ((v128 & 1) == 0) {
              goto LABEL_61;
            }
          }
          uint64_t v154 = v94;
          uint64_t v155 = v92;
          uint64_t v156 = v83;
          uint64_t v129 = (uint64_t)v98;
          uint64_t v130 = v95;
          uint64_t v131 = v96;
          uint64_t v132 = v97;
          uint64_t v133 = v99;
          unint64_t v134 = v90;
          LODWORD(v176) = sub_1000771E4(v94, v169);
          sub_10005E778(v132, v129, v131, v130, v154, v177, v155, v178, v133, v134);
          sub_10005E778(v157, v156, v171, v170, v169, v163, v164, v165, v162, v161);
          if ((v176 & 1) == 0) {
            goto LABEL_62;
          }
LABEL_53:
          uint64_t v135 = *((void *)&v186 + 1);
          int64_t v136 = *(void *)(*((void *)&v186 + 1) + 16);
          unint64_t v137 = _swiftEmptyArrayStorage;
          uint64_t v28 = v179;
          if (v136)
          {
            uint64_t v182 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRetain();
            sub_1000161B4(0, v136, 0);
            uint64_t v138 = v135 + 32;
            unint64_t v137 = v182;
            do
            {
              sub_10000AAF0(v138, (uint64_t)v180);
              sub_10000AB54(v180, v181);
              uint64_t v139 = sub_10000FA78();
              sub_10000AB98((uint64_t)v180);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000161B4(0, v137[2] + 1, 1);
                unint64_t v137 = v182;
              }
              unint64_t v141 = v137[2];
              unint64_t v140 = v137[3];
              if (v141 >= v140 >> 1)
              {
                sub_1000161B4(v140 > 1, v141 + 1, 1);
                unint64_t v137 = v182;
              }
              v137[2] = v141 + 1;
              v137[v141 + 4] = v139;
              v138 += 40;
              --v136;
            }
            while (v136);
            swift_bridgeObjectRelease();
          }
          uint64_t v145 = *((void *)&v184 + 1);
          int64_t v146 = *(void *)(*((void *)&v184 + 1) + 16);
          uint64_t v147 = _swiftEmptyArrayStorage;
          if (v146)
          {
            uint64_t v182 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRetain();
            sub_1000161B4(0, v146, 0);
            uint64_t v148 = v145 + 32;
            uint64_t v147 = v182;
            do
            {
              sub_10000AAF0(v148, (uint64_t)v180);
              sub_10000AB54(v180, v181);
              uint64_t v149 = sub_10000FA78();
              sub_10000AB98((uint64_t)v180);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000161B4(0, v147[2] + 1, 1);
                uint64_t v147 = v182;
              }
              unint64_t v151 = v147[2];
              unint64_t v150 = v147[3];
              if (v151 >= v150 >> 1)
              {
                sub_1000161B4(v150 > 1, v151 + 1, 1);
                uint64_t v147 = v182;
              }
              v147[2] = v151 + 1;
              v147[v151 + 4] = v149;
              v148 += 40;
              --v146;
              uint64_t v28 = v179;
            }
            while (v146);
            swift_bridgeObjectRelease();
          }
          char v31 = sub_10000FE34(v137, v147);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000608FC((uint64_t)v183);
          sub_1000608FC((uint64_t)v185);
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v97 = v175;
        uint64_t v96 = v176;
        uint64_t v187 = v175;
        long long v188 = v174;
        uint64_t v98 = v174;
        uint64_t v189 = v176;
        uint64_t v190 = v172;
        uint64_t v95 = v172;
        uint64_t v94 = v70;
        uint64_t v191 = v70;
        uint64_t v192 = v177;
        uint64_t v93 = v177;
        uint64_t v92 = v72;
        uint64_t v193 = v72;
        uint64_t v194 = v178;
        uint64_t v91 = v178;
        uint64_t v99 = v168;
        uint64_t v195 = v168;
        int v196 = v173;
        uint64_t v197 = v167;
        uint64_t v198 = v166;
        int v199 = v78;
        if (!(v87 >> 62))
        {
          uint64_t v200 = v84;
          uint64_t v201 = v83;
          uint64_t v202 = v171;
          uint64_t v203 = v170;
          uint64_t v204 = v169;
          uint64_t v205 = v163;
          uint64_t v206 = v164;
          uint64_t v207 = v165;
          uint64_t v208 = v162;
          int v209 = v161;
          uint64_t v210 = v160;
          uint64_t v211 = v159;
          int v212 = v158;
          uint64_t v156 = v83;
          uint64_t v157 = v84;
          uint64_t v154 = v70;
          uint64_t v155 = v72;
          uint64_t v119 = v176;
          uint64_t v120 = v175;
          uint64_t v121 = v168;
          unint64_t v122 = v173;
          int v153 = sub_1000776F0((uint64_t)&v187, (uint64_t)&v200);
          sub_10005E778(v120, (uint64_t)v174, v119, v80, v154, v177, v155, v178, v121, v122);
          sub_10005E778(v157, v156, v171, v170, v169, v163, v164, v165, v162, v161);
          if ((v153 & 1) == 0)
          {
LABEL_62:
            sub_1000608FC((uint64_t)v183);
            sub_1000608FC((uint64_t)v185);
LABEL_63:
            sub_100060810((uint64_t)v179);
LABEL_64:
            char v31 = 0;
            return v31 & 1;
          }
          goto LABEL_53;
        }
      }
LABEL_61:
      uint64_t v142 = v84;
      uint64_t v143 = v83;
      sub_10005E778(v97, (uint64_t)v98, v96, v95, v94, v93, v92, v91, v99, v90);
      sub_10005E778(v142, v143, v171, v170, v169, v163, v164, v165, v162, v161);
      goto LABEL_62;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_26;
      }
      uint64_t v101 = (uint64_t)v28;
      goto LABEL_20;
    default:
      sub_100060898((uint64_t)v28, (uint64_t)v22);
      if (swift_getEnumCaseMultiPayload())
      {
        swift_release();
        goto LABEL_26;
      }
      type metadata accessor for ShockwaveAnimationCoordinator();
      char v31 = static ShockwaveAnimationCoordinator.== infix(_:_:)();
      swift_release();
      swift_release();
LABEL_28:
      sub_100060810((uint64_t)v28);
      return v31 & 1;
  }
}

uint64_t sub_100060810(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbySharingInteractionViewState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006086C()
{
  return sub_10005E844();
}

uint64_t sub_100060898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000608FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100060950()
{
  uint64_t v1 = type metadata accessor for SFNearbySharingInteraction.InteractionType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000609FC@<X0>(void (*a1)(void, void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(type metadata accessor for SFNearbySharingInteraction.InteractionType() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_10005B798(a1, v4 + v10, *(void *)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8)), a2, a3, a4);
}

uint64_t sub_100060AB4(uint64_t a1)
{
  return sub_10005D4FC(a1, *(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(v1 + 16));
}

id sub_100060ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v58 = a2;
  uint64_t v62 = a1;
  uint64_t v61 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v83 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v82 = (char *)&v57 - v6;
  uint64_t v85 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v81 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v59 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  unint64_t v57 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  int v78 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v77 = (char *)&v57 - v11;
  uint64_t v76 = sub_10000AA4C(&qword_100181C60);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v74 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v73);
  uint64_t v72 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v57 - v15;
  uint64_t v70 = sub_10000AA4C(&qword_100181C20);
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000AA4C(&qword_100181C68);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000AA4C(&qword_100181C70);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000AA4C(&qword_100181C78);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100181C28);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = &v3[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContent];
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  sub_10000F330((uint64_t)&v88, (uint64_t)v97, &qword_100181AD8);
  uint64_t v29 = v3;
  sub_10000AA4C(&qword_100181AD8);
  Published.init(initialValue:)();
  sub_10000F394((uint64_t)&v88, &qword_100181AD8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v27, v24);
  uint64_t v30 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItem];
  *(void *)&long long v88 = 0;
  sub_10000AA4C(&qword_100181AE8);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v30, v23, v20);
  char v31 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItemOptions];
  *(void *)&long long v88 = 0;
  sub_10000AA4C(&qword_100181AF8);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v31, v19, v64);
  uint64_t v32 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__previewImage];
  *(void *)&long long v88 = 0;
  sub_10000AA4C((uint64_t *)&unk_100183710);
  uint64_t v33 = v65;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v32, v33, v67);
  uint64_t v34 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__resolvedRemotePerson];
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v92 = 0;
  unint64_t v93 = 0xFFFFFFFF00000000;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  int v96 = 0;
  sub_10000AA4C(&qword_100181B18);
  uint64_t v35 = v68;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v34, v35, v70);
  uint64_t v36 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContentActionBeginTime];
  uint64_t v37 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v38 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v71, 1, 1, v37);
  sub_10000F330(v38, v72, &qword_100184B10);
  uint64_t v39 = v74;
  Published.init(initialValue:)();
  sub_10000F394(v38, &qword_100184B10);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v36, v39, v76);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_interactionAssertionID], 1, 1, v85);
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v40 = (void *)sub_10009DE78((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v40 = &_swiftEmptySetSingleton;
  }
  uint64_t v41 = v62;
  uint64_t v42 = v61;
  uint64_t v43 = v60;
  uint64_t v44 = v84;
  uint64_t v45 = v59;
  uint64_t v46 = v58;
  uint64_t v47 = v57;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_subscriptions] = v40;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService] = 0;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider] = 0;
  uint64_t v48 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback];
  *(void *)uint64_t v48 = 0;
  *((void *)v48 + 1) = 0;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contentResolver] = v46;
  type metadata accessor for ShockwaveAnimationCoordinator();
  swift_allocObject();
  swift_retain();
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator] = ShockwaveAnimationCoordinator.init()();
  v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_includeRemotePersonDetails] = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v47, v41, v44);
  uint64_t v49 = v77;
  SFNearbySharingInteraction.init(_:)();
  swift_beginAccess();
  uint64_t v50 = v79;
  uint64_t v51 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v49, v80);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  swift_endAccess();
  uint64_t v52 = v81;
  SFAirDrop.NearbySharingInteraction.id.getter();
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id], v52, v85);
  uint64_t v53 = v82;
  SFAirDrop.NearbySharingInteraction.state.getter();
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v83, v53, v42);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v53, v42);
  swift_endAccess();

  uint64_t v54 = (objc_class *)type metadata accessor for NearbySharingInteractionViewModel(0);
  v87.receiver = v29;
  v87.super_class = v54;
  [super init];
  sub_10005741C();

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v41, v84);
  return v55;
}

id sub_1000616D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v58 = a2;
  uint64_t v62 = a1;
  uint64_t v83 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v61 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v57 - v6;
  uint64_t v86 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v81 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v60 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  unint64_t v57 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  int v78 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v77 = (char *)&v57 - v11;
  uint64_t v76 = sub_10000AA4C(&qword_100181C60);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v74 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000AA4C(&qword_100184B10);
  __chkstk_darwin(v73);
  uint64_t v72 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v57 - v15;
  uint64_t v70 = sub_10000AA4C(&qword_100181C20);
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000AA4C(&qword_100181C68);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000AA4C(&qword_100181C70);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000AA4C(&qword_100181C78);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000AA4C(&qword_100181C28);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = &v3[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContent];
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  sub_10000F330((uint64_t)&v88, (uint64_t)v97, &qword_100181AD8);
  uint64_t v29 = v3;
  sub_10000AA4C(&qword_100181AD8);
  Published.init(initialValue:)();
  sub_10000F394((uint64_t)&v88, &qword_100181AD8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v27, v24);
  uint64_t v30 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItem];
  *(void *)&long long v88 = 0;
  sub_10000AA4C(&qword_100181AE8);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v30, v23, v20);
  char v31 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__collaborationItemOptions];
  *(void *)&long long v88 = 0;
  sub_10000AA4C(&qword_100181AF8);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v31, v19, v64);
  uint64_t v32 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__previewImage];
  *(void *)&long long v88 = 0;
  sub_10000AA4C((uint64_t *)&unk_100183710);
  uint64_t v33 = v65;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v32, v33, v67);
  uint64_t v34 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__resolvedRemotePerson];
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v92 = 0;
  unint64_t v93 = 0xFFFFFFFF00000000;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  int v96 = 0;
  sub_10000AA4C(&qword_100181B18);
  uint64_t v35 = v68;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v34, v35, v70);
  uint64_t v36 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel__shareableContentActionBeginTime];
  uint64_t v37 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v38 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v71, 1, 1, v37);
  sub_10000F330(v38, v72, &qword_100184B10);
  uint64_t v39 = v74;
  Published.init(initialValue:)();
  sub_10000F394(v38, &qword_100184B10);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v36, v39, v76);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_interactionAssertionID], 1, 1, v86);
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contactDetailsResolvingTask] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v40 = (void *)sub_10009DE78((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v40 = &_swiftEmptySetSingleton;
  }
  uint64_t v41 = v62;
  uint64_t v42 = v61;
  uint64_t v43 = v84;
  uint64_t v44 = v60;
  uint64_t v45 = v59;
  uint64_t v46 = v58;
  uint64_t v47 = v57;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_subscriptions] = v40;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationService] = 0;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_collaborationsItemProvider] = 0;
  uint64_t v48 = &v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel____lazy_storage___optionsChangedCallback];
  *(void *)uint64_t v48 = 0;
  *((void *)v48 + 1) = 0;
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contentResolver] = v46;
  type metadata accessor for ShockwaveAnimationCoordinator();
  swift_allocObject();
  swift_retain();
  *(void *)&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_animationCoordinator] = ShockwaveAnimationCoordinator.init()();
  v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_includeRemotePersonDetails] = SFProximityHandoff.Interaction.showDeviceDetails.getter() & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v47, v41, v43);
  uint64_t v49 = v77;
  SFNearbySharingInteraction.init(_:)();
  swift_beginAccess();
  uint64_t v50 = v79;
  uint64_t v51 = v80;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v49, v80);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  swift_endAccess();
  uint64_t v52 = v81;
  SFProximityHandoff.Interaction.id.getter();
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v29[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id], v52, v86);
  SFProximityHandoff.Interaction.state.getter();
  swift_beginAccess();
  uint64_t v53 = v83;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v82, v45, v83);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v53);
  swift_endAccess();

  uint64_t v54 = (objc_class *)type metadata accessor for NearbySharingInteractionViewModel(0);
  v87.receiver = v29;
  v87.super_class = v54;
  id v55 = [super init];
  sub_10005741C();

  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v41, v84);
  return v55;
}

void sub_1000622FC(uint64_t a1)
{
  sub_100079FC4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100062308()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062340()
{
  uint64_t v1 = sub_10000AA4C(&qword_1001829F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10006242C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_1001829F0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100013ABC;
  return sub_10005A674(a1, v6, v7, v8, v9);
}

uint64_t sub_100062554(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000625DC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100062614(uint64_t a1)
{
  return sub_1000A3EE4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10006261C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006265C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_100058990(a1, v4, v5, v6);
}

uint64_t sub_100062710(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100062760@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

uint64_t sub_100062788(void **a1, void **a2)
{
  return sub_10005E4D0(a1, a2);
}

uint64_t sub_1000627B0@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

_OWORD *sub_1000627DC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000627EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
}

uint64_t sub_1000627F4@<X0>(void *a1@<X8>)
{
  return sub_10005E440(a1);
}

uint64_t sub_10006281C(void **a1, void **a2)
{
  return sub_10005E4D0(a1, a2);
}

uint64_t *sub_100062844(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *(void *)a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v11 = *(void *)a2;
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(void *)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v15 = *(void *)(a2 + 32);
        uint64_t v16 = *(void *)(a2 + 40);
        uint64_t v17 = *(void *)(a2 + 48);
        uint64_t v29 = *(void *)(a2 + 64);
        unint64_t v31 = *(void *)(a2 + 72);
        uint64_t v33 = *(void *)(a2 + 80);
        uint64_t v35 = *(void *)(a2 + 88);
        int v37 = *(_DWORD *)(a2 + 96);
        uint64_t v18 = *(void *)a2;
        uint64_t v19 = *(void *)(a2 + 56);
        sub_10005EAC4(v18, v12, v13, v14, v15, v16, v17, v19, v29, v31);
        *a1 = v11;
        a1[1] = v12;
        a1[2] = v13;
        a1[3] = v14;
        a1[4] = v15;
        a1[5] = v16;
        a1[6] = v17;
        a1[7] = v19;
        a1[8] = v29;
        a1[9] = v31;
        a1[10] = v33;
        a1[11] = v35;
        *((_DWORD *)a1 + 24) = v37;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v20 = *(void *)a2;
        uint64_t v21 = *(void *)(a2 + 8);
        uint64_t v22 = *(void *)(a2 + 16);
        uint64_t v23 = *(void *)(a2 + 24);
        uint64_t v24 = *(void *)(a2 + 32);
        uint64_t v25 = *(void *)(a2 + 40);
        uint64_t v26 = *(void *)(a2 + 56);
        uint64_t v28 = *(void *)(a2 + 48);
        uint64_t v30 = *(void *)(a2 + 64);
        unint64_t v32 = *(void *)(a2 + 72);
        uint64_t v34 = *(void *)(a2 + 80);
        uint64_t v36 = *(void *)(a2 + 88);
        int v38 = *(_DWORD *)(a2 + 96);
        sub_10005EAC4(*(void *)a2, v21, v22, v23, v24, v25, v28, v26, v30, v32);
        *a1 = v20;
        a1[1] = v21;
        a1[2] = v22;
        a1[3] = v23;
        a1[4] = v24;
        a1[5] = v25;
        a1[6] = v28;
        a1[7] = v26;
        a1[8] = v30;
        a1[9] = v32;
        a1[10] = v34;
        a1[11] = v36;
        *((_DWORD *)a1 + 24) = v38;
        long long v27 = *(_OWORD *)(a2 + 128);
        *((_OWORD *)a1 + 8) = v27;
        (**(void (***)(uint64_t, uint64_t))(v27 - 8))((uint64_t)(a1 + 13), a2 + 104);
        a1[18] = *(void *)(a2 + 144);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, (const void *)a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100062BB0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = swift_release();
      break;
    case 1:
      uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
      goto LABEL_7;
    case 2:
      uint64_t v3 = type metadata accessor for UUID();
LABEL_7:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 3:
      uint64_t result = sub_10005E778(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
      break;
    case 4:
      sub_10005E778(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
      sub_10000AB98(a1 + 104);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_100062D24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *a1 = *a2;
      swift_retain();
      goto LABEL_8;
    case 1u:
      uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_8;
    case 2u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_8;
    case 3u:
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      uint64_t v10 = a2[2];
      uint64_t v11 = a2[3];
      uint64_t v12 = a2[4];
      uint64_t v13 = a2[5];
      uint64_t v14 = a2[6];
      uint64_t v27 = a2[8];
      unint64_t v29 = a2[9];
      uint64_t v31 = a2[10];
      uint64_t v33 = a2[11];
      int v35 = *((_DWORD *)a2 + 24);
      uint64_t v15 = *a2;
      uint64_t v16 = a2[7];
      sub_10005EAC4(v15, v9, v10, v11, v12, v13, v14, v16, v27, v29);
      *a1 = v8;
      a1[1] = v9;
      a1[2] = v10;
      a1[3] = v11;
      a1[4] = v12;
      a1[5] = v13;
      a1[6] = v14;
      a1[7] = v16;
      a1[8] = v27;
      a1[9] = v29;
      a1[10] = v31;
      a1[11] = v33;
      *((_DWORD *)a1 + 24) = v35;
      goto LABEL_8;
    case 4u:
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      uint64_t v19 = a2[2];
      uint64_t v20 = a2[3];
      uint64_t v21 = a2[4];
      uint64_t v22 = a2[5];
      uint64_t v23 = a2[7];
      uint64_t v26 = a2[6];
      uint64_t v28 = a2[8];
      unint64_t v30 = a2[9];
      uint64_t v32 = a2[10];
      uint64_t v34 = a2[11];
      int v36 = *((_DWORD *)a2 + 24);
      sub_10005EAC4(*a2, v18, v19, v20, v21, v22, v26, v23, v28, v30);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v26;
      a1[7] = v23;
      a1[8] = v28;
      a1[9] = v30;
      a1[10] = v32;
      a1[11] = v34;
      *((_DWORD *)a1 + 24) = v36;
      long long v24 = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 8) = v24;
      (**(void (***)(uint64_t, uint64_t))(v24 - 8))((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
      a1[18] = a2[18];
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_10006303C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100060810((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        swift_retain();
        goto LABEL_9;
      case 1u:
        uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 2u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 3u:
        uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        uint64_t v10 = a2[2];
        uint64_t v11 = a2[3];
        uint64_t v12 = a2[4];
        uint64_t v13 = a2[5];
        uint64_t v14 = a2[6];
        uint64_t v27 = a2[8];
        unint64_t v29 = a2[9];
        uint64_t v31 = a2[10];
        uint64_t v33 = a2[11];
        int v35 = *((_DWORD *)a2 + 24);
        uint64_t v15 = *a2;
        uint64_t v16 = a2[7];
        sub_10005EAC4(v15, v9, v10, v11, v12, v13, v14, v16, v27, v29);
        *a1 = v8;
        a1[1] = v9;
        a1[2] = v10;
        a1[3] = v11;
        a1[4] = v12;
        a1[5] = v13;
        a1[6] = v14;
        a1[7] = v16;
        a1[8] = v27;
        a1[9] = v29;
        a1[10] = v31;
        a1[11] = v33;
        *((_DWORD *)a1 + 24) = v35;
        goto LABEL_9;
      case 4u:
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        uint64_t v19 = a2[2];
        uint64_t v20 = a2[3];
        uint64_t v21 = a2[4];
        uint64_t v22 = a2[5];
        uint64_t v23 = a2[7];
        uint64_t v26 = a2[6];
        uint64_t v28 = a2[8];
        unint64_t v30 = a2[9];
        uint64_t v32 = a2[10];
        uint64_t v34 = a2[11];
        int v36 = *((_DWORD *)a2 + 24);
        sub_10005EAC4(*a2, v18, v19, v20, v21, v22, v26, v23, v28, v30);
        *a1 = v17;
        a1[1] = v18;
        a1[2] = v19;
        a1[3] = v20;
        a1[4] = v21;
        a1[5] = v22;
        a1[6] = v26;
        a1[7] = v23;
        a1[8] = v28;
        a1[9] = v30;
        a1[10] = v32;
        a1[11] = v34;
        *((_DWORD *)a1 + 24) = v36;
        uint64_t v24 = a2[16];
        a1[16] = v24;
        a1[17] = a2[17];
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
        a1[18] = a2[18];
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_100063368(void *a1, const void *a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100063478(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100060810((uint64_t)a1);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100063598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000635C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000635EC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000635FC()
{
  uint64_t result = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000636E4(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100063748()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 120) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  sub_10000AB98(v0 + 32);
  sub_10000AB98(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100063848(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100063860(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = (uint64_t)(v1 + 9);
  uint64_t v10 = v1[14];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10001FD90;
  return sub_10005DA84(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000639A8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1000639D4(uint64_t a1, void *a2)
{
  long long v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100063A3C(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t sub_100063A90()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100181DE0);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100181DE0);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D128);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100063B58()
{
  uint64_t result = SFProximityHandoffUIServerDomain.getter();
  qword_100181DF8 = result;
  unk_100181E00 = v1;
  return result;
}

uint64_t sub_100063B7C()
{
  uint64_t result = SFProximityHandoffUIServerService.getter();
  qword_100181E08 = result;
  unk_100181E10 = v1;
  return result;
}

id sub_100063BA0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ProximityHandoffUIService()) init];
  qword_10018CED0 = (uint64_t)result;
  return result;
}

id sub_100063BD0()
{
  uint64_t v1 = OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService____lazy_storage___interface;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService____lazy_storage___interface);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService____lazy_storage___interface);
  }
  else
  {
    id v4 = sub_100064778();
    unint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_100063C30()
{
  ObjectCFStringRef Type = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_listener] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_connection] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService____lazy_storage___interface] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_proximityHandoffUIClient] = 0;
  v17.receiver = v0;
  v17.super_class = ObjectType;
  id v2 = [super init];
  v15[2] = v2;
  v15[3] = ObjectType;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100065048;
  *(void *)(v3 + 24) = v15;
  aBlock[4] = sub_100065080;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000639D0;
  aBlock[3] = &unk_10016A8B8;
  id v4 = _Block_copy(aBlock);
  unint64_t v5 = (char *)self;
  id v6 = v2;
  swift_retain();
  id v7 = [v5 listenerWithConfigurator:v4];
  _Block_release(v4);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = (char *)OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_listener;
    uint64_t v8 = *(void **)((char *)v6 + OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_listener);
    *(void *)((char *)v6 + OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_listener) = v7;

    if (qword_10017F618 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B150(v9, (uint64_t)qword_100181DE0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "ProximityHandoffUIService listener is activating...", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = *(void **)&v5[(void)v6];
  if (v13)
  {
    id v14 = v13;
    [v14 activate];
  }
  else
  {
    __break(1u);
  }
}

id sub_100063EC4(void *a1, uint64_t a2)
{
  if (qword_10017F620 != -1) {
    swift_once();
  }
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 setDomain:v4];

  if (qword_10017F628 != -1) {
    swift_once();
  }
  NSString v5 = String._bridgeToObjectiveC()();
  [a1 setService:v5];

  return [a1 setDelegate:a2];
}

uint64_t type metadata accessor for ProximityHandoffUIService()
{
  return self;
}

void sub_1000640E8(void *a1, uint64_t a2)
{
  sub_100064FC8();
  NSString v4 = (void *)static OS_dispatch_queue.main.getter();
  [a1 setTargetQueue:v4];

  id v5 = [self userInitiated];
  [a1 setServiceQuality:v5];

  id v6 = sub_100063BD0();
  [a1 setInterface:v6];

  [a1 setInterfaceTarget:a2];
  uint64_t v15 = sub_100064358;
  uint64_t v16 = 0;
  os_log_type_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_1000639D4;
  id v14 = &unk_10016A7F0;
  id v7 = _Block_copy(&v11);
  [a1 setActivationHandler:v7];
  _Block_release(v7);
  uint64_t v15 = sub_100064440;
  uint64_t v16 = 0;
  os_log_type_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_1000639D4;
  id v14 = &unk_10016A818;
  uint64_t v8 = _Block_copy(&v11);
  [a1 setInterruptionHandler:v8];
  _Block_release(v8);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = sub_100065040;
  uint64_t v16 = v9;
  os_log_type_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_1000639D4;
  id v14 = &unk_10016A868;
  uint64_t v10 = _Block_copy(&v11);
  swift_release();
  [a1 setInvalidationHandler:v10];
  _Block_release(v10);
}

void sub_100064358()
{
  if (qword_10017F618 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B150(v0, (uint64_t)qword_100181DE0);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    id v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "ProximityHandoffUIService: connection activated from client!", v2, 2u);
    swift_slowDealloc();
  }
}

id sub_100064440(void *a1)
{
  if (qword_10017F618 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_100181DE0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ProximityHandoffUIService: connection interrupted, reconnecting", v5, 2u);
    swift_slowDealloc();
  }

  return [a1 activate];
}

uint64_t sub_100064538()
{
  if (qword_10017F618 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B150(v0, (uint64_t)qword_100181DE0);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ProximityHandoffUIService: connection invalidated", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = *(void **)&Strong[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_connection];
    *(void *)&Strong[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_connection] = 0;
  }
  swift_beginAccess();
  id v6 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    *(void *)&v6[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_proximityHandoffUIClient] = 0;

    swift_unknownObjectRelease();
  }
  if (qword_10017F780 != -1) {
    swift_once();
  }
  *(void *)(qword_10018D0C0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_proximityHandoffClient) = 0;
  swift_release();
  return sub_1000A4CD0();
}

id sub_100064778()
{
  if (qword_10017F628 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [self interfaceWithIdentifier:v0];

  os_log_type_t v2 = self;
  id v3 = [v2 protocolForProtocol:&OBJC_PROTOCOL____TtP7Sharing34SFProximityHandoffUIServerProtocol_];
  [v1 setServer:v3];

  id v4 = [v2 protocolForProtocol:&OBJC_PROTOCOL____TtP7Sharing34SFProximityHandoffUIClientProtocol_];
  [v1 setClient:v4];

  [v1 setClientMessagingExpectation:0];
  return v1;
}

uint64_t sub_1000648C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFProximityHandoffClient.Identifier();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F780 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10018D0C0;
  type metadata accessor for SFProximityHandoffClient();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for SFProximityHandoffClient.Identifier.airDropUI(_:), v2);
  *(void *)(v6 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_proximityHandoffClient) = SFProximityHandoffClient.__allocating_init(identifier:)();
  swift_retain();
  swift_release();
  sub_1000A4CD0();
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a1, 0);
}

uint64_t sub_100064A28(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10017F618 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_100181DE0);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    aBlock[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ProximityHandoffUIService received a connection! %@", v8, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_connection;
  uint64_t v12 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_connection];
  if (v12)
  {
    id v13 = v12;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "ProximityHandoffUIService: a connection already exists, invalidating old connection", v16, 2u);
      swift_slowDealloc();
    }

    [v13 invalidate];
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v2;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100064EA8;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_100064EC0;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000639D0;
  aBlock[3] = &unk_10016A7C8;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v2;
  swift_retain();
  swift_release();
  [v5 configureConnection:v19];
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v19)
  {
    __break(1u);
  }
  else
  {
    [v5 activate];
    uint64_t v22 = *(void **)&v2[v11];
    *(void *)&v2[v11] = v5;
    id v23 = v5;

    if ([v23 remoteTarget])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
    }
    sub_100064F00((uint64_t)&v25, (uint64_t)aBlock);
    sub_100064F00((uint64_t)aBlock, (uint64_t)&v25);
    if (*((void *)&v26 + 1))
    {
      sub_10000AA4C(&qword_100181EC8);
      if (swift_dynamicCast())
      {
        *(void *)&v20[OBJC_IVAR____TtC9AirDropUI25ProximityHandoffUIService_proximityHandoffUIClient] = v24;
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_100064F68((uint64_t)&v25);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100064E70()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100064EA8(void *a1)
{
  sub_1000640E8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100064EB0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100064EC0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100064EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100064EF8()
{
  return swift_release();
}

uint64_t sub_100064F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064F68(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181560);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100064FC8()
{
  unint64_t result = qword_1001815D0;
  if (!qword_1001815D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001815D0);
  }
  return result;
}

uint64_t sub_100065008()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100065040()
{
  return sub_100064538();
}

id sub_100065048(void *a1)
{
  return sub_100063EC4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100065050()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100065084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D9A8();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100065108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D9A8();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10006518C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000AA4C(&qword_1001825B0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2 <= 0.75) {
    double v9 = 0.0;
  }
  else {
    double v9 = (*v2 + -0.75) * 4.0;
  }
  uint64_t v10 = sub_10000AA4C(&qword_1001825B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, a1, v10);
  *(double *)&v8[*(int *)(v6 + 44)] = v9;
  return sub_10000F2CC((uint64_t)v8, a2, &qword_1001825B0);
}

double sub_100065298@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double sub_1000652A4(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

double (*sub_1000652B0(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return sub_1000652DC;
}

double sub_1000652DC(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

uint64_t sub_1000652F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000AA4C(&qword_100182460);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *v2;
  uint64_t v10 = sub_10000AA4C(&qword_100182468);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, a1, v10);
  uint64_t v11 = &v8[*(int *)(v6 + 44)];
  double v12 = 80.0;
  if (v9)
  {
    double v13 = 0.0;
  }
  else
  {
    double v12 = 0.0;
    double v13 = 1.0;
  }
  *(double *)uint64_t v11 = v12;
  v11[8] = 0;
  sub_10000F330((uint64_t)v8, a2, &qword_100182460);
  *(double *)(a2 + *(int *)(sub_10000AA4C(&qword_100182470) + 36)) = v13;
  return sub_10000F394((uint64_t)v8, &qword_100182460);
}

uint64_t sub_100065420()
{
  uint64_t v0 = sub_10000AA4C(&qword_100182180);
  sub_10001EA1C(v0, qword_100181F30);
  sub_10000B150(v0, (uint64_t)qword_100181F30);
  sub_10000AA4C(&qword_100182188);
  sub_10000B100(&qword_100182190);
  sub_10000B100(&qword_100182198);
  sub_10000B100(&qword_1001821A0);
  sub_10000B100(&qword_1001821A8);
  sub_10000F288(&qword_1001821B0, &qword_1001821A0);
  sub_10000F288(&qword_1001821B8, &qword_1001821A8);
  swift_getOpaqueTypeConformance2();
  sub_10000F288(&qword_1001821C0, &qword_100182198);
  swift_getOpaqueTypeConformance2();
  return KeyframeTimeline.init<A>(initialValue:content:)();
}

uint64_t sub_1000655E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v1 = sub_10000AA4C(&qword_100182188);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v58 = v1;
  uint64_t v59 = v2;
  __chkstk_darwin(v1);
  uint64_t v56 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000AA4C(&qword_100182190);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000AA4C(&qword_100182198);
  uint64_t v65 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v51 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v44 - v7;
  uint64_t v8 = sub_10000AA4C(&qword_1001821A8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  uint64_t v64 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)&v44 - v13;
  uint64_t v14 = sub_10000AA4C(&qword_1001821A0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v61 = (char *)&v44 - v19;
  swift_getKeyPath();
  uint64_t v20 = sub_10000AA4C(&qword_1001821C8);
  uint64_t v21 = sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  KeyframeTrack.init(_:content:)();
  uint64_t v47 = sub_10000F288(&qword_1001821B0, &qword_1001821A0);
  uint64_t v46 = v14;
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  uint64_t v49 = v15 + 8;
  uint64_t v50 = v22;
  v22(v17, v14);
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821D8);
  uint64_t v23 = sub_10000B100(&qword_1001821E0);
  uint64_t v24 = sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  uint64_t v66 = (ValueMetadata *)&type metadata for Double;
  uint64_t v67 = v23;
  uint64_t v68 = v20;
  uint64_t v69 = v24;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  KeyframeTrack.init(_:content:)();
  uint64_t v25 = sub_10000F288(&qword_1001821B8, &qword_1001821A8);
  uint64_t v26 = v63;
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v64 + 8);
  v64 += 8;
  uint64_t v48 = v27;
  v27(v11, v26);
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821F0);
  uint64_t v66 = (ValueMetadata *)&type metadata for Double;
  uint64_t v67 = v23;
  uint64_t v68 = v23;
  uint64_t v69 = v24;
  uint64_t v70 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = v51;
  KeyframeTrack.init(_:content:)();
  uint64_t v29 = sub_10000F288(&qword_1001821C0, &qword_100182198);
  unint64_t v30 = v52;
  uint64_t v31 = v53;
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v65 + 8);
  v65 += 8;
  uint64_t v45 = v32;
  v32(v28, v31);
  uint64_t v44 = v17;
  uint64_t v33 = v46;
  uint64_t v34 = v47;
  static KeyframesBuilder.buildPartialBlock<A>(first:)();
  int v35 = v54;
  uint64_t v36 = v63;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v66 = &type metadata for SwoopTransitionViewModifier.Value;
  uint64_t v67 = v33;
  uint64_t v68 = v36;
  uint64_t v69 = v34;
  uint64_t v70 = v25;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  int v38 = v56;
  uint64_t v39 = v35;
  uint64_t v40 = v55;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v66 = &type metadata for SwoopTransitionViewModifier.Value;
  uint64_t v67 = v40;
  uint64_t v68 = v31;
  uint64_t v69 = OpaqueTypeConformance2;
  uint64_t v70 = v29;
  swift_getOpaqueTypeConformance2();
  uint64_t v41 = v58;
  static KeyframesBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v41);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v40);
  uint64_t v42 = v50;
  v50(v44, v33);
  v45(v30, v31);
  v48(v62, v63);
  return v42(v61, v33);
}

uint64_t sub_100065D98()
{
  return sub_100068CD0(0.0);
}

uint64_t sub_100065DB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = type metadata accessor for Spring();
  __chkstk_darwin(v1 - 8);
  uint64_t v21 = sub_10000AA4C(&qword_1001821C8);
  uint64_t v24 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v20 - v5;
  uint64_t v7 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_10000AA4C(&qword_1001821E0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v22 = (char *)v20 - v13;
  uint64_t v26 = 0x3FDCCCCCCCCCCCCDLL;
  static UnitCurve.linear.getter();
  LinearKeyframe.init(_:duration:timingCurve:)();
  sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v20[1] = v9 + 8;
  uint64_t v23 = v14;
  v14(v11, v8);
  uint64_t v28 = 0x3FF0000000000000;
  Spring.init(mass:stiffness:damping:allowOverDamping:)();
  uint64_t v26 = 0;
  char v27 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)();
  sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  uint64_t v15 = v21;
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v24 + 8);
  v16(v3, v15);
  uint64_t v17 = v22;
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v18 = v23;
  v23(v11, v8);
  v16(v6, v15);
  return v18(v17, v8);
}

uint64_t sub_1000661B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A544((void (*)(uint64_t))&static UnitCurve.easeOut.getter, a1, 18.0);
}

uint64_t sub_1000661DC()
{
  if (qword_10017F638 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_100182180);
  sub_10000B150(v0, (uint64_t)qword_100181F30);
  uint64_t result = KeyframeTimeline.duration.getter();
  qword_10018CED8 = v2;
  return result;
}

uint64_t sub_100066258@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v30 = a2;
  uint64_t v2 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001824B8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_1001824B0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UnitPoint.center.getter();
  uint64_t v14 = type metadata accessor for EmptyVisualEffect();
  uint64_t v15 = sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  VisualEffect.scale(_:anchor:)();
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v33.origin.x = v17;
  v33.origin.y = v19;
  v33.size.width = v21;
  v33.size.height = v23;
  CGRectGetMidY(v33);
  GeometryProxy.size.getter();
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  VisualEffect.offset(x:y:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v31 = v6;
  uint64_t v32 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v28;
  VisualEffect.blur(radius:opaque:)();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v13, v25);
}

uint64_t sub_1000665E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006CDB4();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100066664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006CDB4();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_1000666E8()
{
  if (qword_10017F638 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_100182180);
  sub_10000B150(v0, (uint64_t)qword_100181F30);
  KeyframeTimeline.value(time:)();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = v3;
  *(void *)(v1 + 32) = v4;
  sub_10000AA4C(&qword_100182498);
  sub_10000AA4C(&qword_1001824A0);
  sub_10000F288(&qword_1001824A8, &qword_100182498);
  sub_10000B100(&qword_1001824B0);
  sub_10000B100(&qword_1001824B8);
  type metadata accessor for EmptyVisualEffect();
  sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  return swift_release();
}

double (*sub_100066928(void *a1))(uint64_t)
{
  a1[1] = v1;
  *a1 = *v1;
  return sub_10006DC3C;
}

id sub_100066954@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v38 = a2;
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000AA4C(&qword_100182150);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000AA4C(&qword_100182158);
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000AA4C(&qword_100182160);
  __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  double v18 = (char *)&v37 - v17;
  __chkstk_darwin(v19);
  CGFloat v21 = (char *)&v37 - v20;
  int v42 = a1;
  if (TransitionPhase.isIdentity.getter())
  {
    sub_10000AA4C(&qword_100182178);
    double v22 = (void *)swift_allocObject();
    *((_OWORD *)v22 + 1) = xmmword_10012A270;
    id result = [self effectWithBlurRadius:25.0];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v24 = a3;
    v22[4] = result;
    *((unsigned char *)v22 + 40) = 1;
  }
  else
  {
    uint64_t v24 = a3;
    double v22 = _swiftEmptyArrayStorage;
  }
  double v25 = a4 * 0.75;
  uint64_t v26 = (char *)v9 + *(int *)(v7 + 20);
  uint64_t v27 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v28 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
  double *v9 = v25;
  v9[1] = v25;
  uint64_t v29 = (uint64_t)&v12[*(int *)(v10 + 36)];
  sub_10006CE08((uint64_t)v9, v29, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v29 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
  uint64_t v30 = sub_10000AA4C(&qword_100182168);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v12, v38, v30);
  sub_10006B49C((uint64_t)v9);
  uint64_t v31 = 0;
  if (TransitionPhase.isIdentity.getter())
  {
    if (qword_10017F640 != -1) {
      swift_once();
    }
    uint64_t v31 = qword_10018CED8;
  }
  sub_10000F330((uint64_t)v12, (uint64_t)v14, &qword_100182150);
  *(void *)&v14[*(int *)(v39 + 36)] = v31;
  sub_10000F394((uint64_t)v12, &qword_100182150);
  if (qword_10017F640 != -1) {
    swift_once();
  }
  static Animation.linear(duration:)();
  uint64_t v32 = Animation.speed(_:)();
  swift_release();
  char v33 = TransitionPhase.isIdentity.getter();
  sub_10000F330((uint64_t)v14, (uint64_t)v18, &qword_100182158);
  uint64_t v34 = &v18[*(int *)(v40 + 36)];
  *(void *)uint64_t v34 = v32;
  v34[8] = v33 & 1;
  sub_10000F394((uint64_t)v14, &qword_100182158);
  sub_10000F2CC((uint64_t)v18, (uint64_t)v21, &qword_100182160);
  uint64_t v35 = v41;
  sub_10000F330((uint64_t)v21, v41, &qword_100182160);
  *(void *)uint64_t v24 = v22;
  *(_OWORD *)(v24 + 8) = xmmword_10012C240;
  uint64_t v36 = sub_10000AA4C(&qword_100182170);
  sub_10000F330(v35, v24 + *(int *)(v36 + 48), &qword_100182160);
  swift_bridgeObjectRetain();
  sub_10000F394((uint64_t)v21, &qword_100182160);
  sub_10000F394(v35, &qword_100182160);
  return (id)swift_bridgeObjectRelease();
}

id sub_100066E30@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  double v7 = *v3;
  *a3 = static Alignment.center.getter();
  a3[1] = v8;
  uint64_t v9 = sub_10000AA4C(&qword_100182148);
  return sub_100066954(a2, a1, (uint64_t)a3 + *(int *)(v9 + 44), v7);
}

uint64_t sub_100066F44()
{
  sub_100030180(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LumaTrackingBackdropView.Coordinator()
{
  return self;
}

ValueMetadata *type metadata accessor for SwoopTransition()
{
  return &type metadata for SwoopTransition;
}

uint64_t *sub_100066FB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100182098);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t sub_100067088(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  sub_10000AA4C(&qword_100182098);

  return swift_release();
}

uint64_t sub_100067104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = sub_10000AA4C(&qword_100182098);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_100067184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = sub_10000AA4C(&qword_100182098);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100067218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = sub_10000AA4C(&qword_100182098);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t sub_100067294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = sub_10000AA4C(&qword_100182098);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_release();
  return a1;
}

uint64_t sub_100067318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006732C);
}

uint64_t sub_10006732C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C208(a1, a2, a3, &qword_100182098);
}

uint64_t sub_100067338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006734C);
}

uint64_t sub_10006734C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006C294(a1, a2, a3, a4, &qword_100182098);
}

uint64_t type metadata accessor for LumaTrackingViewModifier(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_1001820F8);
}

void sub_100067378(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100067398()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000673B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v15 - v7;
  if (a1 == 2)
  {
    uint64_t v13 = (unsigned int *)&enum case for ColorScheme.dark(_:);
  }
  else
  {
    if (a1 != 1)
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000B150(v9, (uint64_t)qword_10018D128);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v12 = 134217984;
        v15[1] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unknown background luminance level: %lu", v12, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v13 = (unsigned int *)&enum case for ColorScheme.light(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v8, *v13, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_10000AA4C(&qword_1001822C0);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

id sub_10006760C()
{
  sub_10000AA4C(&qword_1001824C8);
  UIViewRepresentableContext.coordinator.getter();
  id v0 = [objc_allocWithZone((Class)_UILumaTrackingBackdropView) initWithTransitionBoundaries:v2 delegate:0.4 frame:0.6 0.0 0.0 0.0 0.0];
  swift_release();
  [v0 setPaused:0];
  return v0;
}

uint64_t sub_1000676B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(a1);
  sub_10000AA4C(&qword_1001824C8);
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v7 = v12[1];
  sub_10006CE08(v4, (uint64_t)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LumaTrackingBackdropView);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_10006CE74((uint64_t)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  uint64_t v10 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = sub_10006CED8;
  *(void *)(v7 + 24) = v9;
  sub_100030180(v10);
  return swift_release();
}

uint64_t sub_1000677E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  type metadata accessor for LumaTrackingBackdropView.Coordinator();
  uint64_t v6 = swift_allocObject();
  sub_10006CE08(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LumaTrackingBackdropView);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  sub_10006CE74((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *(void *)(v6 + 16) = sub_10006CED8;
  *(void *)(v6 + 24) = v8;
  uint64_t result = sub_100030180(0);
  *a2 = v6;
  return result;
}

uint64_t sub_100067914()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_100067958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006CD50(&qword_1001824D0, (void (*)(uint64_t))type metadata accessor for LumaTrackingBackdropView);

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000679EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006CD50(&qword_1001824D0, (void (*)(uint64_t))type metadata accessor for LumaTrackingBackdropView);

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100067A80()
{
}

uint64_t sub_100067AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_1001821F8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000AA4C(&qword_100182098);
  State.wrappedValue.getter();
  uint64_t v13 = (uint64_t *)&v11[*(int *)(v9 + 44)];
  uint64_t v14 = sub_10000AA4C(&qword_100184C40);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v13 + *(int *)(v14 + 28), v7, v4);
  *uint64_t v13 = KeyPath;
  uint64_t v15 = sub_10000AA4C(&qword_100182200);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v11, a1, v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v18 = v17;
  uint64_t v19 = a2 + *(int *)(sub_10000AA4C(&qword_100182208) + 36);
  State.projectedValue.getter();
  uint64_t v20 = (uint64_t *)(v19 + *(int *)(sub_10000AA4C(&qword_100182210) + 36));
  *uint64_t v20 = v16;
  v20[1] = v18;
  return sub_10000F2CC((uint64_t)v11, a2, &qword_1001821F8);
}

uint64_t sub_100067CF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100067D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v22 - v9;
  sub_10006CA78((uint64_t)v22 - v9);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.light(_:), v4);
  char v11 = static ColorScheme.== infix(_:_:)();
  unint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  v12(v10, v4);
  float v13 = 1.718;
  if (v11) {
    float v13 = 1.287;
  }
  float v14 = -1.107;
  if (v11) {
    float v14 = -0.715;
  }
  *(float *)uint64_t v22 = v13;
  *(float *)&v22[1] = v14;
  float v15 = -0.112;
  if (v11) {
    float v15 = -0.072;
  }
  *(float *)&v22[2] = v15;
  v22[3] = 0;
  float v16 = -0.329;
  if (v11) {
    float v16 = -0.213;
  }
  float v17 = 0.5;
  if (v11) {
    float v17 = 0.0;
  }
  *(float *)&v22[4] = v17;
  *(float *)&v22[5] = v16;
  float v18 = 0.941;
  if (v11) {
    float v18 = 0.785;
  }
  float v19 = 1.935;
  if (v11) {
    float v19 = 1.428;
  }
  *(float *)&v22[6] = v18;
  *(float *)&v22[7] = v15;
  v22[8] = 0;
  *(float *)&v22[9] = v17;
  *(float *)&v22[10] = v16;
  *(float *)&v22[11] = v14;
  *(float *)&v22[12] = v19;
  v22[13] = 0;
  *(float *)&v22[14] = v17;
  long long v23 = xmmword_10012C250;
  int v24 = 0;
  sub_10000AA4C(&qword_100182450);
  View._colorMatrix(_:)();
  uint64_t v20 = sub_10000AA4C(&qword_100182458);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a2, a1, v20);
}

id sub_100067FB8@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 1) == 0)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v3 = _swiftEmptyArrayStorage;
    goto LABEL_6;
  }
  sub_10000AA4C(&qword_100182178);
  uint64_t v3 = (void *)swift_allocObject();
  *((_OWORD *)v3 + 1) = xmmword_10012C260;
  uint64_t v4 = self;
  uint64_t result = [v4 effectWithBlurRadius:35.0];
  if (result)
  {
    v3[4] = result;
    *((unsigned char *)v3 + 40) = 1;
    v3[6] = 0xBFC3333333333333;
    *((unsigned char *)v3 + 56) = 2;
    v6[0] = xmmword_10012C270;
    v6[1] = xmmword_10012C280;
    uint64_t v6[2] = xmmword_10012C290;
    v6[3] = xmmword_10012C280;
    v6[4] = xmmword_10012C2A0;
    v6[5] = xmmword_10012C2B0;
    v6[6] = xmmword_10012C2C0;
    v6[7] = xmmword_10012C2D0;
    v6[8] = vdupq_n_s64(0x3FABA5E353F7CED9uLL);
    v6[9] = xmmword_10012C2E0;
    v3[8] = [self colorEffectMatrix:v6];
    *((unsigned char *)v3 + 72) = 0;
    uint64_t v5 = (void *)swift_allocObject();
    *((_OWORD *)v5 + 1) = xmmword_10012A270;
    uint64_t result = [v4 effectWithBlurRadius:72.0];
    if (result)
    {
      v5[4] = result;
      *((unsigned char *)v5 + 40) = 1;
LABEL_6:
      *(void *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_10012C2F0;
      *(void *)(a2 + 24) = v5;
      *(_OWORD *)(a2 + 32) = xmmword_10012C300;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 sub_100068184@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  sub_100067FB8(v3, (uint64_t)&v11);
  uint64_t v7 = v11;
  uint64_t v8 = v13;
  __n128 result = v12;
  long long v10 = v14;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = v10;
  return result;
}

uint64_t sub_1000681F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    GeometryProxy.size.getter();
    static CoordinateSpaceProtocol<>.global.getter();
    GeometryProxy.frame<A>(in:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  type metadata accessor for EmptyVisualEffect();
  sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  return VisualEffect.offset(x:y:)();
}

uint64_t sub_100068378()
{
  char v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  sub_10000AA4C(&qword_100182478);
  sub_10000AA4C(&qword_100182480);
  sub_10000F288(&qword_100182488, &qword_100182478);
  type metadata accessor for EmptyVisualEffect();
  sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  return swift_release();
}

uint64_t sub_1000684D8()
{
  uint64_t v0 = sub_10000AA4C(&qword_100182418);
  sub_10001EA1C(v0, qword_100181F48);
  sub_10000B150(v0, (uint64_t)qword_100181F48);
  sub_10000AA4C(&qword_100182420);
  sub_10000B100(&qword_100182428);
  sub_10000B100(&qword_100182430);
  sub_10000B100(&qword_100182438);
  sub_10000F288(&qword_100182440, &qword_100182438);
  swift_getOpaqueTypeConformance2();
  sub_10000F288(&qword_100182448, &qword_100182430);
  swift_getOpaqueTypeConformance2();
  return KeyframeTimeline.init<A>(initialValue:content:)();
}

uint64_t sub_100068668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v1 = sub_10000AA4C(&qword_100182420);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  __chkstk_darwin(v1);
  uint64_t v43 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100182428);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v45 = v5;
  __chkstk_darwin(v4);
  int v42 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000AA4C(&qword_100182430);
  uint64_t v51 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v40 = (char *)&v34 - v9;
  uint64_t v10 = sub_10000AA4C(&qword_100182438);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  float v16 = (char *)&v34 - v15;
  __chkstk_darwin(v17);
  uint64_t v50 = (char *)&v34 - v18;
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821C8);
  sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  KeyframeTrack.init(_:content:)();
  uint64_t v19 = sub_10000F288(&qword_100182440, &qword_100182438);
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v49 = v16;
  v20(v16, v10);
  uint64_t v37 = v11 + 8;
  uint64_t v38 = v20;
  swift_getKeyPath();
  KeyframeTrack.init(_:content:)();
  static KeyframesBuilder.buildExpression<A>(_:)();
  v20(v13, v10);
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821E0);
  sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  CGFloat v21 = v39;
  KeyframeTrack.init(_:content:)();
  uint64_t v22 = sub_10000F288(&qword_100182448, &qword_100182430);
  long long v23 = v40;
  uint64_t v24 = v41;
  static KeyframesBuilder.buildExpression<A>(_:)();
  double v25 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  uint64_t v36 = v25;
  v25(v21, v24);
  uint64_t v35 = v13;
  static KeyframesBuilder.buildPartialBlock<A>(first:)();
  uint64_t v26 = v42;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v52 = &type metadata for SwapOutTransitionViewModifier.Value;
  uint64_t v53 = v10;
  uint64_t v54 = v10;
  uint64_t v55 = v19;
  uint64_t v56 = v19;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v28 = v43;
  uint64_t v29 = v26;
  uint64_t v30 = v44;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v52 = &type metadata for SwapOutTransitionViewModifier.Value;
  uint64_t v53 = v30;
  uint64_t v54 = v24;
  uint64_t v55 = OpaqueTypeConformance2;
  uint64_t v56 = v22;
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = v46;
  static KeyframesBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v31);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v30);
  uint64_t v32 = v38;
  v38(v35, v10);
  v36(v23, v24);
  v32(v49, v10);
  return ((uint64_t (*)(char *, uint64_t))v32)(v50, v10);
}

uint64_t sub_100068CAC()
{
  return sub_100068CD0(1.0);
}

uint64_t sub_100068CD0(double a1)
{
  uint64_t v2 = type metadata accessor for Spring();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10000AA4C(&qword_1001821C8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v12 - v8;
  double v14 = a1;
  Spring.init(mass:stiffness:damping:allowOverDamping:)();
  v12[1] = 0;
  char v13 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)();
  sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v7, v3);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v3);
}

uint64_t sub_100068EF0()
{
  return sub_100068CD0(0.6);
}

uint64_t sub_100068F18()
{
  uint64_t v0 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10000AA4C(&qword_1001821E0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v10 - v6;
  v10[1] = 0x4028000000000000;
  static UnitCurve.linear.getter();
  LinearKeyframe.init(_:duration:timingCurve:)();
  sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v1);
}

uint64_t sub_1000690FC()
{
  if (qword_10017F648 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_100182418);
  sub_10000B150(v0, (uint64_t)qword_100181F48);
  uint64_t result = KeyframeTimeline.duration.getter();
  qword_10018CEE0 = v2;
  return result;
}

uint64_t sub_100069178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D954();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_1000691FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D954();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100069280()
{
  if (qword_10017F648 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_100182418);
  sub_10000B150(v0, (uint64_t)qword_100181F48);
  KeyframeTimeline.value(time:)();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = v3;
  *(void *)(v1 + 32) = v4;
  sub_10000AA4C(&qword_100182598);
  sub_10000AA4C(&qword_1001824A0);
  sub_10000F288(&qword_1001825A0, &qword_100182598);
  sub_10000B100(&qword_1001824B0);
  sub_10000B100(&qword_1001824B8);
  type metadata accessor for EmptyVisualEffect();
  sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  return swift_release();
}

uint64_t sub_1000694C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  v31[1] = a2;
  uint64_t v32 = a3;
  uint64_t v6 = type metadata accessor for RoundedRectangle();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (double *)((char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000AA4C(&qword_1001823F8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  char v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_100182400);
  __chkstk_darwin(v14);
  float v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000AA4C(&qword_100182408);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = a4 * 0.75;
  CGFloat v21 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v22 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v23 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
  double *v9 = v20;
  v9[1] = v20;
  uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 44)];
  sub_10006CE08((uint64_t)v9, v24, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v24 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
  uint64_t v25 = sub_10000AA4C(&qword_100182410);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v13, a1, v25);
  sub_10006B49C((uint64_t)v9);
  uint64_t v26 = 0;
  if ((TransitionPhase.isIdentity.getter() & 1) == 0)
  {
    if (qword_10017F650 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_10018CEE0;
  }
  sub_10000F330((uint64_t)v13, (uint64_t)v16, &qword_1001823F8);
  *(void *)&v16[*(int *)(v14 + 36)] = v26;
  sub_10000F394((uint64_t)v13, &qword_1001823F8);
  if (qword_10017F650 != -1) {
    swift_once();
  }
  uint64_t v27 = static Animation.timingCurve(_:_:_:_:duration:)();
  char v28 = TransitionPhase.isIdentity.getter();
  sub_10000F330((uint64_t)v16, (uint64_t)v19, &qword_100182400);
  uint64_t v29 = &v19[*(int *)(v17 + 36)];
  *(void *)uint64_t v29 = v27;
  v29[8] = v28 & 1;
  sub_10000F394((uint64_t)v16, &qword_100182400);
  return sub_10000F2CC((uint64_t)v19, v32, &qword_100182408);
}

uint64_t sub_100069858@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1000694C0(a1, a2, a3, *v3);
}

uint64_t sub_100069860()
{
  uint64_t v0 = sub_10000AA4C(&qword_1001823C0);
  sub_10001EA1C(v0, qword_100181F60);
  sub_10000B150(v0, (uint64_t)qword_100181F60);
  sub_10000AA4C(&qword_1001823C8);
  sub_10000B100(&qword_1001823D0);
  sub_10000B100(&qword_1001823D8);
  sub_10000B100(&qword_1001823E0);
  sub_10000F288(&qword_1001823E8, &qword_1001823E0);
  swift_getOpaqueTypeConformance2();
  sub_10000F288(&qword_1001823F0, &qword_1001823D8);
  swift_getOpaqueTypeConformance2();
  return KeyframeTimeline.init<A>(initialValue:content:)();
}

uint64_t sub_1000699F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v1 = sub_10000AA4C(&qword_1001823C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  __chkstk_darwin(v1);
  uint64_t v44 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000AA4C(&qword_1001823D0);
  uint64_t v45 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  int v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000AA4C(&qword_1001823D8);
  uint64_t v53 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v36 - v7;
  uint64_t v8 = sub_10000AA4C(&qword_1001823E0);
  uint64_t v51 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v50 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v36 - v11;
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)&v36 - v13;
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821D8);
  uint64_t v14 = sub_10000B100(&qword_1001821E0);
  uint64_t v15 = sub_10000B100(&qword_1001821C8);
  uint64_t v16 = sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  uint64_t v17 = sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  uint64_t v54 = (ValueMetadata *)&type metadata for Double;
  uint64_t v55 = v14;
  uint64_t v56 = v15;
  uint64_t v57 = v16;
  uint64_t v58 = v17;
  uint64_t v37 = (void (*)(char *, uint64_t))&opaque type descriptor for <<opaque return type of static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)>>;
  swift_getOpaqueTypeConformance2();
  uint64_t v18 = v52;
  KeyframeTrack.init(_:content:)();
  uint64_t v36 = &protocol conformance descriptor for KeyframeTrack<A, B, C>;
  uint64_t v19 = sub_10000F288(&qword_1001823E8, &qword_1001823E0);
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v20 = v51 + 8;
  CGFloat v21 = *(void (**)(char *, uint64_t))(v51 + 8);
  v21(v18, v8);
  uint64_t v38 = v21;
  uint64_t v51 = v20;
  swift_getKeyPath();
  uint64_t v22 = v50;
  KeyframeTrack.init(_:content:)();
  static KeyframesBuilder.buildExpression<A>(_:)();
  v21(v22, v8);
  swift_getKeyPath();
  sub_10000AA4C(&qword_1001821F0);
  uint64_t v54 = (ValueMetadata *)&type metadata for Double;
  uint64_t v55 = v14;
  uint64_t v56 = v14;
  uint64_t v57 = v16;
  uint64_t v58 = v16;
  swift_getOpaqueTypeConformance2();
  uint64_t v23 = v39;
  KeyframeTrack.init(_:content:)();
  uint64_t v24 = sub_10000F288(&qword_1001823F0, &qword_1001823D8);
  uint64_t v25 = v40;
  uint64_t v26 = v41;
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  uint64_t v37 = v27;
  v27(v23, v26);
  static KeyframesBuilder.buildPartialBlock<A>(first:)();
  char v28 = v42;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v54 = &type metadata for SwapInTransitionViewModifier.Value;
  uint64_t v55 = v8;
  uint64_t v56 = v8;
  uint64_t v57 = v19;
  uint64_t v58 = v19;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v30 = v44;
  uint64_t v31 = v28;
  uint64_t v32 = v43;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v54 = &type metadata for SwapInTransitionViewModifier.Value;
  uint64_t v55 = v32;
  uint64_t v56 = v26;
  uint64_t v57 = OpaqueTypeConformance2;
  uint64_t v58 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v46;
  static KeyframesBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v33);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v32);
  uint64_t v34 = v38;
  v38(v50, v8);
  v37(v25, v26);
  v34(v52, v8);
  return ((uint64_t (*)(char *, uint64_t))v34)(v49, v8);
}

uint64_t sub_10006A0E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A118(a1, 1.0, 0.0);
}

uint64_t sub_10006A0FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A118(a1, 0.6, 1.0);
}

uint64_t sub_10006A118@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D2>)
{
  uint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for Spring();
  __chkstk_darwin(v5 - 8);
  uint64_t v25 = sub_10000AA4C(&qword_1001821C8);
  uint64_t v28 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = sub_10000AA4C(&qword_1001821E0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v26 = (char *)v24 - v17;
  double v30 = a2;
  static UnitCurve.linear.getter();
  LinearKeyframe.init(_:duration:timingCurve:)();
  sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v24[1] = v13 + 8;
  uint64_t v27 = v18;
  v18(v15, v12);
  double v32 = a3;
  Spring.init(mass:stiffness:damping:allowOverDamping:)();
  double v30 = 0.0;
  char v31 = 1;
  SpringKeyframe.init(_:duration:spring:startVelocity:)();
  sub_10000F288(&qword_1001821D0, &qword_1001821C8);
  uint64_t v19 = v25;
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v28 + 8);
  v20(v7, v19);
  CGFloat v21 = v26;
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v22 = v27;
  v27(v15, v12);
  v20(v10, v19);
  return v22(v21, v12);
}

uint64_t sub_10006A524@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A544((void (*)(uint64_t))&static UnitCurve.linear.getter, a1, 12.0);
}

uint64_t sub_10006A544@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_10000AA4C(&qword_1001821E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v18 - v13;
  double v21 = a3;
  static UnitCurve.linear.getter();
  LinearKeyframe.init(_:duration:timingCurve:)();
  sub_10000F288(&qword_1001821E8, &qword_1001821E0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t v16 = v15(v11, v5);
  double v21 = 0.0;
  v19(v16);
  LinearKeyframe.init(_:duration:timingCurve:)();
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
  v15(v8, v5);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  v15(v8, v5);
  v15(v11, v5);
  return v15(v14, v5);
}

uint64_t sub_10006A808()
{
  if (qword_10017F658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_1001823C0);
  sub_10000B150(v0, (uint64_t)qword_100181F60);
  uint64_t result = KeyframeTimeline.duration.getter();
  qword_10018CEE8 = v2;
  return result;
}

uint64_t sub_10006A884@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v30 = a2;
  uint64_t v2 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001824B8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_1001824B0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UnitPoint.center.getter();
  uint64_t v14 = type metadata accessor for EmptyVisualEffect();
  uint64_t v15 = sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  VisualEffect.scale(_:anchor:)();
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v33.origin.x = v17;
  v33.origin.y = v19;
  v33.size.width = v21;
  v33.size.height = v23;
  CGRectGetMidY(v33);
  GeometryProxy.size.getter();
  uint64_t v31 = v14;
  uint64_t v32 = v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  VisualEffect.offset(x:y:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v31 = v6;
  uint64_t v32 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v28;
  VisualEffect.blur(radius:opaque:)();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v13, v25);
}

uint64_t sub_10006AC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D8F0();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10006AC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10006D8F0();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10006AD18()
{
  if (qword_10017F658 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10000AA4C(&qword_1001823C0);
  sub_10000B150(v0, (uint64_t)qword_100181F60);
  KeyframeTimeline.value(time:)();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = v3;
  *(void *)(v1 + 32) = v4;
  sub_10000AA4C(&qword_100182580);
  sub_10000AA4C(&qword_1001824A0);
  sub_10000F288(&qword_100182588, &qword_100182580);
  sub_10000B100(&qword_1001824B0);
  sub_10000B100(&qword_1001824B8);
  type metadata accessor for EmptyVisualEffect();
  sub_10006CD50(&qword_100182490, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  return swift_release();
}

uint64_t sub_10006AF58@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  v31[1] = a2;
  uint64_t v32 = a3;
  uint64_t v6 = type metadata accessor for RoundedRectangle();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (double *)((char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000AA4C(&qword_1001823A0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C(&qword_1001823A8);
  __chkstk_darwin(v14);
  double v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000AA4C(&qword_1001823B0);
  __chkstk_darwin(v17);
  CGFloat v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = a4 * 0.75;
  CGFloat v21 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v22 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v23 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
  double *v9 = v20;
  v9[1] = v20;
  uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 44)];
  sub_10006CE08((uint64_t)v9, v24, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v24 + *(int *)(sub_10000AA4C(&qword_100185120) + 36)) = 256;
  uint64_t v25 = sub_10000AA4C(&qword_1001823B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v13, a1, v25);
  sub_10006B49C((uint64_t)v9);
  uint64_t v26 = 0;
  if (TransitionPhase.isIdentity.getter())
  {
    if (qword_10017F660 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_10018CEE8;
  }
  sub_10000F330((uint64_t)v13, (uint64_t)v16, &qword_1001823A0);
  *(void *)&v16[*(int *)(v14 + 36)] = v26;
  sub_10000F394((uint64_t)v13, &qword_1001823A0);
  if (qword_10017F660 != -1) {
    swift_once();
  }
  uint64_t v27 = static Animation.timingCurve(_:_:_:_:duration:)();
  char v28 = TransitionPhase.isIdentity.getter();
  sub_10000F330((uint64_t)v16, (uint64_t)v19, &qword_1001823A8);
  uint64_t v29 = &v19[*(int *)(v17 + 36)];
  *(void *)uint64_t v29 = v27;
  v29[8] = v28 & 1;
  sub_10000F394((uint64_t)v16, &qword_1001823A8);
  return sub_10000F2CC((uint64_t)v19, v32, &qword_1001823B0);
}

uint64_t sub_10006B2F0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_10006AF58(a1, a2, a3, *v3);
}

uint64_t sub_10006B2F8()
{
  uint64_t v0 = self;
  id v1 = [v0 currentTraitCollection];
  [v1 displayCornerRadius];

  sub_10006B3F4();
  AnyTransition.init<A>(_:)();
  id v2 = [v0 currentTraitCollection];
  [v2 displayCornerRadius];

  sub_10006B448();
  AnyTransition.init<A>(_:)();
  uint64_t v3 = static AnyTransition.asymmetric(insertion:removal:)();
  swift_release();
  swift_release();
  return v3;
}

unint64_t sub_10006B3F4()
{
  unint64_t result = qword_100182138;
  if (!qword_100182138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182138);
  }
  return result;
}

unint64_t sub_10006B448()
{
  unint64_t result = qword_100182140;
  if (!qword_100182140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182140);
  }
  return result;
}

uint64_t sub_10006B49C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for JindoBlurEffectModifier()
{
  return &type metadata for JindoBlurEffectModifier;
}

uint64_t getEnumTagSinglePayload for SwoopTransitionViewModifier.Value(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SwoopTransitionViewModifier.Value(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SwoopTransitionViewModifier.Value()
{
  return &type metadata for SwoopTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapOutTransition()
{
  return &type metadata for SwapOutTransition;
}

ValueMetadata *type metadata accessor for SwapInTransition()
{
  return &type metadata for SwapInTransition;
}

uint64_t getEnumTagSinglePayload for MoveUpEffectModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MoveUpEffectModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MoveUpEffectModifier()
{
  return &type metadata for MoveUpEffectModifier;
}

uint64_t *sub_10006B638(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(sub_10000AA4C(&qword_100182218) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10006B744(uint64_t a1)
{
  sub_10000AA4C(&qword_100182218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *sub_10006B7E8(void *a1, void *a2)
{
  sub_10000AA4C(&qword_100182218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10006B8A4(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10000F394((uint64_t)a1, &qword_100182218);
    sub_10000AA4C(&qword_100182218);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10006B978(void *a1, const void *a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100182218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_10006BA3C(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_10000F394((uint64_t)a1, &qword_100182218);
    uint64_t v4 = sub_10000AA4C(&qword_100182218);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006BB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006BB2C);
}

uint64_t sub_10006BB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C208(a1, a2, a3, &qword_100182220);
}

uint64_t sub_10006BB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006BB4C);
}

uint64_t sub_10006BB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006C294(a1, a2, a3, a4, &qword_100182220);
}

uint64_t type metadata accessor for VibrancyEffectModifier(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100182280);
}

void sub_10006BB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10006BB98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_10006C344(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t _s9AirDropUI23JindoBlurEffectModifierVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s9AirDropUI23JindoBlurEffectModifierVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006BD98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundMaterialView()
{
  return &type metadata for BackgroundMaterialView;
}

ValueMetadata *type metadata accessor for SwoopTransitionViewModifier()
{
  return &type metadata for SwoopTransitionViewModifier;
}

uint64_t *sub_10006BDE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001822C0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(v4 + 32);
    int v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for ColorScheme();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_10006BEE4(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = a1 + *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_10006BF6C(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_retain();
  uint64_t v5 = *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *sub_10006C004(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *sub_10006C0B8(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_10006C144(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v4 = *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for ColorScheme();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10006C1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C1FC);
}

uint64_t sub_10006C1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C208(a1, a2, a3, &qword_1001822C0);
}

uint64_t sub_10006C208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_10000AA4C(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t sub_10006C274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C288);
}

uint64_t sub_10006C288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006C294(a1, a2, a3, a4, &qword_1001822C0);
}

uint64_t sub_10006C294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = sub_10000AA4C(a5);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for LumaTrackingBackdropView(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100182320);
}

void sub_10006C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10006C344(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_10006C3A4()
{
  return sub_10000F288(&qword_100182360, &qword_100182368);
}

unint64_t sub_10006C3E4()
{
  unint64_t result = qword_100182370;
  if (!qword_100182370)
  {
    sub_10000B100(&qword_100182208);
    sub_10006C484();
    sub_10000F288(&qword_100182390, &qword_100182210);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182370);
  }
  return result;
}

unint64_t sub_10006C484()
{
  unint64_t result = qword_100182378;
  if (!qword_100182378)
  {
    sub_10000B100(&qword_1001821F8);
    sub_10000F288(&qword_100182380, &qword_100182200);
    sub_10000F288(&qword_100182388, &qword_100184C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182378);
  }
  return result;
}

uint64_t sub_10006C548()
{
  return sub_10006CD50(&qword_100182398, (void (*)(uint64_t))type metadata accessor for LumaTrackingBackdropView);
}

void *sub_10006C590()
{
  return &protocol witness table for Double;
}

uint64_t sub_10006C59C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C5B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C5D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C5F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C60C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C628()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C644()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006C660(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = sub_100047F98(0xD00000000000002FLL, 0x80000001001326B0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_10000ADB0(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_10006C874(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_100047F98(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10002E358(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_10006CA78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100182218);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F330(v2, (uint64_t)v10, &qword_100182218);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    uint64_t v14 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      double v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[1] = a1;
      uint64_t v19 = v17;
      *(_DWORD *)double v16 = 136315138;
      v18[2] = sub_100047F98(0x686353726F6C6F43, 0xEB00000000656D65, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10006CD34()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006CD44(uint64_t a1, uint64_t a2)
{
  return sub_1000681F4(a1, a2, *(unsigned char *)(v2 + 16));
}

uint64_t sub_10006CD50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006CD98()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006CDA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100066258(a1, a2);
}

unint64_t sub_10006CDB4()
{
  unint64_t result = qword_1001824C0;
  if (!qword_1001824C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001824C0);
  }
  return result;
}

uint64_t sub_10006CE08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006CE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LumaTrackingBackdropView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006CEE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for LumaTrackingBackdropView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();
  uint64_t v7 = v6 + *(int *)(sub_10000AA4C(&qword_1001822C0) + 32);
  uint64_t v8 = type metadata accessor for ColorScheme();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10006CFDC(uint64_t a1)
{
  type metadata accessor for LumaTrackingBackdropView(0);

  return sub_1000673B4(a1);
}

ValueMetadata *type metadata accessor for SwapOutTransitionViewModifier.Value()
{
  return &type metadata for SwapOutTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapInTransitionViewModifier.Value()
{
  return &type metadata for SwapInTransitionViewModifier.Value;
}

ValueMetadata *type metadata accessor for SwapInTransitionViewModifier()
{
  return &type metadata for SwapInTransitionViewModifier;
}

ValueMetadata *type metadata accessor for SwapOutTransitionViewModifier()
{
  return &type metadata for SwapOutTransitionViewModifier;
}

ValueMetadata *type metadata accessor for JindoOpacityEffectModifier()
{
  return &type metadata for JindoOpacityEffectModifier;
}

unint64_t sub_10006D0A0()
{
  unint64_t result = qword_1001824D8;
  if (!qword_1001824D8)
  {
    sub_10000B100(&qword_1001823B0);
    sub_10006D36C(&qword_1001824E0, &qword_1001823A8, (void (*)(void))sub_10006D178, (void (*)(void))sub_10006D23C);
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001824D8);
  }
  return result;
}

unint64_t sub_10006D178()
{
  unint64_t result = qword_1001824E8;
  if (!qword_1001824E8)
  {
    sub_10000B100(&qword_1001823A0);
    sub_10000F288(&qword_1001824F0, &qword_1001823B8);
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001824E8);
  }
  return result;
}

unint64_t sub_10006D23C()
{
  unint64_t result = qword_1001824F8;
  if (!qword_1001824F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001824F8);
  }
  return result;
}

unint64_t sub_10006D294()
{
  unint64_t result = qword_100182508;
  if (!qword_100182508)
  {
    sub_10000B100(&qword_100182408);
    sub_10006D36C(&qword_100182510, &qword_100182400, (void (*)(void))sub_10006D3F4, (void (*)(void))sub_10006D4B8);
    sub_10000F288((unint64_t *)&unk_100184FE0, &qword_100182500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182508);
  }
  return result;
}

uint64_t sub_10006D36C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006D3F4()
{
  unint64_t result = qword_100182518;
  if (!qword_100182518)
  {
    sub_10000B100(&qword_1001823F8);
    sub_10000F288(&qword_100182520, &qword_100182410);
    sub_10000F288(&qword_10017FE90, &qword_100185120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182518);
  }
  return result;
}

unint64_t sub_10006D4B8()
{
  unint64_t result = qword_100182528;
  if (!qword_100182528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182528);
  }
  return result;
}

uint64_t sub_10006D50C()
{
  return sub_10000F288(&qword_100182530, &qword_100182538);
}

unint64_t sub_10006D54C()
{
  unint64_t result = qword_100182540;
  if (!qword_100182540)
  {
    sub_10000B100(&qword_100182450);
    sub_10000F288(&qword_100182548, &qword_100182458);
    sub_10000F288(&qword_100182550, &qword_100182558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182540);
  }
  return result;
}

uint64_t sub_10006D610()
{
  return sub_10006D36C(&qword_100182560, &qword_100182470, (void (*)(void))sub_10006D660, (void (*)(void))sub_10006D700);
}

unint64_t sub_10006D660()
{
  unint64_t result = qword_100182568;
  if (!qword_100182568)
  {
    sub_10000B100(&qword_100182460);
    sub_10000F288(&qword_100182570, &qword_100182468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182568);
  }
  return result;
}

unint64_t sub_10006D700()
{
  unint64_t result = qword_100182578;
  if (!qword_100182578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182578);
  }
  return result;
}

uint64_t sub_10006D754()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D858(uint64_t a1)
{
  return sub_10006DA24(a1, &qword_100182498, &qword_1001824A8);
}

uint64_t sub_10006D86C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D888()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D8A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D8C0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006D8D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10006A884(a1, a2);
}

unint64_t sub_10006D8F0()
{
  unint64_t result = qword_100182590;
  if (!qword_100182590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182590);
  }
  return result;
}

uint64_t sub_10006D944()
{
  return _swift_deallocObject(v0, 40, 7);
}

unint64_t sub_10006D954()
{
  unint64_t result = qword_1001825A8;
  if (!qword_1001825A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001825A8);
  }
  return result;
}

unint64_t sub_10006D9A8()
{
  unint64_t result = qword_1001825C0;
  if (!qword_1001825C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001825C0);
  }
  return result;
}

uint64_t sub_10006D9FC(uint64_t a1)
{
  return sub_10006DA24(a1, &qword_100182580, &qword_100182588);
}

uint64_t sub_10006DA10(uint64_t a1)
{
  return sub_10006DA24(a1, &qword_100182598, &qword_1001825A0);
}

uint64_t sub_10006DA24(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10006DB98()
{
  unint64_t result = qword_1001825C8;
  if (!qword_1001825C8)
  {
    sub_10000B100(&qword_1001825B0);
    sub_10000F288(&qword_1001825D0, &qword_1001825B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001825C8);
  }
  return result;
}

uint64_t sub_10006DC54()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContactAvatarView.Coordinator()
{
  return self;
}

uint64_t destroy for AirDropActivityAttributes()
{
  return swift_bridgeObjectRelease();
}

void *_s9AirDropUI16DeviceAvatarViewVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DeviceAvatarView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for DeviceAvatarView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAvatarView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceAvatarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceAvatarView()
{
  return &type metadata for DeviceAvatarView;
}

void *initializeBufferWithCopyOfBuffer for AirDropActivityAttributes(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AirDropActivityAttributes(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AirDropActivityAttributes(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactAvatarView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactAvatarView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactAvatarView()
{
  return &type metadata for ContactAvatarView;
}

unint64_t sub_10006DF94()
{
  unint64_t result = qword_100185BF0;
  if (!qword_100185BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100185BF0);
  }
  return result;
}

id sub_10006DFE8(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  sub_10000AA4C(&qword_100182690);
  UIViewRepresentableContext.coordinator.getter();
  id v5 = *(id *)(v8 + 24);
  swift_release();
  id v6 = [v5 view];

  sub_10006EB84(a1, v3, v4);
  return v6;
}

void sub_10006E088(uint64_t a1, uint64_t a2)
{
  sub_10006EB84(a2, *v2, v2[1]);
}

void sub_10006E094(uint64_t *a1@<X8>)
{
  type metadata accessor for ContactAvatarView.Coordinator();
  uint64_t v2 = swift_allocObject();
  id v3 = [objc_allocWithZone((Class)CNContactStore) init];
  *(void *)(v2 + 16) = v3;
  id v4 = [self settingsWithContactStore:v3 threeDTouchEnabled:0];
  id v5 = [objc_allocWithZone((Class)CNAvatarViewController) initWithSettings:v4];

  *(void *)(v2 + 24) = v5;
  *a1 = v2;
}

uint64_t sub_10006E148()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006E164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006E744();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10006E1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006E744();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10006E22C()
{
}

uint64_t sub_10006E254@<X0>(uint64_t a1@<X8>)
{
  *(void *)&long long v34 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  id v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100182688);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for iosmacHardware();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = static Color.white.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v40 = v45;
  int v39 = v46;
  uint64_t v38 = v47;
  int v37 = v48;
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  swift_bridgeObjectRetain();
  iosmacHardware.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t result = sub_10006E798((uint64_t)v7);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    iosmacHardware.image.getter();
    uint64_t v25 = v34;
    (*(void (**)(char *, void, void))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v34);
    uint64_t v13 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v25);
    unsigned __int8 v26 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v21 = v27;
    uint64_t v22 = v28;
    uint64_t v23 = v29;
    uint64_t v24 = v30;
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    unsigned __int8 v44 = 0;
    uint64_t v16 = v51;
    unsigned __int8 v43 = v52;
    uint64_t v18 = v53;
    unsigned __int8 v42 = v54;
    long long v34 = v55;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    long long v20 = v34;
    uint64_t v15 = v44;
    uint64_t v17 = v43;
    uint64_t v14 = v26;
    uint64_t v19 = v42;
  }
  char v31 = v39;
  char v32 = v37;
  *(void *)a1 = v41;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v40;
  *(unsigned char *)(a1 + 24) = v31;
  *(void *)(a1 + 32) = v38;
  *(unsigned char *)(a1 + 40) = v32;
  uint64_t v33 = v35;
  *(void *)(a1 + 48) = v36;
  *(void *)(a1 + 56) = v33;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v21;
  *(void *)(a1 + 88) = v22;
  *(void *)(a1 + 96) = v23;
  *(void *)(a1 + 104) = v24;
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 152) = v20;
  return result;
}

__n128 sub_10006E694@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  sub_10006E254((uint64_t)v10);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  long long v5 = v10[9];
  *(_OWORD *)(a1 + 144) = v10[8];
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 176) = v11;
  long long v6 = v10[5];
  *(_OWORD *)(a1 + 80) = v10[4];
  *(_OWORD *)(a1 + 96) = v6;
  long long v7 = v10[7];
  *(_OWORD *)(a1 + 112) = v10[6];
  *(_OWORD *)(a1 + 128) = v7;
  long long v8 = v10[1];
  *(_OWORD *)(a1 + 16) = v10[0];
  *(_OWORD *)(a1 + 32) = v8;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a1 + 48) = v10[2];
  *(__n128 *)(a1 + 64) = result;
  return result;
}

unint64_t sub_10006E744()
{
  unint64_t result = qword_100182680;
  if (!qword_100182680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182680);
  }
  return result;
}

uint64_t sub_10006E798(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100182688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006E7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005EB7C(a1, (uint64_t)v36);
  sub_10005EB7C((uint64_t)v36, (uint64_t)v37);
  unint64_t v8 = v38;
  v38 &= 0x3FFFFFFFFFFFFFFFuLL;
  *(void *)&long long v26 = v5;
  if (v8 >> 62)
  {
    uint64_t v9 = v37[2];
    uint64_t v10 = v37[3];
    sub_10006F184((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v9;
    uint64_t v28 = v10;
    uint64_t v29 = 0x4049000000000000;
    char v30 = 1;
    sub_10006DF94();
    sub_10006F1E0();
  }
  else
  {
    uint64_t v27 = v37[0];
    uint64_t v28 = v37[1];
    uint64_t v29 = 0;
    char v30 = 0;
    sub_10006DF94();
    sub_10006F1E0();
    swift_bridgeObjectRetain();
  }
  _ConditionalContent<>.init(storage:)();
  uint64_t v11 = v31;
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  unsigned __int8 v14 = v34;
  uint64_t v15 = *(void *)(a1 + 104);
  if (v15)
  {
    id v25 = (id)v15;
    Image.init(uiImage:)();
    uint64_t v16 = v26;
    (*(void (**)(char *, void, uint64_t))(v26 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v24 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v4);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    uint64_t v19 = v33;
    uint64_t v20 = v34;
    long long v26 = v35;

    long long v21 = v26;
    uint64_t v22 = v24;
    uint64_t v15 = 0x3FF0000000000000;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v20;
  *(_OWORD *)(a2 + 72) = v21;
  *(void *)(a2 + 88) = v15;
  *(void *)(a2 + 96) = v15;
  sub_10006F234();
  return sub_10006F23C();
}

__n128 sub_10006EAE8@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[5];
  v25[4] = v1[4];
  v25[5] = v3;
  v25[6] = v1[6];
  long long v4 = v1[1];
  v25[0] = *v1;
  v25[1] = v4;
  long long v5 = v1[3];
  v25[2] = v1[2];
  v25[3] = v5;
  uint64_t v6 = static Alignment.bottomTrailing.getter();
  uint64_t v8 = v7;
  sub_10006E7F8((uint64_t)v25, (uint64_t)&v17);
  uint64_t v9 = v18;
  char v10 = v19;
  uint64_t v11 = v24;
  __n128 result = v17;
  long long v13 = v20;
  long long v14 = v21;
  long long v15 = v22;
  long long v16 = v23;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(__n128 *)(a1 + 16) = result;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  *(void *)(a1 + 112) = v11;
  return result;
}

void sub_10006EB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    goto LABEL_3;
  }
  sub_10000AA4C(&qword_100182690);
  UIViewRepresentableContext.coordinator.getter();
  id v3 = *(id *)(v11 + 16);
  swift_release();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 contactForIdentifier:v4];

  if (!v5) {
LABEL_3:
  }
    id v5 = [objc_allocWithZone((Class)CNMutableContact) init];
  sub_10000AA4C(&qword_100182690);
  UIViewRepresentableContext.coordinator.getter();
  id v6 = *(id *)(v11 + 24);
  swift_release();
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10012A280;
  *(void *)(v7 + 32) = v5;
  uint64_t v10 = v7;
  specialized Array._endMutation()();
  sub_10006ECFC();
  id v8 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setContacts:isa, v10];
}

unint64_t sub_10006ECFC()
{
  unint64_t result = qword_100182698;
  if (!qword_100182698)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100182698);
  }
  return result;
}

void destroy for BadgingAvatarView(uint64_t *a1)
{
  sub_10005E778(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  uint64_t v2 = (void *)a1[13];
}

uint64_t initializeWithCopy for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  unint64_t v16 = *(void *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 80);
  uint64_t v18 = *(void *)(a2 + 88);
  int v19 = *(_DWORD *)(a2 + 96);
  sub_10005EAC4(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 88) = v18;
  *(_DWORD *)(a1 + 96) = v19;
  uint64_t v12 = *(void **)(a2 + 104);
  *(void *)(a1 + 104) = v12;
  id v13 = v12;
  return a1;
}

uint64_t assignWithCopy for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v25 = *(void *)(a2 + 64);
  unint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  int v29 = *(_DWORD *)(a2 + 96);
  sub_10005EAC4(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v25, v26);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(_DWORD *)(a1 + 96) = v29;
  sub_10005E778(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1));
  long long v21 = *(void **)(a1 + 104);
  long long v22 = *(void **)(a2 + 104);
  *(void *)(a1 + 104) = v22;
  id v23 = v22;

  return a1;
}

__n128 initializeWithTake for BadgingAvatarView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for BadgingAvatarView(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  long long v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v16;
  *(_DWORD *)(a1 + 96) = v4;
  sub_10005E778(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((unint64_t *)&v13 + 1));
  uint64_t v17 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  return a1;
}

uint64_t getEnumTagSinglePayload for BadgingAvatarView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  HIDWORD(v3) = *(_DWORD *)(a1 + 76);
  LODWORD(v3) = HIDWORD(v3);
  unsigned int v2 = v3 >> 30;
  if (v2 > 0x80000000) {
    int v4 = ~v2;
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

double storeEnumTagSinglePayload for BadgingAvatarView(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 104) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = (unint64_t)(v4 >> 2) << 32;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgingAvatarView()
{
  return &type metadata for BadgingAvatarView;
}

uint64_t sub_10006F140()
{
  return sub_10006F26C(&qword_1001826A0, &qword_1001826A8);
}

uint64_t sub_10006F168()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F184(uint64_t a1)
{
  return a1;
}

unint64_t sub_10006F1E0()
{
  unint64_t result = qword_1001854A0;
  if (!qword_1001854A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001854A0);
  }
  return result;
}

uint64_t sub_10006F234()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006F23C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006F244()
{
  return sub_10006F26C(&qword_1001826B0, &qword_1001826B8);
}

uint64_t sub_10006F26C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F2C4@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_10006F2D8()
{
  return sub_100074748();
}

uint64_t sub_10006F2EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_1001826C0);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_1001826C0);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D110);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10006F41C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode) = a1;
  uint64_t v2 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  unint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView);
  if (v3)
  {
    id v4 = v3;
    [v4 setHidden:sub_1000729E8() & 1];

    uint64_t v5 = *(void **)(v1 + v2);
    if (v5)
    {
      uint64_t v6 = v5;
      [*(id *)&v6[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView] setHidden:sub_1000729E8() & 1];
    }
  }
}

uint64_t sub_10006F57C(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100181690);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000F394((uint64_t)v10, &qword_100181400);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v15 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess();
    sub_100075C30(v15, (uint64_t)v4);
    uint64_t v16 = sub_10006F8B4((uint64_t)v7, (uint64_t)v4);
    sub_10000F394((uint64_t)v4, &qword_100181690);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    uint64_t v16 = sub_100074960((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v16;
}

uint64_t sub_10006F8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a2;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Failure();
  uint64_t v98 = *(void *)(v3 - 8);
  uint64_t v99 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  int v96 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v97 = (char *)&v94 - v6;
  uint64_t v7 = sub_10000AA4C(&qword_100181690);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v94 - v14;
  uint64_t v16 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v94 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v21 = (char *)&v94 - v20;
  long long v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v95 = a1;
  v22((char *)&v94 - v20, a1, v16);
  id v23 = *(uint64_t (**)(char *, uint64_t))(v17 + 88);
  uint64_t v102 = v21;
  int v24 = v23(v21, v16);
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    uint64_t v25 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v26 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
    return 4;
  }
  int v27 = v24;
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    uint64_t v28 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    int v29 = (uint64_t *)&unk_1001806F0;
LABEL_5:
    char v30 = &v28[*(int *)(sub_10000AA4C(v29) + 48)];
    uint64_t v31 = (uint64_t *)&unk_1001827B0;
LABEL_6:
    uint64_t v32 = sub_10000AA4C(v31);
    (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v30, v32);
    uint64_t v33 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_7:
    (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v28, v33);
    return 4;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
  {
    long long v35 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v36 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
    return 2;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    int v37 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v38 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    int v39 = &v37[*(int *)(v38 + 48)];
    swift_bridgeObjectRelease();
    uint64_t v40 = &v37[*(int *)(v38 + 80)];
    uint64_t v41 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
    uint64_t v42 = type metadata accessor for SFAirDrop.Progress();
    (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v39, v42);
    uint64_t v43 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_15:
    (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v37, v43);
    return 3;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    unsigned __int8 v44 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v45 = sub_10000AA4C(&qword_1001814D0);
    swift_bridgeObjectRelease();
    unsigned __int8 v46 = &v44[*(int *)(v45 + 80)];
    uint64_t v47 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
LABEL_18:
    uint64_t v48 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v44, v48);
    return 3;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    uint64_t v28 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v49 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v50 = &v28[*(int *)(v49 + 64)];
    uint64_t v51 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v50, v51);
    uint64_t v33 = type metadata accessor for SFAirDropReceive.ItemDestination();
    goto LABEL_7;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    unsigned __int8 v52 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v53 = sub_10000AA4C(&qword_1001814F0);
    swift_bridgeObjectRelease();
    uint64_t v54 = *(int *)(v53 + 64);
LABEL_24:
    long long v55 = &v52[v54];
    uint64_t v56 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v56 - 8) + 8))(v55, v56);
    uint64_t v57 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v57 - 8) + 8))(v52, v57);
    return 2;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    uint64_t v58 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    sub_10000AA4C((uint64_t *)&unk_100182790);
    swift_bridgeObjectRelease();
    uint64_t v59 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_27:
    (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v58, v59);
    return 3;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    uint64_t v60 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v61 = sub_10000AA4C(&qword_1001806D8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = &v60[*(int *)(v61 + 80)];
    sub_100075C30(v101, (uint64_t)v9);
    uint64_t v63 = v100;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v9, 1, v10) == 1)
    {
      sub_10000F394((uint64_t)v9, &qword_100181690);
LABEL_36:
      uint64_t v70 = sub_10000AA4C(&qword_100181490);
      (*(void (**)(char *, uint64_t))(*(void *)(v70 - 8) + 8))(v62, v70);
      uint64_t v71 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_37:
      (*(void (**)(char *, uint64_t))(*(void *)(v71 - 8) + 8))(v102, v71);
      return 4;
    }
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v15, v9, v10);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    double v66 = v65;
    uint64_t v67 = *(void (**)(char *, uint64_t))(v63 + 8);
    v67(v13, v10);
    v67(v15, v10);
    if (v66 <= 7.0) {
      goto LABEL_36;
    }
    uint64_t v68 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v68 - 8) + 8))(v62, v68);
    uint64_t v69 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_35:
    (*(void (**)(char *, uint64_t))(*(void *)(v69 - 8) + 8))(v102, v69);
    return 2;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
  {
    unsigned __int8 v52 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v64 = sub_10000AA4C(&qword_1001806D8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = *(int *)(v64 + 80);
    goto LABEL_24;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    unsigned __int8 v44 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    sub_10000AA4C((uint64_t *)&unk_100182810);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    uint64_t v28 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    char v30 = &v28[*(int *)(sub_10000AA4C(&qword_1001806E8) + 48)];
    uint64_t v31 = &qword_100181490;
    goto LABEL_6;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.importingReceivedContact(_:))
  {
    uint64_t v58 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v59 = type metadata accessor for SFAirDrop.ContactInfo();
    goto LABEL_27;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    uint64_t v28 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    int v29 = (uint64_t *)&unk_100182800;
    goto LABEL_5;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:))
  {
    uint64_t v72 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v73 = &v72[*(int *)(sub_10000AA4C(&qword_1001827F8) + 48)];
    uint64_t v74 = type metadata accessor for SFAirDrop.ContactRequest();
    uint64_t v75 = *(void (**)(char *, uint64_t))(*(void *)(v74 - 8) + 8);
    v75(v73, v74);
    v75(v72, v74);
    return 3;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    int v37 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v76 = &v37[*(int *)(sub_10000AA4C(&qword_1001827F0) + 48)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v77 - 8) + 8))(v76, v77);
    uint64_t v43 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    goto LABEL_15;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    int v78 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 96))(v102, v16);
    uint64_t v79 = &v78[*(int *)(sub_10000AA4C(&qword_1001827E0) + 48)];
    uint64_t v81 = v97;
    uint64_t v80 = v98;
    uint64_t v82 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v79, v99);
    uint64_t v83 = v96;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v96, v81, v82);
    int v84 = (*(uint64_t (**)(char *, uint64_t))(v80 + 88))(v83, v82);
    if (v84 == enum case for SFAirDropReceive.Failure.unsupportedType(_:))
    {
      uint64_t v85 = v98;
      uint64_t v86 = v99;
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      objc_super v87 = v96;
      (*(void (**)(char *, uint64_t))(v85 + 96))(v96, v86);
      swift_bridgeObjectRelease();
      long long v88 = &v87[*(int *)(sub_10000AA4C(&qword_1001827E8) + 48)];
      uint64_t v89 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8))(v88, v89);
LABEL_57:
      uint64_t v71 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
      goto LABEL_37;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.unexpected(_:))
    {
      long long v90 = *(void (**)(char *, uint64_t))(v98 + 8);
      uint64_t v91 = v99;
      v90(v97, v99);
      v90(v96, v91);
      goto LABEL_57;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.declined(_:)
      || v84 == enum case for SFAirDropReceive.Failure.askDismissed(_:))
    {
LABEL_65:
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      uint64_t v69 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
      goto LABEL_35;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.senderCancelled(_:)) {
      goto LABEL_67;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.receiverCancelled(_:)
      || v84 == enum case for SFAirDropReceive.Failure.mixedTypes(_:))
    {
      goto LABEL_65;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:)) {
      goto LABEL_67;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.missingOwnContact(_:)) {
      goto LABEL_65;
    }
    if (v84 == enum case for SFAirDropReceive.Failure.streamError(_:)
      || v84 == enum case for SFAirDropReceive.Failure.askNotHandled(_:)
      || v84 == enum case for SFAirDropReceive.Failure.incompleteTransfer(_:)
      || v84 == enum case for SFAirDropReceive.Failure.badRequest(_:)
      || v84 == enum case for SFAirDropReceive.Failure.moveToAppFailed(_:)
      || v84 == enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
    {
LABEL_67:
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
      goto LABEL_57;
    }
    unint64_t v103 = 0;
    unint64_t v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v92._countAndFlagsBits = 0xD00000000000002ALL;
    v92._object = (void *)0x8000000100132C40;
    String.append(_:)(v92);
    _print_unlocked<A, B>(_:_:)();
LABEL_80:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v24 == enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:)) {
    return sub_100070A18();
  }
  uint64_t result = 3;
  if (v27 != enum case for SFAirDropReceive.Transfer.State.created(_:)
    && v27 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
    && v27 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
  {
    if (v27 == enum case for SFAirDropReceive.Transfer.State.waitingForContactExchangeRequest(_:)) {
      return 2;
    }
    v22(v94, v95, v16);
    unint64_t v103 = 0;
    unint64_t v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v103 = 0xD00000000000001CLL;
    unint64_t v104 = 0x8000000100132C20;
    sub_100075C98(&qword_100181658, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  return result;
}

uint64_t sub_100070A18()
{
  uint64_t v0 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v7 = (void *)static NSUserDefaults.airdrop.getter();
  int v8 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

  if (qword_10017F600 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v9 = v17[15];
  if (SFAirDropReceive.Transfer.State.sfTransferState.getter() == 9)
  {
    uint64_t v10 = (void *)static NSUserDefaults.airdrop.getter();
    int v11 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();
  }
  else
  {
    int v11 = 0;
  }
  if (SFAirDropReceive.Transfer.State.sfTransferState.getter() != 3) {
    v9 &= v11;
  }
  uint64_t v12 = SFAirDropReceive.Transfer.State.sfTransferState.getter();
  SFAirDropReceive.Transfer.State.permissionRequest.getter();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v13 = sub_10000AA4C(&qword_100181490);
  int v14 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v2, 1, v13);
  sub_10000F394((uint64_t)v2, (uint64_t *)&unk_1001827D0);
  if (v12 == 7) {
    int v15 = 1;
  }
  else {
    int v15 = v9;
  }
  if (v14 == 1)
  {
    if ((v15 & 1) == 0) {
      return 3;
    }
  }
  else if (((v15 | v8) & 1) == 0)
  {
    return 3;
  }
  return 4;
}

void sub_100070E68()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v67 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (objc_class *)type metadata accessor for AirDropSystemApertureViewController();
  v73.receiver = v0;
  v73.super_class = v7;
  [super viewDidLoad];
  id v8 = [objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
  type metadata accessor for AirDropTransferSession();
  sub_100075C98((unint64_t *)&qword_100180BD0, (void (*)(uint64_t))type metadata accessor for AirDropTransferSession);
  swift_retain();
  uint64_t v9 = ObservedObject.init(wrappedValue:)();
  uint64_t v11 = v10;
  id v12 = [objc_allocWithZone((Class)UIColor) initWithRed:0.043 green:0.608 blue:1.0 alpha:1.0];
  if (qword_10017F600 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v13 = v68;
  id v14 = objc_allocWithZone((Class)sub_10000AA4C((uint64_t *)&unk_100180BE0));
  uint64_t v68 = v9;
  uint64_t v69 = v11;
  char v70 = 1;
  id v71 = v12;
  char v72 = v13;
  int v15 = UIHostingController.init(rootView:)();
  id v16 = [v15 view];
  if (v16)
  {
    id v17 = v16;
    [v16 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v18 = [v1 view];
    if (!v18)
    {
LABEL_23:
      __break(1u);
      return;
    }
    uint64_t v19 = v18;
    [v18 addSubview:v17];

    uint64_t v20 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView];
    *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = v17;
  }
  double v65 = v15;
  long long v21 = (objc_class *)type metadata accessor for AirDropSystemApertureIconView();
  id v22 = objc_allocWithZone(v21);
  id v23 = v8;
  sub_1001056B8(v23, 2, 0x3FF0000000000000, 0);
  uint64_t v25 = v24;
  [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v26 = [v1 view];
  if (!v26)
  {
    __break(1u);
    goto LABEL_20;
  }
  int v27 = v26;
  double v66 = v4;
  [v26 addSubview:v25];

  uint64_t v28 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView];
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = v25;
  id v64 = v25;

  id v29 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureProgressView());
  id v30 = v23;
  sub_10011BE48(v30, 8, 1, 0, 0x3FF0000000000000, 0);
  uint64_t v32 = v31;
  [v31 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v33 = [v1 view];
  if (!v33)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unsigned __int8 v34 = v33;
  [v33 addSubview:v32];

  uint64_t v35 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  uint64_t v36 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = v32;
  id v63 = v32;

  id v37 = objc_allocWithZone(v21);
  id v38 = v30;
  sub_1001056B8(v38, 2, 0x3FF0000000000000, 0);
  uint64_t v40 = v39;
  [v39 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v41 = [v1 view];
  if (!v41)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v42 = v41;
  [v41 addSubview:v40];

  uint64_t v43 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView];
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = v40;
  id v44 = v40;

  id v45 = [v1 view];
  if (!v45)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unsigned __int8 v46 = v45;
  [v45 setTranslatesAutoresizingMaskIntoConstraints:0];

  uint64_t v47 = *(void **)&v1[v35];
  if (v47)
  {
    id v48 = v47;
    [v48 setHidden:sub_1000729E8() & 1];

    uint64_t v49 = *(void **)&v1[v35];
    if (v49)
    {
      uint64_t v50 = v49;
      [*(id *)&v50[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView] setHidden:sub_1000729E8() & 1];
    }
  }
  UIAccessibilityNotifications v51 = UIAccessibilityAnnouncementNotification;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  UIAccessibilityPostNotification(v51, v52);

  if (qword_10017F668 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_10000B150(v53, (uint64_t)qword_1001826C0);
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v57 = v63;
  if (v56)
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "View did load", v58, 2u);
    swift_slowDealloc();
    uint64_t v60 = v64;
    uint64_t v59 = v65;
    uint64_t v61 = v38;
  }
  else
  {
    uint64_t v59 = v54;
    uint64_t v61 = v44;
    uint64_t v60 = v63;
    uint64_t v57 = v64;
    uint64_t v54 = v65;
    id v44 = v38;
  }
}

void sub_100071544()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView];
  if (v2)
  {
    uint64_t v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints;
    unint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints];
    if (v4 >> 62)
    {
      id v7 = v2;
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v6 = v2;
      if (v5)
      {
LABEL_4:

        goto LABEL_20;
      }
    }
    sub_10000AA4C((uint64_t *)&unk_100182AC0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10012A980;
    id v10 = [v2 leadingAnchor];
    id v11 = [v1 view];
    if (!v11)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    id v12 = v11;
    id v13 = [v11 leadingAnchor];

    id v14 = [v10 constraintEqualToAnchor:v13];
    *(void *)(v9 + 32) = v14;
    id v15 = [v2 trailingAnchor];
    id v16 = [v1 view];
    if (!v16)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    id v17 = v16;
    id v18 = [v16 trailingAnchor];

    id v19 = [v15 constraintEqualToAnchor:v18];
    *(void *)(v9 + 40) = v19;
    id v20 = [v2 topAnchor];
    id v21 = [v1 view];
    if (!v21)
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    id v22 = v21;
    id v23 = [v21 topAnchor];

    id v24 = [v20 constraintEqualToAnchor:v23];
    *(void *)(v9 + 48) = v24;
    id v25 = [v2 bottomAnchor];
    id v26 = [v1 view];
    if (!v26)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    int v27 = v26;
    id v28 = [v26 bottomAnchor];

    id v29 = [v25 constraintEqualToAnchor:v28];
    *(void *)(v9 + 56) = v29;
    specialized Array._endMutation()();
    *(void *)&v1[v3] = v9;
    swift_bridgeObjectRelease();
    unint64_t v30 = *(void *)&v1[v3];
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      if (v31) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v31)
      {
LABEL_12:
        if (v31 < 1)
        {
          __break(1u);
LABEL_38:
          swift_once();
          goto LABEL_26;
        }
        uint64_t v32 = 0;
        do
        {
          if ((v30 & 0xC000000000000001) != 0) {
            id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v33 = *(id *)(v30 + 8 * v32 + 32);
          }
          uint64_t v35 = v33;
          ++v32;
          LODWORD(v34) = 1144750080;
          [v33 setPriority:v34];
        }
        while (v31 != v32);
      }
    }

    swift_bridgeObjectRelease();
  }
LABEL_20:
  uint64_t v31 = *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView];
  if (!v31) {
    return;
  }
  if (!*(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView]) {
    return;
  }
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView];
  if (!v2) {
    return;
  }
  id v101 = *(id *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
  uint64_t v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints;
  unint64_t v36 = *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints];
  if (v36 >> 62)
  {
    id v51 = (id)v31;
    id v52 = v101;
    id v53 = v2;
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v41 = v101;
    if (v54) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v38 = (id)v31;
    id v39 = v101;
    id v40 = v2;
    id v41 = v101;
    if (v37) {
      goto LABEL_41;
    }
  }
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  unint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_10012CE50;
  id v29 = [v2 widthAnchor];
  if (qword_10017F680 != -1) {
    goto LABEL_38;
  }
LABEL_26:
  id v42 = [v29 constraintEqualToConstant:*(double *)&qword_10018CF00];

  *(void *)(v30 + 32) = v42;
  id v43 = [v2 heightAnchor];
  id v44 = [v43 constraintEqualToConstant:*(double *)&qword_10018CF00];

  *(void *)(v30 + 40) = v44;
  specialized Array._endMutation()();
  *(void *)&v1[v3] = v30;
  swift_bridgeObjectRelease();
  unint64_t v45 = *(void *)&v1[v3];
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    if (v46) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v46)
    {
LABEL_28:
      if (v46 < 1)
      {
        __break(1u);
        goto LABEL_79;
      }
      uint64_t v47 = 0;
      do
      {
        if ((v45 & 0xC000000000000001) != 0) {
          id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v48 = *(id *)(v45 + 8 * v47 + 32);
        }
        uint64_t v50 = v48;
        ++v47;
        LODWORD(v49) = 1144750080;
        [v48 setPriority:v49];
      }
      while (v46 != v47);
    }
  }
  swift_bridgeObjectRelease();
  id v41 = v101;
LABEL_41:
  uint64_t v55 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints;
  unint64_t v56 = *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints];
  if (v56 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v41 = v101;
    if (v77) {
      goto LABEL_58;
    }
  }
  else if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_58;
  }
  id v57 = [v1 view];
  if (!v57)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v58 = v57;
  id v59 = [v57 SBUISA_systemApertureLeadingConcentricContentLayoutGuide];

  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_10012A980;
  id v61 = [(id)v31 centerXAnchor];
  id v62 = [v59 centerXAnchor];
  id v63 = [v61 constraintEqualToAnchor:v62];

  *(void *)(v60 + 32) = v63;
  id v64 = [(id)v31 centerYAnchor];
  id v65 = [v59 centerYAnchor];
  id v66 = [v64 constraintEqualToAnchor:v65];

  *(void *)(v60 + 40) = v66;
  id v67 = [(id)v31 widthAnchor];
  if (qword_10017F680 != -1) {
    swift_once();
  }
  id v68 = [v67 constraintEqualToConstant:*(double *)&qword_10018CF00];

  *(void *)(v60 + 48) = v68;
  id v69 = [(id)v31 heightAnchor];
  id v70 = [v69 constraintEqualToConstant:*(double *)&qword_10018CF00];

  *(void *)(v60 + 56) = v70;
  specialized Array._endMutation()();
  *(void *)&v1[v55] = v60;
  swift_bridgeObjectRelease();
  unint64_t v71 = *(void *)&v1[v55];
  if (v71 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    if (v72)
    {
LABEL_48:
      if (v72 >= 1)
      {
        uint64_t v73 = 0;
        do
        {
          if ((v71 & 0xC000000000000001) != 0) {
            id v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v74 = *(id *)(v71 + 8 * v73 + 32);
          }
          uint64_t v76 = v74;
          ++v73;
          LODWORD(v75) = 1144750080;
          [v74 setPriority:v75];
        }
        while (v72 != v73);
        goto LABEL_57;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
  }
  else
  {
    uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v72) {
      goto LABEL_48;
    }
  }
LABEL_57:

  swift_bridgeObjectRelease();
  id v41 = v101;
LABEL_58:
  uint64_t v78 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints;
  unint64_t v79 = *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints];
  if (v79 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v41 = v101;
    if (v81) {
      goto LABEL_60;
    }
LABEL_62:
    id v82 = [v1 view];
    if (!v82)
    {
LABEL_86:
      __break(1u);
      return;
    }
    uint64_t v83 = v82;
    id v80 = [v82 SBUISA_systemApertureTrailingConcentricContentLayoutGuide];

    sub_10000AA4C((uint64_t *)&unk_100182AC0);
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_10012A980;
    id v85 = [v101 centerXAnchor];
    id v86 = [v80 centerXAnchor];
    id v87 = [v85 constraintEqualToAnchor:v86];

    *(void *)(v84 + 32) = v87;
    id v88 = [v101 centerYAnchor];
    id v89 = [v80 centerYAnchor];
    id v90 = [v88 constraintEqualToAnchor:v89];

    *(void *)(v84 + 40) = v90;
    id v91 = [v101 widthAnchor];
    if (qword_10017F680 != -1) {
      swift_once();
    }
    id v92 = [v91 constraintEqualToConstant:*(double *)&qword_10018CF00];

    *(void *)(v84 + 48) = v92;
    id v93 = [v101 heightAnchor];
    id v94 = [v93 constraintEqualToConstant:*(double *)&qword_10018CF00];

    *(void *)(v84 + 56) = v94;
    specialized Array._endMutation()();
    *(void *)&v1[v78] = v84;
    swift_bridgeObjectRelease();
    unint64_t v95 = *(void *)&v1[v78];
    if (v95 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
      if (v96)
      {
LABEL_67:
        if (v96 >= 1)
        {
          uint64_t v97 = 0;
          do
          {
            if ((v95 & 0xC000000000000001) != 0) {
              id v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v98 = *(id *)(v95 + 8 * v97 + 32);
            }
            uint64_t v100 = v98;
            ++v97;
            LODWORD(v99) = 1144750080;
            [v98 setPriority:v99];
          }
          while (v96 != v97);
          goto LABEL_74;
        }
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v96 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v96) {
        goto LABEL_67;
      }
    }
LABEL_74:

    swift_bridgeObjectRelease();
    goto LABEL_75;
  }
  if (!*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_62;
  }
LABEL_60:
  id v80 = v2;
  uint64_t v2 = v41;
  id v101 = (id)v31;
LABEL_75:
}

void sub_10007218C(char a1)
{
  uint64_t v2 = v1;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  [super viewWillAppear:a1 & 1];
  if (qword_10017F668 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B150(v4, (uint64_t)qword_1001826C0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "View will appear", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView];
  if (v8)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v9 = v8;
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    id v10 = *(void **)&v9[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
    *(void *)&v9[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v12;
    id v11 = v12;

    sub_10011BA74();
  }
}

void sub_10007238C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = sub_100075BD8;
  uint64_t v10 = v2;
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 1107296256;
  id v7 = sub_1001196BC;
  uint64_t v8 = &unk_10016B100;
  uint64_t v3 = _Block_copy(&v5);
  swift_release();
  uint64_t v9 = (void (*)())nullsub_1;
  uint64_t v10 = 0;
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 1107296256;
  id v7 = sub_1001196BC;
  uint64_t v8 = &unk_10016B128;
  uint64_t v4 = _Block_copy(&v5);
  [a1 animateAlongsideTransition:v3 completion:v4];
  _Block_release(v4);
  _Block_release(v3);
}

void sub_1000724D0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    if (qword_10017F668 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B150(v2, (uint64_t)qword_1001826C0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updating views in viewWillLayoutSubviews(with:) coordinator animation block", v5, 2u);
      swift_slowDealloc();
    }

    [*(id *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] invalidateIntrinsicContentSize];
    sub_1000733F4();
    sub_100071544();
    uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode];
    switch(v6)
    {
      case 2:
        id v12 = self;
        sub_10001FB40(0, &qword_100180AC0);
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 activateConstraints:isa];

        swift_bridgeObjectRetain();
        Class v17 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 deactivateConstraints:v17];

        swift_bridgeObjectRetain();
        v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 deactivateConstraints:v15.super.isa];
        break;
      case 3:
        id v12 = self;
        sub_10001FB40(0, &qword_100180AC0);
        swift_bridgeObjectRetain();
        Class v13 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 deactivateConstraints:v13];

        swift_bridgeObjectRetain();
        Class v14 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 activateConstraints:v14];

        swift_bridgeObjectRetain();
        v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v12 activateConstraints:v15.super.isa];
        break;
      case 4:
        id v7 = self;
        sub_10001FB40(0, &qword_100180AC0);
        swift_bridgeObjectRetain();
        Class v8 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v7 deactivateConstraints:v8];

        swift_bridgeObjectRetain();
        Class v9 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v7 deactivateConstraints:v9];

        swift_bridgeObjectRetain();
        Class v10 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v7 deactivateConstraints:v10];

        swift_bridgeObjectRetain();
        v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v7 activateConstraints:v11.super.isa];
LABEL_13:

LABEL_14:
        id v18 = [v1 view];
        if (v18)
        {
          id v19 = v18;
          [v18 setNeedsLayout];
        }
        else
        {
          __break(1u);
        }
        return;
      default:
        goto LABEL_14;
    }

    swift_bridgeObjectRetain();
    v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v12 deactivateConstraints:v11.super.isa];
    goto LABEL_13;
  }
}

uint64_t sub_1000729E8()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v68 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v61 - v5;
  __chkstk_darwin(v7);
  Class v9 = (char *)&v61 - v8;
  uint64_t v10 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  __chkstk_darwin(v15);
  Class v17 = (char *)&v61 - v16;
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  id v23 = (char *)&v61 - v22;
  if (*(void *)(v0 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode) == 4) {
    return 1;
  }
  uint64_t v63 = v21;
  id v64 = v6;
  id v65 = v20;
  uint64_t v66 = v1;
  id v62 = v3;
  id v67 = v9;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v30(v23, v12, v13);
    uint64_t v31 = v65;
    v30(v65, v23, v13);
    int v32 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v31, v13);
    if (v32 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v31, v13);
      (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
      swift_bridgeObjectRelease();
      id v33 = &v17[*(int *)(sub_10000AA4C(&qword_100181940) + 64)];
      uint64_t v34 = type metadata accessor for SFAirDrop.DeclineAction();
    }
    else
    {
      if (v32 != enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
      {
        if (v32 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
        {
          uint64_t v51 = v63;
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v63, v31, v13);
          (*(void (**)(uint64_t, uint64_t))(v14 + 96))(v51, v13);
          swift_bridgeObjectRelease();
          uint64_t v52 = sub_10000AA4C(&qword_1001805A8);
          uint64_t v53 = v51 + *(int *)(v52 + 48);
          swift_bridgeObjectRelease();
          uint64_t v54 = v51 + *(int *)(v52 + 80);
          uint64_t v55 = type metadata accessor for SFAirDrop.Progress();
          uint64_t v56 = *(void *)(v55 - 8);
          int v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 88))(v53, v55);
          int v58 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
          uint64_t v59 = type metadata accessor for SFAirDrop.DeclineAction();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v54, v59);
          if (v57 == v58) {
            goto LABEL_13;
          }
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
        }
        else if (v32 == enum case for SFAirDropSend.Transfer.State.created(_:) {
               || v32 == enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
        }
        {
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v14 + 8))(v31, v13);
        return 0;
      }
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v31, v13);
      (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
      swift_bridgeObjectRelease();
      id v33 = &v17[*(int *)(sub_10000AA4C(&qword_100181938) + 48)];
      uint64_t v34 = sub_10000AA4C((uint64_t *)&unk_1001827C0);
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v31, v13);
    return 1;
  }
  sub_10000F394((uint64_t)v12, &qword_100181400);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  id v24 = v67;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = v68;
  uint64_t v26 = v66;
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v24, v66);
  if (v27 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:)) {
    goto LABEL_4;
  }
  if (v27 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    uint64_t v35 = v64;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v64, v24, v26);
    (*(void (**)(char *, uint64_t))(v25 + 96))(v35, v26);
    unint64_t v36 = &v35[*(int *)(sub_10000AA4C(&qword_1001806F0) + 48)];
    uint64_t v37 = sub_10000AA4C((uint64_t *)&unk_1001827B0);
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
    uint64_t v38 = type metadata accessor for SFAirDrop.ContactInfo();
    (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v35, v38);
    goto LABEL_9;
  }
  if (v27 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
  {
LABEL_4:
    id v28 = v64;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v64, v24, v26);
    (*(void (**)(char *, uint64_t))(v25 + 96))(v28, v26);
    uint64_t v29 = sub_10000AA4C(&qword_100181490);
    (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
    return 1;
  }
  if (v27 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    id v40 = v62;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v62, v24, v26);
    (*(void (**)(char *, uint64_t))(v25 + 96))(v40, v26);
    uint64_t v41 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    id v42 = &v40[*(int *)(v41 + 48)];
    swift_bridgeObjectRelease();
    id v43 = &v40[*(int *)(v41 + 80)];
    uint64_t v44 = type metadata accessor for SFAirDrop.Progress();
    uint64_t v45 = *(void *)(v44 - 8);
    int v46 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v42, v44);
    int v47 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
    uint64_t v48 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v43, v48);
    BOOL v49 = v46 == v47;
    id v24 = v67;
    if (v49)
    {
      uint64_t v50 = type metadata accessor for SFAirDropReceive.ItemDestination();
      (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v40, v50);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
    uint64_t v60 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v40, v60);
  }
  else if (v27 == enum case for SFAirDropReceive.Transfer.State.created(_:) {
         || v27 == enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
  }
         || v27 == enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
  {
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
  return 0;
}

uint64_t sub_1000733F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v84 = (char *)&v81 - v6;
  __chkstk_darwin(v7);
  id v88 = (char *)&v81 - v8;
  uint64_t v9 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v85 = (char *)&v81 - v17;
  uint64_t v89 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView;
  uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView);
  if (v18)
  {
    id v19 = v18;
    [v19 setHidden:sub_1000729E8() & 1];

    id v20 = *(void **)(v0 + v89);
    if (v20)
    {
      uint64_t v21 = v20;
      [*(id *)&v21[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView] setHidden:sub_1000729E8() & 1];
    }
  }
  uint64_t v22 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000F394((uint64_t)v11, &qword_100181400);
    id v85 = (char *)v22;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    id v23 = v88;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v82 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView;
    uint64_t v83 = v0;
    id v24 = *(char **)(v0 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView);
    if (v24)
    {
      uint64_t v26 = v86;
      uint64_t v25 = v87;
      int v27 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      id v28 = v84;
      v27(v84, v88, v87);
      uint64_t v29 = &v24[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState];
      swift_beginAccess();
      unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 24);
      uint64_t v31 = v24;
      v30(v29, v28, v25);
      uint64_t v32 = v25;
      swift_endAccess();
      sub_100105F34();
      uint64_t v33 = v26;
      id v23 = v88;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v25);
    }
    else
    {
      uint64_t v33 = v86;
      int v27 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
      uint64_t v32 = v87;
    }
    uint64_t v54 = v83;
    v27(v4, v23, v32);
    int v55 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v4, v32);
    if (v55 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v33 + 96))(v4, v32);
      uint64_t v56 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
      int v57 = &v4[*(int *)(v56 + 48)];
      swift_bridgeObjectRelease();
      int v58 = &v4[*(int *)(v56 + 80)];
      uint64_t v59 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v58, v59);
      uint64_t v60 = type metadata accessor for SFAirDrop.Progress();
      (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v57, v60);
    }
    else if (v55 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
    {
      (*(void (**)(char *, uint64_t))(v33 + 96))(v4, v32);
      uint64_t v61 = sub_10000AA4C(&qword_1001814D0);
      swift_bridgeObjectRelease();
      id v62 = &v4[*(int *)(v61 + 80)];
      uint64_t v63 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v63 - 8) + 8))(v62, v63);
    }
    else
    {
      if (v55 != enum case for SFAirDropReceive.Transfer.State.importing(_:))
      {
        id v80 = *(void (**)(char *, uint64_t))(v33 + 8);
        v80(v23, v32);
        return ((uint64_t (*)(char *, uint64_t))v80)(v4, v32);
      }
      (*(void (**)(char *, uint64_t))(v33 + 96))(v4, v32);
      sub_10000AA4C((uint64_t *)&unk_100182790);
      swift_bridgeObjectRelease();
    }
    uint64_t v64 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v64 - 8) + 8))(v4, v64);
    uint64_t v65 = SFAirDropReceive.Transfer.State.currentProgressCount.getter();
    uint64_t v66 = SFAirDropReceive.Transfer.State.totalProgressCount.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    id v67 = v90;
    [v90 setCompletedUnitCount:v65];

    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    id v68 = v90;
    [v90 setTotalUnitCount:v66];

    id v69 = *(void **)(v54 + v82);
    if (v69)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      id v70 = v69;
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      id v71 = v90;
      [v90 fractionCompleted];
      uint64_t v73 = v72;

      *(void *)&v70[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = v73;
      sub_100105F34();
    }
    id v74 = *(void **)(v54 + v89);
    uint64_t v75 = v87;
    if (v74)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v76 = v74;
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      id v77 = v90;
      uint64_t v78 = *(void **)&v76[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
      *(void *)&v76[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v90;
      id v79 = v77;

      sub_10011BA74();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v23, v75);
  }
  else
  {
    uint64_t v34 = v85;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v85, v11, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v34, v12);
    if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
      swift_bridgeObjectRelease();
      uint64_t v87 = sub_10000AA4C(&qword_1001805A8);
      id v88 = v15;
      swift_bridgeObjectRelease();
      uint64_t v35 = SFAirDropSend.Transfer.State.currentProgressCount.getter();
      uint64_t v86 = SFAirDropSend.Transfer.State.totalProgressCount.getter();
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      id v36 = v90;
      [v90 setCompletedUnitCount:v35];

      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      swift_release();
      id v37 = v90;
      [v90 setTotalUnitCount:v86];

      uint64_t v38 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView);
      if (v38)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        id v39 = v38;
        swift_retain();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_release();
        id v40 = v90;
        [v90 fractionCompleted];
        uint64_t v42 = v41;

        *(void *)&v39[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = v42;
        sub_100105F34();
      }
      id v43 = *(void **)(v1 + v89);
      if (v43)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v44 = v43;
        swift_retain();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_release();
        id v45 = v90;
        int v46 = *(void **)&v44[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress];
        *(void *)&v44[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress] = v90;
        id v47 = v45;

        sub_10011BA74();
      }
      uint64_t v48 = &v88[*(int *)(v87 + 48)];
      BOOL v49 = &v88[*(int *)(v87 + 80)];
      (*(void (**)(char *, uint64_t))(v13 + 8))(v85, v12);
      uint64_t v50 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
      uint64_t v51 = type metadata accessor for SFAirDrop.Progress();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v48, v51);
    }
    else
    {
      uint64_t v53 = *(void (**)(char *, uint64_t))(v13 + 8);
      v53(v34, v12);
      return ((uint64_t (*)(char *, uint64_t))v53)(v15, v12);
    }
  }
}

uint64_t sub_100074070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (qword_10017F668 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_1001826C0);
  id v9 = v5;
  swift_retain_n();
  uint64_t v10 = (char *)v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v31 = a4;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_retain();
    unint64_t v14 = sub_100086058();
    unint64_t v16 = v15;
    swift_release();
    sub_100047F98(v14, v16, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_retain();
    unint64_t v17 = sub_100086058();
    unint64_t v19 = v18;
    swift_release();
    sub_100047F98(v17, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Transitioning SystemAperture session %s -> %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v31;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  uint64_t v21 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  Swift::Bool v23 = String.hasPrefix(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_retain();
    char v24 = sub_10008DC1C(a1);
    swift_release();
    char v25 = v24 ^ 1;
  }
  else
  {
    char v25 = 1;
  }
  if (v10[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode + 8] == 1)
  {
    uint64_t v26 = swift_retain();
    uint64_t v27 = sub_10006F57C(v26);
    swift_release();
  }
  else
  {
    uint64_t v27 = *(void *)&v10[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  }
  uint64_t v28 = sub_10006F57C(a1);
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000752FC(v27, v28, a5 & 1, v25 & 1, v10, v29, a1, a2, a3, a4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100074440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v10 = (void *)result;
    swift_retain();

    sub_10008B518(a2, a3, a4, a5);
    return swift_release();
  }
  return result;
}

id sub_100074528()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for AirDropSystemApertureViewController()
{
  return self;
}

uint64_t sub_10007466C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000746A4@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_1000746B8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100074734()
{
  return sub_100074748();
}

uint64_t sub_100074748()
{
  return static Published.subscript.setter();
}

id sub_1000747B8(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_cancellableObservers] = &_swiftEmptySetSingleton;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_contentRole] = 2;
  char v3 = &v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  *(void *)char v3 = 0;
  v3[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_maximumLayoutMode] = 4;
  v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_preventsInteractiveDismissal] = 0;
  uint64_t v4 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(void *)&v1[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_elementIdentifier] = SBUISystemApertureElementIdentifierAirDrop;
  uint64_t v5 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_keyColor;
  id v6 = objc_allocWithZone((Class)UIColor);
  uint64_t v7 = v1;
  id v8 = v4;
  *(void *)&v1[v5] = [v6 initWithRed:0.246 green:0.6 blue:1.0 alpha:1.0];
  *(void *)&v7[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropTransferSession] = a1;
  swift_retain();

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for AirDropSystemApertureViewController();
  return [super initWithNibName:0 bundle:0];
}

uint64_t sub_100074960(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropSend.Failure();
  uint64_t v42 = *(uint8_t **)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = (void (**)(char *, char *, uint64_t))((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v41 - v13;
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v41 - v13, a1, v8);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v14, v8);
  if (v16 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    swift_bridgeObjectRelease();
    v14 += *(int *)(sub_10000AA4C(&qword_100181940) + 64);
    uint64_t v17 = type metadata accessor for SFAirDrop.DeclineAction();
LABEL_5:
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v14, v17);
    return 3;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    swift_bridgeObjectRelease();
    v14 += *(int *)(sub_10000AA4C(&qword_100181938) + 48);
    uint64_t v17 = sub_10000AA4C((uint64_t *)&unk_1001827C0);
    goto LABEL_5;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_10000AA4C(&qword_1001805A8);
    uint64_t v21 = &v14[*(int *)(v20 + 48)];
    swift_bridgeObjectRelease();
    Swift::String v22 = &v14[*(int *)(v20 + 80)];
    uint64_t v23 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
    uint64_t v24 = type metadata accessor for SFAirDrop.Progress();
    (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v21, v24);
    return 3;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    char v25 = &v14[*(int *)(sub_10000AA4C(&qword_100182840) + 48)];
    uint64_t v26 = (uint64_t *)&unk_1001827B0;
LABEL_12:
    uint64_t v27 = sub_10000AA4C(v26);
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v25, v27);
    uint64_t v28 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_15:
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v14, v28);
    return 2;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.exchanging(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    uint64_t v28 = type metadata accessor for SFAirDrop.ContactRequest();
    goto LABEL_15;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.waitingForImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    char v25 = &v14[*(int *)(sub_10000AA4C(&qword_100182830) + 48)];
    uint64_t v26 = (uint64_t *)&unk_100182838;
    goto LABEL_12;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 96);
    v9 += 96;
    v29(v14, v8);
    uint64_t v30 = sub_10000AA4C(&qword_100180598);
    os_log_type_t v12 = (void (**)(char *, char *, uint64_t))v42;
    (*((void (**)(char *, char *, uint64_t))v42 + 4))(v7, &v14[*(int *)(v30 + 48)], v2);
    v12[2](v5, v7, v2);
    int v31 = ((uint64_t (*)(char *, uint64_t))v12[11])(v5, v2);
    if (v31 == enum case for SFAirDropSend.Failure.missingEndpoint(_:))
    {
LABEL_20:
      uint64_t v32 = v12[1];
      ((void (*)(char *, uint64_t))v32)(v7, v2);
      ((void (*)(char *, uint64_t))v32)(v5, v2);
LABEL_21:
      uint64_t v33 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v14, v33);
      return 4;
    }
    if (v31 == enum case for SFAirDropSend.Failure.resolveFailure(_:)) {
      goto LABEL_25;
    }
    if (v31 == enum case for SFAirDropSend.Failure.unexpected(_:)) {
      goto LABEL_20;
    }
    if (v31 == enum case for SFAirDropSend.Failure.receiverDeclined(_:)
      || v31 == enum case for SFAirDropSend.Failure.cancelled(_:))
    {
      goto LABEL_25;
    }
    if (v31 == enum case for SFAirDropSend.Failure.unsupportedConnection(_:)
      || v31 == enum case for SFAirDropSend.Failure.badRequest(_:)
      || v31 == enum case for SFAirDropSend.Failure.badResponse(_:))
    {
      ((void (*)(char *, uint64_t))v12[1])(v7, v2);
      goto LABEL_21;
    }
    if (v31 == enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:)
      || v31 == enum case for SFAirDropSend.Failure.streamError(_:)
      || v31 == enum case for SFAirDropSend.Failure.missingOwnContact(_:)
      || v31 == enum case for SFAirDropSend.Failure.missingRecordData(_:)
      || v31 == enum case for SFAirDropSend.Failure.serverError(_:))
    {
      (*((void (**)(char *, uint64_t))v42 + 1))(v7, v2);
      goto LABEL_21;
    }
    os_log_type_t v12 = (void (**)(char *, char *, uint64_t))v42;
    if (v31 == enum case for SFAirDropSend.Failure.insufficientStorage(_:))
    {
LABEL_25:
      ((void (*)(char *, uint64_t))v12[1])(v7, v2);
      uint64_t v28 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
      goto LABEL_15;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_48;
  }
  if (v16 == enum case for SFAirDropSend.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v14, v8);
    sub_10000AA4C((uint64_t *)&unk_100182820);
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
    goto LABEL_5;
  }
  uint64_t v18 = 3;
  if (v16 != enum case for SFAirDropSend.Transfer.State.created(_:)
    && v16 != enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
  {
    if (qword_10017F668 == -1)
    {
LABEL_29:
      uint64_t v34 = type metadata accessor for Logger();
      sub_10000B150(v34, (uint64_t)qword_1001826C0);
      v15((char *)v12, a1, v8);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        id v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)id v37 = 136315138;
        uint64_t v42 = v37 + 4;
        sub_100075C98(&qword_100181660, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State);
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v43 = sub_100047F98(v38, v39, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v40 = *(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v9 + 8);
        v40(v12, v8);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unknown send state value %s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v40 = *(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v9 + 8);
        v40(v12, v8);
      }

      v40((void (**)(char *, char *, uint64_t))v14, v8);
      return 3;
    }
LABEL_48:
    swift_once();
    goto LABEL_29;
  }
  return v18;
}

uint64_t sub_1000752FC(uint64_t a1, uint64_t a2, char a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  uint64_t v55 = a8;
  v17[4] = a8;
  void v17[5] = a9;
  v17[6] = a10;
  if (a1 != a2 || (a3 & 1) != 0)
  {
    uint64_t v26 = qword_10017F668;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000B150(v27, (uint64_t)qword_1001826C0);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t type = v29;
      uint64_t v30 = swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      id v31 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t log = v28;
      unint64_t v34 = v33;

      uint64_t v63 = sub_100047F98(v32, v34, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      id v35 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v63 = sub_100047F98(v36, v38, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Transitioning layout mode %s -> %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v50 = (void *)Strong;
      swift_retain();

      sub_10008B518(a7, v55, a9, a10);
      swift_release();
    }
    id v23 = [a5 systemApertureElementContext];
    uint64_t v61 = nullsub_1;
    uint64_t v62 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v59 = sub_100119678;
    uint64_t v60 = &unk_10016AFE8;
    char v25 = _Block_copy(&aBlock);
    goto LABEL_23;
  }
  uint64_t v18 = qword_10017F668;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (a1 != 4)
  {
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10000B150(v39, (uint64_t)qword_1001826C0);
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      id v43 = (id)SBUISystemApertureLayoutModeDescription();
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      uint64_t v63 = sub_100047F98(v44, v46, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Updating layout between %s mode views", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v23 = [a5 systemApertureElementContext];
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = sub_100075B38;
    *(void *)(v47 + 24) = v17;
    uint64_t v61 = sub_100075EF8;
    uint64_t v62 = v47;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v48 = &unk_10016B038;
    goto LABEL_25;
  }
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10000B150(v19, (uint64_t)qword_1001826C0);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    Swift::String v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Updating layout between custom mode views", v22, 2u);
    swift_slowDealloc();
  }

  id v23 = [a5 systemApertureElementContext];
  if ((a4 & 1) == 0)
  {
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = sub_100075B38;
    *(void *)(v51 + 24) = v17;
    uint64_t v61 = sub_100075EF8;
    uint64_t v62 = v51;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v58 = 1107296256;
    uint64_t v48 = &unk_10016B088;
LABEL_25:
    uint64_t v59 = sub_100119678;
    uint64_t v60 = v48;
    char v25 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v23 setElementNeedsUpdateWithCoordinatedAnimations:v25];
    goto LABEL_26;
  }
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_100075B38;
  *(void *)(v24 + 24) = v17;
  uint64_t v61 = sub_100075B98;
  uint64_t v62 = v24;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v58 = 1107296256;
  uint64_t v59 = sub_100119678;
  uint64_t v60 = &unk_10016B0D8;
  char v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
LABEL_23:
  [v23 setElementNeedsLayoutUpdateWithOptions:1 coordinatedAnimations:v25];
LABEL_26:
  _Block_release(v25);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_100075AE8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100075B38()
{
  return sub_100074440(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_100075B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100075B58()
{
  return swift_release();
}

uint64_t sub_100075B60()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100075B98()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100075BD8()
{
}

uint64_t sub_100075BE0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100075C08()
{
  return sub_100074748();
}

uint64_t sub_100075C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075C98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100075CE0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100075D08()
{
  return sub_100074748();
}

void sub_100075D30()
{
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropPlatterViewCustomModeLayoutConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconViewDefaultModeLayoutConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_progressViewDefaultModeLayoutConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_airDropIconMitosisViewMinimalModeLayoutConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_cancellableObservers] = &_swiftEmptySetSingleton;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_activeLayoutMode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_contentRole] = 2;
  uint64_t v1 = &v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_overridePreferredLayoutMode];
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_maximumLayoutMode] = 4;
  v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_preventsInteractiveDismissal] = 0;
  uint64_t v2 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_elementIdentifier] = SBUISystemApertureElementIdentifierAirDrop;
  uint64_t v3 = OBJC_IVAR____TtC9AirDropUI35AirDropSystemApertureViewController_keyColor;
  id v4 = objc_allocWithZone((Class)UIColor);
  id v5 = v2;
  *(void *)&v0[v3] = [v4 initWithRed:0.246 green:0.6 blue:1.0 alpha:1.0];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for DefaultView()
{
  return &type metadata for DefaultView;
}

uint64_t sub_100075F0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100075F28@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

void *sub_100075F90()
{
  return &protocol witness table for Text;
}

uint64_t destroy for ContactDetails()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContactDetails(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  return a1;
}

__n128 initializeWithTake for ContactDetails(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ContactDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDetails(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 100)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 100) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDetails()
{
  return &type metadata for ContactDetails;
}

uint64_t destroy for RemotePerson(uint64_t a1)
{
  return sub_10005E778(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
}

uint64_t initializeWithCopy for RemotePerson(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  int v16 = *(_DWORD *)(a2 + 96);
  sub_10005EAC4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for RemotePerson(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  unint64_t v22 = *(void *)(a2 + 72);
  uint64_t v23 = *(void *)(a2 + 80);
  uint64_t v24 = *(void *)(a2 + 88);
  int v25 = *(_DWORD *)(a2 + 96);
  sub_10005EAC4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v23;
  *(void *)(a1 + 88) = v24;
  *(_DWORD *)(a1 + 96) = v25;
  sub_10005E778(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1));
  return a1;
}

uint64_t assignWithTake for RemotePerson(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 96);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  long long v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 96) = v3;
  sub_10005E778(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((unint64_t *)&v12 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for RemotePerson(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 100)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  HIDWORD(v3) = *(_DWORD *)(a1 + 76);
  LODWORD(v3) = HIDWORD(v3);
  unsigned int v2 = v3 >> 30;
  if (v2 > 0x80000000) {
    int v4 = ~v2;
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

double storeEnumTagSinglePayload for RemotePerson(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 96) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 100) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = (unint64_t)(v4 >> 2) << 32;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 100) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1000766CC(uint64_t a1)
{
  return *(void *)(a1 + 72) >> 62;
}

uint64_t sub_1000766D8(uint64_t result)
{
  *(void *)(result + 72) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1000766E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2 << 30;
  return result;
}

ValueMetadata *type metadata accessor for RemotePerson()
{
  return &type metadata for RemotePerson;
}

void sub_100076704(uint64_t a1)
{
  sub_10005EB7C(v1, (uint64_t)v6);
  uint64_t v3 = *((void *)&v9 + 1) >> 62;
  if (*((void *)&v9 + 1) >> 62)
  {
    *((void *)&v9 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
    uint64_t v4 = v7;
    if (v3 == 1) {
      Swift::UInt v5 = 1;
    }
    else {
      Swift::UInt v5 = 2;
    }
    Hasher._combine(_:)(v5);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_10007750C(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    *((void *)&v9 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
    int v18 = v11;
    long long v12 = v6[0];
    long long v13 = v6[1];
    long long v14 = v7;
    long long v15 = v8;
    long long v16 = v9;
    long long v17 = v10;
    Hasher._combine(_:)(0);
    sub_100076CAC(a1);
  }
}

void sub_10007684C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

Swift::Int sub_1000768C0(uint64_t a1, uint64_t a2, int a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10007695C()
{
  sub_10005EB7C(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  sub_100076704((uint64_t)&v2);
  return Hasher._finalize()();
}

void sub_1000769AC(uint64_t a1)
{
  sub_10005EB7C(v1, (uint64_t)v3);
  sub_100076704(a1);
}

Swift::Int sub_1000769EC()
{
  sub_10005EB7C(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  sub_100076704((uint64_t)&v2);
  return Hasher._finalize()();
}

uint64_t sub_100076A40(uint64_t a1, uint64_t a2)
{
  sub_10005EB7C(a1, (uint64_t)v4);
  sub_10005EB7C(a2, (uint64_t)v5);
  return sub_1000778B0((uint64_t)v4, (uint64_t)v5) & 1;
}

unint64_t sub_100076A90()
{
  unint64_t result = qword_100182848;
  if (!qword_100182848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182848);
  }
  return result;
}

Swift::Int sub_100076AE4()
{
  if (*(unsigned char *)(v0 + 17)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *(unsigned __int8 *)(v0 + 16);
  if (*(unsigned char *)(v0 + 18)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (*(unsigned char *)(v0 + 19)) {
    int v4 = 0x1000000;
  }
  else {
    int v4 = 0;
  }
  return sub_1000768C0(*(void *)v0, *(void *)(v0 + 8), v2 | v3 | v4);
}

void sub_100076B2C(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(unsigned char *)(v1 + 18)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(v1 + 19)) {
    int v5 = 0x1000000;
  }
  else {
    int v5 = 0;
  }
  sub_10007684C(a1, *(void *)v1, *(void *)(v1 + 8), v3 | v4 | v5);
}

Swift::Int sub_100076B74()
{
  Swift::UInt8 v1 = v0[16];
  Swift::UInt8 v2 = v0[17];
  Swift::UInt8 v3 = v0[18];
  Swift::UInt8 v4 = v0[19];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_100076C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 18);
  int v6 = *(unsigned __int8 *)(a1 + 19);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(unsigned __int8 *)(a2 + 16);
  int v10 = *(unsigned __int8 *)(a2 + 17);
  int v11 = *(unsigned __int8 *)(a2 + 18);
  int v12 = *(unsigned __int8 *)(a2 + 19);
  if (*(unsigned char *)(a1 + 17)) {
    int v13 = 256;
  }
  else {
    int v13 = 0;
  }
  int v14 = v13 | v4;
  if (v5) {
    int v15 = 0x10000;
  }
  else {
    int v15 = 0;
  }
  if (v6) {
    int v16 = 0x1000000;
  }
  else {
    int v16 = 0;
  }
  int v17 = v14 | v15 | v16;
  if (v10) {
    int v18 = 256;
  }
  else {
    int v18 = 0;
  }
  int v19 = v18 | v9;
  if (v11) {
    int v20 = 0x10000;
  }
  else {
    int v20 = 0;
  }
  if (v12) {
    int v21 = 0x1000000;
  }
  else {
    int v21 = 0;
  }
  return sub_100077B20(v2, v3, v17, v7, v8, v19 | v20 | v21);
}

void sub_100076CAC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain();
  sub_10007750C(a1, v4);
  swift_bridgeObjectRelease();
  if (!*(void *)(v2 + 64))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v2 + 88)) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  int v5 = *(_DWORD *)(v2 + 72);
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v5 & 1);
  Hasher._combine(_:)(BYTE1(v5) & 1);
  Hasher._combine(_:)(BYTE2(v5) & 1);
  Hasher._combine(_:)(HIBYTE(v5) & 1);
  swift_bridgeObjectRelease();
  if (!*(void *)(v2 + 88)) {
    goto LABEL_7;
  }
LABEL_3:
  int v6 = *(_DWORD *)(v2 + 96);
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v6 & 1);
  Hasher._combine(_:)(BYTE1(v6) & 1);
  Hasher._combine(_:)(BYTE2(v6) & 1);
  Hasher._combine(_:)(HIBYTE(v6) & 1);

  swift_bridgeObjectRelease();
}

Swift::Int sub_100076E54()
{
  Hasher.init(_seed:)();
  sub_100076CAC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100076E98()
{
  Hasher.init(_seed:)();
  sub_100076CAC((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100076ED4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  void v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  int v12 = *(_DWORD *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  int v14 = *(_DWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  void v13[3] = v7;
  return sub_1000776F0((uint64_t)v11, (uint64_t)v13) & 1;
}

unint64_t sub_100076F44()
{
  unint64_t result = qword_100182850;
  if (!qword_100182850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182850);
  }
  return result;
}

Swift::Int sub_100076F98()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10007750C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100077048(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10007750C(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000770EC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10007750C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100077198(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100077A90(v5, v7) & 1;
}

uint64_t sub_1000771E4(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v31 = result;
  uint64_t v32 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v33 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v40 = a2 + 56;
  if (v6) {
    goto LABEL_7;
  }
LABEL_9:
  int64_t v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v8 >= v33) {
    return 1;
  }
  unint64_t v9 = *(void *)(v32 + 8 * v8);
  int64_t v10 = v3 + 1;
  if (!v9)
  {
    int64_t v10 = v8 + 1;
    if (v8 + 1 >= v33) {
      return 1;
    }
    unint64_t v9 = *(void *)(v32 + 8 * v10);
    if (!v9)
    {
      int64_t v10 = v8 + 2;
      if (v8 + 2 >= v33) {
        return 1;
      }
      unint64_t v9 = *(void *)(v32 + 8 * v10);
      if (!v9)
      {
        int64_t v11 = v8 + 3;
        if (v11 < v33)
        {
          unint64_t v9 = *(void *)(v32 + 8 * v11);
          if (v9)
          {
            int64_t v10 = v11;
            goto LABEL_22;
          }
          while (1)
          {
            int64_t v10 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              break;
            }
            if (v10 >= v33) {
              return 1;
            }
            unint64_t v9 = *(void *)(v32 + 8 * v10);
            ++v11;
            if (v9) {
              goto LABEL_22;
            }
          }
LABEL_39:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_22:
  uint64_t v34 = (v9 - 1) & v9;
  int64_t v35 = v10;
  for (unint64_t i = __clz(__rbit64(v9)) + (v10 << 6); ; unint64_t i = __clz(__rbit64(v6)) | (v3 << 6))
  {
    uint64_t v12 = *(void *)(result + 48) + 24 * i;
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    int v15 = *(unsigned __int8 *)(v12 + 16);
    int v16 = *(unsigned __int8 *)(v12 + 17);
    int v17 = *(unsigned __int8 *)(v12 + 18);
    int v18 = *(unsigned __int8 *)(v12 + 19);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    int v39 = v15;
    Hasher._combine(_:)(v15);
    int v38 = v16;
    Hasher._combine(_:)(v16);
    int v19 = v17;
    Hasher._combine(_:)(v17);
    int v37 = v18;
    Hasher._combine(_:)(v18);
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v22 = v20 & ~v21;
    if (((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
      break;
    }
    uint64_t v23 = ~v21;
    uint64_t v24 = *(void *)(a2 + 48);
    while (1)
    {
      uint64_t v25 = v24 + 24 * v22;
      int v26 = *(unsigned __int8 *)(v25 + 16);
      int v27 = *(unsigned __int8 *)(v25 + 17);
      int v28 = *(unsigned __int8 *)(v25 + 19);
      int v29 = v19 ^ *(unsigned __int8 *)(v25 + 18);
      if (*(void *)v25 != v14 || *(void *)(v25 + 8) != v13) {
        break;
      }
      if (((v39 ^ v26 | v38 ^ v27 | v29) & 1) == 0) {
        goto LABEL_26;
      }
LABEL_27:
      unint64_t v22 = (v22 + 1) & v23;
      if (((*(void *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
        goto LABEL_35;
      }
    }
    if ((v39 ^ v26) & 1 | ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) | ((v38 ^ v27) | v29) & 1) {
      goto LABEL_27;
    }
LABEL_26:
    if ((v37 ^ v28)) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    int64_t v3 = v35;
    uint64_t v2 = a2;
    unint64_t result = v31;
    unint64_t v6 = v34;
    if (!v34) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v34 = (v6 - 1) & v6;
    int64_t v35 = v3;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10007750C(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2 + 56;
  Hasher._finalize()();
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v21 = a2;
  swift_bridgeObjectRetain();
  Swift::UInt v7 = 0;
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v8++, 1)) {
      goto LABEL_19;
    }
    if (v8 >= v6)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v7);
      return;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v8);
    if (!v18) {
      break;
    }
LABEL_16:
    unint64_t v5 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
    int64_t v11 = (unsigned char *)(*(void *)(v21 + 48) + 24 * v10);
    Swift::UInt8 v12 = v11[16];
    Swift::UInt8 v13 = v11[17];
    Swift::UInt8 v14 = v11[18];
    Swift::UInt8 v15 = v11[19];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v15);
    Swift::Int v16 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v7 ^= v16;
  }
  int64_t v19 = v8 + 1;
  if (v8 + 1 >= v6) {
    goto LABEL_17;
  }
  unint64_t v18 = *(void *)(v20 + 8 * v19);
  if (v18)
  {
    ++v8;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_17;
    }
    unint64_t v18 = *(void *)(v20 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_1000776F0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v9 & 1) != 0))
      {
        if ((sub_1000771E4(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1) == 0) {
          return 0;
        }
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v11 = *(void *)(a2 + 64);
        if (!v10)
        {
          if (v11) {
            return 0;
          }
LABEL_27:
          uint64_t v16 = *(void *)(a1 + 88);
          uint64_t v17 = *(void *)(a2 + 88);
          if (v16)
          {
            if (v17)
            {
              uint64_t v18 = *(void *)(a1 + 80);
              int v19 = *(_DWORD *)(a1 + 96);
              uint64_t v20 = *(void *)(a2 + 80);
              int v21 = *(_DWORD *)(a2 + 96);
              if (v18 == v20 && v16 == v17)
              {
                unsigned int v22 = v19 ^ v21;
                if (((v19 ^ v21) & 1) != 0 || ((v22 >> 8) & 1) != 0 || (v22 & 0x10000) != 0 || (v22 & 0x1000000) != 0) {
                  return 0;
                }
              }
              else
              {
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  return 0;
                }
                unsigned int v23 = v19 ^ v21;
                if (((v19 ^ v21) & 1) != 0 || ((v23 >> 8) & 1) != 0 || (v23 & 0x10000) != 0 || (v23 & 0x1000000) != 0) {
                  return 0;
                }
              }
              return 1;
            }
          }
          else if (!v17)
          {
            return 1;
          }
          return 0;
        }
        if (!v11) {
          return 0;
        }
        int v12 = *(_DWORD *)(a1 + 72);
        int v13 = *(_DWORD *)(a2 + 72);
        if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && v10 == v11)
        {
          uint64_t result = 0;
        }
        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v14 & 1) == 0) {
            return result;
          }
        }
        unsigned int v15 = v12 ^ v13;
        if (((v12 ^ v13) & 1) == 0 && ((v15 >> 8) & 1) == 0 && (v15 & 0x10000) == 0 && (v15 & 0x1000000) == 0) {
          goto LABEL_27;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000778B0(uint64_t a1, uint64_t a2)
{
  sub_10005EB7C(a1, (uint64_t)&v19);
  if (*((void *)&v23 + 1) >> 62)
  {
    if (*((void *)&v23 + 1) >> 62 == 1)
    {
      *((void *)&v23 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v4 = *((void *)&v19 + 1);
      unint64_t v3 = v19;
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v5 = v20;
      uint64_t v7 = v21;
      sub_10005EB7C(a2, (uint64_t)&v26);
      uint64_t v8 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1) >> 62 != 1) {
        goto LABEL_14;
      }
    }
    else
    {
      *((void *)&v23 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v4 = *((void *)&v19 + 1);
      unint64_t v3 = v19;
      unint64_t v6 = *((void *)&v20 + 1);
      unint64_t v5 = v20;
      uint64_t v7 = v21;
      sub_10005EB7C(a2, (uint64_t)&v26);
      uint64_t v8 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1) >> 62 != 2) {
        goto LABEL_14;
      }
    }
    *((void *)&v30 + 1) = v8 & 0x3FFFFFFFFFFFFFFFLL;
    long long v10 = v27;
    uint64_t v11 = v28;
    if (__PAIR128__(v4, v3) == v26 || (_stringCompareWithSmolCheck(_:_:expecting:)())
      && (__PAIR128__(v6, v5) == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (sub_1000771E4(v7, v11) & 1) != 0)
    {
      char v9 = 1;
      return v9 & 1;
    }
LABEL_14:
    char v9 = 0;
    return v9 & 1;
  }
  *((void *)&v23 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
  int v32 = v25;
  long long v26 = v19;
  long long v27 = v20;
  long long v28 = v21;
  long long v29 = v22;
  long long v30 = v23;
  long long v31 = v24;
  sub_10005EB7C(a2, (uint64_t)v13);
  if (*((void *)&v14 + 1) >> 62) {
    goto LABEL_14;
  }
  v17[4] = v14;
  void v17[5] = v15;
  int v18 = v16;
  v17[0] = v13[0];
  v17[1] = v13[1];
  v17[2] = v13[2];
  v17[3] = v13[3];
  char v9 = sub_1000776F0((uint64_t)&v26, (uint64_t)v17);
  return v9 & 1;
}

uint64_t sub_100077A90(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[4];

  return sub_1000771E4(v6, v7);
}

uint64_t sub_100077B20(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  __int16 v8 = a3 ^ a6;
  unsigned int v9 = ((a3 ^ a6) >> 16) & 1;
  if (a1 == a4 && a2 == a5)
  {
    if ((a3 ^ a6 | (((a3 ^ a6) & 0x100) >> 8)) & 1 | ((a3 ^ a6) >> 16) & 1) {
      return 0;
    }
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if (v8 & 1 | ((v11 & 1) == 0) | ((unsigned __int16)(v8 & 0x100) >> 8) & 1 | v9 & 1) {
      return result;
    }
  }
  return ((a3 & 0x1000000) == 0) ^ ((a6 & 0x1000000) >> 24);
}

uint64_t sub_100077BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Handle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

__n128 initializeWithTake for Handle(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Handle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Handle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Handle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Handle()
{
  return &type metadata for Handle;
}

uint64_t destroy for DeviceDetails()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DeviceDetails(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DeviceDetails(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DeviceDetails(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DeviceDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceDetails(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceDetails()
{
  return &type metadata for DeviceDetails;
}

unint64_t sub_100077FA0()
{
  unint64_t result = qword_100182858;
  if (!qword_100182858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182858);
  }
  return result;
}

unint64_t sub_100077FF8()
{
  unint64_t result = qword_100182860;
  if (!qword_100182860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182860);
  }
  return result;
}

void sub_10007804C()
{
  qword_10018CEF0 = 0x4032000000000000;
}

void sub_10007805C()
{
  qword_10018CEF8 = 0x4028000000000000;
}

void sub_10007806C()
{
  qword_10018CF00 = 0x4038000000000000;
}

void sub_10007807C()
{
  qword_10018CF08 = 0x405B800000000000;
}

double sub_100078090()
{
  double result = 15.0;
  xmmword_10018CF10 = xmmword_10012D260;
  *(_OWORD *)&qword_10018CF20 = xmmword_10012D270;
  return result;
}

__n128 sub_1000780B0()
{
  __asm { FMOV            V0.2D, #16.0 }
  xmmword_10018CF30 = (__int128)result;
  *(__n128 *)&qword_10018CF40 = result;
  return result;
}

void sub_1000780C4()
{
  qword_10018CF50 = 0x4051800000000000;
}

void sub_1000780D8()
{
  qword_10018CF58 = 0x405A800000000000;
}

void sub_1000780EC()
{
  qword_10018CF60 = 0x4049000000000000;
}

void sub_1000780FC()
{
  qword_10018CF68 = 0x4030000000000000;
}

void sub_10007810C()
{
  qword_10018CF70 = 0x4026000000000000;
}

void sub_10007811C()
{
  qword_10018CF78 = 0x4034000000000000;
}

void sub_10007812C()
{
  qword_10018CF80 = 0x4000000000000000;
}

void sub_10007813C()
{
  qword_10018CF88 = 0x4049000000000000;
}

void sub_10007814C()
{
  qword_10018CF90 = 0x4028000000000000;
}

void sub_10007815C()
{
  qword_10018CF98 = 0x407F400000000000;
}

void sub_100078170()
{
  qword_10018CFA0 = 0x4064000000000000;
}

double sub_100078180()
{
  double result = 24.0;
  xmmword_10018CFB0 = xmmword_10012D280;
  *(_OWORD *)&qword_10018CFC0 = xmmword_10012D290;
  return result;
}

__n128 sub_1000781A0()
{
  __asm { FMOV            V0.2D, #16.0 }
  xmmword_10018CFD0 = (__int128)result;
  *(__n128 *)&qword_10018CFE0 = result;
  return result;
}

void sub_1000781B4()
{
  qword_10018CFF0 = 0x402E000000000000;
}

void sub_1000781C4()
{
  qword_10018CFF8 = 0x4030000000000000;
}

void sub_1000781D4()
{
  qword_10018D000 = 0x4047000000000000;
}

void sub_1000781E4()
{
  qword_10018D008 = 0x4048000000000000;
}

void sub_1000781F4()
{
  qword_10018D010 = 0x4044800000000000;
}

void sub_100078208()
{
  qword_10018D018 = 0x4047000000000000;
}

void sub_100078218()
{
  qword_10018D020 = 0x4036000000000000;
}

uint64_t sub_100078228(uint64_t a1)
{
  return sub_100078268(a1, (void (*)(uint64_t))&static Font.headline.getter, &qword_10018D028);
}

uint64_t sub_100078248(uint64_t a1)
{
  return sub_100078268(a1, (void (*)(uint64_t))&static Font.subheadline.getter, &qword_10018D030);
}

uint64_t sub_100078268(uint64_t a1, void (*a2)(uint64_t), uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for Font.Leading();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unsigned int v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v7);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for Font.Leading.tight(_:), v5);
  uint64_t v10 = Font.leading(_:)();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  *a3 = v10;
  return result;
}

uint64_t sub_100078380()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  __chkstk_darwin(v0);
  (*(void (**)(char *, void))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:));
  uint64_t result = Color.init(_:red:green:blue:opacity:)();
  qword_10018D038 = result;
  return result;
}

void sub_100078460(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  if (v8)
  {
    uint64_t aBlock = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v10 = (unsigned char *)(a5 + 40);
    uint64_t v11 = v8;
    do
    {
      int v13 = (void *)*((void *)v10 - 1);
      if (!*v10 || *v10 == 1)
      {
        id v12 = v13;
      }
      else
      {
        long long v14 = (objc_class *)type metadata accessor for ZoomEffect();
        long long v15 = (char *)objc_allocWithZone(v14);
        *(void *)&v15[OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude] = v13;
        v29.receiver = v15;
        v29.super_class = v14;
        [super init];
      }
      v10 += 16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    sub_10007917C();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v17 = [self effectCombiningEffects:isa];
  }
  else
  {
    id v17 = 0;
  }
  id v18 = [a1 effect];
  if (v18)
  {
    long long v19 = v18;
    if (v17)
    {
      sub_10007917C();
      id v20 = v17;
      id v21 = v19;
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {

        return;
      }
    }
    else
    {
    }
  }
  else if (!v17)
  {
    return;
  }
  if (v8) {
    a3 = a2;
  }
  long long v23 = self;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = v17;
  uint64_t v34 = sub_1000791FC;
  uint64_t v35 = v24;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  int v32 = sub_100119678;
  int64_t v33 = &unk_10016B4E8;
  int v25 = _Block_copy(&aBlock);
  id v26 = v17;
  id v27 = a1;
  swift_release();
  uint64_t v34 = (id (*)())nullsub_1;
  uint64_t v35 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  int v32 = sub_1000D7ABC;
  int64_t v33 = &unk_10016B510;
  long long v28 = _Block_copy(&aBlock);
  [v23 _animateUsingSpringWithDuration:0 delay:v25 options:v28 mass:1.0 stiffness:a3 damping:2.0 initialVelocity:630.0 animations:50.0 completion:0.0];

  _Block_release(v28);
  _Block_release(v25);
}

id sub_1000787A8()
{
  id v0 = objc_allocWithZone((Class)UIVisualEffectView);

  return [v0 init];
}

void sub_1000787E0(void *a1, uint64_t a2)
{
  sub_100078460(a1, *(double *)(v2 + 8), *(double *)(v2 + 16), a2, *(void *)v2);
}

uint64_t sub_1000787F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100079224();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100078854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100079224();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000788B8()
{
}

BOOL sub_1000789FC(uint64_t a1)
{
  sub_100078E18(a1, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for ZoomEffect();
    if (swift_dynamicCast())
    {
      double v2 = *(double *)&v4[OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude];

      return v2 == *(double *)(v1 + OBJC_IVAR____TtC9AirDropUIP33_770A69880D158B2CCABA56C42FC2E35A10ZoomEffect_magnitude);
    }
  }
  else
  {
    sub_100064F68((uint64_t)v5);
  }
  return 0;
}

id sub_100078B40()
{
  return sub_100078DB4((uint64_t (*)(void))type metadata accessor for ZoomEffect);
}

uint64_t type metadata accessor for ZoomEffect()
{
  return self;
}

id sub_100078D9C()
{
  return sub_100078DB4((uint64_t (*)(void))type metadata accessor for ZoomEffectViewEntry);
}

id sub_100078DB4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  [super dealloc];
}

uint64_t type metadata accessor for ZoomEffectViewEntry()
{
  return self;
}

uint64_t sub_100078E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_100078EC8(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_100078EC8(id result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

void destroy for VisualEffectView.Effect(uint64_t a1)
{
}

void sub_100078EEC(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
}
  }

uint64_t assignWithCopy for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_100078EC8(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100078EEC(v5, v6);
  return a1;
}

uint64_t assignWithTake for VisualEffectView.Effect(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100078EEC(v4, v5);
  return a1;
}

uint64_t sub_100078F94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100078F9C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VisualEffectView.Effect()
{
  return &type metadata for VisualEffectView.Effect;
}

uint64_t initializeBufferWithCopyOfBuffer for VisualEffectView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VisualEffectView()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for VisualEffectView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for VisualEffectView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisualEffectView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisualEffectView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualEffectView()
{
  return &type metadata for VisualEffectView;
}

unint64_t sub_100079128()
{
  unint64_t result = qword_1001828C8;
  if (!qword_1001828C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001828C8);
  }
  return result;
}

unint64_t sub_10007917C()
{
  unint64_t result = qword_1001828D0;
  if (!qword_1001828D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001828D0);
  }
  return result;
}

uint64_t sub_1000791BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000791FC()
{
  return [*(id *)(v0 + 16) setEffect:*(void *)(v0 + 24)];
}

uint64_t sub_10007920C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007921C()
{
  return swift_release();
}

unint64_t sub_100079224()
{
  unint64_t result = qword_1001828D8;
  if (!qword_1001828D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001828D8);
  }
  return result;
}

NSString *sub_100079288()
{
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10012A980;
  uint64_t v1 = self;
  *(void *)(v0 + 32) = [v1 descriptorForRequiredKeysForStyle:1];
  *(void *)(v0 + 40) = [v1 descriptorForRequiredKeysForStyle:0];
  *(void *)(v0 + 48) = CNContactPhoneNumbersKey;
  *(void *)(v0 + 56) = CNContactEmailAddressesKey;
  specialized Array._endMutation()();
  qword_1001828E0 = v0;
  uint64_t v2 = CNContactPhoneNumbersKey;

  return CNContactEmailAddressesKey;
}

void sub_100079370(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4 = v3;
  NSString v8 = String._bridgeToObjectiveC()();
  if (qword_10017F758 != -1) {
    swift_once();
  }
  sub_10000AA4C(&qword_100182AB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v10 = [v4 contactForIdentifier:v8 keysToFetch:isa];

  if (v10)
  {
    sub_10007D7D4(v10, (uint64_t)v28);
    uint64_t v11 = v28[0];
    uint64_t v12 = v28[1];
    uint64_t v13 = v28[2];
    uint64_t v14 = v28[3];
    uint64_t v15 = v28[4];
    long long v26 = v30;
    long long v27 = v29;
    uint64_t v16 = v31;
    long long v25 = v32;
    int v17 = v33;

    long long v19 = v25;
    long long v18 = v26;
    long long v20 = v27;
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B150(v21, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain_n();
    char v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(a1, a2, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to fetch contact with identifier: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    long long v20 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = v15;
  *(_OWORD *)(a3 + 40) = v20;
  *(_OWORD *)(a3 + 56) = v18;
  *(void *)(a3 + 72) = v16;
  *(_OWORD *)(a3 + 80) = v19;
  *(_DWORD *)(a3 + 96) = v17;
}

uint64_t sub_100079640@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100079370(a1, a2, (uint64_t)v5);
  return sub_10007CD34((uint64_t)v5, a3);
}

void sub_100079680(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100016214(0, v2, 0);
    int64_t v4 = sub_10007D17C(a1);
    int v6 = v5;
    char v8 = v7 & 1;
    char v22 = (char *)(a1 + 56);
    uint64_t v9 = a1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v9 + 32))
    {
      if (((*(void *)&v22[((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v4) & 1) == 0) {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v9 + 36) != v6) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      NSString v10 = String._bridgeToObjectiveC()();
      id v11 = (id)TUCopyIDSCanonicalAddressForDestinationID();

      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();

      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        sub_100016214(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      int v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v12;
      void v17[5] = v14;
      int64_t v18 = sub_10007D21C(v4, v6, v8 & 1, v9);
      int64_t v4 = v18;
      int v6 = v19;
      char v8 = v20 & 1;
      if (!--v2)
      {
        sub_10007D300(v18, v19, v20 & 1);
        uint64_t v1 = v21;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_12:
    sub_10009DB38((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v1 beginQueryWithDestinations:isa];
  }
}

uint64_t sub_1000798A8(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10007D30C(v4, v3);
  swift_bridgeObjectRelease();

  if (qword_10017F7A8 != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B150(v6, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain_n();
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v10 = Array.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      sub_100047F98(v10, v12, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updated resolved IDS capabilities for handles: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v13 = *(void *)(v5 + 16);
      if (!v13) {
        goto LABEL_9;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v13 = *(void *)(v5 + 16);
      if (!v13)
      {
LABEL_9:
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        int v23 = 0;
        uint64_t v48 = 0;
        uint64_t v16 = 0;
        int v47 = 0;
        goto LABEL_47;
      }
    }
    uint64_t v14 = *(void *)(v5 + 40);
    unsigned __int8 v15 = *(unsigned char *)(v5 + 49);
    uint64_t v16 = v14;
    int v17 = *(unsigned __int8 *)(v5 + 51);
    uint64_t v48 = *(void *)(v5 + 32);
    int v18 = *(unsigned __int8 *)(v5 + 48);
    int v19 = v15;
    int v20 = v17;
    uint64_t v46 = v48;
    int v44 = *(unsigned __int8 *)(v5 + 50);
    int v45 = v18;
    if (v44) {
      break;
    }
    if (v13 == 1)
    {
      int v47 = 0;
      uint64_t v16 = 0;
      uint64_t v48 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      int v23 = 0;
      char v43 = *(unsigned char *)(v5 + 51);
      if ((*(unsigned char *)(v5 + 49) & 1) == 0) {
        goto LABEL_47;
      }
      goto LABEL_32;
    }
    uint64_t v24 = (unsigned __int8 *)(v5 + 75);
    uint64_t v25 = 1;
    while (1)
    {
      uint64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        break;
      }
      if (*(v24 - 1))
      {
        uint64_t v48 = *(void *)(v24 - 19);
        uint64_t v16 = *(void *)(v24 - 11);
        int v18 = *(v24 - 3);
        int v19 = *(v24 - 2);
        int v20 = *v24;
        goto LABEL_23;
      }
      ++v25;
      v24 += 24;
      if (v26 == v13)
      {
        uint64_t v48 = 0;
        uint64_t v16 = 0;
        int v47 = 0;
        if (*(unsigned char *)(v5 + 49)) {
          goto LABEL_30;
        }
        goto LABEL_15;
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
LABEL_23:
  swift_bridgeObjectRetain();
  if (v19) {
    int v30 = 256;
  }
  else {
    int v30 = 0;
  }
  if (v20) {
    int v31 = 0x1000000;
  }
  else {
    int v31 = 0;
  }
  int v47 = v30 | v18 | v31 | 0x10000;
  if (v15)
  {
LABEL_30:
    char v43 = v17;
LABEL_32:
    swift_bridgeObjectRetain();
    if (v44) {
      int v32 = 0x10000;
    }
    else {
      int v32 = 0;
    }
    int v33 = v32 | v45;
    if (v17) {
      int v34 = 0x1000000;
    }
    else {
      int v34 = 0;
    }
    int v23 = v33 | v34 | 0x100;
    uint64_t v21 = v46;
    uint64_t v22 = v14;
    LOBYTE(v17) = v43;
LABEL_39:
    if (v13 == 1) {
      char v35 = 1;
    }
    else {
      char v35 = v17;
    }
    if (v35) {
      goto LABEL_47;
    }
    uint64_t v36 = (char *)(v5 + 75);
    uint64_t v37 = 1;
    while (!__OFADD__(v37, 1))
    {
      if (v37 + 1 != v13)
      {
        char v38 = *v36;
        v36 += 24;
        ++v37;
        if ((v38 & 1) == 0) {
          continue;
        }
      }
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_52;
  }
LABEL_15:
  if (v13 != 1)
  {
    long long v27 = (unsigned __int8 *)(v5 + 75);
    uint64_t v28 = 1;
    while (1)
    {
      uint64_t v29 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_53;
      }
      if (*(v27 - 2))
      {
        uint64_t v46 = *(void *)(v27 - 19);
        uint64_t v14 = *(void *)(v27 - 11);
        int v45 = *(v27 - 3);
        char v43 = v17;
        int v44 = *(v27 - 1);
        int v17 = *v27;
        goto LABEL_32;
      }
      ++v28;
      v27 += 24;
      if (v29 == v13)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        int v23 = 0;
        goto LABEL_39;
      }
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
LABEL_47:
  uint64_t v39 = sub_10009DA4C(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = v39;
  if (v16)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v40 = v48;
    uint64_t v21 = v48;
    uint64_t v22 = v16;
    int v41 = v47;
    int v23 = v47;
  }
  else
  {
    uint64_t v40 = v48;
    int v41 = v47;
  }
  swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = v21;
  *(void *)(v2 + 64) = v22;
  *(_DWORD *)(v2 + 72) = v23;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = v40;
  *(void *)(v2 + 88) = v16;
  *(_DWORD *)(v2 + 96) = v41;
  return result;
}

void sub_100079D1C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = (id)TUCopyIDSCanonicalAddressForDestinationID();

  if (v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    sub_10000AA4C((uint64_t *)&unk_1001800B0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10012A270;
    *(void *)(v12 + 32) = v9;
    *(void *)(v12 + 40) = v11;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned __int8 v24 = [a2 isFaceTimeVideoAvailableForAnyDestinationInDestinations:isa];

    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10012A270;
    *(void *)(v14 + 32) = v9;
    *(void *)(v14 + 40) = v11;
    swift_bridgeObjectRetain();
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned __int8 v16 = [a2 isFaceTimeMultiwayAvailableForAnyDestinationInDestinations:v15];

    sub_100022348();
    int v17 = (void *)static NSUserDefaults.airdrop.getter();
    LOBYTE(v15) = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

    if (v15)
    {
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_10012A270;
      *(void *)(v18 + 32) = v9;
      *(void *)(v18 + 40) = v11;
      swift_bridgeObjectRetain();
      Class v19 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unsigned __int8 v20 = [a2 isiMessageAvailableForAnyDestinationInDestinations:v19];
    }
    else
    {
      unsigned __int8 v20 = 0;
    }
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10012A270;
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v11;
    sub_10009CFC0(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    Class v22 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned __int8 v23 = [a2 isAVLessSharePlayCapableForAnyDestinationInDestinations:v22];

    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 16) = v24;
    *(unsigned char *)(a3 + 17) = v16;
    *(unsigned char *)(a3 + 18) = v23;
    *(unsigned char *)(a3 + 19) = v20;
  }
  else
  {
    __break(1u);
  }
}

void sub_100079FC4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  void (*v19)(void *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  long long v31;
  long long v32;
  long long v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[6];
  int v56;
  void v57[13];
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  int v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  int v71;

  uint64_t v52 = a5;
  uint64_t v53 = a1;
  uint64_t v8 = sub_10000AA4C(&qword_100182A08);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  int v47 = v9;
  uint64_t v48 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100182A10);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unsigned __int8 v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  sub_10000AB54(a2, v17);
  Class v19 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 8);
  uint64_t v46 = a3;
  uint64_t v51 = a4;
  v19(v57, a3, a4, v17, v18);
  sub_10007CD34((uint64_t)v57, (uint64_t)&v58);
  if (*((void *)&v58 + 1))
  {
    id v69 = v62;
    id v70 = v63;
    id v71 = v64;
    uint64_t v65 = v58;
    uint64_t v66 = v59;
    id v67 = v60;
    id v68 = v61;
    v55[4] = v62;
    v55[5] = v63;
    uint64_t v56 = v64;
    v55[0] = v58;
    v55[1] = v59;
    v55[2] = v60;
    v55[3] = v61;
    sub_10007CD9C((uint64_t)&v65);
    sub_1000798A8(v52);
    unsigned __int8 v20 = v50;
    uint64_t v21 = v53;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    Class v22 = (uint64_t)v12;
    static TaskPriority.userInitiated.getter();
    unsigned __int8 v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 0, 1, v23);
    unsigned __int8 v24 = v48;
    uint64_t v25 = v49;
    uint64_t v26 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v21, v20);
    long long v27 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v28 = (v47 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = 0;
    *(void *)(v29 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v29 + v27, v24, v26);
    int v30 = v29 + v28;
    int v31 = v70;
    *(_OWORD *)(v30 + 64) = v69;
    *(_OWORD *)(v30 + 80) = v31;
    *(_DWORD *)(v30 + 96) = v71;
    int v32 = v66;
    *(_OWORD *)int v30 = v65;
    *(_OWORD *)(v30 + 16) = v32;
    int v33 = v68;
    *(_OWORD *)(v30 + 32) = v67;
    *(_OWORD *)(v30 + 48) = v33;
    int v34 = v52;
    *(void *)(v29 + ((v28 + 107) & 0xFFFFFFFFFFFFFFF8)) = v52;
    sub_10007D118((uint64_t)v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_10007D070);
    v34;
    sub_10007AD58(v22, (uint64_t)&unk_100182A20, v29);
    sub_10000F394(v22, &qword_1001829C0);
    swift_retain();
    AsyncStream.Continuation.onTermination.setter();
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    char v35 = type metadata accessor for Logger();
    sub_10000B150(v35, (uint64_t)qword_10018D128);
    uint64_t v36 = v51;
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    char v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(void *)&v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100047F98(v46, v36, (uint64_t *)v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Attempting to resolve IDS capabilities for contact with identifier: %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100079680(v68);
    swift_release();
    sub_10007D118((uint64_t)v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_100062554);
  }
  else
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10000B150(v40, (uint64_t)qword_10018D128);
    int v41 = v51;
    swift_bridgeObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    char v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      *(void *)&uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)int v44 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v55[0] = sub_100047F98(v46, v41, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Could not find contact details for contact identifier: %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    AsyncStream.Continuation.finish()();
  }
}

uint64_t sub_10007A728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[30] = a5;
  v6[31] = a6;
  v6[29] = a4;
  uint64_t v7 = sub_10000AA4C(&qword_100182A10);
  v6[32] = v7;
  v6[33] = *(void *)(v7 - 8);
  v6[34] = swift_task_alloc();
  sub_10000AA4C(&qword_100182A30);
  v6[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v6[36] = v8;
  v6[37] = *(void *)(v8 - 8);
  v6[38] = swift_task_alloc();
  return _swift_task_switch(sub_10007A87C, 0, 0);
}

uint64_t sub_10007A87C()
{
  id v1 = [self defaultCenter];
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  unint64_t v2 = sub_10007D684();
  id v3 = (void *)swift_task_alloc();
  v0[39] = v3;
  *id v3 = v0;
  v3[1] = sub_10007A97C;
  uint64_t v4 = v0[35];
  uint64_t v5 = v0[36];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_10007A97C()
{
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10007ACD4;
  }
  else {
    unint64_t v2 = sub_10007AA90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007AA90()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = type metadata accessor for Notification();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v8 = *(void **)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 240);
    long long v11 = *(_OWORD *)(v9 + 16);
    long long v10 = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)v9;
    *(_OWORD *)(v0 + 32) = v11;
    *(_OWORD *)(v0 + 48) = v10;
    long long v13 = *(_OWORD *)(v9 + 64);
    long long v12 = *(_OWORD *)(v9 + 80);
    long long v14 = *(_OWORD *)(v9 + 48);
    *(_DWORD *)(v0 + 112) = *(_DWORD *)(v9 + 96);
    *(_OWORD *)(v0 + 80) = v13;
    *(_OWORD *)(v0 + 96) = v12;
    *(_OWORD *)(v0 + 64) = v14;
    sub_10007CD9C(v9);
    sub_1000798A8(v8);
    long long v15 = *(_OWORD *)(v0 + 32);
    uint64_t v16 = *(void *)(v0 + 48);
    int v17 = *(_DWORD *)(v0 + 88);
    int v18 = *(_DWORD *)(v0 + 112);
    long long v19 = *(_OWORD *)(v0 + 56);
    long long v20 = *(_OWORD *)(v0 + 72);
    long long v21 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v15;
    *(void *)(v0 + 152) = v16;
    *(_OWORD *)(v0 + 160) = v19;
    *(_OWORD *)(v0 + 176) = v20;
    *(_DWORD *)(v0 + 192) = v17;
    *(_OWORD *)(v0 + 200) = v21;
    *(_DWORD *)(v0 + 216) = v18;
    sub_10000AA4C(&qword_100182A08);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    sub_10000F394(v1, &qword_100182A30);
    unint64_t v22 = sub_10007D684();
    unsigned __int8 v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v23;
    *unsigned __int8 v23 = v0;
    v23[1] = sub_10007A97C;
    uint64_t v24 = *(void *)(v0 + 280);
    uint64_t v25 = *(void *)(v0 + 288);
    return dispatch thunk of AsyncIteratorProtocol.next()(v24, v25, v22);
  }
}

uint64_t sub_10007ACD4()
{
  *(void *)(v0 + 224) = *(void *)(v0 + 320);
  sub_10000AA4C(&qword_100180590);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_10007AD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007D52C(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000F394((uint64_t)v8, &qword_1001829C0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_10007AF44(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_10000AA4C(&qword_1001829C0);
  v3[6] = swift_task_alloc();
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_1001829C8);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10007B04C, 0, 0);
}

uint64_t sub_10007B04C()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  v0[11] = v6;
  _OWORD v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = v7;
  uint64_t v8 = sub_10000AA4C(&qword_1001829E8);
  *uint64_t v7 = v0;
  v7[1] = sub_10007B1A8;
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[6];
  return withOperationTimeout<A>(_:priority:operation:)(v9, 5000000000000000000, 0, v10, &unk_100182A48, v6, v8);
}

uint64_t sub_10007B1A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  sub_10000F394(v1, &qword_1001829C0);
  return _swift_task_switch(sub_10007B2E4, 0, 0);
}

uint64_t sub_10007B2E4()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[10], v2);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  uint64_t v5 = v0[8];
  uint64_t v6 = (void *)v0[9];
  uint64_t v7 = v0[7];
  if (v4 == enum case for OperationTimeoutResult.success<A>(_:))
  {
    (*(void (**)(void, uint64_t))(v5 + 96))(v0[9], v7);
    uint64_t v8 = v6[1];
    if (v8)
    {
      uint64_t v10 = v6[7];
      uint64_t v9 = v6[8];
      uint64_t v11 = (uint64_t *)v0[9];
      uint64_t v12 = v11[9];
      uint64_t v13 = *v11;
      swift_bridgeObjectRetain();
      sub_100062554(v13, v8);
      if (v9)
      {
        (*(void (**)(void, void))(v0[8] + 8))(v0[10], v0[7]);
        goto LABEL_12;
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(v5 + 8))(v0[9], v7);
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B150(v14, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain_n();
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = v0[10];
  uint64_t v19 = v0[7];
  uint64_t v20 = v0[8];
  unint64_t v21 = v0[4];
  if (v17)
  {
    uint64_t v25 = v0[3];
    uint64_t v26 = v0[7];
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v25, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Timed out attempting to resolve a FaceTime-able handle for contact with identifier: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v12 = 0;
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned __int8 v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v23(v10, v9, v12);
}

uint64_t sub_10007B644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = sub_10000AA4C(&qword_100181CB0);
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = sub_10000AA4C((uint64_t *)&unk_100181C90);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_10000AA4C(&qword_1001829F0);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_10007B7DC, 0, 0);
}

uint64_t sub_10007B7DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[28];
  uint64_t v18 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[23];
  uint64_t v6 = (void *)v0[24];
  uint64_t v7 = v0[22];
  uint64_t v19 = v0 + 2;
  uint64_t v10 = v0 + 17;
  uint64_t v8 = v0[17];
  uint64_t v9 = v10[1];
  uint64_t v11 = v1[16];
  *uint64_t v6 = 1;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v7);
  uint64_t v12 = *(void *)(v11 + 56);
  uint64_t v13 = (void *)swift_task_alloc();
  v13[2] = v11 + 16;
  void v13[3] = v8;
  _OWORD v13[4] = v9;
  v13[5] = v12;
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v18, v2, v3);
  sub_10000F288(&qword_1001829F8, &qword_1001829F0);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v14 = sub_10000F288(&qword_100182A00, &qword_100181CB0);
  long long v15 = (void *)swift_task_alloc();
  v1[29] = v15;
  *long long v15 = v1;
  v15[1] = sub_10007B9C8;
  uint64_t v16 = v1[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v19, v16, v14);
}

uint64_t sub_10007B9C8()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[21];
    uint64_t v4 = v2[19];
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2[20] + 8);
    return v5(v3, v4);
  }
  else
  {
    return _swift_task_switch(sub_10007BAFC, 0, 0);
  }
}

uint64_t sub_10007BAFC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v2 = v0 + 2;
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = v2[8];
  uint64_t v12 = v2[9];
  int v13 = *((_DWORD *)v2 + 24);
  if (!v4)
  {
    uint64_t v26 = v2[11];
    uint64_t v27 = v2[10];
    uint64_t v14 = v1[15];
    uint64_t v24 = v10;
    uint64_t v16 = v9;
    int v25 = v13;
    (*(void (**)(void, void))(v1[20] + 8))(v1[21], v1[19]);
    *(void *)uint64_t v14 = v3;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = v6;
    *(void *)(v14 + 24) = v5;
    *(void *)(v14 + 32) = v8;
    *(void *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v16;
    *(void *)(v14 + 56) = v24;
    *(void *)(v14 + 64) = v11;
    *(void *)(v14 + 72) = v12;
    goto LABEL_5;
  }
  if (v11)
  {
    uint64_t v26 = v2[11];
    uint64_t v27 = v2[10];
    uint64_t v14 = v1[15];
    uint64_t v22 = v12;
    uint64_t v23 = v10;
    uint64_t v15 = v9;
    int v25 = v13;
    (*(void (**)(void, void))(v1[20] + 8))(v1[21], v1[19]);
    *(void *)uint64_t v14 = v3;
    *(void *)(v14 + 8) = v4;
    *(void *)(v14 + 16) = v6;
    *(void *)(v14 + 24) = v5;
    *(void *)(v14 + 32) = v8;
    *(void *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v15;
    *(void *)(v14 + 56) = v23;
    *(void *)(v14 + 64) = v11;
    *(void *)(v14 + 72) = v22;
LABEL_5:
    *(void *)(v14 + 80) = v27;
    *(void *)(v14 + 88) = v26;
    *(_DWORD *)(v14 + 96) = v25;
    (*(void (**)(void, void))(v1[26] + 8))(v1[28], v1[25]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v17 = (uint64_t (*)(void))v1[1];
    return v17();
  }
  sub_100062554(v3, v4);
  uint64_t v19 = sub_10000F288(&qword_100182A00, &qword_100181CB0);
  uint64_t v20 = (void *)swift_task_alloc();
  v1[29] = v20;
  *uint64_t v20 = v1;
  v20[1] = sub_10007B9C8;
  uint64_t v21 = v1[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v2, v21, v19);
}

uint64_t sub_10007BD6C(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_10000AA4C(&qword_1001829C0);
  v3[6] = swift_task_alloc();
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_1001829C8);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10007BE74, 0, 0);
}

uint64_t sub_10007BE74()
{
  sub_100022348();
  uint64_t v1 = (void *)static NSUserDefaults.airdrop.getter();
  char v2 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  if (v2)
  {
    uint64_t v3 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v6 = v0[3];
    uint64_t v5 = v0[4];
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    v0[11] = v8;
    void v8[2] = v3;
    v8[3] = v6;
    v8[4] = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)swift_task_alloc();
    v0[12] = v9;
    uint64_t v10 = sub_10000AA4C(&qword_1001829E8);
    void *v9 = v0;
    v9[1] = sub_10007C050;
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[6];
    return withOperationTimeout<A>(_:priority:operation:)(v11, 5000000000000000000, 0, v12, &unk_1001829E0, v8, v10);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v13 = (uint64_t (*)(void, void, void))v0[1];
    return v13(0, 0, 0);
  }
}

uint64_t sub_10007C050()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  sub_10000F394(v1, &qword_1001829C0);
  return _swift_task_switch(sub_10007C18C, 0, 0);
}

uint64_t sub_10007C18C()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[10], v2);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[7];
  if (v4 == enum case for OperationTimeoutResult.success<A>(_:))
  {
    (*(void (**)(void, uint64_t))(v5 + 96))(v0[9], v7);
    uint64_t v8 = *(void *)(v6 + 8);
    if (v8)
    {
      uint64_t v10 = *(void *)(v6 + 80);
      uint64_t v9 = *(void *)(v6 + 88);
      uint64_t v11 = *(unsigned int *)(v6 + 96);
      uint64_t v12 = *(void *)v0[9];
      swift_bridgeObjectRetain();
      sub_100062554(v12, v8);
      if (v9)
      {
        (*(void (**)(void, void))(v0[8] + 8))(v0[10], v0[7]);
        goto LABEL_12;
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(v5 + 8))(v0[9], v7);
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B150(v13, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[7];
  uint64_t v19 = v0[8];
  unint64_t v20 = v0[4];
  if (v16)
  {
    uint64_t v24 = v0[3];
    uint64_t v25 = v0[7];
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100047F98(v24, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Timed out attempting to resolve a iMessageHandle-able handle for contact with identifier: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v11 = 0;
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v22(v10, v9, v11);
}

uint64_t sub_10007C4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = sub_10000AA4C(&qword_100181CB0);
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = sub_10000AA4C((uint64_t *)&unk_100181C90);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_10000AA4C(&qword_1001829F0);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_10007C684, 0, 0);
}

uint64_t sub_10007C684()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[28];
  uint64_t v18 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[23];
  uint64_t v6 = (void *)v0[24];
  uint64_t v7 = v0[22];
  uint64_t v19 = v0 + 2;
  uint64_t v10 = v0 + 17;
  uint64_t v8 = v0[17];
  uint64_t v9 = v10[1];
  uint64_t v11 = v1[16];
  *uint64_t v6 = 1;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v7);
  uint64_t v12 = *(void *)(v11 + 56);
  uint64_t v13 = (void *)swift_task_alloc();
  v13[2] = v11 + 16;
  void v13[3] = v8;
  _OWORD v13[4] = v9;
  v13[5] = v12;
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v18, v2, v3);
  sub_10000F288(&qword_1001829F8, &qword_1001829F0);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v14 = sub_10000F288(&qword_100182A00, &qword_100181CB0);
  os_log_type_t v15 = (void *)swift_task_alloc();
  v1[29] = v15;
  *os_log_type_t v15 = v1;
  v15[1] = sub_10007C870;
  uint64_t v16 = v1[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v19, v16, v14);
}

uint64_t sub_10007C870()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[21];
    uint64_t v4 = v2[19];
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2[20] + 8);
    return v5(v3, v4);
  }
  else
  {
    return _swift_task_switch(sub_10007C9A4, 0, 0);
  }
}

uint64_t sub_10007C9A4()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v2 = v0 + 2;
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = v2[8];
  uint64_t v12 = v2[11];
  int v13 = *((_DWORD *)v2 + 24);
  if (!v4)
  {
    uint64_t v26 = v2[10];
    uint64_t v27 = v2[9];
    uint64_t v14 = v1[15];
    uint64_t v24 = v10;
    uint64_t v16 = v9;
    int v25 = v13;
    (*(void (**)(void, void))(v1[20] + 8))(v1[21], v1[19]);
    *(void *)uint64_t v14 = v3;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = v6;
    *(void *)(v14 + 24) = v5;
    *(void *)(v14 + 32) = v8;
    *(void *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v16;
    *(void *)(v14 + 56) = v24;
    *(void *)(v14 + 64) = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    uint64_t v26 = v2[10];
    uint64_t v27 = v2[9];
    uint64_t v14 = v1[15];
    uint64_t v22 = v11;
    uint64_t v23 = v10;
    uint64_t v15 = v9;
    int v25 = v13;
    (*(void (**)(void, void))(v1[20] + 8))(v1[21], v1[19]);
    *(void *)uint64_t v14 = v3;
    *(void *)(v14 + 8) = v4;
    *(void *)(v14 + 16) = v6;
    *(void *)(v14 + 24) = v5;
    *(void *)(v14 + 32) = v8;
    *(void *)(v14 + 40) = v7;
    *(void *)(v14 + 48) = v15;
    *(void *)(v14 + 56) = v23;
    *(void *)(v14 + 64) = v22;
LABEL_5:
    *(void *)(v14 + 72) = v27;
    *(void *)(v14 + 80) = v26;
    *(void *)(v14 + 88) = v12;
    *(_DWORD *)(v14 + 96) = v25;
    (*(void (**)(void, void))(v1[26] + 8))(v1[28], v1[25]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v1[1];
    return v17();
  }
  sub_100062554(v3, v4);
  uint64_t v19 = sub_10000F288(&qword_100182A00, &qword_100181CB0);
  uint64_t v20 = (void *)swift_task_alloc();
  v1[29] = v20;
  *uint64_t v20 = v1;
  v20[1] = sub_10007C870;
  uint64_t v21 = v1[19];
  return dispatch thunk of AsyncIteratorProtocol.next()(v2, v21, v19);
}

uint64_t sub_10007CC18()
{
  sub_10000AB98(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContactDetailsProvider()
{
  return self;
}

uint64_t sub_10007CC80(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001FD90;
  return sub_10007C4EC(a1, v4, v5, v6);
}

uint64_t sub_10007CD34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001829E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007CD9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007CE10()
{
  uint64_t v1 = sub_10000AA4C(&qword_100182A08);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 107) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10007CF38(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100182A08) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = v1 + v6;
  uint64_t v11 = *(void *)(v1 + ((v6 + 107) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  void *v12 = v2;
  v12[1] = sub_100013ABC;
  return sub_10007A728(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_10007D070(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10007D0F4()
{
}

uint64_t sub_10007D118(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  return a1;
}

uint64_t sub_10007D17C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_10007D21C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10007D300(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007D30C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v6 = a1;
  int v47 = _swiftEmptyArrayStorage;
  sub_100016294(0, v4, 0);
  unint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10007D17C(v6);
  int64_t v8 = result;
  int v10 = v9;
  char v12 = v11 & 1;
  uint64_t v31 = v6;
  uint64_t v32 = v6 + 56;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(v6 + 32))
  {
    if (((*(void *)(v32 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 36) != v10) {
      goto LABEL_16;
    }
    uint64_t v13 = *(void *)(v6 + 48) + 24 * v8;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    char v16 = *(unsigned char *)(v13 + 16);
    char v17 = *(unsigned char *)(v13 + 17);
    char v18 = *(unsigned char *)(v13 + 18);
    LOBYTE(v13) = *(unsigned char *)(v13 + 19);
    v37[0] = v14;
    v37[1] = v15;
    char v38 = v16;
    char v39 = v17;
    char v40 = v18;
    char v41 = v13;
    swift_bridgeObjectRetain();
    sub_100079D1C(v37, a2, (uint64_t)v42);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t)v5;
    }
    char v34 = v12;
    int v35 = v10;
    int64_t v36 = v4;
    swift_bridgeObjectRelease();
    uint64_t v19 = v42[0];
    uint64_t v20 = v42[1];
    char v21 = v43;
    char v22 = v44;
    char v23 = v45;
    char v24 = v46;
    int v47 = v5;
    unint64_t v26 = v5[2];
    unint64_t v25 = v5[3];
    if (v26 >= v25 >> 1)
    {
      char v30 = v43;
      sub_100016294(v25 > 1, v26 + 1, 1);
      char v21 = v30;
      unint64_t v5 = v47;
    }
    _OWORD v5[2] = v26 + 1;
    uint64_t v27 = &v5[3 * v26];
    v27[4] = v19;
    v27[5] = v20;
    *((unsigned char *)v27 + 48) = v21;
    *((unsigned char *)v27 + 49) = v22;
    *((unsigned char *)v27 + 50) = v23;
    *((unsigned char *)v27 + 51) = v24;
    uint64_t v6 = v31;
    uint64_t result = sub_10007D21C(v8, v35, v34 & 1, v31);
    int64_t v8 = result;
    int v10 = v28;
    char v12 = v29 & 1;
    uint64_t v3 = 0;
    int64_t v4 = v36 - 1;
    if (v36 == 1)
    {
      sub_10007D300(result, v28, v29 & 1);
      return (uint64_t)v5;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10007D52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001829C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D594()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007D5CC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10001FD90;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100186600 + dword_100186600);
  return v6(a1, v4);
}

unint64_t sub_10007D684()
{
  unint64_t result = qword_100182A38;
  if (!qword_100182A38)
  {
    type metadata accessor for NSNotificationCenter.Notifications.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100182A38);
  }
  return result;
}

uint64_t sub_10007D6E0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007D720(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_100013ABC;
  return sub_10007B644(a1, v4, v5, v6);
}

uint64_t sub_10007D7D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  id v3 = [a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v5;
  uint64_t v50 = v4;

  id v6 = [v2 givenName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v8;
  uint64_t v48 = v7;

  id v9 = [v2 displayName];
  if (!v9) {
    id v9 = [v2 givenName];
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v11;

  id v12 = [v2 emailAddresses];
  uint64_t v13 = sub_10000AA4C(&qword_100182AB8);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v46 = v10;
    if (v15) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v46 = v10;
  if (!v15) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t result = sub_100016294(0, v15 & ~(v15 >> 63), 0);
  if (v15 < 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v43 = v13;
  char v44 = v2;
  uint64_t v17 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v18 = *(id *)(v14 + 8 * v17 + 32);
    }
    uint64_t v19 = v18;
    id v20 = [v18 value:v43, v44];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    unint64_t v25 = _swiftEmptyArrayStorage[2];
    unint64_t v24 = _swiftEmptyArrayStorage[3];
    if (v25 >= v24 >> 1) {
      sub_100016294(v24 > 1, v25 + 1, 1);
    }
    ++v17;
    _swiftEmptyArrayStorage[2] = v25 + 1;
    unint64_t v26 = &_swiftEmptyArrayStorage[3 * v25];
    void v26[4] = v21;
    v26[5] = v23;
    *((_DWORD *)v26 + 12) = 0;
  }
  while (v15 != v17);
  swift_bridgeObjectRelease();
  uint64_t v2 = v44;
LABEL_16:
  id v27 = [v2 phoneNumbers];
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v28 >> 62))
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_18;
    }
LABEL_32:
    uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_33:
    swift_bridgeObjectRelease_n();
    sub_1000B58E4((uint64_t)v31);
    uint64_t v42 = sub_10009DA4C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v50;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = v48;
    *(void *)(a2 + 24) = v47;
    *(void *)(a2 + 32) = v46;
    *(void *)(a2 + 40) = v45;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = v42;
    *(_DWORD *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v29 = result;
  if (!result) {
    goto LABEL_32;
  }
LABEL_18:
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = _swiftEmptyArrayStorage;
    do
    {
      if ((v28 & 0xC000000000000001) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v28 + 8 * v30 + 32);
      }
      int v33 = v32;
      id v34 = [v32 value];
      id v35 = [v34 unformattedInternationalStringValue];

      if (v35)
      {
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v31 = sub_1000B57C0(0, v31[2] + 1, 1, v31);
        }
        unint64_t v40 = v31[2];
        unint64_t v39 = v31[3];
        if (v40 >= v39 >> 1) {
          uint64_t v31 = sub_1000B57C0((void *)(v39 > 1), v40 + 1, 1, v31);
        }
        _DWORD v31[2] = v40 + 1;
        char v41 = &v31[3 * v40];
        v41[4] = v36;
        uint64_t v41[5] = v38;
        *((_DWORD *)v41 + 12) = 0;
      }
      else
      {
      }
      ++v30;
    }
    while (v29 != v30);
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AirDropModernReadyForOpenView()
{
  return &type metadata for AirDropModernReadyForOpenView;
}

uint64_t sub_10007DC4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007DC68()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100182AD0);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100182AD0);
  if (qword_10017F7A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D110);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10007DD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v63 = a4;
  uint64_t v7 = type metadata accessor for TapGesture();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  int v57 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100182AE8);
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100182AF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000AA4C(&qword_100182AF8);
  __chkstk_darwin(v56);
  uint64_t v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000AA4C(&qword_100182B00);
  uint64_t v54 = *(void *)(v16 - 8);
  __chkstk_darwin(v16 - 8);
  uint64_t v55 = (uint64_t)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[1] = v17;
  __chkstk_darwin(v18);
  id v20 = (char *)v44 - v19;
  if (a3)
  {
    if (qword_10017F690 != -1) {
      swift_once();
    }
    uint64_t v21 = &xmmword_10018CF10;
  }
  else
  {
    if (qword_10017F698 != -1) {
      swift_once();
    }
    uint64_t v21 = &xmmword_10018CF30;
  }
  uint64_t v48 = *((void *)v21 + 3);
  uint64_t v47 = *((void *)v21 + 2);
  uint64_t v23 = v21;
  uint64_t v22 = *(void *)v21;
  uint64_t v46 = *((void *)v23 + 1);
  uint64_t v45 = v22;
  uint64_t v24 = a3 & 1;
  sub_10007E34C(a2, (uint64_t)&v65);
  uint64_t v25 = v65;
  uint64_t v26 = v66;
  uint64_t v52 = v68;
  uint64_t v53 = v67;
  uint64_t v65 = v67;
  uint64_t v66 = v68;
  uint64_t v51 = v69;
  uint64_t v67 = v69;
  uint64_t v68 = v70;
  uint64_t v50 = v70;
  int v49 = v71;
  LOBYTE(v69) = v71;
  id v27 = sub_10007E864();
  sub_10007EEA4((uint64_t)v20);
  uint64_t v28 = static VerticalAlignment.center.getter();
  uint64_t v64 = v20;
  uint64_t v29 = v28;
  if (qword_10017F6E0 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_10018CF90;
  *(void *)uint64_t v13 = v29;
  *((void *)v13 + 1) = v30;
  v13[16] = 0;
  uint64_t v31 = sub_10000AA4C(&qword_100182B08);
  sub_10007F690(a1, a2, v24, v25, v26, (uint64_t)&v65, (uint64_t)v27, (uint64_t)&v13[*(int *)(v31 + 44)]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v32 = static Edge.Set.all.getter();
  sub_10000F330((uint64_t)v13, (uint64_t)v15, &qword_100182AF0);
  int v33 = &v15[*(int *)(v56 + 36)];
  *int v33 = v32;
  uint64_t v34 = v46;
  *((void *)v33 + 1) = v45;
  *((void *)v33 + 2) = v34;
  uint64_t v35 = v48;
  *((void *)v33 + 3) = v47;
  *((void *)v33 + 4) = v35;
  v33[40] = 0;
  sub_10000F394((uint64_t)v13, &qword_100182AF0);
  uint64_t v36 = v57;
  TapGesture.init(count:)();
  uint64_t v37 = v55;
  sub_10000F330((uint64_t)v64, v55, &qword_100182B00);
  unint64_t v38 = (*(unsigned __int8 *)(v54 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a1;
  *(void *)(v39 + 24) = a2;
  *(unsigned char *)(v39 + 32) = v24;
  sub_10000F2CC(v37, v39 + v38, &qword_100182B00);
  swift_retain();
  uint64_t v40 = v59;
  char v41 = v60;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v40);
  static GestureMask.all.getter();
  sub_100083CEC();
  sub_10000F288(&qword_100182B20, &qword_100182AE8);
  uint64_t v42 = v62;
  View.gesture<A>(_:including:)();
  sub_100052B80(v53, v52, v51, v50, v49);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v42);
  sub_10000F394((uint64_t)v15, &qword_100182AF8);
  return sub_10000F394((uint64_t)v64, &qword_100182B00);
}

uint64_t sub_10007E34C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  unint64_t v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v6 - 8);
  uint64_t v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181488);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100181490);
  uint64_t v34 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  uint64_t v39 = a1;
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_6:
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v23 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v24 = v32;
    uint64_t v26 = *(void *)(v39 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
    uint64_t v25 = *(void *)(v39 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    char v30 = 64;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
  uint64_t v18 = sub_10000AA4C(&qword_1001806D8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v17, &v14[*(int *)(v18 + 80)], v15);
  uint64_t v20 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v14, v20);
  SFAirDrop.PermissionRequest.style.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v15);
  uint64_t v22 = v35;
  uint64_t v21 = v36;
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v35 + 88))(v10, v36) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v10, v21);
    goto LABEL_6;
  }
  (*(void (**)(uint64_t *, uint64_t))(v22 + 96))(v10, v21);
  uint64_t v23 = *v10;
  uint64_t v24 = v10[1];
  uint64_t v26 = v10[2];
  uint64_t v25 = v10[3];
  swift_bridgeObjectRelease();
  id v27 = (char *)v10 + *(int *)(sub_10000AA4C(&qword_1001814B0) + 80);
  uint64_t v28 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  char v30 = 0;
  uint64_t v31 = 1;
LABEL_7:
  *(void *)a2 = v23;
  *(void *)(a2 + 8) = v24;
  *(void *)(a2 + 16) = v26;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v31;
  *(unsigned char *)(a2 + 48) = v30;
  return result;
}

void *sub_10007E864()
{
  uint64_t v0 = sub_10000AA4C(&qword_100181480);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v44 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v36 - v4;
  uint64_t v45 = (uint64_t (**)(void, void, void))sub_10000AA4C(&qword_100181488);
  uint64_t v42 = (uint64_t)*(v45 - 1);
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_100181490);
  uint64_t v39 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  uint64_t v13 = sub_10000AA4C(&qword_1001806D8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, &v9[*(int *)(v13 + 80)], v10);
  uint64_t v15 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v9, v15);
  uint64_t v16 = v46;
  SFAirDrop.PermissionRequest.style.getter();
  uint64_t v17 = v42;
  uint64_t v18 = v45;
  if ((*(unsigned int (**)(char *, uint64_t (**)(void, void, void)))(v42 + 88))(v16, v45) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t (**)(void, void, void)))(v17 + 8))(v16, v18);
    return _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t (**)(void, void, void)))(v17 + 96))(v16, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v16 + 4);
  uint64_t v20 = &v16[*(int *)(sub_10000AA4C(&qword_1001814B0) + 80)];
  uint64_t v21 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v46 = *(char **)(v19 + 16);
  uint64_t v47 = _swiftEmptyArrayStorage;
  if (!v46)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v10);
    return v23;
  }
  uint64_t v37 = v12;
  uint64_t v38 = v10;
  unint64_t v24 = 0;
  uint64_t v45 = (uint64_t (**)(void, void, void))(v1 + 32);
  uint64_t v40 = (uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v26 = v43;
  id v27 = v44;
  uint64_t v41 = v1 + 16;
  uint64_t v42 = v19;
  while (v24 < *(void *)(v19 + 16))
  {
    unint64_t v28 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v29 = *(void *)(v1 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v26, v19 + v28 + v29 * v24, v0);
    if (SFAirDrop.AcceptAction.hidden.getter())
    {
      uint64_t result = (void *)(*v40)(v26, v0);
    }
    else
    {
      uint64_t v30 = v1;
      uint64_t v31 = (uint64_t (*)(char *, char *, uint64_t))*v45;
      uint64_t v32 = v0;
      (*v45)(v27, v26, v0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000161F4(0, v25[2] + 1, 1);
      }
      uint64_t v25 = v47;
      unint64_t v34 = v47[2];
      unint64_t v33 = v47[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000161F4(v33 > 1, v34 + 1, 1);
        uint64_t v25 = v47;
      }
      v25[2] = v34 + 1;
      uint64_t v35 = (char *)v25 + v28 + v34 * v29;
      id v27 = v44;
      uint64_t v0 = v32;
      uint64_t result = (void *)v31(v35, v44, v32);
      uint64_t v1 = v30;
      uint64_t v19 = v42;
      uint64_t v26 = v43;
    }
    if (v46 == (char *)++v24)
    {
      uint64_t v23 = v47;
      uint64_t v10 = v38;
      uint64_t v14 = v39;
      uint64_t v12 = v37;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10007EEA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v61 = sub_10000AA4C(&qword_100181480);
  uint64_t v54 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v60 = (char *)v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000AA4C(&qword_100181470);
  uint64_t v50 = *(void *)(v62 - 8);
  uint64_t v59 = v50;
  __chkstk_darwin(v62);
  uint64_t v51 = (char *)v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000AA4C(&qword_100182B00);
  __chkstk_darwin(v3 - 8);
  uint64_t v52 = (uint64_t)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100181488);
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = (void (**)(void, void))v5;
  __chkstk_darwin(v5);
  int v57 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100181490);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v10, v7) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v58, 1, 1, v62);
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
  uint64_t v15 = sub_10000AA4C(&qword_1001806D8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, &v10[*(int *)(v15 + 80)], v11);
  uint64_t v16 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v10, v16);
  uint64_t v17 = v57;
  SFAirDrop.PermissionRequest.style.getter();
  uint64_t v19 = v55;
  uint64_t v18 = v56;
  uint64_t v20 = v11;
  uint64_t v21 = v14;
  if ((*(unsigned int (**)(char *, void))(v55 + 88))(v17, v56) != enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, void))(v19 + 8))(v17, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v58, 1, 1, v62);
  }
  (*(void (**)(char *, void))(v19 + 96))(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = *((void *)v17 + 4);
  uint64_t v23 = &v17[*(int *)(sub_10000AA4C(&qword_1001814B0) + 80)];
  uint64_t v24 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  uint64_t v26 = v59 + 56;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
  v25(v52, 1, 1, v62);
  uint64_t v27 = *(void *)(v22 + 16);
  if (v27)
  {
    v46[0] = v25;
    v46[1] = v22;
    uint64_t v47 = v21;
    uint64_t v48 = v12;
    uint64_t v49 = v20;
    uint64_t v59 = v26;
    uint64_t v28 = v54 + 16;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v30 = v22 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v31 = (unsigned int (**)(char *, uint64_t))(v54 + 88);
    int v32 = enum case for SFAirDrop.AcceptAction.single<A>(_:);
    uint64_t v55 = v54 + 96;
    uint64_t v56 = (void (**)(void, void))(v54 + 8);
    unint64_t v33 = v51;
    int v57 = (char *)(v50 + 32);
    uint64_t v53 = (unsigned int (**)(char *, uint64_t))(v54 + 88);
    uint64_t v54 = v50 + 8;
    uint64_t v34 = *(void *)(v28 + 56);
    uint64_t v36 = v60;
    uint64_t v35 = v61;
    v29(v60, v30, v61);
    while (1)
    {
      if ((*v31)(v36, v35) == v32)
      {
        uint64_t v37 = v28;
        (*(void (**)(char *, uint64_t))v55)(v36, v35);
        uint64_t v38 = &v36[*(int *)(sub_10000AA4C(&qword_1001814B8) + 48)];
        uint64_t v39 = v36;
        uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))v57;
        uint64_t v41 = v62;
        (*(void (**)(char *, char *, uint64_t))v57)(v33, v39, v62);
        uint64_t v42 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v38, v42);
        if (SFAirDrop.AcceptAction.Single.hidden.getter())
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = v52;
          sub_10000F394(v52, &qword_100182B00);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
          v40(v45, v33, v41);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v46[0])(v45, 0, 1, v41);
          uint64_t v44 = v58;
          return sub_10000F2CC(v52, v44, &qword_100182B00);
        }
        (*(void (**)(char *, uint64_t))v54)(v33, v41);
        uint64_t v36 = v60;
        uint64_t v35 = v61;
        uint64_t v28 = v37;
        uint64_t v31 = v53;
      }
      else
      {
        (*v56)(v36, v35);
      }
      v30 += v34;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = v58;
        uint64_t v12 = v48;
        uint64_t v20 = v49;
        uint64_t v21 = v47;
        goto LABEL_16;
      }
      v29(v36, v30, v35);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = v58;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v20);
  return sub_10000F2CC(v52, v44, &qword_100182B00);
}

void sub_10007F690(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v58 = a7;
  uint64_t v68 = a5;
  uint64_t v69 = a6;
  uint64_t v67 = a4;
  uint64_t v73 = a1;
  uint64_t v74 = a3;
  uint64_t v65 = a8;
  uint64_t v9 = sub_10000AA4C(&qword_100182B38);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000AA4C(&qword_100182B40);
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  __chkstk_darwin(v11);
  uint64_t v56 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100182B48);
  __chkstk_darwin(v13 - 8);
  uint64_t v64 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v63 = (char *)&v56 - v16;
  uint64_t v17 = sub_10000AA4C(&qword_100181918);
  __chkstk_darwin(v17 - 8);
  uint64_t v62 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v56 - v20;
  uint64_t v22 = type metadata accessor for DeviceLockState();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v56 - v27;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v29 = enum case for DeviceLockState.unlocked(_:);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 104);
  v66(v25, enum case for DeviceLockState.unlocked(_:), v22);
  char v30 = static DeviceLockState.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v23 + 8);
  v31(v25, v22);
  v31(v28, v22);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v30)
  {
    uint64_t v72 = type metadata accessor for AirDropTransferSession();
    sub_100056D9C();
    swift_retain();
    uint64_t v32 = ObservedObject.init(wrappedValue:)();
    uint64_t v34 = v74 & 1;
  }
  uint64_t v70 = v34;
  uint64_t v71 = v33;
  uint64_t v72 = v32;
  *(void *)uint64_t v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0;
  v21[16] = 0;
  uint64_t v35 = *(int *)(sub_10000AA4C(&qword_100181920) + 44);
  uint64_t v59 = v21;
  sub_10007FDAC(v74 & 1, v67, v68, v69, (uint64_t)&v21[v35]);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v66(v25, v29, v22);
  char v36 = static DeviceLockState.== infix(_:_:)();
  v31(v25, v22);
  v31(v28, v22);
  if (v36)
  {
    uint64_t v37 = v58;
    uint64_t v39 = (uint64_t)v64;
    uint64_t v38 = v65;
    uint64_t v41 = (uint64_t)v62;
    uint64_t v40 = (uint64_t)v63;
    uint64_t v42 = v60;
    uint64_t v43 = (uint64_t)v59;
    if (*(void *)(v58 + 16))
    {
      uint64_t v44 = *(void *)(sub_10000AA4C(&qword_100181480) - 8);
      uint64_t v45 = v57;
      sub_100080150(v37 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80)), 1, v73, a2, v74 & 1, v57);
      uint64_t v46 = v61;
      if (qword_10017F6D8 != -1) {
        swift_once();
      }
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v47 = v56;
      sub_10000F330(v45, v56, &qword_100182B38);
      uint64_t v48 = (_OWORD *)(v47 + *(int *)(v46 + 36));
      long long v49 = v76;
      *uint64_t v48 = v75;
      v48[1] = v49;
      v48[2] = v77;
      sub_10000F394(v45, &qword_100182B38);
      sub_10000F2CC(v47, v40, &qword_100182B40);
      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v50 = 1;
      uint64_t v46 = v61;
    }
  }
  else
  {
    uint64_t v50 = 1;
    uint64_t v39 = (uint64_t)v64;
    uint64_t v38 = v65;
    uint64_t v41 = (uint64_t)v62;
    uint64_t v40 = (uint64_t)v63;
    uint64_t v42 = v60;
    uint64_t v46 = v61;
    uint64_t v43 = (uint64_t)v59;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v40, v50, 1, v46);
  sub_10000F330(v43, v41, &qword_100181918);
  sub_10000F330(v40, v39, &qword_100182B48);
  uint64_t v52 = v71;
  uint64_t v51 = v72;
  *(void *)uint64_t v38 = v72;
  *(void *)(v38 + 8) = v52;
  *(void *)(v38 + 24) = 0;
  *(void *)(v38 + 32) = 0;
  uint64_t v53 = v43;
  uint64_t v54 = v70;
  *(void *)(v38 + 16) = v70;
  *(unsigned char *)(v38 + 40) = 0;
  uint64_t v55 = sub_10000AA4C(&qword_100182B50);
  sub_10000F330(v41, v38 + *(int *)(v55 + 48), &qword_100181918);
  sub_10000F330(v39, v38 + *(int *)(v55 + 64), &qword_100182B48);
  sub_100056C4C(v51, v52, v54, 0, 0);
  sub_10000F394(v40, &qword_100182B48);
  sub_10000F394(v53, &qword_100181918);
  sub_10000F394(v39, &qword_100182B48);
  sub_10000F394(v41, &qword_100181918);
  sub_100056D38(v51, v52, v54, 0, 0);
}

uint64_t sub_10007FDAC@<X0>(int a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v39 = a2;
  uint64_t v7 = type metadata accessor for Font.TextStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AirDropDescriptionView();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000AA4C((uint64_t *)&unk_100185E30);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v43 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v42 = a1;
  if (a1)
  {
    if (qword_10017F670 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    uint64_t v43 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v21 = v45;
    uint64_t v22 = v46;
    uint64_t v23 = v47;
    uint64_t v24 = v48;
    uint64_t v25 = v49;
    uint64_t v26 = v50;
  }
  uint64_t v34 = v23;
  uint64_t v35 = v24;
  uint64_t v36 = v25;
  uint64_t v37 = v26;
  uint64_t v38 = v21;
  uint64_t v44 = 0x402C000000000000;
  (*(void (**)(char *, void, uint64_t, __n128))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7, v18);
  uint64_t v27 = v41;
  sub_100084CE0(v41);
  sub_100053610();
  uint64_t v28 = v40;
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  uint64_t v29 = &v13[*(int *)(v11 + 20)];
  *(void *)uint64_t v29 = v39;
  *((void *)v29 + 1) = v28;
  sub_100056E4C(v27, (uint64_t)&v13[*(int *)(v11 + 24)]);
  static Alignment.leading.getter();
  sub_1000FA04C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1);
  sub_100055248((uint64_t)v13);
  sub_10000F2CC((uint64_t)v16, (uint64_t)v20, (uint64_t *)&unk_100185E30);
  sub_10000F330((uint64_t)v20, (uint64_t)v16, (uint64_t *)&unk_100185E30);
  uint64_t v30 = v43;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = v30;
  *(void *)(a5 + 16) = v38;
  *(void *)(a5 + 24) = v22;
  *(void *)(a5 + 32) = v34;
  *(void *)(a5 + 40) = v35;
  *(void *)(a5 + 48) = v36;
  *(void *)(a5 + 56) = v37;
  *(unsigned char *)(a5 + 64) = (v42 & 1) == 0;
  uint64_t v31 = sub_10000AA4C(&qword_100181948);
  sub_10000F330((uint64_t)v16, a5 + *(int *)(v31 + 48), (uint64_t *)&unk_100185E30);
  sub_10000F394((uint64_t)v20, (uint64_t *)&unk_100185E30);
  return sub_10000F394((uint64_t)v16, (uint64_t *)&unk_100185E30);
}

uint64_t sub_100080150@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v150 = a5;
  uint64_t v147 = (char *)a4;
  uint64_t v146 = a3;
  int v145 = a2;
  uint64_t v144 = a1;
  uint64_t v155 = a6;
  uint64_t v141 = sub_10000AA4C(&qword_100182B58);
  __chkstk_darwin(v141);
  uint64_t v126 = (uint64_t)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000AA4C(&qword_100182B60);
  uint64_t v128 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  char v125 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v127 = (char *)&v113 - v9;
  uint64_t v137 = sub_10000AA4C(&qword_100182B68);
  __chkstk_darwin(v137);
  unint64_t v140 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000AA4C(&qword_100182B70);
  __chkstk_darwin(v136);
  uint64_t v124 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v118 = (uint64_t)&v113 - v13;
  uint64_t v138 = sub_10000AA4C(&qword_100182B78);
  uint64_t v122 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  unint64_t v116 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v120 = (char *)&v113 - v16;
  uint64_t v154 = sub_10000AA4C(&qword_100182B80);
  __chkstk_darwin(v154);
  uint64_t v139 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000AA4C(&qword_100182B88);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v143 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10000AA4C(&qword_100182B90);
  __chkstk_darwin(v152);
  uint64_t v153 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000AA4C(&qword_100182B98);
  __chkstk_darwin(v134);
  uint64_t v119 = (uint64_t)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_10000AA4C(&qword_100182BA0);
  uint64_t v123 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v117 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v121 = (char *)&v113 - v23;
  uint64_t v130 = sub_10000AA4C(&qword_100182BA8);
  __chkstk_darwin(v130);
  uint64_t v133 = (char *)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000AA4C(&qword_100182BB0);
  __chkstk_darwin(v129);
  uint64_t v26 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v113 - v28;
  uint64_t v131 = sub_10000AA4C(&qword_100182BB8);
  uint64_t v115 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v31 = (char *)&v113 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v113 - v33;
  uint64_t v151 = sub_10000AA4C(&qword_100182BC0);
  __chkstk_darwin(v151);
  uint64_t v132 = (char *)&v113 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000AA4C(&qword_100181470);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v113 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000AA4C(&qword_100181480);
  uint64_t v41 = *(void *)(v40 - 8);
  __n128 v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v113 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v41 + 16))(v44, v144, v40, v42);
  int v45 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v44, v40);
  if (v45 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v41 + 96))(v44, v40);
    uint64_t v148 = v37;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v44, v36);
    uint64_t v149 = v36;
    uint64_t v114 = v39;
    if (v145)
    {
      char v46 = v150;
      sub_100081A1C((uint64_t)v39, v146, (uint64_t)v147, v150 & 1, (uint64_t)v29);
      BOOL v47 = (v46 & 1) == 0;
      if (qword_10017F6D8 != -1) {
        swift_once();
      }
      *(void *)&long long v160 = qword_10018CF88;
      BYTE8(v160) = v47;
      unint64_t v48 = sub_100084638();
      unint64_t v49 = sub_1000844B4();
      uint64_t v50 = v129;
      View.buttonStyle<A>(_:)();
      sub_10000F394((uint64_t)v29, &qword_100182BB0);
      uint64_t v51 = v115;
      uint64_t v52 = v131;
      (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v34, v31, v131);
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v133, v34, v52);
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v160 = v50;
      *((void *)&v160 + 1) = &type metadata for AirDropUIButtonStyle;
      *(void *)&long long v161 = v48;
      *((void *)&v161 + 1) = v49;
      swift_getOpaqueTypeConformance2();
      uint64_t v53 = sub_1000842D4(&qword_100182C78, &qword_100182B98, (void (*)(void))sub_100084638);
      *(void *)&long long v160 = v134;
      *((void *)&v160 + 1) = &type metadata for AirDropUIButtonStyle;
      *(void *)&long long v161 = v53;
      *((void *)&v161 + 1) = v49;
      swift_getOpaqueTypeConformance2();
      uint64_t v54 = (uint64_t)v132;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
    }
    else
    {
      char v71 = v150;
      sub_100081A1C((uint64_t)v39, v146, (uint64_t)v147, v150 & 1, (uint64_t)v26);
      uint64_t v72 = v134;
      if (qword_10017F688 != -1) {
        swift_once();
      }
      double v73 = *(double *)&qword_10018CF08;
      static Alignment.center.getter();
      if (v73 > INFINITY)
      {
        static os_log_type_t.fault.getter();
        uint64_t v74 = (void *)static Log.runtimeIssuesLog.getter();
        os_log(_:dso:log:_:_:)();
      }
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
      uint64_t v75 = v119;
      sub_10000F330((uint64_t)v26, v119, &qword_100182BB0);
      long long v76 = (_OWORD *)(v75 + *(int *)(v72 + 36));
      long long v77 = v165;
      v76[4] = v164;
      v76[5] = v77;
      v76[6] = v166;
      long long v78 = v161;
      *long long v76 = v160;
      v76[1] = v78;
      long long v79 = v163;
      v76[2] = v162;
      uint64_t v76[3] = v79;
      sub_10000F394((uint64_t)v26, &qword_100182BB0);
      if (v71) {
        uint64_t v80 = (SFAirDrop.AcceptAction.Single.prominent.getter() & 1) == 0;
      }
      else {
        uint64_t v80 = 3;
      }
      uint64_t v156 = v80;
      LOBYTE(v157) = 2;
      uint64_t v101 = sub_1000842D4(&qword_100182C78, &qword_100182B98, (void (*)(void))sub_100084638);
      unint64_t v102 = sub_1000844B4();
      unint64_t v103 = v117;
      View.buttonStyle<A>(_:)();
      sub_10000F394(v75, &qword_100182B98);
      uint64_t v104 = v123;
      uint64_t v105 = v72;
      uint64_t v106 = v121;
      char v107 = v103;
      uint64_t v108 = v135;
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v121, v107, v135);
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v133, v106, v108);
      swift_storeEnumTagMultiPayload();
      unint64_t v109 = sub_100084638();
      uint64_t v156 = v129;
      uint64_t v157 = &type metadata for AirDropUIButtonStyle;
      unint64_t v158 = v109;
      unint64_t v159 = v102;
      swift_getOpaqueTypeConformance2();
      uint64_t v156 = v105;
      uint64_t v157 = &type metadata for AirDropUIButtonStyle;
      unint64_t v158 = v101;
      unint64_t v159 = v102;
      swift_getOpaqueTypeConformance2();
      uint64_t v54 = (uint64_t)v132;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v108);
    }
    uint64_t v110 = v148;
    uint64_t v100 = &v44[*(int *)(sub_10000AA4C(&qword_1001814B8) + 48)];
    sub_10000F330(v54, v153, &qword_100182BC0);
    swift_storeEnumTagMultiPayload();
    sub_100084508();
    sub_100084798();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v54, &qword_100182BC0);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v149);
LABEL_28:
    uint64_t v111 = type metadata accessor for UUID();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v111 - 8) + 8))(v100, v111);
  }
  char v55 = v145;
  if (v45 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v41 + 96))(v44, v40);
    uint64_t v56 = (uint64_t)v143;
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v143, v44, v149);
    if (v55)
    {
      char v57 = v150;
      uint64_t v58 = v118;
      sub_1000824E4(v56, v146, (uint64_t)v147, v150 & 1, v118);
      BOOL v59 = (v57 & 1) == 0;
      if (qword_10017F6D8 != -1) {
        swift_once();
      }
      *(void *)&long long v160 = qword_10018CF88;
      BYTE8(v160) = v59;
      unint64_t v60 = sub_100084354();
      unint64_t v61 = sub_1000844B4();
      uint64_t v62 = v116;
      uint64_t v63 = v136;
      View.buttonStyle<A>(_:)();
      sub_10000F394(v58, &qword_100182B70);
      uint64_t v64 = v122;
      uint64_t v65 = v120;
      uint64_t v66 = v138;
      (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v120, v62, v138);
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v140, v65, v66);
      swift_storeEnumTagMultiPayload();
      *(void *)&long long v160 = v63;
      *((void *)&v160 + 1) = &type metadata for AirDropUIButtonStyle;
      *(void *)&long long v161 = v60;
      *((void *)&v161 + 1) = v61;
      swift_getOpaqueTypeConformance2();
      uint64_t v67 = sub_1000842D4(&qword_100182BC8, &qword_100182B58, (void (*)(void))sub_100084354);
      *(void *)&long long v160 = v141;
      *((void *)&v160 + 1) = &type metadata for AirDropUIButtonStyle;
      *(void *)&long long v161 = v67;
      *((void *)&v161 + 1) = v61;
      swift_getOpaqueTypeConformance2();
      uint64_t v68 = v139;
      _ConditionalContent<>.init(storage:)();
      uint64_t v69 = v66;
      uint64_t v70 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v69);
    }
    else
    {
      char v81 = v150;
      uint64_t v82 = v124;
      sub_1000824E4(v56, v146, (uint64_t)v147, v150 & 1, v124);
      if (qword_10017F688 != -1) {
        swift_once();
      }
      uint64_t v147 = v44;
      double v83 = *(double *)&qword_10018CF08;
      static Alignment.center.getter();
      if (v83 > INFINITY)
      {
        static os_log_type_t.fault.getter();
        uint64_t v84 = (void *)static Log.runtimeIssuesLog.getter();
        os_log(_:dso:log:_:_:)();
      }
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
      uint64_t v85 = v126;
      sub_10000F330(v82, v126, &qword_100182B70);
      uint64_t v86 = v141;
      uint64_t v87 = (_OWORD *)(v85 + *(int *)(v141 + 36));
      long long v88 = v165;
      v87[4] = v164;
      v87[5] = v88;
      v87[6] = v166;
      long long v89 = v161;
      *uint64_t v87 = v160;
      v87[1] = v89;
      long long v90 = v163;
      v87[2] = v162;
      v87[3] = v90;
      sub_10000F394(v82, &qword_100182B70);
      uint64_t v91 = 3;
      if (v81) {
        uint64_t v91 = 1;
      }
      uint64_t v156 = v91;
      LOBYTE(v157) = 2;
      uint64_t v92 = sub_1000842D4(&qword_100182BC8, &qword_100182B58, (void (*)(void))sub_100084354);
      unint64_t v93 = sub_1000844B4();
      id v94 = v125;
      View.buttonStyle<A>(_:)();
      sub_10000F394(v85, &qword_100182B58);
      uint64_t v95 = v128;
      uint64_t v96 = v127;
      uint64_t v97 = v94;
      uint64_t v98 = v142;
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v97, v142);
      (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v140, v96, v98);
      swift_storeEnumTagMultiPayload();
      unint64_t v99 = sub_100084354();
      uint64_t v156 = v136;
      uint64_t v157 = &type metadata for AirDropUIButtonStyle;
      unint64_t v158 = v99;
      unint64_t v159 = v93;
      swift_getOpaqueTypeConformance2();
      uint64_t v156 = v86;
      uint64_t v157 = &type metadata for AirDropUIButtonStyle;
      unint64_t v158 = v92;
      unint64_t v159 = v93;
      swift_getOpaqueTypeConformance2();
      uint64_t v70 = (uint64_t)v139;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v98);
      uint64_t v56 = (uint64_t)v143;
      uint64_t v44 = v147;
    }
    uint64_t v100 = &v44[*(int *)(sub_10000AA4C(&qword_100182C20) + 48)];
    sub_10000F330(v70, v153, &qword_100182B80);
    swift_storeEnumTagMultiPayload();
    sub_100084508();
    sub_100084798();
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v70, &qword_100182B80);
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v56, v149);
    goto LABEL_28;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100081670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v5 = sub_10000AA4C(&qword_100182B00);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181470);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v26 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DeviceLockState();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DeviceLockState.unlocked(_:), v11);
  char v18 = static DeviceLockState.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
  if (v18)
  {
    sub_10000F330(v27, (uint64_t)v7, &qword_100182B00);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      return sub_10000F394((uint64_t)v7, &qword_100182B00);
    }
    else
    {
      uint64_t v21 = (uint64_t)v26;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v7, v8);
      if (qword_10017F760 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10000B150(v22, (uint64_t)qword_100182AD0);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Post-AirDrop ReadyForOpen view tapped", v25, 2u);
        swift_slowDealloc();
      }

      sub_100083D94(v21);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v21, v8);
    }
  }
  return result;
}

uint64_t sub_100081A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v63 = a4;
  uint64_t v61 = a3;
  uint64_t v62 = a2;
  uint64_t v67 = a5;
  uint64_t v68 = sub_10000AA4C(&qword_100182C70);
  uint64_t v55 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000AA4C(&qword_100182C60);
  uint64_t v54 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v52 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000AA4C(&qword_100182C88);
  __chkstk_darwin(v64);
  uint64_t v66 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10000AA4C(&qword_100182C90);
  __chkstk_darwin(v58);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000AA4C(&qword_100182C40);
  __chkstk_darwin(v65);
  unint64_t v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100181470);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = sub_10000AA4C(&qword_100182C50);
  char v57 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char **)((char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  SFAirDrop.AcceptAction.Single.buttonConfiguration.getter();
  int v21 = (*(uint64_t (**)(char **, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    (*(void (**)(char **, uint64_t))(v18 + 96))(v20, v17);
    uint64_t v22 = *v20;
    uint64_t v23 = (uint64_t)v20[1];
    uint64_t v55 = (uint64_t)v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
    unint64_t v24 = (*(unsigned __int8 *)(v13 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v61;
    *(void *)(v25 + 16) = v62;
    *(void *)(v25 + 24) = v26;
    *(unsigned char *)(v25 + 32) = v63 & 1;
    uint64_t v27 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25 + v24, (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
    __chkstk_darwin(v27);
    *(&v51 - 2) = v55;
    *(&v51 - 1) = v23;
    swift_retain();
    uint64_t v28 = v56;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = v57;
    (*((void (**)(char *, char *, uint64_t))v57 + 2))(v10, v28, v15);
    swift_storeEnumTagMultiPayload();
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_10000F288(&qword_100182C58, &qword_100182C60);
    uint64_t v30 = (uint64_t)v60;
    _ConditionalContent<>.init(storage:)();
    sub_10000F330(v30, v66, &qword_100182C40);
    swift_storeEnumTagMultiPayload();
    sub_1000846D8();
    sub_10000F288(&qword_100182C68, &qword_100182C70);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394(v30, &qword_100182C40);
    return (*((uint64_t (**)(char *, uint64_t))v29 + 1))(v28, v15);
  }
  else
  {
    uint64_t v56 = (char *)v15;
    char v57 = v10;
    uint64_t v32 = v61;
    if (v21 == enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
    {
      (*(void (**)(char **, uint64_t))(v18 + 96))(v20, v17);
      uint64_t v33 = (uint64_t)*v20;
      uint64_t v34 = (uint64_t)v20[1];
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
      unint64_t v35 = (*(unsigned __int8 *)(v13 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v62;
      *(void *)(v36 + 24) = v32;
      *(unsigned char *)(v36 + 32) = v63 & 1;
      uint64_t v37 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v36 + v35, (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
      __chkstk_darwin(v37);
      *(&v51 - 2) = v33;
      *(&v51 - 1) = v34;
      swift_retain();
      uint64_t v38 = v52;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v54;
      uint64_t v40 = v59;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v57, v38, v59);
      swift_storeEnumTagMultiPayload();
      sub_10000F288(&qword_100182C48, &qword_100182C50);
      sub_10000F288(&qword_100182C58, &qword_100182C60);
      uint64_t v41 = (uint64_t)v60;
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v41, v66, &qword_100182C40);
      swift_storeEnumTagMultiPayload();
      sub_1000846D8();
      sub_10000F288(&qword_100182C68, &qword_100182C70);
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v41, &qword_100182C40);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    }
    else if (v21 == enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      (*(void (**)(char **, uint64_t))(v18 + 96))(v20, v17);
      uint64_t v42 = (uint64_t)v20[1];
      unint64_t v60 = *v20;
      uint64_t v44 = (uint64_t)v20[2];
      uint64_t v43 = (uint64_t)v20[3];
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
      unint64_t v45 = (*(unsigned __int8 *)(v13 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = v62;
      *(void *)(v46 + 24) = v32;
      *(unsigned char *)(v46 + 32) = v63 & 1;
      uint64_t v47 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(v46 + v45, (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
      __chkstk_darwin(v47);
      *(&v51 - 4) = (uint64_t)v60;
      *(&v51 - 3) = v42;
      *(&v51 - 2) = v44;
      *(&v51 - 1) = v43;
      swift_retain();
      sub_10000AA4C(&qword_100182C98);
      sub_10000F288(&qword_100182CA0, &qword_100182C98);
      unint64_t v48 = v53;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v49 = v55;
      uint64_t v50 = v68;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 16))(v66, v48, v68);
      swift_storeEnumTagMultiPayload();
      sub_1000846D8();
      sub_10000F288(&qword_100182C68, &qword_100182C70);
      _ConditionalContent<>.init(storage:)();
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    }
    else
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000824E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v63 = a4;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v67 = a5;
  uint64_t v65 = sub_10000AA4C(&qword_100182C10);
  uint64_t v58 = *(void **)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v56 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000AA4C(&qword_100182C00);
  uint64_t v57 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v55 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100182CA8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000AA4C(&qword_100182CB0);
  __chkstk_darwin(v60);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000AA4C(&qword_100182BE0);
  __chkstk_darwin(v66);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100182BF0);
  uint64_t v59 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_100182B88);
  SFAirDrop.AcceptAction.Composite.buttonConfiguration.getter();
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v22 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v58 = v53;
    uint64_t v24 = *((void *)v21 + 1);
    __chkstk_darwin(v23);
    uint64_t v25 = v61;
    v53[-4] = a1;
    v53[-3] = v25;
    v53[-2] = v62;
    LOBYTE(v53[-1]) = v63 & 1;
    __chkstk_darwin(v26);
    v53[-2] = v27;
    v53[-1] = v24;
    sub_10000AA4C(&qword_100182CB8);
    sub_100084958();
    Menu.init(content:label:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v59;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v12, v17, v15);
    swift_storeEnumTagMultiPayload();
    sub_10000F288(&qword_100182BE8, &qword_100182BF0);
    sub_10000F288(&qword_100182BF8, &qword_100182C00);
    _ConditionalContent<>.init(storage:)();
    sub_10000F330((uint64_t)v14, (uint64_t)v10, &qword_100182BE0);
    swift_storeEnumTagMultiPayload();
    sub_1000843F4();
    sub_10000F288(&qword_100182C08, &qword_100182C10);
    _ConditionalContent<>.init(storage:)();
    sub_10000F394((uint64_t)v14, &qword_100182BE0);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v15);
  }
  else
  {
    uint64_t v30 = v8;
    uint64_t v31 = a1;
    uint64_t v32 = (uint64_t)v10;
    uint64_t v34 = v61;
    uint64_t v33 = v62;
    char v35 = v63;
    v53[0] = v14;
    v53[1] = v15;
    uint64_t v36 = v64;
    uint64_t v59 = v30;
    uint64_t v54 = v32;
    if (v22 == enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
    {
      uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v19 + 96))(v21, v18);
      uint64_t v58 = v53;
      uint64_t v38 = *((void *)v21 + 1);
      __chkstk_darwin(v37);
      v53[-4] = v31;
      v53[-3] = v34;
      v53[-2] = v33;
      LOBYTE(v53[-1]) = v35 & 1;
      __chkstk_darwin(v39);
      v53[-2] = v40;
      v53[-1] = v38;
      sub_10000AA4C(&qword_100182CB8);
      sub_100084958();
      uint64_t v41 = v55;
      Menu.init(content:label:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v57;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v12, v41, v36);
      swift_storeEnumTagMultiPayload();
      sub_10000F288(&qword_100182BE8, &qword_100182BF0);
      sub_10000F288(&qword_100182BF8, &qword_100182C00);
      uint64_t v43 = v53[0];
      _ConditionalContent<>.init(storage:)();
      sub_10000F330(v43, v54, &qword_100182BE0);
      swift_storeEnumTagMultiPayload();
      sub_1000843F4();
      sub_10000F288(&qword_100182C08, &qword_100182C10);
      _ConditionalContent<>.init(storage:)();
      sub_10000F394(v43, &qword_100182BE0);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v41, v36);
    }
    else if (v22 == enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v19 + 96))(v21, v18);
      uint64_t v45 = *((void *)v21 + 1);
      uint64_t v46 = *((void *)v21 + 3);
      __chkstk_darwin(v44);
      v53[-4] = v31;
      v53[-3] = v34;
      v53[-2] = v33;
      LOBYTE(v53[-1]) = v35 & 1;
      __chkstk_darwin(v47);
      v53[-4] = v48;
      v53[-3] = v45;
      v53[-2] = v49;
      v53[-1] = v46;
      sub_10000AA4C(&qword_100182C98);
      sub_10000AA4C(&qword_100182CB8);
      sub_10000F288(&qword_100182CA0, &qword_100182C98);
      sub_100084958();
      uint64_t v50 = v56;
      Menu.init(content:label:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = v58;
      uint64_t v52 = v65;
      ((void (*)(uint64_t, char *, uint64_t))v58[2])(v54, v50, v65);
      swift_storeEnumTagMultiPayload();
      sub_1000843F4();
      sub_10000F288(&qword_100182C08, &qword_100182C10);
      _ConditionalContent<>.init(storage:)();
      return ((uint64_t (*)(char *, uint64_t))v51[1])(v50, v52);
    }
    else
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100082EB0@<X0>(uint64_t a1@<X8>)
{
  sub_100054CC0();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100082F1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10000AA4C(&qword_100182B88);
  SFAirDrop.AcceptAction.Composite.actions.getter();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(unsigned char *)(v7 + 32) = a4;
  swift_retain();
  sub_10000AA4C(&qword_100182CC8);
  sub_10000AA4C(&qword_100182C50);
  sub_10000F288(&qword_100182CD0, &qword_100182CC8);
  sub_10000F288(&qword_100182C48, &qword_100182C50);
  sub_10000F288(&qword_100182CD8, &qword_100181470);
  return ForEach<>.init(_:content:)();
}

uint64_t sub_10008307C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a7;
  uint64_t v27 = a6;
  uint64_t v22 = a5;
  uint64_t v23 = a2;
  int v25 = a4;
  uint64_t v24 = a3;
  uint64_t v8 = sub_10000AA4C(&qword_100181470);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  SFAirDrop.AcceptAction.Single.buttonConfiguration.getter();
  uint64_t v15 = SFAirDrop.ButtonConfiguration.localizedTitle.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v28 = v15;
  uint64_t v29 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v24;
  *(void *)(v19 + 16) = v23;
  *(void *)(v19 + 24) = v20;
  *(unsigned char *)(v19 + 32) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_100054CC0();
  swift_retain();
  return Button<>.init<A>(_:action:)();
}

__n128 sub_10008329C@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_100083330((uint64_t)&v7);
  unint64_t v3 = v7;
  unsigned __int8 v4 = v9;
  unint64_t v5 = v10;
  __n128 result = v8;
  a1->n128_u64[0] = v2;
  a1->n128_u64[1] = 0;
  a1[1].n128_u8[0] = 1;
  a1[1].n128_u64[1] = v3;
  a1[2] = result;
  a1[3].n128_u8[0] = v4;
  a1[3].n128_u64[1] = v5;
  return result;
}

uint64_t sub_100083330@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = Image.init(systemName:)();
  sub_100054CC0();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init<A>(_:)();
  uint64_t v5 = v4;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  char v7 = v6 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  *(void *)(a1 + 32) = v8;
  swift_retain();
  sub_100055180(v3, v5, v7);
  swift_bridgeObjectRetain();
  sub_100054D14(v3, v5, v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100083418(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = sub_10000AA4C(&qword_100181470);
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v6;
  v2[13] = v5;
  return _swift_task_switch(sub_10008356C, v6, v5);
}

uint64_t sub_10008356C()
{
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100083614;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[5];
  return SFAirDrop.AcceptAction.Single.accept(with:)(v2, v3);
}

uint64_t sub_100083614()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v7 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v8 = sub_100083820;
  }
  else {
    uint64_t v8 = sub_1000837AC;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_1000837AC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100083820()
{
  uint64_t v22 = v0;
  swift_release();
  if (qword_10017F760 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_100182AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_t log = v6;
    uint64_t v13 = SFAirDrop.AcceptAction.Single.id.getter();
    v0[2] = sub_100047F98(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop ReadyForOpen action %s failed with error %@", (uint8_t *)v12, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100083B38@<X0>(uint64_t a1@<X8>)
{
  return sub_10007DD30(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

uint64_t sub_100083B44()
{
  uint64_t v1 = *(void *)(sub_10000AA4C(&qword_100182B00) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 33) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = sub_10000AA4C(&qword_100181470);
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100083C70(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000AA4C(&qword_100182B00) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100081670(a1, v4, v5, v6, v7);
}

unint64_t sub_100083CEC()
{
  unint64_t result = qword_100182B10;
  if (!qword_100182B10)
  {
    sub_10000B100(&qword_100182AF8);
    sub_10000F288(&qword_100182B18, &qword_100182AF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182B10);
  }
  return result;
}

uint64_t sub_100083D94(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000AA4C(&qword_100181470);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  if (qword_10017F760 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B150(v12, (uint64_t)qword_100182AD0);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v28(v11, a1, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v26 = a1;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v27 = v4;
    uint64_t v31 = v17;
    int v25 = v8;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v24 = v16 + 4;
    uint64_t v18 = SFAirDrop.AcceptAction.Single.id.getter();
    uint64_t v30 = sub_100047F98(v18, v19, &v31);
    BOOL v8 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "AirDrop ReadyForOpen action button was tapped. Triggering action %s on AirDropTransferSession", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v27;
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }

  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
  v28(v8, a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v22 + v21, v8, v5);
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000F394((uint64_t)v4, &qword_1001829C0);
}

uint64_t sub_100084164()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181470);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000841F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100181470) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100013ABC;
  return sub_100083418(a1, v5);
}

uint64_t sub_1000842D4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B100(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100084354()
{
  unint64_t result = qword_100182BD0;
  if (!qword_100182BD0)
  {
    sub_10000B100(&qword_100182B70);
    sub_1000843F4();
    sub_10000F288(&qword_100182C08, &qword_100182C10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182BD0);
  }
  return result;
}

unint64_t sub_1000843F4()
{
  unint64_t result = qword_100182BD8;
  if (!qword_100182BD8)
  {
    sub_10000B100(&qword_100182BE0);
    sub_10000F288(&qword_100182BE8, &qword_100182BF0);
    sub_10000F288(&qword_100182BF8, &qword_100182C00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182BD8);
  }
  return result;
}

unint64_t sub_1000844B4()
{
  unint64_t result = qword_100182C18;
  if (!qword_100182C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182C18);
  }
  return result;
}

unint64_t sub_100084508()
{
  unint64_t result = qword_100182C28;
  if (!qword_100182C28)
  {
    sub_10000B100(&qword_100182BC0);
    sub_10000B100(&qword_100182BB0);
    sub_100084638();
    sub_1000844B4();
    swift_getOpaqueTypeConformance2();
    sub_10000B100(&qword_100182B98);
    sub_1000842D4(&qword_100182C78, &qword_100182B98, (void (*)(void))sub_100084638);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182C28);
  }
  return result;
}

unint64_t sub_100084638()
{
  unint64_t result = qword_100182C30;
  if (!qword_100182C30)
  {
    sub_10000B100(&qword_100182BB0);
    sub_1000846D8();
    sub_10000F288(&qword_100182C68, &qword_100182C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182C30);
  }
  return result;
}

unint64_t sub_1000846D8()
{
  unint64_t result = qword_100182C38;
  if (!qword_100182C38)
  {
    sub_10000B100(&qword_100182C40);
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    sub_10000F288(&qword_100182C58, &qword_100182C60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182C38);
  }
  return result;
}

unint64_t sub_100084798()
{
  unint64_t result = qword_100182C80;
  if (!qword_100182C80)
  {
    sub_10000B100(&qword_100182B80);
    sub_10000B100(&qword_100182B70);
    sub_100084354();
    sub_1000844B4();
    swift_getOpaqueTypeConformance2();
    sub_10000B100(&qword_100182B58);
    sub_1000842D4(&qword_100182BC8, &qword_100182B58, (void (*)(void))sub_100084354);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182C80);
  }
  return result;
}

double sub_1000848D0@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10008329C(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000848FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100082EB0(a1);
}

uint64_t sub_100084918()
{
  return sub_100082F1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

unint64_t sub_100084958()
{
  unint64_t result = qword_100182CC0;
  if (!qword_100182CC0)
  {
    sub_10000B100(&qword_100182CB8);
    sub_10000F288(&qword_100182C48, &qword_100182C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100182CC0);
  }
  return result;
}

uint64_t sub_1000849F0()
{
  return sub_100082F1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_100084A30@<X0>(uint64_t *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = Image.init(systemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_100084A74()
{
  return sub_100082F1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_100084AB4()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100084AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008307C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_10016B768, (uint64_t)sub_1000848CC, a2);
}

uint64_t sub_100084B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008307C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_10016B7B8, (uint64_t)sub_1000848CC, a2);
}

uint64_t sub_100084B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008307C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), (uint64_t)&unk_10016B808, (uint64_t)sub_1000848CC, a2);
}

uint64_t sub_100084BAC()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181470);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 33) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100084C7C()
{
  uint64_t v1 = *(void *)(sub_10000AA4C(&qword_100181470) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100083D94(v2);
}

uint64_t sub_100084CE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100084D20()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for AUIRemoteAlertPresentationManager()
{
  uint64_t result = qword_100182CE8;
  if (!qword_100182CE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100084E20()
{
  return swift_initClassMetadata2();
}

id sub_100084E60()
{
  if (qword_10017F768 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)swift_dynamicCastClassUnconditional();

  return v0;
}

void sub_100084ED0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SFRemoteAlertPresentationManager.remoteAlertHandleDidActivate(_:)();
}

void sub_100084F38(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SFRemoteAlertPresentationManager.remoteAlertHandleDidDeactivate(_:)();
}

void sub_100084FA0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a1;
  id v8 = a4;
  SFRemoteAlertPresentationManager.remoteAlertHandle(_:didInvalidateWithError:)();
}

id sub_100085014(void *a1)
{
  v2.receiver = a1;
  v2.super_class = (Class)type metadata accessor for AUIRemoteAlertPresentationManager();
  return [super init];
}

id sub_100085058()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUIRemoteAlertPresentationManager();
  return [super dealloc];
}

uint64_t sub_100085090()
{
  return type metadata accessor for AUIRemoteAlertPresentationManager();
}

id sub_100085098()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AUIRemoteAlertPresentationManager()) init];
  qword_100182CE0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000850CC()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100085160, v2, v1);
}

uint64_t sub_100085160()
{
  swift_release();
  if (qword_10017F7E8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_10010DFFC();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008520C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001EA1C(v0, qword_100182DA0);
  uint64_t v1 = sub_10000B150(v0, (uint64_t)qword_100182DA0);
  if (qword_10017F798 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B150(v0, (uint64_t)qword_10018D0F8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000852D4(void *a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100183588);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(a1, a1[3]);
  sub_100092DB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10008543C()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x696E556C61746F74;
  }
}

uint64_t sub_100085488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100092AF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000854B0()
{
  return 0;
}

void sub_1000854BC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000854C8(uint64_t a1)
{
  unint64_t v2 = sub_100092DB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100085504(uint64_t a1)
{
  unint64_t v2 = sub_100092DB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100085540@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100092C0C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10008556C(void *a1)
{
  return sub_1000852D4(a1);
}

Swift::Int sub_100085588()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000855E4()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100085620()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100085678(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int sub_100085690()
{
  return Hasher._finalize()();
}

void sub_1000856D4()
{
}

Swift::Int sub_1000856FC()
{
  return Hasher._finalize()();
}

unint64_t sub_10008573C()
{
  return 0xD000000000000012;
}

uint64_t sub_100085758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100093CAC(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_100085784(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100085790(uint64_t a1)
{
  unint64_t v2 = sub_100092E04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000857CC(uint64_t a1)
{
  unint64_t v2 = sub_100092E04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100085808@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000AA4C(&qword_100183590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(a1, a1[3]);
  sub_100092E04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AB98((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_10000AB98((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_100085980(void *a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_1001835A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(a1, a1[3]);
  sub_100092E04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100085AB8()
{
  return sub_10002C81C();
}

uint64_t sub_100085ACC()
{
  return sub_100085AF4();
}

uint64_t sub_100085AE0()
{
  return sub_100085AF4();
}

uint64_t sub_100085AF4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100085B60()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100085BD4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100085C48()
{
  return sub_100085D38();
}

uint64_t sub_100085C5C()
{
  return sub_100085D38();
}

uint64_t sub_100085C70()
{
  return sub_100085D38();
}

uint64_t sub_100085C84()
{
  return sub_100085AF4();
}

uint64_t sub_100085C98()
{
  return sub_100085AF4();
}

uint64_t sub_100085CAC()
{
  return sub_10002C81C();
}

uint64_t sub_100085CC0()
{
  return sub_10002C81C();
}

uint64_t sub_100085CD4()
{
  return sub_10002C81C();
}

uint64_t sub_100085CE8()
{
  return sub_100085AF4();
}

uint64_t sub_100085CFC()
{
  return sub_100085AF4();
}

uint64_t sub_100085D10()
{
  return sub_100085D38();
}

uint64_t sub_100085D24()
{
  return sub_100085D38();
}

uint64_t sub_100085D38()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100085DA8()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 0x732D72656E6E6162;
  v2._object = (void *)0xEE006E6F69737365;
  Swift::Bool v3 = String.hasSuffix(_:)(v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v16 = *v1;
    sub_100054CC0();
    uint64_t v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v6 = v5;
    if (qword_10017F610 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (*(void *)(v16 + 16))
    {
      unint64_t v7 = sub_100048730(v4, v6);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v16 + 56) + 8 * v7);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if (qword_10017F610 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v9 = v15;
  if (v15)
  {
    uint64_t v10 = *v1;
    uint64_t v11 = (void *)v1[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = v10;
    v12._object = v11;
    Swift::Bool v13 = String.hasPrefix(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v13)
    {
      swift_release();
      return 0;
    }
  }
  return v9;
}

unint64_t sub_100086058()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v37 = v1;
  __chkstk_darwin(v1);
  char v35 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_100181400);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - v10;
  unint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  unint64_t v38 = 0xD000000000000019;
  unint64_t v39 = 0x8000000100133230;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  Swift::Bool v13 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 10272;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v34 = v4;
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v17 = v16(v11, 1, v3);
  sub_10000F394((uint64_t)v11, &qword_100181400);
  if (v17 == 1) {
    uint64_t v18 = 0x65766965636572;
  }
  else {
    uint64_t v18 = 1684956531;
  }
  if (v17 == 1) {
    unint64_t v19 = 0xE700000000000000;
  }
  else {
    unint64_t v19 = 0xE400000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8233;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v16(v9, 1, v3))
  {
    sub_10000F394((uint64_t)v9, &qword_100181400);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v22 = v35;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v23 = SFAirDropReceive.Transfer.State.shortDescription.getter();
    int v25 = v24;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  }
  else
  {
    uint64_t v26 = v33;
    uint64_t v27 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v33, v9, v3);
    sub_10000F394((uint64_t)v9, &qword_100181400);
    uint64_t v23 = SFAirDropSend.Transfer.State.shortDescription.getter();
    int v25 = v28;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v3);
  }
  v29._countAndFlagsBits = v23;
  v29._object = v25;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 93;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  return v38;
}

uint64_t sub_100086494(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t, uint64_t), void (*a7)(char *, uint64_t, uint64_t), uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, char *a13, void *a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v188 = a8;
  unint64_t v159 = a7;
  unint64_t v158 = a6;
  uint64_t v157 = a5;
  uint64_t v156 = a4;
  int v155 = a3;
  uint64_t v154 = a2;
  uint64_t v153 = a1;
  id v181 = a14;
  uint64_t v182 = a13;
  uint64_t v167 = a15;
  int v164 = a16;
  uint64_t v183 = a12;
  long long v162 = a11;
  uint64_t v187 = a9;
  uint64_t v176 = a10;
  uint64_t v17 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v177 = *(void *)(v17 - 8);
  uint64_t v178 = (void (*)(void, void))v17;
  __chkstk_darwin(v17);
  uint64_t v135 = (char *)&v135 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v186 = *(void *)(v180 - 8);
  uint64_t v19 = __chkstk_darwin(v180);
  long long v166 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v165 = (char *)&v135 - v21;
  uint64_t v179 = type metadata accessor for DeviceLockState();
  uint64_t v185 = *(void *)(v179 - 8);
  uint64_t v22 = __chkstk_darwin(v179);
  long long v161 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  long long v160 = (char *)&v135 - v24;
  uint64_t v189 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v184 = *(void *)(v189 - 8);
  uint64_t v25 = __chkstk_darwin(v189);
  uint64_t v168 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v152 = (char *)&v135 - v28;
  __chkstk_darwin(v27);
  uint64_t v151 = (char *)&v135 - v29;
  uint64_t v172 = (void *)sub_10000AA4C(&qword_100181C68);
  uint64_t v148 = (void *)*(v172 - 1);
  __chkstk_darwin(v172);
  uint64_t v142 = (char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000AA4C(&qword_1001835A8);
  uint64_t v145 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  uint64_t v32 = __chkstk_darwin(v143);
  uint64_t v141 = (uint64_t)&v135 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  unint64_t v140 = (char *)&v135 - v34;
  uint64_t v35 = sub_10000AA4C(&qword_1001835B0);
  uint64_t v174 = *(void *)(v35 - 8);
  uint64_t v175 = (void (*)(uint64_t, uint64_t))v35;
  __chkstk_darwin(v35);
  uint64_t v139 = (char *)&v135 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = sub_10000AA4C(&qword_100181400);
  uint64_t v37 = __chkstk_darwin(v173);
  uint64_t v163 = (uint64_t)&v135 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v171 = (uint64_t)&v135 - v40;
  __chkstk_darwin(v39);
  uint64_t v170 = (uint64_t)&v135 - v41;
  uint64_t v42 = sub_10000AA4C(&qword_1001835B8);
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000AA4C(&qword_100180E80);
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v135 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v50 = (void *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  uint64_t v149 = (void *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  void *v50 = 0;
  v50[1] = 0;
  uint64_t v51 = (void *)(v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  int v150 = (void (**)(char *, uint64_t, uint64_t))(v16
                                                        + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  *uint64_t v51 = 0;
  v51[1] = 0;
  uint64_t v52 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
  uint64_t v53 = v16;
  uint64_t v54 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v52, 1, 1, v54);
  uint64_t v55 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  LOBYTE(v191[0]) = 0;
  uint64_t v136 = v49;
  Published.init(initialValue:)();
  uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 32);
  uint64_t v137 = v47 + 32;
  uint64_t v138 = v56;
  v56(v55, v49, v46);
  uint64_t v57 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  v191[0] = 0;
  v191[1] = 0;
  sub_10000AA4C(&qword_1001800D0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v57, v45, v42);
  uint64_t v58 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  uint64_t v146 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  uint64_t v59 = v170;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void, void)))(v177 + 56))(v170, 1, 1, v178);
  sub_10000F330(v59, v171, &qword_100181400);
  uint64_t v60 = v139;
  Published.init(initialValue:)();
  sub_10000F394(v59, &qword_100181400);
  (*(void (**)(uint64_t, char *, void (*)(uint64_t, uint64_t)))(v174 + 32))(v58, v60, v175);
  uint64_t v61 = v16 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  uint64_t v62 = sub_10000AA4C(&qword_100181490);
  uint64_t v63 = (uint64_t)v140;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v140, 1, 1, v62);
  sub_10000F330(v63, v141, (uint64_t *)&unk_1001827D0);
  uint64_t v64 = v144;
  Published.init(initialValue:)();
  sub_10000F394(v63, (uint64_t *)&unk_1001827D0);
  (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v61, v64, v147);
  uint64_t v65 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  v191[0] = 0;
  uint64_t v66 = sub_10000AA4C((uint64_t *)&unk_100183710);
  uint64_t v67 = v142;
  uint64_t v147 = v66;
  Published.init(initialValue:)();
  uint64_t v68 = (void *)v148[4];
  uint64_t v69 = v172;
  ((void (*)(uint64_t, char *, void *))v68)(v65, v67, v172);
  uint64_t v148 = v68;
  uint64_t v70 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  v191[0] = 0;
  Published.init(initialValue:)();
  ((void (*)(uint64_t, char *, void *))v68)(v70, v67, v69);
  uint64_t v71 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  LOBYTE(v191[0]) = 0;
  uint64_t v72 = v136;
  Published.init(initialValue:)();
  double v73 = v138;
  v138(v71, v72, v46);
  uint64_t v74 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  LOBYTE(v191[0]) = 1;
  Published.init(initialValue:)();
  v73(v74, v72, v46);
  uint64_t v75 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  v191[0] = 0;
  long long v76 = v67;
  uint64_t v77 = v53;
  Published.init(initialValue:)();
  long long v78 = v172;
  long long v79 = (void (*)(uint64_t, char *, void *))v148;
  ((void (*)(uint64_t, char *, void *))v148)(v75, v76, v172);
  uint64_t v80 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  v191[0] = 0;
  Published.init(initialValue:)();
  v79(v80, v76, v78);
  *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = &_swiftEmptyArrayStorage;
  *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = &_swiftEmptyArrayStorage;
  uint64_t v148 = (void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  v148[1] = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = 0;
  uint64_t v81 = v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  uint64_t v82 = type metadata accessor for Date();
  double v83 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56);
  v83(v81, 1, 1, v82);
  v83(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, 1, 1, v82);
  uint64_t v84 = (void *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  uint64_t v85 = v154;
  *uint64_t v84 = v153;
  v84[1] = v85;
  *(unsigned char *)(v53 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = v155;
  uint64_t v86 = v149;
  uint64_t v87 = v157;
  *uint64_t v149 = v156;
  v86[1] = v87;
  swift_bridgeObjectRelease();
  long long v88 = v150;
  long long v89 = v159;
  *int v150 = v158;
  v88[1] = v89;
  swift_bridgeObjectRelease();
  uint64_t v90 = v184;
  uint64_t v91 = (void (*)(char *, uint64_t, uint64_t))(v184 + 16);
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v184 + 16);
  unint64_t v93 = v151;
  uint64_t v94 = v189;
  v92(v151, v188, v189);
  swift_beginAccess();
  unint64_t v159 = v91;
  unint64_t v158 = v92;
  v92(v152, (uint64_t)v93, v94);
  Published.init(initialValue:)();
  uint64_t v95 = *(void **)(v90 + 8);
  uint64_t v184 = v90 + 8;
  uint64_t v172 = v95;
  ((void (*)(char *, uint64_t))v95)(v93, v94);
  swift_endAccess();
  uint64_t v96 = v170;
  sub_10000F330(v187, v170, &qword_100181400);
  uint64_t v97 = v146;
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(v174 + 8))(v97, v175);
  sub_10000F330(v96, v171, &qword_100181400);
  Published.init(initialValue:)();
  sub_10000F394(v96, &qword_100181400);
  swift_endAccess();
  swift_beginAccess();
  id v190 = v176;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v98 = v162;
  id v190 = v162;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  LOBYTE(v190) = v164;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v99 = v185;
  uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v185 + 16);
  uint64_t v101 = v160;
  uint64_t v102 = v179;
  v100(v160, v183, v179);
  swift_beginAccess();
  v100(v161, (uint64_t)v101, v102);
  Published.init(initialValue:)();
  unint64_t v103 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  uint64_t v185 = v99 + 8;
  uint64_t v175 = v103;
  v103((uint64_t)v101, v102);
  swift_endAccess();
  uint64_t v104 = v186;
  uint64_t v105 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 16);
  uint64_t v106 = v165;
  uint64_t v107 = v180;
  v105(v165, (uint64_t)v182, v180);
  swift_beginAccess();
  v105(v166, (uint64_t)v106, v107);
  Published.init(initialValue:)();
  uint64_t v108 = v104 + 8;
  unint64_t v109 = *(void (**)(char *, uint64_t))(v104 + 8);
  uint64_t v186 = v108;
  v109(v106, v107);
  swift_endAccess();
  v148[1] = v167;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v77 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) = SBUIIsSystemApertureEnabled();
  id v110 = [self progressWithTotalUnitCount:v98];
  swift_beginAccess();
  id v190 = v110;
  sub_10001FB40(0, &qword_100182E98);
  uint64_t v111 = v177;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v112 = v178;
  swift_release();
  id v113 = v191[0];
  [v191[0] setCompletedUnitCount:v176];

  uint64_t v114 = v163;
  sub_10000F330(v187, v163, &qword_100181400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(void, void)))(v111 + 48))(v114, 1, v112) == 1)
  {
    sub_10000F394(v114, &qword_100181400);
    sub_100088F84(v188);
  }
  else
  {
    uint64_t v115 = (uint64_t)v135;
    (*(void (**)(char *, uint64_t, void (*)(void, void)))(v111 + 32))(v135, v114, v112);
    sub_10008A988(v115);
    (*(void (**)(uint64_t, void))(v111 + 8))(v115, v112);
  }
  uint64_t v116 = v189;
  uint64_t v117 = v168;
  if (qword_10017F770 != -1) {
    swift_once();
  }
  uint64_t v118 = type metadata accessor for Logger();
  sub_10000B150(v118, (uint64_t)qword_100182DA0);
  v158(v117, v188, v116);
  swift_retain_n();
  uint64_t v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v119, v120))
  {
    uint64_t v121 = swift_slowAlloc();
    uint64_t v122 = (void *)swift_slowAlloc();
    uint64_t v178 = (void (*)(void, void))v109;
    v191[0] = v122;
    *(_DWORD *)uint64_t v121 = 136315650;
    uint64_t v123 = *(void *)(v77 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    unint64_t v124 = *(void *)(v77 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain();
    id v190 = (id)sub_100047F98(v123, v124, (uint64_t *)v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 12) = 2048;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    id v125 = v190;
    [v190 fractionCompleted];
    unint64_t v127 = v126;

    id v190 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v121 + 22) = 2080;
    sub_1000935C4(&qword_100181658, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter();
    id v190 = (id)sub_100047F98(v128, v129, (uint64_t *)v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v109 = (void (*)(char *, uint64_t))v178;
    uint64_t v130 = (void (*)(uint64_t, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v117, v189);
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Transfer session created for transfer %s with completed: %f, transferState: %s", (uint8_t *)v121, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v116 = v189;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    uint64_t v130 = (void (*)(uint64_t, uint64_t))v172;
    ((void (*)(char *, uint64_t))v172)(v117, v116);
  }

  uint64_t v131 = v169;
  uint64_t v132 = sub_1000886C8(0, 0);
  if (v131)
  {
    swift_release();

    v109(v182, v180);
    v175(v183, v179);
    sub_10000F394(v187, &qword_100181400);
    v130(v188, v116);
  }
  else
  {
    uint64_t v133 = v132;

    v109(v182, v180);
    v175(v183, v179);
    sub_10000F394(v187, &qword_100181400);
    v130(v188, v116);
    *(void *)(v77 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v133;
    swift_release();
  }
  return v77;
}

uint64_t sub_100087ABC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001835C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
  {
    uint64_t v9 = sub_10000AA4C(&qword_1001835C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    swift_retain();
    static ActivityUIDismissalPolicy.immediate.getter();
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000F394((uint64_t)v8, &qword_1001835C0);
  }
  uint64_t v10 = v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F394(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction, (uint64_t *)&unk_1001813F0);
  uint64_t v12 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  uint64_t v13 = sub_10000AA4C(&qword_100180E80);
  Swift::String v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  uint64_t v15 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numTotalItems;
  uint64_t v16 = sub_10000AA4C(&qword_100183648);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  v17(v15, v16);
  v17(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__numCompletedItems, v16);
  uint64_t v18 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  uint64_t v19 = sub_10000AA4C(&qword_1001835B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__progress;
  uint64_t v21 = sub_10000AA4C(&qword_100183650);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferState;
  uint64_t v23 = sub_10000AA4C(&qword_100183658);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  uint64_t v24 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  uint64_t v25 = sub_10000AA4C(&qword_1001835B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  uint64_t v26 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  uint64_t v27 = sub_10000AA4C(&qword_1001835A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
  uint64_t v28 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  uint64_t v29 = sub_10000AA4C(&qword_100181C68);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
  v30(v28, v29);
  v30(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage, v29);
  v14(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImageIsSensitive, v13);
  v14(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage, v13);
  v14(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage, v13);
  v30(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage, v29);
  v30(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage, v29);
  uint64_t v31 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__lockState;
  uint64_t v32 = sub_10000AA4C(&qword_100183660);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
  uint64_t v33 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__displayPriority;
  uint64_t v34 = sub_10000AA4C(&qword_100183668);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100093838(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  sub_100093838(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate);
  swift_release();
  sub_10000F394(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, &qword_100181690);
  sub_10000F394(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, &qword_100181690);
  return v1;
}

uint64_t sub_100088114()
{
  sub_100087ABC();

  return swift_deallocClassInstance();
}

uint64_t sub_10008816C()
{
  return type metadata accessor for AirDropTransferSession();
}

uint64_t type metadata accessor for AirDropTransferSession()
{
  uint64_t result = qword_100182E68;
  if (!qword_100182E68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000881C0()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100090088(319, &qword_100182E78, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.DeclineAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      sub_10002CF1C(319, (unint64_t *)&qword_100180DF8);
      if (v2 <= 0x3F)
      {
        sub_10002CF1C(319, &qword_100182E80);
        if (v3 <= 0x3F)
        {
          sub_10003B8F4(319, &qword_100182E88, &qword_1001800D0);
          if (v4 <= 0x3F)
          {
            sub_100090020();
            if (v5 <= 0x3F)
            {
              sub_100090088(319, &qword_100182EA0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
              if (v6 <= 0x3F)
              {
                sub_10003B8F4(319, &qword_100182EA8, &qword_100181400);
                if (v7 <= 0x3F)
                {
                  sub_10003B8F4(319, &qword_100182EB0, (uint64_t *)&unk_1001827D0);
                  if (v8 <= 0x3F)
                  {
                    sub_10003B8F4(319, (unint64_t *)&unk_100181B00, (uint64_t *)&unk_100183710);
                    if (v9 <= 0x3F)
                    {
                      sub_100090088(319, &qword_100182EB8, (uint64_t (*)(uint64_t))&type metadata accessor for DeviceLockState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                      if (v10 <= 0x3F)
                      {
                        sub_100090088(319, &qword_100182EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.DisplayPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
                        if (v11 <= 0x3F)
                        {
                          sub_100090088(319, (unint64_t *)&unk_100182EC8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
                          if (v12 <= 0x3F) {
                            swift_updateClassMetadata2();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000886C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ActivityPresentationOptions();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10017F770 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_10000B150(v9, (uint64_t)qword_100182DA0);
  swift_retain();
  uint64_t v48 = v10;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v50 = v8;
  if (v13)
  {
    uint64_t v45 = a1;
    Swift::String v14 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)Swift::String v14 = 136315138;
    uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
    unint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_100047F98(v15, v16, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a1 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Creating ActivityKit activity for transfer: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (a2)
    {
LABEL_5:
      uint64_t v17 = a2;
      goto LABEL_8;
    }
  }
  else
  {

    swift_release();
    if (a2) {
      goto LABEL_5;
    }
  }
  a1 = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain();
LABEL_8:
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 0x732D72656E6E6162;
  v18._object = (void *)0xEE006E6F69737365;
  Swift::Bool v19 = String.hasSuffix(_:)(v18);
  int v20 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled);
  sub_10000AA4C(&qword_100183640);
  uint64_t v21 = a1;
  uint64_t v22 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination();
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10012A270;
  unint64_t v26 = v25 + v24;
  uint64_t v27 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:);
  if (!v20) {
    uint64_t v27 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:);
  }
  if (!v19) {
    uint64_t v27 = (unsigned int *)&enum case for ActivityPresentationOptions.ActivityPresentationDestination.lockscreen(_:);
  }
  (*(void (**)(unint64_t, void, uint64_t))(v23 + 104))(v26, *v27, v22);
  uint64_t v28 = v50;
  ActivityPresentationOptions.init(destinations:)();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v29 = v53[0];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v30 = v53[0];
  sub_10000AA4C(&qword_100181668);
  v53[0] = v21;
  v53[1] = v17;
  uint64_t v51 = v29;
  uint64_t v52 = v30;
  uint64_t v31 = v49;
  uint64_t v32 = static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)();
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_getErrorValue();
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v51 = sub_100047F98(v36, v37, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Error requesting activity %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_retain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v41 = Activity.id.getter();
      uint64_t v51 = sub_100047F98(v41, v42, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Requested activity successfully: %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v47);
  }
  return v32;
}

void sub_100088E04()
{
  uint64_t v1 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
  if (!*(void *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
  {
    uint64_t v2 = v0;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v7 == 1)
    {
      if (qword_10017F770 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10000B150(v3, (uint64_t)qword_100182DA0);
      unint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting ActivityKit activity because incoming transfer was accepted", v6, 2u);
        swift_slowDealloc();
      }

      *(void *)(v2 + v1) = sub_1000886C8(0, 0);
      swift_release();
    }
  }
}

uint64_t sub_100088F84(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v84 = *(void *)(v3 - 8);
  uint64_t v85 = v3;
  __chkstk_darwin(v3);
  uint64_t v82 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for DispatchQoS();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (void (**)(char *, uint64_t))((char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v91 = type metadata accessor for DispatchTime();
  uint64_t v79 = *(void *)(v91 - 8);
  uint64_t v6 = __chkstk_darwin(v91);
  uint64_t v77 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v78 = (char *)&v76 - v8;
  uint64_t v9 = sub_10000AA4C(&qword_100181690);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v88 = (uint64_t)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v87 = (char *)&v76 - v12;
  uint64_t v13 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v90 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Swift::String v18 = (char *)&v76 - v17;
  uint64_t v19 = type metadata accessor for SFAirDropReceive.Transfer.State();
  int v20 = *(char **)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  long long v89 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v86 = (char *)&v76 - v24;
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v76 - v25;
  uint64_t v27 = a1;
  (*((void (**)(char *, uint64_t, uint64_t))v20 + 2))((char *)&v76 - v25, a1, v19);
  uint64_t v92 = (char *)*((void *)v20 + 11);
  int v28 = ((uint64_t (*)(char *, uint64_t))v92)(v26, v19);
  if (v28 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    uint64_t v80 = (void (**)(char *, uint64_t))v20;
    uint64_t v81 = *((void *)v20 + 12);
    uint64_t v82 = v20 + 96;
    ((void (*)(char *, uint64_t))v81)(v26, v19);
    uint64_t v29 = sub_10000AA4C((uint64_t *)&unk_1001827A0);
    uint64_t v30 = &v26[*(int *)(v29 + 48)];
    uint64_t v83 = (uint64_t)v26;
    swift_bridgeObjectRelease();
    uint64_t v84 = v14;
    uint64_t v85 = v13;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v91 = (uint64_t)v18;
    v31(v18, v30, v13);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(aBlock[0]) = 1;
    swift_retain();
    static Published.subscript.setter();
    sub_10008A428(v27);
    uint64_t v32 = v1;
    uint64_t v33 = v89;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled))
    {
LABEL_14:
      uint64_t v52 = v84;
      uint64_t v53 = v85;
      uint64_t v54 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v90, v91, v85);
      if ((*(unsigned int (**)(char *, uint64_t))(v52 + 88))(v54, v53) == enum case for SFAirDrop.Progress.completed(_:))
      {
        (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v53);
        swift_bridgeObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        LOBYTE(aBlock[0]) = 0;
        swift_retain();
        static Published.subscript.setter();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v53);
      }
      unint64_t v37 = (char *)v83;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v92)(v33, v19) == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
      {
        ((void (*)(char *, uint64_t))v81)(v33, v19);
        uint64_t v55 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v33, v55);
        swift_getKeyPath();
        swift_getKeyPath();
        LOBYTE(aBlock[0]) = 1;
        swift_retain();
        static Published.subscript.setter();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v91, v53);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v91, v53);
        v80[1](v33, v19);
      }
      uint64_t v56 = &v37[*(int *)(v29 + 80)];
      uint64_t v57 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v57 - 8) + 8))(v56, v57);
      goto LABEL_21;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    os_log_type_t v34 = v86;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v35 = ((uint64_t (*)(char *, uint64_t))v92)(v34, v19);
    if (v35 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
    {
      ((void (*)(char *, uint64_t))v81)(v34, v19);
      uint64_t v36 = sub_10000AA4C(&qword_100181490);
    }
    else
    {
      if (v35 != enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
      {
        if (v35 != enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
        {
          if (v35 != enum case for SFAirDropReceive.Transfer.State.created(_:)
            && v35 != enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
            && v35 != enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:))
          {
            v80[1](v34, v19);
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        ((void (*)(char *, uint64_t))v81)(v34, v19);
        uint64_t v46 = sub_10000AA4C(&qword_100181490);
LABEL_12:
        (*(void (**)(char *))(*(void *)(v46 - 8) + 8))(v34);
LABEL_13:
        uint64_t v47 = v87;
        static Date.now.getter();
        uint64_t v48 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 0, 1, v48);
        uint64_t v49 = (uint64_t)v47;
        uint64_t v50 = v88;
        sub_10009360C(v49, v88);
        uint64_t v51 = v32 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
        swift_beginAccess();
        sub_1000931A0(v50, v51);
        swift_endAccess();
        goto LABEL_14;
      }
      ((void (*)(char *, uint64_t))v81)(v34, v19);
      uint64_t v44 = &v34[*(int *)(sub_10000AA4C(&qword_1001806F0) + 48)];
      uint64_t v45 = sub_10000AA4C((uint64_t *)&unk_1001827B0);
      (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8))(v44, v45);
      uint64_t v36 = type metadata accessor for SFAirDrop.ContactInfo();
    }
    uint64_t v46 = v36;
    goto LABEL_12;
  }
  if (v28 != enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    unint64_t v37 = v26;
    if (v28 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
    {
      (*((void (**)(char *, uint64_t))v20 + 12))(v26, v19);
      uint64_t v41 = sub_10000AA4C(&qword_1001814F0);
      swift_bridgeObjectRelease();
      unint64_t v42 = &v26[*(int *)(v41 + 64)];
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(aBlock[0]) = 1;
      swift_retain();
      static Published.subscript.setter();
      uint64_t v43 = sub_10000AA4C(&qword_100181490);
      (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
    }
    else
    {
      if (v28 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
      {
        (*((void (**)(char *, uint64_t))v20 + 12))(v26, v19);
        sub_10000AA4C((uint64_t *)&unk_100182790);
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      if (v28 != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)) {
        return (*((uint64_t (**)(char *, uint64_t))v20 + 1))(v26, v19);
      }
      (*((void (**)(char *, uint64_t))v20 + 12))(v26, v19);
      uint64_t v61 = sub_10000AA4C(&qword_1001806D8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v92 = &v26[*(int *)(v61 + 80)];
      uint64_t v62 = v87;
      static Date.now.getter();
      uint64_t v63 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
      uint64_t v64 = (uint64_t)v62;
      uint64_t v65 = v88;
      sub_10009360C(v64, v88);
      uint64_t v66 = v1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess();
      sub_1000931A0(v65, v66);
      swift_endAccess();
      sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
      uint64_t v67 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v68 = v77;
      static DispatchTime.now()();
      uint64_t v69 = v78;
      + infix(_:_:)();
      uint64_t v90 = *(char **)(v79 + 8);
      ((void (*)(char *, uint64_t))v90)(v68, v91);
      uint64_t v70 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = sub_100093820;
      aBlock[5] = v70;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100119678;
      aBlock[3] = &unk_10016B9B8;
      uint64_t v71 = _Block_copy(aBlock);
      swift_release();
      uint64_t v72 = (char *)v80;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = &_swiftEmptyArrayStorage;
      sub_1000935C4(&qword_100183630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000AA4C((uint64_t *)&unk_100183D70);
      sub_10000F288(&qword_100183638, (uint64_t *)&unk_100183D70);
      double v73 = v82;
      uint64_t v74 = v85;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v71);

      (*(void (**)(char *, uint64_t))(v84 + 8))(v73, v74);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v72, v83);
      ((void (*)(char *, uint64_t))v90)(v69, v91);
      uint64_t v75 = sub_10000AA4C(&qword_100181490);
      (*(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 8))(v92, v75);
    }
LABEL_21:
    uint64_t v58 = type metadata accessor for SFAirDropReceive.ItemDestination();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v37, v58);
  }
  unint64_t v37 = v26;
  (*((void (**)(char *, uint64_t))v20 + 12))(v26, v19);
  uint64_t v38 = sub_10000AA4C(&qword_1001814D0);
  swift_bridgeObjectRelease();
  os_log_type_t v39 = &v26[*(int *)(v38 + 80)];
  uint64_t v40 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
LABEL_24:
  uint64_t v60 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v37, v60);
  return sub_10008A428(a1);
}

uint64_t sub_100089EDC()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    if (qword_10017F610 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v23)
    {
      uint64_t v6 = (uint64_t *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      uint64_t v8 = *(void **)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9._countAndFlagsBits = v7;
      v9._object = v8;
      Swift::Bool v10 = String.hasPrefix(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
        {
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        }
        (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
        uint64_t v11 = sub_10000AA4C(&qword_1001806D8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = &v3[*(int *)(v11 + 80)];
        uint64_t v13 = sub_10000AA4C(&qword_100181490);
        (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
        uint64_t v14 = type metadata accessor for SFAirDropReceive.ItemDestination();
        (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v3, v14);
        if (qword_10017F770 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        sub_10000B150(v15, (uint64_t)qword_100182DA0);
        swift_retain();
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          Swift::String v18 = (uint8_t *)swift_slowAlloc();
          uint64_t v23 = swift_slowAlloc();
          *(_DWORD *)Swift::String v18 = 136315138;
          uint64_t v19 = *v6;
          unint64_t v20 = v6[1];
          swift_bridgeObjectRetain();
          v22[1] = sub_100047F98(v19, v20, &v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Dismissing waitingForOpenResponse banner for transfer %s", v18, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        sub_100033320();
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v21 = v23;
        swift_release();
        if (!v21)
        {
          if (qword_10017F7E8 != -1) {
            swift_once();
          }
          swift_retain();
          sub_10010DFFC();
          swift_release();
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10008A428(uint64_t a1)
{
  return sub_10008B074(a1, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&unk_10016B978, (uint64_t)sub_100093760, (uint64_t)&unk_10016B990);
}

uint64_t sub_10008A464(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v32 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000AA4C(&qword_1001835E8);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  Swift::Bool v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000AA4C(&qword_100181400);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v36 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v12);
  int v35 = &v30[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v39 = &v30[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = &v30[-v19];
  __chkstk_darwin(v18);
  uint64_t v22 = &v30[-v21];
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v38 = v2;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v37 = a1;
  uint64_t v33 = v23;
  v23(v20, a1, v4);
  os_log_type_t v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56);
  v34(v20, 0, 1, v4);
  uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_10000F330((uint64_t)v22, (uint64_t)v10, &qword_100181400);
  sub_10000F330((uint64_t)v20, v24, &qword_100181400);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v25((uint64_t)v10, 1, v4) == 1)
  {
    sub_10000F394((uint64_t)v20, &qword_100181400);
    sub_10000F394((uint64_t)v22, &qword_100181400);
    if (v25(v24, 1, v4) == 1) {
      return sub_10000F394((uint64_t)v10, &qword_100181400);
    }
  }
  else
  {
    sub_10000F330((uint64_t)v10, (uint64_t)v39, &qword_100181400);
    if (v25(v24, 1, v4) != 1)
    {
      unint64_t v26 = v32;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v32, v24, v4);
      sub_1000935C4(&qword_100183610, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State);
      int v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      sub_10000F394((uint64_t)v20, &qword_100181400);
      sub_10000F394((uint64_t)v22, &qword_100181400);
      v27(v39, v4);
      uint64_t result = sub_10000F394((uint64_t)v10, &qword_100181400);
      if (v31) {
        return result;
      }
      goto LABEL_8;
    }
    sub_10000F394((uint64_t)v20, &qword_100181400);
    sub_10000F394((uint64_t)v22, &qword_100181400);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v39, v4);
  }
  sub_10000F394((uint64_t)v10, &qword_1001835E8);
LABEL_8:
  uint64_t v29 = v37;
  sub_10008A988(v37);
  Swift::Bool v10 = v35;
  v33(v35, v29, v4);
  v34(v10, 0, 1, v4);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v10, (uint64_t)v36, &qword_100181400);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000F394((uint64_t)v10, &qword_100181400);
}

uint64_t sub_10008A988(uint64_t a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100181690);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v53 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v45 - v6;
  uint64_t v7 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v7 - 8);
  uint64_t v55 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18((char *)&v45 - v16, a1, v9);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  int v20 = v19(v17, v9);
  if (v20 != enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    if (v20 != enum case for SFAirDropSend.Transfer.State.transferring(_:)) {
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    }
    int v47 = enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 96);
    uint64_t v49 = v10 + 96;
    uint64_t v50 = v15;
    uint64_t v48 = v23;
    v23(v17, v9);
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_10000AA4C(&qword_1001805A8);
    swift_bridgeObjectRelease();
    uint64_t v51 = v1;
    sub_10008B038(a1);
    if (*(unsigned char *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled)) {
      goto LABEL_17;
    }
    uint64_t v46 = v24;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v25 = (uint64_t)v55;
    static Published.subscript.getter();
    uint64_t v26 = v25;
    swift_release();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v25, 1, v9) == 1)
    {
      sub_10000F394(v25, &qword_100181400);
LABEL_16:
      uint64_t v24 = v46;
LABEL_17:
      uint64_t v21 = &v17[*(int *)(v24 + 48)];
      uint64_t v43 = &v17[*(int *)(v24 + 80)];
      uint64_t v44 = type metadata accessor for SFAirDrop.DeclineAction();
      (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
      uint64_t v22 = type metadata accessor for SFAirDrop.Progress();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    }
    int v28 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v50, v26, v9);
    uint64_t v29 = v54;
    v18(v54, (uint64_t)v28, v9);
    int v30 = v19(v29, v9);
    if (v30 == enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:))
    {
      v48(v29, v9);
      swift_bridgeObjectRelease();
      int v31 = &v29[*(int *)(sub_10000AA4C(&qword_100181940) + 64)];
      uint64_t v32 = type metadata accessor for SFAirDrop.DeclineAction();
      uint64_t v33 = v31;
      int v28 = v50;
      (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v33, v32);
      uint64_t v34 = v51;
    }
    else
    {
      uint64_t v34 = v51;
      if (v30 == v47)
      {
        v48(v29, v9);
        swift_bridgeObjectRelease();
        int v35 = &v29[*(int *)(sub_10000AA4C(&qword_100181938) + 48)];
        uint64_t v36 = sub_10000AA4C((uint64_t *)&unk_1001827C0);
        uint64_t v37 = v35;
        int v28 = v50;
        (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v37, v36);
      }
      else if (v30 != enum case for SFAirDropSend.Transfer.State.created(_:) {
             && v30 != enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:))
      }
      {
        uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
        v38(v28, v9);
        v38(v29, v9);
        goto LABEL_16;
      }
    }
    uint64_t v39 = (uint64_t)v52;
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    uint64_t v40 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
    uint64_t v41 = v53;
    sub_10009360C(v39, v53);
    uint64_t v42 = v34 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
    swift_beginAccess();
    sub_1000931A0(v41, v42);
    swift_endAccess();
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t))(v10 + 96))(v17, v9);
  swift_bridgeObjectRelease();
  uint64_t v21 = &v17[*(int *)(sub_10000AA4C(&qword_100181938) + 48)];
  swift_getKeyPath();
  swift_getKeyPath();
  char v56 = 1;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v22 = sub_10000AA4C((uint64_t *)&unk_1001827C0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
}

uint64_t sub_10008B038(uint64_t a1)
{
  return sub_10008B074(a1, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t)&unk_10016B928, (uint64_t)sub_10009356C, (uint64_t)&unk_10016B940);
}

uint64_t sub_10008B074(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  v23[1] = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v23 - v15;
  sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
  uint64_t v24 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, v16, v13);
  aBlock[4] = v25;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100119678;
  aBlock[3] = v26;
  int v20 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000935C4(&qword_100183630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000AA4C((uint64_t *)&unk_100183D70);
  sub_10000F288(&qword_100183638, (uint64_t *)&unk_100183D70);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v21 = (void *)v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v28);
}

uint64_t sub_10008B434(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = a3();
    id v8 = [self progressWithTotalUnitCount:v7];
    [v8 setCompletedUnitCount:a4()];
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10008B518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = a4;
  uint64_t v8 = sub_10000AA4C(&qword_100181400);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v79 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v78 = (char *)&v64 - v11;
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v76 = *(void *)(v12 - 8);
  uint64_t v77 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v74 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  double v73 = (char *)&v64 - v15;
  uint64_t v16 = sub_10000AA4C(&qword_100181690);
  __chkstk_darwin(v16 - 8);
  uint64_t v72 = (uint64_t)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v70 = *(void *)(v18 - 8);
  uint64_t v71 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v69 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v68 = (char *)&v64 - v21;
  uint64_t v67 = type metadata accessor for DeviceLockState();
  uint64_t v66 = *(void *)(v67 - 8);
  uint64_t v22 = __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v64 - v24;
  uint64_t v26 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  int v31 = (char *)&v64 - v30;
  uint64_t v32 = (void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  *uint64_t v32 = a2;
  v32[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  uint64_t v34 = (void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  *uint64_t v34 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v34[1] = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  uint64_t v36 = (void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  void *v36 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v36[1] = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = *(unsigned char *)(a1
                                                                                          + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v37 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v80) = v37;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v38 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v38;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v39 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v39;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v41 = v80;
  uint64_t v40 = v81;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v41;
  uint64_t v81 = v40;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v42 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v42;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v31, (uint64_t)v29, (uint64_t *)&unk_1001827D0);
  swift_retain();
  static Published.subscript.setter();
  sub_10000F394((uint64_t)v31, (uint64_t *)&unk_1001827D0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v43 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v43;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v44 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v44;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v44) = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v80) = v44;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v44) = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v80) = v44;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v44) = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v80) = v44;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v45 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v45;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v46 = v80;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v80 = v46;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v47 = v66;
  uint64_t v48 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v65, v25, v67);
  swift_retain();
  static Published.subscript.setter();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v48);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v49 = v68;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v50 = v70;
  uint64_t v51 = v49;
  uint64_t v52 = v49;
  uint64_t v53 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v69, v51, v71);
  swift_retain();
  static Published.subscript.setter();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v53);
  *(void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = *(void *)(a1
                                                                                           + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = *(void *)(a1
                                                                                                 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess();
  uint64_t v55 = v72;
  sub_10000F330(v54, v72, &qword_100181690);
  uint64_t v56 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess();
  sub_1000931A0(v55, v56);
  swift_endAccess();
  uint64_t v57 = a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess();
  sub_10000F330(v57, v55, &qword_100181690);
  uint64_t v58 = v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess();
  sub_1000931A0(v55, v58);
  swift_endAccess();
  *(void *)(v4 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v75;
  swift_retain();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v59 = v73;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v61 = v76;
  uint64_t v60 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v59, v77);
  swift_retain();
  static Published.subscript.setter();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v62 = (uint64_t)v78;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330(v62, v79, &qword_100181400);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000F394(v62, &qword_100181400);
}

void sub_10008C438(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v76 = a7;
  uint64_t v77 = a8;
  unint64_t v78 = a6;
  uint64_t v80 = a5;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  int v73 = a2;
  uint64_t v11 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v72 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v71 - v18;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_1000935C4(&qword_100181650, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
  uint64_t v81 = a1;
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v79 = v13;
  v21(v19, v13);
  if ((v20 & 1) == 0)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v23 = v79;
    v22(v19, v81, v79);
    swift_getKeyPath();
    swift_getKeyPath();
    v22(v17, (uint64_t)v19, v23);
    swift_retain();
    static Published.subscript.setter();
    v21(v19, v23);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v24 = v73 & 1;
  if (v82 != (v73 & 1))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v82) = v24;
    swift_retain();
    static Published.subscript.setter();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v25 = (uint64_t)v82;
  uint64_t v27 = v74;
  uint64_t v26 = v75;
  uint64_t v29 = v77;
  unint64_t v28 = v78;
  uint64_t v30 = v76;
  if (v82 != (void *)v74)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v82 = (void *)v27;
    swift_retain();
    static Published.subscript.setter();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v82 == (void *)v26)
  {
    if (v25 == v27)
    {
      if (!v28) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v82 = (void *)v26;
    swift_retain();
    static Published.subscript.setter();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v31 = v82;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  [v31 setCompletedUnitCount:v82];

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v32 = v82;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  [v32 setTotalUnitCount:v82];

  if (!v28) {
    goto LABEL_21;
  }
LABEL_13:
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain_n();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v83)
  {
    if (v82 == (void *)v80 && v83 == v28)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v82 = (void *)v80;
  unint64_t v83 = v28;
  swift_retain();
  static Published.subscript.setter();
LABEL_21:
  uint64_t v34 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions;
  if (!v30)
  {
    char v37 = &_swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  unint64_t v35 = *(void *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v36 = sub_10000FEA8(v35, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v37 = (void *)v30;
  if ((v36 & 1) == 0)
  {
LABEL_25:
    *(void *)(v9 + v34) = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs;
  if (v29)
  {
    uint64_t v39 = *(void *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v40 = sub_100010194(v39, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = (void *)v29;
    if (v40) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v41 = &_swiftEmptyArrayStorage;
  }
  *(void *)(v9 + v38) = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_31:
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  uint64_t v42 = (void *)static NSUserDefaults.airdrop.getter();
  char v43 = SFAirDropUserDefaults.moveToAppEnabled.getter();

  if (SFAirDropReceive.Transfer.State.sfTransferState.getter() == 7
    && (v43 & 1) == 0
    && (*(unsigned char *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) == 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v45 = (void *)Strong;
      if (qword_10017F608 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_10000B150(v46, (uint64_t)qword_100181180);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Received request from AirDropTransfer session to show a user notification for completed URLs", v49, 2u);
        swift_slowDealloc();
      }

      sub_100045480(v9);
    }
  }
  sub_100088E04();
  uint64_t v50 = *(void *)(v9 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
  if (v50)
  {
    sub_1000935C4(&qword_100181658, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    swift_retain();
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v53 = v52;
    if (qword_10017F770 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_10000B150(v54, (uint64_t)qword_100182DA0);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    int v57 = v56;
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      uint64_t v82 = (void *)v81;
      *(_DWORD *)uint64_t v58 = 136315906;
      LODWORD(v79) = v57;
      uint64_t v59 = Activity.id.getter();
      id v84 = (id)sub_100047F98(v59, v60, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2048;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      id v61 = v84;
      [v84 fractionCompleted];
      uint64_t v63 = v62;

      id v84 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      *(_WORD *)(v58 + 22) = 2080;
      swift_bridgeObjectRetain();
      id v84 = (id)sub_100047F98(v51, v53, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v58 + 32) = 2080;
      if (v28) {
        uint64_t v64 = v80;
      }
      else {
        uint64_t v64 = 0x3E656E6F6E3CLL;
      }
      if (v28) {
        unint64_t v65 = v28;
      }
      else {
        unint64_t v65 = 0xE600000000000000;
      }
      swift_bridgeObjectRetain();
      id v84 = (id)sub_100047F98(v64, v65, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v79, "Updating ActivityKit activity %s with progress: %f, transferState: %s, description: %s", (uint8_t *)v58, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v66 = (uint64_t)v82;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v67 = (uint64_t)v82;
    uint64_t v68 = type metadata accessor for TaskPriority();
    uint64_t v69 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v72, 1, 1, v68);
    uint64_t v70 = (void *)swift_allocObject();
    void v70[2] = v50;
    v70[3] = v66;
    v70[4] = v67;
    swift_retain();
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    swift_release();
    swift_release();
    sub_10000F394(v69, &qword_1001829C0);
  }
}

uint64_t sub_10008D1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a3;
  v4[3] = a4;
  uint64_t v7 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of Activity.update(using:)
                                        + async function pointer to dispatch thunk of Activity.update(using:));
  uint64_t v5 = (void *)swift_task_alloc();
  v4[4] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10008D274;
  return v7(v4 + 2);
}

uint64_t sub_10008D274()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008D368()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000AA4C(&qword_1001835C0);
  uint64_t result = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity))
  {
    uint64_t v23 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
    uint64_t v10 = qword_10017F770;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B150(v11, (uint64_t)qword_100182DA0);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v22 = v0;
      uint64_t v15 = (uint8_t *)v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v20 = v3;
      uint64_t v25 = v16;
      uint64_t v21 = v2;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = Activity.id.getter();
      uint64_t v24 = sub_100047F98(v17, v18, &v25);
      uint64_t v2 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ending activity %s", v15, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = v20;
      swift_slowDealloc();
      uint64_t v1 = v22;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v19 = sub_10000AA4C(&qword_1001835C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
    static ActivityUIDismissalPolicy.immediate.getter();
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10000F394((uint64_t)v9, &qword_1001835C0);
    *(void *)(v1 + v23) = 0;
    return swift_release();
  }
  return result;
}

void sub_10008D6A8()
{
  uint64_t v0 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v0 - 8);
  char v33 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100181490);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v34 + 64);
  __chkstk_darwin(v9);
  uint64_t v32 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v35 = (char *)&v30 - v12;
  if (qword_10017F770 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B150(v13, (uint64_t)qword_100182DA0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    int v31 = v4;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Requested 'showInterventionMoreInfo' on AirDropTransferSession", v16, 2u);
    uint64_t v4 = v31;
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  SFAirDropReceive.Transfer.State.permissionRequest.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v4, 1, v9) == 1)
  {
    sub_10000F394((uint64_t)v4, (uint64_t *)&unk_1001827D0);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid transfer state for 'showInterventionMoreInfo'", v20, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v22 = v35;
    v21(v35, v4, v9);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v24 = (void *)Strong;
      int v31 = *(char **)(Strong + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_airdropClient);
      uint64_t v25 = type metadata accessor for TaskPriority();
      uint64_t v26 = (uint64_t)v33;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v33, 1, 1, v25);
      uint64_t v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v32, v35, v9);
      unint64_t v28 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      uint64_t v29 = swift_allocObject();
      v21((char *)(v29 + v28), v27, v9);
      *(void *)(v29 + ((v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8)) = v31;
      uint64_t v22 = v35;
      swift_retain();
      static Task<>.noThrow(priority:operation:)();
      swift_release();
      swift_release();
      sub_10000F394(v26, &qword_1001829C0);
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v9);
  }
}

uint64_t sub_10008DC1C(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v34 = (char *)&v30 - v5;
  uint64_t v6 = sub_10000AA4C(&qword_100181400);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  char v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = type metadata accessor for SFAirDropSend.Transfer.State();
  os_log_type_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  char v33 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)&v30 - v18;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v38 = v1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  if (v20(v13, 1, v14) == 1)
  {
    uint64_t v11 = v13;
  }
  else
  {
    uint64_t v32 = v2;
    int v31 = (void (*)(char *, char *, uint64_t))v15[4];
    v31(v19, v13, v14);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v20(v11, 1, v14) != 1)
    {
      uint64_t v27 = v33;
      v31(v33, v11, v14);
      char v25 = SFAirDropSend.Transfer.State.sameCase(as:)();
      unint64_t v28 = (void (*)(char *, uint64_t))v15[1];
      v28(v27, v14);
      v28(v19, v14);
      return v25 & 1;
    }
    ((void (*)(char *, uint64_t))v15[1])(v19, v14);
    uint64_t v2 = v32;
  }
  sub_10000F394((uint64_t)v11, &qword_100181400);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v21 = (uint64_t)v37;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unsigned int v22 = v20((char *)v21, 1, v14);
  sub_10000F394(v21, &qword_100181400);
  if (v22 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v23 = v34;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v24 = v35;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    char v25 = SFAirDropReceive.Transfer.State.sameCase(as:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8);
    v26(v24, v2);
    v26(v23, v2);
  }
  else
  {
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_10008E11C(uint64_t a1)
{
  uint64_t v161 = type metadata accessor for Date();
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  unint64_t v158 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000AA4C(&qword_1001835D8);
  uint64_t v4 = __chkstk_darwin(v155);
  uint64_t v159 = (uint64_t)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v154 = (uint64_t)&v151 - v6;
  uint64_t v7 = sub_10000AA4C(&qword_100181690);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v157 = (uint64_t)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v156 = (uint64_t)&v151 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v153 = (uint64_t)&v151 - v13;
  __chkstk_darwin(v12);
  uint64_t v152 = (uint64_t)&v151 - v14;
  uint64_t v169 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v15 = __chkstk_darwin(v169);
  uint64_t v167 = (char *)&v151 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v166 = (char *)&v151 - v17;
  uint64_t v165 = type metadata accessor for DeviceLockState();
  uint64_t v164 = *(void *)(v165 - 8);
  uint64_t v18 = __chkstk_darwin(v165);
  uint64_t v163 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v162 = (char *)&v151 - v20;
  uint64_t v174 = sub_10000AA4C(&qword_100181490);
  uint64_t v173 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v170 = (char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10000AA4C(&qword_1001835E0);
  __chkstk_darwin(v172);
  uint64_t v177 = (uint64_t)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v171 = (uint64_t)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v175 = (uint64_t)&v151 - v27;
  __chkstk_darwin(v26);
  uint64_t v176 = (uint64_t)&v151 - v28;
  uint64_t v183 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v181 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v178 = (char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_10000AA4C(&qword_1001835E8);
  __chkstk_darwin(v180);
  uint64_t v182 = (uint64_t)&v151 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000AA4C(&qword_100181400);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v179 = (uint64_t)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v184 = (uint64_t)&v151 - v35;
  __chkstk_darwin(v34);
  uint64_t v185 = (uint64_t)&v151 - v36;
  uint64_t v37 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v151 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  char v43 = (char *)&v151 - v42;
  uint64_t v44 = v1;
  uint64_t v45 = a1;
  uint64_t v47 = *(void *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  uint64_t v46 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48._countAndFlagsBits = v47;
  v48._object = v46;
  LOBYTE(v47) = String.hasPrefix(_:)(v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0) {
    goto LABEL_10;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v49 = static SFAirDropReceive.Transfer.State.== infix(_:_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v38 + 8);
  v50(v41, v37);
  v50(v43, v37);
  if ((v49 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v51 = v45;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v52 = v185;
  uint64_t v151 = v44;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v53 = v184;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v54 = v182;
  uint64_t v55 = v182 + *(int *)(v180 + 48);
  sub_10000F330(v52, v182, &qword_100181400);
  sub_10000F330(v53, v55, &qword_100181400);
  uint64_t v56 = v181;
  int v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  uint64_t v58 = v183;
  if (v57(v54, 1, v183) == 1)
  {
    sub_10000F394(v53, &qword_100181400);
    sub_10000F394(v52, &qword_100181400);
    if (v57(v55, 1, v58) == 1)
    {
      sub_10000F394(v54, &qword_100181400);
      goto LABEL_13;
    }
LABEL_8:
    unint64_t v60 = &qword_1001835E8;
    uint64_t v61 = v54;
    goto LABEL_9;
  }
  uint64_t v59 = v179;
  sub_10000F330(v54, v179, &qword_100181400);
  if (v57(v55, 1, v58) == 1)
  {
    sub_10000F394(v184, &qword_100181400);
    sub_10000F394(v185, &qword_100181400);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v59, v58);
    goto LABEL_8;
  }
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
  uint64_t v180 = v51;
  unint64_t v65 = v178;
  v64(v178, v55, v58);
  sub_1000935C4(&qword_100183610, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Transfer.State);
  char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v67 = *(void (**)(char *, uint64_t))(v56 + 8);
  v67(v65, v58);
  sub_10000F394(v184, &qword_100181400);
  sub_10000F394(v185, &qword_100181400);
  uint64_t v51 = v180;
  v67((char *)v59, v58);
  sub_10000F394(v54, &qword_100181400);
  if ((v66 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v68 = *(void *)(v151 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  uint64_t v69 = *(void *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  if (v68)
  {
    if (!v69) {
      goto LABEL_10;
    }
    if (*(void *)(v151 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName) != *(void *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName)
      || v68 != v69)
    {
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v62 = 0;
      if ((v70 & 1) == 0) {
        return v62 & 1;
      }
    }
  }
  else if (v69)
  {
    goto LABEL_10;
  }
  uint64_t v71 = *(void *)(v151 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  uint64_t v72 = *(void *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  if (!v71)
  {
    if (v72) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
  if (!v72) {
    goto LABEL_10;
  }
  if (*(void *)(v151 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName) == *(void *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName)
    && v71 == v72
    || (v73 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v62 = 0, (v73 & 1) != 0))
  {
LABEL_27:
    if (*(unsigned __int8 *)(v151 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe)) {
      goto LABEL_10;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v74 = v186;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v74 != v186) {
      goto LABEL_10;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v75 = v186;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v75 != v186) {
      goto LABEL_10;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v76 = v186;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v76 != v186) {
      goto LABEL_10;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v78 = v186;
    uint64_t v77 = v187;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v77)
    {
      if (v187)
      {
        if (v78 == v186 && v77 == v187)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v62 = 0;
          if ((v79 & 1) == 0) {
            return v62 & 1;
          }
        }
LABEL_39:
        sub_10001FB40(0, &qword_1001835F0);
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v80 = v51;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v81 = v186;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v82 = v186;
        char v83 = static NSObject.== infix(_:_:)();

        if ((v83 & 1) == 0) {
          goto LABEL_10;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v84 = v176;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v85 = v175;
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v86 = v177;
        uint64_t v87 = v177 + *(int *)(v172 + 48);
        sub_10000F330(v84, v177, (uint64_t *)&unk_1001827D0);
        sub_10000F330(v85, v87, (uint64_t *)&unk_1001827D0);
        uint64_t v88 = v173;
        long long v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
        uint64_t v90 = v86;
        uint64_t v91 = v174;
        if (v89(v90, 1, v174) == 1)
        {
          uint64_t v92 = v151;
          sub_10000F394(v175, (uint64_t *)&unk_1001827D0);
          sub_10000F394(v176, (uint64_t *)&unk_1001827D0);
          if (v89(v87, 1, v91) == 1)
          {
            sub_10000F394(v177, (uint64_t *)&unk_1001827D0);
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v92 = v151;
          uint64_t v93 = v171;
          sub_10000F330(v177, v171, (uint64_t *)&unk_1001827D0);
          if (v89(v87, 1, v91) != 1)
          {
            uint64_t v94 = v170;
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v170, v87, v91);
            sub_10000F288(&qword_100183608, &qword_100181490);
            char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v96 = *(void (**)(char *, uint64_t))(v88 + 8);
            v96(v94, v91);
            sub_10000F394(v175, (uint64_t *)&unk_1001827D0);
            sub_10000F394(v176, (uint64_t *)&unk_1001827D0);
            v96((char *)v93, v91);
            sub_10000F394(v177, (uint64_t *)&unk_1001827D0);
            if ((v95 & 1) == 0) {
              goto LABEL_10;
            }
LABEL_47:
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v97 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v98 = v186;
            if (v97)
            {
              if (!v186) {
                goto LABEL_70;
              }
              sub_10001FB40(0, &qword_100183600);
              id v99 = v97;
              char v100 = static NSObject.== infix(_:_:)();

              if ((v100 & 1) == 0) {
                goto LABEL_10;
              }
            }
            else if (v186)
            {
              goto LABEL_57;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v97 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v98 = v186;
            if (v97)
            {
              if (!v186) {
                goto LABEL_70;
              }
              sub_10001FB40(0, &qword_100183600);
              id v101 = v97;
              char v102 = static NSObject.== infix(_:_:)();

              if ((v102 & 1) == 0) {
                goto LABEL_10;
              }
            }
            else if (v186)
            {
              goto LABEL_57;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            int v103 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if (v103 != v186) {
              goto LABEL_10;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            int v104 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if (v104 != v186) {
              goto LABEL_10;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            int v105 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if (v105 != v186) {
              goto LABEL_10;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v97 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v98 = v186;
            if (v97)
            {
              if (!v186) {
                goto LABEL_70;
              }
              sub_10001FB40(0, &qword_100183600);
              id v106 = v97;
              char v107 = static NSObject.== infix(_:_:)();

              if ((v107 & 1) == 0) {
                goto LABEL_10;
              }
            }
            else if (v186)
            {
              goto LABEL_57;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v97 = v186;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v98 = v186;
            if (v97)
            {
              if (v186)
              {
                sub_10001FB40(0, &qword_100183600);
                id v108 = v97;
                char v109 = static NSObject.== infix(_:_:)();

                if ((v109 & 1) == 0) {
                  goto LABEL_10;
                }
                goto LABEL_72;
              }
LABEL_70:

              goto LABEL_10;
            }
            if (!v186)
            {
LABEL_72:
              swift_getKeyPath();
              swift_getKeyPath();
              id v110 = v162;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              swift_getKeyPath();
              swift_getKeyPath();
              uint64_t v111 = v163;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              char v112 = static DeviceLockState.== infix(_:_:)();
              id v113 = *(void (**)(char *, uint64_t))(v164 + 8);
              uint64_t v114 = v111;
              uint64_t v115 = v165;
              v113(v114, v165);
              v113(v110, v115);
              if ((v112 & 1) == 0) {
                goto LABEL_10;
              }
              swift_getKeyPath();
              swift_getKeyPath();
              uint64_t v116 = v166;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              swift_getKeyPath();
              swift_getKeyPath();
              uint64_t v117 = v167;
              static Published.subscript.getter();
              swift_release();
              swift_release();
              char v118 = static SFAirDrop.DisplayPriority.== infix(_:_:)();
              uint64_t v119 = *(void (**)(char *, uint64_t))(v168 + 8);
              os_log_type_t v120 = v117;
              uint64_t v121 = v169;
              v119(v120, v169);
              v119(v116, v121);
              if ((v118 & 1) == 0) {
                goto LABEL_10;
              }
              unint64_t v122 = *(void *)(v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
              uint64_t v123 = *(void *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unsigned __int8 v124 = sub_10000FEA8(v122, v123);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v124 & 1) == 0) {
                goto LABEL_10;
              }
              uint64_t v125 = *(void *)(v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
              uint64_t v126 = *(void *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v127 = sub_100010194(v125, v126);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v127 & 1) == 0) {
                goto LABEL_10;
              }
              uint64_t v128 = v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
              swift_beginAccess();
              uint64_t v129 = v152;
              sub_10000F330(v128, v152, &qword_100181690);
              uint64_t v130 = v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
              swift_beginAccess();
              uint64_t v131 = v154;
              uint64_t v132 = v154 + *(int *)(v155 + 48);
              sub_10000F330(v129, v154, &qword_100181690);
              sub_10000F330(v130, v132, &qword_100181690);
              uint64_t v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
              if (v133(v131, 1, v161) == 1)
              {
                sub_10000F394(v152, &qword_100181690);
                if (v133(v132, 1, v161) == 1)
                {
                  sub_10000F394(v154, &qword_100181690);
LABEL_83:
                  uint64_t v140 = v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
                  swift_beginAccess();
                  uint64_t v141 = v156;
                  sub_10000F330(v140, v156, &qword_100181690);
                  uint64_t v142 = v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
                  swift_beginAccess();
                  uint64_t v143 = v159;
                  uint64_t v144 = v159 + *(int *)(v155 + 48);
                  sub_10000F330(v141, v159, &qword_100181690);
                  sub_10000F330(v142, v144, &qword_100181690);
                  if (v133(v143, 1, v161) == 1)
                  {
                    sub_10000F394(v156, &qword_100181690);
                    if (v133(v144, 1, v161) == 1)
                    {
                      sub_10000F394(v159, &qword_100181690);
LABEL_90:
                      char v62 = *(unsigned char *)(v92 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) ^ *(unsigned char *)(v80 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) ^ 1;
                      return v62 & 1;
                    }
                  }
                  else
                  {
                    sub_10000F330(v159, v157, &qword_100181690);
                    if (v133(v144, 1, v161) != 1)
                    {
                      uint64_t v145 = v160;
                      uint64_t v146 = v158;
                      uint64_t v147 = v161;
                      (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v158, v144, v161);
                      sub_1000935C4(&qword_1001835F8, (void (*)(uint64_t))&type metadata accessor for Date);
                      uint64_t v148 = v157;
                      char v149 = dispatch thunk of static Equatable.== infix(_:_:)();
                      int v150 = *(void (**)(char *, uint64_t))(v145 + 8);
                      v150(v146, v147);
                      sub_10000F394(v156, &qword_100181690);
                      v150((char *)v148, v147);
                      sub_10000F394(v159, &qword_100181690);
                      if (v149) {
                        goto LABEL_90;
                      }
                      goto LABEL_10;
                    }
                    sub_10000F394(v156, &qword_100181690);
                    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v157, v161);
                  }
                  unint64_t v60 = &qword_1001835D8;
                  uint64_t v61 = v159;
                  goto LABEL_9;
                }
              }
              else
              {
                sub_10000F330(v154, v153, &qword_100181690);
                if (v133(v132, 1, v161) != 1)
                {
                  uint64_t v134 = v160;
                  uint64_t v135 = v158;
                  uint64_t v136 = v161;
                  (*(void (**)(char *, uint64_t, uint64_t))(v160 + 32))(v158, v132, v161);
                  sub_1000935C4(&qword_1001835F8, (void (*)(uint64_t))&type metadata accessor for Date);
                  uint64_t v137 = v153;
                  char v138 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v139 = *(void (**)(char *, uint64_t))(v134 + 8);
                  v139(v135, v136);
                  sub_10000F394(v152, &qword_100181690);
                  v139((char *)v137, v136);
                  sub_10000F394(v154, &qword_100181690);
                  if ((v138 & 1) == 0) {
                    goto LABEL_10;
                  }
                  goto LABEL_83;
                }
                sub_10000F394(v152, &qword_100181690);
                (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v153, v161);
              }
              unint64_t v60 = &qword_1001835D8;
              uint64_t v61 = v154;
LABEL_9:
              sub_10000F394(v61, v60);
LABEL_10:
              char v62 = 0;
              return v62 & 1;
            }
LABEL_57:

            goto LABEL_10;
          }
          sub_10000F394(v175, (uint64_t *)&unk_1001827D0);
          sub_10000F394(v176, (uint64_t *)&unk_1001827D0);
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v93, v91);
        }
        unint64_t v60 = &qword_1001835E0;
        uint64_t v61 = v177;
        goto LABEL_9;
      }
    }
    else if (!v187)
    {
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  return v62 & 1;
}

void sub_100090020()
{
  if (!qword_100182E90)
  {
    sub_10001FB40(255, &qword_100182E98);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100182E90);
    }
  }
}

void sub_100090088(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes()
{
  return &type metadata for AirDropActivityAttributes;
}

unint64_t sub_100090100()
{
  unint64_t result = qword_100183548;
  if (!qword_100183548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183548);
  }
  return result;
}

unint64_t sub_100090158()
{
  unint64_t result = qword_100183550;
  if (!qword_100183550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183550);
  }
  return result;
}

unint64_t sub_1000901B0()
{
  unint64_t result = qword_100183558;
  if (!qword_100183558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183558);
  }
  return result;
}

unint64_t sub_100090208()
{
  unint64_t result = qword_100183560;
  if (!qword_100183560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183560);
  }
  return result;
}

unint64_t sub_100090260()
{
  unint64_t result = qword_100183568;
  if (!qword_100183568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183568);
  }
  return result;
}

unint64_t sub_1000902B8()
{
  unint64_t result = qword_100183570;
  if (!qword_100183570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183570);
  }
  return result;
}

uint64_t sub_10009030C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AirDropTransferSession();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unint64_t sub_10009034C()
{
  return sub_100086058();
}

uint64_t sub_100090370(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  BOOL v4 = *v3 == *(void *)(*a2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier)
    && v3[1] == *(void *)(v2 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return sub_10008E11C(v2) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000903D8@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_1000903EC()
{
  return sub_1000904A4();
}

uint64_t sub_100090400@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100090414@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100090490()
{
  return sub_1000904A4();
}

uint64_t sub_1000904A4()
{
  return static Published.subscript.setter();
}

uint64_t sub_100090514@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100090528()
{
  return sub_100074748();
}

uint64_t sub_10009053C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000905BC(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

double sub_100090634@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000906B4()
{
  return static Published.subscript.setter();
}

uint64_t sub_100090738()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000907B4(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  __chkstk_darwin(v2 - 8);
  BOOL v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_10000F330(a1, (uint64_t)&v9 - v6, (uint64_t *)&unk_1001827D0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10000F330((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_1001827D0);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000F394((uint64_t)v7, (uint64_t *)&unk_1001827D0);
}

uint64_t sub_1000908C4@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_1000908D8(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_1000908EC@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100090900(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_100090914@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100090928()
{
  return sub_100074748();
}

uint64_t sub_10009093C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100090950()
{
  return sub_100074748();
}

uint64_t sub_100090964@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100090978(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_10009098C@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_1000909A0(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_1000909B4(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100090A28(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100090A50(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

unint64_t sub_100090AA8()
{
  uint64_t v0 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_1001835C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_100181668);
  unint64_t result = static Activity.activities.getter();
  unint64_t v11 = result;
  if (!(result >> 62))
  {
    uint64_t v12 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v2, 1, 1, v16);
    static Task<>.noThrow(priority:operation:)();
    swift_release();
    return sub_10000F394((uint64_t)v2, &qword_1001829C0);
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v18 = v2;
    uint64_t v13 = 0;
    uint64_t v14 = (void (**)(char *, uint64_t))(v4 + 8);
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v13;
      uint64_t v15 = sub_10000AA4C(&qword_1001835C8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
      static ActivityUIDismissalPolicy.immediate.getter();
      dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
      swift_release();
      (*v14)(v6, v3);
      sub_10000F394((uint64_t)v9, &qword_1001835C0);
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
    id v2 = v18;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100090DB0(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v163 = a4;
  uint64_t v139 = a3;
  uint64_t v137 = a2;
  uint64_t v138 = a1;
  uint64_t v162 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v6 = __chkstk_darwin(v162);
  uint64_t v160 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v159 = (char *)&v125 - v8;
  uint64_t v9 = sub_10000AA4C(&qword_100181690);
  __chkstk_darwin(v9 - 8);
  uint64_t v158 = (uint64_t)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v156 = *(void *)(v157 - 8);
  uint64_t v11 = __chkstk_darwin(v157);
  uint64_t v155 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v154 = (char *)&v125 - v13;
  uint64_t v153 = type metadata accessor for DeviceLockState();
  uint64_t v152 = *(void *)(v153 - 8);
  uint64_t v14 = __chkstk_darwin(v153);
  uint64_t v151 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v149 = (char *)&v125 - v16;
  uint64_t v178 = sub_10000AA4C(&qword_100181C68);
  uint64_t v171 = *(void (**)(uint64_t, uint64_t))(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v164 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_1001835A8);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v169 = v18;
  uint64_t v170 = v19;
  __chkstk_darwin(v18);
  uint64_t v165 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000AA4C((uint64_t *)&unk_1001827D0);
  uint64_t v21 = __chkstk_darwin(v168);
  uint64_t v167 = (uint64_t)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  long long v166 = (char *)&v125 - v23;
  uint64_t v24 = sub_10000AA4C(&qword_1001835B0);
  uint64_t v175 = *(void *)(v24 - 8);
  uint64_t v176 = v24;
  __chkstk_darwin(v24);
  uint64_t v148 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_10000AA4C(&qword_100181400);
  uint64_t v26 = __chkstk_darwin(v174);
  uint64_t v173 = (uint64_t)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v172 = (char *)&v125 - v28;
  uint64_t v29 = sub_10000AA4C(&qword_1001835B8);
  uint64_t v131 = v29;
  uint64_t v132 = *(void *)(v29 - 8);
  uint64_t v30 = v132;
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v125 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000AA4C(&qword_100180E80);
  uint64_t v177 = *(void *)(v33 - 8);
  uint64_t v34 = v177;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v37 = (void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  uint64_t v126 = (void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v38 = (void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  char v127 = (void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  void *v38 = 0;
  v38[1] = 0;
  uint64_t v39 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_cancelAction;
  uint64_t v40 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  uint64_t v128 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__transferAccepted;
  LOBYTE(v181) = 0;
  uint64_t v145 = v36;
  Published.init(initialValue:)();
  uint64_t v146 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
  uint64_t v147 = v34 + 32;
  uint64_t v42 = v33;
  v146(v41, v36, v33);
  uint64_t v43 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  uint64_t v129 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__localizedTransferDescription;
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v133 = sub_10000AA4C(&qword_1001800D0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v43, v32, v29);
  uint64_t v44 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  uint64_t v150 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__sendTransferState;
  uint64_t v45 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v46 = (uint64_t)v172;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v172, 1, 1, v45);
  sub_10000F330(v46, v173, &qword_100181400);
  uint64_t v47 = v148;
  Published.init(initialValue:)();
  sub_10000F394(v46, &qword_100181400);
  (*(void (**)(uint64_t, char *, uint64_t))(v175 + 32))(v44, v47, v176);
  uint64_t v48 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  uint64_t v134 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__permissionRequest;
  uint64_t v49 = sub_10000AA4C(&qword_100181490);
  uint64_t v50 = (uint64_t)v166;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v166, 1, 1, v49);
  sub_10000F330(v50, v167, (uint64_t *)&unk_1001827D0);
  uint64_t v51 = v165;
  Published.init(initialValue:)();
  sub_10000F394(v50, (uint64_t *)&unk_1001827D0);
  (*(void (**)(uint64_t, char *, uint64_t))(v170 + 32))(v48, v51, v169);
  uint64_t v52 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  uint64_t v135 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__previewImage;
  uint64_t v181 = 0;
  uint64_t v53 = sub_10000AA4C((uint64_t *)&unk_100183710);
  uint64_t v54 = v164;
  Published.init(initialValue:)();
  uint64_t v55 = (void (*)(uint64_t, char *, uint64_t))*((void *)v171 + 4);
  uint64_t v56 = v178;
  v55(v52, v54, v178);
  uint64_t v57 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  uint64_t v136 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__fallbackPreviewImage;
  uint64_t v181 = 0;
  Published.init(initialValue:)();
  v55(v57, v54, v56);
  uint64_t v58 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  uint64_t v140 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldShowSensitiveImage;
  LOBYTE(v181) = 0;
  uint64_t v59 = v145;
  Published.init(initialValue:)();
  uint64_t v60 = v42;
  uint64_t v61 = v42;
  char v62 = v146;
  v146(v58, v59, v61);
  uint64_t v63 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  uint64_t v141 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__shouldDisplayPreviewImage;
  LOBYTE(v181) = 1;
  Published.init(initialValue:)();
  uint64_t v64 = v60;
  uint64_t v130 = v60;
  v62(v63, v59, v60);
  uint64_t v65 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  uint64_t v142 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__contactImage;
  uint64_t v181 = 0;
  char v66 = v164;
  uint64_t v165 = (char *)v53;
  Published.init(initialValue:)();
  uint64_t v67 = v178;
  v55(v65, v66, v178);
  uint64_t v68 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  uint64_t v143 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession__airdropIconImage;
  uint64_t v181 = 0;
  Published.init(initialValue:)();
  v55(v68, v66, v67);
  uint64_t v144 = OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions;
  *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions) = &_swiftEmptyArrayStorage;
  uint64_t v146 = (void (*)(uint64_t, char *, uint64_t))OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs;
  *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs) = &_swiftEmptyArrayStorage;
  uint64_t v69 = v5;
  uint64_t v164 = (char *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_sessionUpdateDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v148 = (char *)OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity;
  *(void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = 0;
  uint64_t v70 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  uint64_t v145 = (char *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime);
  uint64_t v71 = type metadata accessor for Date();
  uint64_t v72 = *(void (**)(void))(*(void *)(v71 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v70, 1, 1, v71);
  uint64_t v147 = v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  v72();
  char v73 = (void *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  int v74 = v139;
  *char v73 = v137;
  v73[1] = v74;
  uint64_t v75 = v138;
  uint64_t v76 = *(void *)(v138 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  uint64_t v77 = v126;
  *uint64_t v126 = *(void *)(v138 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v77[1] = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v78 = *(void *)(v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName + 8);
  char v79 = v127;
  void *v127 = *(void *)(v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_receiverName);
  v79[1] = v78;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v5 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe) = *(unsigned char *)(v75
                                                                                          + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_isFromMe);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v72) = v181;
  uint64_t v80 = v128;
  swift_beginAccess();
  uint64_t v81 = *(void (**)(void, void))(v177 + 8);
  v177 += 8;
  uint64_t v139 = v81;
  v81(v80, v64);
  LOBYTE(v179) = (_BYTE)v72;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v82 = v181;
  swift_beginAccess();
  uint64_t v179 = v82;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v83 = v181;
  swift_beginAccess();
  uint64_t v179 = v83;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v84 = v181;
  uint64_t v85 = v182;
  uint64_t v86 = v129;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v86, v131);
  uint64_t v179 = v84;
  uint64_t v180 = v85;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v87 = v181;
  swift_beginAccess();
  uint64_t v179 = v87;
  sub_10001FB40(0, &qword_100182E98);
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v88 = (uint64_t)v166;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v89 = v134;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v89, v169);
  sub_10000F330(v88, v167, (uint64_t *)&unk_1001827D0);
  Published.init(initialValue:)();
  sub_10000F394(v88, (uint64_t *)&unk_1001827D0);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v90 = v181;
  uint64_t v91 = v135;
  swift_beginAccess();
  uint64_t v92 = (void (*)(uint64_t, uint64_t))*((void *)v171 + 1);
  uint64_t v93 = v178;
  v92(v91, v178);
  uint64_t v171 = v92;
  uint64_t v179 = v90;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v94 = v181;
  uint64_t v95 = v136;
  swift_beginAccess();
  v92(v95, v93);
  uint64_t v179 = v94;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v94) = v181;
  swift_beginAccess();
  LOBYTE(v179) = v94;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v94) = v181;
  uint64_t v96 = v140;
  swift_beginAccess();
  uint64_t v97 = v130;
  uint64_t v98 = v139;
  v139(v96, v130);
  LOBYTE(v179) = v94;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LOBYTE(v94) = v181;
  uint64_t v99 = v141;
  swift_beginAccess();
  v98(v99, v97);
  LOBYTE(v179) = v94;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v100 = v181;
  uint64_t v101 = v142;
  swift_beginAccess();
  uint64_t v102 = v178;
  int v103 = v171;
  v171(v101, v178);
  uint64_t v179 = v100;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v104 = v181;
  uint64_t v105 = v143;
  swift_beginAccess();
  v103(v105, v102);
  uint64_t v179 = v104;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  id v106 = v149;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v107 = v152;
  uint64_t v108 = v153;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v151, v106, v153);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v108);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  char v109 = v154;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v110 = v156;
  uint64_t v111 = v157;
  (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v155, v109, v157);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v111);
  swift_endAccess();
  *(void *)(v69 + v144) = *(void *)(v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_actions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v146 + v69) = *(void *)(v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_completedURLs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
  swift_beginAccess();
  uint64_t v113 = v158;
  sub_10000F330(v112, v158, &qword_100181690);
  uint64_t v114 = (uint64_t)v145;
  swift_beginAccess();
  sub_1000931A0(v113, v114);
  swift_endAccess();
  uint64_t v115 = v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
  swift_beginAccess();
  sub_10000F330(v115, v113, &qword_100181690);
  uint64_t v116 = v147;
  swift_beginAccess();
  sub_1000931A0(v113, v116);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v117 = v159;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v118 = v161;
  uint64_t v119 = v162;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v160, v117, v162);
  Published.init(initialValue:)();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v117, v119);
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v120 = (uint64_t)v172;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v121 = v150;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v121, v176);
  sub_10000F330(v120, v173, &qword_100181400);
  Published.init(initialValue:)();
  sub_10000F394(v120, &qword_100181400);
  swift_endAccess();
  uint64_t v122 = v75 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  *((void *)v164 + 1) = *(void *)(v122 + 8);
  swift_unknownObjectWeakAssign();

  *(void *)&v148[v69] = v163;
  swift_retain();
  swift_release();
  *(unsigned char *)(v69 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) = SBUIIsSystemApertureEnabled();
  return v69;
}

uint64_t sub_100092718(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v50 = a8;
  uint64_t v43 = a7;
  uint64_t v44 = a6;
  uint64_t v47 = a4;
  uint64_t v45 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v37 = a9;
  uint64_t v39 = a11;
  uint64_t v40 = a10;
  uint64_t v12 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v35 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000AA4C(&qword_100181400);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for SFAirDropReceive.Transfer.State();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v24 + 104))(v23, enum case for SFAirDropReceive.Transfer.State.created(_:));
  uint64_t v25 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v49 = a5;
  v27(v20, a5, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
  uint64_t v38 = v15;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v46 = v14;
  v28(v17, v50, v14);
  uint64_t v29 = v35;
  uint64_t v30 = v36;
  uint64_t v31 = *(void (**)(char *))(v36 + 16);
  uint64_t v32 = v37;
  uint64_t v48 = v12;
  v31(v35);
  type metadata accessor for AirDropTransferSession();
  uint64_t v33 = swift_allocObject();
  sub_100086494(v41, v42, 0, 0, 0, v45, v47, (uint64_t)v23, (uint64_t)v20, v44, v43, (uint64_t)v17, v29, v40, v39, 0);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v48);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v50, v46);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v49, v25);
  return v33;
}

uint64_t sub_100092AF8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696E556C61746F74 && a2 == 0xEE00746E756F4374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100133250)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100092C0C(void *a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100183578);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10000AB54(a1, v7);
  sub_100092DB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_10000AB98((uint64_t)a1);
  return v7;
}

unint64_t sub_100092DB0()
{
  unint64_t result = qword_100183580;
  if (!qword_100183580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183580);
  }
  return result;
}

unint64_t sub_100092E04()
{
  unint64_t result = qword_100183598;
  if (!qword_100183598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183598);
  }
  return result;
}

uint64_t sub_100092E58@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100092E80()
{
  return sub_100074748();
}

uint64_t sub_100092EA8@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100092ED0()
{
  return sub_1000904A4();
}

uint64_t sub_100092EF8@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100092F20()
{
  return sub_1000904A4();
}

uint64_t sub_100092F60@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100092F88(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_100092FB0@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100092FD8(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_100093000@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100093028()
{
  return sub_100074748();
}

uint64_t sub_100093050@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_100093078()
{
  return sub_100074748();
}

uint64_t sub_1000930A0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000746B8(a1);
}

uint64_t sub_1000930C8()
{
  return sub_100074748();
}

uint64_t sub_1000930F0@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100093118(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_100093140@<X0>(void *a1@<X8>)
{
  return sub_100090414(a1);
}

uint64_t sub_100093168(void **a1)
{
  return sub_1000909B4(a1);
}

uint64_t sub_1000931A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093218()
{
  uint64_t v1 = sub_10000AA4C(&qword_100181490);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000932C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000AA4C(&qword_100181490) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001FD90;
  return sub_100044E44(a1, v6, v7);
}

uint64_t sub_1000933D4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009340C()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100013ABC;
  void v4[2] = v2;
  v4[3] = v3;
  uint64_t v7 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of Activity.update(using:)
                                        + async function pointer to dispatch thunk of Activity.update(using:));
  unint64_t v5 = (void *)swift_task_alloc();
  v4[4] = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_10008D274;
  return v7(v4 + 2);
}

uint64_t sub_10009351C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100093554()
{
  return sub_10009368C((uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer.State);
}

uint64_t sub_10009356C()
{
  return sub_1000937A0((uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer.State, (uint64_t (*)(void))&SFAirDropSend.Transfer.State.totalProgressCount.getter, (uint64_t (*)(void))&SFAirDropSend.Transfer.State.currentProgressCount.getter);
}

uint64_t sub_1000935AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000935BC()
{
  return swift_release();
}

uint64_t sub_1000935C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009360C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100181690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093674()
{
  return sub_10009368C((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer.State);
}

uint64_t sub_10009368C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100093760()
{
  return sub_1000937A0((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t (*)(void))&SFAirDropReceive.Transfer.State.totalProgressCount.getter, (uint64_t (*)(void))&SFAirDropReceive.Transfer.State.currentProgressCount.getter);
}

uint64_t sub_1000937A0(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_10008B434(*(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, a3);
}

uint64_t sub_100093820()
{
  return sub_100089EDC();
}

uint64_t sub_100093838(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropActivityAttributes.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AirDropActivityAttributes.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100093950);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.CodingKeys()
{
  return &type metadata for AirDropActivityAttributes.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AirDropActivityAttributes.ContentState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100093A54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for AirDropActivityAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for AirDropActivityAttributes.ContentState()
{
  return &type metadata for AirDropActivityAttributes.ContentState;
}

unint64_t sub_100093AA0()
{
  unint64_t result = qword_100183670;
  if (!qword_100183670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183670);
  }
  return result;
}

unint64_t sub_100093AF8()
{
  unint64_t result = qword_100183678;
  if (!qword_100183678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183678);
  }
  return result;
}

unint64_t sub_100093B50()
{
  unint64_t result = qword_100183680;
  if (!qword_100183680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183680);
  }
  return result;
}

unint64_t sub_100093BA8()
{
  unint64_t result = qword_100183688;
  if (!qword_100183688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183688);
  }
  return result;
}

unint64_t sub_100093C00()
{
  unint64_t result = qword_100183690;
  if (!qword_100183690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183690);
  }
  return result;
}

unint64_t sub_100093C58()
{
  unint64_t result = qword_100183698;
  if (!qword_100183698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183698);
  }
  return result;
}

uint64_t sub_100093CAC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100132F70)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_100093D44(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000031;
  }
  else {
    unint64_t v3 = 0xD000000000000021;
  }
  if (v2) {
    unint64_t v4 = 0x80000001001310E0;
  }
  else {
    unint64_t v4 = 0x8000000100131110;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000031;
  }
  else {
    unint64_t v5 = 0xD000000000000021;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100131110;
  }
  else {
    unint64_t v6 = 0x80000001001310E0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100093DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100093F28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100093FF0(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100099ABC(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10009418C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v31 = a1;
  uint64_t v32 = result;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v26 = v15;
  int64_t v27 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v29 = v3 + 16;
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v28 = v3 + 48;
  if ((v18 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v20 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v31 + 48) + *(void *)(v3 + 72) * i, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, v2);
    sub_100099FA8((uint64_t)v8, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_24;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_24:
    (*v30)(v11, 1, 1, v2);
LABEL_25:
    swift_release();
    return v32;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10009453C(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[23] = v4;
  v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = sub_10000AA4C(&qword_100181540);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UTType();
  v3[29] = v5;
  v3[30] = *(void *)(v5 - 8);
  v3[31] = swift_task_alloc();
  return _swift_task_switch(sub_1000946CC, 0, 0);
}

uint64_t sub_1000946CC()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 80);
  v0[32] = v3;
  v0[33] = (v2 + 80) & 0xFFFFFFFFFFFFLL | 0xBCE5000000000000;
  uint64_t v4 = v3(v1);
  if (v4)
  {
LABEL_2:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
    return v5(v4);
  }
  unint64_t v7 = (*(uint64_t (**)(void))(v0[21] + 64))(v0[20]);
  unint64_t v8 = v7;
  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    goto LABEL_2;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_16;
  }
LABEL_7:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v9 = *(id *)(v8 + 32);
  }
  uint64_t v10 = v9;
  v0[34] = v9;
  uint64_t v11 = v0[21];
  uint64_t v12 = v0[20];
  swift_bridgeObjectRelease();
  int64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 72);
  uint64_t v14 = (void *)v13(v12, v11);
  [v14 _populateMetadataForBackwardCompatibility];

  uint64_t v15 = (void *)v13(v12, v11);
  id v16 = [v15 image];

  id v17 = [v16 platformImage];
  uint64_t v18 = *(void (**)(id, uint64_t, uint64_t))(v11 + 88);
  v0[35] = v18;
  v0[36] = (v11 + 88) & 0xFFFFFFFFFFFFLL | 0x9473000000000000;
  v18(v17, v12, v11);
  uint64_t v19 = ((uint64_t (*)(uint64_t, uint64_t))v3)(v12, v11);
  if (v19)
  {
    uint64_t v4 = v19;

    goto LABEL_2;
  }
  id v20 = [objc_allocWithZone((Class)SWShareableContentExtractor) init];
  v0[37] = v20;
  uint64_t v21 = swift_task_alloc();
  v0[38] = v21;
  *(void *)(v21 + 16) = v20;
  int64_t v22 = (void *)swift_task_alloc();
  v0[39] = v22;
  uint64_t v23 = sub_10000AA4C(&qword_100183708);
  *int64_t v22 = v0;
  v22[1] = sub_100094A54;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001BLL, 0x8000000100133270, sub_10009E180, v21, v23);
}

uint64_t sub_100094A54()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_100095F60;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v1 = sub_100094BC8;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100094BC8()
{
  uint64_t v1 = *(void **)(v0 + 128);
  *(void *)(v0 + 320) = v1;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_10018D128);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    if (v1)
    {
      *(void *)(v0 + 152) = v3;
      unint64_t v8 = v3;
    }
    else
    {
      *(void *)(v0 + 144) = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v1;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Asynchronous shareable content returned from asynchronousLPMetadataWithCompletionHandler - %@", v6, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v4 = v3;
  }

  [v3 _populateMetadataForBackwardCompatibility];
  if (!v1
    || (id v9 = [v3 image]) == 0
    || (uint64_t v10 = v9, v11 = [v9 platformImage], v10, !v11))
  {
    id v12 = [v3 icon];
    id v11 = [v12 platformImage];
  }
  int64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 160);
  (*(void (**)(id, uint64_t, uint64_t))(v0 + 280))(v11, v15, v14);
  uint64_t v16 = v13(v15, v14);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void **)(v0 + 296);
    uint64_t v19 = *(void **)(v0 + 272);
LABEL_15:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v20(v17);
  }
  int64_t v22 = *(void **)(v0 + 272);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 232);
  static UTType.url.getter();
  UTType.identifier.getter();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  *(void *)(v0 + 328) = v26;
  *(void *)(v0 + 336) = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v26(v23, v25);
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v22) = [v22 hasRepresentationConformingToTypeIdentifier:v27 fileOptions:0];

  if (v22)
  {
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = swift_task_alloc();
    *(void *)(v0 + 344) = v29;
    *(void *)(v29 + 16) = v28;
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100095188;
    uint64_t v31 = *(void *)(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v33 = sub_10009E190;
  }
  else
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v35 = *(void **)(v0 + 272);
    uint64_t v36 = *(void *)(v0 + 248);
    uint64_t v37 = *(void *)(v0 + 232);
    static UTType.image.getter();
    UTType.identifier.getter();
    v34(v36, v37);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v35) = [v35 hasRepresentationConformingToTypeIdentifier:v38 fileOptions:0];

    if (!v35)
    {
      uint64_t v3 = *(NSObject **)(v0 + 320);
      uint64_t v18 = *(void **)(v0 + 296);
      uint64_t v19 = *(void **)(v0 + 272);
      uint64_t v17 = (*(uint64_t (**)(void, void))(v0 + 256))(*(void *)(v0 + 160), *(void *)(v0 + 168));
      goto LABEL_15;
    }
    uint64_t v39 = *(void *)(v0 + 272);
    uint64_t v29 = swift_task_alloc();
    *(void *)(v0 + 408) = v29;
    *(void *)(v29 + 16) = v39;
    uint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v40;
    uint64_t v41 = sub_10000AA4C((uint64_t *)&unk_100183710);
    *uint64_t v40 = v0;
    v40[1] = sub_100095CEC;
    uint64_t v32 = v41;
    uint64_t v31 = v0 + 136;
    uint64_t v33 = sub_10009E188;
  }
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v31, 0, 0, 0xD00000000000001BLL, 0x8000000100133270, v33, v29, v32);
}

uint64_t sub_100095188()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_100096498;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v1 = sub_1000952FC;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1000952FC()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  sub_10000F330(v0[28], v1, &qword_100181540);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = (void *)v0[40];
    os_log_type_t v5 = (void *)v0[37];
    uint64_t v6 = (void *)v0[34];
    uint64_t v7 = v0[27];
    sub_10000F394(v0[28], &qword_100181540);

    sub_10000F394(v7, &qword_100181540);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8(0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[25], v0[27], v0[23]);
    id v10 = [objc_allocWithZone((Class)LPMetadataProvider) init];
    v0[45] = v10;
    URL._bridgeToObjectiveC()(v11);
    uint64_t v13 = v12;
    v0[46] = v12;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100095568;
    uint64_t v14 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100098B74;
    v0[13] = &unk_10016BB80;
    v0[14] = v14;
    [v10 startFetchingMetadataForURL:v13 completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100095568()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 376) = v1;
  if (v1) {
    uint64_t v2 = sub_100096724;
  }
  else {
    uint64_t v2 = sub_1000956A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000956A4()
{
  uint64_t v1 = *(void **)(v0 + 368);
  uint64_t v2 = *(void **)(v0 + 120);
  *(void *)(v0 + 384) = v2;

  if (v2)
  {
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 392) = v3;
    *(void *)(v3 + 16) = v2;
    id v4 = v2;
    os_log_type_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v5;
    *os_log_type_t v5 = v0;
    v5[1] = sub_1000958A0;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    uint64_t v6 = *(void **)(v0 + 360);
    uint64_t v7 = *(void **)(v0 + 320);
    unint64_t v8 = *(void **)(v0 + 296);

    uint64_t v9 = *(void *)(v0 + 224);
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    sub_10000F394(v9, &qword_100181540);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10(0);
  }
}

uint64_t sub_1000958A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000959E4, 0, 0);
}

uint64_t sub_1000959E4()
{
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v2 = *(void (**)(id, uint64_t, uint64_t))(v0 + 280);
  uint64_t v26 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v24 = *(void **)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 200);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  id v6 = [v1 image];
  id v7 = [v6 platformImage];

  v2(v7, v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v25, v23);
  sub_10000F394(v26, &qword_100181540);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v9 = *(void **)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 232);
  static UTType.image.getter();
  UTType.identifier.getter();
  v8(v10, v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v9) = [v9 hasRepresentationConformingToTypeIdentifier:v12 fileOptions:0];

  if (v9)
  {
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 408) = v14;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v15;
    uint64_t v16 = sub_10000AA4C((uint64_t *)&unk_100183710);
    *uint64_t v15 = v0;
    v15[1] = sub_100095CEC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 136, 0, 0, 0xD00000000000001BLL, 0x8000000100133270, sub_10009E188, v14, v16);
  }
  else
  {
    uint64_t v17 = *(void **)(v0 + 320);
    uint64_t v18 = *(void **)(v0 + 296);
    uint64_t v19 = *(void **)(v0 + 272);
    uint64_t v20 = (*(uint64_t (**)(void, void))(v0 + 256))(*(void *)(v0 + 160), *(void *)(v0 + 168));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v21(v20);
  }
}

uint64_t sub_100095CEC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v1 = sub_100096850;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v1 = sub_100095E60;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100095E60()
{
  (*(void (**)(void, void, void))(v0 + 280))(*(void *)(v0 + 136), *(void *)(v0 + 160), *(void *)(v0 + 168));
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 296);
  uint64_t v3 = *(void **)(v0 + 272);
  uint64_t v4 = (*(uint64_t (**)(void, void))(v0 + 256))(*(void *)(v0 + 160), *(void *)(v0 + 168));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100095F60()
{
  *(void *)(v0 + 320) = 0;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_10018D128);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    *(void *)(v0 + 144) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Asynchronous shareable content returned from asynchronousLPMetadataWithCompletionHandler - %@", v4, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v2 = 0;
  }

  [0 _populateMetadataForBackwardCompatibility];
  id v6 = [0 icon];
  id v7 = [v6 platformImage];

  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 160);
  (*(void (**)(id, uint64_t, uint64_t))(v0 + 280))(v7, v10, v9);
  uint64_t v11 = v8(v10, v9);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void **)(v0 + 296);
    uint64_t v14 = *(void **)(v0 + 272);
LABEL_8:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v15(v12);
  }
  uint64_t v17 = *(void **)(v0 + 272);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 232);
  static UTType.url.getter();
  UTType.identifier.getter();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(void *)(v0 + 328) = v21;
  *(void *)(v0 + 336) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v21(v18, v20);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v17) = [v17 hasRepresentationConformingToTypeIdentifier:v22 fileOptions:0];

  if (v17)
  {
    uint64_t v23 = *(void *)(v0 + 272);
    uint64_t v24 = swift_task_alloc();
    *(void *)(v0 + 344) = v24;
    *(void *)(v24 + 16) = v23;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_100095188;
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v27 = *(void *)(v0 + 208);
    uint64_t v28 = sub_10009E190;
  }
  else
  {
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v30 = *(void **)(v0 + 272);
    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v32 = *(void *)(v0 + 232);
    static UTType.image.getter();
    UTType.identifier.getter();
    v29(v31, v32);
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LODWORD(v30) = [v30 hasRepresentationConformingToTypeIdentifier:v33 fileOptions:0];

    if (!v30)
    {
      uint64_t v37 = *(void **)(v0 + 320);
      uint64_t v13 = *(void **)(v0 + 296);
      uint64_t v14 = *(void **)(v0 + 272);
      uint64_t v12 = (*(uint64_t (**)(void, void))(v0 + 256))(*(void *)(v0 + 160), *(void *)(v0 + 168));

      goto LABEL_8;
    }
    uint64_t v34 = *(void *)(v0 + 272);
    uint64_t v24 = swift_task_alloc();
    *(void *)(v0 + 408) = v24;
    *(void *)(v24 + 16) = v34;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v35;
    uint64_t v36 = sub_10000AA4C((uint64_t *)&unk_100183710);
    *uint64_t v35 = v0;
    v35[1] = sub_100095CEC;
    uint64_t v27 = v36;
    uint64_t v26 = v0 + 136;
    uint64_t v28 = sub_10009E188;
  }
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v26, 0, 0, 0xD00000000000001BLL, 0x8000000100133270, v28, v24, v27);
}

uint64_t sub_100096498()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[28], 1, 1, v0[23]);
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  sub_10000F330(v0[28], v1, &qword_100181540);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = (void *)v0[40];
    uint64_t v5 = (void *)v0[37];
    id v6 = (void *)v0[34];
    uint64_t v7 = v0[27];
    sub_10000F394(v0[28], &qword_100181540);

    sub_10000F394(v7, &qword_100181540);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8(0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[25], v0[27], v0[23]);
    id v10 = [objc_allocWithZone((Class)LPMetadataProvider) init];
    v0[45] = v10;
    URL._bridgeToObjectiveC()(v11);
    uint64_t v13 = v12;
    v0[46] = v12;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100095568;
    uint64_t v14 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100098B74;
    v0[13] = &unk_10016BB80;
    v0[14] = v14;
    [v10 startFetchingMetadataForURL:v13 completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100096724()
{
  uint64_t v1 = (void *)v0[46];
  uint64_t v2 = (void *)v0[45];
  uint64_t v3 = (void *)v0[40];
  uint64_t v4 = (void *)v0[37];
  uint64_t v5 = (void *)v0[34];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v6 = v0[28];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  sub_10000F394(v6, &qword_100181540);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_100096850()
{
  (*(void (**)(void, void, void))(v0 + 280))(0, *(void *)(v0 + 160), *(void *)(v0 + 168));
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 296);
  uint64_t v3 = *(void **)(v0 + 272);
  uint64_t v4 = (*(uint64_t (**)(void, void))(v0 + 256))(*(void *)(v0 + 160), *(void *)(v0 + 168));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100096950(char *a1, char *a2)
{
  return sub_100093D44(*a1, *a2);
}

uint64_t sub_10009695C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100168CF8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000969BC(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000031;
  }
  else {
    unint64_t v2 = 0xD000000000000021;
  }
  unint64_t v3 = 0x80000001001310E0;
  if (*v1) {
    unint64_t v3 = 0x8000000100131110;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_100096A00()
{
  return sub_100096A08();
}

Swift::Int sub_100096A08()
{
  return Hasher._finalize()();
}

uint64_t sub_100096A90()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100096B04()
{
  return sub_100096B0C();
}

Swift::Int sub_100096B0C()
{
  return Hasher._finalize()();
}

void sub_100096B90(void *a1@<X8>)
{
  *a1 = &off_100168D48;
}

uint64_t sub_100096BA0()
{
  Swift::Int v0 = sub_10009CFC0((uint64_t)&off_100168B90);
  uint64_t result = swift_arrayDestroy();
  qword_1001836A0 = v0;
  return result;
}

uint64_t sub_100096BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_100096C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = sub_10000AA4C(&qword_1001804B0);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v30 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64);
  unint64_t v13 = v12(a1, a2, v10);
  if (v13 >> 62) {
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v14 != 1)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    sub_10000AA4C(&qword_1001837B0);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_10012A270;
    unint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t))v12)(a1, a2);
    if (v25 >> 62) {
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v24 + 56) = &type metadata for Int;
    *(void *)(v24 + 64) = &protocol witness table for Int;
    *(void *)(v24 + 32) = v26;
    uint64_t v27 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v27;
  }
  unint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t))v12)(a1, a2);
  unint64_t v16 = v15;
  if (!(v15 >> 62))
  {
    uint64_t result = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_6;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_22;
  }
LABEL_6:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    type metadata accessor for SFAirDropUtilities();
    static SFAirDropUtilities.standardTypeIdentifiers.getter();
    static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      UTType.init(_:)();
      uint64_t v23 = v31;
      uint64_t v22 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v32) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v30, v8, v22);
        uint64_t v28 = UTType.localizedDescription.getter();
        uint64_t v27 = v28;
        if (v29)
        {
          uint64_t v33 = 8241;
          unint64_t v34 = 0xE200000000000000;
          String.append(_:)(*(Swift::String *)&v28);
          swift_bridgeObjectRelease();

          uint64_t v27 = v33;
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
        return v27;
      }

      sub_10000F394((uint64_t)v8, &qword_1001804B0);
    }
    else
    {
    }
    return 0;
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100097100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = a1;
  uint64_t v76 = type metadata accessor for LocalizedStringResource();
  uint64_t v78 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v71 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v72 = (char *)&v63 - v8;
  uint64_t v9 = sub_10000AA4C((uint64_t *)&unk_1001837A0);
  __chkstk_darwin(v9 - 8);
  uint64_t v70 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v73 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v13);
  uint64_t v75 = (uint64_t)&v63 - v14;
  __chkstk_darwin(v15);
  int v74 = (char *)&v63 - v16;
  uint64_t v17 = *(void *)(a2 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v63 - v22;
  __n128 v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v63 - v26;
  uint64_t v28 = a3;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 8))(a2, a3, v25);
  uint64_t v31 = v30;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v33 = v3;
  uint64_t v34 = v31;
  v32(v27, v33, a2);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v27, a2);
    return v29;
  }
  else
  {
    uint64_t v69 = (void (*)(char *, char *, uint64_t))v32;
    uint64_t v63 = v20;
    uint64_t v66 = v17;
    uint64_t v67 = v23;
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
    uint64_t v37 = (uint64_t)v74;
    uint64_t v65 = v28;
    v36(a2, v28);
    uint64_t v38 = v75;
    sub_10000F330(v37, v75, (uint64_t *)&unk_1001837A0);
    uint64_t v39 = v78;
    uint64_t v40 = v76;
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    int v41 = v64(v38, 1, v76);
    uint64_t v68 = v27;
    if (v41 == 1)
    {
      uint64_t v42 = v40;
      uint64_t v35 = 0;
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v44 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v72, v38, v40);
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v71, v44, v40);
      uint64_t v45 = String.init(localized:)();
      uint64_t v46 = v39;
      uint64_t v35 = v45;
      uint64_t v43 = v47;
      uint64_t v42 = v40;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v40);
    }
    uint64_t v48 = v77;
    sub_10000F394(v37, (uint64_t *)&unk_1001837A0);
    uint64_t v50 = v67;
    uint64_t v49 = v68;
    v69(v67, v68, a2);
    if (v43)
    {
      uint64_t v51 = *(void (**)(char *, uint64_t))(v66 + 8);
      v51(v50, a2);
      v51(v49, a2);
    }
    else
    {
      uint64_t v52 = v73;
      (*(void (**)(uint64_t, uint64_t))(v65 + 40))(v48, a2);
      uint64_t v53 = v70;
      sub_10000F330(v52, v70, (uint64_t *)&unk_1001837A0);
      if (v64(v53, 1, v42) == 1)
      {
        uint64_t v35 = 0;
        uint64_t v54 = 0;
      }
      else
      {
        uint64_t v55 = v78;
        uint64_t v56 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v72, v53, v42);
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v71, v56, v42);
        uint64_t v35 = String.init(localized:)();
        uint64_t v54 = v57;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v42);
      }
      uint64_t v59 = v65;
      uint64_t v58 = v66;
      uint64_t v60 = v63;
      sub_10000F394(v73, (uint64_t *)&unk_1001837A0);
      v69(v60, v50, a2);
      if (!v54) {
        uint64_t v35 = sub_100096C5C(a2, v59);
      }
      uint64_t v61 = *(void (**)(char *, uint64_t))(v58 + 8);
      v61(v60, a2);
      v61(v50, a2);
      v61(v68, a2);
    }
  }
  return v35;
}

uint64_t sub_1000976C4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a1;
  uint64_t v69 = type metadata accessor for LocalizedStringResource();
  uint64_t v71 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v67 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)&v56 - v8;
  uint64_t v9 = sub_10000AA4C((uint64_t *)&unk_1001837A0);
  __chkstk_darwin(v9 - 8);
  uint64_t v64 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v56 - v12;
  __chkstk_darwin(v13);
  uint64_t v68 = (uint64_t)&v56 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = *(void *)(a2 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v23 = __chkstk_darwin(v22);
  __n128 v25 = (char *)&v56 - v24;
  uint64_t v26 = a3;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v23);
  uint64_t v29 = v28;
  uint64_t v30 = v3;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v31(v25, v30, a2);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, a2);
    return v27;
  }
  else
  {
    uint64_t v60 = (void (*)(char *, char *, uint64_t))v31;
    uint64_t v61 = v18;
    uint64_t v62 = a2;
    uint64_t v63 = v21;
    uint64_t v33 = v67;
    uint64_t v57 = v26;
    (*(void (**)(uint64_t, uint64_t))(v26 + 32))(a2, v26);
    uint64_t v34 = (uint64_t)v17;
    uint64_t v35 = v68;
    sub_10000F330((uint64_t)v17, v68, (uint64_t *)&unk_1001837A0);
    uint64_t v36 = v71;
    uint64_t v37 = v69;
    uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    uint64_t v59 = v71 + 48;
    uint64_t v38 = v25;
    if (v58(v35, 1, v69) == 1)
    {
      uint64_t v32 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v40 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v66, v35, v37);
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v40, v37);
      uint64_t v32 = String.init(localized:)();
      uint64_t v41 = v36;
      uint64_t v39 = v42;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v37);
    }
    uint64_t v43 = v61;
    uint64_t v44 = v70;
    sub_10000F394(v34, (uint64_t *)&unk_1001837A0);
    uint64_t v45 = v63;
    uint64_t v46 = v38;
    uint64_t v47 = v38;
    uint64_t v48 = v62;
    v60(v63, v46, v62);
    if (v39)
    {
      uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v49(v45, v48);
      v49(v47, v48);
    }
    else
    {
      uint64_t v70 = v47;
      uint64_t v50 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t))(v57 + 48))(v44, v48);
      uint64_t v51 = v64;
      sub_10000F330(v50, v64, (uint64_t *)&unk_1001837A0);
      if (v58(v51, 1, v37) == 1)
      {
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v52 = v71;
        uint64_t v53 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v66, v51, v37);
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v33, v53, v37);
        uint64_t v32 = String.init(localized:)();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v37);
      }
      sub_10000F394(v50, (uint64_t *)&unk_1001837A0);
      uint64_t v54 = *(void (**)(char *, uint64_t))(v43 + 8);
      v54(v63, v48);
      v54(v70, v48);
    }
  }
  return v32;
}

uint64_t sub_100097BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v11);
  unint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t result = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    unsigned __int8 v27 = 0;
    uint64_t v19 = 0;
    goto LABEL_13;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v36 = v8;
  uint64_t v37 = v6;
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v17 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v17 = (char *)*(id *)(v15 + 32);
LABEL_6:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v35 = v18;
    uint64_t v19 = v18;
    static UTType.url.getter();
    UTType.identifier.getter();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v13, v9);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v22 = [v19 hasRepresentationConformingToTypeIdentifier:v21 fileOptions:0];

    if (v22)
    {

      uint64_t v23 = 1802398060;
LABEL_29:

      return v23;
    }
    static UTType.image.getter();
    UTType.identifier.getter();
    v20(v13, v9);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v25 = [v19 hasRepresentationConformingToTypeIdentifier:v24 fileOptions:0];

    if (v25)
    {

      uint64_t v23 = 0x6F746F6870;
      goto LABEL_29;
    }
    static UTType._groupActivity.getter();
    UTType.identifier.getter();
    v20(v13, v9);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v27 = [v19 hasRepresentationConformingToTypeIdentifier:v26 fileOptions:0];

    uint64_t v19 = v35;
    uint64_t v8 = v36;
    uint64_t v6 = v37;
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      if ((v27 & 1) == 0)
      {
        uint64_t v23 = 0;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 56))(v38, a1, a2);
    uint64_t v28 = v39;
    v40[0] = v39;
    swift_bridgeObjectRetain();
    sub_10001E7C4((uint64_t)v38);
    if (*(void *)(v28 + 16))
    {
      uint64_t v36 = v8;
      uint64_t v37 = v6;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v29 = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v28 + 32);
      unint64_t v31 = v29 & ~v30;
      if ((*(void *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31))
      {
        uint64_t v35 = "shotservices.sirisharing";
        uint64_t v32 = ~v30;
        while ((*(unsigned char *)(*(void *)(v28 + 48) + v31) & 1) != 0)
        {
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v33) {
            goto LABEL_27;
          }
          unint64_t v31 = (v31 + 1) & v32;
          if (((*(void *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            goto LABEL_22;
          }
        }
        swift_bridgeObjectRelease();
LABEL_27:
        sub_10001E9F0((uint64_t)v40);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v36, a1);
        goto LABEL_28;
      }
LABEL_22:
      sub_10001E9F0((uint64_t)v40);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v36, a1);
      if (v27)
      {
LABEL_28:
        uint64_t v23 = 0x616C706572616873;
        goto LABEL_29;
      }
    }
    else
    {
      sub_10001E9F0((uint64_t)v40);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      if (v27) {
        goto LABEL_28;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100098158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001804B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UTType();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  __n128 v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v9);
  unint64_t v13 = v12;
  if (!(v12 >> 62))
  {
    uint64_t result = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    type metadata accessor for SFAirDropUtilities();
    static SFAirDropUtilities.standardTypeIdentifiers.getter();
    static SFAirDropUtilities.highestFidelityDataType(for:conformingToDataTypes:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      UTType.init(_:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
        uint64_t countAndFlagsBits = UTType.preferredFilenameExtension.getter();
        if (v20)
        {
          uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
          swift_bridgeObjectRelease();

          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        }
        return countAndFlagsBits;
      }

      sub_10000F394((uint64_t)v6, &qword_1001804B0);
    }
    else
    {
    }
    return 0;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v13 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_10009840C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100183770);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (NSString *)String._bridgeToObjectiveC()();
  SEL v8 = NSSelectorFromString(v7);

  if ([a2 respondsToSelector:v8])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_10009E3C0;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000986A8;
    aBlock[3] = &unk_10016BCB0;
    __n128 v11 = _Block_copy(aBlock);
    swift_release();
    [a2 performSelector:v8 withObject:v11];
    _Block_release(v11);
  }
  else
  {
    sub_10009E2D4();
    swift_allocError();
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_100098634(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10000AA4C(&qword_100183770);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v3 = a1;
    sub_10000AA4C(&qword_100183770);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_1000986A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100098734(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100183730);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10001FB40(0, &qword_1001805E0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10009E240;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000133F4;
  aBlock[3] = &unk_10016BC10;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  id v11 = [a2 loadObjectOfClass:ObjCClassFromMetadata completionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100098910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100181540);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v16 = a1;
    swift_unknownObjectRetain();
    sub_10000AA4C(&qword_100183748);
    uint64_t v11 = type metadata accessor for URL();
    int v12 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, v12 ^ 1u, 1, v11);
    sub_10000AA4C((uint64_t *)&unk_100183730);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (a2)
    {
      uint64_t v14 = a2;
    }
    else
    {
      LODWORD(v16) = 17;
      sub_1000995D4((uint64_t)_swiftEmptyArrayStorage);
      sub_10009E260(&qword_100183740, (void (*)(uint64_t))&type metadata accessor for POSIXError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v14 = POSIXError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    uint64_t v16 = v14;
    swift_errorRetain();
    sub_10000AA4C((uint64_t *)&unk_100183730);
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_100098B74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000AA4C(&qword_100180590);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

void sub_100098C34(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100183720);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10009E1AC;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D7ABC;
  aBlock[3] = &unk_10016BBC0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [a2 _loadAsynchronousFieldsWithUpdateHandler:v9];
  _Block_release(v9);
}

void sub_100098DDC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000AA4C((uint64_t *)&unk_100183760);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10001FB40(0, &qword_100183600);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10009E2B4;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000133F4;
  aBlock[3] = &unk_10016BC60;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  id v11 = [a2 loadObjectOfClass:ObjCClassFromMetadata completionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100098FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for POSIXError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8) {
      swift_unknownObjectRetain();
    }
    uint64_t v12 = v8;
    sub_10000AA4C((uint64_t *)&unk_100183760);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (a2)
    {
      uint64_t v10 = a2;
    }
    else
    {
      LODWORD(v12) = 17;
      sub_1000995D4((uint64_t)_swiftEmptyArrayStorage);
      sub_10009E260(&qword_100183740, (void (*)(uint64_t))&type metadata accessor for POSIXError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v10 = POSIXError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    uint64_t v12 = v10;
    swift_errorRetain();
    sub_10000AA4C((uint64_t *)&unk_100183760);
    return CheckedContinuation.resume(throwing:)();
  }
}

BOOL sub_100099180(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FB40(0, (unint64_t *)&qword_100181C80);
  unint64_t v7 = (void *)static NSUserDefaults.airdrop.getter();
  char v8 = SFAirDropUserDefaults.boopToCollaborateEnabled.getter();

  BOOL result = 0;
  if (v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
    sub_10001FB40(0, &qword_100180600);
    if (swift_dynamicCast())
    {
      id v9 = v14;
      id v10 = [v14 content];
      unsigned __int8 v11 = [v10 hasPossibleCollaborationRepresentation];

      if (v11) {
        return 1;
      }
    }
  }
  return result;
}

void sub_1000992F4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SFAirDropUtilities();
  uint64_t v4 = static SFAirDropUtilities.standardTypeIdentifiers.getter();
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
LABEL_19:
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      goto LABEL_16;
    }
  }
  unint64_t v8 = 0;
  unint64_t v9 = v6 & 0xC000000000000001;
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v4 + 40;
  uint64_t v18 = v7;
  while (1)
  {
LABEL_4:
    if (v9)
    {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v8 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v12 = *(id *)(v6 + 32 + 8 * v8);
    }
    uint64_t v13 = v12;
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    if (v10) {
      break;
    }

    if (v8 == v7) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = v10;
  do
  {
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v17 = [v13 hasItemConformingToTypeIdentifier:v16];

    if (v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    v11 += 16;
    --v15;
  }
  while (v15);

  swift_bridgeObjectRelease();
  unint64_t v9 = v6 & 0xC000000000000001;
  uint64_t v7 = v18;
  uint64_t v11 = v4 + 40;
  if (v8 != v18) {
    goto LABEL_4;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000994D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100096BF0(a1);
}

uint64_t sub_1000994EC()
{
  return 0;
}

id sub_1000994F8(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

unint64_t sub_1000995D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(&qword_100183750);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F330(v6, (uint64_t)&v15, &qword_100183758);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10009970C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000627DC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10009970C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100099784(a1, a2, v4);
}

unint64_t sub_100099784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1000998CC(unsigned char *a1, char a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  if (a2) {
    unint64_t v5 = 0xD000000000000031;
  }
  else {
    unint64_t v5 = 0xD000000000000021;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100131110;
  }
  else {
    unint64_t v6 = 0x80000001001310E0;
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      unint64_t v11 = *(unsigned char *)(*(void *)(v4 + 48) + v9) ? 0xD000000000000031 : 0xD000000000000021;
      unint64_t v12 = *(unsigned char *)(*(void *)(v4 + 48) + v9) ? 0x8000000100131110 : 0x80000001001310E0;
      if (v11 == v5 && v12 == v6) {
        break;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_23;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v16 = *(unsigned char *)(*(void *)(*v18 + 48) + v9);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v18;
    *uint64_t v18 = 0x8000000000000000;
    char v16 = a2 & 1;
    sub_10009B028(a2 & 1, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v18 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_100099ABC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10009B21C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100099C6C(uint64_t a1, Swift::Int a2, uint64_t a3, int a4)
{
  unint64_t v5 = v4;
  int v10 = a4 & 1;
  unsigned int v11 = a4 & 0x100;
  int v46 = a4 & 0x1000000;
  int v47 = a4 & 0x10000;
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v48 = a2;
  String.hash(into:)();
  uint64_t v49 = a3;
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(BYTE1(a4) & 1);
  Hasher._combine(_:)(BYTE2(a4) & 1);
  Hasher._combine(_:)(HIBYTE(a4) & 1);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v12 + 56;
  uint64_t v42 = v5;
  uint64_t v43 = a1;
  int v41 = a4;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v17 = ~v14;
    uint64_t v18 = *(void *)(v12 + 48);
    Swift::Int v20 = v48;
    uint64_t v19 = a3;
    unsigned int v44 = v11;
    while (1)
    {
      uint64_t v21 = 24 * v15;
      uint64_t v22 = v18 + 24 * v15;
      int v23 = *(unsigned __int8 *)(v22 + 16);
      int v24 = *(unsigned __int8 *)(v22 + 17);
      int v25 = (v47 != 0) ^ *(unsigned __int8 *)(v22 + 18);
      if (*(void *)v22 == v20 && *(void *)(v22 + 8) == v19)
      {
        if ((((v10 != 0) ^ v23 | (v11 != 0) ^ v24 | v25) & 1) == 0
          && (((v46 != 0) ^ *(unsigned __int8 *)(v22 + 19)) & 1) == 0)
        {
LABEL_13:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v32 = *(void *)(*v42 + 48) + v21;
          uint64_t v34 = *(void *)v32;
          uint64_t v33 = *(void *)(v32 + 8);
          char v35 = *(unsigned char *)(v32 + 16);
          char v36 = *(unsigned char *)(v32 + 17);
          char v37 = *(unsigned char *)(v32 + 18);
          LOBYTE(v32) = *(unsigned char *)(v32 + 19);
          *(void *)uint64_t v43 = v34;
          *(void *)(v43 + 8) = v33;
          *(unsigned char *)(v43 + 16) = v35;
          *(unsigned char *)(v43 + 17) = v36;
          *(unsigned char *)(v43 + 18) = v37;
          *(unsigned char *)(v43 + 19) = v32;
          swift_bridgeObjectRetain();
          return 0;
        }
      }
      else
      {
        BOOL v45 = v11 != 0;
        uint64_t v27 = v16;
        uint64_t v28 = v17;
        int v29 = *(unsigned __int8 *)(v22 + 19);
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        int v31 = v29;
        uint64_t v17 = v28;
        uint64_t v16 = v27;
        Swift::Int v20 = v48;
        uint64_t v19 = v49;
        uint64_t v21 = 24 * v15;
        unsigned int v11 = v44;
        if (!(((v10 != 0) ^ v23) & 1 | ((v30 & 1) == 0) | (v45 ^ v24 | v25) & 1)
          && (((v46 != 0) ^ v31) & 1) == 0)
        {
          goto LABEL_13;
        }
      }
      unint64_t v15 = (v15 + 1) & v17;
      if (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
        goto LABEL_15;
      }
    }
  }
  Swift::Int v20 = a2;
  uint64_t v19 = a3;
LABEL_15:
  unsigned int v39 = v11 >> 8;
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *v42;
  *uint64_t v42 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10009B3B8(v20, v19, v41 & 0x1010101, v15, isUniquelyReferenced_nonNull_native);
  *uint64_t v42 = v50;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v43 = v20;
  *(void *)(v43 + 8) = v19;
  *(unsigned char *)(v43 + 16) = v10;
  *(unsigned char *)(v43 + 17) = v39;
  *(unsigned char *)(v43 + 18) = BYTE2(v47);
  uint64_t result = 1;
  *(unsigned char *)(v43 + 19) = HIBYTE(v46);
  return result;
}

uint64_t sub_100099FA8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      Swift::Int v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10009E260(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009B6A8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10009A2CC()
{
  uint64_t v1 = *v0;
  sub_10000AA4C(&qword_1001836B0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    NSString v26 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v25 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v7 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v12 = v11 | (v9 << 6);
      }
      else
      {
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          int64_t v9 = v13 + 1;
          if (v13 + 1 >= v25) {
            goto LABEL_33;
          }
          unint64_t v14 = v26[v9];
          if (!v14)
          {
            int64_t v9 = v13 + 2;
            if (v13 + 2 >= v25) {
              goto LABEL_33;
            }
            unint64_t v14 = v26[v9];
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                uint64_t v24 = 1 << *(unsigned char *)(v1 + 32);
                if (v24 > 63) {
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *NSString v26 = -1 << v24;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v9 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_39;
                  }
                  if (v9 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = v26[v9];
                  ++v15;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v9 = v15;
            }
          }
        }
LABEL_23:
        unint64_t v6 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      char v16 = *(unsigned char *)(*(void *)(v1 + 48) + v12);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v20 = 0;
        unint64_t v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v22 = v19 == v21;
          if (v19 == v21) {
            unint64_t v19 = 0;
          }
          v20 |= v22;
          uint64_t v23 = *(void *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(unsigned char *)(*(void *)(v3 + 48) + v10) = v16;
      ++*(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::Int v0 = v3;
  return result;
}

uint64_t sub_10009A5F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AA4C(&qword_100183FB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10009A8D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AA4C(&qword_1001836F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v1;
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v24 >= v8) {
          goto LABEL_31;
        }
        unint64_t v25 = v5[v24];
        ++v10;
        if (!v25)
        {
          int64_t v10 = v24 + 1;
          if (v24 + 1 >= v8) {
            goto LABEL_31;
          }
          unint64_t v25 = v5[v10];
          if (!v25)
          {
            int64_t v10 = v24 + 2;
            if (v24 + 2 >= v8) {
              goto LABEL_31;
            }
            unint64_t v25 = v5[v10];
            if (!v25)
            {
              int64_t v26 = v24 + 3;
              if (v26 >= v8)
              {
LABEL_31:
                swift_release();
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v5 = -1 << v27;
                }
                uint64_t v1 = v28;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v25 = v5[v26];
              if (!v25)
              {
                while (1)
                {
                  int64_t v10 = v26 + 1;
                  if (__OFADD__(v26, 1)) {
                    goto LABEL_37;
                  }
                  if (v10 >= v8) {
                    goto LABEL_31;
                  }
                  unint64_t v25 = v5[v10];
                  ++v26;
                  if (v25) {
                    goto LABEL_30;
                  }
                }
              }
              int64_t v10 = v26;
            }
          }
        }
LABEL_30:
        unint64_t v7 = (v25 - 1) & v25;
        unint64_t v12 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      uint64_t v13 = *(void *)(v2 + 48) + 24 * v12;
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *(void *)(v13 + 8);
      int v16 = *(unsigned __int8 *)(v13 + 16);
      int v17 = *(unsigned __int8 *)(v13 + 17);
      int v18 = *(unsigned __int8 *)(v13 + 18);
      int v19 = *(unsigned __int8 *)(v13 + 19);
      if (v17) {
        int v20 = 256;
      }
      else {
        int v20 = 0;
      }
      int v21 = v20 | v16;
      if (v18) {
        int v22 = 0x10000;
      }
      else {
        int v22 = 0;
      }
      if (v19) {
        int v23 = 0x1000000;
      }
      else {
        int v23 = 0;
      }
      unint64_t result = sub_10009AF00(v14, v15, v21 | v22 | v23, v3);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_10009AB04()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  int v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000AA4C(&qword_1001836E0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    char v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    char v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      int64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

unint64_t sub_10009AF00(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v8 = a3 & 1;
  Hasher._combine(_:)(a3 & 1);
  int v9 = (a3 >> 8) & 1;
  Hasher._combine(_:)(BYTE1(a3) & 1);
  int v10 = HIWORD(a3) & 1;
  Hasher._combine(_:)(BYTE2(a3) & 1);
  int v11 = HIBYTE(a3) & 1;
  Hasher._combine(_:)(v11);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a4 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v13 = *(void *)(a4 + 48) + 24 * result;
  *(void *)uint64_t v13 = a1;
  *(void *)(v13 + 8) = a2;
  *(unsigned char *)(v13 + 16) = v8;
  *(unsigned char *)(v13 + 17) = v9;
  *(unsigned char *)(v13 + 18) = v10;
  *(unsigned char *)(v13 + 19) = v11;
  ++*(void *)(a4 + 16);
  return result;
}

Swift::Int sub_10009B028(Swift::Int result, unint64_t a2, char a3)
{
  int v5 = result & 1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  char v22 = result & 1;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_28;
  }
  if (a3)
  {
    sub_10009A2CC();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_10009B948();
      goto LABEL_28;
    }
    sub_10009C10C();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  if (v5) {
    unint64_t v9 = 0xD000000000000031;
  }
  else {
    unint64_t v9 = 0xD000000000000021;
  }
  if (v5) {
    unint64_t v10 = 0x8000000100131110;
  }
  else {
    unint64_t v10 = 0x80000001001310E0;
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    do
    {
      unint64_t v13 = *(unsigned char *)(*(void *)(v8 + 48) + a2) ? 0xD000000000000031 : 0xD000000000000021;
      unint64_t v14 = *(unsigned char *)(*(void *)(v8 + 48) + a2) ? 0x8000000100131110 : 0x80000001001310E0;
      if (v13 == v9 && v14 == v10) {
        goto LABEL_31;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_32;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  uint64_t v17 = *v21;
  *(void *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v22;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n();
LABEL_32:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10009B21C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10009A5F8();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_10009BADC();
      goto LABEL_22;
    }
    sub_10009C400();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_10009B3B8(Swift::Int result, uint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v7 = a2;
  Swift::Int v8 = result;
  LOBYTE(v9) = a3 & 1;
  uint64_t v10 = a3 & 0x100;
  uint64_t v11 = a3 & 0x10000;
  int v12 = a3 & 0x1000000;
  unint64_t v13 = *(void *)(*v5 + 16);
  unint64_t v14 = *(void *)(*v5 + 24);
  unsigned int v38 = WORD1(v11);
  unsigned int v39 = v10 >> 8;
  unsigned int v37 = (a3 & 0x1000000u) >> 24;
  if (v14 <= v13 || (a5 & 1) == 0)
  {
    Swift::Int v42 = result;
    int v41 = a3 & 1;
    if (a5)
    {
      sub_10009A8D8();
    }
    else
    {
      if (v14 > v13)
      {
        unint64_t result = (Swift::Int)sub_10009BC90();
LABEL_20:
        uint64_t v7 = a2;
        Swift::Int v8 = v42;
        LOBYTE(v9) = v41;
        goto LABEL_21;
      }
      sub_10009C6B0();
    }
    uint64_t v15 = *v5;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v41);
    Hasher._combine(_:)(BYTE1(v10));
    Hasher._combine(_:)(BYTE2(v11));
    Hasher._combine(_:)(HIBYTE(v12));
    unint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v15 + 32);
    a4 = result & ~v16;
    uint64_t v17 = v15 + 56;
    if ((*(void *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
    {
      uint64_t v18 = ~v16;
      uint64_t v19 = *(void *)(v15 + 48);
      uint64_t v7 = a2;
      Swift::Int v8 = v42;
      int v9 = v41;
      uint64_t v20 = v10;
      int v21 = v12;
      while (1)
      {
        uint64_t v22 = v19 + 24 * a4;
        unint64_t result = *(void *)v22;
        int v23 = *(unsigned __int8 *)(v22 + 16);
        int v24 = *(unsigned __int8 *)(v22 + 17);
        int v25 = *(unsigned __int8 *)(v22 + 19);
        if (*(void *)v22 == v8 && *(void *)(v22 + 8) == v7)
        {
          BOOL v31 = v21 != 0;
          if ((((v9 != 0) ^ v23 | (v20 != 0) ^ v24 | (v11 != 0) ^ *(unsigned __int8 *)(v22 + 18)) & 1) == 0) {
            goto LABEL_10;
          }
        }
        else
        {
          unsigned int v43 = (v11 != 0) ^ *(unsigned __int8 *)(v22 + 18);
          BOOL v44 = v9 != 0;
          BOOL v45 = v20 != 0;
          uint64_t v27 = v11;
          uint64_t v28 = v20;
          int v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v20 = v28;
          uint64_t v11 = v27;
          int v9 = v41;
          Swift::Int v8 = v42;
          uint64_t v7 = a2;
          int v30 = v44 ^ v23 | ~v29;
          unint64_t result = v43;
          if (((v30 | v45 ^ v24 | v43) & 1) == 0)
          {
            BOOL v31 = v21 != 0;
LABEL_10:
            if (((v31 ^ v25) & 1) == 0) {
              goto LABEL_24;
            }
          }
        }
        a4 = (a4 + 1) & v18;
        if (((*(void *)(v17 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
          goto LABEL_21;
        }
      }
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v32 = *v40;
  *(void *)(*v40 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v33 = *(void *)(v32 + 48) + 24 * a4;
  *(void *)uint64_t v33 = v8;
  *(void *)(v33 + 8) = v7;
  *(unsigned char *)(v33 + 16) = v9;
  *(unsigned char *)(v33 + 17) = v39;
  *(unsigned char *)(v33 + 18) = v38;
  *(unsigned char *)(v33 + 19) = v37;
  uint64_t v34 = *(void *)(v32 + 16);
  BOOL v35 = __OFADD__(v34, 1);
  uint64_t v36 = v34 + 1;
  if (v35)
  {
    __break(1u);
LABEL_24:
    unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v32 + 16) = v36;
  }
  return result;
}

uint64_t sub_10009B6A8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  int v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10009AB04();
  }
  else
  {
    if (v12 > v11)
    {
      sub_10009BE68();
      goto LABEL_12;
    }
    sub_10009C8B4();
  }
  uint64_t v13 = *v3;
  sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10009E260(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10009B948()
{
  uint64_t v1 = v0;
  sub_10000AA4C(&qword_1001836B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009BADC()
{
  uint64_t v1 = v0;
  sub_10000AA4C(&qword_100183FB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009BC90()
{
  uint64_t v1 = v0;
  sub_10000AA4C(&qword_1001836F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25)
      {
        int64_t v9 = v24 + 2;
        if (v24 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v6 + 8 * v9);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    char v21 = *(unsigned char *)(v17 + 17);
    char v22 = *(unsigned char *)(v17 + 18);
    LOBYTE(v17) = *(unsigned char *)(v17 + 19);
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v18;
    *(unsigned char *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 17) = v21;
    *(unsigned char *)(v23 + 18) = v22;
    *(unsigned char *)(v23 + 19) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v13) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009BE68()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA4C(&qword_1001836E0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  char v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10009C10C()
{
  uint64_t v1 = *v0;
  sub_10000AA4C(&qword_1001836B0);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *Swift::Int v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v24 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v25) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    char v16 = *(unsigned char *)(*(void *)(v1 + 48) + v12);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(unsigned char *)(*(void *)(v3 + 48) + v10) = v16;
    ++*(void *)(v3 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009C400()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AA4C(&qword_100183FB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_10009C6B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AA4C(&qword_1001836F0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v2 + 16))
  {
LABEL_32:
    unint64_t result = swift_release();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v28 = v1;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = v2 + 56;
  uint64_t v6 = -1;
  if (v4 < 64) {
    uint64_t v6 = ~(-1 << v4);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    int64_t v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v25 >= v8) {
      goto LABEL_31;
    }
    unint64_t v26 = *(void *)(v5 + 8 * v25);
    ++v10;
    if (!v26)
    {
      int64_t v10 = v25 + 1;
      if (v25 + 1 >= v8) {
        goto LABEL_31;
      }
      unint64_t v26 = *(void *)(v5 + 8 * v10);
      if (!v26)
      {
        int64_t v10 = v25 + 2;
        if (v25 + 2 >= v8) {
          goto LABEL_31;
        }
        unint64_t v26 = *(void *)(v5 + 8 * v10);
        if (!v26) {
          break;
        }
      }
    }
LABEL_30:
    unint64_t v7 = (v26 - 1) & v26;
    unint64_t v12 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_6:
    uint64_t v13 = *(void *)(v2 + 48) + 24 * v12;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    int v16 = *(unsigned __int8 *)(v13 + 16);
    int v17 = *(unsigned __int8 *)(v13 + 17);
    int v18 = *(unsigned __int8 *)(v13 + 18);
    int v19 = *(unsigned __int8 *)(v13 + 19);
    if (v17) {
      int v20 = 256;
    }
    else {
      int v20 = 0;
    }
    int v21 = v20 | v16;
    if (v18) {
      int v22 = 0x10000;
    }
    else {
      int v22 = 0;
    }
    if (v19) {
      int v23 = 0x1000000;
    }
    else {
      int v23 = 0;
    }
    unsigned int v24 = v21 | v22 | v23;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10009AF00(v14, v15, v24, v3);
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v8)
  {
LABEL_31:
    swift_release();
    uint64_t v1 = v28;
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v5 + 8 * v27);
  if (v26)
  {
    int64_t v10 = v27;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v10 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_31;
    }
    unint64_t v26 = *(void *)(v5 + 8 * v10);
    ++v27;
    if (v26) {
      goto LABEL_30;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10009C8B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000AA4C(&qword_1001836E0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_10009CC64(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10000AA4C(&qword_1001837B8);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_10001FB40(0, &qword_1001804F0);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10001FB40(0, &qword_1001804F0);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

Swift::Int sub_10009CFC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000AA4C(&qword_100183FB0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          char v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      id v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *id v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_10009D164(uint64_t a1, id a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 32;
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v26 = a1 + 32;
    unint64_t v27 = *(void *)(a1 + 16);
    do
    {
      Swift::Int v28 = v6;
      uint64_t v7 = 0;
      if (v4 <= v2) {
        unint64_t v8 = v2;
      }
      else {
        unint64_t v8 = v4;
      }
      unint64_t v29 = v4;
      unint64_t v30 = v4 - v8;
      while (1)
      {
        if (!(v30 + v7))
        {
          __break(1u);
          return;
        }
        int v31 = *(unsigned __int8 *)(v5 + v4);
        id v9 = [a2 bundleIdentifier];
        if (!v9) {
          goto LABEL_9;
        }
        uint64_t v10 = v9;
        id v11 = a2;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v31) {
          break;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
        a2 = v11;
        unint64_t v4 = v29;
LABEL_20:
        id v17 = [a2 entitlements:v26];
        NSString v18 = String._bridgeToObjectiveC()();
        sub_10001FB40(0, &qword_1001836B8);
        id v19 = [v17 objectForKey:v18 ofClass:swift_getObjCClassFromMetadata()];

        if (v19)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v33, 0, sizeof(v33));
        }
        sub_100064F00((uint64_t)v33, (uint64_t)v34);
        if (!v35)
        {
          sub_10000F394((uint64_t)v34, &qword_100181560);
LABEL_8:

          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_8;
        }
        unsigned __int8 v20 = [v32 BOOLValue];

        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_26;
        }
LABEL_9:
        ++v7;
        ++v5;
        if (v4 == --v2) {
          return;
        }
      }
      swift_bridgeObjectRelease();
LABEL_15:
      if (qword_10017F778 != -1) {
        swift_once();
      }
      char v16 = sub_100093DF0(v12, v14, qword_1001836A0);
      swift_bridgeObjectRelease();
      a2 = v11;
      unint64_t v4 = v29;
      if ((v16 & 1) == 0) {
        goto LABEL_20;
      }
LABEL_26:
      uint64_t v6 = v28;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000161D4(0, v28[2] + 1, 1);
        uint64_t v6 = v36;
      }
      uint64_t v5 = v26;
      unint64_t v23 = v6[2];
      unint64_t v22 = v6[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000161D4(v22 > 1, v23 + 1, 1);
        uint64_t v6 = v36;
      }
      unint64_t v24 = v4 + 1;
      v4 += 1 + v7;
      _OWORD v6[2] = v23 + 1;
      *((unsigned char *)v6 + v23 + 32) = v31;
      BOOL v25 = v24 == v2;
      unint64_t v2 = v27;
    }
    while (!v25);
  }
}

uint64_t sub_10009D518(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10009D9F8();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    unint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v5 = *v4++;
      sub_1000998CC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void sub_10009D58C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v7 = sub_1000994F8(a1, a2, 1);
  unint64_t v23 = v7;
  if (!v7)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B150(v8, (uint64_t)qword_10018D128);
    swift_bridgeObjectRetain_n();
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      swift_bridgeObjectRetain();
      sub_100047F98(a1, a2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Fetched shareable content from %s, but could not find an associated application record", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v12 = 0;
    uint64_t v13 = 0;
    id v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    uint64_t v39 = &_swiftEmptySetSingleton;
    goto LABEL_8;
  }
  id v24 = [v7 localizedName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  id v14 = v23;
  sub_10009D164((uint64_t)&off_100168C50, v14);
  uint64_t v39 = (void *)sub_10009D518(v27);

  swift_bridgeObjectRelease();
  id v28 = [v14 appTags];
  unint64_t v29 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  char v12 = sub_100093F28(0x6E6564646968, 0xE600000000000000, v29);
  swift_bridgeObjectRelease();
  id v30 = [v14 compatibilityObject];
  id v31 = [v30 bundleType];

  if (!v31)
  {
    unint64_t v15 = v26;
LABEL_8:
    uint64_t v16 = v13;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v38 = v12;
  unint64_t v15 = v26;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v34)
  {
    uint64_t v16 = v13;
    char v12 = v38;
    goto LABEL_9;
  }
  uint64_t v16 = v13;
  if (v32 == v35 && v34 == v36)
  {
    swift_bridgeObjectRelease_n();
    char v12 = 1;
  }
  else
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v12 = v38 | v37;
  }
LABEL_10:
  id v17 = self;
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [self mainScreen];
  [v19 scale];
  double v21 = v20;

  id v22 = [v17 _applicationIconImageForBundleIdentifier:v18 format:2 scale:v21];
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = v22;
  *(void *)(a3 + 40) = v39;
  *(unsigned char *)(a3 + 48) = v12 & 1;
}

unint64_t sub_10009D9F8()
{
  unint64_t result = qword_1001836A8;
  if (!qword_1001836A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001836A8);
  }
  return result;
}

uint64_t sub_10009DA4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10009E12C();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v18 = result;
  if (v2)
  {
    unint64_t v4 = (unsigned __int8 *)(a1 + 51);
    do
    {
      Swift::Int v5 = *(void *)(v4 - 19);
      uint64_t v6 = *(void *)(v4 - 11);
      int v7 = *(v4 - 3);
      int v8 = *(v4 - 2);
      int v9 = *(v4 - 1);
      int v11 = *v4;
      v4 += 24;
      int v10 = v11;
      if (v8) {
        int v12 = 256;
      }
      else {
        int v12 = 0;
      }
      int v13 = v12 | v7;
      if (v9) {
        int v14 = 0x10000;
      }
      else {
        int v14 = 0;
      }
      if (v10) {
        int v15 = 0x1000000;
      }
      else {
        int v15 = 0;
      }
      int v16 = v13 | v14 | v15;
      swift_bridgeObjectRetain();
      sub_100099C6C((uint64_t)&v17, v5, v6, v16);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v18;
  }
  return result;
}

uint64_t sub_10009DB38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100099ABC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10009DBD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v7 - 8);
  int v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_10009E260((unint64_t *)&unk_100181510, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    int v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    id v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    unint64_t v25 = v12;
    id v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    int v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      id v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100099FA8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    id v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

unint64_t sub_10009DE78(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10000AA4C(&qword_1001836C0);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  uint64_t v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_10009E260(&qword_1001836C8, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_10009E260((unint64_t *)&unk_1001836D0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      while (1)
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      uint64_t result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_10009E12C()
{
  unint64_t result = qword_1001836E8;
  if (!qword_1001836E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001836E8);
  }
  return result;
}

void sub_10009E180(uint64_t a1)
{
  sub_10009840C(a1, *(void **)(v1 + 16));
}

void sub_10009E188(uint64_t a1)
{
  sub_100098DDC(a1, *(void **)(v1 + 16));
}

void sub_10009E190(uint64_t a1)
{
  sub_100098734(a1, *(void **)(v1 + 16));
}

void sub_10009E198(uint64_t a1)
{
  sub_100098C34(a1, *(void **)(v1 + 16));
}

uint64_t sub_10009E1A0()
{
  return sub_10009E334((uint64_t *)&unk_100183720);
}

uint64_t sub_10009E1AC(char a1)
{
  uint64_t result = sub_10000AA4C((uint64_t *)&unk_100183720);
  if (a1) {
    return CheckedContinuation.resume(returning:)();
  }
  return result;
}

uint64_t sub_10009E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009E22C()
{
  return swift_release();
}

uint64_t sub_10009E234()
{
  return sub_10009E334((uint64_t *)&unk_100183730);
}

uint64_t sub_10009E240(uint64_t a1, uint64_t a2)
{
  return sub_10009E3E0(a1, a2, (uint64_t *)&unk_100183730, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100098910);
}

uint64_t sub_10009E260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009E2A8()
{
  return sub_10009E334((uint64_t *)&unk_100183760);
}

uint64_t sub_10009E2B4(uint64_t a1, uint64_t a2)
{
  return sub_10009E3E0(a1, a2, (uint64_t *)&unk_100183760, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100098FB8);
}

unint64_t sub_10009E2D4()
{
  unint64_t result = qword_100183778;
  if (!qword_100183778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183778);
  }
  return result;
}

uint64_t sub_10009E328()
{
  return sub_10009E334(&qword_100183770);
}

uint64_t sub_10009E334(uint64_t *a1)
{
  uint64_t v2 = sub_10000AA4C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10009E3C0(uint64_t a1, uint64_t a2)
{
  return sub_10009E3E0(a1, a2, &qword_100183770, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100098634);
}

uint64_t sub_10009E3E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(sub_10000AA4C(a3) - 8);
  uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return a4(a1, a2, v8);
}

unsigned char *storeEnumTagSinglePayload for ShareableContentError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10009E510);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentError()
{
  return &type metadata for ShareableContentError;
}

unsigned char *storeEnumTagSinglePayload for SourceApplication.Capabilities(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009E614);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SourceApplication.Capabilities()
{
  return &type metadata for SourceApplication.Capabilities;
}

uint64_t destroy for SourceApplication(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SourceApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  unsigned int v6 = *(void **)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SourceApplication(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  id v6 = v5;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for SourceApplication(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SourceApplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SourceApplication(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SourceApplication(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SourceApplication()
{
  return &type metadata for SourceApplication;
}

unint64_t sub_10009E8D8()
{
  unint64_t result = qword_100183780;
  if (!qword_100183780)
  {
    sub_10000B100(&qword_100183788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183780);
  }
  return result;
}

unint64_t sub_10009E938()
{
  unint64_t result = qword_100183790;
  if (!qword_100183790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183790);
  }
  return result;
}

unint64_t sub_10009E990()
{
  unint64_t result = qword_100183798;
  if (!qword_100183798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183798);
  }
  return result;
}

uint64_t sub_10009E9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t destroy for ShareableContentTitleFormattingContext(uint64_t *a1)
{
  return sub_10009EAC4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

uint64_t sub_10009EAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a10 & 0x8000000000000000) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShareableContentTitleFormattingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  int v16 = *(_DWORD *)(a2 + 96);
  sub_10009E9E4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 96) = v16;
  return a1;
}

uint64_t assignWithCopy for ShareableContentTitleFormattingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  uint64_t v23 = *(void *)(a2 + 80);
  uint64_t v24 = *(void *)(a2 + 88);
  int v25 = *(_DWORD *)(a2 + 96);
  sub_10009E9E4(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v23;
  *(void *)(a1 + 88) = v24;
  *(_DWORD *)(a1 + 96) = v25;
  sub_10009EAC4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1));
  return a1;
}

uint64_t assignWithTake for ShareableContentTitleFormattingContext(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 96);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  long long v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 96) = v3;
  sub_10009EAC4(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareableContentTitleFormattingContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 100)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  HIDWORD(v3) = *(_DWORD *)(a1 + 76);
  LODWORD(v3) = HIDWORD(v3);
  unsigned int v2 = v3 >> 31;
  if (v2 > 0x80000000) {
    int v4 = ~v2;
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

double storeEnumTagSinglePayload for ShareableContentTitleFormattingContext(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 96) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 100) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      HIDWORD(v4) = -a2;
      LODWORD(v4) = -a2;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = (unint64_t)(v4 >> 1) << 32;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 100) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10009EE6C(uint64_t a1)
{
  return *(void *)(a1 + 72) >> 63;
}

uint64_t sub_10009EE78(uint64_t result)
{
  *(void *)(result + 72) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10009EE88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 76) = a2 << 31;
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentTitleFormattingContext()
{
  return &type metadata for ShareableContentTitleFormattingContext;
}

uint64_t sub_10009EEBC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void **)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(long long *))result;
    uint64_t v5 = 0;
    uint64_t v8 = a3 + 32;
    uint64_t v9 = _swiftEmptyArrayStorage;
    long long v13 = *(void **)(a3 + 16);
    long long v14 = (uint64_t (*)(long long *))result;
    while ((unint64_t)v5 < *(void *)(a3 + 16))
    {
      sub_10000AAF0(v8, (uint64_t)v16);
      char v10 = v7(v16);
      if (v3)
      {
        sub_10000AB98((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      if (v10)
      {
        sub_100063848(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100016254(0, v9[2] + 1, 1);
        }
        uint64_t v9 = v17;
        unint64_t v12 = v17[2];
        unint64_t v11 = v17[3];
        if (v12 >= v11 >> 1)
        {
          sub_100016254(v11 > 1, v12 + 1, 1);
          uint64_t v9 = v17;
        }
        v9[2] = v12 + 1;
        double result = sub_100063848(v15, (uint64_t)&v9[5 * v12 + 4]);
        uint64_t v6 = v13;
        uint64_t v7 = v14;
      }
      else
      {
        double result = sub_10000AB98((uint64_t)v16);
      }
      uint64_t v5 = (void *)((char *)v5 + 1);
      v8 += 40;
      if (v6 == v5)
      {
        uint64_t v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

void *sub_10009F048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v4 = sub_10000AA4C(&qword_1001838D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = sub_10000AA4C(&qword_1001838D8);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v40 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_1001838E0);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  char v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SFLockStateMonitor();
  swift_allocObject();
  uint64_t v10 = SFLockStateMonitor.init()();
  v2[6] = 0;
  v2[7] = 0;
  v2[5] = v10;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B150(v11, (uint64_t)qword_10018D128);
  swift_retain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v14 = 138412290;
    uint64_t v15 = v45;
    uint64_t v46 = v45;
    swift_retain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v36 = v15;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "ShareableContentResolver: Intializing with proximityHandoffClient %@", v14, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  v3[4] = v44;
  uint64_t v16 = type metadata accessor for ProximityHandoffInteractionContentProvider(0);
  uint64_t v17 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v18 = v17 + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider_stream;
  uint64_t v19 = v17 + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider_continuation;
  long long v20 = v42;
  *uint64_t v42 = 1;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v20, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v4);
  type metadata accessor for SFProximityHandoff.Content();
  unint64_t v21 = v37;
  uint64_t v22 = v40;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v20, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v18, v21, v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v19, v22, v43);
  *(void *)(v17
            + OBJC_IVAR____TtC9AirDropUI42ProximityHandoffInteractionContentProvider____lazy_storage___shareableContentTask) = 0;
  uint64_t v23 = v3[6];
  v3[6] = sub_1000A0F0C;
  v3[7] = v17;
  swift_retain();
  sub_100030180(v23);
  sub_10000AA4C(&qword_1001838E8);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10012A270;
  *(void *)(v24 + 56) = v16;
  *(void *)(v24 + 64) = &off_100185840;
  *(void *)(v24 + 32) = v17;
  v3[2] = v24;
  sub_10000AA4C(&qword_1001838F0);
  uint64_t v25 = type metadata accessor for SFProximityHandoff.Content.Action();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 72);
  unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_10012E260;
  unint64_t v30 = v29 + v28;
  id v31 = *(void (**)(unint64_t, void, uint64_t))(v26 + 104);
  v31(v30, enum case for SFProximityHandoff.Content.Action.open(_:), v25);
  v31(v30 + v27, enum case for SFProximityHandoff.Content.Action.send(_:), v25);
  v31(v30 + 2 * v27, enum case for SFProximityHandoff.Content.Action.share(_:), v25);
  v31(v30 + 3 * v27, enum case for SFProximityHandoff.Content.Action.transfer(_:), v25);
  uint64_t v32 = v45;
  swift_retain();
  swift_retain();
  uint64_t v33 = sub_1000A12D4(v29, v32);
  swift_release();
  swift_release();
  swift_release_n();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v3[3] = v33;
  return v3;
}

uint64_t sub_10009F6B0()
{
  uint64_t v0 = sub_10000AA4C(&qword_100183900);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000AA4C(&qword_100183908);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFProximityHandoff.Content();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v13 = (char *)&v19 - v12;
  SFProximityHandoff.Interaction.content.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000F394((uint64_t)v6, &qword_100183908);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000B150(v15, (uint64_t)qword_10018D128);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = v1;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ProximityHandoffInteractionContentProvider: content resolved", v18, 2u);
    uint64_t v1 = v20;
    swift_slowDealloc();
  }

  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  sub_10000AA4C(&qword_1001838D8);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_10009FA00(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return _swift_task_switch(sub_10009FA20, 0, 0);
}

uint64_t sub_10009FA20()
{
  uint64_t v1 = *(void *)(v0[18] + 16);
  v0[19] = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[20] = v2;
  if (v2)
  {
    v0[21] = 0;
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_10000AAF0(v3, (uint64_t)(v0 + 2));
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[6];
    v0[22] = v4;
    v0[23] = v5;
    sub_10000AB54(v0 + 2, v4);
    uint64_t v6 = *(int **)(v5 + 24);
    v0[24] = swift_getAssociatedTypeWitness();
    uint64_t v7 = type metadata accessor for Optional();
    v0[25] = v7;
    v0[26] = *(void *)(v7 - 8);
    uint64_t v8 = swift_task_alloc();
    v0[27] = v8;
    os_log_type_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[28] = v9;
    void *v9 = v0;
    v9[1] = sub_10009FC48;
    return v13(v8, v4, v5);
  }
  else
  {
    uint64_t v11 = v0[17];
    *(void *)(v11 + 32) = 0;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_10009FC48()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000A00C8;
  }
  else {
    uint64_t v2 = sub_10009FD5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10009FD5C()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    uint64_t v7 = *(void *)(v0 + 136);
    *(void *)(v0 + 80) = v2;
    *(void *)(v0 + 88) = swift_getAssociatedConformanceWitness();
    uint64_t v8 = sub_1000636E4((uint64_t *)(v0 + 56));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(v8, v1, v2);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    sub_100063848((long long *)(v0 + 56), v7);
    sub_10000AB98(v0 + 16);
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 208) + 8))(v1, *(void *)(v0 + 200));
  swift_task_dealloc();
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  sub_10000F394(v0 + 56, &qword_100183910);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168) + 1;
  sub_10000AB98(v0 + 16);
  if (v5 == v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 136);
    *(void *)(v6 + 32) = 0;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
LABEL_5:
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  uint64_t v11 = *(void *)(v0 + 168) + 1;
  *(void *)(v0 + 168) = v11;
  sub_10000AAF0(*(void *)(v0 + 152) + 40 * v11 + 32, v0 + 16);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  *(void *)(v0 + 176) = v12;
  *(void *)(v0 + 184) = v13;
  sub_10000AB54((void *)(v0 + 16), v12);
  uint64_t v14 = *(int **)(v13 + 24);
  *(void *)(v0 + 192) = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  *(void *)(v0 + 200) = v15;
  *(void *)(v0 + 208) = *(void *)(v15 - 8);
  uint64_t v16 = swift_task_alloc();
  *(void *)(v0 + 216) = v16;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  os_log_type_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v17;
  void *v17 = v0;
  v17[1] = sub_10009FC48;
  return v18(v16, v12, v13);
}

uint64_t sub_1000A00C8()
{
  uint64_t v23 = v0;
  swift_task_dealloc();
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B150(v1, (uint64_t)qword_10018D128);
  sub_10000AAF0((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    sub_10000AB54(v0 + 12, v0[15]);
    swift_getDynamicType();
    uint64_t v6 = _typeName(_:qualified:)();
    *(void *)(v4 + 4) = sub_100047F98(v6, v7, &v22);
    swift_bridgeObjectRelease();
    sub_10000AB98((uint64_t)(v0 + 12));
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v4 + 14) = v8;
    *uint64_t v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error retrieving shareable content from %s: %@", (uint8_t *)v4, 0x16u);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_10000AB98((uint64_t)(v0 + 12));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = v0[20];
  uint64_t v10 = v0[21] + 1;
  sub_10000AB98((uint64_t)(v0 + 2));
  if (v10 == v9)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = v0[17];
    *(void *)(v11 + 32) = 0;
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = v0[21] + 1;
    v0[21] = v14;
    sub_10000AAF0(v0[19] + 40 * v14 + 32, (uint64_t)(v0 + 2));
    uint64_t v15 = v0[5];
    uint64_t v16 = v0[6];
    v0[22] = v15;
    v0[23] = v16;
    sub_10000AB54(v0 + 2, v15);
    os_log_type_t v17 = *(int **)(v16 + 24);
    v0[24] = swift_getAssociatedTypeWitness();
    uint64_t v18 = type metadata accessor for Optional();
    v0[25] = v18;
    v0[26] = *(void *)(v18 - 8);
    uint64_t v19 = swift_task_alloc();
    v0[27] = v19;
    unint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[28] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10009FC48;
    return v21(v19, v15, v16);
  }
}

uint64_t sub_1000A0528(uint64_t a1, uint64_t a2)
{
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = type metadata accessor for DeviceLockState();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[35] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000A0650;
  v5[17] = v3 + 7;
  v5[18] = v2;
  return _swift_task_switch(sub_10009FA20, 0, 0);
}

uint64_t sub_1000A0650()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000A0BB8;
  }
  else {
    uint64_t v2 = sub_1000A0764;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A0764()
{
  uint64_t v30 = v0;
  uint64_t v1 = (long long *)(v0 + 56);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v2 = *(void *)(v0 + 272);
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 256);
    sub_100063848(v1, v0 + 16);
    dispatch thunk of SFLockStateMonitor.lockState.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v3, enum case for DeviceLockState.unlocked(_:), v4);
    char v6 = static DeviceLockState.== infix(_:_:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v7(v3, v4);
    v7(v2, v4);
    if (v6)
    {
      uint64_t v8 = *(void *)(*(void *)(v0 + 240) + 24);
      uint64_t v9 = swift_task_alloc();
      *(void *)(v9 + 16) = v0 + 16;
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_10009EEBC((uint64_t)sub_1000A14A0, v9, v8);
      swift_task_dealloc();
      if (*(void *)(v10 + 16))
      {
        uint64_t v12 = *(void *)(v0 + 224);
        uint64_t v11 = *(void *)(v0 + 232);
        sub_10000AAF0(v0 + 16, v0 + 176);
        uint64_t v13 = sub_1000A0C24(v11, v10);
        sub_10000AB98(v0 + 16);
        sub_100063848((long long *)(v0 + 176), v12);
        *(void *)(v12 + 40) = v13;
      }
      else
      {
        swift_bridgeObjectRelease();
        if (qword_10017F7A8 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_10000B150(v20, (uint64_t)qword_10018D128);
        sub_10000AAF0(v0 + 16, v0 + 96);
        unint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315138;
          sub_10000AAF0(v0 + 96, v0 + 136);
          sub_10000AA4C(&qword_1001804C8);
          uint64_t v24 = String.init<A>(reflecting:)();
          *(void *)(v0 + 216) = sub_100047F98(v24, v25, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000AB98(v0 + 96);
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not find any supported actions for shareable content: %s", v23, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10000AB98(v0 + 96);
        }
        sub_10000AB98(v0 + 16);
        uint64_t v26 = *(_OWORD **)(v0 + 224);
        v26[1] = 0u;
        void v26[2] = 0u;
        *uint64_t v26 = 0u;
      }
    }
    else
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10000B150(v15, (uint64_t)qword_10018D128);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not returning shareable content because device is locked", v18, 2u);
        swift_slowDealloc();
      }
      uint64_t v19 = *(_OWORD **)(v0 + 224);

      sub_10000AB98(v0 + 16);
      v19[1] = 0u;
      v19[2] = 0u;
      *uint64_t v19 = 0u;
    }
  }
  else
  {
    uint64_t v14 = *(_OWORD **)(v0 + 224);
    sub_10000F394((uint64_t)v1, &qword_100183910);
    _OWORD *v14 = 0u;
    v14[1] = 0u;
    v14[2] = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_1000A0BB8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A0C24(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  if (*(void *)(a2 + 16) >= result) {
    int64_t v4 = result;
  }
  else {
    int64_t v4 = *(void *)(a2 + 16);
  }
  os_log_type_t v17 = _swiftEmptyArrayStorage;
  sub_100016254(0, v4, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  uint64_t v7 = a2 + 32;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = v6 - 1;
  while (1)
  {
    double result = sub_10000AAF0(v7, (uint64_t)v16);
    unint64_t v11 = v5[2];
    os_log_type_t v17 = v5;
    if ((uint64_t)v11 >= v3)
    {
      if (v9 >= v11) {
        goto LABEL_31;
      }
      sub_10000AB98((uint64_t)&v5[5 * v9 + 4]);
      double result = sub_100063848(v16, (uint64_t)&v5[5 * v9 + 4]);
      uint64_t v5 = v17;
      if ((uint64_t)++v9 < v3)
      {
        if (v10 == v8) {
          break;
        }
      }
      else
      {
        if (v10 == v8)
        {
          swift_bridgeObjectRelease_n();
          return (uint64_t)v5;
        }
        unint64_t v9 = 0;
      }
      goto LABEL_19;
    }
    unint64_t v12 = v5[3];
    if (v11 >= v12 >> 1)
    {
      sub_100016254(v12 > 1, v11 + 1, 1);
      uint64_t v5 = v17;
    }
    _OWORD v5[2] = v11 + 1;
    double result = sub_100063848(v16, (uint64_t)&v5[5 * v11 + 4]);
    if (v10 == v8) {
      break;
    }
LABEL_19:
    ++v8;
    v7 += 40;
    if (v8 >= *(void *)(a2 + 16))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_28;
  }
  int64_t v13 = v5[2];
  *(void *)&v16[0] = _swiftEmptyArrayStorage;
  double result = sub_100016254(0, v13, 0);
  if (v13 < (uint64_t)v9)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
  unint64_t v14 = v5[2];
  if (v14 >= v9 && v14 >= v13)
  {
    uint64_t v15 = swift_retain();
    sub_1000A0F14(v15, (uint64_t)(v5 + 4), v9, (2 * v13) | 1);
    swift_bridgeObjectRelease();
    sub_1000A0F14((uint64_t)v5, (uint64_t)(v5 + 4), 0, (2 * v9) | 1);
    return *(void *)&v16[0];
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000A0E90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100030180(*(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShareableContentResolver()
{
  return self;
}

uint64_t sub_1000A0F0C()
{
  return sub_10009F6B0();
}

uint64_t sub_1000A0F14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *(void *)(*v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v13 = *(void *)(v7 + 24) >> 1, v13 < v9))
  {
    if (v8 <= v9) {
      int64_t v14 = v8 + v6;
    }
    else {
      int64_t v14 = v8;
    }
    sub_100016254(isUniquelyReferenced_nonNull_native, v14, 1);
    uint64_t v7 = *v4;
    int64_t v13 = *(void *)(*v4 + 24) >> 1;
  }
  uint64_t v15 = *(void *)(v7 + 16);
  uint64_t v16 = v13 - v15;
  if (v5 != a3)
  {
    if (v16 >= v6)
    {
      if (v6 < 0) {
        goto LABEL_51;
      }
      unint64_t v19 = v7 + 40 * v15 + 32;
      unint64_t v20 = a2 + 40 * a3;
      if (v20 < v19 + 40 * v6 && v19 < v20 + 40 * v6) {
        goto LABEL_51;
      }
      sub_10000AA4C(&qword_100180098);
      swift_arrayInitWithCopy();
      if (v6)
      {
        uint64_t v22 = *(void *)(v7 + 16);
        BOOL v23 = __OFADD__(v22, v6);
        uint64_t v24 = v22 + v6;
        if (v23)
        {
LABEL_50:
          __break(1u);
LABEL_51:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        *(void *)(v7 + 16) = v24;
      }
      uint64_t v17 = v5;
      if (v6 != v16) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v6 > 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v17 = a3;
  if (v16)
  {
LABEL_12:
    return swift_unknownObjectRelease();
  }
LABEL_26:
  int64_t v25 = *(void *)(v7 + 16);
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  sub_1000A1508((uint64_t)&v34, (uint64_t)&v32);
  while (v33)
  {
    sub_10000F394((uint64_t)&v32, &qword_100183918);
    uint64_t v27 = *v4;
    unint64_t v28 = *(void *)(*v4 + 24);
    int64_t v26 = v28 >> 1;
    if ((uint64_t)(v28 >> 1) < v25 + 1)
    {
      sub_100016254(v28 > 1, v25 + 1, 1);
      uint64_t v27 = *v4;
      int64_t v26 = *(void *)(*v4 + 24) >> 1;
    }
    swift_retain();
    sub_1000A1508((uint64_t)&v34, (uint64_t)&v30);
    if (v31)
    {
      if (v25 > v26) {
        int64_t v26 = v25;
      }
      uint64_t v29 = v27 + 40 * v25 + 32;
      do
      {
        sub_100063848(&v30, (uint64_t)&v32);
        if (v26 == v25)
        {
          sub_10000AB98((uint64_t)&v32);
          swift_release();
          int64_t v25 = v26;
          goto LABEL_29;
        }
        sub_10000F394((uint64_t)&v34, &qword_100183918);
        sub_100063848(&v32, v29);
        if (v17 == v5)
        {
          uint64_t v36 = 0;
          uint64_t v17 = v5;
          long long v34 = 0u;
          long long v35 = 0u;
        }
        else
        {
          if (v17 < a3 || v17 >= v5)
          {
            __break(1u);
            goto LABEL_46;
          }
          sub_10000AAF0(a2 + 40 * v17++, (uint64_t)&v34);
        }
        sub_1000A1508((uint64_t)&v34, (uint64_t)&v30);
        v29 += 40;
        ++v25;
      }
      while (v31);
    }
    swift_release();
    sub_10000F394((uint64_t)&v30, &qword_100183918);
    int64_t v26 = v25;
LABEL_29:
    *(void *)(*v4 + 16) = v26;
    sub_1000A1508((uint64_t)&v34, (uint64_t)&v32);
  }
  sub_10000F394((uint64_t)&v34, &qword_100183918);
  swift_unknownObjectRelease();
  return sub_10000F394((uint64_t)&v32, &qword_100183918);
}

void *sub_1000A12D4(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    unint64_t v20 = _swiftEmptyArrayStorage;
    sub_100016254(0, v2, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v16 = type metadata accessor for SFProximityHandoff.Content.Action();
    uint64_t v6 = *(void *)(v16 - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v15 = *(void *)(v6 + 72);
    uint64_t v8 = type metadata accessor for ProximityHandoffContentAction(0);
    uint64_t v9 = sub_1000A1C50(&qword_1001838F8, (void (*)(uint64_t))type metadata accessor for ProximityHandoffContentAction);
    uint64_t v10 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      uint64_t v18 = v8;
      uint64_t v19 = v9;
      unint64_t v11 = sub_1000636E4((uint64_t *)&v17);
      (*v10)((char *)v11 + *(int *)(v8 + 20), v7, v16);
      uint64_t *v11 = a2;
      unint64_t v20 = v3;
      unint64_t v12 = v3[2];
      unint64_t v13 = v3[3];
      swift_retain();
      if (v12 >= v13 >> 1)
      {
        sub_100016254(v13 > 1, v12 + 1, 1);
        uint64_t v3 = v20;
      }
      v3[2] = v12 + 1;
      sub_100063848(&v17, (uint64_t)&v3[5 * v12 + 4]);
      v7 += v15;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1000A14A0(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10000AB54(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2, v3, v4) & 1;
}

uint64_t sub_1000A1508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100183918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1000A1570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = type metadata accessor for SendOverAirDropAction(0);
  __chkstk_darwin(v36);
  char v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SFLockStateMonitor();
  swift_allocObject();
  uint64_t v7 = SFLockStateMonitor.init()();
  v2[6] = 0;
  v2[7] = 0;
  v2[5] = v7;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B150(v8, (uint64_t)qword_10018D128);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 138412290;
    uint64_t v38 = a1;
    swift_retain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = a1;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ShareableContentResolver: Intializing with airDropClient %@", v11, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  v3[4] = a2;
  sub_10000AA4C(&qword_1001838E8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10012E260;
  int64_t v14 = self;
  swift_retain();
  id v15 = [v14 sharedInstance];
  id v16 = [v15 conversationManager];

  *(void *)(v13 + 56) = &type metadata for ActiveSharePlaySessionProvider;
  *(void *)(v13 + 64) = &off_1001859A8;
  *(void *)(v13 + 32) = v16;
  id v17 = [objc_allocWithZone((Class)SWShareableContentExtractor) init];
  *(void *)(v13 + 96) = sub_1000A1BAC();
  *(void *)(v13 + 104) = &off_1001856F8;
  *(void *)(v13 + 72) = v17;
  *(void *)(v13 + 136) = &type metadata for UserActivityShareableContentProvider;
  *(void *)(v13 + 144) = &off_100185980;
  *(void *)(v13 + 176) = &type metadata for FrontmostAppShareableContentProvider;
  *(void *)(v13 + 184) = &off_100185958;
  v3[2] = v13;
  swift_retain();
  uint64_t v18 = (uint64_t)v37;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v19 = v36;
  *(void *)(v18 + *(int *)(v36 + 20)) = a1;
  sub_10000AA4C(&qword_100180090);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_10012E270;
  starteCGFloat d = type metadata accessor for StartSharePlayAction(0);
  *(void *)(v20 + 56) = started;
  *(void *)(v20 + 64) = sub_1000A1C50(&qword_100183928, (void (*)(uint64_t))type metadata accessor for StartSharePlayAction);
  uint64_t v22 = sub_1000636E4((uint64_t *)(v20 + 32));
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  *(uint64_t *)((char *)v22 + *(int *)(started + 20)) = a2;
  uint64_t v23 = type metadata accessor for StartNearbySharePlayAction(0);
  *(void *)(v20 + 96) = v23;
  *(void *)(v20 + 104) = sub_1000A1C50(&qword_100183930, (void (*)(uint64_t))type metadata accessor for StartNearbySharePlayAction);
  uint64_t v24 = sub_1000636E4((uint64_t *)(v20 + 72));
  LocalizedStringResource.init(stringLiteral:)();
  sub_1000A1BEC(v18, (uint64_t)v24 + *(int *)(v23 + 20));
  uint64_t active = type metadata accessor for AddToActiveSharePlaySessionAction(0);
  *(void *)(v20 + 136) = active;
  *(void *)(v20 + 144) = sub_1000A1C50(&qword_100183938, (void (*)(uint64_t))type metadata accessor for AddToActiveSharePlaySessionAction);
  int64_t v26 = sub_1000636E4((uint64_t *)(v20 + 112));
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  *(uint64_t *)((char *)v26 + *(int *)(active + 20)) = a2;
  uint64_t v27 = *(int *)(active + 24);
  id v28 = [v14 sharedInstance];
  id v29 = [v28 conversationManager];

  *(uint64_t *)((char *)v26 + v27) = (uint64_t)v29;
  *(void *)(v20 + 176) = v19;
  *(void *)(v20 + 184) = sub_1000A1C50(&qword_100183940, (void (*)(uint64_t))type metadata accessor for SendOverAirDropAction);
  long long v30 = sub_1000636E4((uint64_t *)(v20 + 152));
  sub_1000A1BEC(v18, (uint64_t)v30);
  uint64_t v31 = type metadata accessor for StartCollaborationAction(0);
  *(void *)(v20 + 216) = v31;
  *(void *)(v20 + 224) = sub_1000A1C50(&qword_100183948, (void (*)(uint64_t))type metadata accessor for StartCollaborationAction);
  long long v32 = sub_1000636E4((uint64_t *)(v20 + 192));
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  *(uint64_t *)((char *)v32 + *(int *)(v31 + 20)) = a2;
  uint64_t v33 = *(int *)(v31 + 24);
  *(uint64_t *)((char *)v32 + v33) = (uint64_t)[objc_allocWithZone((Class)SWShareableContentExtractor) init];
  sub_1000A1C98(v18);
  v3[3] = v20;
  return v3;
}

unint64_t sub_1000A1BAC()
{
  unint64_t result = qword_100183920;
  if (!qword_100183920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100183920);
  }
  return result;
}

uint64_t sub_1000A1BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SendOverAirDropAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A1C50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A1C98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SendOverAirDropAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000A1DEC()
{
  return sub_1000A2394(type metadata accessor for CNSecureContactViewController);
}

uint64_t type metadata accessor for CNSecureContactViewController()
{
  return self;
}

void sub_1000A1E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = &v4[OBJC_IVAR____TtC9AirDropUI28ContactDetailsViewController_contactDetails];
  long long v9 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v8 + 5) = v9;
  *((_DWORD *)v8 + 24) = *(_DWORD *)(a1 + 96);
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
  *((_OWORD *)v8 + 1) = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v8 + 3) = v11;
  unint64_t v12 = &v4[OBJC_IVAR____TtC9AirDropUI28ContactDetailsViewController_dismissHandler];
  *(void *)unint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  id v13 = objc_allocWithZone((Class)CNContactStore);
  swift_retain();
  sub_10007CD9C(a1);
  id v14 = [v13 init];
  NSString v15 = String._bridgeToObjectiveC()();
  sub_1000A2ABC(a1);
  sub_10000AA4C((uint64_t *)&unk_100182AC0);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10012A280;
  *(void *)(v16 + 32) = [self descriptorForRequiredKeys];
  uint64_t v28 = v16;
  specialized Array._endMutation()();
  sub_10000AA4C(&qword_100182AB0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [v14 contactForIdentifier:v15 keysToFetch:isa];

  if (v18)
  {
    type metadata accessor for CNSecureContactViewController();
    id v19 = [(id)swift_getObjCClassFromMetadata() viewControllerForContact:v18];
    [v19 setDisplayMode:2];
    [v19 setAllowsEditing:1];
    [v19 setActions:260];
    v27.receiver = v4;
    v27.super_class = (Class)type metadata accessor for ContactDetailsViewController();
    id v20 = [super initWithRootViewController:v19];
    [v19 setDelegate:v20];
    sub_10001FB40(0, (unint64_t *)&qword_100183A20);
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v22 = (void *)swift_allocObject();
    void v22[2] = v21;
    v22[3] = a2;
    v22[4] = a3;
    swift_retain();
    uint64_t v23 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    id v24 = [v19 navigationItem];
    sub_10001FB40(0, &qword_100183A28);
    id v25 = v23;
    v29.value.super.super.Class isa = (Class)v23;
    v29.is_nil = 0;
    Class v26 = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v29, v30).super.super.isa;
    [v24 setLeftBarButtonItem:v26];

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000A2188(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    int64_t v5 = (void *)Strong;
    a3();
  }
}

id sub_1000A237C()
{
  return sub_1000A2394(type metadata accessor for ContactDetailsViewController);
}

id sub_1000A2394(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for ContactDetailsViewController()
{
  return self;
}

uint64_t destroy for ContactDetailsView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ContactDetailsView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ContactDetailsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactDetailsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactDetailsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactDetailsView()
{
  return &type metadata for ContactDetailsView;
}

unint64_t sub_1000A28A4()
{
  unint64_t result = qword_100183A10;
  if (!qword_100183A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183A10);
  }
  return result;
}

void sub_1000A28F8()
{
  long long v1 = *(_OWORD *)(v0 + 80);
  v6[4] = *(_OWORD *)(v0 + 64);
  v6[5] = v1;
  int v7 = *(_DWORD *)(v0 + 96);
  long long v2 = *(_OWORD *)(v0 + 16);
  v6[0] = *(_OWORD *)v0;
  v6[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  _OWORD v6[2] = *(_OWORD *)(v0 + 32);
  v6[3] = v3;
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  objc_allocWithZone((Class)type metadata accessor for ContactDetailsViewController());
  sub_10007CD9C((uint64_t)v6);
  swift_retain();
  sub_1000A1E28((uint64_t)v6, v4, v5);
}

uint64_t sub_1000A2978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A2A68();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A29DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A2A68();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000A2A40()
{
}

unint64_t sub_1000A2A68()
{
  unint64_t result = qword_100183A18;
  if (!qword_100183A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100183A18);
  }
  return result;
}

uint64_t sub_1000A2ABC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A2B30()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A2B68()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000A2BA8(uint64_t a1)
{
  sub_1000A2188(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void *sub_1000A2BB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  long long v2 = (char *)(swift_bridgeObjectRetain() + 51);
  long long v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = *(void *)(v2 - 19);
    uint64_t v5 = *(void *)(v2 - 11);
    char v6 = *(v2 - 2);
    char v7 = *(v2 - 1);
    char v12 = *v2;
    char v13 = *(v2 - 3);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v3 = sub_1000B57C0(0, v3[2] + 1, 1, v3);
    }
    unint64_t v9 = v3[2];
    unint64_t v8 = v3[3];
    if (v9 >= v8 >> 1) {
      long long v3 = sub_1000B57C0((void *)(v8 > 1), v9 + 1, 1, v3);
    }
    v2 += 24;
    v3[2] = v9 + 1;
    long long v10 = &v3[3 * v9];
    v10[4] = v4;
    v10[5] = v5;
    *((unsigned char *)v10 + 48) = v13;
    *((unsigned char *)v10 + 49) = v6;
    *((unsigned char *)v10 + 50) = v7;
    *((unsigned char *)v10 + 51) = v12;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000A2CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v49 = a2;
  uint64_t v52 = sub_10000AA4C(&qword_100183E80);
  uint64_t v43 = *(void *)(v52 - 8);
  uint64_t v6 = __chkstk_darwin(v52);
  Swift::Int v48 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v54 = (uint64_t)&v43 - v9;
  __chkstk_darwin(v8);
  int v47 = (char *)&v43 - v10;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v45 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v46 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v51 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v50 = a3;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  int64_t v53 = v16;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (j << 6))
  {
    uint64_t v23 = v51;
    uint64_t v24 = *(void *)(v51 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = v26;
    uint64_t v28 = v24 + *(void *)(v26 + 72) * i;
    UIAction_optional v29 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    UIMenu_optional v30 = v47;
    v29(v47, v28, v25);
    uint64_t v31 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    uint64_t v32 = v52;
    *(void *)&v30[*(int *)(v52 + 48)] = v31;
    uint64_t v33 = (uint64_t)v30;
    uint64_t v34 = v54;
    sub_10000F2CC(v33, v54, &qword_100183E80);
    uint64_t v35 = *(int *)(v32 + 48);
    uint64_t v36 = v48;
    v29(v48, v34, v25);
    *(void *)&v36[v35] = *(void *)(v34 + v35);
    swift_retain();
    swift_retain();
    uint64_t v37 = Activity.id.getter();
    uint64_t v39 = v38;
    swift_release();
    if (v37 == v49 && v39 == v50)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v25);
LABEL_28:
      swift_release();
      uint64_t v42 = v44;
      sub_10000F2CC(v54, v44, &qword_100183E80);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v42, 0, 1, v52);
      return swift_bridgeObjectRelease();
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v25);
    if (v41) {
      goto LABEL_28;
    }
    uint64_t result = sub_10000F394(v54, &qword_100183E80);
    int64_t v16 = v53;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v19 >= v46) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v45 + 8 * v19);
    int64_t j = v16 + 1;
    if (v20) {
      goto LABEL_19;
    }
    int64_t j = v16 + 2;
    if (v16 + 2 >= v46) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v45 + 8 * j);
    if (v20) {
      goto LABEL_19;
    }
    int64_t j = v16 + 3;
    if (v16 + 3 >= v46) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v45 + 8 * j);
    if (v20) {
      goto LABEL_19;
    }
    int64_t j = v16 + 4;
    if (v16 + 4 >= v46) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v45 + 8 * j);
    if (v20) {
      goto LABEL_19;
    }
    uint64_t v22 = v16 + 5;
    if (v16 + 5 >= v46)
    {
LABEL_29:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v52);
      return swift_bridgeObjectRelease();
    }
    unint64_t v20 = *(void *)(v45 + 8 * v22);
    for (int64_t j = v16 + 5; !v20; ++v22)
    {
      int64_t j = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_32;
      }
      if (j >= v46) {
        goto LABEL_29;
      }
      unint64_t v20 = *(void *)(v45 + 8 * j);
    }
LABEL_19:
    unint64_t v14 = (v20 - 1) & v20;
    int64_t v53 = j;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1000A3148(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  uint64_t v17 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v18 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v6 = 0;
  int64_t v16 = result;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      int64_t v19 = v6;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v18) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v17 + 8 * v10);
    int64_t v12 = v6 + 1;
    if (!v11)
    {
      int64_t v12 = v6 + 2;
      if (v6 + 2 >= v18) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v17 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v6 + 3;
        if (v6 + 3 >= v18) {
          goto LABEL_29;
        }
        unint64_t v11 = *(void *)(v17 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v6 + 4;
          if (v6 + 4 >= v18) {
            goto LABEL_29;
          }
          unint64_t v11 = *(void *)(v17 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v4 = (v11 - 1) & v11;
    int64_t v19 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    unint64_t v14 = *(void **)(v1[7] + 8 * v9);
    swift_getKeyPath();
    swift_getKeyPath();
    id v15 = v14;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v29 > 0xFFFFFFFEFFFFFFFFLL)
    {

      uint64_t v7 = &_swiftEmptySetSingleton;
    }
    else
    {
      uint64_t v7 = (void *)v26;
      swift_bridgeObjectRetain();
      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10005E748(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = (void *)v24;
      }
      else
      {
        sub_10005E748(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
      }
      uint64_t v1 = v16;
    }
    int64_t v6 = v19;
    uint64_t result = (void *)sub_1000B5A44((uint64_t)v7);
  }
  uint64_t v13 = v6 + 5;
  if (v6 + 5 >= v18)
  {
LABEL_29:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v11 = *(void *)(v17 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v6 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v18) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v17 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_1000A3464(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C((uint64_t *)&unk_100181700);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_100048730(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A3580(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C((uint64_t *)&unk_100183FA0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_100048730(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A369C(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100183FE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(&qword_100181458);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F330(v12, (uint64_t)v5, &qword_100183FE0);
    unint64_t result = sub_1000487A8((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for SFAirDrop.TransferIdentifier();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A3890(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000AA4C(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    unint64_t v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F330(v16, (uint64_t)v9, a2);
    unint64_t result = sub_10004865C((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A3A7C(uint64_t a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100183F60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(&qword_100181530);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F330(v12, (uint64_t)v5, &qword_100183F60);
    unint64_t result = sub_10004865C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _OWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A3C70(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(&qword_100183D28);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F330(v6, (uint64_t)&v13, (uint64_t *)&unk_100183D30);
    uint64_t v7 = v13;
    unint64_t result = sub_1000488C0(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000627DC(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A3DA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AA4C(&qword_100184018);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F330(v6, (uint64_t)v15, &qword_100184020);
    unint64_t result = sub_10004887C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000627DC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A3EE4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

BOOL sub_1000A3F0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000A3F20()
{
  return 0;
}

uint64_t sub_1000A3F2C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1000A3F5C(uint64_t a1)
{
  unint64_t v2 = sub_1000B5178();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3F98(uint64_t a1)
{
  unint64_t v2 = sub_1000B5178();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3FD4(uint64_t a1)
{
  return sub_10000AB98(a1);
}

uint64_t sub_1000A3FFC(void *a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_100183C78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AB54(a1, a1[3]);
  sub_1000B5178();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int sub_1000A410C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A4144()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A4178(void *a1)
{
  uint64_t v3 = sub_10000AA4C(&qword_100183CA8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AB54(a1, a1[3]);
  sub_1000B51CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_1000B4FD0(&qword_100183CB0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for NearbySharingInteractionAttributes(0);
    v8[14] = 1;
    type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
    sub_1000B4FD0(&qword_100183CB8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000A4378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = sub_10000AA4C((uint64_t *)&unk_100185A70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000AA4C(&qword_100183C88);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v12[*(int *)(v13 + 28)];
  uint64_t v15 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v27 = v14;
  v16(v14, 1, 1, v15);
  sub_10000AB54(a1, a1[3]);
  sub_1000B51CC();
  uint64_t v17 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    sub_10000AB98((uint64_t)a1);
    return sub_10000F394(v27, (uint64_t *)&unk_100185A70);
  }
  else
  {
    uint64_t v18 = v22;
    char v29 = 0;
    sub_1000B4FD0(&qword_100183C98, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v7, v24);
    char v28 = 1;
    sub_1000B4FD0(&qword_100183CA0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v25);
    sub_10004FE60((uint64_t)v5, v27, (uint64_t *)&unk_100185A70);
    sub_1000BCFE0((uint64_t)v12, v21, type metadata accessor for NearbySharingInteractionAttributes);
    sub_10000AB98((uint64_t)a1);
    return sub_1000BD048((uint64_t)v12, type metadata accessor for NearbySharingInteractionAttributes);
  }
}

uint64_t sub_1000A47AC()
{
  if (*v0) {
    return 0x546572756C696166;
  }
  else {
    return 0x7463617265746E69;
  }
}

uint64_t sub_1000A47FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BACD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A4824(uint64_t a1)
{
  unint64_t v2 = sub_1000B51CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A4860(uint64_t a1)
{
  unint64_t v2 = sub_1000B51CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A489C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A4378(a1, a2);
}

uint64_t sub_1000A48B4(void *a1)
{
  return sub_1000A4178(a1);
}

id sub_1000A48CC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for NearbySharingInteractionCoordinator(0)) init];
  qword_10018D0C0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000A4900()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateAirDropNearbySharingInteractionsTask;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateAirDropNearbySharingInteractionsTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v6 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contentResolver;
  *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contentResolver) = 0;
  uint64_t result = swift_release();
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient);
  if (v8)
  {
    uint64_t v9 = qword_10017F7A8;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B150(v10, (uint64_t)qword_10018D128);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v22 = v4;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v23 = v5;
      uint64_t v24 = v8;
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_retain();
      uint64_t v4 = v22;
      uint64_t v5 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v8;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Configuring airDropClient: %@", v13, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contactDetailsProvider);
    type metadata accessor for ShareableContentResolver();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v16 = sub_1000A1570(v8, v15);
    swift_release();
    swift_release();
    *(void *)(v1 + v6) = v16;
    swift_retain();
    swift_release();
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v19 = static MainActor.shared.getter();
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v19;
    v20[3] = &protocol witness table for MainActor;
    v20[4] = v8;
    v20[5] = v18;
    v20[6] = v16;
    swift_release();
    *(void *)(v1 + v5) = sub_10010C15C((uint64_t)v4, (uint64_t)&unk_100183FC0, (uint64_t)v20);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A4CD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  uint64_t result = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateProximityHandoffInteractionsTask;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateProximityHandoffInteractionsTask))
  {
    swift_retain();
    Task.cancel()();
    uint64_t result = swift_release();
  }
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_proximityHandoffClient);
  if (v7)
  {
    uint64_t v8 = qword_10017F7A8;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B150(v9, (uint64_t)qword_10018D128);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v19[0] = v6;
      v19[1] = v7;
      uint64_t v14 = (void *)v13;
      *(_DWORD *)os_log_type_t v12 = 138412290;
      swift_retain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v7;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Configuring proximityHandoffClient: %@", v12, 0xCu);
      sub_10000AA4C(&qword_100180510);
      swift_arrayDestroy();
      uint64_t v6 = v19[0];
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    swift_retain();
    uint64_t v17 = static MainActor.shared.getter();
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = v17;
    void v18[3] = &protocol witness table for MainActor;
    v18[4] = v7;
    v18[5] = v16;
    swift_release();
    *(void *)(v1 + v6) = sub_10010C15C((uint64_t)v5, (uint64_t)&unk_100183F78, (uint64_t)v18);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1000A5008(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v65 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v60 = (char *)&v52 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v57 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000AA4C((uint64_t *)&unk_100183D60);
  __chkstk_darwin(v66);
  uint64_t v67 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v19 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v52 - v21;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v52 - v25;
  if (a1)
  {
    uint64_t v53 = v24;
    uint64_t v59 = v9;
    uint64_t v54 = v5;
    uint64_t v55 = v3;
    uint64_t v56 = v2;
    Activity.attributes.getter();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v27(v26, v18, v12);
    sub_1000BD048((uint64_t)v18, type metadata accessor for NearbySharingInteractionAttributes);
    uint64_t v58 = v13;
    char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v29 = 1;
    v28(v26, 0, 1, v12);
    if (*(void *)&v68[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity])
    {
      swift_retain();
      Activity.attributes.getter();
      swift_release();
      v27(v22, v18, v12);
      sub_1000BD048((uint64_t)v18, type metadata accessor for NearbySharingInteractionAttributes);
      uint64_t v29 = 0;
    }
    v28(v22, v29, 1, v12);
    uint64_t v30 = v67;
    uint64_t v31 = v67 + *(int *)(v66 + 48);
    sub_10000F330((uint64_t)v26, v67, &qword_100180580);
    sub_10000F330((uint64_t)v22, v31, &qword_100180580);
    uint64_t v32 = v58;
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    if (v33(v30, 1, v12) == 1)
    {
      sub_10000F394((uint64_t)v22, &qword_100180580);
      sub_10000F394((uint64_t)v26, &qword_100180580);
      int v34 = v33(v31, 1, v12);
      uint64_t v35 = v68;
      uint64_t v36 = v59;
      if (v34 == 1)
      {
        sub_10000F394(v30, &qword_100180580);
        return;
      }
    }
    else
    {
      uint64_t v37 = v53;
      sub_10000F330(v30, v53, &qword_100180580);
      int v38 = v33(v31, 1, v12);
      uint64_t v36 = v59;
      if (v38 != 1)
      {
        uint64_t v39 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v57, v31, v12);
        sub_1000B4FD0(&qword_100183D80, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v41 = *(void (**)(char *, uint64_t))(v32 + 8);
        v41(v39, v12);
        sub_10000F394((uint64_t)v22, &qword_100180580);
        sub_10000F394((uint64_t)v26, &qword_100180580);
        v41((char *)v37, v12);
        sub_10000F394(v30, &qword_100180580);
        uint64_t v35 = v68;
        if (v40) {
          return;
        }
        goto LABEL_11;
      }
      sub_10000F394((uint64_t)v22, &qword_100180580);
      sub_10000F394((uint64_t)v26, &qword_100180580);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v12);
      uint64_t v35 = v68;
    }
    sub_10000F394(v30, (uint64_t *)&unk_100183D60);
LABEL_11:
    sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
    uint64_t v42 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    uint64_t v43 = v60;
    + infix(_:_:)();
    uint64_t v68 = *(char **)(v61 + 8);
    uint64_t v44 = v36;
    uint64_t v45 = v62;
    ((void (*)(char *, uint64_t))v68)(v44, v62);
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v35;
    aBlock[4] = sub_1000BCA0C;
    aBlock[5] = v46;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100119678;
    aBlock[3] = &unk_10016C038;
    int v47 = _Block_copy(aBlock);
    id v48 = v35;
    swift_release();
    uint64_t v49 = v63;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1000B4FD0(&qword_100183630, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000AA4C((uint64_t *)&unk_100183D70);
    sub_10000F288(&qword_100183638, (uint64_t *)&unk_100183D70);
    uint64_t v50 = v65;
    uint64_t v51 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v47);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v49, v54);
    ((void (*)(char *, uint64_t))v68)(v43, v45);
  }
}

uint64_t sub_1000A58BC()
{
  return sub_100085AF4();
}

uint64_t sub_1000A58D0()
{
  return sub_100085AF4();
}

uint64_t sub_1000A58E4(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_1000B90E4(a1, (uint64_t)sub_1000B9034, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

id sub_1000A5970()
{
  uint64_t v1 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener);
  }
  else
  {
    id v4 = objc_allocWithZone((Class)IMSPICollaborationMessageListener);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithListenerID:v5];

    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

char *sub_1000A5A18()
{
  uint64_t v1 = sub_10000AA4C(&qword_100183F50);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_airDropClient] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contentResolver] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_proximityHandoffClient] = 0;
  *(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity] = 0;
  NSString v5 = &v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator__airDropNearbySharingInteractionViewModelsByID];
  id v6 = v0;
  v31[0] = sub_1000A3890((uint64_t)_swiftEmptyArrayStorage, &qword_100183D00, (uint64_t *)&unk_100183D10);
  sub_10000AA4C(&qword_100183AE0);
  Published.init(initialValue:)();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
  v7(v5, v4, v1);
  id v8 = &v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator__proximityHandoffNearbySharingInteractionViewModelsByID];
  v31[0] = sub_1000A3890((uint64_t)_swiftEmptyArrayStorage, &qword_100183D00, (uint64_t *)&unk_100183D10);
  Published.init(initialValue:)();
  v7(v8, v4, v1);
  uint64_t v9 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID;
  *(void *)&v6[v9] = sub_1000A3890((uint64_t)_swiftEmptyArrayStorage, &qword_100183E78, &qword_100181520);
  uint64_t v10 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID;
  *(void *)&v6[v10] = sub_1000A3890((uint64_t)_swiftEmptyArrayStorage, &qword_100183F68, &qword_100181528);
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateAirDropNearbySharingInteractionsTask] = 0;
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateProximityHandoffInteractionsTask] = 0;
  uint64_t v11 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID;
  *(void *)&v6[v11] = sub_1000A3A7C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator____lazy_storage___collaborationMessageListener] = 0;
  id v12 = [objc_allocWithZone((Class)CNContactStore) init];
  v31[3] = sub_10001FB40(0, &qword_100183F58);
  v31[4] = &off_10016B538;
  v31[0] = v12;
  type metadata accessor for ContactDetailsProvider();
  uint64_t v13 = swift_allocObject();
  sub_10000AAF0((uint64_t)v31, v13 + 16);
  uint64_t v14 = self;
  id v15 = v12;
  id v16 = [v14 sharedManager];
  sub_10000AB98((uint64_t)v31);
  *(void *)(v13 + 56) = v16;

  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contactDetailsProvider] = v13;
  id v17 = [self sharedInstance];
  id v18 = [v17 conversationManager];

  *(void *)&v6[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager] = v18;
  uint64_t v19 = (objc_class *)type metadata accessor for NearbySharingInteractionCoordinator(0);
  v30.receiver = v6;
  v30.super_class = v19;
  uint64_t v20 = (char *)[v30 init];
  uint64_t v21 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager;
  uint64_t v22 = *(void **)&v20[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_conversationManager];
  sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
  uint64_t v23 = v20;
  id v24 = v22;
  uint64_t v25 = (void *)static OS_dispatch_queue.main.getter();
  [v24 addDelegate:v23 queue:v25];

  [*(id *)&v20[v21] registerWithCompletionHandler:0];
  id v26 = sub_1000A5970();
  [v26 setDelegate:v23];

  id v27 = sub_1000A5970();
  [v27 startListening];

  return v23;
}

id sub_1000A5E50()
{
  if (*(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateAirDropNearbySharingInteractionsTask])
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  if (*(void *)&v0[OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_updateProximityHandoffInteractionsTask])
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  id v1 = sub_1000A5970();
  [v1 stopListening];

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NearbySharingInteractionCoordinator(0);
  [super dealloc];
}

uint64_t sub_1000A60B4()
{
  return type metadata accessor for NearbySharingInteractionCoordinator(0);
}

uint64_t type metadata accessor for NearbySharingInteractionCoordinator(uint64_t a1)
{
  return sub_100018BDC(a1, (uint64_t *)&unk_100183AC8);
}

void sub_1000A60DC()
{
  sub_1000B3208();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A61AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AD5BC(a1, a2);
  if (v7)
  {
    id v22 = v7;
    if (sub_10005D840() == 1)
    {
      if (qword_10017F7A8 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10000B150(v8, (uint64_t)qword_10018D128);
      id v9 = v22;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)id v12 = 136315138;
        uint64_t v24 = v13;
        type metadata accessor for UUID();
        sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v23 = sub_100047F98(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Ending nearby sharing interaction with ID: %s due to ActivityKit scene disconnecting", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
      type metadata accessor for MainActor();
      id v18 = v9;
      uint64_t v19 = static MainActor.shared.getter();
      uint64_t v20 = (void *)swift_allocObject();
      void v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v18;
      sub_10010C15C((uint64_t)v6, (uint64_t)&unk_100183F48, (uint64_t)v20);
      swift_release();
    }
    else
    {
      id v16 = v22;
    }
  }
}

uint64_t sub_1000A64FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000BE350, v6, v5);
}

void sub_1000A6594(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = sub_10000AA4C(&qword_100183D20);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v36 = sub_10000AA4C(&qword_100181768);
  uint64_t v8 = __chkstk_darwin(v36);
  uint64_t v35 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v34 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - v12;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v37 = v1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10010BDA4(v41, (uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_10000AA4C(&qword_100183CF8);
  unint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  if (v15(v7, 1, v14) == 1)
  {
    sub_10000F394((uint64_t)v7, &qword_100183D20);
    uint64_t v16 = type metadata accessor for SFNearbySharingInteraction();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
  }
  else
  {
    uint64_t v17 = *(void **)&v7[*(int *)(v14 + 48)];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    uint64_t v18 = type metadata accessor for SFNearbySharingInteraction();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
    v20(v13, 0, 1, v18);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v7, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v18) != 1)
    {
      uint64_t v23 = v38;
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v38, v13, v18);
      v20((char *)v23, 0, 1, v18);
      uint64_t v27 = (uint64_t)v39;
      goto LABEL_9;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10010BDA4(v41, (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v15(v5, 1, v14) == 1)
  {
    sub_10000F394((uint64_t)v5, &qword_100183D20);
    uint64_t v22 = type metadata accessor for SFNearbySharingInteraction();
    uint64_t v23 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v38, 1, 1, v22);
  }
  else
  {
    uint64_t v24 = *(void **)&v5[*(int *)(v14 + 48)];
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v23 = v38;
    static Published.subscript.getter();

    swift_release();
    swift_release();
    uint64_t v25 = type metadata accessor for SFNearbySharingInteraction();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 0, 1, v25);
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v5, v26);
  }
  uint64_t v27 = (uint64_t)v39;
  sub_10000F394((uint64_t)v13, &qword_100181768);
LABEL_9:
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10000B150(v28, (uint64_t)qword_10018D128);
  sub_10000F330(v23, v27, &qword_100181768);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    sub_10000F330(v27, v35, &qword_100181768);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v40 = sub_100047F98(v32, v33, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F394(v27, &qword_100181768);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "currentNearbySharingInteraction: %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000F394(v27, &qword_100181768);
  }
}

void sub_1000A6C74(uint64_t a1@<X8>)
{
  uint64_t v32 = sub_10000AA4C(&qword_1001816B0);
  uint64_t v2 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - v4;
  uint64_t v6 = type metadata accessor for SFNearbySharingInteraction.Kind();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000AA4C(&qword_100183D20);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_10010BDA4(v34, (uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_10000AA4C(&qword_100183CF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16) == 1)
  {
    sub_10000F394((uint64_t)v15, &qword_100183D20);
    uint64_t v17 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 1, 1, v17);
  }
  else
  {
    uint64_t v18 = *(void **)&v15[*(int *)(v16 + 48)];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();

    swift_release();
    swift_release();
    SFNearbySharingInteraction.kind.getter();
    if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == enum case for SFNearbySharingInteraction.Kind.airDrop(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v19 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v9, v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 1, 1, v21);
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v15, v22);
  }
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10000B150(v23, (uint64_t)qword_10018D128);
  sub_10000F330(a1, (uint64_t)v5, &qword_1001816B0);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    sub_10000F330((uint64_t)v5, v31, &qword_1001816B0);
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v33 = sub_100047F98(v27, v28, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000F394((uint64_t)v5, &qword_1001816B0);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "currentAirDropNearbySharingInteraction: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000F394((uint64_t)v5, &qword_1001816B0);
  }
}

uint64_t sub_1000A72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  _OWORD v6[10] = a4;
  uint64_t v7 = sub_10000AA4C(&qword_100183FC8);
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v6[15] = v8;
  v6[16] = type metadata accessor for MainActor();
  v6[17] = static MainActor.shared.getter();
  uint64_t v9 = (void *)swift_task_alloc();
  v6[18] = v9;
  void *v9 = v6;
  v9[1] = sub_1000A73E4;
  return SFAirDropClient.nearbySharingInteractions()(v8);
}

uint64_t sub_1000A73E4()
{
  uint64_t v2 = (void *)*v1;
  v2[19] = v0;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[20] = v4;
  v2[21] = v3;
  if (v0) {
    uint64_t v5 = sub_1000A7D1C;
  }
  else {
    uint64_t v5 = sub_1000A7544;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000A7544()
{
  v0[7] = SFXPCResilientAsyncSequence.makeAsyncIterator()();
  swift_beginAccess();
  v0[22] = static MainActor.shared.getter();
  uint64_t v1 = sub_10000AA4C(&qword_100183FD0);
  uint64_t v2 = sub_10000F288(&qword_100183FD8, &qword_100183FD0);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000A767C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 8, v1, v2);
}

uint64_t sub_1000A767C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000A7A2C;
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000A7814;
  }
  return _swift_task_switch(v7, v4, v6);
}

uint64_t sub_1000A7814()
{
  swift_release();
  v0[25] = v0[8];
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  return _swift_task_switch(sub_1000A7880, v1, v2);
}

uint64_t sub_1000A7880()
{
  uint64_t v1 = v0[25];
  if (v1)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = (void *)Strong;
      sub_1000A8CD4(v1, v0[10], v0[12]);
    }
    swift_bridgeObjectRelease();
    v0[22] = static MainActor.shared.getter();
    uint64_t v4 = sub_10000AA4C(&qword_100183FD0);
    uint64_t v5 = sub_10000F288(&qword_100183FD8, &qword_100183FD0);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[23] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000A767C;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 8, v4, v5);
  }
  else
  {
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1000A7A2C()
{
  v0[9] = v0[24];
  sub_10000AA4C(&qword_100180590);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  return _swift_task_switch(sub_1000A7AC0, v1, v2);
}

uint64_t sub_1000A7AC0()
{
  unint64_t v15 = v0;
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[24];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_10018D128);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v14 = v9;
    v0[5] = v4;
    swift_errorRetain();
    sub_10000AA4C(&qword_100180590);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[6] = sub_100047F98(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error registering for updates to nearby sharing interactions: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000A7D1C()
{
  unint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[19];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_10018D128);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[5] = v1;
    swift_errorRetain();
    sub_10000AA4C(&qword_100180590);
    uint64_t v6 = String.init<A>(reflecting:)();
    v0[6] = sub_100047F98(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error registering for updates to nearby sharing interactions: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000A7F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[13] = a4;
  v5[14] = a5;
  uint64_t v6 = sub_10000AA4C((uint64_t *)&unk_100183F80);
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v5[17] = v7;
  v5[18] = type metadata accessor for MainActor();
  v5[19] = static MainActor.shared.getter();
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of SFProximityHandoffClient.proximityHandoffInteractions()
                                        + async function pointer to dispatch thunk of SFProximityHandoffClient.proximityHandoffInteractions());
  uint64_t v8 = (void *)swift_task_alloc();
  v5[20] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1000A8084;
  return v10(v7);
}

uint64_t sub_1000A8084()
{
  uint64_t v2 = (void *)*v1;
  v2[21] = v0;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[22] = v4;
  v2[23] = v3;
  if (v0) {
    uint64_t v5 = sub_1000A8AA4;
  }
  else {
    uint64_t v5 = sub_1000A81E4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000A81E4()
{
  v0[8] = SFXPCResilientAsyncSequence.makeAsyncIterator()();
  swift_beginAccess();
  v0[24] = static MainActor.shared.getter();
  uint64_t v1 = sub_10000AA4C(&qword_100183F90);
  uint64_t v2 = sub_10000F288(&qword_100183F98, &qword_100183F90);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[25] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000A8318;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 10, v1, v2);
}

uint64_t sub_1000A8318()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 192);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000A87B8;
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1000A84B0;
  }
  return _swift_task_switch(v7, v4, v6);
}

uint64_t sub_1000A84B0()
{
  swift_release();
  v0[27] = v0[10];
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  return _swift_task_switch(sub_1000A851C, v1, v2);
}

uint64_t sub_1000A851C()
{
  uint64_t v1 = v0[27];
  if (v1)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = (void *)Strong;
      sub_1000AA0A4(v1, v0[13]);
    }
    swift_bridgeObjectRelease();
    v0[24] = static MainActor.shared.getter();
    uint64_t v4 = sub_10000AA4C(&qword_100183F90);
    uint64_t v5 = sub_10000F288(&qword_100183F98, &qword_100183F90);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[25] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000A8318;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 10, v4, v5);
  }
  else
  {
    swift_release();
    swift_release();
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B150(v7, (uint64_t)qword_10018D128);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "@@@ Proximity handoff interactions stream finished", v10, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v11 = swift_unknownObjectWeakLoadStrong();
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      sub_1000AA0A4((uint64_t)_swiftEmptyArrayStorage, v0[13]);
    }
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1000A87B8()
{
  v0[11] = v0[26];
  sub_10000AA4C(&qword_100180590);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  return _swift_task_switch(sub_1000A884C, v1, v2);
}

uint64_t sub_1000A884C()
{
  uint64_t v14 = v0;
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[26];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B150(v5, (uint64_t)qword_10018D128);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v0[12] = v4;
    swift_errorRetain();
    sub_10000AA4C(&qword_100180590);
    uint64_t v9 = String.init<A>(reflecting:)();
    v0[9] = sub_100047F98(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error registering for updates to proximity handoff interactions: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000A8AA4()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[21];
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B150(v2, (uint64_t)qword_10018D128);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[12] = v1;
    swift_errorRetain();
    sub_10000AA4C(&qword_100180590);
    uint64_t v6 = String.init<A>(reflecting:)();
    v0[9] = sub_100047F98(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error registering for updates to proximity handoff interactions: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000A8CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v120 = a3;
  uint64_t v122 = a2;
  uint64_t v6 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v104 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest();
  uint64_t v105 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v101 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v8;
  __chkstk_darwin(v9);
  uint64_t v100 = (char *)&v94 - v10;
  uint64_t v119 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v11 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v118 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v94 - v14;
  uint64_t v141 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v148 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v140 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext();
  unint64_t v147 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v115 = (char *)&v94 - v21;
  __chkstk_darwin(v22);
  uint64_t v121 = (char *)&v94 - v23;
  uint64_t v139 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v146 = *(char **)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v138 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for UUID();
  char v149 = *(char ***)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v142 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)&v94 - v27;
  uint64_t v29 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v143 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v136 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v145 = (char *)&v94 - v32;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10000B150(v33, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(v34, v35);
  uint64_t v117 = v15;
  uint64_t v144 = v17;
  uint64_t v116 = v19;
  if (v37)
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v150 = (void *)swift_slowAlloc();
    uint64_t v152 = v150;
    LODWORD(v134) = v36;
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v132 = v38 + 4;
    swift_bridgeObjectRetain();
    uint64_t v39 = Array.description.getter();
    uint64_t v40 = v11;
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v151 = sub_100047F98(v39, v42, (uint64_t *)&v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v11 = v40;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v134, "AirDrop nearby sharing interactions changed: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v43 = *(void *)(a1 + 16);
  if (v43)
  {
    uint64_t v44 = v143 + 16;
    uint64_t v150 = *(void **)(v143 + 16);
    unint64_t v45 = a1 + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
    uint64_t v132 = *(uint8_t **)(v143 + 72);
    ++v149;
    uint64_t v131 = (void (**)(uint64_t, uint64_t))(v146 + 8);
    uint64_t v130 = (uint64_t (**)(char *, uint64_t))(v148 + 88);
    int v129 = enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:);
    uint64_t v114 = (void (**)(char *, uint64_t))(v148 + 8);
    uint64_t v113 = (void (**)(char *, uint64_t))(v148 + 96);
    uint64_t v112 = (void (**)(char *, char *, uint64_t))(v147 + 32);
    unsigned int v111 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:);
    char v109 = (void (**)(char *, char *, uint64_t))(v147 + 16);
    unsigned int v107 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:);
    uint64_t v125 = (void (**)(char *, uint64_t))(v147 + 8);
    unsigned int v106 = enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:);
    uint64_t v99 = v105 + 16;
    uint64_t v98 = v105 + 32;
    uint64_t v97 = v105 + 8;
    uint64_t v128 = (void (**)(uint64_t, uint64_t))(v143 + 8);
    uint64_t v95 = a1;
    swift_bridgeObjectRetain();
    unint64_t v96 = 0x8000000100133780;
    uint64_t v134 = v28;
    uint64_t v46 = (uint64_t)v145;
    uint64_t v135 = v4;
    uint64_t v133 = v29;
    uint64_t v143 = v44;
    uint64_t v126 = (void (**)(char *, void, uint64_t))(v11 + 104);
    uint64_t v110 = (void (**)(char *, uint64_t))(v11 + 8);
    while (1)
    {
      unint64_t v147 = v45;
      uint64_t v148 = v43;
      ((void (*)(uint64_t, unint64_t, uint64_t))v150)(v46, v45, v29);
      SFAirDrop.NearbySharingInteraction.id.getter();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v49 = (uint64_t)v152;
      if (v152[2] && (unint64_t v50 = sub_10004865C((uint64_t)v28), (v51 & 1) != 0))
      {
        id v52 = *(id *)(*(void *)(v49 + 56) + 8 * v50);
        swift_bridgeObjectRelease();
        uint64_t v53 = v137;
        uint64_t v146 = *v149;
        ((void (*)(char *, uint64_t))v146)(v28, v137);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v53 = v137;
        uint64_t v146 = *v149;
        ((void (*)(char *, uint64_t))v146)(v28, v137);
        id v52 = (id)sub_1000ADA48(v46, v122, v120);
        sub_1000B2E10();
      }
      ((void (*)(char *, uint64_t, uint64_t))v150)(v136, v46, v29);
      id v54 = v52;
      uint64_t v55 = (uint64_t)v138;
      SFNearbySharingInteraction.init(_:)();
      sub_100057B10(v55);
      (*v131)(v55, v139);
      uint64_t v56 = (uint64_t)v142;
      SFAirDrop.NearbySharingInteraction.id.getter();
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v57 = (char *)v54;
      uint64_t v58 = (void (*)(void **, void))static Published.subscript.modify();
      uint64_t v60 = v59;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = *v60;
      *uint64_t v60 = 0x8000000000000000;
      sub_1000B746C((uint64_t)v57, v56, isUniquelyReferenced_nonNull_native);
      *uint64_t v60 = v151;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v146)(v56, v53);
      v58(&v152, 0);
      uint64_t v46 = (uint64_t)v145;
      swift_release();
      swift_release();
      uint64_t v62 = v140;
      SFAirDrop.NearbySharingInteraction.state.getter();
      uint64_t v63 = v141;
      int v64 = (*v130)(v62, v141);
      if (v64 == v129)
      {
        uint64_t v146 = v57;
        (*v113)(v62, v63);
        uint64_t v65 = v121;
        uint64_t v66 = v144;
        (*v112)(v121, v62, v144);
        uint64_t v67 = v117;
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
        uint64_t v68 = v118;
        uint64_t v69 = v119;
        unsigned __int8 v124 = *v126;
        v124(v118, v111, v119);
        uint64_t v123 = sub_1000B4FD0(&qword_100183F10, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v71 = *v110;
        (*v110)(v68, v69);
        v71(v67, v69);
        uint64_t v72 = v115;
        char v127 = *v109;
        v127(v115, v65, v66);
        if (v70)
        {
          uint64_t v73 = *v125;
          uint64_t v74 = v144;
          (*v125)(v72, v144);
          uint64_t v75 = v116;
          v127(v116, v65, v74);
          uint64_t v29 = v133;
          uint64_t v57 = v146;
LABEL_20:

          v73(v75, v74);
          v73(v65, v74);
          unint64_t v28 = v134;
LABEL_21:
          uint64_t v46 = (uint64_t)v145;
          goto LABEL_10;
        }
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
        v124(v68, v107, v69);
        int v108 = dispatch thunk of static Equatable.== infix(_:_:)();
        v71(v68, v69);
        v71(v67, v69);
        uint64_t v73 = *v125;
        uint64_t v76 = v144;
        (*v125)(v72, v144);
        uint64_t v75 = v116;
        v127(v116, v65, v76);
        if (v108)
        {
          uint64_t v65 = v121;
          uint64_t v29 = v133;
          uint64_t v57 = v146;
          uint64_t v74 = v144;
          goto LABEL_20;
        }
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter();
        uint64_t v77 = v119;
        v124(v68, v106, v119);
        char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
        v71(v68, v77);
        v71(v67, v77);
        uint64_t v79 = v144;
        v73(v75, v144);
        v73(v121, v79);
        uint64_t v57 = v146;
        if (v78)
        {

          unint64_t v28 = v134;
          uint64_t v29 = v133;
          goto LABEL_21;
        }
        SFAirDrop.NearbySharingInteraction.id.getter();
        uint64_t v80 = v100;
        SFAirDrop.NearbySharingAssertionRequest.init(nearbySharingInteractionID:explanation:)();
        uint64_t v81 = type metadata accessor for TaskPriority();
        uint64_t v82 = (uint64_t)v104;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v104, 1, 1, v81);
        uint64_t v83 = v105;
        uint64_t v84 = v101;
        uint64_t v85 = v103;
        (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v101, v80, v103);
        unint64_t v86 = (*(unsigned __int8 *)(v83 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
        uint64_t v87 = (char *)swift_allocObject();
        *((void *)v87 + 2) = 0;
        *((void *)v87 + 3) = 0;
        uint64_t v88 = v122;
        *((void *)v87 + 4) = v57;
        *((void *)v87 + 5) = v88;
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&v87[v86], v84, v85);
        uint64_t v89 = v57;
        swift_retain();
        sub_1000F0F68(v82, (uint64_t)&unk_100183F20, (uint64_t)v87);

        swift_release();
        uint64_t v90 = *(void (**)(char *, uint64_t))(v83 + 8);
        uint64_t v46 = (uint64_t)v145;
        v90(v80, v85);
      }
      else
      {

        (*v114)(v62, v63);
      }
      unint64_t v28 = v134;
      uint64_t v29 = v133;
LABEL_10:
      unint64_t v48 = v147;
      uint64_t v47 = v148;

      (*v128)(v46, v29);
      unint64_t v45 = (unint64_t)&v132[v48];
      uint64_t v43 = v47 - 1;
      if (!v43)
      {
        a1 = v95;
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v91 = (void (*)(void **, void))static Published.subscript.modify();
  sub_1000AA8AC(a1, v92);
  v91(&v152, 0);
  swift_release();
  swift_release();
  return sub_1000ABB44();
}

uint64_t sub_1000A9DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a4;
  sub_10000AA4C(&qword_100180580);
  uint64_t v8 = swift_task_alloc();
  _OWORD v6[6] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v6[7] = v9;
  void *v9 = v6;
  v9[1] = sub_1000A9EDC;
  return SFAirDropClient.takeNearbySharingAssertion(for:)(v8, a6);
}

uint64_t sub_1000A9EDC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10003DB10;
  }
  else {
    uint64_t v2 = sub_1000A9FF0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000A9FF0()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5] + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_interactionAssertionID;
  swift_beginAccess();
  sub_10004FE60(v1, v2, &qword_100180580);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000AA0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v63 = type metadata accessor for SFNearbySharingInteraction();
  uint64_t v69 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v62 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  char v70 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v65 = (uint64_t)&v52 - v15;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000B150(v16, (uint64_t)qword_10018D128);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v64 = v11;
  if (v19)
  {
    uint64_t v66 = v12;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = (void (*)(uint64_t, unint64_t, uint64_t))swift_slowAlloc();
    v73[0] = (uint64_t)v71;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v68 = v20 + 4;
    swift_bridgeObjectRetain();
    uint64_t v21 = Array.description.getter();
    uint64_t v22 = a1;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = v21;
    uint64_t v11 = v64;
    uint64_t v72 = sub_100047F98(v25, v24, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v22;
    uint64_t v12 = v66;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Proximity handoff interactions changed: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v26 = *(void *)(a1 + 16);
    if (!v26) {
      goto LABEL_16;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v26 = *(void *)(a1 + 16);
    if (!v26) {
      goto LABEL_16;
    }
  }
  uint64_t v53 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_contactDetailsProvider;
  unint64_t v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
  uint64_t v27 = v12 + 16;
  unint64_t v29 = a1 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
  uint64_t v30 = *(void *)(v27 + 56);
  ++v70;
  uint64_t v71 = v28;
  uint64_t v56 = (void (**)(uint64_t, uint64_t))(v69 + 8);
  uint64_t v57 = v30;
  uint64_t v55 = (void (**)(uint64_t, uint64_t))(v27 - 8);
  uint64_t v52 = a1;
  swift_bridgeObjectRetain();
  uint64_t v58 = v10;
  uint64_t v59 = v6;
  uint64_t v31 = v65;
  uint64_t v66 = v27;
  do
  {
    uint64_t v68 = (uint8_t *)v29;
    uint64_t v69 = v26;
    v71(v31, v29, v11);
    SFProximityHandoff.Interaction.id.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v39 = v73[0];
    if (*(void *)(v73[0] + 16) && (unint64_t v40 = sub_10004865C((uint64_t)v10), (v41 & 1) != 0))
    {
      id v42 = *(id *)(*(void *)(v39 + 56) + 8 * v40);
      swift_bridgeObjectRelease();
      uint64_t v67 = *v70;
      v67(v10, v6);
      uint64_t v31 = v65;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v67 = *v70;
      v67(v10, v6);
      uint64_t v43 = *(void *)(v3 + v53);
      type metadata accessor for ShareableContentResolver();
      swift_allocObject();
      uint64_t v44 = v54;
      swift_retain();
      swift_retain();
      unint64_t v45 = sub_10009F048(v44, v43);
      uint64_t v31 = v65;
      id v42 = (id)sub_1000AEA94(v65, v44, (uint64_t)v45);
      sub_1000B2E10();
      swift_release();
    }
    v71((uint64_t)v60, v31, v11);
    uint64_t v46 = (char *)v42;
    uint64_t v47 = (uint64_t)v62;
    SFNearbySharingInteraction.init(_:)();
    sub_100057B10(v47);
    (*v56)(v47, v63);
    unint64_t v48 = *(void (**)(uint64_t))(*(void *)&v46[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_contentResolver]
                                         + 48);
    if (v48)
    {
      swift_retain();
      sub_100030254((uint64_t)v48);
      v48(v31);
      sub_100030180((uint64_t)v48);
      swift_release();
    }
    uint64_t v32 = (uint64_t)v61;
    SFProximityHandoff.Interaction.id.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v33 = v46;
    uint64_t v34 = v3;
    os_log_type_t v35 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    BOOL v37 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v72 = *v37;
    *BOOL v37 = 0x8000000000000000;
    sub_1000B746C((uint64_t)v33, v32, isUniquelyReferenced_nonNull_native);
    *BOOL v37 = v72;
    swift_bridgeObjectRelease();
    uint64_t v6 = v59;
    v67((char *)v32, v59);
    v35(v73, 0);
    uint64_t v3 = v34;

    swift_release();
    swift_release();
    uint64_t v11 = v64;
    (*v55)(v31, v64);
    uint64_t v10 = v58;
    unint64_t v29 = (unint64_t)&v68[v57];
    uint64_t v26 = v69 - 1;
  }
  while (v69 != 1);
  a1 = v52;
  swift_bridgeObjectRelease();
LABEL_16:
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v49 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  sub_1000AB1F8(a1, v50);
  v49(v73, 0);
  swift_release();
  swift_release();
  return sub_1000ABB44();
}

uint64_t sub_1000AA8AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v73 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v76 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v85 = (char *)v72 - v15;
  uint64_t v16 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v16 - 8);
  int64_t v18 = *(void *)(a1 + 16);
  BOOL v19 = _swiftEmptyArrayStorage;
  uint64_t v74 = a2;
  uint64_t v86 = v11;
  uint64_t v80 = v2;
  uint64_t v81 = (char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
  {
    uint64_t v93 = _swiftEmptyArrayStorage;
    sub_1000162B4(0, v18, 0);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v20 = v8 + 16;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 56);
    uint64_t v84 = v21;
    uint64_t v87 = v12;
    uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 32);
    do
    {
      v84(v10, v22, v7);
      sub_1000B4FD0(&qword_100183F28, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction);
      dispatch thunk of Identifiable.id.getter();
      (*(void (**)(char *, uint64_t))(v20 - 8))(v10, v7);
      BOOL v19 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000162B4(0, v19[2] + 1, 1);
        BOOL v19 = v93;
      }
      unint64_t v24 = v19[2];
      unint64_t v23 = v19[3];
      uint64_t v25 = v85;
      if (v24 >= v23 >> 1)
      {
        sub_1000162B4(v23 > 1, v24 + 1, 1);
        uint64_t v25 = v85;
        BOOL v19 = v93;
      }
      void v19[2] = v24 + 1;
      unint64_t v26 = (unint64_t)v19
          + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))
          + *(void *)(v87 + 72) * v24;
      uint64_t v11 = v86;
      (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v26, v25, v86);
      uint64_t v93 = v19;
      v22 += (uint64_t)v83;
      --v18;
    }
    while (v18);
    a2 = v74;
    uint64_t v27 = v87;
  }
  else
  {
    uint64_t v27 = v12;
  }
  uint64_t v28 = (uint64_t)v76;
  uint64_t v29 = sub_10009DBD0((uint64_t)v19);
  swift_bridgeObjectRelease();
  uint64_t v30 = *a2;
  swift_bridgeObjectRetain_n();
  sub_1000BA268(v30, v29);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v32 + 16);
  v72[3] = v30;
  v72[2] = v32;
  if (v33)
  {
    uint64_t v35 = v27 + 16;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    int v36 = (uint64_t *)((char *)v80 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID);
    uint64_t v37 = v32 + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    uint64_t v38 = *(void *)(v35 + 56);
    uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 32);
    char v78 = (void (**)(uint64_t, char *, uint64_t))(v35 + 16);
    uint64_t v83 = v34;
    uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))(v35 - 8);
    uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 40);
    v72[1] = (v35 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v72[4] = (char *)&type metadata for () + 8;
    uint64_t v39 = v81;
    uint64_t v79 = v36;
    uint64_t v87 = v35;
    v34(v81, v37, v11);
    while (1)
    {
      char v41 = *v82;
      (*v82)(v39, 0, 1, v11);
      if ((*v80)(v39, 1, v11) == 1) {
        break;
      }
      uint64_t v77 = v41;
      (*v78)(v28, v39, v11);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v42 = sub_10004865C(v28);
      char v44 = v43;
      swift_bridgeObjectRelease();
      if (v44)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = *v36;
        uint64_t v88 = *v36;
        uint64_t *v36 = 0x8000000000000000;
        uint64_t v47 = (void (**)(unint64_t, uint64_t))v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10004A16C();
          uint64_t v47 = (void (**)(unint64_t, uint64_t))v84;
          uint64_t v46 = v88;
        }
        (*v47)(*(void *)(v46 + 48) + v42 * v38, v11);
        uint64_t v48 = v88;
        sub_1000495D4(v42, v88);
        uint64_t *v36 = v48;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      uint64_t v49 = *a2;
      if (*(void *)(*a2 + 16) && (unint64_t v50 = sub_10004865C(v28), (v51 & 1) != 0))
      {
        uint64_t v52 = *(void **)(*(void *)(v49 + 56) + 8 * v50);
        uint64_t v53 = type metadata accessor for TaskPriority();
        uint64_t v54 = *(void *)(v53 - 8);
        uint64_t v55 = (uint64_t)v73;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v73, 1, 1, v53);
        type metadata accessor for MainActor();
        uint64_t v56 = v52;
        uint64_t v57 = static MainActor.shared.getter();
        uint64_t v58 = (void *)swift_allocObject();
        v58[2] = v57;
        uint64_t v58[3] = &protocol witness table for MainActor;
        v58[4] = v56;
        uint64_t v85 = v56;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53) == 1)
        {
          sub_10000F394(v55, &qword_1001829C0);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v53);
        }
        uint64_t v28 = (uint64_t)v76;
        if (v58[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v59 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v61 = v60;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v59 = 0;
          uint64_t v61 = 0;
        }
        uint64_t v62 = swift_allocObject();
        *(void *)(v62 + 16) = &unk_100183F30;
        *(void *)(v62 + 24) = v58;
        if (v61 | v59)
        {
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v91 = v59;
          uint64_t v92 = v61;
        }
        swift_task_create();

        swift_release();
        a2 = v74;
      }
      else
      {
        uint64_t v85 = 0;
      }
      swift_bridgeObjectRetain();
      unint64_t v63 = sub_10004865C(v28);
      char v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v66 = (void (**)(unint64_t, uint64_t))v84;
      if (v65)
      {
        uint64_t v75 = v33;
        char v67 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v68 = (void *)*a2;
        uint64_t v93 = (void *)*a2;
        *a2 = 0x8000000000000000;
        if ((v67 & 1) == 0)
        {
          sub_100049ED4();
          uint64_t v66 = (void (**)(unint64_t, uint64_t))v84;
          uint64_t v68 = v93;
        }
        unint64_t v40 = *v66;
        uint64_t v11 = v86;
        (*v66)(v68[6] + v63 * v38, v86);
        uint64_t v69 = v93;
        char v70 = *(void **)(v93[7] + 8 * v63);
        sub_1000495D0(v63, v93);
        *a2 = (uint64_t)v69;

        swift_bridgeObjectRelease();
        uint64_t v28 = (uint64_t)v76;
        uint64_t v33 = v75;
      }
      else
      {

        unint64_t v40 = *v66;
      }
      v40(v28, v11);
      v37 += v38;
      --v33;
      uint64_t v39 = v81;
      int v36 = v79;
      if (!v33)
      {
        v77(v81, 1, 1, v11);
        break;
      }
      v83(v81, v37, v11);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v81, 1, 1, v11);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AB1F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v73 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v76 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v85 = (char *)v72 - v15;
  uint64_t v16 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v16 - 8);
  int64_t v18 = *(void *)(a1 + 16);
  BOOL v19 = _swiftEmptyArrayStorage;
  uint64_t v74 = a2;
  uint64_t v86 = v11;
  uint64_t v80 = v2;
  uint64_t v81 = (char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
  {
    uint64_t v93 = _swiftEmptyArrayStorage;
    sub_1000162B4(0, v18, 0);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v20 = v8 + 16;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 56);
    uint64_t v84 = v21;
    uint64_t v87 = v12;
    uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 32);
    do
    {
      v84(v10, v22, v7);
      sub_1000B4FD0(&qword_100183EF0, (void (*)(uint64_t))&type metadata accessor for SFProximityHandoff.Interaction);
      dispatch thunk of Identifiable.id.getter();
      (*(void (**)(char *, uint64_t))(v20 - 8))(v10, v7);
      BOOL v19 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000162B4(0, v19[2] + 1, 1);
        BOOL v19 = v93;
      }
      unint64_t v24 = v19[2];
      unint64_t v23 = v19[3];
      uint64_t v25 = v85;
      if (v24 >= v23 >> 1)
      {
        sub_1000162B4(v23 > 1, v24 + 1, 1);
        uint64_t v25 = v85;
        BOOL v19 = v93;
      }
      void v19[2] = v24 + 1;
      unint64_t v26 = (unint64_t)v19
          + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))
          + *(void *)(v87 + 72) * v24;
      uint64_t v11 = v86;
      (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v26, v25, v86);
      uint64_t v93 = v19;
      v22 += (uint64_t)v83;
      --v18;
    }
    while (v18);
    a2 = v74;
    uint64_t v27 = v87;
  }
  else
  {
    uint64_t v27 = v12;
  }
  uint64_t v28 = (uint64_t)v76;
  uint64_t v29 = sub_10009DBD0((uint64_t)v19);
  swift_bridgeObjectRelease();
  uint64_t v30 = *a2;
  swift_bridgeObjectRetain_n();
  sub_1000BA268(v30, v29);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v32 + 16);
  v72[3] = v30;
  v72[2] = v32;
  if (v33)
  {
    uint64_t v35 = v27 + 16;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    int v36 = (uint64_t *)((char *)v80 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID);
    uint64_t v37 = v32 + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    uint64_t v38 = *(void *)(v35 + 56);
    uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 32);
    char v78 = (void (**)(uint64_t, char *, uint64_t))(v35 + 16);
    uint64_t v83 = v34;
    uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))(v35 - 8);
    uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 40);
    v72[1] = (v35 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v72[4] = (char *)&type metadata for () + 8;
    uint64_t v39 = v81;
    uint64_t v79 = v36;
    uint64_t v87 = v35;
    v34(v81, v37, v11);
    while (1)
    {
      char v41 = *v82;
      (*v82)(v39, 0, 1, v11);
      if ((*v80)(v39, 1, v11) == 1) {
        break;
      }
      uint64_t v77 = v41;
      (*v78)(v28, v39, v11);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v42 = sub_10004865C(v28);
      char v44 = v43;
      swift_bridgeObjectRelease();
      if (v44)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = *v36;
        uint64_t v88 = *v36;
        uint64_t *v36 = 0x8000000000000000;
        uint64_t v47 = (void (**)(unint64_t, uint64_t))v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10004A16C();
          uint64_t v47 = (void (**)(unint64_t, uint64_t))v84;
          uint64_t v46 = v88;
        }
        (*v47)(*(void *)(v46 + 48) + v42 * v38, v11);
        uint64_t v48 = v88;
        sub_1000495D4(v42, v88);
        uint64_t *v36 = v48;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      uint64_t v49 = *a2;
      if (*(void *)(*a2 + 16) && (unint64_t v50 = sub_10004865C(v28), (v51 & 1) != 0))
      {
        uint64_t v52 = *(void **)(*(void *)(v49 + 56) + 8 * v50);
        uint64_t v53 = type metadata accessor for TaskPriority();
        uint64_t v54 = *(void *)(v53 - 8);
        uint64_t v55 = (uint64_t)v73;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v73, 1, 1, v53);
        type metadata accessor for MainActor();
        uint64_t v56 = v52;
        uint64_t v57 = static MainActor.shared.getter();
        uint64_t v58 = (void *)swift_allocObject();
        v58[2] = v57;
        uint64_t v58[3] = &protocol witness table for MainActor;
        v58[4] = v56;
        uint64_t v85 = v56;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53) == 1)
        {
          sub_10000F394(v55, &qword_1001829C0);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v53);
        }
        uint64_t v28 = (uint64_t)v76;
        if (v58[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v59 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v61 = v60;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v59 = 0;
          uint64_t v61 = 0;
        }
        uint64_t v62 = swift_allocObject();
        *(void *)(v62 + 16) = &unk_100183F00;
        *(void *)(v62 + 24) = v58;
        if (v61 | v59)
        {
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v91 = v59;
          uint64_t v92 = v61;
        }
        swift_task_create();

        swift_release();
        a2 = v74;
      }
      else
      {
        uint64_t v85 = 0;
      }
      swift_bridgeObjectRetain();
      unint64_t v63 = sub_10004865C(v28);
      char v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v66 = (void (**)(unint64_t, uint64_t))v84;
      if (v65)
      {
        uint64_t v75 = v33;
        char v67 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v68 = (void *)*a2;
        uint64_t v93 = (void *)*a2;
        *a2 = 0x8000000000000000;
        if ((v67 & 1) == 0)
        {
          sub_100049ED4();
          uint64_t v66 = (void (**)(unint64_t, uint64_t))v84;
          uint64_t v68 = v93;
        }
        unint64_t v40 = *v66;
        uint64_t v11 = v86;
        (*v66)(v68[6] + v63 * v38, v86);
        uint64_t v69 = v93;
        char v70 = *(void **)(v93[7] + 8 * v63);
        sub_1000495D0(v63, v93);
        *a2 = (uint64_t)v69;

        swift_bridgeObjectRelease();
        uint64_t v28 = (uint64_t)v76;
        uint64_t v33 = v75;
      }
      else
      {

        unint64_t v40 = *v66;
      }
      v40(v28, v11);
      v37 += v38;
      --v33;
      uint64_t v39 = v81;
      int v36 = v79;
      if (!v33)
      {
        v77(v81, 1, 1, v11);
        break;
      }
      v83(v81, v37, v11);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v81, 1, 1, v11);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000ABB44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000AA4C(&qword_100180580);
  __chkstk_darwin(v2 - 8);
  v132[0] = (char *)v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v144 = (char *)v132 - v5;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v139 = (char *)v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v134 = (char *)v132 - v10;
  __chkstk_darwin(v11);
  uint64_t v142 = (char *)v132 - v12;
  __chkstk_darwin(v13);
  uint64_t v141 = (char *)v132 - v14;
  uint64_t v15 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v15);
  uint64_t v150 = (void *)((char *)v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  char v149 = (void *)((char *)v132 - v18);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v19 = v156;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = sub_1000A58E4(v156, v19);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v146 = v20 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v25 = (uint64_t *)(v0
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  uint64_t v151 = v20;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v26 = 0;
  unint64_t v147 = (void (**)(char *, char *, uint64_t))((unint64_t)(v22 + 63) >> 6);
  uint64_t v137 = v150 + 13;
  uint64_t v136 = v149 + 13;
  uint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v7 + 2);
  uint64_t v148 = (void (**)(uint64_t, uint64_t))(v7 + 1);
  uint64_t v140 = v0;
  uint64_t v153 = v6;
  uint64_t v143 = v7;
  uint64_t v145 = v25;
  int64_t v138 = v15;
  while (1)
  {
    if (v24)
    {
      unint64_t v28 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v29 = v28 | (v26 << 6);
      goto LABEL_26;
    }
    uint64_t v30 = v26 + 1;
    uint64_t v31 = v144;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    if (v30 >= (uint64_t)v147) {
      goto LABEL_57;
    }
    unint64_t v32 = *(void *)(v146 + 8 * v30);
    ++v26;
    if (!v32)
    {
      uint64_t v26 = v30 + 1;
      if (v30 + 1 >= (uint64_t)v147) {
        goto LABEL_57;
      }
      unint64_t v32 = *(void *)(v146 + 8 * v26);
      if (!v32)
      {
        uint64_t v26 = v30 + 2;
        if (v30 + 2 >= (uint64_t)v147) {
          goto LABEL_57;
        }
        unint64_t v32 = *(void *)(v146 + 8 * v26);
        if (!v32)
        {
          uint64_t v26 = v30 + 3;
          if (v30 + 3 >= (uint64_t)v147) {
            goto LABEL_57;
          }
          unint64_t v32 = *(void *)(v146 + 8 * v26);
          if (!v32) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v24 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v26 << 6);
LABEL_26:
    uint64_t v34 = *(void **)(*(void *)(v151 + 56) + 8 * v29);
    sub_10001FB40(0, (unint64_t *)&qword_100181C80);
    id v35 = v34;
    int v36 = (void *)static NSUserDefaults.airdrop.getter();
    LOBYTE(v34) = SFAirDropUserDefaults.shockwaveEffectEnabled.getter();

    if (v34)
    {
      sub_10005B40C(v149);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
          uint64_t v27 = v149;
          goto LABEL_5;
        case 4u:
          sub_10005E778(*v149, v149[1], v149[2], v149[3], v149[4], v149[5], v149[6], v149[7], v149[8], v149[9]);
          sub_1000608FC((uint64_t)v136);
          goto LABEL_32;
        case 5u:
          goto LABEL_6;
        default:
          sub_1000BD048((uint64_t)v149, type metadata accessor for NearbySharingInteractionViewState);
LABEL_32:
          uint64_t v37 = (uint64_t)v35 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
          uint64_t v38 = *v25;
          if (!*(void *)(*v25 + 16)) {
            goto LABEL_37;
          }
          swift_bridgeObjectRetain();
          unint64_t v39 = sub_10004865C(v37);
          if (v40)
          {
            uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
            swift_retain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_37:
            uint64_t v41 = sub_1000BAE00(v35);
          }
          unint64_t v42 = *v152;
          uint64_t v43 = (uint64_t)v141;
          (*v152)(v141, v37, v153);
          swift_beginAccess();
          if (v41)
          {
            swift_retain();
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v45 = v25;
            int v46 = isUniquelyReferenced_nonNull_native;
            v155[0] = *v45;
            uint64_t v47 = v155[0];
            *unint64_t v45 = 0x8000000000000000;
            unint64_t v49 = sub_10004865C(v43);
            uint64_t v50 = *(void *)(v47 + 16);
            BOOL v51 = (v48 & 1) == 0;
            uint64_t v52 = v50 + v51;
            if (__OFADD__(v50, v51)) {
              goto LABEL_117;
            }
            char v53 = v48;
            if (*(void *)(v47 + 24) >= v52)
            {
              if ((v46 & 1) == 0) {
                sub_10004A404();
              }
            }
            else
            {
              sub_1000B6D64(v52, v46, &qword_100181528);
              unint64_t v54 = sub_10004865C(v43);
              if ((v53 & 1) != (v55 & 1)) {
                goto LABEL_124;
              }
              unint64_t v49 = v54;
            }
            uint64_t v25 = v145;
            uint64_t v66 = (void *)v155[0];
            if (v53)
            {
              uint64_t v67 = *(void *)(v155[0] + 56);
              swift_release();
              *(void *)(v67 + 8 * v49) = v41;
            }
            else
            {
              *(void *)(v155[0] + 8 * (v49 >> 6) + 64) |= 1 << v49;
              v42((char *)(v66[6] + v143[9] * v49), v43, v153);
              *(void *)(v66[7] + 8 * v49) = v41;
              uint64_t v68 = v66[2];
              BOOL v69 = __OFADD__(v68, 1);
              uint64_t v70 = v68 + 1;
              if (v69) {
                goto LABEL_120;
              }
              v66[2] = v70;
            }
            *uint64_t v25 = (uint64_t)v66;
            swift_bridgeObjectRelease();
            (*v148)(v43, v153);
            uint64_t v1 = v140;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v56 = sub_10004865C(v43);
            uint64_t v57 = v25;
            char v59 = v58;
            swift_bridgeObjectRelease();
            if (v59)
            {
              int v60 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v61 = *v57;
              v155[0] = *v57;
              uint64_t *v57 = 0x8000000000000000;
              if (!v60)
              {
                sub_10004A404();
                uint64_t v61 = v155[0];
              }
              unint64_t v62 = *(void *)(v61 + 48) + v7[9] * v56;
              unint64_t v63 = (void (*)(uint64_t, uint64_t))v7[1];
              uint64_t v64 = v153;
              v63(v62, v153);
              uint64_t v65 = v155[0];
              sub_1000495D0(v56, v155[0]);
              uint64_t *v57 = v65;
              swift_bridgeObjectRelease();
              uint64_t v1 = v140;
              uint64_t v25 = v57;
            }
            else
            {
              unint64_t v63 = *v148;
              uint64_t v64 = v153;
              uint64_t v25 = v57;
              uint64_t v1 = v140;
            }
            v63((uint64_t)v141, v64);
            swift_release();
          }
          uint64_t v7 = v143;
          swift_endAccess();
          swift_release();
          uint64_t v6 = v153;
          break;
      }
    }
    else
    {
      sub_10005B40C(v150);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 4u:
          sub_10005E778(*v150, v150[1], v150[2], v150[3], v150[4], v150[5], v150[6], v150[7], v150[8], v150[9]);
          sub_1000608FC((uint64_t)v137);
          break;
        case 5u:
          break;
        default:
          uint64_t v27 = v150;
LABEL_5:
          sub_1000BD048((uint64_t)v27, type metadata accessor for NearbySharingInteractionViewState);
          break;
      }
LABEL_6:
      sub_1000B1E98((uint64_t)v35 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id);
    }
    sub_1000ACFB0(v35);
  }
  uint64_t v33 = v30 + 4;
  if (v33 >= (uint64_t)v147) {
    goto LABEL_57;
  }
  unint64_t v32 = *(void *)(v146 + 8 * v33);
  if (v32)
  {
    uint64_t v26 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v26 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      goto LABEL_123;
    }
    if (v26 >= (uint64_t)v147) {
      break;
    }
    unint64_t v32 = *(void *)(v146 + 8 * v26);
    ++v33;
    if (v32) {
      goto LABEL_25;
    }
  }
LABEL_57:
  swift_release();
  swift_beginAccess();
  uint64_t v71 = swift_bridgeObjectRetain();
  uint64_t v72 = sub_100094188(v71);
  uint64_t v73 = swift_bridgeObjectRetain();
  uint64_t v74 = sub_1000B7B9C(v73, v72);
  swift_bridgeObjectRelease();
  int64_t v76 = 0;
  uint64_t v77 = v74[7];
  uint64_t v137 = v74 + 7;
  uint64_t v141 = (char *)v74;
  uint64_t v78 = 1 << *((unsigned char *)v74 + 32);
  uint64_t v79 = -1;
  if (v78 < 64) {
    uint64_t v79 = ~(-1 << v78);
  }
  unint64_t v80 = v79 & v77;
  int64_t v138 = (unint64_t)(v78 + 63) >> 6;
  char v149 = v7 + 6;
  uint64_t v150 = v7 + 7;
  unint64_t v147 = (void (**)(char *, char *, uint64_t))(v7 + 4);
  *(void *)&long long v75 = 136315138;
  long long v133 = v75;
  v132[1] = (char *)&type metadata for Any + 8;
  uint64_t v81 = v148;
  while (2)
  {
    if (v80)
    {
      uint64_t v82 = v1;
      unint64_t v83 = __clz(__rbit64(v80));
      v80 &= v80 - 1;
      unint64_t v84 = v83 | (v76 << 6);
LABEL_78:
      uint64_t v88 = v7[9];
      uint64_t v89 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v89(v31, *((void *)v141 + 6) + v88 * v84, v6);
      uint64_t v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v7[7];
      v90(v31, 0, 1, v6);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v7[6])(v31, 1, v6) == 1)
      {
        swift_release();
        goto LABEL_93;
      }
      uint64_t v146 = v76;
      uint64_t v91 = (uint64_t)v142;
      (*v147)(v142, v31, v6);
      uint64_t v92 = *v145;
      if (*(void *)(*v145 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v93 = sub_10004865C(v91);
        if (v94)
        {
          uint64_t v95 = *(void **)(*(void *)(v92 + 56) + 8 * v93);
          swift_retain();
          swift_bridgeObjectRelease();
          if (qword_10017F7A8 != -1) {
            swift_once();
          }
          uint64_t v96 = type metadata accessor for Logger();
          sub_10000B150(v96, (uint64_t)qword_10018D128);
          uint64_t v97 = v134;
          v89(v134, v91, v6);
          uint64_t v98 = Logger.logObject.getter();
          uint64_t v99 = v6;
          os_log_type_t v100 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v98, v100))
          {
            uint64_t v101 = v97;
            uint64_t v102 = swift_slowAlloc();
            v155[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v102 = v133;
            sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v102 + 4) = sub_100047F98(v103, v104, v155);
            swift_bridgeObjectRelease();
            uint64_t v135 = *v148;
            v135((uint64_t)v101, v99);
            _os_log_impl((void *)&_mh_execute_header, v98, v100, "Dismissing remote alert for nearby sharing interaction with ID: %s", (uint8_t *)v102, 0xCu);
            swift_arrayDestroy();
            uint64_t v91 = (uint64_t)v142;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v135 = *v148;
            v135((uint64_t)v97, v99);
          }

          uint64_t v6 = v99;
          uint64_t v136 = v95;
          dispatch thunk of SFRemoteAlertPresentationHandle.dismiss(animated:completion:)();
          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v105 = sub_10004865C(v91);
          char v107 = v106;
          swift_bridgeObjectRelease();
          uint64_t v82 = v140;
          uint64_t v7 = v143;
          uint64_t v81 = v148;
          if (v107)
          {
            int v108 = v148;
            char v109 = v145;
            char v110 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v111 = *v109;
            uint64_t v154 = *v109;
            *char v109 = 0x8000000000000000;
            if ((v110 & 1) == 0)
            {
              sub_10004A404();
              uint64_t v111 = v154;
            }
            unint64_t v112 = *(void *)(v111 + 48) + v105 * v88;
            uint64_t v113 = v108;
            v135(v112, v6);
            uint64_t v114 = v154;
            sub_1000495D0(v105, v154);
            *char v109 = v114;
            uint64_t v81 = v113;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          uint64_t v31 = v144;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      (*v81)(v91, v6);
      uint64_t v1 = v82;
      int64_t v76 = v146;
      continue;
    }
    break;
  }
  int64_t v85 = v76 + 1;
  if (__OFADD__(v76, 1)) {
    goto LABEL_118;
  }
  if (v85 < v138)
  {
    unint64_t v86 = v137[v85];
    ++v76;
    if (!v86)
    {
      int64_t v76 = v85 + 1;
      if (v85 + 1 >= v138) {
        goto LABEL_92;
      }
      unint64_t v86 = v137[v76];
      if (!v86)
      {
        int64_t v76 = v85 + 2;
        if (v85 + 2 >= v138) {
          goto LABEL_92;
        }
        unint64_t v86 = v137[v76];
        if (!v86)
        {
          int64_t v87 = v85 + 3;
          if (v87 >= v138) {
            goto LABEL_92;
          }
          unint64_t v86 = v137[v87];
          if (!v86)
          {
            while (1)
            {
              int64_t v76 = v87 + 1;
              if (__OFADD__(v87, 1)) {
                break;
              }
              if (v76 >= v138) {
                goto LABEL_92;
              }
              unint64_t v86 = v137[v76];
              ++v87;
              if (v86) {
                goto LABEL_77;
              }
            }
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          int64_t v76 = v87;
        }
      }
    }
LABEL_77:
    uint64_t v82 = v1;
    unint64_t v80 = (v86 - 1) & v86;
    unint64_t v84 = __clz(__rbit64(v86)) + (v76 << 6);
    goto LABEL_78;
  }
LABEL_92:
  uint64_t v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v150;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v150)(v31, 1, 1, v6);
  swift_release();
LABEL_93:
  swift_beginAccess();
  uint64_t v115 = swift_bridgeObjectRetain();
  uint64_t v116 = sub_100094188(v115);
  uint64_t v117 = sub_1000B7B9C(v151, v116);
  swift_bridgeObjectRelease();
  uint64_t v118 = 0;
  uint64_t v119 = v117 + 56;
  uint64_t v120 = 1 << v117[32];
  uint64_t v121 = -1;
  if (v120 < 64) {
    uint64_t v121 = ~(-1 << v120);
  }
  unint64_t v122 = v121 & *((void *)v117 + 7);
  uint64_t v151 = (unint64_t)(v120 + 63) >> 6;
  uint64_t v123 = (char *)v132[0];
  uint64_t v124 = v153;
  uint64_t v125 = (uint64_t)v139;
  if (!v122) {
    goto LABEL_97;
  }
LABEL_96:
  unint64_t v126 = __clz(__rbit64(v122));
  v122 &= v122 - 1;
  for (unint64_t i = v126 | (v118 << 6); ; unint64_t i = __clz(__rbit64(v129)) + (v118 << 6))
  {
    ((void (*)(char *, unint64_t, uint64_t))v7[2])(v123, *((void *)v117 + 6) + v7[9] * i, v124);
    v90(v123, 0, 1, v124);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v7[6])(v123, 1, v124) == 1) {
      return swift_release();
    }
    (*v147)((char *)v125, v123, v124);
    sub_1000B2740(v125);
    (*v148)(v125, v124);
    if (v122) {
      goto LABEL_96;
    }
LABEL_97:
    uint64_t v128 = v118 + 1;
    if (__OFADD__(v118, 1)) {
      goto LABEL_119;
    }
    if (v128 >= v151) {
      break;
    }
    unint64_t v129 = *(void *)&v119[8 * v128];
    ++v118;
    if (!v129)
    {
      uint64_t v118 = v128 + 1;
      if (v128 + 1 >= v151) {
        break;
      }
      unint64_t v129 = *(void *)&v119[8 * v118];
      if (!v129)
      {
        uint64_t v118 = v128 + 2;
        if (v128 + 2 >= v151) {
          break;
        }
        unint64_t v129 = *(void *)&v119[8 * v118];
        if (!v129)
        {
          uint64_t v130 = v128 + 3;
          if (v130 >= v151) {
            break;
          }
          unint64_t v129 = *(void *)&v119[8 * v130];
          if (!v129)
          {
            while (1)
            {
              uint64_t v118 = v130 + 1;
              if (__OFADD__(v130, 1)) {
                break;
              }
              if (v118 >= v151) {
                goto LABEL_114;
              }
              unint64_t v129 = *(void *)&v119[8 * v118];
              ++v130;
              if (v129) {
                goto LABEL_110;
              }
            }
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x1000ACD10);
          }
          uint64_t v118 = v130;
        }
      }
    }
LABEL_110:
    unint64_t v122 = (v129 - 1) & v129;
  }
LABEL_114:
  v90(v123, 1, 1, v153);
  return swift_release();
}

uint64_t sub_1000ACD40(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_10005D840();
  uint64_t v8 = (uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
  if (v7)
  {
    uint64_t v9 = (uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
    return sub_1000B1E98(v9);
  }
  uint64_t v11 = (uint64_t *)(v1
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionRemoteAlertPresentationsByID);
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (!*(void *)(*v11 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10004865C(v8);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v15 = sub_1000BAE00(a1);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_retain();
  swift_bridgeObjectRelease();
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  swift_beginAccess();
  if (v15)
  {
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v11;
    uint64_t *v11 = 0x8000000000000000;
    sub_1000B7614(v15, (uint64_t)v6, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))sub_10004A404, &qword_100181528);
    uint64_t *v11 = v18;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    sub_100048FE0((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_release();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000ACFB0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v40 - v13;
  if (sub_10005D840() == 1)
  {
    uint64_t v45 = v5;
    uint64_t v46 = v2;
    char v44 = v7;
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B150(v15, (uint64_t)qword_10018D128);
    id v16 = a1;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v49[0] = v42;
      uint64_t v43 = v4;
      *(_DWORD *)uint64_t v19 = 136315138;
      char v40 = v19 + 4;
      uint64_t v41 = v19;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_1000B4FD0((unint64_t *)&unk_100185300, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      uint64_t v48 = sub_100047F98(v20, v22, v49);
      uint64_t v4 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "update activity kit activity for model state:%s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
    int v26 = enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    BOOL v27 = v25 == v26;
    uint64_t v28 = v46;
    if (v27)
    {
      uint64_t v29 = OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity;
      if (*(void *)(v46 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity)) {
        return result;
      }
      uint64_t v30 = sub_1000BB61C((char *)v16);
      sub_1000A5008(v30);
      *(void *)(v28 + v29) = v30;
      return swift_release();
    }
    uint64_t v31 = (uint64_t)v16 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;
    unint64_t v32 = (uint64_t *)(v46
                    + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_nearbySharingInteractionActivitiesByID);
    swift_beginAccess();
    uint64_t v33 = *v32;
    if (*(void *)(*v32 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_10004865C(v31);
      if (v35)
      {
        uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v38 = (uint64_t)v44;
        uint64_t v37 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v31, v4);
        swift_beginAccess();
        if (v36)
        {
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v47 = *v32;
          *unint64_t v32 = 0x8000000000000000;
          sub_1000B7614(v36, v38, isUniquelyReferenced_nonNull_native, (void (*)(uint64_t))sub_10004A410, &qword_100181520);
          *unint64_t v32 = v47;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v4);
        }
        else
        {
          sub_100048FEC(v38);
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v4);
          swift_release();
        }
        swift_endAccess();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = sub_1000BB61C((char *)v16);
    goto LABEL_19;
  }
  uint64_t v23 = (uint64_t)a1 + OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id;

  return sub_1000B2740(v23);
}

void *sub_1000AD5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000AA4C(&qword_100183E70);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000AA4C(&qword_100183E78);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_1000A2CEC(v15, a1, a2, (uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_10000AA4C(&qword_100183E80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v7, 1, v16) == 1)
  {
    sub_10000F394((uint64_t)v7, &qword_100183E70);
    return 0;
  }
  else
  {
    uint64_t v18 = *(void *)&v7[*(int *)(v16 + 48)];
    uint64_t v19 = *(int *)(v8 + 48);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v20(v10, v7, v11);
    *(void *)&v10[v19] = v18;
    swift_release();
    v20(v14, v10, v11);
    uint64_t v17 = sub_1000AD854((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v17;
}

void *sub_1000AD854(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = v17;
  if (*(void *)(v17 + 16) && (unint64_t v7 = sub_10004865C(a1), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
    id v10 = v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  if (!v9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v11 = v17;
    if (*(void *)(v17 + 16) && (unint64_t v12 = sub_10004865C((uint64_t)v5), (v13 & 1) != 0))
    {
      uint64_t v9 = *(void **)(*(void *)(v11 + 56) + 8 * v12);
      id v14 = v9;
    }
    else
    {
      uint64_t v9 = 0;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t sub_1000ADA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v96 = a2;
  uint64_t v5 = sub_10000AA4C(&qword_100183DA0);
  __chkstk_darwin(v5 - 8);
  int64_t v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000AA4C(&qword_100183DA8);
  uint64_t v87 = *(void *)(v7 - 8);
  uint64_t v88 = v7;
  __chkstk_darwin(v7);
  unint64_t v86 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000AA4C(&qword_100181C08);
  uint64_t v94 = *(void *)(v9 - 8);
  uint64_t v95 = v9;
  __chkstk_darwin(v9);
  unint64_t v93 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v101 = *(void *)(v11 - 8);
  uint64_t v102 = v11;
  __chkstk_darwin(v11);
  uint64_t v89 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v97 = (void (*)(uint64_t, uint64_t))((char *)&v80 - v14);
  __chkstk_darwin(v15);
  uint64_t v98 = (char *)&v80 - v16;
  uint64_t v17 = (objc_class *)type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v18 = *((void *)v17 - 1);
  __chkstk_darwin(v17);
  uint64_t v91 = v19;
  uint64_t v92 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v80 - v21;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10000B150(v23, (uint64_t)qword_10018D128);
  uint64_t v90 = *(void (**)(char *, uint64_t, objc_class *))(v18 + 16);
  v90(v22, a1, v17);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v99 = a1;
  if (v26)
  {
    BOOL v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    v104[0] = v82;
    Class v83 = v17;
    uint64_t v81 = v27;
    *(_DWORD *)BOOL v27 = 136315138;
    unint64_t v80 = v27 + 4;
    id v84 = (id)a3;
    uint64_t v28 = v98;
    SFAirDrop.NearbySharingInteraction.id.getter();
    sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = v102;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v32 = v31;
    uint64_t v33 = v28;
    a3 = (uint64_t)v84;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v33, v29);
    uint64_t v103 = (void *)sub_100047F98(v30, v32, v104);
    uint64_t v17 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v99;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, objc_class *))(v18 + 8))(v22, v17);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating nearby sharing interaction view model for AirDrop interaction ID: %s", v81, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, objc_class *))(v18 + 8))(v22, v17);
  }

  uint64_t v34 = (uint64_t)v92;
  unint64_t v43 = (unint64_t)v90;
  v90(v92, a1, v17);
  Class v83 = (Class)type metadata accessor for NearbySharingInteractionViewModel(0);
  id v35 = objc_allocWithZone(v83);
  swift_retain();
  id v36 = sub_100060ABC(v34, a3);
  swift_release();
  id v84 = v36;
  swift_beginAccess();
  sub_10000AA4C((uint64_t *)&unk_100183E50);
  uint64_t v37 = v93;
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v100;
  swift_unknownObjectWeakInit();
  ((void (*)(uint64_t, uint64_t, objc_class *))v43)(v34, a1, v17);
  char v40 = v17;
  unint64_t v41 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v42 = swift_allocObject();
  LOBYTE(v43) = v42;
  *(void *)(v42 + 16) = v38;
  *(void *)(v42 + 24) = v96;
  (*(void (**)(unint64_t, uint64_t, objc_class *))(v18 + 32))(v42 + v41, v34, v40);
  sub_10000F288(&qword_100181C30, &qword_100181C08);
  swift_retain();
  uint64_t v44 = v95;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v37, v44);
  uint64_t v45 = (uint64_t)v97;
  SFAirDrop.NearbySharingInteraction.id.getter();
  uint64_t v46 = (id *)(v39 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v103 = *v46;
  uint64_t v48 = v103;
  *uint64_t v46 = (id)0x8000000000000000;
  unint64_t v50 = sub_10004865C(v45);
  uint64_t v51 = v48[2];
  BOOL v52 = (v49 & 1) == 0;
  uint64_t v53 = v51 + v52;
  if (__OFADD__(v51, v52))
  {
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v43) = v49;
  if (v48[3] >= v53)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    sub_1000B6940(v53, isUniquelyReferenced_nonNull_native);
    uint64_t v48 = v103;
    unint64_t v54 = sub_10004865C(v45);
    if ((v43 & 1) != (v55 & 1)) {
      goto LABEL_25;
    }
    unint64_t v50 = v54;
  }
  while (1)
  {
    *uint64_t v46 = v48;
    swift_bridgeObjectRelease();
    unint64_t v56 = *v46;
    if ((v43 & 1) == 0)
    {
      uint64_t v57 = (uint64_t)v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v98, v45, v102);
      sub_1000B77D0(v50, v57, (uint64_t)&_swiftEmptySetSingleton, v56);
    }
    AnyCancellable.store(in:)();
    uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    v97(v45, v102);
    swift_endAccess();
    swift_release();
    sub_1000B4FD0(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    char v58 = v84;
    v104[0] = ObservableObject<>.objectWillChange.getter();
    sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
    uint64_t v103 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v59 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v45 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v85, 1, 1, v59);
    type metadata accessor for ObservableObjectPublisher();
    sub_1000B5220((unint64_t *)&qword_100183E18, (unint64_t *)&qword_1001815D0);
    int v60 = v86;
    Publisher.receive<A>(on:options:)();
    sub_10000F394(v45, &qword_100183DA0);

    swift_release();
    uint64_t v61 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v61;
    *(void *)(v62 + 24) = v58;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = sub_1000BD234;
    *(void *)(v63 + 24) = v62;
    sub_10000F288((unint64_t *)&unk_100183E20, &qword_100183DA8);
    id v64 = v58;
    uint64_t v65 = v88;
    unint64_t v50 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v60, v65);
    uint64_t v66 = (uint64_t)v89;
    SFAirDrop.NearbySharingInteraction.id.getter();
    swift_beginAccess();
    int v67 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v103 = *v46;
    uint64_t v68 = v103;
    *uint64_t v46 = (id)0x8000000000000000;
    unint64_t v43 = sub_10004865C(v66);
    uint64_t v70 = v68[2];
    BOOL v71 = (v69 & 1) == 0;
    uint64_t v72 = v70 + v71;
    if (!__OFADD__(v70, v71)) {
      break;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    sub_10004A16C();
    uint64_t v48 = v103;
  }
  char v73 = v69;
  if (v68[3] >= v72)
  {
    if ((v67 & 1) == 0)
    {
      sub_10004A16C();
      uint64_t v68 = v103;
    }
    goto LABEL_19;
  }
  sub_1000B6940(v72, v67);
  uint64_t v68 = v103;
  unint64_t v74 = sub_10004865C(v66);
  if ((v73 & 1) != (v75 & 1))
  {
LABEL_25:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v43 = v74;
LABEL_19:
  int64_t v76 = v97;
  *uint64_t v46 = v68;
  swift_bridgeObjectRelease();
  uint64_t v77 = *v46;
  if ((v73 & 1) == 0)
  {
    uint64_t v78 = (uint64_t)v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v98, v66, v102);
    sub_1000B77D0(v43, v78, (uint64_t)&_swiftEmptySetSingleton, v77);
  }
  AnyCancellable.store(in:)();
  v76(v66, v102);
  swift_endAccess();
  swift_release();
  return (uint64_t)v64;
}

void sub_1000AE63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v15 = (void *)Strong;
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for SFAirDrop.NearbySharingInteraction.State.ended(_:), v10);
    char v16 = static SFAirDrop.NearbySharingInteraction.State.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v16)
    {
      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v4);
      unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v19 = (char *)swift_allocObject();
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
      *((void *)v19 + 4) = v22;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      swift_retain();
      sub_1000F0F68((uint64_t)v9, (uint64_t)&unk_100183E68, (uint64_t)v19);

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_1000AE92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000AE9EC, 0, 0);
}

uint64_t sub_1000AE9EC()
{
  SFAirDrop.NearbySharingInteraction.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003D968;
  uint64_t v2 = *(void *)(v0 + 48);
  return SFAirDropClient.endNearbySharingInteraction(_:)(v2);
}

uint64_t sub_1000AEA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v131 = a3;
  uint64_t v138 = a2;
  uint64_t v4 = sub_10000AA4C(&qword_100183DA0);
  __chkstk_darwin(v4 - 8);
  unint64_t v122 = (char *)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_10000AA4C(&qword_100183DA8);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v123 = (char *)v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000AA4C(&qword_100183DB0);
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v137 = (uint64_t)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000AA4C(&qword_100183DB8);
  uint64_t v136 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000AA4C(&qword_100183DC0);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v156 = (char *)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v155 = (char *)v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000AA4C(&qword_100183DC8);
  uint64_t v132 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000AA4C(&qword_100183DD0);
  uint64_t v150 = *(void *)(v15 - 8);
  uint64_t v151 = v15;
  __chkstk_darwin(v15);
  uint64_t v135 = (char *)v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = v16;
  __chkstk_darwin(v17);
  uint64_t v159 = (char *)v118 - v18;
  uint64_t v19 = sub_10000AA4C(&qword_100183DD8);
  uint64_t v148 = *(void *)(v19 - 8);
  uint64_t v149 = v19;
  __chkstk_darwin(v19);
  long long v133 = (char *)v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = v20;
  __chkstk_darwin(v21);
  unint64_t v147 = (char *)v118 - v22;
  uint64_t v161 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v158 = (uint64_t)v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v145 = (char *)v118 - v25;
  __chkstk_darwin(v26);
  uint64_t v146 = (char *)v118 - v27;
  uint64_t v28 = type metadata accessor for SFProximityHandoff.Interaction();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v129 = (char *)v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = v30;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)v118 - v32;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10000B150(v34, (uint64_t)qword_10018D128);
  id v35 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v160 = a1;
  uint64_t v154 = v35;
  uint64_t v127 = v29 + 16;
  v35(v33, a1, v28);
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  BOOL v39 = os_log_type_enabled(v36, v37);
  uint64_t v126 = v29;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    int v120 = v38;
    unint64_t v41 = (uint8_t *)v40;
    Class v121 = (Class)swift_slowAlloc();
    Class v163 = v121;
    uint64_t v119 = v41;
    *(_DWORD *)unint64_t v41 = 136315138;
    v118[1] = v41 + 4;
    id v152 = (id)v12;
    uint64_t v42 = v146;
    SFProximityHandoff.Interaction.id.getter();
    sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v43 = v29;
    uint64_t v44 = v28;
    uint64_t v45 = v14;
    uint64_t v46 = v161;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v49 = v48;
    unint64_t v50 = v42;
    uint64_t v12 = (uint64_t)v152;
    uint64_t v51 = v46;
    uint64_t v14 = v45;
    uint64_t v28 = v44;
    (*(void (**)(char *, uint64_t))(v157 + 8))(v50, v51);
    uint64_t v162 = (void *)sub_100047F98(v47, v49, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v44);
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v120, "Creating nearby sharing interaction view model for Proximity Handoff interaction ID: %s", v119, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
  }

  uint64_t v52 = (uint64_t)v129;
  uint64_t v53 = v160;
  v154(v129, v160, v28);
  Class v121 = (Class)type metadata accessor for NearbySharingInteractionViewModel(0);
  id v54 = objc_allocWithZone(v121);
  uint64_t v55 = v131;
  swift_retain();
  id v152 = sub_1000616D8(v52, v55);
  swift_release();
  uint64_t v56 = type metadata accessor for SFNearbySharingInteractionViewState();
  uint64_t v57 = v132;
  (*(void (**)(char *, void, uint64_t))(v132 + 104))(v14, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v12);
  char v58 = v147;
  uint64_t v131 = v56;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v12);
  uint64_t v59 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v155, 1, 1, v59);
  uint64_t v60 = v148;
  uint64_t v61 = v133;
  uint64_t v62 = v28;
  uint64_t v63 = v149;
  (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v133, v58, v149);
  v154((char *)v52, v53, v62);
  unint64_t v64 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  uint64_t v65 = v126;
  unint64_t v66 = (v130 + *(unsigned __int8 *)(v126 + 80) + v64) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
  unint64_t v67 = (v128 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v68 + v64, v61, v63);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v65 + 32))(v68 + v66, v52, v62);
  *(void *)(v68 + v67) = v138;
  swift_retain();
  uint64_t v69 = (uint64_t)v155;
  uint64_t v154 = (void (*)(char *, uint64_t, uint64_t))static Task<>.noThrow(priority:operation:)();
  swift_release();
  sub_10000F394(v69, &qword_1001829C0);
  uint64_t v70 = v137;
  sub_10005CE5C(v137);
  sub_10000F288(&qword_100183DF0, &qword_100183DB0);
  BOOL v71 = v140;
  uint64_t v72 = v141;
  Publisher.map<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v70, v72);
  sub_10000F288(&qword_100183DF8, &qword_100183DB8);
  sub_1000B4FD0(&qword_100183E00, (void (*)(uint64_t))&type metadata accessor for SFNearbySharingInteractionViewState);
  uint64_t v73 = v142;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v136 + 8))(v71, v73);
  uint64_t v74 = v150;
  uint64_t v75 = v151;
  int64_t v76 = *(void (**)(char *, char *, uint64_t))(v150 + 16);
  uint64_t v77 = v135;
  uint64_t v78 = v159;
  v76(v135, v159, v151);
  unint64_t v79 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  uint64_t v155 = (char *)swift_allocObject();
  unint64_t v80 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v80(&v155[v79], v77, v75);
  v76(v77, v78, v75);
  uint64_t v81 = swift_allocObject();
  v80((char *)(v81 + v79), v77, v75);
  sub_10000F288((unint64_t *)&unk_100183E08, &qword_100183DC0);
  uint64_t v82 = v156;
  unint64_t v83 = v144;
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, unint64_t))(v143 + 8))(v82, v83);
  uint64_t v84 = (uint64_t)v145;
  SFProximityHandoff.Interaction.id.getter();
  int64_t v85 = (id *)(v153 + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_subscriptionsByID);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = *v85;
  uint64_t v87 = v162;
  *int64_t v85 = (id)0x8000000000000000;
  unint64_t v89 = sub_10004865C(v84);
  uint64_t v90 = v87[2];
  BOOL v91 = (v88 & 1) == 0;
  uint64_t v92 = v90 + v91;
  if (__OFADD__(v90, v91))
  {
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v83) = v88;
  if (v87[3] >= v92)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    sub_1000B6940(v92, isUniquelyReferenced_nonNull_native);
    uint64_t v87 = v162;
    unint64_t v93 = sub_10004865C(v84);
    if ((v83 & 1) != (v94 & 1)) {
      goto LABEL_25;
    }
    unint64_t v89 = v93;
  }
  while (1)
  {
    *int64_t v85 = v87;
    swift_bridgeObjectRelease();
    uint64_t v95 = *v85;
    if ((v83 & 1) == 0)
    {
      uint64_t v96 = (uint64_t)v146;
      (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v146, v84, v161);
      sub_1000B77D0(v89, v96, (uint64_t)&_swiftEmptySetSingleton, v95);
    }
    AnyCancellable.store(in:)();
    uint64_t v156 = *(char **)(v157 + 8);
    ((void (*)(uint64_t, uint64_t))v156)(v84, v161);
    swift_endAccess();
    swift_release();
    sub_1000B4FD0(&qword_100181CD0, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    uint64_t v97 = v152;
    Class v163 = (Class)ObservableObject<>.objectWillChange.getter();
    sub_10001FB40(0, (unint64_t *)&qword_1001815D0);
    uint64_t v162 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v98 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v99 = (uint64_t)v122;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v122, 1, 1, v98);
    type metadata accessor for ObservableObjectPublisher();
    sub_1000B5220((unint64_t *)&qword_100183E18, (unint64_t *)&qword_1001815D0);
    uint64_t v100 = v123;
    Publisher.receive<A>(on:options:)();
    sub_10000F394(v99, &qword_100183DA0);

    swift_release();
    uint64_t v101 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v102 = swift_allocObject();
    *(void *)(v102 + 16) = v101;
    *(void *)(v102 + 24) = v97;
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = sub_1000BE33C;
    *(void *)(v103 + 24) = v102;
    sub_10000F288((unint64_t *)&unk_100183E20, &qword_100183DA8);
    id v104 = v97;
    uint64_t v105 = v125;
    unint64_t v89 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v100, v105);
    uint64_t v106 = v158;
    SFProximityHandoff.Interaction.id.getter();
    swift_beginAccess();
    uint64_t v84 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v162 = *v85;
    char v107 = v162;
    *int64_t v85 = (id)0x8000000000000000;
    unint64_t v83 = sub_10004865C(v106);
    uint64_t v109 = v107[2];
    BOOL v110 = (v108 & 1) == 0;
    uint64_t v111 = v109 + v110;
    if (!__OFADD__(v109, v110)) {
      break;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    sub_10004A16C();
    uint64_t v87 = v162;
  }
  char v112 = v108;
  if (v107[3] >= v111)
  {
    if ((v84 & 1) == 0)
    {
      sub_10004A16C();
      char v107 = v162;
    }
    goto LABEL_19;
  }
  sub_1000B6940(v111, v84);
  char v107 = v162;
  unint64_t v113 = sub_10004865C(v158);
  if ((v112 & 1) != (v114 & 1))
  {
LABEL_25:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v83 = v113;
LABEL_19:
  *int64_t v85 = v107;
  swift_bridgeObjectRelease();
  uint64_t v115 = *v85;
  if ((v112 & 1) == 0)
  {
    uint64_t v116 = (uint64_t)v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v146, v158, v161);
    sub_1000B77D0(v83, v116, (uint64_t)&_swiftEmptySetSingleton, v115);
  }
  AnyCancellable.store(in:)();
  ((void (*)(uint64_t, uint64_t))v156)(v158, v161);
  swift_endAccess();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v150 + 8))(v159, v151);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v147, v149);
  return (uint64_t)v104;
}

uint64_t sub_1000AFDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFProximityHandoff.Interaction();
  v4[11] = v6;
  _OWORD v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFNearbySharingInteractionViewState();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_10000AA4C(&qword_100183E38);
  v4[22] = swift_task_alloc();
  uint64_t v8 = sub_10000AA4C((uint64_t *)&unk_100183E40);
  v4[23] = v8;
  v4[24] = *(void *)(v8 - 8);
  v4[25] = swift_task_alloc();
  return _swift_task_switch(sub_1000AFFF8, 0, 0);
}

uint64_t sub_1000AFFF8()
{
  sub_10000AA4C(&qword_100183DD8);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[26] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000B00B8;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_1000B00B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B01B4, 0, 0);
}

uint64_t sub_1000B01B4()
{
  int64_t v85 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[21];
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, enum case for SFNearbySharingInteractionViewState.idle(_:), v2);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[16];
    uint64_t v9 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[6];
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = sub_10000B150(v13, (uint64_t)qword_10018D128);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v0[27] = v14;
    uint64_t v81 = v15;
    v15(v5, v6, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = v0[20];
    if (v18)
    {
      os_log_type_t type = v17;
      uint64_t v21 = v0[16];
      uint64_t v20 = v0[17];
      uint64_t v22 = v0[15];
      uint64_t v74 = v0[12];
      uint64_t v75 = v0[11];
      os_log_t log = v16;
      uint64_t v23 = v0[10];
      uint64_t v71 = v0[9];
      uint64_t v69 = v0[14];
      uint64_t v70 = v0[8];
      uint64_t v24 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315394;
      v81(v20, v19, v22);
      uint64_t v25 = String.init<A>(describing:)();
      v0[3] = sub_100047F98(v25, v26, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v27(v19, v22);
      *(_WORD *)(v24 + 12) = 2080;
      SFProximityHandoff.Interaction.id.getter();
      sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v29;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v23, v70);
      v0[4] = sub_100047F98(v28, v30, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v69, v75);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Sending final viewState %s for interaction ID %s to proximity handoff client", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v58 = v0[14];
      uint64_t v60 = v0[11];
      uint64_t v59 = v0[12];
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0[16] + 8);
      v27(v0[20], v0[15]);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
    }
    v0[32] = v27;
    unint64_t v83 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SFProximityHandoffClient.nearbySharingInteractionView(update:viewState:)
                                                   + async function pointer to dispatch thunk of SFProximityHandoffClient.nearbySharingInteractionView(update:viewState:));
    uint64_t v61 = (void *)swift_task_alloc();
    v0[33] = v61;
    *uint64_t v61 = v0;
    v61[1] = sub_1000B0B18;
    uint64_t v62 = v0[21];
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v31 = v0[18];
    uint64_t v32 = v0[19];
    uint64_t v33 = v0[15];
    uint64_t v34 = v0[16];
    uint64_t v36 = v0[12];
    uint64_t v35 = v0[13];
    uint64_t v37 = v0[11];
    uint64_t v38 = v0[6];
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v40 = sub_10000B150(v39, (uint64_t)qword_10018D128);
    unint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v0[28] = v40;
    uint64_t v82 = v41;
    v41(v31, v32, v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v38, v37);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = v0[18];
    if (v44)
    {
      os_log_type_t typea = v43;
      uint64_t v46 = v0[16];
      uint64_t v47 = v0[17];
      uint64_t v48 = v0[15];
      uint64_t v49 = v0[10];
      uint64_t v76 = v0[12];
      logCGFloat a = (os_log_t)v0[11];
      uint64_t v50 = v0[9];
      uint64_t v72 = v0[13];
      uint64_t v73 = v0[8];
      uint64_t v51 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315394;
      v82(v47, v45, v48);
      uint64_t v52 = String.init<A>(describing:)();
      *(void *)(v51 + 4) = sub_100047F98(v52, v53, &v84);
      swift_bridgeObjectRelease();
      id v54 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v54(v45, v48);
      *(_WORD *)(v51 + 12) = 2080;
      SFProximityHandoff.Interaction.id.getter();
      sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v73);
      *(void *)(v51 + 14) = sub_100047F98(v55, v57, &v84);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_t))(v76 + 8))(v72, loga);
      _os_log_impl((void *)&_mh_execute_header, v42, typea, "Sending viewState %s for interaction ID %s to proximity handoff client", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v63 = v0[12];
      uint64_t v64 = v0[13];
      uint64_t v65 = v0[11];
      id v54 = *(void (**)(uint64_t, uint64_t))(v0[16] + 8);
      v54(v0[18], v0[15]);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
    }

    v0[29] = v54;
    unint64_t v83 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of SFProximityHandoffClient.nearbySharingInteractionView(update:viewState:)
                                                   + async function pointer to dispatch thunk of SFProximityHandoffClient.nearbySharingInteractionView(update:viewState:));
    unint64_t v66 = (void *)swift_task_alloc();
    v0[30] = v66;
    *unint64_t v66 = v0;
    v66[1] = sub_1000B0944;
    uint64_t v62 = v0[19];
  }
  uint64_t v67 = v0[6];
  return v83(v67, v62);
}

uint64_t sub_1000B0944()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B0D2C;
  }
  else {
    uint64_t v2 = sub_1000B0A58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B0A58()
{
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000B00B8;
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_1000B0B18()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000B0F10;
  }
  else {
    uint64_t v2 = sub_1000B0C2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B0C2C()
{
  (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 168), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B0D2C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to forward viewState to proximityHandoffClient: %@", (uint8_t *)v3, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000B00B8;
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 184);
  return AsyncStream.Iterator.next(isolation:)(v7, 0, 0, v8);
}

uint64_t sub_1000B0F10()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to forward final viewState to proximityHandoffClient: %@", v3, 0xCu);
    sub_10000AA4C(&qword_100180510);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 168), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000B114C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B150(v10, (uint64_t)qword_10018D128);
  sub_1000BCFE0(a1, (uint64_t)v9, type metadata accessor for NearbySharingInteractionViewState);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v18 = a2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v17 = a1;
    sub_1000BCFE0((uint64_t)v9, (uint64_t)v6, type metadata accessor for NearbySharingInteractionViewState);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v19 = sub_100047F98(v14, v15, &v20);
    a2 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a1 = v17;
    sub_1000BD048((uint64_t)v9, type metadata accessor for NearbySharingInteractionViewState);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "New (internal) viewState: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000BD048((uint64_t)v9, type metadata accessor for NearbySharingInteractionViewState);
  }

  sub_1000BCFE0(a1, (uint64_t)v6, type metadata accessor for NearbySharingInteractionViewState);
  return sub_1000B13F0((uint64_t)v6, a2);
}

uint64_t sub_1000B13F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BCFE0(a1, (uint64_t)v6, type metadata accessor for NearbySharingInteractionViewState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      sub_1000BD048(a1, type metadata accessor for NearbySharingInteractionViewState);
      uint64_t v7 = enum case for SFNearbySharingInteractionViewState.idle(_:);
      uint64_t v8 = type metadata accessor for SFNearbySharingInteractionViewState();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(a2, v7, v8);
      return sub_1000BD048((uint64_t)v6, type metadata accessor for NearbySharingInteractionViewState);
    case 3u:
      sub_1000BD048(a1, type metadata accessor for NearbySharingInteractionViewState);
      uint64_t v11 = (uint64_t)v6;
      goto LABEL_7;
    case 4u:
      sub_1000BD048(a1, type metadata accessor for NearbySharingInteractionViewState);
      sub_10005E778(*(void *)v6, *((void *)v6 + 1), *((void *)v6 + 2), *((void *)v6 + 3), *((void *)v6 + 4), *((void *)v6 + 5), *((void *)v6 + 6), *((void *)v6 + 7), *((void *)v6 + 8), *((void *)v6 + 9));
      uint64_t v12 = enum case for SFNearbySharingInteractionViewState.contentPreview(_:);
      uint64_t v13 = type metadata accessor for SFNearbySharingInteractionViewState();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a2, v12, v13);
      return sub_1000608FC((uint64_t)(v6 + 104));
    case 5u:
      uint64_t v11 = a1;
LABEL_7:
      sub_1000BD048(v11, type metadata accessor for NearbySharingInteractionViewState);
      uint64_t v10 = (unsigned int *)&enum case for SFNearbySharingInteractionViewState.idle(_:);
      goto LABEL_8;
    default:
      dispatch thunk of ShockwaveAnimationCoordinator.state.getter();
      swift_release();
      sub_1000BD048(a1, type metadata accessor for NearbySharingInteractionViewState);
      uint64_t v10 = (unsigned int *)&enum case for SFNearbySharingInteractionViewState.shockwave(_:);
LABEL_8:
      uint64_t v14 = *v10;
      uint64_t v15 = type metadata accessor for SFNearbySharingInteractionViewState();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a2, v14, v15);
  }
}

void sub_1000B16C0()
{
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B150(v0, (uint64_t)qword_10018D128);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "viewStatePublisher ended", v3, 2u);
    swift_slowDealloc();
  }

  sub_10000AA4C(&qword_100183DD0);
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1000B17B0(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AA4C(&qword_100183E30);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v29 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFNearbySharingInteractionViewState();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - v12;
  if (qword_10017F7A8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B150(v14, (uint64_t)qword_10018D128);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  unint64_t v30 = a1;
  uint64_t v31 = v15;
  v15(v13, a1, v7);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v4;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v28 = a2;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v33 = v25;
    uint64_t v26 = v5;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v24 = v19 + 4;
    v31(v10, v13, v7);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v32 = sub_100047F98(v20, v21, &v33);
    uint64_t v5 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "New viewState: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  v31(v10, v30, v7);
  sub_10000AA4C(&qword_100183DD0);
  uint64_t v22 = v29;
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v22, v4);
}

void sub_1000B1B3C(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1000ACD40(a2);
    sub_1000ACFB0(a2);
  }
}

uint64_t sub_1000B1BA0(void *a1)
{
  uint64_t v2 = sub_10000AA4C(&qword_1001829C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10005D840();
  if (!(_BYTE)result)
  {
    if (qword_10017F7A8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B150(v6, (uint64_t)qword_10018D128);
    id v7 = a1;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v19 = v11;
      type metadata accessor for UUID();
      sub_1000B4FD0((unint64_t *)&unk_1001804E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v18 = sub_100047F98(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ending nearby sharing interaction with ID: %s due to remote alert dismissal", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
    type metadata accessor for MainActor();
    id v15 = v7;
    uint64_t v16 = static MainActor.shared.getter();
    os_log_type_t v17 = (void *)swift_allocObject();
    v17[2] = v16;
    v17[3] = &protocol witness table for MainActor;
    v17[4] = v15;
    sub_10010C15C((uint64_t)v4, (uint64_t)&unk_100183EE8, (uint64_t)v17);
    return swift_release();
  }
  return result;
}