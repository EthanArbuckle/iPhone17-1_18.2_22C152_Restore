uint64_t sub_100007B54(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchQoS();
  v27 = *(void *)(v4 - 8);
  v28 = v4;
  __chkstk_darwin();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(void *)(v26 - 8);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger();
  v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v25 = v7;
    v18 = v2;
    v19 = a1;
    v20 = v17;
    *(_DWORD *)v17 = 134217984;
    aBlock[0] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ExpressSettingsSetupCache: Set handler for: %lu", v20, 0xCu);
    a1 = v19;
    v2 = v18;
    v7 = v25;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static DispatchWorkItemFlags.barrier.getter();
  v21 = swift_allocObject();
  *(void *)(v21 + 16) = v2;
  *(void *)(v21 + 24) = a1;
  aBlock[4] = sub_10000BB8C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002AF2D0;
  v22 = _Block_copy(aBlock);
  v23 = v2;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v26);
  return swift_release();
}

uint64_t sub_100007EDC(uint64_t a1, Swift::UInt a2)
{
  swift_beginAccess();
  sub_10000A890(&v4, a2);
  return swift_endAccess();
}

uint64_t sub_100007F8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v2;
    uint64_t v16 = v4;
    uint64_t v17 = a1;
    v18 = v15;
    *(_DWORD *)v15 = 134217984;
    uint64_t v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ExpressSettingsSetupCache: Remove handler for: %lu", v18, 0xCu);
    a1 = v17;
    uint64_t v4 = v16;
    uint64_t v2 = v22;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v19);
  *(&v21 - 2) = v2;
  *(&v21 - 1) = a1;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100008234(uint64_t a1, Swift::UInt a2)
{
  return swift_endAccess();
}

uint64_t sub_1000082F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (unint64_t)sub_1000087E8(a1);
  if (!v8) {
    goto LABEL_22;
  }
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  v37 = v7;
  if (v10)
  {
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        if ((v9 & 0xC000000000000001) != 0) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v9 + 8 * v11 + 32);
        }
        os_log_type_t v14 = v13;
        id v15 = [v13 unsignedIntegerValue];

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = sub_10002A11C(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v17 = *((void *)v12 + 2);
        unint64_t v16 = *((void *)v12 + 3);
        if (v17 >= v16 >> 1) {
          uint64_t v12 = sub_10002A11C((char *)(v16 > 1), v17 + 1, 1, v12);
        }
        ++v11;
        *((void *)v12 + 2) = v17 + 1;
        *(void *)&v12[8 * v17 + 32] = v15;
      }
      while (v10 != v11);
      goto LABEL_17;
    }
    __break(1u);
LABEL_22:
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v31._countAndFlagsBits = 0xD000000000000032;
    v31._object = (void *)0x8000000100237260;
    String.append(_:)(v31);
    v32._object = (void *)0x80000001002372A0;
    v32._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v32);
    v33._countAndFlagsBits = 0x657220747562202CLL;
    v33._object = (void *)0xEF20646576696563;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 0x6E413C7961727241;
    v34._object = (void *)0xEA00000000003E79;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 0x64616574736E6920;
    v35._object = (void *)0xE800000000000000;
    String.append(_:)(v35);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
LABEL_17:
  swift_bridgeObjectRelease_n();
  uint64_t v18 = sub_10000B494((uint64_t)v12);
  swift_bridgeObjectRelease();
  *(void *)&v2[OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_registeredSettings] = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  uint64_t v21 = v37;
  uint64_t v20 = v38;
  uint64_t v22 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v19, v39);
  uint64_t v23 = v2;
  v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)v26 = 136315138;
    v36[1] = v26 + 4;
    type metadata accessor for BYExpressSetupFeature(0);
    sub_10000B994(&qword_10031D0C0, type metadata accessor for BYExpressSetupFeature);
    swift_bridgeObjectRetain();
    uint64_t v27 = Set.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v40 = sub_10003FC78(v27, v29, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "ExpressSettingsSetupCache: Registered Settings: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v39);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  }
}

void *sub_1000087E8(uint64_t a1)
{
  uint64_t v6 = &_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10000BB14(i, (uint64_t)v5);
    sub_10000BBD4(0, &qword_10031D0C8);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

BOOL sub_10000896C(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_100008A88(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v42 = a2;
  uint64_t v41 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  __chkstk_darwin(v4);
  v46 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  v43 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_queue];
  v56 = v3;
  sub_10000A84C((uint64_t *)&unk_10031D090);
  v40[1] = v11;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v12 = aBlock[0];
  id v13 = dispatch_group_create();
  os_log_type_t v14 = (void *)swift_allocObject();
  int64_t v16 = 0;
  v14[2] = 0;
  uint64_t v17 = *(void *)(v12 + 56);
  uint64_t v51 = v12 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v21 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  int64_t v52 = (unint64_t)(v18 + 63) >> 6;
  v53 = (void (**)(char *, uint64_t))(v8 + 8);
  *(void *)&long long v15 = 134217984;
  long long v49 = v15;
  v50 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    if (v20)
    {
      uint64_t v54 = (v20 - 1) & v20;
      int64_t v55 = v16;
      unint64_t v24 = __clz(__rbit64(v20)) | (v16 << 6);
      goto LABEL_21;
    }
    int64_t v25 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v25 >= v52) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v51 + 8 * v25);
    int64_t v27 = v16 + 1;
    if (!v26)
    {
      int64_t v27 = v16 + 2;
      if (v16 + 2 >= v52) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v51 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v16 + 3;
        if (v16 + 3 >= v52) {
          goto LABEL_23;
        }
        unint64_t v26 = *(void *)(v51 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v54 = (v26 - 1) & v26;
    int64_t v55 = v27;
    unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_21:
    unint64_t v29 = *(NSObject **)(*(void *)(v12 + 48) + 8 * v24);
    uint64_t v30 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*v21)(v10, v30, v7);
    Swift::String v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = v49;
      *(void *)(v33 + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "ExpressSettingsSetupCache: Executing handler for: %lu", (uint8_t *)v33, 0xCu);
      uint64_t v21 = v50;
      swift_slowDealloc();
    }

    (*v53)(v10, v7);
    dispatch_group_enter(v13);
    uint64_t v22 = v13;
    swift_retain();
    id v23 = v3;
    sub_10000B540((unint64_t)v29, (uint64_t)v23, v22, v14, v29, v23);

    swift_release();
    unint64_t v20 = v54;
    int64_t v16 = v55;
  }
  uint64_t v28 = v16 + 4;
  if (v16 + 4 >= v52)
  {
LABEL_23:
    swift_release();
    Swift::String v34 = (void *)swift_allocObject();
    uint64_t v35 = v42;
    v34[2] = v41;
    v34[3] = v35;
    v34[4] = v14;
    aBlock[4] = sub_10000B988;
    aBlock[5] = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100031900;
    aBlock[3] = &unk_1002AF208;
    v36 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v37 = v43;
    static DispatchQoS.unspecified.getter();
    v57 = &_swiftEmptyArrayStorage;
    sub_10000B994((unint64_t *)&qword_10031D5C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A84C((uint64_t *)&unk_10031D0A0);
    sub_10000B9DC();
    uint64_t v38 = v46;
    uint64_t v39 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v45);
    swift_release();
    swift_release();
    return;
  }
  unint64_t v26 = *(void *)(v51 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v16 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v52) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v51 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
}

void sub_100009108(void *a1, NSObject *a2, void *a3, NSObject *a4, void *a5)
{
  int64_t v52 = a5;
  v56 = a4;
  v57 = a2;
  uint64_t v54 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v55 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - v17;
  if (a1)
  {
    uint64_t v19 = a1;
    uint64_t v53 = v13;
    unint64_t v20 = (void **)(v54 + 2);
    swift_beginAccess();
    uint64_t v21 = *v20;
    uint64_t v22 = *v20;
    id v23 = v19;
    if (!*v20)
    {
      id v24 = v19;
      uint64_t v22 = v19;
    }
    swift_beginAccess();
    int64_t v25 = *v20;
    *unint64_t v20 = v22;
    id v26 = v19;
    id v27 = v21;

    uint64_t v28 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    unint64_t v29 = v55;
    uint64_t v30 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v55, v28, v53);
    Swift::String v31 = v26;
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v56;
    if (v34)
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v54 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 134218242;
      v58 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2112;
      v58 = v31;
      Swift::String v31 = v31;
      uint64_t v30 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v54 = v23;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "ExpressSettingsSetupCache: Error applying handler for: %lu, %@", (uint8_t *)v36, 0x16u);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v32 = v31;
    }
    long long v49 = v57;

    (*(void (**)(char *, uint64_t))(v14 + 8))(v29, v30);
  }
  else
  {
    v50 = v12;
    uint64_t v51 = v10;
    uint64_t v54 = v8;
    int64_t v55 = (char *)v9;
    uint64_t v37 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v18, v37, v13);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = v56;
    if (v40)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 134217984;
      aBlock[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "ExpressSettingsSetupCache: Finished applying handler for: %lu", v42, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    v43 = v52;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = v43;
    *(void *)(v44 + 24) = v41;
    aBlock[4] = sub_10000BB0C;
    aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000315E0;
    aBlock[3] = &unk_1002AF280;
    uint64_t v45 = _Block_copy(aBlock);
    id v46 = v43;
    uint64_t v47 = v50;
    static DispatchQoS.unspecified.getter();
    v59 = &_swiftEmptyArrayStorage;
    sub_10000B994((unint64_t *)&qword_10031D5C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A84C((uint64_t *)&unk_10031D0A0);
    sub_10000B9DC();
    uint64_t v48 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);
    (*(void (**)(void *, uint64_t))(v53 + 8))(v48, v6);
    (*(void (**)(char *, char *))(v51 + 8))(v47, v55);
    swift_release();
    long long v49 = v57;
  }
  dispatch_group_leave(v49);
}

uint64_t sub_100009744(uint64_t a1, Swift::UInt a2)
{
  return swift_endAccess();
}

void sub_10000979C(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void **)(a3 + 16);
  id v6 = v5;
  a1(v5);
}

void sub_100009890(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1000098F4()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v3;
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "ExpressSettingsSetupCache: Reset handlers", v14, 2u);
    uint64_t v3 = v21;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = v23;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  aBlock[4] = sub_10000A788;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002AF190;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return swift_release();
}

uint64_t sub_100009CAC()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v4;
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "ExpressSettingsSetupCache: Reset cache", v14, 2u);
    uint64_t v4 = v21;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = v23;
  sub_1000098F4();
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  aBlock[4] = sub_10000A688;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002AF140;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return swift_release();
}

id sub_10000A06C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExpressSettingsSetupCacheManager();
  return [super dealloc];
}

uint64_t variable initialization expression of IntelligenceManager.didShowIntelligencePaneThisBuddyRun()
{
  return 0;
}

uint64_t variable initialization expression of IntelligenceAvailabilityProvider.serverBackedValue()
{
  return 2;
}

uint64_t type metadata accessor for ExpressSettingsSetupCacheManager()
{
  return self;
}

void type metadata accessor for UITraitEnvironmentLayoutDirection(uint64_t a1)
{
}

void type metadata accessor for BYExpressSetupFeature(uint64_t a1)
{
}

uint64_t sub_10000A168()
{
  return sub_10000B994(&qword_10031CFC0, type metadata accessor for BYExpressSetupFeature);
}

void sub_10000A1B4()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_10000A1E4(uint64_t a1, uint64_t a2)
{
  return sub_10000A544(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000A1FC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10000A274(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10000A2F4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_10000A338(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_10000A34C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10000A35C(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int sub_10000A36C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10000A3B8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000A3FC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000A444@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000A470(uint64_t a1)
{
  uint64_t v2 = sub_10000B994(&qword_10031D128, type metadata accessor for UIContentSizeCategory);
  uint64_t v3 = sub_10000B994(&qword_10031D130, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A52C(uint64_t a1, uint64_t a2)
{
  return sub_10000A544(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000A544(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000A588()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000A5DC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000A650()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000A688()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_registeredSettings) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  *(void *)(v1 + OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_dataSource) = 0;

  return swift_unknownObjectRelease();
}

uint64_t sub_10000A6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000A6F4()
{
  return swift_release();
}

uint64_t sub_10000A6FC()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10000A788()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_expressFeaturesToApply);
  swift_beginAccess();
  *uint64_t v1 = &_swiftEmptySetSingleton;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000A7E4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_expressFeaturesToApply);
  swift_beginAccess();
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000A84C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000A890(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10000AC5C(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10000A9B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A84C(&qword_10031D0B8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    Swift::Int v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_10000AC5C(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10000A9B0();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_10000ADAC();
      goto LABEL_14;
    }
    sub_10000AF44();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for BYExpressSetupFeature(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_10000ADAC()
{
  uint64_t v1 = v0;
  sub_10000A84C(&qword_10031D0B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10000AF44()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A84C(&qword_10031D0B8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10000B1C0(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 8 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10000ADAC();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10000B2E8(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t sub_10000B2E8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10000B494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for BYExpressSetupFeature(0);
  sub_10000B994(&qword_10031D0C0, type metadata accessor for BYExpressSetupFeature);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      sub_10000A890(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void sub_10000B540(unint64_t a1, uint64_t a2, void *a3, void *a4, NSObject *a5, void *a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v16 = (void *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  if (a1 - 1 < 0xC)
  {
    unint64_t v39 = a1;
    uint64_t v17 = a3;
    swift_retain();
    id v18 = a6;
    uint64_t v19 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v19, v12);
    LOBYTE(a1) = static os_log_type_t.fault.getter();
    unint64_t v20 = Logger.logObject.getter();
    a1 = a1;
    if (os_log_type_enabled(v20, (os_log_type_t)a1))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = a5;
      char v22 = a4;
      id v23 = v18;
      BOOL v24 = v17;
      uint64_t v25 = v21;
      *(_DWORD *)unint64_t v21 = 134217984;
      unint64_t v42 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)a1, "Invalid express setting handler for: %lu", v25, 0xCu);
      uint64_t v17 = v24;
      id v18 = v23;
      a4 = v22;
      a5 = v38;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (!os_variant_has_internal_ui())
    {
      sub_100009108(0, v17, a4, a5, v18);
      swift_release();
      return;
    }
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000025;
    unint64_t v43 = 0x8000000100237230;
    unint64_t v41 = v39;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_15:
    swift_release();
    type metadata accessor for BYExpressSetupFeature(0);
    unint64_t v42 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  if (a1 != 13) {
    goto LABEL_15;
  }
  uint64_t v26 = *(void **)(a2 + OBJC_IVAR____TtC5Setup32ExpressSettingsSetupCacheManager_dataSource);
  if (v26)
  {
    id v27 = a3;
    swift_retain();
    id v28 = a6;
    id v29 = [v26 stolenDeviceProtectionStrictModeEnabled];
    if (v29)
    {
      uint64_t v30 = v29;
      LOBYTE(v26) = [v29 BOOLValue];
    }
    else
    {
      LOBYTE(v26) = 0;
    }
  }
  else
  {
    id v31 = a3;
    swift_retain();
    id v32 = a6;
  }
  os_log_type_t v33 = (objc_class *)type metadata accessor for StolenDeviceProtectionExpressSettingDeferredHandler();
  BOOL v34 = objc_allocWithZone(v33);
  v34[OBJC_IVAR____TtC5Setup51StolenDeviceProtectionExpressSettingDeferredHandler_includesStrictMode] = (_BYTE)v26;
  v40.receiver = v34;
  v40.super_class = v33;
  id v35 = [super init];
  sub_1000243C0((uint64_t)sub_10000BAC8, (uint64_t)v16);
  swift_release();
}

uint64_t sub_10000B948()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10000B988()
{
  sub_10000979C(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10000B994(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000B9DC()
{
  unint64_t result = qword_10031D5D0;
  if (!qword_10031D5D0)
  {
    sub_10000BA38((uint64_t *)&unk_10031D0A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031D5D0);
  }
  return result;
}

uint64_t sub_10000BA38(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000BA80()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10000BAC8(void *a1)
{
  sub_100009108(a1, *(NSObject **)(v1 + 16), *(void **)(v1 + 24), *(NSObject **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10000BAD4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000BB0C()
{
  return sub_100009744(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000BB14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000BB70()
{
  return sub_100008234(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000BB8C()
{
  return sub_100007EDC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000BB94()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000BBCC(uint64_t a1)
{
  sub_100009890(a1, *(void *)(v1 + 16));
}

uint64_t sub_10000BBD4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000BC10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10000BC48(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000BC54(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BC74(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for BuddyDataTransferMethod(uint64_t a1)
{
}

void type metadata accessor for LARatchetManagerEnableFeatureResultKey(uint64_t a1)
{
}

void type metadata accessor for DBSDisplayZoomOption(uint64_t a1)
{
}

void type metadata accessor for BYDeviceType(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

uint64_t sub_10000BD18()
{
  return sub_10000B994(&qword_10031D108, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_10000BD60()
{
  return sub_10000B994(&qword_10031D110, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_10000BDA8()
{
  return sub_10000B994(&qword_10031D118, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_10000BDF0()
{
  return sub_10000B994(&qword_10031D120, type metadata accessor for LARatchetManagerEnableFeatureResultKey);
}

__n128 sub_10000BE38(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000BE44(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BE64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_10000BEB4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

id sub_10000BFC4()
{
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = [v2 localizedStringForKey:v3 value:0 table:v4];

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v6 = [v1 mainBundle];
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = [v6 localizedStringForKey:v7 value:0 table:v8];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for BuddySilentModeController();
  id v10 = [super initWithTitle:v5 detailText:v9 icon:0 contentLayout:1];

  return v10;
}

void sub_10000C1C4()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self imageNamed:v1];

  id v3 = [objc_allocWithZone((Class)UIImageView) initWithImage:v2];
  [v3 setContentMode:1];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v4 = [v0 contentView];
  id v5 = [self systemGray6Color];
  [v4 setBackgroundColor:v5];

  id v6 = [v0 contentView];
  [v6 addSubview:v3];

  id v7 = [v0 contentView];
  [v7 pinToEdges:v3];

  id v8 = [self mainBundle];
  v13._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0x45554E49544E4F43;
  v9._object = (void *)0xE800000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v13);

  id v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBoldButton:v11 action:"continueTapped"];
}

id sub_10000C550()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddySilentModeController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddySilentModeController()
{
  return self;
}

id sub_10000C5A8(uint64_t a1)
{
  id v2 = [self defaultController];
  id v3 = [v2 currentDisplayZoomMode];

  id v4 = [v3 displayZoomOption];
  if (a1)
  {
    if (a1 == 2)
    {
      id v5 = (id *)&UIContentSizeCategorySmall;
      goto LABEL_10;
    }
    if (a1 == 1 && v4 != (id)1)
    {
      id v5 = (id *)&UIContentSizeCategoryExtraExtraLarge;
LABEL_10:
      id v6 = *v5;
      id v7 = *v5;
      return v6;
    }
  }
  else if (v4 == (id)1)
  {
    id v5 = (id *)&UIContentSizeCategoryLarge;
    goto LABEL_10;
  }
  return 0;
}

UIContentSizeCategory sub_10000C680()
{
  qword_100321FC8 = 0;
  byte_100321FD0 = 0;
  qword_100321FD8 = (uint64_t)UIContentSizeCategoryLarge;
  byte_100321FE0 = 0;
  return UIContentSizeCategoryLarge;
}

uint64_t sub_10000C6A8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _StringGuts.grow(_:)(142);
  v6._countAndFlagsBits = 0xD000000000000029;
  v6._object = (void *)0x80000001002376C0;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000021;
  v8._object = (void *)0x80000001002376F0;
  String.append(_:)(v8);
  if (a2) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x8000000100237720;
  v12._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v12);
  type metadata accessor for UIContentSizeCategory(0);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 0xD00000000000001CLL;
  v13._object = (void *)0x8000000100237740;
  String.append(_:)(v13);
  if (a4) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (a4) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x29202020200ALL;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t sub_10000C868(void *a1, char a2, void *a3)
{
  id v48 = a1;
  uint64_t v5 = sub_10000A84C(&qword_10031D280);
  __chkstk_darwin(v5 - 8);
  Swift::String v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v49 = (char *)&v48 - v13;
  if (a2) {
    uint64_t v14 = 5002322;
  }
  else {
    uint64_t v14 = 5395532;
  }
  if (a3 && objc_msgSend(a3, "userInterfaceStyle", v48) == (id)2)
  {
    unint64_t v15 = (void *)0xE400000000000000;
    uint64_t v16 = 1802658116;
  }
  else
  {
    unint64_t v15 = (void *)0xE500000000000000;
    uint64_t v16 = 0x746867694CLL;
  }
  Swift::String v17 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t v50 = v14;
  unint64_t v51 = 0xE300000000000000;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 45;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v16;
  v19._object = v15;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = 45;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v21 = [self mainBundle];
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v21 URLForResource:v22 withExtension:v23];

  if (v24)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v25(v7, v12, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    if (result != 1)
    {
      id v27 = v49;
      v25(v49, v7, v8);
      sub_10000A84C(&qword_10031D8D0);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_100236400;
      id v29 = objc_allocWithZone((Class)OBAnimationState);
      id v30 = v48;
      NSString v31 = String._bridgeToObjectiveC()();
      id v32 = [v29 initWithStateName:v31 transitionDuration:1.0 transitionSpeed:1.0];

      *(void *)(v28 + 32) = v32;
      id v33 = objc_allocWithZone((Class)OBAnimationState);
      NSString v34 = String._bridgeToObjectiveC()();
      id v35 = [v33 initWithStateName:v34 transitionDuration:1.0 transitionSpeed:1.0];

      *(void *)(v28 + 40) = v35;
      id v36 = objc_allocWithZone((Class)OBAnimationState);
      NSString v37 = String._bridgeToObjectiveC()();
      id v38 = [v36 initWithStateName:v37 transitionDuration:1.0 transitionSpeed:1.0];

      *(void *)(v28 + 48) = v38;
      id v39 = objc_allocWithZone((Class)OBAnimationState);
      NSString v40 = String._bridgeToObjectiveC()();
      id v41 = [v39 initWithStateName:v40 transitionDuration:1.0 transitionSpeed:1.0];

      *(void *)(v28 + 56) = v41;
      uint64_t v50 = v28;
      specialized Array._endMutation()();
      id v42 = objc_allocWithZone((Class)OBAnimationController);
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      sub_10000DE34(0, &qword_10031D288);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v47 = [v42 initWithUrlToPackage:v45 animationView:v30 animatedStates:isa startAtFirstState:0];

      (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
      return (uint64_t)v47;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  __break(1u);
  return result;
}

BOOL sub_10000CE20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000CE34()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000CE7C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000CEA8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10000CEEC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10000DE24(*a1);
  *a2 = result;
  return result;
}

void sub_10000CF18(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10000CFD4()
{
  id v1 = [self defaultController];
  id v2 = [v1 currentDisplayZoomMode];

  id v3 = [v2 displayZoomOption];
  unsigned int v23 = [*(id *)(v0 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService) isLargeIconLayoutEnabled];
  UIContentSizeCategory v22 = sub_1000241B4();
  int v20 = _AXSEnhanceTextLegibilityEnabled();
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *((unsigned __int8 *)&off_1002AF000 + v4++ + 32);
    uint64_t v6 = 2;
    int v7 = 0;
    UIContentSizeCategory v8 = UIContentSizeCategoryLarge;
    switch(v5)
    {
      case 1:
        uint64_t v6 = 0;
        int v7 = 0;
        UIContentSizeCategory v8 = UIContentSizeCategoryLarge;
        break;
      case 2:
        uint64_t v6 = 0;
        int v7 = 1;
        UIContentSizeCategory v8 = UIContentSizeCategoryExtraLarge;
        break;
      case 3:
        id v9 = [self currentDevice];
        unsigned __int8 v10 = [v9 sf_deviceSupportsDisplayZoom];

        if ((v10 & 1) != 0 && (sub_10000DB18(), (v11 & 1) == 0))
        {
          uint64_t v6 = 1;
          UIContentSizeCategory v8 = UIContentSizeCategoryExtraLarge;
          int v7 = 1;
        }
        else
        {
          uint64_t v6 = 0;
          int v7 = 1;
          UIContentSizeCategory v8 = UIContentSizeCategoryExtraExtraLarge;
        }
        break;
      default:
        break;
    }
    Swift::String v12 = v8;
    uint64_t v13 = v12;
    if (id)v6 != v3 || ((v23 ^ v7))
    {
    }
    else
    {
      uint64_t v21 = v5;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
      if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
      {

        swift_bridgeObjectRelease_n();
        if ((((v20 != 0) ^ v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0 && (((v20 != 0) ^ v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
    }
  }
  while (v4 != 4);
  uint64_t v21 = 4;
LABEL_21:

  return v21;
}

void *sub_10000D29C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100036B18(0, v1, 0);
  unint64_t result = (void *)sub_10000DA90(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v19 = v1;
  int v20 = v4;
  uint64_t v21 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    unint64_t result = [*(id *)(*(void *)(a1 + 56) + 8 * v5) displayZoomOption];
    char v11 = result;
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1) {
      unint64_t result = (void *)sub_100036B18(v12 > 1, v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    _swiftEmptyArrayStorage[v13 + 4] = v11;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v14 = *(void *)(v21 + 8 * v10);
    if ((v14 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20) {
      goto LABEL_27;
    }
    unint64_t v15 = v14 & (-2 << (v5 & 0x3F));
    if (v15)
    {
      int64_t v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v19;
    }
    else
    {
      unint64_t v16 = v10 + 1;
      unint64_t v17 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v19;
      if (v10 + 1 < v17)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v16);
        if (v18)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v18)) + (v16 << 6);
        }
        else
        {
          while (v17 - 2 != v10)
          {
            unint64_t v18 = *(void *)(a1 + 80 + 8 * v10++);
            if (v18)
            {
              unint64_t v16 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10000D4A4(uint64_t a1, char a2, void *a3)
{
  id v7 = [self defaultController];
  id v8 = [v7 currentDisplayZoomMode];

  id v9 = [v8 displayZoomOption];
  if (v9 == (id)a1 || (id v10 = sub_10000C5A8(a1)) == 0) {
    id v10 = a3;
  }
  char v11 = v10;
  [*(id *)(v3 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService) setLargeIconLayoutEnabled:a2 & 1];
  id v12 = v11;
  sub_1000242A4();

  _AXSSetEnhanceTextLegibilityEnabled();
}

uint64_t sub_10000D5B0(uint64_t a1, int a2, void *a3, char a4)
{
  id v7 = self;
  id v8 = [v7 defaultController];
  id v9 = [v8 currentDisplayZoomMode];

  id v10 = [v9 displayZoomOption];
  if (v10 == (id)a1)
  {
    id v11 = a3;
  }
  else
  {
    id v12 = sub_10000C5A8(a1);
    if (!v12) {
      id v12 = a3;
    }
    id v11 = v12;
    a1 = (uint64_t)v10;
  }
  id v13 = [v7 defaultController];
  id v14 = [v13 currentDisplayZoomMode];

  id v15 = [v14 displayZoomOption];
  unsigned int v16 = [*(id *)(v4 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService) isLargeIconLayoutEnabled];
  UIContentSizeCategory v17 = sub_1000241B4();
  int v18 = _AXSEnhanceTextLegibilityEnabled();
  if (v15 == (id)a1 && ((v16 ^ a2) & 1) == 0)
  {
    int v20 = v18;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
    if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v19 = 0;
      if ((v25 & 1) == 0) {
        return v19 & 1;
      }
    }
    char v19 = (v20 == 0) ^ a4;
    return v19 & 1;
  }

  char v19 = 0;
  return v19 & 1;
}

id sub_10000D7E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppearanceModeProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for AppearanceModeProvider()
{
  return self;
}

unsigned char *initializeBufferWithCopyOfBuffer for AppearanceMode(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppearanceMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppearanceMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000D9ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_10000DA14(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000DA20(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppearanceMode()
{
  return &type metadata for AppearanceMode;
}

unint64_t sub_10000DA3C()
{
  unint64_t result = qword_10031D270;
  if (!qword_10031D270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031D270);
  }
  return result;
}

uint64_t sub_10000DA90(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_10000DB18()
{
  id v0 = [self defaultController];
  id v1 = [v0 displayZoomModes];

  sub_10000DE34(0, &qword_10031D278);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    id v11 = *(id *)(*(void *)(v2 + 56) + 8 * v10);
    id v12 = [v11 displayZoomOption];

    if (v12 == (id)2) {
      goto LABEL_25;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v13 >= v7) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v13);
  ++v8;
  if (v14) {
    goto LABEL_24;
  }
  int64_t v8 = v13 + 1;
  if (v13 + 1 >= v7) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14) {
    goto LABEL_24;
  }
  int64_t v8 = v13 + 2;
  if (v13 + 2 >= v7) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14) {
    goto LABEL_24;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v7) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14) {
    goto LABEL_24;
  }
  int64_t v8 = v13 + 4;
  if (v13 + 4 >= v7) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14)
  {
LABEL_24:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_5;
  }
  int64_t v15 = v13 + 5;
  if (v15 >= v7)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10000DD30(char a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 1:
      uint64_t result = 0;
      break;
    case 2:
      uint64_t result = 0;
      break;
    case 3:
      id v3 = [self currentDevice];
      unsigned int v4 = [v3 sf_deviceSupportsDisplayZoom];

      uint64_t result = 0;
      if (v4)
      {
        sub_10000DB18();
        if ((v5 & 1) == 0) {
          uint64_t result = 1;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10000DE24(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_10000DE34(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void *sub_10000DE70(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
LABEL_3:
  if (v4 <= v2) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = v4;
  }
  while (2)
  {
    if (v4 == v6) {
      goto LABEL_29;
    }
    uint64_t v7 = *(unsigned __int8 *)(v5 + v4++);
    uint64_t v8 = 2;
    switch(v7)
    {
      case 1:
      case 2:
        goto LABEL_11;
      case 3:
        id v9 = [self currentDevice];
        unsigned __int8 v10 = [v9 sf_deviceSupportsDisplayZoom];

        if ((v10 & 1) != 0 && (sub_10000DB18(), (v11 & 1) == 0))
        {
          uint64_t v8 = 1;
          uint64_t v12 = *(void *)(a2 + 16);
          if (!v12) {
            goto LABEL_6;
          }
        }
        else
        {
LABEL_11:
          uint64_t v8 = 0;
LABEL_12:
          uint64_t v12 = *(void *)(a2 + 16);
          if (!v12) {
            goto LABEL_6;
          }
        }
        if (*(void *)(a2 + 32) != v8)
        {
          if (v12 != 1)
          {
            uint64_t v13 = 5;
            while (1)
            {
              uint64_t v14 = v13 - 3;
              if (__OFADD__(v13 - 4, 1)) {
                break;
              }
              if (*(void *)(a2 + 8 * v13) == v8) {
                goto LABEL_22;
              }
              ++v13;
              if (v14 == v12) {
                goto LABEL_6;
              }
            }
            __break(1u);
LABEL_29:
            __break(1u);
            JUMPOUT(0x10000E044);
          }
LABEL_6:
          if (v4 == v2) {
            return _swiftEmptyArrayStorage;
          }
          continue;
        }
LABEL_22:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100036AF8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v16 = _swiftEmptyArrayStorage[2];
        unint64_t v15 = _swiftEmptyArrayStorage[3];
        if (v16 >= v15 >> 1) {
          sub_100036AF8(v15 > 1, v16 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v16 + 1;
        *((unsigned char *)&_swiftEmptyArrayStorage[4] + v16) = v7;
        if (v4 != v2) {
          goto LABEL_3;
        }
        return _swiftEmptyArrayStorage;
      default:
        goto LABEL_12;
    }
  }
}

uint64_t sub_10000E054(uint64_t a1)
{
  if (a1)
  {
    if (a1 != 1)
    {
      type metadata accessor for BYDeviceType(0);
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }
    id v2 = [self currentDevice];
    unsigned int v3 = [v2 sf_deviceSupportsDisplayZoom];

    if (v3) {
      id v1 = &off_1002AF028;
    }
    else {
      id v1 = &off_1002AF050;
    }
  }
  else
  {
    id v1 = &off_1002AF078;
  }
  unint64_t v4 = self;
  swift_bridgeObjectRetain();
  id v5 = [v4 currentDevice];
  unsigned int v6 = [v5 sf_deviceSupportsDisplayZoom];

  if (v6)
  {
    id v7 = [self defaultController];
    id v8 = [v7 displayZoomModes];

    sub_10000DE34(0, &qword_10031D278);
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unsigned __int8 v10 = sub_10000D29C(v9);
    swift_bridgeObjectRelease();
    char v11 = sub_10000DE70((uint64_t)v1, (uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  return (uint64_t)v1;
}

id sub_10000E260()
{
  id v1 = &v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_runState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_capabilities] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager] = 0;
  id v2 = self;
  id v3 = [v2 mainBundle];
  v15._object = (void *)0xE000000000000000;
  v4._object = (void *)0x8000000100237B60;
  v4._countAndFlagsBits = 0xD000000000000012;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v15);

  id v6 = [v2 mainBundle];
  v7._countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000100237B80;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v16);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  id v12 = [super initWithTitle:v9 detailText:v10 symbolName:v11 contentLayout:2];

  return v12;
}

void sub_10000E47C()
{
  v53.receiver = v0;
  v53.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  [super viewDidLoad];
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name + 8];
  if (v1)
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name];
    swift_bridgeObjectRetain();
    id v3 = [v0 headerView];
    id v4 = [self mainBundle];
    v5._countAndFlagsBits = 0xD00000000000001CLL;
    v54._object = (void *)0xE000000000000000;
    v5._object = (void *)0x8000000100237B40;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v54._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v54);

    sub_10000A84C(&qword_10031D350);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100236520;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000FF9C();
    *(void *)(v7 + 32) = v2;
    *(void *)(v7 + 40) = v1;
    String.init(format:_:)();
    swift_bridgeObjectRelease();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setTitle:v8];
  }
  NSString v9 = *(void **)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_capabilities];
  if (v9)
  {
    unsigned int v10 = [v9 mgSupportsSingleDisplayEnhancedMultitasking];
    if (v10) {
      uint64_t v11 = 0xD000000000000018;
    }
    else {
      uint64_t v11 = 0xD00000000000002ELL;
    }
    if (v10) {
      id v12 = (void *)0x8000000100237B20;
    }
    else {
      id v12 = (void *)0x8000000100237A10;
    }
    uint64_t v13 = self;
    id v14 = [v13 mainBundle];
    v15._countAndFlagsBits = 0xD000000000000017;
    v55._object = (void *)0xE000000000000000;
    v15._object = (void *)0x8000000100237A40;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v55._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v55);

    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v13 mainBundle];
    v56._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = v11;
    v19._object = v12;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v56._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v56);

    swift_bridgeObjectRelease();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v22 = String._bridgeToObjectiveC()();
    [v0 addMultitaskingBulletedListItemWithTitle:v17 description:v21 symbolName:v22];

    id v23 = [v13 mainBundle];
    v24._countAndFlagsBits = 0xD000000000000015;
    v57._object = (void *)0xE000000000000000;
    v24._object = (void *)0x8000000100237A60;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v57._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v57);

    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = [v13 mainBundle];
    v28._countAndFlagsBits = 0xD000000000000016;
    v58._object = (void *)0xE000000000000000;
    v28._object = (void *)0x8000000100237A80;
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v58);

    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v31 = String._bridgeToObjectiveC()();
    [v0 addMultitaskingBulletedListItemWithTitle:v26 description:v30 symbolName:v31];

    id v32 = [v13 mainBundle];
    v33._countAndFlagsBits = 0xD000000000000012;
    v59._object = (void *)0xE000000000000000;
    v33._object = (void *)0x8000000100237AC0;
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v59._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v59);

    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = [v13 mainBundle];
    v37._countAndFlagsBits = 0xD000000000000013;
    v60._object = (void *)0xE000000000000000;
    v37._object = (void *)0x8000000100237AE0;
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    v60._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v60);

    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v40 = String._bridgeToObjectiveC()();
    [v0 addMultitaskingBulletedListItemWithTitle:v35 description:v39 symbolName:v40];

    id v41 = [self boldButton];
    id v42 = [v13 mainBundle];
    v61._object = (void *)0xE000000000000000;
    v43._countAndFlagsBits = 0x45554E49544E4F43;
    v43._object = (void *)0xE800000000000000;
    v44._countAndFlagsBits = 0;
    v44._object = (void *)0xE000000000000000;
    v61._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v43, (Swift::String_optional)0, (NSBundle)v42, v44, v61);

    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v41 setTitle:v45 forState:0];

    [v41 addTarget:v0 action:"continueTapped" forControlEvents:64];
    id v46 = [v0 buttonTray];
    [v46 addButton:v41];

    id v47 = [self linkButton];
    id v48 = [v13 mainBundle];
    v49._countAndFlagsBits = 0xD00000000000001ELL;
    v62._object = (void *)0xE000000000000000;
    v49._object = (void *)0x8000000100237B00;
    v50._countAndFlagsBits = 0;
    v50._object = (void *)0xE000000000000000;
    v62._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v49, (Swift::String_optional)0, (NSBundle)v48, v50, v62);

    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v47 setTitle:v51 forState:0];

    [v47 addTarget:v0 action:"useDefaultSettingsTapped" forControlEvents:64];
    id v52 = [v0 buttonTray];
    [v52 addButton:v47];
  }
  else
  {
    __break(1u);
  }
}

id sub_10000EC44(char a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  [super viewDidAppear:a1 & 1];
  id result = *(id *)&v1[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager];
  if (result)
  {
    [result clearActionForFeature:16];
    id result = *(id *)&v1[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager];
    if (result) {
      return [result setChildMultitaskingSetupEventBlock:0];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10000ED24()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate);
  if (!v1) {
    return;
  }
  id v2 = objc_allocWithZone((Class)NSNumber);
  swift_unknownObjectRetain();
  id v3 = [v2 initWithInteger:1];
  objc_super v4 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager);
  if (!v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  [v4 recordActionWithValue:v3 forFeature:16];
  Swift::String v5 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager);
  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  Swift::String v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  v24[4] = sub_10000FF54;
  v24[5] = v7;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_10000F0D4;
  v24[3] = &unk_1002AF6A0;
  NSString v8 = _Block_copy(v24);
  id v9 = v6;
  id v10 = v5;
  swift_release();
  [v10 setChildMultitaskingSetupEventBlock:v8];
  _Block_release(v8);

  if (qword_10031CB40 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_100322008;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v13 = String._bridgeToObjectiveC()();
  [v11 setValue:isa forKey:v13];

  id v14 = (void *)qword_100322008;
  Class v15 = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 setValue:v15 forKey:v16];

  NSString v17 = (void *)qword_100322008;
  Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v19 = String._bridgeToObjectiveC()();
  [v17 setValue:v18 forKey:v19];

  Swift::String v20 = (void *)qword_100322008;
  Class v21 = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v22 = String._bridgeToObjectiveC()();
  [v20 setValue:v21 forKey:v22];

  id v23 = [objc_allocWithZone((Class)BYMultitaskingGestures) init];
  [v23 setMultitaskingWasTurnedOff:1];

  [v1 flowItemDone:v0];
  swift_unknownObjectRelease();
}

id sub_10000F068(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)NSNumber) initWithInteger:1];
  id v3 = [objc_allocWithZone((Class)BMSystemSettingsChildMultitaskingSetup) initWithEnabled:v2 age:a1];

  return v3;
}

id sub_10000F0D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  id v3 = (void *)v1(v2);
  swift_release();

  return v3;
}

void sub_10000F16C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate);
  if (!v1) {
    return;
  }
  id v2 = objc_allocWithZone((Class)NSNumber);
  swift_unknownObjectRetain();
  id v3 = [v2 initWithInteger:0];
  objc_super v4 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager);
  if (!v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  [v4 recordActionWithValue:v3 forFeature:16];
  Swift::String v5 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager);
  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  Swift::String v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v6;
  v21[4] = sub_10000FED0;
  v21[5] = v7;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10000F0D4;
  v21[3] = &unk_1002AF650;
  NSString v8 = _Block_copy(v21);
  id v9 = v6;
  id v10 = v5;
  id v11 = v3;
  swift_release();
  [v10 setChildMultitaskingSetupEventBlock:v8];
  _Block_release(v8);

  if (qword_10031CB40 != -1) {
    swift_once();
  }
  id v12 = (void *)qword_100322008;
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 removeObjectForKey:v13];

  id v14 = (void *)qword_100322008;
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 removeObjectForKey:v15];

  NSString v16 = (void *)qword_100322008;
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 removeObjectForKey:v17];

  Class v18 = (void *)qword_100322008;
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 removeObjectForKey:v19];

  id v20 = [objc_allocWithZone((Class)BYMultitaskingGestures) init];
  [v20 setMultitaskingWasTurnedOff:0];

  [v1 flowItemDone:v0];
  swift_unknownObjectRelease();
}

uint64_t sub_10000F530(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_10000F634()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_runState)) {
    return 0;
  }
  if ([(id)swift_unknownObjectRetain() hasCompletedInitialRun])
  {
    id v1 = 0;
LABEL_6:
    swift_unknownObjectRelease();
    return (uint64_t)v1;
  }
  id v2 = [self currentDevice];
  id v1 = [v2 type];

  if ((unint64_t)v1 <= 1) {
    goto LABEL_6;
  }
  type metadata accessor for BYDeviceType(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_10000F740(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v21 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  NSString v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FD94();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInitiated(_:), v9);
  NSString v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  id v14 = (void *)swift_allocObject();
  uint64_t v15 = v22;
  v14[2] = v21;
  v14[3] = v15;
  NSString v16 = v23;
  v14[4] = v23;
  aBlock[4] = sub_10000FE14;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002AF600;
  NSString v17 = _Block_copy(aBlock);
  swift_retain();
  id v18 = v16;
  static DispatchQoS.unspecified.getter();
  Swift::String v25 = &_swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  return swift_release();
}

void sub_10000FA8C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v6 = [v5 aa_primaryAppleAccount];
  if (v6)
  {
    id v16 = v6;
    id v7 = [v6 aa_firstName];
    if (v7)
    {
      NSString v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
    }
    NSString v13 = (uint64_t *)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name);
    uint64_t *v13 = v9;
    v13[1] = v11;
    swift_bridgeObjectRelease();
    id v14 = sub_10001975C();
    uint64_t v15 = *(void **)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
    *(void *)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge) = v14;

    a1(1);
    id v12 = v16;
  }
  else
  {
    a1(1);
    id v12 = v5;
  }
}

id sub_10000FC9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyMultitaskingController()
{
  return self;
}

unint64_t sub_10000FD94()
{
  unint64_t result = qword_10031D0D0;
  if (!qword_10031D0D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031D0D0);
  }
  return result;
}

uint64_t sub_10000FDD4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10000FE14()
{
  sub_10000FA8C(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10000FE20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000FE30()
{
  return swift_release();
}

unint64_t sub_10000FE38()
{
  unint64_t result = qword_10031D5C0;
  if (!qword_10031D5C0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031D5C0);
  }
  return result;
}

uint64_t sub_10000FE90()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10000FED0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = objc_allocWithZone((Class)BMSystemSettingsChildMultitaskingSetup);

  return [v3 initWithEnabled:v1 age:v2];
}

uint64_t sub_10000FF1C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10000FF54()
{
  return sub_10000F068(*(void *)(v0 + 16));
}

uint64_t sub_10000FF5C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000FF94(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

unint64_t sub_10000FF9C()
{
  unint64_t result = qword_10031D5E0;
  if (!qword_10031D5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031D5E0);
  }
  return result;
}

uint64_t static GenerativeModelsAvailability.setupAssistantInstance.getter()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void *GenerativeModelsAvailability.unavailabilityReasons.getter()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeModelsAvailability.availability.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v8 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return &_swiftEmptySetSingleton;
  }
  return (void *)v8;
}

void *sub_1000102D4()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenerativeModelsAvailability.availability.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v8 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return &_swiftEmptySetSingleton;
  }
  return (void *)v8;
}

id IntelligenceStateProvider.__allocating_init(generativeModelProvider:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = sub_100011FB4(a1, v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  id v10 = sub_100011F04((uint64_t)v8, v3, v4, v5);
  sub_100012004(a1);
  return v10;
}

id IntelligenceStateProvider.init(generativeModelProvider:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_100011FB4(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  id v9 = sub_100011F04((uint64_t)v7, v1, v3, v4);
  sub_100012004(a1);
  return v9;
}

uint64_t IntelligenceStateProvider.isIntelligenceEnabled()()
{
  return _swift_task_switch(sub_1000106BC, 0, 0);
}

uint64_t sub_1000106BC()
{
  uint64_t v1 = self;
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_1000107C4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100010960;
  v0[13] = &unk_1002AF6F0;
  v0[14] = v2;
  [v1 getGMOptInToggleWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000107C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 120) = v1;
  if (v1) {
    uint64_t v2 = sub_1000108F0;
  }
  else {
    uint64_t v2 = sub_1000108D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000108D4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 128));
}

uint64_t sub_1000108F0()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100010960(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000A84C(&qword_10031D3C0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100010B7C(const void *a1, void *a2)
{
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_100010BF4, 0, 0);
}

uint64_t sub_100010BF4()
{
  uint64_t v1 = self;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_100010CFC;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100010960;
  v0[13] = &unk_1002AF790;
  v0[14] = v2;
  [v1 getGMOptInToggleWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100010CFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_100010E90;
  }
  else {
    uint64_t v2 = sub_100010E0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100010E0C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v2, 0);
  _Block_release(*(const void **)(v0 + 128));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100010E90()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 120);
  swift_willThrow();

  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v3);

  _Block_release(*(const void **)(v0 + 128));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

Swift::Bool __swiftcall IntelligenceStateProvider.shouldShowForSummarization()()
{
  return [self shouldShowExperience:0 forClient:0];
}

Swift::Bool __swiftcall IntelligenceStateProvider.canEnableIntelligence()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5Setup25IntelligenceStateProvider_generativeModelProvider + 24);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC5Setup25IntelligenceStateProvider_generativeModelProvider + 32);
  sub_100012054((void *)(v0 + OBJC_IVAR____TtC5Setup25IntelligenceStateProvider_generativeModelProvider), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  sub_10000A84C(&qword_10031D368);
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100236520;
  (*(void (**)(unint64_t, void, uint64_t))(v5 + 104))(v7 + v6, enum case for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason.notOptedIn(_:), v4);
  uint64_t v8 = sub_100011370(v7, v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v9 = v8[2];
  swift_release();
  return v9 == 0;
}

id IntelligenceStateProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void IntelligenceStateProvider.init()()
{
}

id IntelligenceStateProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceStateProvider();
  return [super dealloc];
}

void *sub_100011370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSString v35 = (char *)&v30 - v9;
  if (*(void *)(a2 + 16))
  {
    uint64_t v36 = a1;
    unint64_t v10 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v10)
    {
      unint64_t v11 = 0;
      uint64_t v33 = v5 + 16;
      Swift::String v34 = (char *)(a2 + 56);
      uint64_t v12 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v31 = v5;
      uint64_t v32 = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      while (1)
      {
        if (v11 >= v10) {
          __break(1u);
        }
        uint64_t v13 = *(void *)(v5 + 72);
        unint64_t v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v11;
        unint64_t v37 = v11 + 1;
        uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v35, v14, v4);
        sub_1000122E4(&qword_10031D3A8);
        uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v18 = v16 & ~v17;
        if ((*(void *)&v34[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18)) {
          break;
        }
        uint64_t v22 = *v12;
LABEL_11:
        v22(v35, v4);
        a1 = v36;
        unint64_t v11 = v37;
        unint64_t v10 = *(void *)(v36 + 16);
        if (v37 == v10) {
          goto LABEL_12;
        }
      }
      uint64_t v19 = a2;
      uint64_t v20 = ~v17;
      while (1)
      {
        v15(v8, *(void *)(v19 + 48) + v18 * v13, v4);
        sub_1000122E4(&qword_10031D3B0);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *v12;
        (*v12)(v8, v4);
        if (v21) {
          break;
        }
        unint64_t v18 = (v18 + 1) & v20;
        if (((*(void *)&v34[(v18 >> 3) & 0xFFFFFFFFFFFFFF8] >> v18) & 1) == 0)
        {
          a2 = v19;
          uint64_t v5 = v31;
          goto LABEL_11;
        }
      }
      uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v22)(v35, v4);
      char v24 = *(unsigned char *)(v19 + 32);
      unint64_t v25 = (unint64_t)((1 << v24) + 63) >> 6;
      size_t v26 = 8 * v25;
      if ((v24 & 0x3Fu) <= 0xD
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        __chkstk_darwin(isStackAllocationSafe);
        memcpy((char *)&v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), v34, v26);
        id v27 = sub_1000117BC((unint64_t *)((char *)&v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0)), v25, v19, v18, &v36);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::String v28 = (void *)swift_slowAlloc();
        memcpy(v28, v34, v26);
        id v27 = sub_1000117BC((unint64_t *)v28, v25, v19, v18, &v36);
        swift_release();
        swift_bridgeObjectRelease();
        swift_slowDealloc();
      }
      return v27;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_1000117BC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v22 = *(unint64_t *)((char *)a1 + v21);
  NSString v45 = a1;
  *(unint64_t *)((char *)a1 + v21) = v22 & ((-1 << a4) - 1);
  uint64_t v23 = v20 - 1;
  uint64_t v24 = *a5;
  unint64_t v25 = a5[1];
  unint64_t v26 = *(void *)(*a5 + 16);
  uint64_t v44 = a2;
  uint64_t v46 = v23;
  if (v25 == v26)
  {
    uint64_t v27 = a3;
LABEL_3:
    swift_retain();
    return (void *)sub_100011B8C(v45, v44, v46, v27);
  }
  else
  {
    Swift::String v55 = v19;
    uint64_t v54 = v16 + 16;
    uint64_t v49 = v16 + 32;
    uint64_t v50 = v17;
    uint64_t v51 = v16;
    uint64_t v52 = a3 + 56;
    Swift::String v28 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v27 = a3;
    Swift::String v29 = a5;
    id v47 = a5;
    while (v25 < v26)
    {
      uint64_t v32 = v50;
      uint64_t v31 = v51;
      uint64_t v33 = *(unsigned __int8 *)(v51 + 80);
      uint64_t v53 = *(void *)(v51 + 72);
      Swift::String v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v51 + 16);
      v34(v50, v24 + ((v33 + 32) & ~v33) + v53 * v25, v10);
      v29[1] = v25 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v55, v32, v10);
      sub_1000122E4(&qword_10031D3A8);
      uint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v36 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v37 = v35 & ~v36;
      if ((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v48 = (unint64_t)v28 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v38 = v27;
        uint64_t v39 = ~v36;
        while (1)
        {
          v34((uint64_t)v13, *(void *)(v38 + 48) + v37 * v53, v10);
          sub_1000122E4(&qword_10031D3B0);
          char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v30 = *v28;
          (*v28)(v13, v10);
          if (v40) {
            break;
          }
          unint64_t v37 = (v37 + 1) & v39;
          if (((*(void *)(v52 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          {
            uint64_t v27 = v38;
            Swift::String v29 = v47;
            goto LABEL_7;
          }
        }
        unint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v30)(v55, v10);
        uint64_t v41 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v42 = *(unint64_t *)((char *)v45 + v41);
        *(unint64_t *)((char *)v45 + v41) = v42 & ~(1 << v37);
        if ((v42 & (1 << v37)) != 0)
        {
          uint64_t v43 = v46 - 1;
          if (__OFSUB__(v46, 1)) {
            goto LABEL_21;
          }
          uint64_t v27 = v38;
          Swift::String v29 = v47;
          --v46;
          if (!v43) {
            return &_swiftEmptySetSingleton;
          }
        }
        else
        {
          uint64_t v27 = v38;
          Swift::String v29 = v47;
        }
      }
      else
      {
        uint64_t v30 = *v28;
LABEL_7:
        unint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v30)(v55, v10);
      }
      uint64_t v24 = *v29;
      unint64_t v25 = v29[1];
      unint64_t v26 = *(void *)(*v29 + 16);
      if (v25 == v26) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t sub_100011B8C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v34 = a1;
  uint64_t v7 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000A84C(&qword_10031D3B8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_1000122E4(&qword_10031D3A8);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_100011F04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a3;
  v11[4] = a4;
  uint64_t v7 = sub_100012328(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v7, a1, a3);
  sub_10001238C((uint64_t)v11, (uint64_t)a2 + OBJC_IVAR____TtC5Setup25IntelligenceStateProvider_generativeModelProvider);
  v10.receiver = a2;
  v10.super_class = (Class)type metadata accessor for IntelligenceStateProvider();
  [super init];
  sub_100012004((uint64_t)v11);
  return v8;
}

uint64_t sub_100011FB4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100012004(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *sub_100012054(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for IntelligenceStateProvider()
{
  return self;
}

uint64_t sub_1000120BC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000120FC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000121A8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031D398 + dword_10031D398);
  return v5(v2, v3);
}

uint64_t sub_1000121A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000122A4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000122E4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100012328(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10001238C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_100012578()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyAppStateManager();
  [super dealloc];
}

uint64_t type metadata accessor for BuddyAppStateManager()
{
  return self;
}

uint64_t sub_1000125D0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A84C(&qword_10031D3F8);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100013448(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *uint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v8;
  return result;
}

uint64_t sub_1000128E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A84C(&qword_10031D408);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100013708((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1000136AC(v25, (uint64_t)&v38);
      sub_10000BB14(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100013708(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void *sub_100012BF8()
{
  uint64_t v1 = v0;
  sub_10000A84C(&qword_10031D3F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_100013448(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100012DC0()
{
  uint64_t v1 = v0;
  sub_10000A84C(&qword_10031D408);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1000136AC(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10000BB14(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100013708(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100012FA8()
{
  id v0 = [self enumeratorWithOptions:192];
  id v1 = [v0 nextObject];
  if (!v1)
  {
LABEL_41:

    return &_swiftEmptyDictionarySingleton;
  }
  id v2 = v1;
  uint64_t v3 = &selRef_useDefaultSettingsTapped;
  uint64_t v4 = LSUserApplicationType;
  while (1)
  {
    while (1)
    {
      id v5 = [v2 v3[6] v48];
      if (v5) {
        break;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:

      swift_bridgeObjectRelease();
LABEL_5:
      id v2 = [v0 nextObject];
      if (!v2) {
        goto LABEL_41;
      }
    }
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v9) {
      goto LABEL_4;
    }
    if (v7 == v10 && v9 == v11)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {

        goto LABEL_5;
      }
    }
    id v14 = [v2 uniqueInstallIdentifier];
    if (v14)
    {
      unint64_t v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v18 = 0xC000000000000000;
    }
    id v19 = [v2 identities];
    sub_100013408();
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v20 >> 62))
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v48 = v4;
      id v49 = v0;
      if (v21) {
        break;
      }
      goto LABEL_40;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v48 = v4;
    id v49 = v0;
    if (v21) {
      break;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    sub_1000134A0(v16, v18);

    id v0 = v49;
    id v2 = [v49 nextObject];
    uint64_t v3 = &selRef_useDefaultSettingsTapped;
    uint64_t v4 = v48;
    if (!v2) {
      goto LABEL_41;
    }
  }
  unint64_t v51 = v20;
  unint64_t v52 = v20 & 0xC000000000000001;
  uint64_t v22 = 4;
  uint64_t v50 = v21;
  while (1)
  {
    uint64_t v24 = v22 - 4;
    if (!v52) {
      break;
    }
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v26 = v22 - 3;
    if (__OFADD__(v24, 1)) {
      goto LABEL_42;
    }
LABEL_28:
    uint64_t v53 = v25;
    uint64_t v54 = v26;
    id v27 = [v25 identityString:v48];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    uint64_t v31 = v16;
    unint64_t v32 = v18;
    sub_100013448(v16, v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v35 = sub_100043CAC(v28, v30);
    uint64_t v36 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_43;
    }
    char v39 = v34;
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v34) {
          goto LABEL_21;
        }
      }
      else
      {
        sub_100012BF8();
        if (v39) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      sub_1000125D0(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = sub_100043CAC(v28, v30);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_45;
      }
      unint64_t v35 = v40;
      if (v39)
      {
LABEL_21:
        uint64_t v23 = *((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v35;
        sub_1000134A0(*(void *)v23, *(void *)(v23 + 8));
        uint64_t v16 = v31;
        *(void *)uint64_t v23 = v31;
        *(void *)(v23 + 8) = v32;
        unint64_t v18 = v32;
        goto LABEL_22;
      }
    }
    *((void *)&_swiftEmptyDictionarySingleton + (v35 >> 6) + 8) |= 1 << v35;
    uint64_t v42 = (uint64_t *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 16 * v35);
    *uint64_t v42 = v28;
    v42[1] = v30;
    uint64_t v43 = (uint64_t *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + 16 * v35);
    uint64_t *v43 = v31;
    v43[1] = v32;
    uint64_t v44 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_44;
    }
    uint64_t v16 = v31;
    unint64_t v18 = v32;
    *((void *)&_swiftEmptyDictionarySingleton + 2) = v46;
    swift_bridgeObjectRetain();
LABEL_22:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v22;
    unint64_t v20 = v51;
    if (v54 == v50) {
      goto LABEL_40;
    }
  }
  id v25 = *(id *)(v20 + 8 * v22);
  uint64_t v26 = v22 - 3;
  if (!__OFADD__(v24, 1)) {
    goto LABEL_28;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100013408()
{
  unint64_t result = qword_10031D3F0;
  if (!qword_10031D3F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031D3F0);
  }
  return result;
}

uint64_t sub_100013448(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1000134A0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000134F8(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000135E4((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    sub_10000A84C(&qword_10031D400);
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10001364C((uint64_t)v7);
    return 0;
  }
}

uint64_t sub_1000135E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031DE70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001364C(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C(&qword_10031DE70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000136AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_100013708(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

id sub_100013718()
{
  id v1 = &v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_presentationProvider];
  *(_OWORD *)id v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_buddyPreferences] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_deviceProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_intelligenceProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_delegate] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for BuddyCameraButtonController();
  return [super init];
}

uint64_t sub_1000138A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000139B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  return _swift_task_switch(sub_1000139D4, 0, 0);
}

uint64_t sub_1000139D4(void *a1)
{
  uint64_t v2 = *(void *)(v1[19] + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_intelligenceProvider);
  v1[22] = v2;
  if (v2)
  {
    v1[2] = v1;
    v1[7] = v1 + 16;
    v1[3] = sub_100013AEC;
    uint64_t v3 = swift_continuation_init();
    v1[10] = _NSConcreteStackBlock;
    v1[11] = 0x40000000;
    v1[12] = sub_100013E88;
    v1[13] = &unk_1002AF7F8;
    v1[14] = v3;
    [(id)swift_unknownObjectRetain() isIntelligenceEnabledWithCompletionHandler:v1 + 10];
    a1 = v1 + 2;
  }
  else
  {
    __break(1u);
  }
  return _swift_continuation_await(a1);
}

uint64_t sub_100013AEC()
{
  return _swift_task_switch(sub_100013BCC, 0, 0);
}

uint64_t sub_100013BCC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 128);
  swift_unknownObjectRelease();
  uint64_t v3 = (objc_class *)type metadata accessor for BuddyCameraControlPresentationProvider();
  id v4 = objc_allocWithZone(v3);
  id v5 = [self buddyPreferences];
  id v6 = [v4 initWithIsIntelligenceEnabled:v2 preferenceController:v5];

  *(void *)(v0 + 80) = v6;
  *(void *)(v0 + 104) = v3;
  *(void *)(v0 + 112) = &protocol witness table for BuddyCameraControlPresentationProvider;
  uint64_t v7 = v1 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_presentationProvider;
  swift_beginAccess();
  id v8 = v6;
  sub_1000148C4(v0 + 80, v7);
  swift_endAccess();
  Swift::Bool v9 = BuddyCameraControlPresentationProvider.shouldPresentCameraControlPane()();
  uint64_t v11 = *(void (**)(uint64_t))(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 168);
  if (!v9)
  {
    v11(0);
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v10;
  uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController);
  swift_retain_n();
  if (v14)
  {
    v11(1);
    swift_release();
    swift_release();
LABEL_5:

    goto LABEL_7;
  }
  id v15 = sub_100014004();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = sub_100014964;
  v17[4] = v13;
  *(void *)(v0 + 112) = sub_100014A08;
  *(void *)(v0 + 120) = v17;
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 1107296256;
  *(void *)(v0 + 96) = sub_100014148;
  *(void *)(v0 + 104) = &unk_1002AF888;
  unint64_t v18 = _Block_copy((const void *)(v0 + 80));
  swift_retain();
  swift_release();
  [v15 createViewController:v18];
  _Block_release(v18);
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
LABEL_7:
  id v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_100013E88(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return _swift_continuation_resume();
}

id sub_100014004()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper;
  if (*(void *)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper))
  {
    id v2 = *(id *)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)BuddyCameraButtonViewControllerWrapper) init];
    [v3 setDelegate:v0];
    *(void *)(v0 + v1) = v3;
    id v2 = v3;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

void sub_100014090(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v6 = (char *)Strong;
    id v7 = [objc_allocWithZone((Class)type metadata accessor for EnclosingViewController()) initWithEnclosedViewController:a1 spinnerDelegate:Strong overrideBackButton:0];
    id v8 = *(void **)&v6[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController];
    *(void *)&v6[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController] = v7;
    id v9 = v7;

    a3();
  }
}

void sub_100014148(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1000141D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_presentationProvider;
  swift_beginAccess();
  sub_100014484(v2, (uint64_t)v11);
  if (v12)
  {
    sub_10001454C((uint64_t)v11, (uint64_t)v8);
    sub_1000144EC((uint64_t)v11);
    uint64_t v3 = v9;
    uint64_t v4 = v10;
    sub_100012054(v8, v9);
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 24))(0, v3, v4);
    sub_100012004((uint64_t)v8);
  }
  else
  {
    sub_1000144EC((uint64_t)v11);
  }
  id v5 = *(void **)(v1 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_buddyPreferences);
  if (v5)
  {
    id v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 removeObjectForKey:v7];
  }
  else
  {
    __break(1u);
  }
}

id sub_100014390()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyCameraButtonController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyCameraButtonController()
{
  return self;
}

uint64_t sub_100014484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C((uint64_t *)&unk_10031D4D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000144EC(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C((uint64_t *)&unk_10031D4D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001454C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1000145B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_presentationProvider;
  swift_beginAccess();
  sub_100014484(v2, (uint64_t)v9);
  if (v10)
  {
    sub_10001454C((uint64_t)v9, (uint64_t)v6);
    sub_1000144EC((uint64_t)v9);
    uint64_t v3 = v7;
    uint64_t v4 = v8;
    sub_100012054(v6, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(1, v3, v4);
    sub_100012004((uint64_t)v6);
  }
  else
  {
    sub_1000144EC((uint64_t)v9);
  }
  id result = *(id *)(v1 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_delegate);
  if (result) {
    return [result flowItemDone:v1];
  }
  __break(1u);
  return result;
}

uint64_t sub_100014694()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000146CC(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000146D4()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001471C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000147D0;
  *(void *)(v3 + 168) = v2;
  *(_OWORD *)(v3 + 152) = v4;
  return _swift_task_switch(sub_1000139D4, 0, 0);
}

uint64_t sub_1000147D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000148C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C((uint64_t *)&unk_10031D4D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001492C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100014964()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_100014990()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000149C8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100014A08(uint64_t a1)
{
  sub_100014090(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100014A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014A24()
{
  return swift_release();
}

uint64_t IntelligenceServerControlProvider.isFeatureEnabled(fromCache:)(char a1)
{
  id v5 = (uint64_t (*)(char))((char *)&dword_10031D4F8 + dword_10031D4F8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100014AD4;
  return v5(a1);
}

uint64_t sub_100014AD4(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_100014BD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000A84C(&qword_10031D3C0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      *((void *)&v12 + 1) = swift_getObjectType();
      *(void *)&long long v11 = a2;
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    sub_1000135E4((uint64_t)&v11, (uint64_t)v13);
    uint64_t v9 = *(void *)(*(void *)(v3 + 64) + 40);
    swift_unknownObjectRetain();
    sub_1000135E4((uint64_t)v13, v9);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100014E3C(char a1, void *aBlock)
{
  *(void *)(v2 + 16) = _Block_copy(aBlock);
  uint64_t v6 = (uint64_t (*)(char))((char *)&dword_10031D4F8 + dword_10031D4F8);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100014EF0;
  return v6(a1);
}

uint64_t sub_100014EF0(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

id IntelligenceServerControlProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id IntelligenceServerControlProvider.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceServerControlProvider();
  return [super init];
}

id IntelligenceServerControlProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceServerControlProvider();
  [super dealloc];
}

uint64_t sub_1000150F4(char a1)
{
  *(unsigned char *)(v1 + 421) = a1;
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v1 + 344) = v2;
  *(void *)(v1 + 352) = *(void *)(v2 - 8);
  *(void *)(v1 + 360) = swift_task_alloc();
  *(void *)(v1 + 368) = swift_task_alloc();
  *(void *)(v1 + 376) = swift_task_alloc();
  *(void *)(v1 + 384) = swift_task_alloc();
  return _swift_task_switch(sub_1000151DC, 0, 0);
}

uint64_t sub_1000151DC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 421);
  id v2 = [objc_allocWithZone((Class)AKURLBag) init];
  *(void *)(v0 + 392) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 400) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_100015330;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100014BD0;
  *(void *)(v0 + 104) = &unk_1002AF928;
  *(void *)(v0 + 112) = v4;
  [v2 configurationValueForKey:v3 fromCache:v1 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100015330()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 408) = v1;
  if (v1) {
    id v2 = sub_1000157C8;
  }
  else {
    id v2 = sub_100015440;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100015440()
{
  sub_1000135E4(v0 + 120, v0 + 280);
  if (!*(void *)(v0 + 304))
  {
    sub_10001364C(v0 + 280);
    goto LABEL_12;
  }
  uint64_t v1 = (id *)(v0 + 328);
  id v2 = (unsigned char *)(v0 + 420);
  sub_100013708((_OWORD *)(v0 + 280), (_OWORD *)(v0 + 152));
  sub_10000BB14(v0 + 152, v0 + 216);
  sub_100015E1C(0, &qword_10031D0C8);
  if (!swift_dynamicCast())
  {
    sub_10000BB14(v0 + 152, v0 + 184);
    sub_100013708((_OWORD *)(v0 + 184), (_OWORD *)(v0 + 248));
    if (swift_dynamicCast())
    {
      LODWORD(v1) = *v2;
      if (v1 != 2) {
        goto LABEL_7;
      }
    }
    else
    {
      *id v2 = 2;
    }
    sub_100015E58(v0 + 152);
LABEL_12:
    uint64_t v16 = *(void *)(v0 + 376);
    uint64_t v17 = *(void *)(v0 + 344);
    uint64_t v18 = *(void *)(v0 + 352);
    uint64_t v19 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v19, v17);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    uint64_t v21 = Logger.logObject.getter();
    if (os_log_type_enabled(v21, v20))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Invalid bag configuration", v22, 2u);
      swift_slowDealloc();
      uint64_t v23 = *(NSObject **)(v0 + 400);
      uint64_t v24 = (id *)(v0 + 392);
    }
    else
    {
      uint64_t v24 = (id *)(v0 + 400);
      uint64_t v23 = v21;
      uint64_t v21 = *(NSObject **)(v0 + 392);
    }
    uint64_t v25 = *(void *)(v0 + 376);
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v27 = *(void *)(v0 + 352);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    uint64_t v5 = 0;
    goto LABEL_16;
  }
  id v3 = *v1;
  LOBYTE(v1) = [*v1 BOOLValue];

  sub_10000BB14(v0 + 152, v0 + 184);
  sub_100015E58(v0 + 184);
LABEL_7:
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v5 = v1 & 1;
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v8, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    long long v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v11 = 67109120;
    *(_DWORD *)(v0 + 416) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "intelligence value in bag: %{BOOL}d", v11, 8u);
    swift_slowDealloc();
  }
  long long v12 = *(void **)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 384);
  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 352);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  sub_100015E58(v0 + 152);
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v28(v5);
}

uint64_t sub_1000157C8()
{
  uint64_t v1 = (id *)(v0 + 40);
  uint64_t v2 = v0[51];
  swift_willThrow();
  v0[42] = v2;
  sub_10000A84C(&qword_10031D3C0);
  sub_100015E1C(0, (unint64_t *)&qword_10031DC90);
  uint64_t result = swift_dynamicCast();
  if (!result) {
    return result;
  }
  id v4 = *v1;
  id v5 = [*v1 domain];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_13;
    }
  }
  if ([v4 code] != (id)-7097)
  {
LABEL_13:
    long long v12 = v0 + 45;
    uint64_t v20 = v0[44];
    uint64_t v21 = v0[45];
    uint64_t v22 = v0[43];
    uint64_t v23 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v23, v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    uint64_t v25 = v4;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v26 = v24;
    if (os_log_type_enabled(v18, v24))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      char v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      v0[39] = v25;
      uint64_t v28 = v25;
      long long v12 = v0 + 45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v34 = v25;

      _os_log_impl((void *)&_mh_execute_header, v18, v26, "intelligence bag check failed with error: %@", v27, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_15;
    }

    uint64_t v29 = (id *)(v0 + 50);
LABEL_18:
    uint64_t v18 = v0[49];
    goto LABEL_19;
  }
  long long v12 = v0 + 46;
  uint64_t v13 = v0[46];
  uint64_t v15 = v0[43];
  uint64_t v14 = v0[44];
  uint64_t v16 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  uint64_t v18 = Logger.logObject.getter();
  if (!os_log_type_enabled(v18, v17))
  {
    uint64_t v29 = (id *)(v0 + 50);
    uint64_t v25 = v18;
    goto LABEL_18;
  }
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v19 = 0;
  _os_log_impl((void *)&_mh_execute_header, v18, v17, "intelligence bag key not found", v19, 2u);
LABEL_15:
  swift_slowDealloc();
  uint64_t v25 = v0[50];
  uint64_t v29 = (id *)(v0 + 49);
LABEL_19:
  uint64_t v30 = *v12;
  uint64_t v31 = v0[43];
  uint64_t v32 = v0[44];

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v33 = (uint64_t (*)(void))v0[1];
  return v33(0);
}

uint64_t type metadata accessor for IntelligenceServerControlProvider()
{
  return self;
}

uint64_t sub_100015BEC()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100015C2C()
{
  char v2 = *(unsigned char *)(v0 + 16);
  id v3 = *(void **)(v0 + 24);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_100015CE0;
  id v5 = (uint64_t (*)(char, void *))((char *)&dword_10031D528 + dword_10031D528);
  return v5(v2, v3);
}

uint64_t sub_100015CE0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100015DDC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100015E1C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100015E58(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_100015EA8()
{
  v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_runState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_flowItemDispositionProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_proximitySetupController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_managedConfiguration] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_childSetupPresenter] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_showModalWiFiSettingsBlock];
  *uint64_t v1 = 0;
  v1[1] = 0;
  char v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 modelSpecificLocalizedStringKeyForKey:v3];

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    id v8 = [self mainBundle];
    v13._object = (void *)0xE000000000000000;
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v13._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v13);
    swift_bridgeObjectRelease();

    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v12.receiver = v0;
    v12.super_class = (Class)type metadata accessor for BuddyIntentController();
    [super initWithTitle:v11 detailText:0 icon:0 contentLayout:2];
  }
  else
  {
    __break(1u);
  }
}

void sub_10001609C()
{
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for BuddyIntentController();
  [super viewDidLoad];
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v3._countAndFlagsBits = 0xD000000000000011;
  v15._object = (void *)0xE000000000000000;
  v3._object = (void *)0x8000000100238300;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v15);

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBoldButton:v5 action:"setUpForMyselfTapped"];

  id v6 = [v1 mainBundle];
  v16._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000100238320;
  v7._countAndFlagsBits = 0xD000000000000010;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v16);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addLinkButton:v9 action:"setUpForChildTapped"];

  id v10 = sub_1000162E0();
  id v11 = [objc_allocWithZone((Class)UIImageView) initWithImage:v10];
  [v11 setContentMode:1];
  [v11 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v12 = [v0 contentView];
  [v12 addSubview:v11];

  id v13 = [v0 contentView];
  [v13 pinToEdges:v11];
}

id sub_1000162E0()
{
  id v0 = [self currentDevice];
  [v0 hasHomeButton];

  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self imageNamed:v1];

  return v2;
}

void sub_1000163F8()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
  if (v6)
  {
    id v16 = v6;
    id v7 = [v1 delegate];
    if (v7)
    {
      Swift::String v8 = v7;
      v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck] = 0;
      [v16 setIntent:1];
      NSString v9 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance];
      if (v9)
      {
        [v9 didChooseToSetUpForChild:0];
        uint64_t v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
        id v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          id v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Device will be set up for myself", v13, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        [v8 flowItemDone:v1];

        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      id v14 = v16;
    }
  }
}

void sub_100016670()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v26 - v7;
  NSString v9 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_flowItemDispositionProvider];
  if (v9)
  {
    uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
    if (v10)
    {
      id v11 = v9;
      id v27 = v10;
      id v12 = [v1 delegate];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck;
        if (v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck])
        {
          uint64_t v15 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v15, v2);
          id v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            uint64_t v18 = (uint8_t *)swift_slowAlloc();
            id v26 = v11;
            *(_WORD *)uint64_t v18 = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, v17, "Intent controller skipped reachability check", v18, 2u);
            id v11 = v26;
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
          v1[v14] = 0;
          goto LABEL_13;
        }
        uint64_t v20 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider];
        if (!v20) {
          goto LABEL_22;
        }
        if ([v20 networkReachable])
        {
LABEL_13:
          uint64_t v21 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v21, v2);
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v22, v23))
          {
            os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Device will be set up for a child", v24, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          [v27 setIntent:2];
          [v11 setPreferredDispositions:8];
          uint64_t v25 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance];
          if (v25)
          {
            [v25 didChooseToSetUpForChild:1];
            [v13 flowItemDone:v1];

            swift_unknownObjectRelease();
            return;
          }
          __break(1u);
LABEL_22:
          __break(1u);
          return;
        }
        sub_100016A78();

        swift_unknownObjectRelease();
      }
      else
      {

        id v19 = v27;
      }
    }
  }
}

void sub_100016A78()
{
  NSString v1 = self;
  id v2 = [v1 mainBundle];
  v37._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001002381E0;
  v3._countAndFlagsBits = 0xD00000000000001CLL;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v37);

  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = (id)SFLocalizableWAPIStringKeyForKey();

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v7 = [self modelSpecificLocalizedStringKeyForKey:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = [v1 mainBundle];
    v38._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = v8;
    v12._object = v10;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v38._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v38);
    swift_bridgeObjectRelease();

    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [self alertControllerWithTitle:v14 message:v15 preferredStyle:1];

    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = (id)SFLocalizableWAPIStringKeyForKey();

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    id v22 = [v1 mainBundle];
    v39._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = v19;
    v23._object = v21;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v39._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v39);
    swift_bridgeObjectRelease();

    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v0;
    id v26 = v0;
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock[4] = sub_100017EBC;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016F6C;
    aBlock[3] = &unk_1002AF968;
    uint64_t v28 = _Block_copy(aBlock);
    swift_release();
    uint64_t v29 = self;
    id v30 = [v29 actionWithTitle:v27 style:0 handler:v28];
    _Block_release(v28);

    [v16 addAction:v30];
    id v31 = [v1 mainBundle];
    v40._object = (void *)0xE000000000000000;
    v32._countAndFlagsBits = 0x4C45434E4143;
    v32._object = (void *)0xE600000000000000;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v40._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v40);

    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v35 = [v29 actionWithTitle:v34 style:1 handler:0];

    [v16 addAction:v35];
    [v26 presentViewController:v16 animated:1 completion:0];
  }
  else
  {
    __break(1u);
  }
}

void sub_100016EFC(uint64_t a1, uint64_t a2)
{
  id v2 = *(void (**)(uint64_t))(a2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_showModalWiFiSettingsBlock);
  if (v2)
  {
    uint64_t v4 = swift_retain();
    v2(v4);
    sub_100017EDC((uint64_t)v2);
    *(unsigned char *)(a2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck) = 1;
  }
  else
  {
    __break(1u);
  }
}

void sub_100016F6C(uint64_t a1, void *a2)
{
  Swift::String v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100017264(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_100017454()
{
  NSString v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup21BuddyIntentController_runState);
  if (!v1) {
    return 0;
  }
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup21BuddyIntentController_proximitySetupController);
  if (!v2) {
    return 0;
  }
  swift_unknownObjectRetain();
  id v3 = v2;
  if ([v1 hasCompletedInitialRun])
  {
    swift_unknownObjectRelease();

    return 0;
  }
  unsigned int v5 = [v3 hasConnection];
  swift_unknownObjectRelease();

  return v5 ^ 1;
}

uint64_t sub_1000175E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  NSString v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FD94();
  NSString v15 = (void *)static OS_dispatch_queue.main.getter();
  id v16 = (void *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  uint64_t v17 = v22;
  v16[4] = a1;
  v16[5] = v17;
  v16[6] = a5;
  aBlock[4] = sub_1000188B8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100031900;
  aBlock[3] = &unk_1002AFA30;
  id v18 = _Block_copy(aBlock);
  swift_errorRetain();
  id v19 = a3;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v23);
}

void sub_100017890(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = self;
  if (a1)
  {
    swift_errorRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 modelSpecificLocalizedStringKeyForKey:v9];

    if (v10)
    {
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = [self mainBundle];
      v36._object = (void *)0xE000000000000000;
      v15._countAndFlagsBits = v11;
      v15._object = v13;
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      v36._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v36);
      swift_bridgeObjectRelease();

      id v17 = [a2 headerView];
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v17 setDetailText:v18];

      swift_errorRelease();
LABEL_7:
      a4(1);
      return;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v8 modelSpecificLocalizedStringKeyForKey:v19];

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = [self mainBundle];
    v37._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = v21;
    v25._object = v23;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v37._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v37);
    swift_bridgeObjectRelease();

    NSString v27 = self;
    if (!__OFSUB__(a3, 1))
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v29 = [v27 localizedStringFromNumber:isa numberStyle:0];

      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      id v33 = [a2 headerView];
      sub_10000A84C(&qword_10031D350);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_100236520;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_10000FF9C();
      *(void *)(v34 + 32) = v30;
      *(void *)(v34 + 40) = v32;
      String.init(format:_:)();
      swift_bridgeObjectRelease();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v33 setDetailText:v35];

      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
}

void sub_100017C00(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id sub_100017D6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyIntentController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyIntentController()
{
  return self;
}

uint64_t sub_100017E84()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100017EBC(uint64_t a1)
{
  sub_100016EFC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100017EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017ED4()
{
  return swift_release();
}

uint64_t sub_100017EDC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_100017EEC(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v71 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (uint64_t *)((char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v72 - 8);
  uint64_t v8 = __chkstk_darwin(v72);
  id v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  Swift::String v16 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  NSString v18 = (char *)&v71 - v17;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = a2;
  NSString v19 = self;
  v73 = a2;
  _Block_copy(a2);
  id v20 = [v19 sharedBuddyAccountTools];
  if (!v20) {
    goto LABEL_34;
  }
  uint64_t v21 = v20;
  id v22 = [v20 primaryAccount];

  if (v22)
  {
    uint64_t v23 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    uint64_t v24 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v18, v23, v72);
    Swift::String v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      NSString v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skipping intent, there is already an account signed in.", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v24);
    uint64_t v28 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
    if (v28)
    {
      id v29 = v28;
      if (![v29 intent]) {
        [v29 setIntent:1];
      }
    }
    uint64_t v30 = (void (*)(void))v73[2];
    goto LABEL_10;
  }
  uint64_t v31 = a1;
  uint64_t v32 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
  if (v32)
  {
    id v33 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_managedConfiguration];
    if (v33)
    {
      id v34 = v32;
      id v35 = v33;
      if ([v35 activationRecordIndicatesCloudConfigurationIsAvailable])
      {
        Swift::String v36 = v34;
        [v34 setIntent:1];
        uint64_t v37 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
        uint64_t v38 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v37, v72);
        Swift::String v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          char v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "CloudConfigurationDevice device, will be set up for myself", v41, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v38);
        ((void (*)(void *, void))v73[2])(v73, 0);
        swift_release();

LABEL_22:
        return;
      }
      if ([v35 isSupervised])
      {
        [v34 setIntent:1];
        uint64_t v42 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
        uint64_t v43 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v42, v72);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Supervised device, will be set up for myself", v46, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v43);
        ((void (*)(void *, void))v73[2])(v73, 0);
        swift_release();

        goto LABEL_22;
      }

      uint64_t v31 = a1;
    }
  }
  id v47 = *(void **)&v31[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider];
  if (!v47) {
    goto LABEL_35;
  }
  if ([v47 networkReachable])
  {
    uint64_t v48 = *(void **)&v31[OBJC_IVAR____TtC5Setup21BuddyIntentController_childSetupPresenter];
    if (v48)
    {
      id v49 = (void *)swift_allocObject();
      v49[2] = v31;
      v49[3] = sub_10001881C;
      v49[4] = v74;
      aBlock[4] = sub_100018864;
      aBlock[5] = v49;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100017C00;
      aBlock[3] = &unk_1002AF9E0;
      uint64_t v50 = _Block_copy(aBlock);
      id v51 = v48;
      unint64_t v52 = v31;
      swift_retain();
      swift_release();
      [v51 fetchCutOffAgeForChildAccountWithCompletionHandler:v50];
      _Block_release(v50);
      swift_release();

      return;
    }
    goto LABEL_36;
  }
  sub_10000FD94();
  *id v6 = static OS_dispatch_queue.main.getter();
  uint64_t v53 = v71;
  (*(void (**)(uint64_t *, void, uint64_t))(v71 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v4);
  char v54 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v6, v4);
  if ((v54 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    _Block_release(v73);
    __break(1u);
LABEL_35:
    _Block_release(v73);
    __break(1u);
LABEL_36:
    _Block_release(v73);
    __break(1u);
LABEL_37:
    _Block_release(v73);
    __break(1u);
    return;
  }
  uint64_t v55 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  uint64_t v56 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v55, v72);
  Swift::String v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    Swift::String v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Network not reachable, not fetching cut off age for child account", v59, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v56);
  Swift::String v60 = self;
  NSString v61 = String._bridgeToObjectiveC()();
  id v62 = [v60 modelSpecificLocalizedStringKeyForKey:v61];

  if (!v62) {
    goto LABEL_37;
  }
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v65 = v64;

  id v66 = [self mainBundle];
  v76._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = v63;
  v67._object = v65;
  v68._countAndFlagsBits = 0;
  v68._object = (void *)0xE000000000000000;
  v76._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, (NSBundle)v66, v68, v76);
  swift_bridgeObjectRelease();

  id v69 = [v31 headerView];
  NSString v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v69 setDetailText:v70];

  uint64_t v30 = (void (*)(void))v73[2];
LABEL_10:
  v30();
  swift_release();
}

uint64_t sub_1000187E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001881C(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

uint64_t sub_100018824()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100018864(uint64_t a1, uint64_t a2)
{
  return sub_1000175E4(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100018870()
{
  swift_errorRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000188B8()
{
  sub_100017890(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t sub_1000188C8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_1000188F4()
{
  qword_100321FE8 = 0x7665446573617265;
  unk_100321FF0 = 0xEB00000000656369;
}

void sub_100018920()
{
  unk_100322007 = -18;
}

uint64_t sub_100018960(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  id v10 = a3;
  sub_100018A68(v10, v7, v9, a5);

  return swift_bridgeObjectRelease();
}

id sub_100018A0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyStartOverAnalytics();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyStartOverAnalytics()
{
  return self;
}

void sub_100018A68(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  sub_10000A84C(&qword_10031D618);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002366C0;
  if (qword_10031CB20 != -1) {
    swift_once();
  }
  uint64_t v8 = unk_100322000;
  *(void *)(inited + 32) = qword_100321FF8;
  *(void *)(inited + 40) = v8;
  id v9 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithString:v10];

  *(void *)(inited + 48) = v11;
  if (qword_10031CB18 != -1) {
    swift_once();
  }
  uint64_t v12 = unk_100321FF0;
  *(void *)(inited + 56) = qword_100321FE8;
  *(void *)(inited + 64) = v12;
  sub_100018C74(0, &qword_10031D0C8);
  swift_bridgeObjectRetain();
  *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(a4 & 1);
  sub_100037884(inited);
  sub_100018C74(0, &qword_10031D620);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a1 addEvent:v6 withPayload:isa persist:1];
}

uint64_t sub_100018C74(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id sub_100018D64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyDeviceImageUtilities();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyDeviceImageUtilities()
{
  return self;
}

id sub_100018DBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A84C((uint64_t *)&unk_10031D650);
  __chkstk_darwin(v8 - 8);
  NSString v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for iosmacHardware();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  iosmacHardware.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100019138((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    iosmacHardware.imageName.getter();
    if (v15)
    {
      type metadata accessor for ProductKitCatalog();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v17 = [self bundleForClass:ObjCClassFromMetadata];
      id v18 = a3;
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v20 = [self imageNamed:v19 inBundle:v17 compatibleWithTraitCollection:v18];

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return v20;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  uint64_t v21 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  os_log_type_t v22 = static os_log_type_t.error.getter();
  uint64_t v23 = Logger.logObject.getter();
  if (os_log_type_enabled(v23, v22))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v22, "Unable to fetch device image.", v24, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return 0;
}

uint64_t sub_100019138(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C((uint64_t *)&unk_10031D650);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100019198(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[OBJC_IVAR____TtC5Setup28BuddyButtonConfigurationFlow_buddyPreferences] = 0;
  if (a4)
  {
    v17[4] = a4;
    v17[5] = a5;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_10003AC5C;
    v17[3] = &unk_1002AFAD0;
    NSString v10 = _Block_copy(v17);
    swift_retain();
    swift_release();
  }
  else
  {
    NSString v10 = 0;
  }
  uint64_t v11 = (objc_class *)type metadata accessor for BuddyButtonConfigurationFlow();
  v18.receiver = v5;
  v18.super_class = v11;
  id v12 = [super initWithNavigationController:a1 flowDelegate:a2 flowStarter:a3 dependencyInjector:v10];
  _Block_release(v10);
  if (v12)
  {

    sub_10000A84C(&qword_10031D690);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1002366C0;
    *(void *)(v13 + 32) = type metadata accessor for BuddySilentModeController();
    *(void *)(v13 + 40) = type metadata accessor for BuddyButtonConfigurationController();
    id v14 = v12;
    sub_10000A84C((uint64_t *)&unk_10031E200);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v14 setClassList:isa];
    sub_100019700(a4);
  }
  else
  {
    sub_100019700(a4);
  }

  swift_unknownObjectRelease();
  return v12;
}

uint64_t sub_100019560()
{
  id v1 = [self currentDevice];
  unsigned int v2 = [v1 hasActionButton];

  if (!v2) {
    return 0;
  }
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyButtonConfigurationFlow_buddyPreferences);
  if (!v3) {
    return 0;
  }
  id v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned int v6 = [v4 BOOLForKey:v5];

  return v6 ^ 1;
}

id sub_100019658()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyButtonConfigurationFlow();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyButtonConfigurationFlow()
{
  return self;
}

uint64_t sub_1000196C0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000196F8(uint64_t a1)
{
  return sub_10003ACC8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100019700(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100019710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100019720()
{
  return swift_release();
}

uint64_t sub_100019728()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BuddyAccountAgeProvider()
{
  return self;
}

id sub_10001975C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  id v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v56 = ((char *)&v54 - v5);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v54 - v7;
  __chkstk_darwin(v6);
  os_log_type_t v58 = (char *)&v54 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Calendar.Component();
  uint64_t v61 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Calendar();
  uint64_t v59 = *(void *)(v15 - 8);
  uint64_t v60 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v18 = self;
  id v19 = [v18 sharedInstance];
  id v20 = [v19 primaryAuthKitAccount];

  if (!v20)
  {
    uint64_t v36 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    uint64_t v37 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v3, v36, v0);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Account age provider found no primary account", v40, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v0);
    return 0;
  }
  uint64_t v57 = v0;
  id v21 = [v18 sharedInstance];
  os_log_type_t v22 = [v21 birthYearForAccount:v20];

  uint64_t v23 = v20;
  if (!v22)
  {
    uint64_t v41 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    uint64_t v42 = v64;
    uint64_t v44 = (char *)v56;
    uint64_t v43 = v57;
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v64 + 16))(v56, v41, v57);
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Account age provider found no birth year", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
    return 0;
  }
  uint64_t v56 = v20;
  static Calendar.current.getter();
  uint64_t v24 = v61;
  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v14, enum case for Calendar.Component.year(_:), v12);
  static Date.now.getter();
  uint64_t v25 = Calendar.component(_:from:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v60);
  id v26 = [v22 integerValue];
  uint64_t v27 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  uint64_t v28 = v64;
  id v29 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  uint64_t v30 = v57;
  if (v25 < (uint64_t)v26)
  {
    uint64_t v31 = v55;
    v29(v55, v27, v57);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Account age provider encountered current year before birth year", v34, 2u);
      swift_slowDealloc();
      id v35 = v22;
      os_log_type_t v22 = v56;
    }
    else
    {
      id v35 = v32;
      uint64_t v32 = v56;
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v30);
    return 0;
  }
  v29(v58, v27, v57);
  uint64_t v48 = v22;
  id v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 134218496;
    id v65 = (id)v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2048;
    id v65 = [v48 integerValue];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 22) = 2048;
    id result = [v48 integerValue];
    if (__OFSUB__(v25, result)) {
      goto LABEL_24;
    }
    id v65 = (id)(v25 - (void)result);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Account age provider returning %ld - %ld = %ld", (uint8_t *)v51, 0x20u);
    swift_slowDealloc();
    uint64_t v30 = v57;
    uint64_t v28 = v64;
  }
  else
  {

    id v49 = v48;
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v58, v30);
  id result = [v48 integerValue];
  if (!__OFSUB__(v25, result))
  {
    id v53 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v25 - (void)result];

    return v53;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_100019EF8()
{
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_runState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_setupMethod] = 0;
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v3._countAndFlagsBits = 0xD000000000000013;
  v18._object = (void *)0xE000000000000000;
  v3._object = (void *)0x8000000100238690;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v18);

  uint64_t v5 = self;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 modelSpecificLocalizedStringKeyForKey:v6];

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = [v1 mainBundle];
    v19._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = v8;
    v12._object = v10;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v19);

    swift_bridgeObjectRelease();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    v17.receiver = v0;
    v17.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
    [super initWithTitle:v14 detailText:v15 symbolName:v16 contentLayout:2];
  }
  else
  {
    __break(1u);
  }
}

void sub_10001A144()
{
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
  [super viewDidLoad];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_setupMethod];
  if (!v1)
  {
LABEL_10:
    id v4 = [self mainBundle];
    unint64_t v5 = 0xD00000000000001CLL;
    unint64_t v16 = 0xE000000000000000;
    NSString v6 = "ENABLE_LOCKDOWN_WITH_RESTART";
    goto LABEL_11;
  }
  id v2 = v1;
  Swift::String v3 = (char *)[v2 dataTransferMethod];
  if ((unint64_t)(v3 - 1) >= 2)
  {
    if (v3) {
      BOOL v7 = v3 == (char *)3;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      type metadata accessor for BuddyDataTransferMethod(0);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }

    goto LABEL_10;
  }

  id v4 = [self mainBundle];
  unint64_t v5 = 0xD00000000000001FLL;
  unint64_t v16 = 0xE000000000000000;
  NSString v6 = "ENABLE_LOCKDOWN_WITHOUT_RESTART";
LABEL_11:
  unint64_t v8 = (unint64_t)(v6 - 32) | 0x8000000000000000;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  uint64_t v10 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v4, v9, *(Swift::String *)(&v16 - 1));

  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBoldButton:v11 action:"enableTappedAndReturnError:"];

  id v12 = [self mainBundle];
  v18._object = (void *)0xE000000000000000;
  v13._object = (void *)0x8000000100238650;
  v13._countAndFlagsBits = 0xD000000000000018;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v18);

  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addLinkButton:v15 action:"setUpLaterTapped"];
}

id sub_10001A3BC()
{
  uint64_t v1 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v1 - 8);
  Swift::String v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [v0 delegate];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider];
    if (v6)
    {
      type metadata accessor for ViewControllerSpinnerManager();
      swift_getObjectType();
      uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      swift_unknownObjectRetain();
      unint64_t v8 = NSStringFromClass(ObjCClassFromMetadata);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
      type metadata accessor for MainActor();
      swift_unknownObjectRetain();
      uint64_t v10 = v0;
      swift_unknownObjectRetain();
      uint64_t v11 = static MainActor.shared.getter();
      id v12 = (void *)swift_allocObject();
      v12[2] = v11;
      v12[3] = &protocol witness table for MainActor;
      v12[4] = v6;
      v12[5] = v10;
      v12[6] = v5;
      sub_100025278((uint64_t)v3, (uint64_t)&unk_10031D7A0, (uint64_t)v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (id)swift_release();
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10001A5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  sub_10000A84C(&qword_10031D770);
  v6[18] = swift_task_alloc();
  v6[19] = type metadata accessor for MainActor();
  v6[20] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[21] = v8;
  v6[22] = v7;
  return _swift_task_switch(sub_10001A68C, v8, v7);
}

uint64_t sub_10001A68C()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_10001A784;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000221F0;
  v0[13] = &unk_1002AFB88;
  v0[14] = v2;
  [v1 enableWithStrategy:2 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10001A784()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 168);
  if (v2) {
    id v5 = sub_10001A9D0;
  }
  else {
    id v5 = sub_10001A8B4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10001A8B4()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = (void *)v0[16];
  swift_release();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  id v5 = v3;
  swift_unknownObjectRetain();
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v6;
  v7[3] = &protocol witness table for MainActor;
  v7[4] = v5;
  v7[5] = v2;
  sub_100041A28(v1, (uint64_t)&unk_10031D7B0, (uint64_t)v7);
  swift_release();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10001A9D0()
{
  swift_release();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10001AAE8, v7, v6);
}

uint64_t sub_10001AAE8()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v0[2];
  swift_release();
  type metadata accessor for ViewControllerSpinnerManager();
  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v4 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)();
  swift_bridgeObjectRelease();
  [v1 flowItemDone:v2];
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

id sub_10001ABFC()
{
  uint64_t v1 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [v0 delegate];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider];
    if (v6)
    {
      type metadata accessor for ViewControllerSpinnerManager();
      swift_getObjectType();
      uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      swift_unknownObjectRetain();
      uint64_t v8 = NSStringFromClass(ObjCClassFromMetadata);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
      type metadata accessor for MainActor();
      swift_unknownObjectRetain();
      uint64_t v10 = v0;
      swift_unknownObjectRetain();
      uint64_t v11 = static MainActor.shared.getter();
      id v12 = (void *)swift_allocObject();
      v12[2] = v11;
      v12[3] = &protocol witness table for MainActor;
      v12[4] = v6;
      v12[5] = v10;
      v12[6] = v5;
      sub_100025278((uint64_t)v3, (uint64_t)&unk_10031D780, (uint64_t)v12);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (id)swift_release();
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10001AE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  sub_10000A84C(&qword_10031D770);
  v6[18] = swift_task_alloc();
  v6[19] = type metadata accessor for MainActor();
  v6[20] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[21] = v8;
  v6[22] = v7;
  return _swift_task_switch(sub_10001AEE0, v8, v7);
}

uint64_t sub_10001AEE0()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_10001AFD4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000221F0;
  v0[13] = &unk_1002AFB20;
  v0[14] = v2;
  [v1 acknowledgeWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10001AFD4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 184) = v2;
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 168);
  if (v2) {
    id v5 = sub_10001BC70;
  }
  else {
    id v5 = sub_10001B104;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10001B104()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = (void *)v0[16];
  swift_release();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  id v5 = v3;
  swift_unknownObjectRetain();
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v6;
  v7[3] = &protocol witness table for MainActor;
  v7[4] = v5;
  v7[5] = v2;
  sub_100041A28(v1, (uint64_t)&unk_10031D790, (uint64_t)v7);
  swift_release();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10001B220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10001BC68, v7, v6);
}

uint64_t sub_10001B380(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_10001B478()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_runState);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider);
  if (!v2) {
    return 0;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if ([v1 hasCompletedInitialRun])
  {
    uint64_t v3 = 0;
LABEL_12:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v3;
  }
  uint64_t v3 = (uint64_t)[v2 deviceState];
  id v4 = [v2 accountState];
  sub_10000A84C(&qword_10031D7B8);
  if (!v3) {
    goto LABEL_12;
  }
  if (v3 == 1)
  {
    if (v4 == (id)1)
    {
      uint64_t v3 = 0;
      goto LABEL_12;
    }
    if (!v4)
    {
      uint64_t v3 = 1;
      goto LABEL_12;
    }
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

id sub_10001B614()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyLockdownModeController()
{
  return self;
}

uint64_t sub_10001B6CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001BC6C;
  return sub_10001AE10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10001B798(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001BC74;
  return sub_10001B220(a1, v4, v5, v7, v6);
}

uint64_t sub_10001B85C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001B8AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10001B974;
  return sub_10001A5BC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10001B974()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001BA6C()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001BAB4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001BB74;
  return sub_10001AA50(a1, v4, v5, v7, v6);
}

uint64_t sub_10001BB74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

id IntelligenceManager.__allocating_init(featureFlags:availabilityProvider:stateProvider:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun] = 0;
  *(void *)&v9[OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags] = a1;
  *(void *)&v9[OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider] = a2;
  *(void *)&v9[OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider] = a3;
  *(void *)&v9[OBJC_IVAR____TtC5Setup19IntelligenceManager_preferences] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return [super init];
}

id IntelligenceManager.init(featureFlags:availabilityProvider:stateProvider:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun] = 0;
  *(void *)&v4[OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags] = a1;
  *(void *)&v4[OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider] = a2;
  *(void *)&v4[OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider] = a3;
  *(void *)&v4[OBJC_IVAR____TtC5Setup19IntelligenceManager_preferences] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for IntelligenceManager();
  return [super init];
}

uint64_t type metadata accessor for IntelligenceManager()
{
  return self;
}

id IntelligenceManager.__allocating_init(featureFlags:preferences:)(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return IntelligenceManager.init(featureFlags:preferences:)(a1, a2);
}

id IntelligenceManager.init(featureFlags:preferences:)(uint64_t a1, void *a2)
{
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  objc_super v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_allocWithZone((Class)type metadata accessor for BuddyGMAvailabilityProvider());
  id v12 = a2;
  id v13 = [v11 init];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for IntelligenceServerControlProvider()) init];
  NSString v15 = objc_allocWithZone((Class)type metadata accessor for IntelligenceAvailabilityProvider());
  id v16 = sub_10001E56C(v13, v14, a2, v15);

  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_super v17 = (objc_class *)type metadata accessor for IntelligenceStateProvider();
  id v18 = objc_allocWithZone(v17);
  v27[3] = v7;
  v27[4] = (uint64_t)&protocol witness table for GenerativeModelsAvailability;
  Swift::String v19 = sub_100012328(v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(v19, v10, v7);
  sub_10001238C((uint64_t)v27, (uint64_t)v18 + OBJC_IVAR____TtC5Setup25IntelligenceStateProvider_generativeModelProvider);
  v26.receiver = v18;
  v26.super_class = v17;
  id v20 = [super init];
  sub_100012004((uint64_t)v27);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v21 = [v25 initWithFeatureFlags:v24 availabilityProvider:v16 stateProvider:v20 preferences:v12];

  swift_unknownObjectRelease();
  return v21;
}

uint64_t IntelligenceManager.shouldShowIntelligence(withServerCheck:)(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 64) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_10001C2BC, 0, 0);
}

uint64_t sub_10001C2BC()
{
  id v1 = [*(id *)(v0[2] + OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags) isIntelligenceEnabled];
  if (v1
    && (*(unsigned char *)(v0[2] + OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun) & 1) == 0)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[6] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10001C3C0;
    return IntelligenceManager.isIntelligenceEnabled()();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(id))v0[1];
    return v2(v1);
  }
}

uint64_t sub_10001C3C0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 65) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001C4C0, 0, 0);
}

uint64_t sub_10001C4C0()
{
  if (*(unsigned char *)(v0 + 65) == 1)
  {
    if (sub_10001E290()) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = *(void **)(*(void *)(v0 + 16) + OBJC_IVAR____TtC5Setup19IntelligenceManager_preferences);
    NSString v2 = String._bridgeToObjectiveC()();
    LODWORD(v1) = [v1 BOOLForKey:v2];

    if (!v1)
    {
LABEL_11:
      NSString v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 56) = v15;
      void *v15 = v0;
      v15[1] = sub_10001C6BC;
      char v16 = *(unsigned char *)(v0 + 64);
      return sub_10001D658(v16);
    }
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Did see intelligence in a previous buddy run", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc();
  id v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13(0);
}

uint64_t sub_10001C6BC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10001C954(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001CA10;
  return IntelligenceManager.shouldShowIntelligence(withServerCheck:)(a1);
}

uint64_t sub_10001CA10(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_10001CB58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "didShowIntelligencePaneThisBuddyRun is set this buddy run.", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun) = 1;
  return result;
}

uint64_t IntelligenceManager.isIntelligenceEnabled()()
{
  v1[16] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_10001CDE8, 0, 0);
}

uint64_t sub_10001CDE8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v0[22] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[23] = v5;
  v0[24] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking intelligence status", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[16];

  id v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[25] = v13;
  v0[26] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  id v14 = *(void **)(v12 + OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider);
  v0[2] = v0;
  v0[7] = (char *)v0 + 228;
  v0[3] = sub_10001CFD0;
  uint64_t v15 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100010960;
  v0[13] = &unk_1002AFBC8;
  v0[14] = v15;
  [v14 isIntelligenceEnabledWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10001CFD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    uint64_t v2 = sub_10001D22C;
  }
  else {
    uint64_t v2 = sub_10001D0E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001D0E0()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 228);
  (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 160), *(void *)(v0 + 176), *(void *)(v0 + 136));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 224) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Intelligence status: %{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(void, void))(v0 + 200))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v1);
}

uint64_t sub_10001D22C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);
  swift_willThrow();
  v1(v3, v2, v4);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  if (os_log_type_enabled(v6, v5))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 120) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Failed to determine intelligence status. Error: %@", v7, 0xCu);
    sub_10000A84C(&qword_10031D0B0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 200))(*(void *)(v0 + 152), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10(0);
}

uint64_t sub_10001D5B0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10001EBA0;
  return IntelligenceManager.isIntelligenceEnabled()();
}

uint64_t sub_10001D658(char a1)
{
  *(void *)(v2 + 232) = v1;
  *(unsigned char *)(v2 + 350) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 240) = v3;
  *(void *)(v2 + 248) = *(void *)(v3 - 8);
  *(void *)(v2 + 256) = swift_task_alloc();
  *(void *)(v2 + 264) = swift_task_alloc();
  *(void *)(v2 + 272) = swift_task_alloc();
  *(void *)(v2 + 280) = swift_task_alloc();
  return _swift_task_switch(sub_10001D744, 0, 0);
}

uint64_t sub_10001D744()
{
  uint64_t v1 = *(void *)(v0 + 248);
  int v2 = *(unsigned __int8 *)(v0 + 350);
  uint64_t v3 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  *(void *)(v0 + 288) = v3;
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v1 + 16);
  *(void *)(v0 + 296) = v4;
  *(void *)(v0 + 304) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v5 = *(void *)(v0 + 240);
  if (v2 == 1)
  {
    v4(*(void *)(v0 + 280), v3, v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Updating intelligence availability", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0 + 80;
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 232);

    id v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    *(void *)(v0 + 312) = v14;
    *(void *)(v0 + 320) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v14(v10, v11);
    uint64_t v15 = *(void **)(v13 + OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 349;
    *(void *)(v0 + 88) = sub_10001DA88;
    uint64_t v16 = swift_continuation_init();
    *(void *)(v0 + 184) = _NSConcreteStackBlock;
    *(void *)(v0 + 192) = 0x40000000;
    *(void *)(v0 + 200) = sub_100010960;
    *(void *)(v0 + 208) = &unk_1002AFCE8;
    *(void *)(v0 + 216) = v16;
    [v15 fetchLatestAvailabilityWithCompletionHandler:v0 + 184];
  }
  else
  {
    v4(*(void *)(v0 + 272), v3, v5);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      Swift::String v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Local availability check", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0 + 16;
    uint64_t v20 = *(void *)(v0 + 272);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    uint64_t v23 = *(void *)(v0 + 232);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    *(void *)(v0 + 336) = v24;
    v24(v20, v21);
    id v25 = *(void **)(v23 + OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 348;
    *(void *)(v0 + 24) = sub_10001DD20;
    uint64_t v26 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_100013E88;
    *(void *)(v0 + 168) = &unk_1002AFCD0;
    *(void *)(v0 + 176) = v26;
    [v25 isDeviceEligibleForIntelligenceWithCompletionHandler:v0 + 144];
  }
  return _swift_continuation_await(v9);
}

uint64_t sub_10001DA88()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 328) = v1;
  if (v1) {
    int v2 = sub_10001DF8C;
  }
  else {
    int v2 = sub_10001DB98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001DB98()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 349);
  int v2 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v3(v4, v6, v5);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    *(_DWORD *)(v0 + 344) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Intelligence availablility status: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 240);

  v2(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v12(v1);
}

uint64_t sub_10001DD20()
{
  return _swift_task_switch(sub_10001DE00, 0, 0);
}

uint64_t sub_10001DE00()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 348);
  int v2 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v3(v4, v6, v5);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    *(_DWORD *)(v0 + 344) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Intelligence availablility status: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 240);

  v2(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v12(v1);
}

uint64_t sub_10001DF8C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);
  swift_willThrow();
  v1(v3, v2, v4);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  if (os_log_type_enabled(v6, v5))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 224) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Failed to fetch latest availability status with error: %@", v7, 0xCu);
    sub_10000A84C(&qword_10031D0B0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 312))(*(void *)(v0 + 256), *(void *)(v0 + 240));
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 264);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v11(v12, v14, v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 67109120;
    *(_DWORD *)(v0 + 344) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Intelligence availablility status: %{BOOL}d", v17, 8u);
    swift_slowDealloc();
  }
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v19 = *(void *)(v0 + 240);

  v10(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20(0);
}

id sub_10001E290()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(v0 + OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider) shouldShowForSummarization];
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    v11[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Should show summarization: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

id IntelligenceManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void IntelligenceManager.init()()
{
}

id IntelligenceManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceManager();
  [super dealloc];
}

id sub_10001E56C(void *a1, void *a2, void *a3, unsigned char *a4)
{
  a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverBackedValue] = 2;
  *(void *)&a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider] = a1;
  *(void *)&a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverControlProvider] = a2;
  os_log_type_t v7 = a4;
  id v8 = a1;
  id v9 = a2;
  if (os_variant_has_internal_ui()) {
    id v10 = a3;
  }
  else {
    a3 = 0;
  }
  *(void *)&v7[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_preferences] = a3;

  v12.receiver = v7;
  v12.super_class = (Class)type metadata accessor for IntelligenceAvailabilityProvider();
  return [super init];
}

uint64_t sub_10001E624()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001E664()
{
  objc_super v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001EBA8;
  id v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031D838 + dword_10031D838);
  return v5(v2, v3);
}

uint64_t sub_10001E718(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001EBA4;
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10001E7E4()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001E824()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001E8D8;
  uint64_t v6 = (uint64_t (*)(char, void *, void *))((char *)&dword_10031D858 + dword_10031D858);
  return v6(v2, v4, v3);
}

uint64_t sub_10001E8D8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001E9D0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10001EBAC;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_10001EA94()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001EAD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001EBB0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

id sub_10001EBB4()
{
  *(void *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_flowItemDispositionProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_runState] = 0;
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v13._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001002388F0;
  v3._countAndFlagsBits = 0xD000000000000012;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v13);

  id v5 = [v1 mainBundle];
  v6._countAndFlagsBits = 0xD000000000000013;
  v14._object = (void *)0xE000000000000000;
  v6._object = (void *)0x8000000100238910;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v14);

  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  id v10 = [super initWithTitle:v8 detailText:v9 icon:0 contentLayout:2];

  return v10;
}

void sub_10001ED7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v6 = (objc_class *)type metadata accessor for BuddyChildSafetyController();
  v80.receiver = v0;
  v80.super_class = v6;
  [super viewDidLoad];
  id v7 = [self mainBundle];
  v81._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x45554E49544E4F43;
  v8._object = (void *)0xE800000000000000;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v81._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v81);

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 addBoldButton:v10 action:"continueTapped"];

  id v11 = [v1 buttonTray];
  sub_10000A84C((uint64_t *)&unk_10031DE90);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100236520;
  *(void *)(v12 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v12 + 40) = v13;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPrivacyLinkForBundles:isa];

  uint64_t v15 = self;
  id v16 = [v15 currentDevice];
  LOBYTE(isa) = [v16 hasHomeButton];

  if (isa)
  {
    unint64_t v17 = 0xE900000000000064;
    unint64_t v18 = 0x6C6F685F656D6F68;
  }
  else
  {
    strcpy((char *)v79, "homeless_hold");
    HIWORD(v79[1]) = -4864;
    id v19 = [v15 currentDevice];
    unsigned __int8 v20 = [v19 hasDynamicIsland];

    if ((v20 & 1) == 0) {
      goto LABEL_6;
    }
    unint64_t v17 = 0x80000001002388D0;
    unint64_t v18 = 0xD000000000000012;
  }
  v79[0] = v18;
  v79[1] = v17;
LABEL_6:
  uint64_t v21 = self;
  id v22 = [v21 mainScreen];
  [v22 scale];
  double v24 = v23;

  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v78._countAndFlagsBits = (uint64_t)v24;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v78._countAndFlagsBits = 64;
  v78._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 120;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  uint64_t v28 = v79[0];
  unint64_t v27 = v79[1];
  id v29 = objc_allocWithZone((Class)NSDataAsset);
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = [v29 initWithName:v30];

  if (v31)
  {
    id v32 = [objc_allocWithZone((Class)BuddyAspectFitLayerView) init];
    [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v33 = [v1 contentView];
    [v33 addSubview:v32];

    id v34 = self;
    id v35 = [v31 data];
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    Class v39 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000134A0(v36, v38);
    id v40 = [v34 buddy_layerForPackageWithData:v39 geometryFlipped:1 scale:1.0];

    uint64_t v41 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
    uint64_t v42 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
    *(void *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer] = v40;

    uint64_t v43 = *(void **)&v1[v41];
    if (v43)
    {
      [v43 speed];
      *(_DWORD *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed] = v44;
      if (*(void *)&v1[v41])
      {
        [v32 setManagedLayer:];
        os_log_type_t v45 = *(void **)&v1[v41];
        if (v45)
        {
          id v46 = v45;
          swift_bridgeObjectRelease();
          [v46 bounds];
          double v48 = v47;

          id v49 = [v21 mainScreen];
          [v49 scale];
          double v51 = v50;

          unint64_t v52 = self;
          sub_10000A84C(&qword_10031D8D0);
          uint64_t v53 = swift_allocObject();
          *(_OWORD *)(v53 + 16) = xmmword_1002367C0;
          id v54 = [v32 centerXAnchor];
          id v55 = [v1 contentView];
          id v56 = [v55 centerXAnchor];

          id v57 = [v54 constraintEqualToAnchor:v56];
          *(void *)(v53 + 32) = v57;
          id v58 = [v32 widthAnchor];
          id v59 = [v1 contentView];
          id v60 = [v59 widthAnchor];

          id v61 = [v58 constraintEqualToAnchor:v60];
          *(void *)(v53 + 40) = v61;
          id v62 = [v32 topAnchor];
          id v63 = [v1 contentView];
          id v64 = [v63 topAnchor];

          id v65 = [v62 constraintEqualToAnchor:v64];
          *(void *)(v53 + 48) = v65;
          id v66 = [v32 heightAnchor];
          id v67 = [v66 constraintEqualToConstant:v48 / v51 + v48 / v51];

          *(void *)(v53 + 56) = v67;
          id v68 = [v32 bottomAnchor];
          id v69 = [v1 contentView];
          id v70 = [v69 bottomAnchor];

          id v71 = [v68 constraintEqualToAnchor:v70];
          *(void *)(v53 + 64) = v71;
          v78._countAndFlagsBits = v53;
          specialized Array._endMutation()();
          sub_10001FD20();
          Class v72 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v52 activateConstraints:v72];

          return;
        }
        goto LABEL_22;
      }
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      return;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v73 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v73, v2);
  swift_bridgeObjectRetain();
  uint64_t v74 = Logger.logObject.getter();
  uint64_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, (os_log_type_t)v75))
  {
    v77[0] = v2;
    Swift::String v76 = (uint8_t *)swift_slowAlloc();
    v78._countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)Swift::String v76 = 136315138;
    swift_bridgeObjectRetain();
    v77[1] = sub_10003FC78(v28, v27, &v78._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v75, "Failed to load asset with name '%s'", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void))(v3 + 8))(v5, v77[0]);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_10001F7A4(char a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  [super viewWillAppear:a1 & 1];
  uint64_t v3 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
  if (v4)
  {
    [v4 setSpeed:0.0];
    id v5 = *(void **)&v1[v3];
    if (v5)
    {
      id v6 = v5;
      [v6 setBeginTime:CACurrentMediaTime()];
    }
  }
}

id sub_10001F884(char a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  [super viewDidAppear:a1 & 1];
  uint64_t v4 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
  id v5 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
  if (v5)
  {
    id v6 = v5;
    [v6 setBeginTime:CACurrentMediaTime()];

    id result = *(id *)&v1[v4];
    if (result)
    {
      LODWORD(v7) = *(_DWORD *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed];
      return [result setSpeed:v7];
    }
  }
  return result;
}

uint64_t sub_10001FAF8()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_runState)) {
    return 0;
  }
  if ([(id)swift_unknownObjectRetain() hasCompletedInitialRun]) {
    goto LABEL_7;
  }
  id v1 = [self currentDevice];
  id v2 = [v1 type];

  if (!v2)
  {
    uint64_t v3 = 1;
LABEL_8:
    swift_unknownObjectRelease();
    return v3;
  }
  if (v2 == (id)1)
  {
LABEL_7:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  type metadata accessor for BYDeviceType(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

id sub_10001FC6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyChildSafetyController()
{
  return self;
}

unint64_t sub_10001FD20()
{
  unint64_t result = qword_10031DB50;
  if (!qword_10031DB50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031DB50);
  }
  return result;
}

uint64_t sub_10001FD60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000A84C(&qword_10031D3C0);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    id v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_100021524((uint64_t)&v11, v8, &qword_10031D928);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10001FE2C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000A84C(&qword_10031D3C0);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = 0;
    if (a2)
    {
      sub_1000214E4();
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v10 = v8;
    sub_100021524((uint64_t)&v10, *(void *)(*(void *)(v3 + 64) + 40), &qword_10031D918);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000200A0(uint64_t a1, int a2, int a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v5[4] = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  v5[5] = v12;
  unint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10031D910 + dword_10031D910);
  id v14 = a5;
  uint64_t v15 = (void *)swift_task_alloc();
  v5[6] = v15;
  void *v15 = v5;
  v15[1] = sub_1000201BC;
  return v17(a1, v8, v10, v11, v13);
}

uint64_t sub_1000201BC(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

id sub_1000203CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SetupUserDispositionProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for SetupUserDispositionProvider()
{
  return self;
}

uint64_t sub_100020424()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100020474()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_10002053C;
  uint64_t v8 = (uint64_t (*)(uint64_t, int, int, void *, void *))((char *)&dword_10031D900 + dword_10031D900);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10002053C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100020638()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void *sub_100020678(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_22;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    for (unint64_t j = 0; ; ++j)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_9;
      }
      if (j >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      id v7 = *(id *)(a1 + 8 * j + 32);
LABEL_9:
      uint64_t v8 = v7;
      unint64_t v9 = j + 1;
      if (__OFADD__(j, 1)) {
        goto LABEL_21;
      }
      id v10 = [v7 serialNumber];
      if (!v10) {
        goto LABEL_4;
      }
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v12 == a2 && v14 == a3)
      {

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v16)
      {
      }
      else
      {
LABEL_4:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
LABEL_5:
      if (v9 == i) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    ;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100020838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  return _swift_task_switch(sub_100020860, 0, 0);
}

uint64_t sub_100020860()
{
  id v1 = [self defaultStore];
  v0[29] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    v0[2] = v0;
    v0[7] = v0 + 23;
    v0[3] = sub_100020988;
    uint64_t v3 = swift_continuation_init();
    v0[18] = _NSConcreteStackBlock;
    v0[19] = 0x40000000;
    v0[20] = sub_10001FD60;
    v0[21] = &unk_1002AFD78;
    v0[22] = v3;
    [v2 aa_primaryAppleAccountWithCompletion:v0 + 18];
    id v1 = v0 + 2;
  }
  else
  {
    __break(1u);
  }
  return _swift_continuation_await(v1);
}

uint64_t sub_100020988()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1000213E0;
  }
  else {
    uint64_t v2 = sub_100020A98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100020A98()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 232);
  *(void *)(v0 + 248) = v1;

  if (v1)
  {
    uint64_t v3 = (void *)(v0 + 144);
    id v4 = [objc_allocWithZone((Class)AKAppleIDAuthenticationController) init];
    *(void *)(v0 + 256) = v4;
    id v5 = [objc_allocWithZone((Class)AKDeviceListRequestContext) init];
    *(void *)(v0 + 264) = v5;
    id v6 = [v1 aa_altDSID];
    [v5 setAltDSID:v6];

    sub_10000A84C((uint64_t *)&unk_10031DE90);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100236520;
    *(void *)(v7 + 32) = 5459817;
    *(void *)(v7 + 40) = 0xE300000000000000;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 setOperatingSystems:isa];

    if (v4)
    {
      *(void *)(v0 + 80) = v0;
      *(void *)(v0 + 120) = v0 + 184;
      *(void *)(v0 + 88) = sub_100020F90;
      uint64_t v9 = swift_continuation_init();
      *(void *)(v0 + 144) = _NSConcreteStackBlock;
      *(void *)(v0 + 152) = 0x40000000;
      *(void *)(v0 + 160) = sub_10001FE2C;
      *(void *)(v0 + 168) = &unk_1002AFD90;
      *(void *)(v0 + 176) = v9;
      [v4 fetchDeviceListWithContext:v5 completion:v0 + 144];
      return _swift_continuation_await(v0 + 80);
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v12 = *(void *)(v0 + 224);
    swift_bridgeObjectRetain();
    unint64_t v13 = (unint64_t)sub_100020678((unint64_t)_swiftEmptyArrayStorage, v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13 >> 62)
    {
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14)
      {
LABEL_9:
        uint64_t v36 = (void *)(v0 + 144);
        sub_100036B38(0, v14 & ~(v14 >> 63), 0);
        if (v14 < 0)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          JUMPOUT(0x100020F80);
        }
        uint64_t v15 = 0;
        do
        {
          if ((v13 & 0xC000000000000001) != 0) {
            id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v16 = *(id *)(v13 + 8 * v15 + 32);
          }
          unint64_t v17 = v16;
          id v18 = [v16 model:v36];
          if (!v18) {
            goto LABEL_40;
          }
          id v19 = v18;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v22 = v21;

          unint64_t v24 = _swiftEmptyArrayStorage[2];
          unint64_t v23 = _swiftEmptyArrayStorage[3];
          if (v24 >= v23 >> 1) {
            sub_100036B38(v23 > 1, v24 + 1, 1);
          }
          ++v15;
          _swiftEmptyArrayStorage[2] = v24 + 1;
          Swift::String v25 = &_swiftEmptyArrayStorage[2 * v24];
          v25[4] = v20;
          v25[5] = v22;
        }
        while (v14 != v15);
        swift_bridgeObjectRelease();
        uint64_t v3 = v36;
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v26 = *(void *)(v0 + 192);
    switch(v26)
    {
      case 0:
      case 3:
        uint64_t v27 = _swiftEmptyArrayStorage[2];
        if (!v27)
        {
          id v32 = *(void **)(v0 + 264);
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
        swift_bridgeObjectRetain();
        uint64_t v28 = &_swiftEmptyArrayStorage[5];
        while (1)
        {
          uint64_t v30 = *(void *)(v0 + 200);
          id v29 = *(void **)(v0 + 208);
          swift_bridgeObjectRetain();
          v31._countAndFlagsBits = v30;
          v31._object = v29;
          LOBYTE(v29) = String.hasPrefix(_:)(v31);
          swift_bridgeObjectRelease();
          if (v29) {
            break;
          }
          v28 += 2;
          if (!--v27)
          {
            id v32 = *(void **)(v0 + 264);
            swift_bridgeObjectRelease_n();
LABEL_32:
            uint64_t v10 = 1;
            goto LABEL_35;
          }
        }
        id v32 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease_n();
LABEL_34:
        uint64_t v10 = 0;
LABEL_35:

        id v33 = *(void **)(v0 + 248);
        break;
      case 1:
      case 2:
        id v32 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease();
        goto LABEL_34;
      default:
        type metadata accessor for BuddyDataTransferMethod(0);
        void *v3 = v26;
        return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    }
    goto LABEL_36;
  }
  uint64_t v10 = 0;
LABEL_36:
  id v34 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v34(v10);
}

uint64_t sub_100020F90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 272) = v1;
  if (v1) {
    uint64_t v2 = sub_100021454;
  }
  else {
    uint64_t v2 = sub_1000210A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000210A0()
{
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 184);

  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);
  swift_bridgeObjectRetain();
  unint64_t v5 = (unint64_t)sub_100020678((unint64_t)v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_5:
  sub_100036B38(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    JUMPOUT(0x1000213D0);
  }
  uint64_t v29 = v0;
  uint64_t v7 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    id v10 = [v8 model:v29];
    if (!v10) {
      goto LABEL_35;
    }
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_100036B38(v15 > 1, v16 + 1, 1);
    }
    ++v7;
    _swiftEmptyArrayStorage[2] = v16 + 1;
    unint64_t v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
    *((void *)v17 + 4) = v12;
    *((void *)v17 + 5) = v14;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  uint64_t v0 = v29;
LABEL_17:
  uint64_t v18 = *(void *)(v0 + 192);
  switch(v18)
  {
    case 0:
    case 3:
      uint64_t v19 = _swiftEmptyArrayStorage[2];
      if (!v19)
      {
        unint64_t v24 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      swift_bridgeObjectRetain();
      uint64_t v20 = (char *)&_swiftEmptyArrayStorage[5];
      while (1)
      {
        uint64_t v22 = *(void *)(v0 + 200);
        uint64_t v21 = *(void **)(v0 + 208);
        swift_bridgeObjectRetain();
        v23._countAndFlagsBits = v22;
        v23._object = v21;
        LOBYTE(v21) = String.hasPrefix(_:)(v23);
        swift_bridgeObjectRelease();
        if (v21) {
          break;
        }
        v20 += 16;
        if (!--v19)
        {
          unint64_t v24 = *(void **)(v0 + 264);
          swift_bridgeObjectRelease_n();
LABEL_28:
          uint64_t v26 = 1;
          goto LABEL_31;
        }
      }
      unint64_t v24 = *(void **)(v0 + 264);
      swift_bridgeObjectRelease_n();
LABEL_30:
      uint64_t v26 = 0;
LABEL_31:

      uint64_t v27 = *(void **)(v0 + 248);
      uint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v28(v26);
    case 1:
    case 2:
      unint64_t v24 = *(void **)(v0 + 264);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    default:
      type metadata accessor for BuddyDataTransferMethod(0);
      *(void *)(v0 + 144) = v18;
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  }
}

uint64_t sub_1000213E0()
{
  uint64_t v1 = *(void **)(v0 + 232);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_100021454()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v3 = (void *)v0[31];
  uint64_t v2 = (void *)v0[32];
  swift_willThrow();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

unint64_t sub_1000214E4()
{
  unint64_t result = qword_10031D920;
  if (!qword_10031D920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031D920);
  }
  return result;
}

uint64_t sub_100021524(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A84C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t BuddyGMAvailabilityProvider.fetchLatestAvailabilityStatus()()
{
  return _swift_task_switch(sub_1000215C4, 0, 0);
}

uint64_t sub_1000215C4()
{
  type metadata accessor for AvailabilityClient();
  swift_allocObject();
  *(void *)(v0 + 16) = AvailabilityClient.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100021678;
  return AvailabilityClient.updateAll()();
}

uint64_t sub_100021678()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000217B4, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000217B4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100021980(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_1000219F8, 0, 0);
}

uint64_t sub_1000219F8()
{
  type metadata accessor for AvailabilityClient();
  swift_allocObject();
  *(void *)(v0 + 32) = AvailabilityClient.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100021AAC;
  return AvailabilityClient.updateAll()();
}

uint64_t sub_100021AAC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100021C18, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 24);
    id v4 = *(void **)(v2 + 16);
    swift_release();

    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    _Block_release(*(const void **)(v2 + 24));
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_100021C18()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 16);
  swift_release();

  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  _Block_release(*(const void **)(v0 + 24));
  id v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

id BuddyGMAvailabilityProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id BuddyGMAvailabilityProvider.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyGMAvailabilityProvider();
  return [super init];
}

id BuddyGMAvailabilityProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyGMAvailabilityProvider();
  [super dealloc];
}

uint64_t _s5Setup27BuddyGMAvailabilityProviderC11isAvailableSbyF_0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 2;
  char v4 = static GenerativeModelsAvailability.shouldBeShown(inSetupAssistantReturning:)();
  uint64_t v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109376;
    int v12 = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 8) = 2048;
    swift_beginAccess();
    uint64_t v10 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "GM on device status: shouldShow: %{BOOL}d, with availability state: %ld", (uint8_t *)v8, 0x12u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t type metadata accessor for BuddyGMAvailabilityProvider()
{
  return self;
}

uint64_t sub_100021FC8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022008()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *char v4 = v1;
  v4[1] = sub_1000220B4;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031D960 + dword_10031D960);
  return v5(v2, v3);
}

uint64_t sub_1000220B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000221B0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000221F0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10000A84C(&qword_10031D3C0);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[6] = v3;
  void *v3 = v1;
  v3[1] = sub_100022378;
  return sub_10002343C(0);
}

uint64_t sub_100022378(char a1)
{
  *(unsigned char *)(*(void *)v1 + 60) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100022478, 0, 0);
}

uint64_t sub_100022478()
{
  if (*(unsigned char *)(v0 + 60) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 24);
    id v4 = [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider) isAvailable];
    uint64_t v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      *(_DWORD *)(v0 + 56) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking intelligence on device availability status: %{BOOL}d", v8, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
  }
  else
  {
    id v4 = 0;
  }
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(id))(v0 + 8);
  return v9(v4);
}

uint64_t sub_100022764(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  id v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *id v4 = v2;
  v4[1] = sub_10002280C;
  return IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()();
}

uint64_t sub_10002280C(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  id v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t IntelligenceAvailabilityProvider.fetchLatestAvailability()()
{
  v1[15] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[19] = v3;
  void *v3 = v1;
  v3[1] = sub_100022A44;
  return sub_10002343C(1);
}

uint64_t sub_100022A44(char a1)
{
  *(unsigned char *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100022B44, 0, 0);
}

uint64_t sub_100022B44()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (*(unsigned char *)(v0 + 176) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching latest Intelligence availability status", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 128);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    int v12 = *(void **)(v11 + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100022D5C;
    uint64_t v13 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000221F0;
    *(void *)(v0 + 104) = &unk_1002AFE20;
    *(void *)(v0 + 112) = v13;
    [v12 fetchLatestAvailabilityStatusWithCompletionHandler:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14(0);
  }
}

uint64_t sub_100022D5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_100023020;
  }
  else {
    uint64_t v2 = sub_100022E6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100022E6C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100022EFC;
  return IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()();
}

uint64_t sub_100022EFC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_100023020()
{
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100023204(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000232AC;
  return IntelligenceAvailabilityProvider.fetchLatestAvailability()();
}

uint64_t sub_1000232AC(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10002343C(char a1)
{
  *(void *)(v2 + 152) = v1;
  *(unsigned char *)(v2 + 213) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 160) = v3;
  *(void *)(v2 + 168) = *(void *)(v3 - 8);
  *(void *)(v2 + 176) = swift_task_alloc();
  *(void *)(v2 + 184) = swift_task_alloc();
  *(void *)(v2 + 192) = swift_task_alloc();
  return _swift_task_switch(sub_10002351C, 0, 0);
}

uint64_t sub_10002351C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverBackedValue;
  *(void *)(v0 + 200) = OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverBackedValue;
  int v3 = *(unsigned __int8 *)(v1 + v2);
  if (v3 != 2)
  {
    id v22 = (id)(v3 & 1);
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(id))(v0 + 8);
    return v28(v22);
  }
  if (os_variant_has_internal_ui())
  {
    uint64_t v4 = *(void **)(*(void *)(v0 + 152) + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_preferences);
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 192);
      uint64_t v6 = *(void *)(v0 + 160);
      uint64_t v7 = *(void *)(v0 + 168);
      id v8 = v4;
      uint64_t v9 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
      os_log_type_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v45(v5, v9, v6);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Checking override flag", v12, 2u);
        swift_slowDealloc();
      }
      uint64_t v13 = *(void *)(v0 + 192);
      uint64_t v14 = *(void *)(v0 + 160);
      uint64_t v15 = *(void *)(v0 + 168);

      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v16(v13, v14);
      NSString v17 = String._bridgeToObjectiveC()();
      id v18 = [v8 objectForKey:v17];

      if (v18)
      {
        int v44 = v16;
        uint64_t v19 = *(void *)(v0 + 184);
        uint64_t v20 = *(void *)(v0 + 160);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10001364C(v0 + 120);
        NSString v21 = String._bridgeToObjectiveC()();
        id v22 = [v8 BOOLForKey:v21];

        v45(v19, v9, v20);
        Swift::String v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          Swift::String v25 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)Swift::String v25 = 67109120;
          *(_DWORD *)(v0 + 208) = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found intelligence override flag: %{BOOL}d", v25, 8u);
          swift_slowDealloc();
        }
        uint64_t v26 = *(void *)(v0 + 184);
        uint64_t v27 = *(void *)(v0 + 160);

        v44(v26, v27);
        goto LABEL_11;
      }
      *(_OWORD *)(v0 + 120) = 0u;
      *(_OWORD *)(v0 + 136) = 0u;

      sub_10001364C(v0 + 120);
    }
  }
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v32 = *(void *)(v0 + 160);
  uint64_t v33 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Checking intelligence bag", v36, 2u);
    swift_slowDealloc();
  }
  uint64_t v38 = *(void *)(v0 + 168);
  uint64_t v37 = *(void *)(v0 + 176);
  uint64_t v40 = *(void *)(v0 + 152);
  uint64_t v39 = *(void *)(v0 + 160);
  char v41 = *(unsigned char *)(v0 + 213);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  uint64_t v42 = *(void **)(v40 + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverControlProvider);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 212;
  *(void *)(v0 + 24) = sub_100023A00;
  uint64_t v43 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100013E88;
  *(void *)(v0 + 104) = &unk_1002AFF28;
  *(void *)(v0 + 112) = v43;
  [v42 isFeatureEnabledFromCache:(v41 & 1) == 0 completionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100023A00()
{
  return _swift_task_switch(sub_100023AE0, 0, 0);
}

uint64_t sub_100023AE0()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 212);
  if (*(unsigned char *)(v0 + 213) == 1) {
    *(unsigned char *)(*(void *)(v0 + 152) + *(void *)(v0 + 200)) = v1;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

id IntelligenceAvailabilityProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void IntelligenceAvailabilityProvider.init()()
{
}

id IntelligenceAvailabilityProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceAvailabilityProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for IntelligenceAvailabilityProvider()
{
  return self;
}

uint64_t sub_100023CC8()
{
  objc_super v2 = *(const void **)(v0 + 16);
  int v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100023D74;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031D9D0 + dword_10031D9D0);
  return v5(v2, v3);
}

uint64_t sub_100023D74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100023E74()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100023EB4()
{
  objc_super v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100024134;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031D9E0 + dword_10031D9E0);
  return v5(v2, v3);
}

uint64_t sub_100023F64()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100024138;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_100024028()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100024068(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002413C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

NSString sub_100024140()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10031DA00 = (uint64_t)result;
  return result;
}

uint64_t sub_100024180()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContentSizeCategory()
{
  return self;
}

UIContentSizeCategory sub_1000241B4()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  if (qword_10031CB28 != -1) {
    swift_once();
  }
  CFPropertyListRef v1 = CFPreferencesCopyAppValue(v0, (CFStringRef)qword_10031DA00);

  if (v1)
  {
    type metadata accessor for UIContentSizeCategory(0);
    if (swift_dynamicCast()) {
      return (UIContentSizeCategory)v3;
    }
  }

  return UIContentSizeCategoryLarge;
}

void sub_1000242A4()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (qword_10031CB28 != -1) {
    swift_once();
  }
  CFPreferencesSetAppValue(v0, v1, (CFStringRef)qword_10031DA00);

  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v3 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(v2, v3, 0, 0, 1u);
}

void sub_1000243C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(unsigned __int8 *)(v2
                          + OBJC_IVAR____TtC5Setup51StolenDeviceProtectionExpressSettingDeferredHandler_includesStrictMode);
  uint64_t v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109120;
    LODWORD(aBlock[0]) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Enabling Stolen Device Protection; with strict mode: %{BOOL}d",
      v13,
      8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v14 = [self sharedInstance];
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = v9;
  *(void *)(v15 + 24) = a1;
  *(void *)(v15 + 32) = a2;
  aBlock[4] = sub_100025180;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002AC70;
  aBlock[3] = &unk_1002AFF68;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 enableFeatureActivatingGracePeriodWithReply:v16];
  _Block_release(v16);
}

void sub_10002463C(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v51 - v19;
  if (a2)
  {
    id v56 = v18;
    swift_errorRetain();
    uint64_t v21 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    id v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    uint64_t v58 = v9;
    id v54 = v22;
    v22((uint64_t)v20, v21, v9);
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    int v57 = a3;
    uint64_t v55 = v21;
    if (v25)
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v53 = a5;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v51 = v10;
      uint64_t v29 = (void *)v28;
      unint64_t v52 = a4;
      *(_DWORD *)uint64_t v27 = 138412290;
      swift_errorRetain();
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v30;
      a4 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v30;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to enable Stolen Device Protection: %@", v27, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      uint64_t v10 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v40 = v58;

    char v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v20, v40);
    if (v57)
    {
      uint64_t v42 = v56;
      v54((uint64_t)v56, v55, v40);
      uint64_t v43 = v42;
      int v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Strict Mode skipped since SDP restore failed", v46, 2u);
        uint64_t v40 = v58;
        swift_slowDealloc();
      }

      v41(v43, v40);
    }
    double v47 = (void *)_convertErrorToNSError(_:)();
    a4();

    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v33 = v10;
    if (a3)
    {
      v32(v16, v31, v9);
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Enabling Strict mode", v36, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v9);
      id v37 = [self sharedInstance];
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = a4;
      *(void *)(v38 + 24) = a5;
      aBlock[4] = sub_1000251DC;
      aBlock[5] = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100024FC8;
      aBlock[3] = &unk_1002AFFB8;
      uint64_t v39 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v37 enableFeatureStrictModeWithCompletion:v39];
      _Block_release(v39);
    }
    else
    {
      v32(v13, v31, v9);
      double v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        double v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Stolen Device Protection enabled", v50, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v9);
      ((void (*)(void))a4)(0);
    }
  }
}

void sub_100024C2C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v13 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v13, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_t v29 = v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v30 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain();
      uint64_t v18 = v6;
      uint64_t v19 = a2;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v32 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v20;
      a2 = v19;
      uint64_t v6 = v18;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v21 = v29;
      _os_log_impl((void *)&_mh_execute_header, v29, v15, "Failed to enable Stolen Device Protection Strict Mode: %@", v17, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v32 = a1;
    swift_errorRetain();
    sub_10000A84C(&qword_10031D3C0);
    sub_1000251E4();
    if (swift_dynamicCast()) {
      uint64_t v26 = v31;
    }
    else {
      uint64_t v26 = 0;
    }
  }
  else
  {
    uint64_t v22 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v22, v6);
    Swift::String v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      BOOL v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Strict mode enabled", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v26 = 0;
  }
  a2(v26);
}

void sub_100024FC8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

id sub_1000250F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StolenDeviceProtectionExpressSettingDeferredHandler();
  return [super dealloc];
}

uint64_t type metadata accessor for StolenDeviceProtectionExpressSettingDeferredHandler()
{
  return self;
}

uint64_t sub_100025148()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100025180(uint64_t a1, uint64_t a2)
{
  sub_10002463C(a1, a2, *(unsigned __int8 *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10002518C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002519C()
{
  return swift_release();
}

uint64_t sub_1000251A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000251DC(uint64_t a1)
{
  sub_100024C2C(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000251E4()
{
  unint64_t result = qword_10031DC90;
  if (!qword_10031DC90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031DC90);
  }
  return result;
}

uint64_t sub_100025224()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002525C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100025278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100028560(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_1000253F8()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_buddyPreferencesExcludedFromBackup] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_flowItemDispositionProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_lockdownModeProvider] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_setupMethod] = 0;
  uint64_t v2 = self;
  id v3 = [v2 mainBundle];
  v18._object = (void *)0xE000000000000000;
  v4._object = (void *)0x8000000100238DF0;
  v4._countAndFlagsBits = 0xD000000000000015;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v18);

  uint64_t v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 modelSpecificLocalizedStringKeyForKey:v7];

  if (v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    id v12 = [v2 mainBundle];
    v19._object = (void *)0xE000000000000000;
    v13._countAndFlagsBits = v9;
    v13._object = v11;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v19);
    swift_bridgeObjectRelease();

    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17.receiver = v0;
    v17.super_class = (Class)type metadata accessor for BuddyReadyForChildController();
    [super initWithTitle:v15 detailText:v16 symbolName:0 contentLayout:2];
  }
  else
  {
    __break(1u);
  }
}

void sub_100025658()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for Logger();
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (objc_class *)type metadata accessor for BuddyReadyForChildController();
  v56.receiver = v0;
  v56.super_class = v6;
  [super viewDidLoad];
  NSString v7 = &v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name];
  uint64_t v8 = *(void *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name + 8];
  if (!v8)
  {
LABEL_4:
    id v30 = sub_100025D88();
    if (v30)
    {
      uint64_t v31 = v30;
      id v32 = [v1 headerView];
      id v33 = [v32 customIconContainerView];

      if (v33)
      {
        [v33 addSubview:v31];
        id v54 = self;
        sub_10000A84C(&qword_10031D8D0);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_100236910;
        id v35 = [v31 centerXAnchor];
        id v36 = [v33 centerXAnchor];
        id v37 = [v35 constraintEqualToAnchor:v36];

        *(void *)(v34 + 32) = v37;
        id v38 = [v31 centerYAnchor];
        id v39 = [v33 centerYAnchor];
        id v40 = [v38 constraintEqualToAnchor:v39];

        *(void *)(v34 + 40) = v40;
        uint64_t v55 = v34;
        specialized Array._endMutation()();
        sub_10002865C(0, (unint64_t *)&qword_10031DB50);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v54 activateConstraints:isa];

LABEL_11:
        id v46 = [self mainBundle];
        v59._object = (void *)0xE000000000000000;
        v47._countAndFlagsBits = 0x45554E49544E4F43;
        v47._object = (void *)0xE800000000000000;
        v48._countAndFlagsBits = 0;
        v48._object = (void *)0xE000000000000000;
        v59._countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)v46, v48, v59);

        NSString v49 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v1 addBoldButton:v49 action:"continueTapped"];

        return;
      }
    }
    uint64_t v42 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, void *))(v3 + 16))(v5, v42, v2);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to get a header view for BuddyReadyForChildController", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, void *))(v3 + 8))(v5, v2);
    goto LABEL_11;
  }
  unint64_t v52 = v5;
  uint64_t v53 = v3;
  id v54 = v2;
  uint64_t v9 = *(void *)v7;
  swift_bridgeObjectRetain();
  id v10 = [v1 headerView];
  id v50 = self;
  id v11 = [v50 mainBundle];
  v57._object = (void *)0xE000000000000000;
  v12._object = (void *)0x8000000100238DA0;
  v12._countAndFlagsBits = 0xD00000000000001FLL;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v57._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v57);

  sub_10000A84C(&qword_10031D350);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100236520;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000FF9C();
  *(void *)(v14 + 64) = v15;
  uint64_t v51 = v9;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = v8;
  swift_bridgeObjectRetain();
  String.init(format:_:)();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setTitle:v16];

  id v17 = [v1 headerView];
  Swift::String v18 = self;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 modelSpecificLocalizedStringKeyForKey:v19];

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v23 = v22;

    id v24 = [v50 mainBundle];
    v58._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = v21;
    v25._object = v23;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v58);
    swift_bridgeObjectRelease();

    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1002366C0;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = v15;
    uint64_t v28 = v51;
    *(void *)(v27 + 32) = v51;
    *(void *)(v27 + 40) = v8;
    *(void *)(v27 + 96) = &type metadata for String;
    *(void *)(v27 + 104) = v15;
    *(void *)(v27 + 72) = v28;
    *(void *)(v27 + 80) = v8;
    swift_bridgeObjectRetain();
    String.init(format:_:)();
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v17 setDetailText:v29];

    uint64_t v3 = v53;
    uint64_t v2 = v54;
    Swift::String v5 = v52;
    goto LABEL_4;
  }
  __break(1u);
}

id sub_100025D88()
{
  uint64_t v1 = type metadata accessor for Logger();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v83 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  Swift::String v5 = (char *)&v74 - v4;
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount);
  if (!v6) {
    return 0;
  }
  NSString v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore);
  if (!v7) {
    return 0;
  }
  id v8 = objc_allocWithZone((Class)AAUIProfilePictureStore);
  id v9 = v7;
  id v10 = v6;
  id v11 = [v8 initWithAppleAccount:v10 store:v9];
  if (v11)
  {
    Swift::String v12 = v11;
    id v80 = v10;
    id v81 = v9;
    id v13 = [self _typeOfCurrentDevice];
    static UTType._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10002865C(0, (unint64_t *)&unk_10031DB40);
    uint64_t v14 = UTType.identifier.getter();
    id v16 = sub_1000269A8(v14, v15, 1, 1);
    uint64_t v82 = v2;
    id v78 = v12;
    v79 = v5;
    if (v16)
    {
      Swift::String v18 = v5;
      id v19 = v16;
      id v20 = [v19 name];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      id v24 = [self currentDevice];
      id v25 = [v24 type];

      if (v25 == (id)1)
      {
        uint64_t v84 = v21;
        uint64_t v85 = v23;
        v26._countAndFlagsBits = 0x616373646E616C2ELL;
        v26._object = (void *)0xEA00000000006570;
        String.append(_:)(v26);
      }
      id v27 = [self configurationWithPointSize:69.0];
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v29 = [self systemImageNamed:v28 withConfiguration:v27];

      id v30 = [objc_allocWithZone((Class)UIImageView) initWithImage:v29];
      if (v30)
      {
        id v31 = v30;
        [v31 setTranslatesAutoresizingMaskIntoConstraints:0];
      }
      Swift::String v5 = v18;
    }
    else
    {
      id v30 = 0;
      id v19 = 0;
    }
    id v32 = [v12 profilePictureForAccountOwner];
    id v33 = [objc_allocWithZone((Class)UIImageView) initWithImage:v32];

    [v33 setTranslatesAutoresizingMaskIntoConstraints:0];
    if (v30)
    {
      uint64_t v34 = self;
      id v77 = v30;
      id v35 = [v34 configurationWithPointSize:7 weight:24.0];
      NSString v36 = String._bridgeToObjectiveC()();
      id v37 = [self systemImageNamed:v36 withConfiguration:v35];

      id v38 = [objc_allocWithZone((Class)UIImageView) initWithImage:v37];
      [v38 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v39 = [self currentDevice];
      id v40 = [v39 type];

      if (v40) {
        double v41 = 1.0;
      }
      else {
        double v41 = -4.0;
      }
      id v42 = [objc_allocWithZone((Class)UIView) init];
      id v76 = v19;
      id v17 = v42;
      [v42 setTranslatesAutoresizingMaskIntoConstraints:0];
      uint64_t v43 = v33;
      [v17 addSubview:v33];
      [v17 addSubview:v38];
      id v44 = v77;
      [v17 addSubview:v77];
      id v75 = self;
      sub_10000A84C(&qword_10031D8D0);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_100236920;
      id v46 = [v33 heightAnchor];
      id v47 = [v46 constraintEqualToConstant:80.0];

      *(void *)(v45 + 32) = v47;
      id v48 = [v33 widthAnchor];
      id v49 = [v48 constraintEqualToConstant:80.0];

      *(void *)(v45 + 40) = v49;
      id v50 = [v44 leadingAnchor];
      id v51 = [v17 leadingAnchor];
      id v52 = [v50 constraintEqualToAnchor:v51];

      *(void *)(v45 + 48) = v52;
      id v53 = [v38 leadingAnchor];
      id v54 = [v44 trailingAnchor];
      id v55 = [v53 constraintEqualToAnchor:v54 constant:v41];

      *(void *)(v45 + 56) = v55;
      id v56 = [v43 leadingAnchor];
      id v57 = [v38 trailingAnchor];
      id v58 = [v56 constraintEqualToAnchor:v57 constant:10.0];

      *(void *)(v45 + 64) = v58;
      id v59 = [v43 trailingAnchor];
      id v60 = [v17 trailingAnchor];
      id v61 = [v59 constraintEqualToAnchor:v60];

      *(void *)(v45 + 72) = v61;
      id v62 = v77;
      id v63 = [v77 centerYAnchor];
      id v64 = [v17 centerYAnchor];
      id v65 = [v63 constraintEqualToAnchor:v64];

      *(void *)(v45 + 80) = v65;
      id v66 = [v38 centerYAnchor];
      id v67 = [v17 centerYAnchor];
      id v68 = [v66 constraintEqualToAnchor:v67];

      *(void *)(v45 + 88) = v68;
      id v69 = [v43 centerYAnchor];
      id v70 = [v17 centerYAnchor];
      id v71 = [v69 constraintEqualToAnchor:v70];

      *(void *)(v45 + 96) = v71;
      uint64_t v84 = v45;
      specialized Array._endMutation()();
      sub_10002865C(0, (unint64_t *)&qword_10031DB50);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v75 activateConstraints:isa];

      (*(void (**)(char *, uint64_t))(v83 + 8))(v79, v82);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v83 + 8))(v5, v2);
      return v33;
    }
  }
  else
  {

    return 0;
  }
  return v17;
}

id sub_1000269A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = 0;
  id v7 = [(id)swift_getObjCClassFromMetadata() symbolForTypeIdentifier:v6 withResolutionStrategy:a3 variantOptions:a4 error:&v11];

  if (v7)
  {
    id v8 = v11;
  }
  else
  {
    id v9 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v7;
}

void sub_100026A98()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v42 - v10;
  Swift::String v12 = *(void **)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_flowItemDispositionProvider];
  if (!v12) {
    return;
  }
  id v13 = *(void **)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_lockdownModeProvider];
  if (!v13) {
    return;
  }
  id v14 = v12;
  swift_unknownObjectRetain();
  id v15 = [v1 delegate];
  if (v15)
  {
    id v16 = v15;
    id v17 = [v1 navigationController];
    if (v17)
    {
      id v42 = v17;
      id v43 = v14;
      id v18 = [v17 viewControllers];
      sub_10002865C(0, (unint64_t *)&unk_10031DD20);
      unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100027088(v19);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v16 removeViewControllersOnNextPush:isa];

      id v21 = [objc_allocWithZone((Class)BYSetupUserDisposition) initWithChild:1];
      if (*(void *)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_buddyPreferencesExcludedFromBackup])
      {
        uint64_t v22 = v21;
        [v21 persistUsingPreferences:];
        unsigned int v23 = [v13 hasStagedEnablement];
        uint64_t v24 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
        id v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
        if (v23)
        {
          v25(v11, v24, v5);
          Swift::String v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, v27))
          {
            NSString v28 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)NSString v28 = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "LockdownMode commit and rebooting ...", v28, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
          uint64_t v29 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v4, 1, 1, v29);
          type metadata accessor for MainActor();
          swift_unknownObjectRetain();
          uint64_t v30 = static MainActor.shared.getter();
          id v31 = (void *)swift_allocObject();
          v31[2] = v30;
          v31[3] = &protocol witness table for MainActor;
          v31[4] = v13;
          sub_100025278((uint64_t)v4, (uint64_t)&unk_10031DB38, (uint64_t)v31);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          swift_release();
        }
        else
        {
          v25(v9, v24, v5);
          id v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "Locking the screen...", v34, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
          id v35 = [objc_allocWithZone((Class)SBSLockScreenService) init];
          NSString v36 = (void *)swift_allocObject();
          id v37 = v43;
          void v36[2] = v35;
          v36[3] = v37;
          v36[4] = v16;
          v36[5] = v1;
          aBlock[4] = sub_100028354;
          aBlock[5] = v36;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10003AD08;
          aBlock[3] = &unk_1002B0030;
          id v38 = _Block_copy(aBlock);
          id v39 = v37;
          id v40 = v35;
          swift_unknownObjectRetain();
          double v41 = v1;
          swift_release();
          [v40 lockDeviceAnimated:1 withCompletion:v38];
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          _Block_release(v38);
        }
      }
      else
      {
        __break(1u);
      }
      return;
    }

    swift_unknownObjectRelease();
  }
  else
  {
  }

  swift_unknownObjectRelease();
}

uint64_t sub_100027088(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  id v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100036B58(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10002865C(0, (unint64_t *)&unk_10031DD20);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100036B58(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_100036B58(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_100013708(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_10002865C(0, (unint64_t *)&unk_10031DD20);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100036B58(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_100036B58(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_100013708(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000272EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  type metadata accessor for MainActor();
  v4[16] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[17] = v6;
  v4[18] = v5;
  return _swift_task_switch(sub_100027384, v6, v5);
}

uint64_t sub_100027384()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_10002747C;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000221F0;
  v0[13] = &unk_1002B0080;
  v0[14] = v2;
  [v1 enableWithStrategy:0 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10002747C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  uint64_t v3 = *(void *)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 136);
  if (v2) {
    uint64_t v5 = sub_100027610;
  }
  else {
    uint64_t v5 = sub_1000275AC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000275AC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100027610()
{
  swift_release();
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100027684(char a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v32 = a3;
  uint64_t v33 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  id v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    id v31 = a2;
    uint64_t v18 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = a5;
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to lock screen!", v21, 2u);
      a5 = v30;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    a2 = v31;
  }
  [a2 invalidate];
  sub_10002865C(0, (unint64_t *)&qword_10031D0D0);
  uint64_t v22 = (void *)static OS_dispatch_queue.main.getter();
  unsigned int v23 = (void *)swift_allocObject();
  id v25 = v32;
  uint64_t v24 = v33;
  v23[2] = v32;
  v23[3] = v24;
  v23[4] = a5;
  aBlock[4] = sub_100028608;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100031900;
  aBlock[3] = &unk_1002B00C0;
  Swift::String v26 = _Block_copy(aBlock);
  id v27 = v25;
  swift_unknownObjectRetain();
  id v28 = a5;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v34);
}

uint64_t sub_100027C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  uint64_t v21 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002865C(0, (unint64_t *)&qword_10031D0D0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInitiated(_:), v9);
  id v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  v14[2] = v22;
  v14[3] = v15;
  v14[4] = v23;
  aBlock[4] = sub_100028718;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002B0138;
  id v17 = _Block_copy(aBlock);
  id v18 = v16;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v25 = _swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  return swift_release();
}

void sub_100027FB8(uint64_t a1, void (*a2)(uint64_t))
{
  id v4 = [objc_allocWithZone((Class)ACAccountStore) init];
  uint64_t v5 = OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore;
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore);
  *(void *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore) = v4;

  uint64_t v7 = *(void **)(a1 + v5);
  if (v7)
  {
    id v20 = v7;
    id v8 = [v20 aa_primaryAppleAccount];
    uint64_t v9 = OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount);
    *(void *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount) = v8;

    uint64_t v11 = *(void **)(a1 + v9);
    if (v11)
    {
      id v19 = v11;
      id v12 = [v19 aa_firstName];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v16 = 0;
      }
      id v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name);
      uint64_t *v18 = v14;
      v18[1] = v16;
      swift_bridgeObjectRelease();
      a2(1);

      id v17 = v19;
    }
    else
    {
      a2(1);
      id v17 = v20;
    }
  }
  else
  {
    a2(1);
  }
}

id sub_10002820C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyReadyForChildController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyReadyForChildController()
{
  return self;
}

uint64_t sub_100028304()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100028354(char a1)
{
  return sub_100027684(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100028360(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100028370()
{
  return swift_release();
}

uint64_t sub_100028378()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000283B8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002846C;
  return sub_1000272EC(a1, v4, v5, v6);
}

uint64_t sub_10002846C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100028560(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C(&qword_10031D770);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000285C0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_100028608()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[4];
  [v1 setPreferredDispositions:16];

  return [v2 flowItemDone:v3];
}

uint64_t sub_10002865C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100028698()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000286D0(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000286D8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100028718()
{
  sub_100027FB8(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_100028734(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10002A0E0(0, &qword_10031DBA8);
    sub_10002A078();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_10002A0E0(0, &qword_10031DBA8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v17;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_33:
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10002A730();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

void *sub_100028A50()
{
  uint64_t v1 = *(void *)(*(void *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  long long v18 = xmmword_100236970;
  do
  {
    [v0 maximumValue:v18];
    float v5 = v4;
    [v0 maximumValue];
    float v7 = v6;
    [v0 minimumValue];
    float v9 = v8;
    [v0 bounds];
    [v0 trackRectForBounds:];
    double Width = CGRectGetWidth(v19);
    [v0 bounds];
    [v0 trackRectForBounds:];
    double v12 = v11;
    [v0 bounds];
    [v0 trackRectForBounds:];
    double MidY = CGRectGetMidY(v20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_10002A22C(0, v3[2] + 1, 1, v3);
    }
    unint64_t v15 = v3[2];
    unint64_t v14 = v3[3];
    if (v15 >= v14 >> 1) {
      uint64_t v3 = sub_10002A22C((void *)(v14 > 1), v15 + 1, 1, v3);
    }
    v3[2] = v15 + 1;
    uint64_t v16 = (double *)&v3[4 * v15];
    v16[4] = (Width + -16.0) / (float)(v7 - v9) * (float)((float)(v5 / (float)(v1 - 1)) * (float)v2) + v12 + 8.0 + -1.0;
    v16[5] = MidY + -6.0;
    *((_OWORD *)v16 + 3) = v18;
    ++v2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_100028C9C()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for LabeledSlider();
  [super intrinsicContentSize];
  double v2 = v1;
  unint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      float v8 = v7;
      [v7 frame];
      double MaxY = CGRectGetMaxY(v11);

      if (v2 <= MaxY) {
        double v2 = MaxY;
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_100028DD0(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_labelOffset] = 0x4024000000000000;
  *(void *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_thumbSize] = 0x403B000000000000;
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v2 - 1;
  if (v2 <= 1) {
    goto LABEL_46;
  }
  float v5 = self;
  float v6 = v1;
  id v7 = [v5 sharedApplication];
  id v8 = [v7 connectedScenes];

  sub_10002A0E0(0, &qword_10031DBA8);
  sub_10002A078();
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100028734(v9);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v59) {
      goto LABEL_17;
    }
  }
  else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(v11 + 32);
LABEL_7:
    int64_t v13 = v12;
    swift_bridgeObjectRelease();
    id v14 = [v13 windows];

    sub_10002A0E0(0, &qword_10031DBB0);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15)
      {
LABEL_9:
        uint64_t v16 = 4;
        while (1)
        {
          if ((v11 & 0xC000000000000001) != 0) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(v11 + 8 * v16);
          }
          long long v18 = v17;
          uint64_t v19 = v16 - 3;
          if (__OFADD__(v16 - 4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if ([v17 isKeyWindow]) {
            break;
          }

          ++v16;
          if (v19 == v15) {
            goto LABEL_16;
          }
        }
        swift_bridgeObjectRelease_n();
        id v56 = [v18 traitCollection];

        id v57 = [v56 layoutDirection];
        if (v57 != (id)1) {
          goto LABEL_18;
        }
        uint64_t v58 = swift_bridgeObjectRetain();
        uint64_t v20 = sub_10002971C(v58);
LABEL_19:
        *(void *)&v6[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] = v20;
        uint64_t v21 = *(void *)(v20 + 16);
        unint64_t v22 = &selRef_exceptionWithName_reason_userInfo_;
        if (v21)
        {
          id v63 = v6;
          uint64_t v64 = v3;
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v23 = self;
          uint64_t v24 = v20 + 40;
          do
          {
            id v25 = objc_allocWithZone((Class)UILabel);
            swift_bridgeObjectRetain();
            id v26 = [v25 initWithFrame:0.0, 0.0, 0.0, 0.0];
            [v26 setTranslatesAutoresizingMaskIntoConstraints:0];
            id v27 = [v23 preferredFontForTextStyle:UIFontTextStyleFootnote];
            [v26 setFont:v27];

            NSString v28 = String._bridgeToObjectiveC()();
            [v26 setText:v28];
            swift_bridgeObjectRelease();

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v24 += 16;
            --v21;
          }
          while (v21);
          swift_bridgeObjectRelease();
          uint64_t v3 = v64;
          float v6 = v63;
          unint64_t v22 = &selRef_exceptionWithName_reason_userInfo_;
        }
        *(void *)&v6[OBJC_IVAR____TtC5Setup13LabeledSlider_labels] = _swiftEmptyArrayStorage;

        uint64_t v29 = (objc_class *)type metadata accessor for LabeledSlider();
        v68.receiver = v6;
        v68.super_class = v29;
        [v67.receiver setFrame:CGRectMake(0.0, 0.0, 0.0, 0.0)];
        v67.super_class = v29;
        id v30 = v67.receiver;
        [super _setTrackEnabled:1];
        [v30 setMinimumValue:0.0];
        id v31 = (char *)v30;
        swift_bridgeObjectRelease();
        *(float *)&double v32 = (float)v3;
        [v31 setMaximumValue:v32];

        unint64_t v33 = *(void *)&v31[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
        if (v33 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          if (v34)
          {
LABEL_25:
            id v66 = self;
            if (v34 >= 1)
            {
              uint64_t v35 = 0;
              NSString v36 = &v31[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
              uint64_t v65 = OBJC_IVAR____TtC5Setup13LabeledSlider_ticks;
              uint64_t v37 = v34;
              do
              {
                if ((v33 & 0xC000000000000001) != 0) {
                  id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v38 = *(id *)(v33 + 8 * v35 + 32);
                }
                id v39 = v38;
                [v31 maximumValue];
                float v41 = (float)(v40 / (float)(*(void *)(*(void *)&v31[v65] + 16) - 1)) * (float)v35;
                [v31 addSubview:v39];
                id v42 = [v39 centerXAnchor];
                id v43 = [v31 leftAnchor];
                [v31 maximumValue];
                float v45 = v44;
                [v31 minimumValue];
                float v47 = v45 - v46;
                [v31 bounds];
                [v31 trackRectForBounds:];
                CGFloat v48 = (CGRectGetWidth(v69) + -16.0) / v47 * v41;
                [v31 bounds];
                [v31 trackRectForBounds:];
                id v50 = [v42 constraintEqualToAnchor:v43 constant:v48 + v49 + 8.0];

                swift_beginAccess();
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((*(void *)v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v36 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                ++v35;
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_endAccess();
                sub_10000A84C(&qword_10031D8D0);
                uint64_t v51 = swift_allocObject();
                *(_OWORD *)(v51 + 16) = xmmword_100236980;
                id v52 = [v39 topAnchor];
                id v53 = [v31 topAnchor];
                id v54 = [v52 constraintEqualToAnchor:v53 constant:62.0];

                *(void *)(v51 + 32) = v54;
                specialized Array._endMutation()();
                sub_10002A0E0(0, (unint64_t *)&qword_10031DB50);
                Class isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                [v66 activateConstraints:isa];
              }
              while (v37 != v35);
              goto LABEL_40;
            }
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v34) {
            goto LABEL_25;
          }
        }
LABEL_40:
        swift_bridgeObjectRelease();
        id v60 = self;
        swift_beginAccess();
        sub_10002A0E0(0, (unint64_t *)&qword_10031DB50);
        swift_bridgeObjectRetain();
        Class v61 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v60 activateConstraints:v61];

        return (uint64_t)v31;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15) {
        goto LABEL_9;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v20 = a1;
    goto LABEL_19;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002971C(uint64_t result)
{
  double v1 = (void *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = v2 >> 1;
  unint64_t v6 = v2 - 1;
  uint64_t v7 = 16 * v2 + 16;
  unint64_t v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6) {
      goto LABEL_4;
    }
    unint64_t v8 = v1[2];
    if (v4 >= v8) {
      break;
    }
    if (v6 >= v8) {
      goto LABEL_13;
    }
    uint64_t v10 = v1[v3 + 4];
    uint64_t v9 = v1[v3 + 5];
    uint64_t v12 = *(void *)((char *)v1 + v7);
    uint64_t v11 = *(void *)((char *)v1 + v7 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v1 = sub_10002A44C(v1);
    }
    int64_t v13 = &v1[v3];
    uint64_t result = swift_bridgeObjectRelease();
    v13[4] = v12;
    v13[5] = v11;
    if (v6 >= v1[2]) {
      goto LABEL_14;
    }
    id v14 = (void *)((char *)v1 + v7);
    uint64_t result = swift_bridgeObjectRelease();
    *id v14 = v10;
    v14[1] = v9;
    unint64_t v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 2;
    if (v5 == v4) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

id sub_100029934()
{
  double v1 = &v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
  swift_beginAccess();
  unint64_t v2 = *(void *)v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    v17.receiver = v0;
    v17.super_class = (Class)type metadata accessor for LabeledSlider();
    return [super updateConstraints];
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = (uint64_t)result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    float v6 = (float)(*(void *)(*(void *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1);
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      unint64_t v8 = v7;
      [v0 maximumValue];
      float v10 = (float)(v9 / v6) * (float)v5;
      [v0 maximumValue];
      float v12 = v11;
      [v0 minimumValue];
      float v14 = v12 - v13;
      [v0 bounds];
      [v0 trackRectForBounds:];
      CGFloat v15 = (CGRectGetWidth(v18) + -16.0) / v14 * v10;
      [v0 bounds];
      [v0 trackRectForBounds:];
      [v8 setConstant:v15 + v16 + 8.0];

      ++v5;
    }
    while (v3 != v5);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_100029B74(double a1, double a2, double a3, double a4)
{
  v17.receiver = v4;
  v17.super_class = (Class)type metadata accessor for LabeledSlider();
  [super trackRectForBounds:a1, a2, a3, a4];
  unint64_t v9 = *(void *)&v4[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v10)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return;
    }
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    id v11 = *(id *)(v9 + 32);
  }
  float v12 = v11;
  swift_bridgeObjectRelease();
  if (!(v9 >> 62))
  {
    uint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13)
  {
LABEL_12:

    goto LABEL_13;
  }
LABEL_8:
  unint64_t v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
    double v16 = v15;
    swift_bridgeObjectRelease();
    [v12 frame];
    CGRectGetWidth(v18);
    [v16 frame];
    CGRectGetWidth(v19);

    return;
  }
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_23;
  }
  if (v14 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v9 + 8 * v14 + 32);
    goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

id sub_100029EA0(float a1)
{
  id result = [v1 maximumValue];
  float v5 = roundf(a1/ (float)(v4 / (float)(*(void *)(*(void *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1)));
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < 9.2234e18) {
    return (id)(uint64_t)v5;
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_100029FC4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LabeledSlider();
  return [super dealloc];
}

uint64_t type metadata accessor for LabeledSlider()
{
  return self;
}

unint64_t sub_10002A078()
{
  unint64_t result = qword_10031DEA0;
  if (!qword_10031DEA0)
  {
    sub_10002A0E0(255, &qword_10031DBA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031DEA0);
  }
  return result;
}

uint64_t sub_10002A0E0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

char *sub_10002A11C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A84C((uint64_t *)&unk_10031DBC0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10002A460(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002A22C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A84C(&qword_10031DBB8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A54C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002A33C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A84C((uint64_t *)&unk_10031DE90);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A638(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002A44C(void *a1)
{
  return sub_10002A33C(0, a1[2], 0, a1);
}

char *sub_10002A460(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10002A54C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002A638(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002A730()
{
  return swift_release();
}

void sub_10002A738()
{
  id v1 = [v0 _minTrackView];
  if (!v1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_super v2 = v1;
  [v1 setHidden:1];

  id v3 = [v0 _maxTrackView];
  if (!v3)
  {
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v4 = v3;
  [v3 setHidden:1];

  unint64_t v5 = self;
  id v6 = [v5 systemFillColor];
  [v6 set];

  [v0 bounds];
  [v0 trackRectForBounds:];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  [v0 bounds];
  [v0 trackRectForBounds:];
  CGFloat v15 = CGRectGetHeight(v42) * 0.5;
  double v16 = self;
  id v17 = [v16 bezierPathWithRoundedRect:v8 cornerRadius:v10 v12, v14, v15];
  [v17 fill];

  id v18 = [v5 systemGray4Color];
  [v18 set];

  CGRect v19 = sub_100028A50();
  uint64_t v20 = v19[2];
  if (v20)
  {
    uint64_t v21 = &v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
    float v22 = (float)(*(void *)(*(void *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1);
    swift_beginAccess();
    uint64_t v23 = 0;
    float v40 = v19;
    uint64_t v24 = (double *)(v19 + 7);
    while (1)
    {
      double v25 = *(v24 - 3);
      double v26 = *(v24 - 2);
      double v27 = *(v24 - 1);
      double v28 = *v24;
      uint64_t v29 = *(void *)v21;
      if ((*(void *)v21 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((unint64_t)v23 >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_15;
        }
        id v30 = *(id *)(v29 + 8 * v23 + 32);
      }
      [v0 maximumValue:v40];
      float v32 = (float)(v31 / v22) * (float)v23;
      [v0 maximumValue];
      float v34 = v33;
      [v0 minimumValue];
      float v36 = v34 - v35;
      [v0 bounds];
      [v0 trackRectForBounds:];
      CGFloat v37 = (CGRectGetWidth(v43) + -16.0) / v36 * v32;
      [v0 bounds];
      [v0 trackRectForBounds:];
      [v30 setConstant:v37 + v38 + 8.0];

      v44.origin.x = v25;
      v44.origin.y = v26;
      v44.size.width = v27;
      v44.size.height = v28;
      id v39 = [v16 bezierPathWithRoundedRect:v25 cornerRadius:v26 v27, v28, CGRectGetWidth(v44) * 0.5];
      [v39 fill];

      v24 += 4;
      if (v20 == ++v23) {
        goto LABEL_9;
      }
    }
  }

LABEL_9:
  swift_bridgeObjectRelease();
}

uint64_t sub_10002AB24()
{
  [v0 setNeedsDisplay];
  unint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t result = self;
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = (void *)result;
  uint64_t v5 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v1 + 8 * v5 + 32);
    }
    double v7 = v6;
    ++v5;
    id v8 = [v4 preferredFontForTextStyle:UIFontTextStyleFootnote];
    [v7 setFont:v8];
  }
  while (v2 != v5);
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002AC70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_10002AD1C()
{
  uint64_t result = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities);
  if (result)
  {
    unsigned int v2 = [result supportsPearl];
    id v3 = [self mainBundle];
    if (v2)
    {
      unint64_t v10 = 0xE000000000000000;
      unint64_t v4 = 0x80000001002393A0;
      unint64_t v5 = 0xD00000000000002BLL;
    }
    else
    {
      unint64_t v5 = 0xD00000000000002CLL;
      unint64_t v10 = 0xE000000000000000;
      unint64_t v4 = 0x8000000100239370;
    }
    v6.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
    v6.value._object = (void *)0xE900000000000079;
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    uint64_t v8 = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, v6, (NSBundle)v3, v7, *(Swift::String *)(&v10 - 1))._countAndFlagsBits;

    return (void *)countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10002AE1C()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController____lazy_storage___findMyManager;
  unsigned int v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController____lazy_storage___findMyManager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController____lazy_storage___findMyManager);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)BYFindMyManager) init];
    unint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    unsigned int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_10002AE90()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_notificationCenter;
  unsigned int v2 = self;
  id v3 = v0;
  *(void *)&v0[v1] = [v2 defaultCenter];
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem] = 0;
  id v4 = (Swift::String *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason];
  unint64_t v5 = self;
  id v6 = [v5 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
  v30._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000100239500;
  v8.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v8.value._object = (void *)0xE900000000000079;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v30._uint64_t countAndFlagsBits = 0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v30);

  *id v4 = v10;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController____lazy_storage___findMyManager] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_managedConfiguration] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_featureFlags] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferencesExcludedFromBackup] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_miscState] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_setupMethod] = 0;

  id v11 = [v5 mainBundle];
  v12._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v31._object = (void *)0xE000000000000000;
  v12._object = (void *)0x8000000100239540;
  v13.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v13.value._object = (void *)0xE900000000000079;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v31._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v31);

  CGFloat v15 = self;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 modelSpecificLocalizedStringKeyForKey:v16];

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = [v5 mainBundle];
    v32._object = (void *)0xE000000000000000;
    v22._uint64_t countAndFlagsBits = v18;
    v22._object = v20;
    v23.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
    v23.value._object = (void *)0xE900000000000079;
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v32._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v32);
    swift_bridgeObjectRelease();

    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [self imageNamed:v25];

    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v29.receiver = v3;
    v29.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
    [super initWithTitle:v27 detailText:v28 icon:v26 contentLayout:2];
  }
  else
  {
    __break(1u);
  }
}

void sub_10002B250()
{
  sub_10002AD1C();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = *(void **)&v0[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities];
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  [v3 supportsPearl];
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBulletedListItemWithTitle:v1 description:v2 symbolName:v4];

  unint64_t v5 = self;
  id v6 = [v5 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD000000000000029;
  v37._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000100239420;
  v8.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v8.value._object = (void *)0xE900000000000079;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v37._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v37);

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  [v0 addBulletedListItemWithTitle:v10 description:v11 symbolName:v12];

  Swift::String_optional v13 = self;
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 modelSpecificLocalizedStringKeyForKey:v14];

  if (!v15)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = [v5 mainBundle];
  v38._object = (void *)0xE000000000000000;
  v20._uint64_t countAndFlagsBits = v16;
  v20._object = v18;
  v21.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v21.value._object = (void *)0xE900000000000079;
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v38._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v38);
  swift_bridgeObjectRelease();

  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v24 = String._bridgeToObjectiveC()();
  NSString v25 = String._bridgeToObjectiveC()();
  [v0 addBulletedListItemWithTitle:v23 description:v24 symbolName:v25];

  id v26 = [v5 mainBundle];
  v39._object = (void *)0xE000000000000000;
  v27._object = (void *)0x80000001002394A0;
  v27._uint64_t countAndFlagsBits = 0xD000000000000027;
  v28.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v28.value._object = (void *)0xE900000000000079;
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v39._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v39);

  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBoldButton:v30 action:"turnOnTapped"];

  id v31 = [v5 mainBundle];
  v40._object = (void *)0xE000000000000000;
  v32._object = (void *)0x80000001002394D0;
  v32._uint64_t countAndFlagsBits = 0xD000000000000027;
  v33.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v33.value._object = (void *)0xE900000000000079;
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v40._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v40);

  id v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addLinkButton:v35 action:"notNowTapped"];
}

id sub_10002B718(char a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
  [super viewDidAppear:a1 & 1];
  id result = *(id *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager];
  if (result)
  {
    id result = [result clearActionForFeature:17];
    NSString v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferencesExcludedFromBackup];
    if (v4)
    {
      id v5 = v4;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v7 = String._bridgeToObjectiveC()();
      [v5 setObject:isa forKey:v7];

      return [*(id *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_notificationCenter] addObserver:v1 selector:"applicationDidBecomeActive" name:UIApplicationDidBecomeActiveNotification object:0];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002BB68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_10002BC70()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_featureFlags);
  if (!v6)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (![v6 isStolenDeviceProtectionEnabled]) {
    return 0;
  }
  uint64_t v7 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState;
  objc_super v8 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState);
  if (!v8) {
    goto LABEL_32;
  }
  if ([v8 hasCompletedInitialRun])
  {
    Swift::String v9 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_miscState);
    if (!v9)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (![v9 launchedToShowStolenDeviceProtection]) {
      return 0;
    }
  }
  NSString v10 = *(void **)(v0 + v7);
  if (!v10)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (([v10 hasCompletedInitialRun] & 1) == 0)
  {
    NSString v11 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_setupMethod);
    if (!v11)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    NSString v12 = (char *)[v11 dataTransferMethod];
    if ((unint64_t)(v12 - 1) >= 2)
    {
      NSString v1 = v12;
      if (v12 && v12 != (char *)3) {
        goto LABEL_39;
      }
      uint64_t v30 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v30, v2);
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        Swift::String_optional v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String_optional v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Skipping SDP as user is not restoring or migrating", v33, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  Swift::String_optional v13 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferencesExcludedFromBackup);
  if (!v13)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  id v14 = v13;
  NSString v15 = String._bridgeToObjectiveC()();
  unsigned __int8 v16 = [v14 BOOLForKey:v15];

  if (v16) {
    return 0;
  }
  id v17 = self;
  id v18 = [v17 sharedInstance];
  unsigned __int8 v19 = [v18 isFeatureEnabled];

  if (v19) {
    return 0;
  }
  id v20 = [v17 sharedInstance];
  unsigned int v21 = [v20 isFeatureAvailable];

  if (!v21) {
    return 0;
  }
  Swift::String v22 = self;
  id v23 = [v22 sharedInstance];
  id v24 = [v23 primaryAuthKitAccount];

  if (!v24) {
    return 0;
  }
  id v25 = [v22 sharedInstance];
  NSString v1 = (char *)[v25 securityLevelForAccount:v24];

  if (v1 != (char *)4) {
    goto LABEL_29;
  }
  id v26 = [self sharedInterface];
  if (v26)
  {
    Swift::String v27 = v26;
    NSString v1 = (char *)[v26 isManateeAvailable];

    if (v1)
    {
      Swift::String_optional v28 = *(void **)(v0 + v7);
      if (v28)
      {
        if ([v28 hasCompletedInitialRun])
        {
          id v29 = [self locationServicesEnabled];
        }
        else
        {

          return 1;
        }
        return (uint64_t)v29;
      }
      goto LABEL_38;
    }
LABEL_29:

    return 0;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  type metadata accessor for BuddyDataTransferMethod(0);
  v35[1] = v1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_10002C0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  v6[5] = type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v7 = (void *)swift_task_alloc();
  v6[7] = v7;
  void *v7 = v6;
  v7[1] = sub_10002C17C;
  return sub_10003008C();
}

uint64_t sub_10002C17C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10002C2C0, v3, v2);
}

uint64_t sub_10002C2C0()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  swift_release();
  if (v1 == 1)
  {
    id v2 = sub_10002AE1C();
    id v3 = [v2 isFindMyEnabled];
  }
  else
  {
    id v3 = 0;
  }
  (*(void (**)(id))(v0 + 24))(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_10002C3D8()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Stolen device protection pane - Turn on tapped", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [self sharedInstance];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  aBlock[4] = sub_10002FC18;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002AC70;
  aBlock[3] = &unk_1002B0368;
  NSString v12 = _Block_copy(aBlock);
  id v13 = v1;
  swift_release();
  [v10 checkCanEnableFeatureWithCompletion:v12];
  _Block_release(v12);
}

void sub_10002C608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v30 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v30 - v12;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v14, v4);
    swift_errorRetain();
    swift_errorRetain();
    NSString v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      id v18 = (void *)swift_slowAlloc();
      uint64_t v31 = v5;
      *(_DWORD *)id v17 = 138412290;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      v33[0] = v19;
      uint64_t v5 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to checkCanEnableFeature (Stolen Device Protection) with error: %@", v17, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
  else if (a1)
  {
    uint64_t v32 = 2;
    type metadata accessor for LARatchetManagerEnableFeatureResultKey(0);
    sub_10002FC20(&qword_10031DCA0, type metadata accessor for LARatchetManagerEnableFeatureResultKey);
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v20 = sub_100043D24((uint64_t)v33), (v21 & 1) != 0))
    {
      sub_10000BB14(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v34);
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }
    sub_10002FB04((uint64_t)v33);
    if (*((void *)&v35 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0 && v32 == 1)
      {
        sub_10002E5D8();
        return;
      }
    }
    else
    {
      sub_10001364C((uint64_t)&v34);
    }
    uint64_t v26 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v26, v4);
    Swift::String v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Liveness check failed; prompt for biometrics authenticate",
        v29,
        2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10002CFD4();
  }
  else
  {
    uint64_t v22 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v22, v4);
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No results, and no error during checkCanEnableFeature (StolenDeviceProtection)", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
}

void sub_10002CB2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Stolen device protection pane - not now tapped", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState);
  if (!v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ([v10 hasCompletedInitialRun])
  {
LABEL_9:
    sub_10002CD44(0);
    return;
  }
  uint64_t v11 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache);
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (![v12 hasExpressSetting:13]) {
    goto LABEL_9;
  }
  id v13 = *(void **)(v1 + v11);
  if (v13)
  {
    [v13 removeApplyHandlerFor:13];
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void sub_10002CD44(char a1)
{
  id v3 = [v1 view];
  if (!v3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v4 = v3;
  id v5 = [v3 window];

  if (v5)
  {
    [v5 setUserInteractionEnabled:1];
  }
  uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferencesExcludedFromBackup];
  if (!v6) {
    goto LABEL_18;
  }
  id v7 = v6;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setObject:isa forKey:v9];

  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager];
  if (!v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v11 = objc_allocWithZone((Class)NSNumber);
  id v12 = v10;
  id v13 = [v11 initWithInteger:a1 & 1];
  [v12 recordActionWithValue:v13 forFeature:17];

  if (a1)
  {
    uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState];
    if (!v14)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if ([v14 hasCompletedInitialRun]) {
      goto LABEL_11;
    }
    NSString v15 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache];
    if (!v15)
    {
LABEL_23:
      __break(1u);
      return;
    }
    if (([v15 hasExpressSetting:13] & 1) == 0)
    {
LABEL_11:
      id v16 = [v1 delegate];
      if (!v16)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      id v17 = v16;
      sub_10000A84C((uint64_t *)&unk_10031DEB0);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_100236520;
      *(void *)(v18 + 56) = type metadata accessor for BuddyStolenDeviceProtectionController();
      *(void *)(v18 + 32) = v1;
      uint64_t v19 = v1;
      Class v20 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v17 removeViewControllersOnNextPush:v20];
      swift_unknownObjectRelease();
    }
  }
  id v21 = [v1 delegate];
  if (!v21)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  [v21 flowItemDone:v1];

  swift_unknownObjectRelease();
}

void sub_10002CFD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v31[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 view];
  if (!v6)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  id v7 = v6;
  id v8 = [v6 window];

  if (v8)
  {
    [v8 setUserInteractionEnabled:0];
  }
  uint64_t v9 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Start biometrics authentication", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v13 = [objc_allocWithZone((Class)LAContext) init];
  sub_10002FB60(0, &qword_10031D0C8);
  Class isa = NSNumber.init(integerLiteral:)(4).super.super.isa;
  [v13 setTouchIDAuthenticationRetryLimit:isa];

  sub_10000A84C((uint64_t *)&unk_10031DC80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002366C0;
  v31[0] = 2;
  AnyHashable.init<A>(_:)();
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason];
  uint64_t v16 = *(void *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason + 8];
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 80) = v16;
  v31[0] = 1024;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  unint64_t v18 = sub_1000379A0(inited);
  uint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities];
  if (!v19) {
    goto LABEL_12;
  }
  if ([v19 supportsPearl])
  {
    v33._uint64_t countAndFlagsBits = 1;
    AnyHashable.init<A>(_:)();
    id v20 = [self mainBundle];
    v35._object = (void *)0xE000000000000000;
    v21._object = (void *)0x80000001002392F0;
    v21._uint64_t countAndFlagsBits = 0xD000000000000032;
    v22.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
    v22.value._object = (void *)0xE900000000000079;
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v35._uint64_t countAndFlagsBits = 0;
    Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v35);

    long long v34 = &type metadata for String;
    Swift::String v33 = v24;
  }
  else
  {
    v33._uint64_t countAndFlagsBits = 1011;
    AnyHashable.init<A>(_:)();
    long long v34 = &type metadata for Bool;
    LOBYTE(v33._countAndFlagsBits) = 0;
  }
  sub_100013708(&v33, v32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31[6] = v18;
  sub_10002F9B8(v32, (uint64_t)v31, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_10002FB04((uint64_t)v31);
  Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v1;
  v31[4] = sub_10002FB58;
  v31[5] = v27;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 1107296256;
  v31[2] = sub_10002AC70;
  v31[3] = &unk_1002B0318;
  os_log_type_t v28 = _Block_copy(v31);
  id v29 = v1;
  swift_release();
  [v13 evaluatePolicy:1 options:v26 reply:v28];

  _Block_release(v28);
}

void sub_10002D4D4(uint64_t a1, NSObject *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v34 - v11;
  if (a2)
  {
    Swift::String v39 = a2;
    swift_errorRetain();
    sub_10000A84C(&qword_10031D3C0);
    sub_10002FB60(0, (unint64_t *)&qword_10031DC90);
    if (swift_dynamicCast())
    {
      id v13 = v38;
      uint64_t v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v14, v6);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      uint64_t v16 = v13;
      uint64_t v17 = Logger.logObject.getter();
      if (os_log_type_enabled(v17, v15))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        Swift::String v35 = (void *)swift_slowAlloc();
        float v36 = v18;
        Swift::String v37 = a3;
        *(_DWORD *)unint64_t v18 = 138412290;
        Swift::String v39 = v16;
        uint64_t v19 = v16;
        a3 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::String v35 = v16;

        _os_log_impl((void *)&_mh_execute_header, v17, v15, "Failed to authenticate with error: %@", v36, 0xCu);
        sub_10000A84C(&qword_10031D0B0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v17 = v16;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      id v25 = [v16 domain];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      if (v26 == 0xD00000000000001DLL && v28 == 0x8000000100239330)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          id v31 = [a3 view];
          if (!v31)
          {
            __break(1u);
            return;
          }
          uint64_t v32 = v31;
          id v33 = [v31 window];

          if (v33)
          {
            [v33 setUserInteractionEnabled:1];

            return;
          }
          goto LABEL_23;
        }
      }
      id v30 = [v16 code];
      if ((unint64_t)v30 + 8 <= 7 && ((1 << (v30 + 8)) & 0xA1) != 0) {
        sub_10002CFD4();
      }
      else {
        sub_10002D970(0);
      }
LABEL_23:

      return;
    }
  }
  if (a1)
  {
    int v20 = 1;
  }
  else
  {
    uint64_t v21 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v21, v6);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    Swift::String v23 = Logger.logObject.getter();
    if (os_log_type_enabled(v23, v22))
    {
      Swift::String v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "No authentication results", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    int v20 = 0;
  }
  sub_10002D970(v20);
}

uint64_t sub_10002D970(int a1)
{
  LODWORD(v56) = a1;
  uint64_t v1 = type metadata accessor for DispatchQoS();
  uint64_t v54 = *(void *)(v1 - 8);
  uint64_t v55 = v1;
  __chkstk_darwin(v1);
  id v53 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  float v46 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v50 = (char *)v45 - v6;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin(v7);
  float v47 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)v45 - v14;
  uint64_t v16 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, v16, v9);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    int v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v20 = 67109120;
    LODWORD(aBlock) = v56 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Authentication completed - did Authenticate: %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v15, v9);
  uint64_t v22 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem;
  uint64_t v23 = v57;
  if (*(void *)(v57 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem))
  {
    v17(v13, v16, v9);
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ignoring user authentication completed more while another request is being processed.", v26, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v21)(v13, v9);
  }
  else
  {
    uint64_t v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    *(unsigned char *)(v29 + 24) = v56 & 1;
    id v63 = sub_10002F99C;
    uint64_t v64 = v29;
    aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    id v56 = &v61;
    Class v61 = sub_100031900;
    id v62 = &unk_1002B0278;
    _Block_copy(&aBlock);
    uint64_t v58 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_10002FC20((unint64_t *)&qword_10031D5C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    swift_retain();
    v45[3] = sub_10000A84C((uint64_t *)&unk_10031D0A0);
    unint64_t v31 = sub_10000B9DC();
    uint64_t v32 = v47;
    v45[2] = v31;
    uint64_t v33 = v49;
    uint64_t v34 = v23;
    v45[1] = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v35 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)(v34 + v22) = v35;
    swift_release();
    uint64_t v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v63 = sub_10002F9A8;
    uint64_t v64 = v36;
    aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    Class v61 = sub_100031900;
    id v62 = &unk_1002B02A0;
    _Block_copy(&aBlock);
    uint64_t v58 = _swiftEmptyArrayStorage;
    swift_retain();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    swift_allocObject();
    uint64_t v37 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)(v34
              + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem) = v37;
    swift_release();
    sub_10002FB60(0, (unint64_t *)&qword_10031D0D0);
    Swift::String v38 = (void *)static OS_dispatch_queue.main.getter();
    Swift::String v39 = v46;
    static DispatchTime.now()();
    Swift::String v40 = v50;
    + infix(_:_:)();
    uint64_t v41 = v52;
    uint64_t v51 = *(void *)(v51 + 8);
    ((void (*)(char *, uint64_t))v51)(v39, v52);
    uint64_t v42 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v63 = sub_10002F9B0;
    uint64_t v64 = v42;
    aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    Class v61 = sub_1000315E0;
    id v62 = &unk_1002B02C8;
    CGRect v43 = _Block_copy(&aBlock);
    swift_retain();
    CGRect v44 = v53;
    static DispatchQoS.unspecified.getter();
    uint64_t v58 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v55);
    ((void (*)(char *, uint64_t))v51)(v40, v41);
    swift_release();
    return swift_release();
  }
}

void sub_10002E1D8(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    *(void *)(Strong
              + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem) = 0;
    swift_release();
    *(void *)&v4[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem] = 0;
    swift_release();
    if (a2) {
      sub_10002E5D8();
    }
    id v5 = [v4 view];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (char *)[v5 window];

      if (v7)
      {
        [v7 setUserInteractionEnabled:1];

        uint64_t v4 = v7;
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10002E2C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v5 = (void *)Strong;
    *(void *)(Strong
              + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem) = 0;
    swift_release();
    uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v6, v0);
    uint64_t v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      id v13 = v10 + 4;
      uint64_t ObjectType = swift_getObjectType();
      sub_10000A84C((uint64_t *)&unk_10031DC70);
      uint64_t v11 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_10003FC78(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Force navigation from %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (*(void *)&v7[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.perform()();
      swift_release();
    }
  }
}

void sub_10002E55C()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (*(void *)&Strong[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.perform()();

      swift_release();
    }
    else
    {
    }
  }
}

void sub_10002E5D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Enabling stolen device protection enabled", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState;
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState];
  if (!v11)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (([v11 hasCompletedInitialRun] & 1) == 0)
  {
    uint64_t v12 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache;
    id v13 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_expressSettingsCache];
    if (!v13)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    if ([v13 hasExpressSetting:13])
    {
      uint64_t v14 = *(void **)&v1[v12];
      if (v14)
      {
        [v14 setApplyHandlerFor:13];
        sub_10002CD44(1);
        return;
      }
      goto LABEL_18;
    }
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  uint64_t v16 = *(void **)&v1[v10];
  if (!v16)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v17 = v15;
  unint64_t v18 = v1;
  unsigned int v19 = [v16 hasCompletedInitialRun];
  id v20 = [self sharedInstance];
  if (v19)
  {
    uint64_t v26 = sub_10002F8C4;
    uint64_t v27 = v17;
    aBlock = _NSConcreteStackBlock;
    uint64_t v23 = 1107296256;
    Swift::String v24 = sub_10002AC70;
    os_log_type_t v25 = &unk_1002B01B0;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v20 enableFeatureWithReply:v21];
  }
  else
  {
    uint64_t v26 = sub_10002F8C4;
    uint64_t v27 = v17;
    aBlock = _NSConcreteStackBlock;
    uint64_t v23 = 1107296256;
    Swift::String v24 = sub_10002AC70;
    os_log_type_t v25 = &unk_1002B0188;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v20 enableFeatureActivatingGracePeriodWithReply:v21];
  }
  swift_release();
  _Block_release(v21);
}

uint64_t sub_10002E938(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002FB60(0, (unint64_t *)&qword_10031D0D0);
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  aBlock[4] = sub_10002F924;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100031900;
  aBlock[3] = &unk_1002B0200;
  uint64_t v14 = _Block_copy(aBlock);
  swift_errorRetain();
  id v15 = a3;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10002FC20((unint64_t *)&qword_10031D5C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v18);
}

void sub_10002EC00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v11 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v25 = a2;
      id v15 = (uint8_t *)v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v24 = v4;
      uint64_t v17 = (void *)v16;
      *(_DWORD *)id v15 = 138412290;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v26 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to enable stolen device protection: %@", v15, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      uint64_t v4 = v24;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10002EF2C();
    swift_errorRelease();
  }
  else
  {
    uint64_t v19 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v19, v4);
    id v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v21, "Stolen device protection enabled", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    sub_10002CD44(1);
  }
}

void sub_10002EF2C()
{
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v14._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000001002392B0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000035;
  v4.value._uint64_t countAndFlagsBits = 0x654B656C706D6944;
  v4.value._object = (void *)0xE900000000000079;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v14);

  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [self alertControllerWithTitle:v6 message:0 preferredStyle:1];

  id v7 = [v1 mainBundle];
  v15._object = (void *)0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 19279;
  v8._object = (void *)0xE200000000000000;
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v15);

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [self actionWithTitle:v10 style:0 handler:0];

  [v12 addAction:v11];
  [v0 presentViewController:v12 animated:1 completion:0];
}

void sub_10002F178(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C((uint64_t *)&unk_10031DCC0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Will call routine manager", v13, 2u);
    Swift::String v5 = v19;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v14 = [self defaultManager];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v16 + v15, v5, v2);
  aBlock[4] = sub_10003066C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002F648;
  aBlock[3] = &unk_1002B0408;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [v14 fetchRoutineStateWithHandler:v17];
  _Block_release(v17);
}

uint64_t sub_10002F484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = a1 == 2 && a2 == 0;
  uint64_t v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v13 = 67109120;
    v15[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Routine manager supplied state %{BOOL}d", v13, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  BOOL v16 = v9;
  sub_10000A84C((uint64_t *)&unk_10031DCC0);
  return CheckedContinuation.resume(returning:)();
}

void sub_10002F648(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id sub_10002F724()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
  [super dealloc];
}

uint64_t type metadata accessor for BuddyStolenDeviceProtectionController()
{
  return self;
}

uint64_t sub_10002F88C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F8C4(uint64_t a1, uint64_t a2)
{
  return sub_10002E938(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10002F8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002F8DC()
{
  return swift_release();
}

uint64_t sub_10002F8E4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10002F924()
{
  sub_10002EC00(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002F92C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F964()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10002F99C()
{
  sub_10002E1D8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10002F9A8()
{
}

void sub_10002F9B0()
{
}

_OWORD *sub_10002F9B8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100043D24(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100012DC0();
      goto LABEL_7;
    }
    sub_1000128E0(v13, a3 & 1);
    unint64_t v19 = sub_100043D24(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1000136AC(a2, (uint64_t)v21);
      return sub_10002FB9C(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_100015E58((uint64_t)v17);

  return sub_100013708(a1, v17);
}

uint64_t sub_10002FB04(uint64_t a1)
{
  return a1;
}

void sub_10002FB58(uint64_t a1, NSObject *a2)
{
  sub_10002D4D4(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10002FB60(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *sub_10002FB9C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100013708(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void sub_10002FC18(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10002FC20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002FC68(char *a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a2;
  uint64_t v8 = *(void **)&a1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState];
  if (v8)
  {
    uint64_t v9 = result;
    _Block_copy(a2);
    if ([v8 hasCompletedInitialRun])
    {
      uint64_t v10 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor();
      uint64_t v11 = a1;
      swift_retain();
      uint64_t v12 = static MainActor.shared.getter();
      uint64_t v13 = (void *)swift_allocObject();
      v13[2] = v12;
      v13[3] = &protocol witness table for MainActor;
      v13[4] = v11;
      v13[5] = sub_10002FE80;
      v13[6] = v9;
      sub_100041A28((uint64_t)v6, (uint64_t)&unk_10031DCB0, (uint64_t)v13);
      swift_release();
      return swift_release();
    }
    else
    {
      a2[2](a2, 1);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002FE48()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002FE80(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

uint64_t sub_10002FE88()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002FED0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002FF98;
  return sub_10002C0D0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10002FF98()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003008C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  v0[6] = type metadata accessor for MainActor();
  v0[7] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[8] = v3;
  v0[9] = v2;
  return _swift_task_switch(sub_100030190, v3, v2);
}

uint64_t sub_100030190()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v0[10] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[11] = v5;
  v0[12] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Will await routine manager continuation", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[2];
  uint64_t v11 = v0[3];

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[13] = v12;
  v0[14] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  uint64_t v13 = static MainActor.shared.getter();
  v0[15] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[16] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10003035C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 17, v13, &protocol witness table for MainActor, 0xD00000000000001FLL, 0x8000000100239400, sub_10002F178, 0, &type metadata for Bool);
}

uint64_t sub_10003035C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_1000304A0, v3, v2);
}

uint64_t sub_1000304A0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v5 = *(unsigned __int8 *)(v0 + 136);
  v1(v3, v2, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Did finish await for routine manager continuation", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 16);

  v9(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v12(v5);
}

uint64_t sub_1000305D8()
{
  uint64_t v1 = sub_10000A84C((uint64_t *)&unk_10031DCC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003066C(uint64_t a1, uint64_t a2)
{
  sub_10000A84C((uint64_t *)&unk_10031DCC0);

  return sub_10002F484(a1, a2);
}

id sub_100030738()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController____lazy_storage___cachedViewController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController____lazy_storage___cachedViewController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController____lazy_storage___cachedViewController);
  }
  else
  {
    id v4 = sub_10003079C(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10003079C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper) viewController];
  id v3 = *(void **)(a1 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_buddyPreferences);
  if (v3)
  {
    id v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    unsigned __int8 v6 = [v4 BOOLForKey:v5];

    char v7 = v6 ^ 1;
  }
  else
  {
    char v7 = 1;
  }
  uint64_t v8 = (objc_class *)type metadata accessor for EnclosingViewController();
  uint64_t v9 = objc_allocWithZone(v8);
  swift_unknownObjectWeakInit();
  *(void *)&v9[OBJC_IVAR____TtC5Setup23EnclosingViewController_enclosedViewController] = v2;
  swift_unknownObjectWeakAssign();
  v9[OBJC_IVAR____TtC5Setup23EnclosingViewController_overrideBackButton] = v7;
  v11.receiver = v9;
  v11.super_class = v8;
  return [super initWithNibName:0 bundle:0];
}

id sub_1000308C4()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper;
  id v2 = objc_allocWithZone((Class)BuddyButtonConfigurationWrapper);
  id v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  *(void *)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController____lazy_storage___cachedViewController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_buddyPreferences] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_settingsManager] = 0;
  *(void *)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_delegate] = 0;

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for BuddyButtonConfigurationController();
  return [super init];
}

void sub_100030AF4(uint64_t a1, uint64_t a2)
{
  objc_super v5 = *(void **)(v2 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v7 = (void *)swift_allocObject();
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  v10[4] = sub_10003157C;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100031900;
  v10[3] = &unk_1002B04A8;
  uint64_t v8 = _Block_copy(v10);
  id v9 = v5;
  swift_retain();
  swift_release();
  [v9 prepare:v8];
  _Block_release(v8);
}

void sub_100030C1C(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    objc_super v5 = *(void **)(Strong + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper);
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_100031588;
    aBlock[5] = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100031900;
    aBlock[3] = &unk_1002B04D0;
    char v7 = _Block_copy(aBlock);
    id v8 = v5;
    swift_release();
    [v8 setConfigurationCompleted:v7];
    _Block_release(v7);

    ((void (*)(uint64_t))a2)(1);
  }
  else
  {
    a2();
  }
}

void sub_100030D64()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = *(void **)(Strong + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_settingsManager);
    if (v2)
    {
      [v2 stashCurrentActionButtonData];
      uint64_t v3 = OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_buddyPreferences;
      id v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_buddyPreferences];
      if (v4)
      {
        objc_super v5 = *(void **)&v1[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_delegate];
        if (v5)
        {
          uint64_t v6 = v4;
          swift_unknownObjectRetain();
          Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
          NSString v8 = String._bridgeToObjectiveC()();
          [v6 setObject:isa forKey:v8];

          [v5 flowItemDone:v1];
          id v9 = *(void **)&v1[v3];
          if (!v9
            || (id v10 = v9,
                NSString v11 = String._bridgeToObjectiveC()(),
                unsigned __int8 v12 = [v10 BOOLForKey:v11],
                v10,
                v11,
                (v12 & 1) == 0))
          {
            sub_100030F6C();
          }

          swift_unknownObjectRelease();
          uint64_t v1 = v6;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100030F6C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = sub_100030738();
  id v9 = [v8 navigationController];

  id v10 = [v9 topViewController];
  id v11 = sub_100030738();
  if (v10)
  {
    id v18 = v11;
    sub_1000314A8(0, (unint64_t *)&unk_10031DD20);
    id v12 = v10;
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
      sub_1000314A8(0, (unint64_t *)&qword_10031D0D0);
      uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = sub_10003151C;
      aBlock[5] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100031900;
      aBlock[3] = &unk_1002B0458;
      uint64_t v16 = _Block_copy(aBlock);
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10000FE38();
      sub_10000A84C((uint64_t *)&unk_10031D0A0);
      sub_10000B9DC();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v16);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  else
  {
  }
}

void sub_1000312C4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = sub_100030738();

    id v3 = [v2 navigationController];
    if (v3)
    {
      id v4 = [v3 navigationBar];

      id v5 = [self whiteColor];
      [v4 setTintColor:v5];
    }
  }
  swift_beginAccess();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    char v7 = (void *)v6;
    sub_100030F6C();
  }
}

id sub_1000313D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyButtonConfigurationController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyButtonConfigurationController()
{
  return self;
}

uint64_t sub_1000314A8(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000314E4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10003151C()
{
}

uint64_t sub_100031524(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031534()
{
  return swift_release();
}

uint64_t sub_10003153C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10003157C()
{
  sub_100030C1C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_100031588()
{
}

uint64_t sub_100031590()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000315C8(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

void sub_1000315E4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10003777C(0, &qword_10031DBA8);
    sub_10002A078();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_10003777C(0, &qword_10031DBA8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v17;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_33:
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10002A730();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_100031904(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100031948(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_10003777C(0, (unint64_t *)&unk_10031DE40);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

id sub_100031C70()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView();
  return [super dealloc];
}

void sub_100031CA8()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 modelSpecificLocalizedStringKeyForKey:v1];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = v4;

    id v6 = [self mainBundle];
    v10._object = (void *)0xE000000000000000;
    v7._uint64_t countAndFlagsBits = v3;
    v7._object = v5;
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v10._uint64_t countAndFlagsBits = 0;
    Swift::String v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v10);
    swift_bridgeObjectRelease();

    xmmword_10031DD30 = (__int128)v9;
  }
  else
  {
    __break(1u);
  }
}

void sub_100031DB4()
{
  id v0 = [self mainBundle];
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001002399B0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_10031DD40 = (__int128)v3;
}

id sub_100031E58()
{
  Swift::String v1 = self;
  Swift::String v2 = v0;
  id v3 = [v1 sharedApplication];
  id v4 = [v3 connectedScenes];

  sub_10003777C(0, &qword_10031DBA8);
  sub_10002A078();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000315E4(v5);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7 >> 62) {
    goto LABEL_18;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  while ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    Swift::String v9 = v8;
    swift_bridgeObjectRelease();
    id v10 = [v9 windows];

    sub_10003777C(0, &qword_10031DBB0);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62) {
      goto LABEL_26;
    }
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v12);
      char v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      if ([v13 isKeyWindow])
      {
        swift_bridgeObjectRelease_n();
        id v16 = [v14 traitCollection];

        id v17 = [v16 layoutDirection];
        goto LABEL_21;
      }

      ++v12;
      if (v15 == v11) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_19;
    }
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(v7 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (v11) {
    goto LABEL_8;
  }
LABEL_15:
  swift_bridgeObjectRelease_n();
LABEL_20:
  id v17 = 0;
LABEL_21:
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] = v17;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate] = 0;
  uint64_t v19 = &v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver];
  *uint64_t v19 = 0u;
  v19[1] = 0u;
  uint64_t v20 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_cloudConfigManager;
  *(void *)&v2[v20] = [self sharedManager];
  v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration] = 0;
  v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode] = 4;
  uint64_t v21 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView;
  id v22 = [objc_allocWithZone((Class)type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v22 setTranslatesAutoresizingMaskIntoConstraints:0];
  *(void *)&v2[v21] = v22;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_sliderLocationConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationViewConstraints] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_runState] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_displayZoomExecutor] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider] = 0;
  *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance] = 0;

  if (qword_10031CB30 != -1) {
    swift_once();
  }
  id v23 = [self mainBundle];
  v31._object = (void *)0xE000000000000000;
  v24._object = (void *)0x8000000100239AA0;
  v24._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v31._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v31);

  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  v30.receiver = v2;
  v30.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  id v28 = [super initWithTitle:v26 detailText:v27 icon:0 contentLayout:2];

  return v28;
}

void sub_100032390()
{
  Swift::String v1 = v0;
  v96.receiver = v0;
  v96.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  [super viewDidLoad];
  Swift::String v2 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
  if (!v2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (([v2 dispositions] & 0x10) != 0)
  {
    id v3 = [v0 headerView];
    id v4 = self;
    id v5 = [v4 mainBundle];
    v6._uint64_t countAndFlagsBits = 0xD000000000000024;
    v97._object = (void *)0xE000000000000000;
    v6._object = (void *)0x8000000100239A40;
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v97._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v97);

    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setTitle:v8];

    id v9 = [v1 headerView];
    id v10 = self;
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 modelSpecificLocalizedStringKeyForKey:v11];

    if (!v12)
    {
LABEL_27:
      __break(1u);
      return;
    }
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    id v16 = [v4 mainBundle];
    v98._object = (void *)0xE000000000000000;
    v17._uint64_t countAndFlagsBits = v13;
    v17._object = v15;
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    v98._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v98);

    swift_bridgeObjectRelease();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v9 setDetailText:v19];
  }
  uint64_t v20 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v20)
  {
    uint64_t v21 = self;
    id v22 = v20;
    id v23 = [v21 currentDevice];
    id v24 = [v23 type];

    *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes] = sub_10000E054((uint64_t)v24);
    swift_bridgeObjectRelease();
  }
  id v25 = [self boldButton];
  uint64_t v26 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton;
  NSString v27 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton];
  *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton] = v25;

  id v28 = *(void **)&v1[v26];
  if (!v28) {
    goto LABEL_22;
  }
  uint64_t v29 = self;
  id v30 = v28;
  id v88 = v29;
  id v31 = [v29 mainBundle];
  v99._object = (void *)0xE000000000000000;
  v32._uint64_t countAndFlagsBits = 0x45554E49544E4F43;
  v32._object = (void *)0xE800000000000000;
  v33._uint64_t countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v99._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v99);

  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v30 setTitle:v34 forState:0];

  uint64_t v35 = *(void **)&v1[v26];
  if (!v35)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  [v35 addTarget:v1 action:"continueTapped" forControlEvents:64];
  id v36 = [v1 buttonTray];
  if (!*(void *)&v1[v26])
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v37 = v36;
  [v36 addButton:];

  id v38 = [self linkButton];
  uint64_t v39 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton;
  Swift::String v40 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton];
  *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton] = v38;

  uint64_t v41 = *(void **)&v1[v39];
  if (!v41)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v42 = v41;
  id v43 = [v88 mainBundle];
  v100._object = (void *)0xE000000000000000;
  v44._object = (void *)0x8000000100239A00;
  v44._uint64_t countAndFlagsBits = 0xD000000000000011;
  v45._uint64_t countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  v100._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v43, v45, v100);

  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 setTitle:v46 forState:0];

  float v47 = *(void **)&v1[v39];
  if (!v47)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  [v47 addTarget:v1 action:"revertTapped" forControlEvents:64];
  uint64_t v48 = *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes];
  int64_t v49 = *(void *)(v48 + 16);
  id v50 = (void **)_swiftEmptyArrayStorage;
  if (v49)
  {
    v87 = v1;
    aBlock = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100036B38(0, v49, 0);
    uint64_t v51 = 0;
    id v50 = (void **)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v52 = 8 * *(char *)(v48 + v51 + 32);
      uint64_t v53 = *(void *)&aSmall_0[v52];
      uint64_t v54 = *(void **)((char *)&unk_100236AB0 + v52);
      id v55 = [v88 mainBundle];
      v101._object = (void *)0xE000000000000000;
      v56._uint64_t countAndFlagsBits = v53;
      v56._object = v54;
      v57._uint64_t countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      v101._uint64_t countAndFlagsBits = 0;
      Swift::String v58 = NSLocalizedString(_:tableName:bundle:value:comment:)(v56, (Swift::String_optional)0, (NSBundle)v55, v57, v101);

      swift_bridgeObjectRelease();
      aBlock = v50;
      unint64_t v60 = (unint64_t)v50[2];
      unint64_t v59 = (unint64_t)v50[3];
      if (v60 >= v59 >> 1)
      {
        sub_100036B38(v59 > 1, v60 + 1, 1);
        id v50 = aBlock;
      }
      ++v51;
      v50[2] = (void *)(v60 + 1);
      *(Swift::String *)&v50[2 * v60 + 4] = v58;
    }
    while (v49 != v51);
    swift_bridgeObjectRelease();
    Swift::String v1 = v87;
  }
  id v61 = objc_allocWithZone((Class)type metadata accessor for LabeledSlider());
  id v62 = (void *)sub_100028DD0((uint64_t)v50);
  [v62 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v62 addTarget:v1 action:"modeChanged" forControlEvents:192];
  id v63 = [v1 contentView];
  [v63 addSubview:v62];

  id v64 = [v1 contentView];
  [v64 addSubview:*(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView]];

  uint64_t v65 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider] = v62;
  id v89 = v62;

  sub_10003445C();
  id v66 = self;
  id v67 = [v66 accessibilityViewController];

  if (v67)
  {
    id v68 = [v66 navigationBarButton];
    [v68 addTarget:v1 action:"showAccessibilitySettings" forControlEvents:64];
    id v69 = [v1 navigationItem];
    id v70 = [v66 navigationBarButtonItemWithButton:v68];
    [v69 setRightBarButtonItem:v70];
  }
  id v71 = self;
  id v72 = [v71 defaultCenter];
  uint64_t v73 = UIPresentationControllerDismissalTransitionDidEndNotification;
  uint64_t v74 = self;
  id v75 = [v74 mainQueue];
  uint64_t v76 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v94 = sub_1000376F8;
  uint64_t v95 = v76;
  aBlock = _NSConcreteStackBlock;
  uint64_t v91 = 1107296256;
  v92 = sub_100032F74;
  uint64_t ObjectType = &unk_1002B0610;
  id v77 = _Block_copy(&aBlock);
  swift_release();
  id v78 = (void **)[v72 addObserverForName:v73 object:0 queue:v75 usingBlock:v77];
  _Block_release(v77);

  uint64_t ObjectType = (void *)swift_getObjectType();
  aBlock = v78;
  uint64_t v79 = (uint64_t)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver];
  swift_beginAccess();
  sub_100037700((uint64_t)&aBlock, v79);
  swift_endAccess();
  id v80 = [v71 defaultCenter];
  uint64_t v81 = MCCloudConfigurationDidChangeNotification;
  id v82 = [v74 mainQueue];
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = v1;
  v94 = sub_100037768;
  uint64_t v95 = v83;
  aBlock = _NSConcreteStackBlock;
  uint64_t v91 = 1107296256;
  v92 = sub_100032F74;
  uint64_t ObjectType = &unk_1002B0660;
  uint64_t v84 = _Block_copy(&aBlock);
  uint64_t v85 = v1;
  swift_release();
  id v86 = [v80 addObserverForName:v81 object:0 queue:v82 usingBlock:v84];
  _Block_release(v84);

  swift_unknownObjectRelease();
}

void sub_100032DF8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::String v1 = (char *)Strong;
    Swift::String v2 = *(void **)(Strong + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider);
    if (v2)
    {
      id v3 = v2;
      if (sub_10003587C())
      {
        sub_100036278(v3);
      }
      else
      {
        [v3 setHidden:1];
        [*(id *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView] setHidden:1];
        id v4 = [v1 headerView];
        if (qword_10031CB38 != -1) {
          swift_once();
        }
        NSString v5 = String._bridgeToObjectiveC()();
        [v4 setDetailText:v5];

        Swift::String v6 = (char *)[v1 buttonTray];
        if (!*(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton])
        {
          __break(1u);
          return;
        }
        Swift::String v7 = v6;
        [v6 addButton:];

        Swift::String v1 = v3;
        id v3 = v7;
      }

      Swift::String v1 = v3;
    }
  }
}

uint64_t sub_100032F74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100033068()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003777C(0, (unint64_t *)&qword_10031D0D0);
  uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100037774;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100031900;
  aBlock[3] = &unk_1002B0688;
  id v10 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1000332F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    id v6 = [Strong navigationController];
    if (v6)
    {
      Swift::String v7 = v6;
      uint64_t v8 = *(void **)&v5[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_cloudConfigManager];
      if (v8
        && (uint64_t v9 = *(void **)&v5[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate]) != 0
        && (v5[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration] & 1) == 0)
      {
        uint64_t v32 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration;
        id v10 = v8;
        swift_unknownObjectRetain();
        id v11 = [v7 topViewController];
        if (v11)
        {
          id v12 = v11;
          sub_10003777C(0, (unint64_t *)&unk_10031DD20);
          uint64_t v13 = v5;
          Swift::String v33 = v9;
          char v14 = v13;
          id v15 = v12;
          LOBYTE(v12) = static NSObject.== infix(_:_:)();

          id v16 = v14;
          Swift::String v17 = v33;

          if (v12)
          {
            swift_getObjectType();
            if ([v10 cloudConfigWantsToSkipControllerClass:swift_getObjCClassFromMetadata()])
            {
              uint64_t v18 = Logger.purpleBuddyAppearance.unsafeMutableAddressor();
              (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v18, v0);
              NSString v19 = v16;
              uint64_t v20 = Logger.logObject.getter();
              os_log_type_t v21 = static os_log_type_t.default.getter();
              int v31 = v21;
              if (os_log_type_enabled(v20, v21))
              {
                uint64_t v22 = swift_slowAlloc();
                id v30 = v20;
                id v23 = (uint8_t *)v22;
                uint64_t v28 = swift_slowAlloc();
                uint64_t v35 = v28;
                uint64_t v29 = v19;
                *(_DWORD *)id v23 = 136315138;
                NSString v27 = v23 + 4;
                uint64_t v24 = _typeName(_:qualified:)();
                uint64_t v34 = sub_10003FC78(v24, v25, &v35);
                NSString v19 = v29;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v31, "Advancing from %s due to cloud configuration...", v23, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
              v5[v32] = 1;
              uint64_t v26 = v19;
              [v17 flowItemDone:v26];
            }
          }
        }

        swift_unknownObjectRelease();
      }
      else
      {
        id v10 = v5;
      }
    }
    else
    {
      Swift::String v7 = v5;
    }
  }
}

void sub_1000336F0(char a1)
{
  uint64_t v2 = v1;
  v72.receiver = v2;
  v72.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  [super viewWillAppear:a1 & 1];
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v4)
  {
    id v5 = v4;
    char v6 = sub_10000CFD4();
    uint64_t v7 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode;
    v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode] = v6;
    id v8 = [self currentDevice];
    id v9 = [v8 type];

    if (v9 == (id)1)
    {
      id v10 = [v2 view];
      if (!v10) {
        goto LABEL_17;
      }
      id v11 = v10;
      [v10 layoutIfNeeded];
    }
    uint64_t v12 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint;
    uint64_t v13 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
    if (v13)
    {
      id v14 = v13;
      id v15 = [v2 contentView];
      [v15 removeConstraint:v14];
    }
    id v16 = [v2 contentView];
    id v17 = [v16 heightAnchor];

    [v2 availableContentViewHeight];
    id v18 = [v17 constraintEqualToConstant:];

    NSString v19 = *(void **)&v2[v12];
    *(void *)&v2[v12] = v18;

    uint64_t v20 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
    if (v20)
    {
      os_log_type_t v21 = *(void **)&v2[v12];
      if (v21)
      {
        id v71 = v20;
        id v22 = v21;
        sub_1000346F4();
        [v2 availableContentViewHeight];
        double v24 = v23;
        [v71 intrinsicContentSize];
        double v26 = (v24 - v25) * 0.75;
        NSString v27 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
        uint64_t v28 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationViewConstraints;
        sub_10003777C(0, (unint64_t *)&qword_10031DB50);
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v27 removeConstraints:isa];

        sub_10000A84C(&qword_10031D8D0);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_100236910;
        uint64_t v69 = v7;
        id v31 = [v27 topAnchor];
        id v70 = v5;
        id v32 = [v2 contentView];
        id v33 = [v32 topAnchor];

        id v34 = [v31 constraintGreaterThanOrEqualToAnchor:v33];
        *(void *)(v30 + 32) = v34;
        id v35 = [v27 heightAnchor];
        id v36 = [v35 constraintGreaterThanOrEqualToConstant:v26];

        *(void *)(v30 + 40) = v36;
        specialized Array._endMutation()();
        *(void *)&v2[v28] = v30;
        swift_bridgeObjectRelease();
        uint64_t v37 = self;
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_100236980;
        *(void *)(v38 + 32) = v22;
        specialized Array._endMutation()();
        id v68 = v22;
        Class v39 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v67 = v37;
        [v37 activateConstraints:v39];

        swift_bridgeObjectRetain();
        Class v40 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v37 activateConstraints:v40];

        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_100236400;
        id v42 = [v71 leadingAnchor];
        id v43 = [v2 contentView];
        id v44 = [v43 leadingAnchor];

        id v45 = [v42 constraintEqualToAnchor:v44];
        *(void *)(v41 + 32) = v45;
        id v46 = [v71 trailingAnchor];
        id v47 = [v2 contentView];
        id v48 = [v47 trailingAnchor];

        id v49 = [v46 constraintEqualToAnchor:v48];
        *(void *)(v41 + 40) = v49;
        id v50 = [v27 leadingAnchor];
        id v51 = [v2 contentView];
        id v52 = [v51 leadingAnchor];

        id v53 = [v50 constraintEqualToAnchor:v52];
        uint64_t v7 = v69;

        *(void *)(v41 + 48) = v53;
        id v54 = [v27 trailingAnchor];
        id v55 = [v2 contentView];
        id v56 = [v55 trailingAnchor];

        id v57 = [v54 constraintEqualToAnchor:v56];
        *(void *)(v41 + 56) = v57;
        specialized Array._endMutation()();
        Class v58 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v5 = v70;
        [v67 activateConstraints:v58];

        sub_1000345CC((char *)v71);
      }
    }
    sub_10003445C();
    if (v2[v7] == 4)
    {
      uint64_t v59 = 0;
    }
    else
    {
      unint64_t v60 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
      char v61 = *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] == 1;
      id v62 = [v2 traitCollection];
      uint64_t v59 = sub_10000C868(v60, v61, v62);
    }
    uint64_t v63 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController;
    id v64 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController];
    *(void *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = v59;

    [*(id *)&v2[v63] startAnimation];
    id v65 = [v2 view];
    if (v65)
    {
      id v66 = v65;
      [v65 layoutIfNeeded];

      return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

void sub_100033ECC(char a1)
{
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  [super viewWillDisappear:a1 & 1];
  int v3 = v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode];
  if (v3 != 4)
  {
    uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
    if (v4)
    {
      id v5 = v4;
      if ([v1 isMovingFromParentViewController])
      {
        uint64_t v6 = sub_10000DD30(v3);
        char v8 = v7;
        id v9 = *(void **)&v5[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor];
        id v11 = v10;
        [v9 setPendingOption:v6 chosenByUser:1];
        [*(id *)&v5[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService] setLargeIconLayoutEnabled:v8 & 1];
        sub_1000242A4();
        _AXSSetEnhanceTextLegibilityEnabled();
      }
    }
  }
}

uint64_t sub_100034028()
{
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  double v26 = (char *)&v24 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v29 = v1;
  __chkstk_darwin(v1);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v24 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003777C(0, (unint64_t *)&qword_10031D0D0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.userInitiated(_:), v11);
  id v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static DispatchTime.now()();
  + infix(_:_:)();
  id v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  uint64_t v17 = swift_allocObject();
  id v18 = v25;
  *(void *)(v17 + 16) = v25;
  aBlock[4] = sub_10003713C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000315E0;
  aBlock[3] = &unk_1002B0548;
  NSString v19 = _Block_copy(aBlock);
  id v20 = v18;
  static DispatchQoS.unspecified.getter();
  id v31 = _swiftEmptyArrayStorage;
  sub_10000FE38();
  sub_10000A84C((uint64_t *)&unk_10031D0A0);
  sub_10000B9DC();
  os_log_type_t v21 = v26;
  uint64_t v22 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v29);
  v16(v10, v24);
  return swift_release();
}

void sub_10003445C()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (v1)
  {
    id v7 = v1;
    if (sub_10003587C())
    {
      sub_100036278(v7);
      uint64_t v2 = v7;
    }
    else
    {
      [v7 setHidden:1];
      [*(id *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView] setHidden:1];
      id v3 = [v0 headerView];
      if (qword_10031CB38 != -1) {
        swift_once();
      }
      NSString v4 = String._bridgeToObjectiveC()();
      [v3 setDetailText:v4];

      id v5 = [v0 buttonTray];
      if (!*(void *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton])
      {
        __break(1u);
        return;
      }
      id v6 = v5;
      [v5 addButton:];

      uint64_t v2 = v6;
    }
  }
}

void sub_1000345CC(char *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider);
  if (v2)
  {
    id v14 = v2;
    unsigned __int8 v4 = sub_10000CFD4();
    if (v4 != 4)
    {
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        float v7 = 0.0;
        if (*(unsigned __int8 *)(v5 + 32) == v4)
        {
LABEL_9:
          [a1 maximumValue];
          *(float *)&double v13 = (float)(v12
                                 / (float)(*(void *)(*(void *)&a1[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16)
                                         - 1))
                         * v7;
          [a1 setValue:1 animated:v13];
        }
        else
        {
          uint64_t v8 = 0;
          uint64_t v9 = v5 + 33;
          uint64_t v10 = v6 - 1;
          while (v10 != v8)
          {
            int v11 = *(unsigned __int8 *)(v9 + v8++);
            if (v11 == v4)
            {
              float v7 = (float)v8;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
}

void sub_1000346F4()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_sliderLocationConstraints;
    sub_10003777C(0, (unint64_t *)&qword_10031DB50);
    id v15 = v1;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 removeConstraints:isa];

    sub_10000A84C(&qword_10031D8D0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100236910;
    id v6 = [v15 bottomAnchor];
    id v7 = [v2 contentView];
    id v8 = [v7 bottomAnchor];

    id v9 = [v6 constraintEqualToAnchor:v8 constant:-10.0];
    *(void *)(v5 + 32) = v9;
    id v10 = [v15 topAnchor];
    id v11 = [*(id *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView] bottomAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    *(void *)(v5 + 40) = v12;
    specialized Array._endMutation()();
    *(void *)&v2[v3] = v5;
    swift_bridgeObjectRelease();
    double v13 = self;
    swift_bridgeObjectRetain();
    Class v14 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v13 activateConstraints:v14];

    [v15 layoutIfNeeded];
  }
}

void sub_100034968()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v6)
  {
    id v7 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
    if (v7)
    {
      id v8 = v6;
      id v51 = v7;
      [v51 value];
      uint64_t v10 = (uint64_t)sub_100029EA0(v9);
      if (v10 < 0
        || (uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes],
            v10 >= *(void *)(v11 + 16)))
      {

        id v31 = v51;
      }
      else
      {
        int v12 = *(unsigned __int8 *)(v11 + v10 + 32);
        uint64_t v13 = Logger.purpleBuddyAppearance.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
        Class v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.debug.getter();
        int v16 = v15;
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v17 = swift_slowAlloc();
          id v50 = v8;
          uint64_t v18 = v17;
          uint64_t v48 = swift_slowAlloc();
          uint64_t v53 = v48;
          *(_DWORD *)uint64_t v18 = 136315650;
          int v47 = v16;
          uint64_t v52 = sub_10003FC78(0x6E61684365646F6DLL, 0xED00002928646567, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v18 + 12) = 2048;
          uint64_t v52 = 239;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v18 + 22) = 2080;
          uint64_t v46 = v18 + 24;
          uint64_t v19 = sub_10000DD30(v12);
          char v21 = v20;
          int v49 = v12;
          char v23 = v22;
          id v25 = v24;
          os_log_t v45 = v14;
          id v26 = v25;
          uint64_t v27 = sub_10000C6A8(v19, v21 & 1, (uint64_t)v25, v23 & 1);
          unint64_t v29 = v28;

          uint64_t v52 = sub_10003FC78(v27, v29, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          int v12 = v49;
          swift_bridgeObjectRelease();
          os_log_t v30 = v45;
          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v47, "   %s: %ld\n   currentConfiguration: %s", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v8 = v50;
          swift_slowDealloc();
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        unsigned __int8 v32 = sub_10000CFD4();
        if (v32 == 4 || v12 != v32)
        {
          uint64_t v33 = sub_10000DD30(v12);
          char v35 = v34;
          id v37 = v36;
          sub_10000D4A4(v33, v35 & 1, v37);
        }
        uint64_t v38 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
        char v39 = *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] == 1;
        id v40 = [v1 traitCollection];
        uint64_t v41 = sub_10000C868(v38, v39, v40);

        uint64_t v42 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController;
        id v43 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController];
        *(void *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = v41;

        [*(id *)&v1[v42] startAnimation];
        sub_1000346F4();
      }
    }
  }
}

void sub_100034DF8()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  [v1 setNeedsLayout];

  id v3 = [v0 view];
  if (!v3)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v4 = v3;
  [v3 layoutIfNeeded];

  id v5 = [v0 scrollView];
  id v6 = [v0 buttonTray];
  [v6 frame];
  double v8 = v7;
  double v10 = v9;

  id v11 = [v0 view];
  [v5 convertPoint:v11 fromView:v8];

  int v12 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
  if (v12)
  {
    id v13 = v12;
    [v0 availableContentViewHeight];
    [v13 setConstant:];
  }
}

void sub_100035058()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (!v5) {
    return;
  }
  id v65 = v5;
  [v65 value];
  uint64_t v7 = (uint64_t)sub_100029EA0(v6);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes];
    if (v7 < *(void *)(v8 + 16))
    {
      uint64_t v9 = *(char *)(v8 + v7 + 32);
      if (sub_10003587C())
      {
        double v10 = (void *)sub_10000DD30(v9);
        int v12 = v11;
        uint64_t v14 = v13 & 1;
        int v62 = v15 & 1;
        id v16 = v11;
      }
      else
      {
        double v10 = 0;
        uint64_t v14 = 0;
        int v12 = 0;
        int v62 = 0;
      }
      uint64_t v18 = Logger.purpleBuddyAppearance.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v18, v1);
      uint64_t v19 = v0;
      char v20 = Logger.logObject.getter();
      int v21 = static os_log_type_t.debug.getter();
      BOOL v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
      uint64_t v63 = v14;
      uint64_t v64 = v9;
      if (v22)
      {
        int v58 = v21;
        os_log_t v59 = v20;
        unint64_t v60 = v10;
        char v61 = v12;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v67 = v57;
        *(_DWORD *)uint64_t v23 = 136315906;
        uint64_t v66 = sub_10003FC78(0xD000000000000010, 0x8000000100239990, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2048;
        uint64_t v66 = 272;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 22) = 2080;
        id v56 = v19;
        id v24 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
        if (v24)
        {
          id v25 = self;
          id v26 = v24;
          id v27 = [v25 defaultController];
          id v28 = [v27 currentDisplayZoomMode];

          id v29 = [v28 displayZoomOption];
          LOBYTE(v28) = [*(id *)&v26[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService] isLargeIconLayoutEnabled];
          UIContentSizeCategory v30 = sub_1000241B4();
          int v31 = _AXSEnhanceTextLegibilityEnabled();

          uint64_t v32 = sub_10000C6A8((uint64_t)v29, (char)v28, (uint64_t)v30, v31 != 0);
          unint64_t v34 = v33;
        }
        else
        {
          unint64_t v34 = 0xE800000000000000;
          uint64_t v32 = 0x74657320746F6E20;
        }
        uint64_t v66 = sub_10003FC78(v32, v34, &v67);
        v55[1] = &v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v19 = v56;

        *(_WORD *)(v23 + 32) = 2080;
        uint64_t v35 = sub_10000DD30(v64);
        char v37 = v36;
        char v39 = v38;
        id v41 = v40;
        uint64_t v42 = sub_10000C6A8(v35, v37 & 1, (uint64_t)v41, v39 & 1);
        unint64_t v44 = v43;

        uint64_t v66 = sub_10003FC78(v42, v44, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v45 = v59;
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v58, "    %s: %ld\n    currentConfiguration: %s\n    sliderConfiguration: %s", (uint8_t *)v23, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        double v10 = v60;
        int v12 = v61;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      uint64_t v46 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance];
      if (v46)
      {
        id v47 = v46;
        NSString v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        int v49 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
        if (v49)
        {
          [v47 didChooseAppearanceModeName:v48 forDisposition:[v49 dispositions]];

          id v50 = [self buddyPreferencesExcludedFromBackup];
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v52 = String._bridgeToObjectiveC()();
          [v50 setObject:v51 forKey:v52 persistImmediately:1];

          sub_100036534(v10, v63, v12);
          if (v53)
          {
            sub_100034028();
          }
          else
          {
            id v54 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate];
            if (v54) {
              [v54 flowItemDone:v19];
            }
          }

          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
  }
  id v17 = v65;
}

uint64_t sub_10003587C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider);
  if (!v1 || (uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider)) == 0)
  {
    char v10 = 0;
    return v10 & 1;
  }
  id v3 = v1;
  id v4 = v2;
  [v4 value];
  uint64_t v6 = (uint64_t)sub_100029EA0(v5);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes);
    if (v6 < *(void *)(v7 + 16))
    {
      int v8 = *(unsigned __int8 *)(v7 + v6 + 32);
      if (sub_10000CFD4() != 4)
      {
        char v10 = 1;
        id v11 = v4;
        id v4 = v3;
        goto LABEL_9;
      }
      unsigned __int8 v9 = sub_10000CFD4();
      if (v9 == 4 || v8 != v9)
      {
        uint64_t v13 = sub_10000DD30(v8);
        char v15 = v14;
        char v17 = v16;
        id v19 = v18;
        char v10 = sub_10000D5B0(v13, v15 & 1, v19, v17 & 1);

        id v11 = v4;
        id v4 = v19;
        goto LABEL_9;
      }
    }
  }
  char v10 = 0;
  id v11 = v3;
LABEL_9:

  return v10 & 1;
}

uint64_t sub_100035C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  sub_10000A84C(&qword_10031D770);
  v6[5] = swift_task_alloc();
  v6[6] = type metadata accessor for MainActor();
  v6[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100035CF4, v8, v7);
}

uint64_t sub_100035CF4()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  id v3 = (void *)v0[2];
  uint64_t v4 = v0[3];
  swift_release();
  id v5 = sub_10001975C();
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  id v7 = v5;
  swift_retain();
  id v8 = v3;
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v8;
  v10[5] = v5;
  void v10[6] = v4;
  v10[7] = v2;
  sub_100041A28(v1, (uint64_t)&unk_10031DE68, (uint64_t)v10);
  swift_release();

  swift_task_dealloc();
  id v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100035E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for MainActor();
  v7[6] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100035ED0, v9, v8);
}

void *sub_100035ED0()
{
  uint64_t v1 = v0[2];
  swift_release();
  uint64_t result = *(void **)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance);
  if (result)
  {
    id v3 = (void (*)(uint64_t))v0[4];
    [result setChildAge:v0[3]];
    v3(1);
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return (void *)v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100035FD4()
{
  uint64_t v1 = (uint64_t)v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver;
  swift_beginAccess();
  sub_1000377B8(v1, (uint64_t)&v5);
  if (v6)
  {
    sub_100013708(&v5, &v7);
    id v2 = [self defaultCenter];
    sub_100037820(&v7, v8);
    [v2 removeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();

    sub_100015E58((uint64_t)&v7);
  }
  else
  {
    sub_10001364C((uint64_t)&v5);
  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  return [super dealloc];
}

void sub_100036278(void *a1)
{
  [a1 setHidden:0];
  [*(id *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView] setHidden:0];
  id v3 = [v1 buttonTray];
  id v4 = [v3 allButtons];

  sub_10003777C(0, (unint64_t *)&unk_10031DE40);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton;
  long long v7 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton];
  if (!v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  id v8 = v7;
  char v9 = sub_100031948((uint64_t)v8, v5);
  swift_bridgeObjectRelease();

  if (v9)
  {
    id v10 = [v1 buttonTray];
    if (*(void *)&v1[v6])
    {
      uint64_t v11 = v10;
      [v10 removeButton:];

      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    return;
  }
LABEL_5:
  id v12 = [v1 headerView];
  if (qword_10031CB30 != -1) {
    swift_once();
  }
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setDetailText:v13];

  sub_1000345CC((char *)a1);
  id v14 = [v1 scrollView];
  id v15 = [v1 buttonTray];
  [v15 frame];
  double v17 = v16;
  double v19 = v18;

  id v20 = [v1 view];
  [v14 convertPoint:v20 fromView:v17];

  int v21 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
  if (v21)
  {
    id v22 = v21;
    [v1 availableContentViewHeight];
    [v22 setConstant:];
  }
}

void sub_100036534(id a1, char a2, void *a3)
{
  id v4 = *(void **)&v3[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v4 && a3)
  {
    id v8 = self;
    char v9 = v4;
    id v10 = a3;
    id v11 = [v8 currentDevice];
    unsigned int v12 = [v11 sf_deviceSupportsDisplayZoom];

    if (!v12
      || (id v13 = [self defaultController],
          id v14 = [v13 currentDisplayZoomMode],
          v13,
          id v15 = [v14 displayZoomOption],
          v14,
          v15 == a1))
    {
      [*(id *)&v9[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor] setPendingOption:a1 chosenByUser:1];
      [*(id *)&v9[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService] setLargeIconLayoutEnabled:a2 & 1];
      sub_1000242A4();
LABEL_19:
      _AXSSetEnhanceTextLegibilityEnabled();

      return;
    }
    id v16 = [v3 view];
    if (v16)
    {
      double v17 = v16;
      id v40 = v10;
      id v18 = [v16 window];

      if (v18)
      {
        [v18 setUserInteractionEnabled:0];
      }
      uint64_t v19 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton;
      id v20 = *(void **)&v3[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton];
      if (v20)
      {
        int v21 = self;
        id v22 = v20;
        id v23 = [v21 mainBundle];
        v41._object = (void *)0xE000000000000000;
        v24._object = (void *)0x8000000100239930;
        v24._uint64_t countAndFlagsBits = 0xD000000000000012;
        v25._uint64_t countAndFlagsBits = 0;
        v25._object = (void *)0xE000000000000000;
        v41._uint64_t countAndFlagsBits = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v41);

        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v22 setTitle:v26 forState:0];

        id v27 = *(void **)&v3[v19];
        if (v27)
        {
          [v27 setEnabled:0];
          id v28 = [v3 navigationController];
          id v10 = v40;
          if (v28)
          {
            id v29 = v28;
            id v30 = [v28 navigationBar];
            id v31 = [self tertiaryLabelColor];
            [v30 setTintColor:v31];
          }
          uint64_t v32 = self;
          id v33 = [v32 accessibilityViewController];

          if (v33)
          {
            id v34 = [v32 navigationBarButton];
            id v35 = [self tertiaryLabelColor];
            [v34 setTintColor:v35];

            id v36 = [v3 navigationItem];
            id v37 = [v32 navigationBarButtonItemWithButton:v34];
            [v36 setRightBarButtonItem:v37];
          }
          [*(id *)&v9[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor] setPendingOption:a1 chosenByUser:1];
          [*(id *)&v9[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService] setLargeIconLayoutEnabled:a2 & 1];
          char v38 = (__CFString *)String._bridgeToObjectiveC()();
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v39 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          if (qword_10031CB28 != -1) {
            swift_once();
          }
          CFPreferencesSetAppValue(v38, v39, (CFStringRef)qword_10031DA00);

          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t type metadata accessor for BuddyAppearanceController()
{
  return self;
}

uint64_t type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView()
{
  return self;
}

uint64_t sub_100036AF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036B78(a1, a2, a3, *v3);
  char *v3 = (char *)result;
  return result;
}

uint64_t sub_100036B18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036CC8(a1, a2, a3, *v3);
  char *v3 = (char *)result;
  return result;
}

uint64_t sub_100036B38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036E28(a1, a2, a3, *v3);
  char *v3 = (char *)result;
  return result;
}

uint64_t sub_100036B58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100036F94(a1, a2, a3, *v3);
  char *v3 = (char *)result;
  return result;
}

uint64_t sub_100036B78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A84C(&qword_10031DE78);
    id v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  unsigned int v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100036CC8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A84C((uint64_t *)&unk_10031DE80);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100036E28(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A84C((uint64_t *)&unk_10031DE90);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    id v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100036F94(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A84C((uint64_t *)&unk_10031DEB0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size_0(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100037104()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10003713C()
{
  id result = *(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_displayZoomExecutor);
  if (result) {
    return [result commitIfNeededWithRelaunchURL:0 transitionWithScreenshot:1];
  }
  return result;
}

uint64_t sub_100037168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100037178()
{
  return swift_release();
}

uint64_t sub_100037180(char *a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a2;
  uint64_t v8 = *(void **)&a1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
  if (v8)
  {
    uint64_t v9 = result;
    _Block_copy(a2);
    if (([v8 dispositions] & 0x10) != 0)
    {
      uint64_t v10 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor();
      int64_t v11 = a1;
      swift_retain();
      uint64_t v12 = static MainActor.shared.getter();
      id v13 = (void *)swift_allocObject();
      v13[2] = v12;
      v13[3] = &protocol witness table for MainActor;
      v13[4] = v11;
      v13[5] = sub_100037390;
      v13[6] = v9;
      sub_100041A28((uint64_t)v6, (uint64_t)&unk_10031DE58, (uint64_t)v13);
      swift_release();
      return swift_release();
    }
    else
    {
      a2[2](a2, 1);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100037358()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100037390(char a1)
{
  return sub_100041A10(a1, *(void *)(v1 + 16));
}

uint64_t sub_100037398()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000373E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000374A8;
  return sub_100035C24(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000374A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003759C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000375EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100037880;
  return sub_100035E34(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000376C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000376F8()
{
}

uint64_t sub_100037700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031DE70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037768()
{
  return sub_100033068();
}

void sub_100037774()
{
}

uint64_t sub_10003777C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000377B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031DE70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_100037820(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100037884(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A84C(&qword_10031DF80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100043CAC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000379A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A84C(&qword_10031D408);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10003A0EC(v6, (uint64_t)v15);
    unint64_t result = sub_100043D24((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100013708(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100037AD0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A84C(&qword_10031DF10);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100043CAC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v10 = (uint64_t *)(v2[6] + 16 * result);
    *long long v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_100037BEC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

BOOL sub_100037C08(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100037C20()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100037C68()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100037C98()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_100037CDC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

void sub_100037D0C(void *a1@<X8>)
{
  *a1 = *v1;
}

id sub_100037D18()
{
  uint64_t v1 = OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager;
  BOOL v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for LockdownModeManager();
    uint64_t v5 = (void *)static LockdownModeManager.shared.getter();
    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v5;
    id v3 = v5;

    BOOL v2 = 0;
  }
  id v7 = v2;
  return v3;
}

uint64_t sub_100037DB8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  id v5 = sub_100037D18();
  LODWORD(a3) = a3();

  return ~a3 & 1;
}

void sub_100037E30(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C(&qword_10031DF70);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  id v5 = sub_100037D18();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  LockdownModeManager.getEnabledInAccount(synchronize:completion:)();
  swift_release();
}

uint64_t sub_1000380E8(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_100038160, 0, 0);
}

uint64_t sub_100038160()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  void *v3 = v0;
  v3[1] = sub_10003824C;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000013, 0x8000000100239BA0, sub_100039FE4, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10003824C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100038364, 0, 0);
}

uint64_t sub_100038364()
{
  uint64_t v1 = *(void (***)(void))(v0 + 24);

  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000383DC(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_1000383FC, 0, 0);
}

uint64_t sub_1000383FC()
{
  id v1 = sub_100037D18();
  char v2 = LockdownModeManager.enabled.getter();

  if (v2) {
    goto LABEL_8;
  }
  unint64_t v3 = v0[3];
  if (v3 < 2)
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = swift_task_alloc();
    v0[5] = v5;
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[6] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000385A8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  if (v3 == 2)
  {
    *(unsigned char *)(v0[4] + OBJC_IVAR____TtC5Setup19LockdownModeManager_hasStagedEnablement) = 1;
LABEL_8:
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  v0[2] = v3;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_1000385A8()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v2 = sub_1000386DC;
  }
  else
  {
    swift_task_dealloc();
    char v2 = sub_1000386C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000386C4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000386DC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100038740(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031DF08);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  if (a2 >= 3)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    sub_10000A84C(&qword_10031DF18);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002366C0;
    *(void *)(inited + 32) = 0x746F6F626572;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(unsigned char *)(inited + 48) = (a2 & 7) == 0;
    *(void *)(inited + 56) = 0xD000000000000015;
    *(void *)(inited + 64) = 0x8000000100239B80;
    *(unsigned char *)(inited + 72) = 0;
    unint64_t v8 = sub_100037AD0(inited);
    id v9 = sub_100037D18();
    sub_10003894C(v8);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    LockdownModeManager.setEnabled(enabled:options:completion:)();
    swift_release();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003894C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000A84C(&qword_10031D408);
    char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    char v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    long long v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100013708(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100013708(v35, v36);
    sub_100013708(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~v6[v20 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~v6[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = v6[v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100013708(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100039864();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100038E70(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[4] = v7;
  void *v7 = v3;
  v7[1] = sub_10003A224;
  v7[3] = a1;
  v7[4] = v6;
  return _swift_task_switch(sub_1000383FC, 0, 0);
}

uint64_t sub_100038F44()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100038F64, 0, 0);
}

uint64_t sub_100038F64()
{
  uint64_t v1 = v0[2];
  *(unsigned char *)(v1 + OBJC_IVAR____TtC5Setup19LockdownModeManager_hasStagedEnablement) = 0;
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  void *v3 = v0;
  v3[1] = sub_100039064;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100039064()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100039198;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100039180;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100039180()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039198()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000391FC(uint64_t a1)
{
  uint64_t v2 = sub_10000A84C(&qword_10031DF08);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  unint64_t v5 = sub_100037AD0((uint64_t)&off_1002AF0A0);
  id v6 = sub_100037D18();
  sub_10003894C(v5);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  LockdownModeManager.setEnabled(enabled:options:completion:)();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003937C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    sub_10000A84C(&qword_10031DF08);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000A84C(&qword_10031DF08);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100039548(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100039608;
  v5[2] = v4;
  return _swift_task_switch(sub_100038F64, 0, 0);
}

uint64_t sub_100039608()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

id sub_1000397E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockdownModeManager();
  return [super dealloc];
}

uint64_t type metadata accessor for LockdownModeManager()
{
  return self;
}

{
  return type metadata accessor for LockdownModeManager();
}

uint64_t sub_10003984C(uint64_t a1)
{
  return sub_1000391FC(a1);
}

uint64_t sub_100039854()
{
  return sub_100039FF8(&qword_10031DF08);
}

uint64_t sub_100039864()
{
  return swift_release();
}

uint64_t sub_10003986C(uint64_t a1)
{
  return sub_100038740(a1, *(void *)(v1 + 16));
}

uint64_t sub_100039874()
{
  return sub_100039FF8(&qword_10031DF08);
}

uint64_t sub_100039884(void *a1)
{
  return sub_10003937C(a1);
}

uint64_t sub_1000398F0()
{
  objc_super v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003999C;
  unint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031DF20 + dword_10031DF20);
  return v5(v2, v3);
}

uint64_t sub_10003999C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100039A98()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100039AD8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_10003A234;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10031DF30 + dword_10031DF30);
  return v6(v2, v3, v4);
}

uint64_t sub_100039B90()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_10003A238;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_100039C54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10003A23C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100039D24()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039D64()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003A240;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10031DF50 + dword_10031DF50);
  return v5(v2, v3);
}

uint64_t sub_100039E14()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10003A244;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_100039ED8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100039F18(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10003A248;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

void sub_100039FE4(uint64_t a1)
{
}

uint64_t sub_100039FEC()
{
  return sub_100039FF8(&qword_10031DF70);
}

uint64_t sub_100039FF8(uint64_t *a1)
{
  uint64_t v2 = sub_10000A84C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10003A084()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10003A0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031DF78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LockdownModeState()
{
  return &type metadata for LockdownModeState;
}

ValueMetadata *type metadata accessor for LockdownModeEnableStrategy()
{
  return &type metadata for LockdownModeEnableStrategy;
}

unint64_t sub_10003A178()
{
  unint64_t result = qword_10031DF88;
  if (!qword_10031DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031DF88);
  }
  return result;
}

unint64_t sub_10003A1D0()
{
  unint64_t result = qword_10031DF90;
  if (!qword_10031DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031DF90);
  }
  return result;
}

id BuddyCameraControlPresentationProvider.__allocating_init(isIntelligenceEnabled:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = [self buddyPreferences];
  id v5 = [v3 initWithIsIntelligenceEnabled:a1 & 1 preferenceController:v4];

  return v5;
}

id BuddyCameraControlPresentationProvider.init(isIntelligenceEnabled:)(char a1)
{
  id v3 = [self buddyPreferences];
  id v4 = [v1 initWithIsIntelligenceEnabled:a1 & 1 preferenceController:v3];

  return v4;
}

id BuddyCameraControlPresentationProvider.__allocating_init(isIntelligenceEnabled:preferenceController:)(char a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled] = a1;
  *(void *)&v5[OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return [super init];
}

id BuddyCameraControlPresentationProvider.init(isIntelligenceEnabled:preferenceController:)(char a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled] = a1;
  *(void *)&v2[OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for BuddyCameraControlPresentationProvider();
  return [super init];
}

uint64_t type metadata accessor for BuddyCameraControlPresentationProvider()
{
  return self;
}

Swift::Bool __swiftcall BuddyCameraControlPresentationProvider.shouldPresentCameraControlPane()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController);
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned int v3 = [v1 BOOLForKey:v2];

  if (!v3) {
    return 1;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled) != 1) {
    return 0;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned __int8 v5 = [v1 BOOLForKey:v4];

  return v5 ^ 1;
}

Swift::Bool __swiftcall BuddyCameraControlPresentationProvider.shouldPresentVisualIntelligencePane()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled) != 1) {
    return 0;
  }
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController);
  NSString v2 = String._bridgeToObjectiveC()();
  LOBYTE(v1) = [v1 BOOLForKey:v2];

  return v1 ^ 1;
}

Swift::Void __swiftcall BuddyCameraControlPresentationProvider.updatePaneVisibilityPreferences(newState:)(Swift::Bool newState)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v7 = *(void **)(v1 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setObject:isa forKey:v9];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled) == 1)
  {
    uint64_t v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      int64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int64_t v13 = 67109120;
      BOOL v19 = newState;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Update visual intelligence presented to: %{BOOL}d", v13, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    Class v14 = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v15 = String._bridgeToObjectiveC()();
    [v7 setObject:v14 forKey:v15];
  }
  else if (!newState)
  {
    Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v18 = String._bridgeToObjectiveC()();
    [v7 setObject:v16 forKey:v18];

    long long v17 = v18;
  }
}

id BuddyCameraControlPresentationProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void BuddyCameraControlPresentationProvider.init()()
{
}

id BuddyCameraControlPresentationProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyCameraControlPresentationProvider();
  [super dealloc];
}

BOOL sub_10003AB10()
{
  return BuddyCameraControlPresentationProvider.shouldPresentCameraControlPane()();
}

uint64_t sub_10003AB38()
{
  if (*(unsigned char *)(*v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_isIntelligenceEnabled) != 1) {
    return 0;
  }
  id v1 = *(void **)(*v0 + OBJC_IVAR____TtC5Setup38BuddyCameraControlPresentationProvider_preferenceController);
  NSString v2 = String._bridgeToObjectiveC()();
  LODWORD(v1) = [v1 BOOLForKey:v2];

  return v1 ^ 1;
}

void sub_10003ABC0(Swift::Bool a1)
{
}

void sub_10003ABE4()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2) {
    qword_100322008 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

id sub_10003AC5C(uint64_t a1)
{
  NSString v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = (void *)v1(v2);
  swift_release();
  swift_unknownObjectRelease();

  return v3;
}

id sub_10003ACC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);

  return v2;
}

uint64_t sub_10003AD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_10003AD5C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = &v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation];
  uint64_t v12 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  int64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation], 1, 1, v12);
  *(void *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration] = 0;
  *(void *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags] = 0;
  *(void *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_runState] = 0;
  *(void *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter] = 0;
  if (a4)
  {
    v19[4] = a4;
    v19[5] = a5;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 1107296256;
    v19[2] = sub_10003AC5C;
    v19[3] = &unk_1002B0BD8;
    Class v14 = _Block_copy(v19);
    swift_retain();
    swift_release();
  }
  else
  {
    Class v14 = 0;
  }
  NSString v15 = (objc_class *)type metadata accessor for BuddyChildSetupFlow(0);
  v20.receiver = v5;
  v20.super_class = v15;
  id v16 = [super initWithNavigationController:a1 flowDelegate:a2 flowStarter:a3 dependencyInjector:v14];
  sub_100019700(a4);

  swift_unknownObjectRelease();
  id v17 = v16;
  _Block_release(v14);
  if (v17) {

  }
  return v17;
}

uint64_t sub_10003B0B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

id sub_10003B2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a2;
  uint64_t v49 = a1;
  uint64_t v3 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v44 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v43 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v43 - v10);
  uint64_t v12 = sub_10000A84C(&qword_10031E168);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v45 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v43 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v46 = (char *)&v43 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  char v22 = (char *)&v43 - v21;
  __chkstk_darwin(v20);
  BOOL v24 = (char *)&v43 - v23;
  uint64_t v25 = v2;
  uint64_t v26 = (uint64_t)v2 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation;
  swift_beginAccess();
  sub_100041770(v26, (uint64_t)v24);
  uint64_t v47 = v4;
  uint64_t v27 = v3;
  uint64_t v28 = v3;
  long long v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v29(v24, 1, v28))
  {
    sub_1000417D8((uint64_t)v24, &qword_10031E168);
  }
  else
  {
    sub_100041834((uint64_t)v24, (uint64_t)v11);
    sub_1000417D8((uint64_t)v24, &qword_10031E168);
    uint64_t v30 = *v11;
    swift_unknownObjectRetain();
    sub_100041898((uint64_t)v11);
    swift_unknownObjectRelease();
    if (v30 == v49)
    {
      sub_100041770(v26, (uint64_t)v22);
      uint64_t v38 = v27;
      if (v29(v22, 1, v27) == 1) {
        return (id)sub_1000417D8((uint64_t)v22, &qword_10031E168);
      }
      sub_1000418F4((uint64_t)v22, (uint64_t)v9);
      sub_10000A84C(&qword_10031DF70);
      CheckedContinuation.resume(returning:)();
      uint64_t v40 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1, 1, v38);
      swift_beginAccess();
      sub_100040660(v40, v26);
      swift_endAccess();
      return (id)sub_100041898((uint64_t)v9);
    }
  }
  long long v31 = v25;
  uint64_t v32 = (uint64_t)v25 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation;
  swift_beginAccess();
  sub_100041770(v32, (uint64_t)v17);
  uint64_t v33 = v27;
  if (v29(v17, 1, v27))
  {
    sub_1000417D8((uint64_t)v17, &qword_10031E168);
    uint64_t v34 = v49;
LABEL_7:
    id v36 = (objc_class *)type metadata accessor for BuddyChildSetupFlow(0);
    v50.receiver = v31;
    v50.super_class = v36;
    return [super flowItemDone:v34 nextItem:v48];
  }
  sub_100041834((uint64_t)v17, (uint64_t)v11);
  sub_1000417D8((uint64_t)v17, &qword_10031E168);
  uint64_t v35 = *v11;
  swift_unknownObjectRetain();
  sub_100041898((uint64_t)v11);
  swift_unknownObjectRelease();
  uint64_t v34 = v49;
  if (v35 != v49) {
    goto LABEL_7;
  }
  uint64_t v39 = v45;
  sub_100041770(v32, v45);
  if (v29((char *)v39, 1, v33) == 1) {
    return (id)sub_1000417D8(v39, &qword_10031E168);
  }
  uint64_t v41 = v44;
  sub_1000418F4(v39, v44);
  sub_10000A84C(&qword_10031DF70);
  CheckedContinuation.resume(returning:)();
  uint64_t v42 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1, 1, v33);
  swift_beginAccess();
  sub_100040660(v42, v32);
  swift_endAccess();
  return (id)sub_100041898(v41);
}

uint64_t sub_10003B9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003BA54, v5, v4);
}

uint64_t sub_10003BA54()
{
  NSString v1 = (const void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = (void *)v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  id v4 = v3;
  id v5 = v2;
  v0[8] = static MainActor.shared.getter();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10003BB18;
  return sub_10003BCFC();
}

uint64_t sub_10003BB18(char a1)
{
  *(unsigned char *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003BC5C, v3, v2);
}

uint64_t sub_10003BC5C()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v2 = *(void (***)(void, void))(v0 + 56);
  uint64_t v3 = *(void **)(v0 + 32);
  id v4 = *(void **)(v0 + 16);
  swift_release();
  sub_10003D12C(v4);

  v2[2](v2, v1);
  _Block_release(v2);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10003BCFC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  v1[7] = type metadata accessor for MainActor();
  v1[8] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[9] = v4;
  v1[10] = v3;
  return _swift_task_switch(sub_10003BE04, v4, v3);
}

uint64_t sub_10003BE04()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v0[11] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v5;
  v0[13] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Presenting passcode pane...", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[3];
  uint64_t v11 = v0[4];
  uint64_t v12 = (void *)v0[2];

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[14] = v13;
  v0[15] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  sub_1000406C8(0, &qword_10031E170);
  id v14 = [v12 createConditionalFlowItemForClass:swift_getObjCClassFromMetadata()];
  v0[16] = v14;
  uint64_t v15 = v0[2];
  if (v14)
  {
    id v16 = v14;
    uint64_t v17 = static MainActor.shared.getter();
    v0[17] = v17;
    uint64_t v18 = swift_task_alloc();
    v0[18] = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v16;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[19] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10003C0AC;
    uint64_t v20 = (char *)&type metadata for () + 8;
    uint64_t v21 = &protocol witness table for MainActor;
    char v22 = sub_100040704;
    uint64_t v23 = v17;
    uint64_t v24 = 0x7361507075746573;
    unint64_t v25 = 0xEF292865646F6373;
    uint64_t v26 = v18;
    return withCheckedContinuation<A>(isolation:function:_:)(v19, v23, v21, v24, v25, v22, v26, v20);
  }
  swift_release();
  uint64_t v19 = *(void **)(v15 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration);
  if (!v19)
  {
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)(v19, v23, v21, v24, v25, v22, v26, v20);
  }
  id v27 = [v19 isPasscodeSet];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(id))v0[1];
  return v28(v27);
}

uint64_t sub_10003C0AC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10003C20C, v3, v2);
}

void *sub_10003C20C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[12];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  swift_release();
  v1(v3, v2, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Passcode pane completed", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v9 = v0[5];
  uint64_t v11 = v0[2];
  uint64_t v10 = v0[3];

  v8(v9, v10);
  unint64_t result = *(void **)(v11 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration);
  if (result)
  {
    id v13 = [result isPasscodeSet];
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    id v14 = (uint64_t (*)(id))v0[1];
    return (void *)v14(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003C4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003C584, v5, v4);
}

uint64_t sub_10003C584()
{
  uint64_t v1 = (const void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = (void *)v0[2];
  swift_release();
  v0[7] = _Block_copy(v1);
  id v4 = v3;
  id v5 = v2;
  v0[8] = static MainActor.shared.getter();
  os_log_type_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *os_log_type_t v6 = v0;
  v6[1] = sub_10003C648;
  return sub_10003C78C();
}

uint64_t sub_10003C648(char a1)
{
  *(unsigned char *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000419D8, v3, v2);
}

uint64_t sub_10003C78C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  v1[7] = type metadata accessor for MainActor();
  v1[8] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[9] = v4;
  v1[10] = v3;
  return _swift_task_switch(sub_10003C894, v4, v3);
}

uint64_t sub_10003C894()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v0[11] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v5;
  v0[13] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Presenting Location Services pane...", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[3];
  uint64_t v11 = v0[4];
  uint64_t v12 = (void *)v0[2];

  id v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[14] = v13;
  v0[15] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  sub_1000406C8(0, &qword_10031E160);
  id v14 = [v12 createConditionalFlowItemForClass:swift_getObjCClassFromMetadata()];
  v0[16] = v14;
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = v0[2];
    uint64_t v17 = static MainActor.shared.getter();
    v0[17] = v17;
    uint64_t v18 = swift_task_alloc();
    v0[18] = v18;
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v15;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[19] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10003CB2C;
    return withCheckedContinuation<A>(isolation:function:_:)(v19, v17, &protocol witness table for MainActor, 0xD000000000000017, 0x8000000100239FA0, sub_100040610, v18, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release();
    id v20 = [self locationServicesEnabled];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(id))v0[1];
    return v21(v20);
  }
}

uint64_t sub_10003CB2C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10003CC8C, v3, v2);
}

uint64_t sub_10003CC8C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[12];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  swift_release();
  v1(v3, v2, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Location Services completed", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[14];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[3];

  v8(v9, v10);
  id v11 = [self locationServicesEnabled];
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(id))v0[1];
  return v12(v11);
}

void sub_10003CDE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_10000A84C(&qword_10031DF70);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = a5;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003AD08;
  aBlock[3] = a6;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a2;
  swift_unknownObjectRetain();
  swift_release();
  [v17 pushFlowItem:a3 inFlow:v17 withExtendedInitialization:1 animated:1 willPushFlowItem:v16];
  _Block_release(v16);
}

uint64_t sub_10003CFAC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = sub_10000A84C(&qword_10031E168);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v13 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
    unint64_t v14 = (char *)v12 + *(int *)(v13 + 20);
    uint64_t v15 = sub_10000A84C(&qword_10031DF70);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a4, v15);
    *uint64_t v12 = a3;
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
    uint64_t v16 = a2 + *a5;
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_100040660((uint64_t)v12, v16);
    return swift_endAccess();
  }
  else
  {
    sub_10000A84C(&qword_10031DF70);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_10003D12C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A84C(&qword_10031D770);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting spinner for next child setup task", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v15 = [v2 navigationController];
  if (!v15)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v16 = v15;
  id v17 = [v15 topViewController];

  if (!v17)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  id v18 = [v17 view];
  if (v18)
  {
    uint64_t v19 = v18;
    [v18 setUserInteractionEnabled:0];

    type metadata accessor for ViewControllerSpinnerManager();
    swift_getObjectType();
    uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    uint64_t v21 = NSStringFromClass(ObjCClassFromMetadata);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v6, 1, 1, v22);
    type metadata accessor for MainActor();
    id v23 = a1;
    id v24 = v2;
    id v25 = v17;
    uint64_t v26 = static MainActor.shared.getter();
    id v27 = (void *)swift_allocObject();
    v27[2] = v26;
    v27[3] = &protocol witness table for MainActor;
    v27[4] = v23;
    uint64_t v27[5] = v24;
    v27[6] = v25;
    sub_100041A28((uint64_t)v6, (uint64_t)&unk_10031E158, (uint64_t)v27);

    swift_release();
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_10003D470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[22] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[23] = v9;
  v6[24] = v8;
  return _swift_task_switch(sub_10003D578, v9, v8);
}

uint64_t sub_10003D578()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  v0[25] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[26] = v5;
  v0[27] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Will wait for next child setup task", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[19];
  uint64_t v12 = (void *)v0[15];

  os_log_type_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[28] = v13;
  v0[29] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v9, v10);
  v0[2] = v0;
  v0[3] = sub_10003D74C;
  uint64_t v14 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10003DA08;
  v0[13] = &unk_1002B0968;
  v0[14] = v14;
  [v12 waitUntilLoadedWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10003D74C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 184);
  return _swift_task_switch(sub_10003D854, v2, v1);
}

id sub_10003D854()
{
  uint64_t v1 = (void *)v0[17];
  swift_release();
  type metadata accessor for ViewControllerSpinnerManager();
  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v3 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)();
  swift_bridgeObjectRelease();
  id result = [v1 view];
  if (result)
  {
    uint64_t v5 = result;
    os_log_type_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[26];
    uint64_t v7 = v0[25];
    uint64_t v8 = v0[20];
    uint64_t v9 = v0[18];
    [result setUserInteractionEnabled:1];

    v6(v8, v7, v9);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Did finish waiting for next child setup task", v12, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v13 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v14 = v0[20];
    uint64_t v15 = v0[18];

    v13(v14, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return (id)v16();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DA08(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t sub_10003DA10(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for MainActor();
  v2[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[11] = v5;
  v2[12] = v4;
  return _swift_task_switch(sub_10003DB18, v5, v4);
}

uint64_t sub_10003DB18()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  id v4 = sub_10003E1A8(*(char **)(v0 + 32));
  *(void *)(v0 + 104) = v4;
  uint64_t v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v5, v2);
  swift_unknownObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v43 = *(void *)(v0 + 48);
    uint64_t v44 = *(void *)(v0 + 40);
    uint64_t v45 = *(void *)(v0 + 64);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    id v10 = [v4 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    *(void *)(v0 + 16) = sub_10003FC78(v11, v13, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Initializing sign in task with flags: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v14(v45, v44);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);

    swift_unknownObjectRelease_n();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  id v18 = [self sharedBuddyAccountTools];
  if (!v18)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v26 = v18;
  id v27 = *(void **)(v0 + 32);
  id v28 = objc_allocWithZone((Class)BuddyAppleIDSignInTask);
  swift_unknownObjectRetain();
  id v29 = [v28 initWithFeatureFlags:v4 accountTools:v26];
  *(void *)(v0 + 112) = v29;
  swift_unknownObjectRelease();

  id v18 = [v27 navigationController];
  if (!v18)
  {
LABEL_12:
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  uint64_t v30 = v18;
  uint64_t v31 = *(void *)(v0 + 56);
  uint64_t v32 = *(void *)(v0 + 40);
  [v29 setNavigationController:v18];

  [v29 setEnableFindMy:0];
  [v29 setRestoreFromBackupMode:0];
  v6(v31, v5, v32);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Beginning sign-in...", v35, 2u);
    swift_slowDealloc();
  }
  uint64_t v36 = *(void *)(v0 + 56);
  uint64_t v37 = *(void *)(v0 + 40);
  uint64_t v38 = *(void *)(v0 + 24);

  v14(v36, v37);
  uint64_t v39 = static MainActor.shared.getter();
  *(void *)(v0 + 120) = v39;
  uint64_t v40 = swift_task_alloc();
  *(void *)(v0 + 128) = v40;
  *(void *)(v40 + 16) = v29;
  *(void *)(v40 + 24) = v38;
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_10003DFB4;
  unint64_t v22 = 0x8000000100239DA0;
  id v20 = &protocol witness table for MainActor;
  id v25 = &type metadata for Bool;
  id v23 = sub_10003F758;
  id v18 = (id)(v0 + 144);
  uint64_t v19 = v39;
  unint64_t v21 = 0xD00000000000001DLL;
  uint64_t v24 = v40;
  return withCheckedContinuation<A>(isolation:function:_:)(v18, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_10003DFB4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_10003E114, v3, v2);
}

uint64_t sub_10003E114()
{
  uint64_t v1 = *(void **)(v0 + 112);
  swift_unknownObjectRelease();

  swift_release();
  uint64_t v2 = *(unsigned __int8 *)(v0 + 144);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

id sub_10003E1A8(char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)&a1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags])
  {
    id v6 = *(id *)&a1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags];
  }
  else
  {
    uint64_t v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
    os_log_type_t v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v15[1] = v11 + 4;
      uint64_t ObjectType = swift_getObjectType();
      sub_10000A84C((uint64_t *)&unk_10031E140);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t ObjectType = sub_10003FC78(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: Feature flag property was not set. Falling back to BuddyFeatureFlags.current.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v6 = [self currentFlags];
  }
  swift_unknownObjectRetain();
  return v6;
}

void sub_10003E420(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000A84C((uint64_t *)&unk_10031DCC0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10000A84C((uint64_t *)&unk_10031E130);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100040368;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003E95C;
  aBlock[3] = &unk_1002B0918;
  os_log_type_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 signInToAllServicesWithAuthenticationResults:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10003E600(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v13 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  if (a1)
  {
    v14(v12, v13, v6);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sign-in succeeded!", v17, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v10 = v12;
  }
  else
  {
    v14(v10, v13, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v18))
    {
      v22[1] = a3;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412290;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v23 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v23 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = 0;
      }
      *(void *)v22[0] = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v18, "Sign-in failed: %@", v19, 0xCu);
      sub_10000A84C(&qword_10031D0B0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  LOBYTE(v23) = a1 & 1;
  sub_10000A84C((uint64_t *)&unk_10031DCC0);
  return CheckedContinuation.resume(returning:)();
}

void sub_10003E95C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10003EB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003EBEC, v5, v4);
}

uint64_t sub_10003EBEC()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v2);
  sub_10000A84C((uint64_t *)&unk_10031E130);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  v0[7] = v3;
  id v4 = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003ECD8;
  return sub_10003DA10(v3);
}

uint64_t sub_10003ECD8(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 48);
  id v4 = *(void **)(*v1 + 32);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

id sub_10003EF0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyChildSetupFlow(0);
  [super dealloc];
}

uint64_t sub_10003EFE0()
{
  return type metadata accessor for BuddyChildSetupFlow(0);
}

uint64_t type metadata accessor for BuddyChildSetupFlow(uint64_t a1)
{
  return sub_10003F120(a1, (uint64_t *)&unk_10031E058);
}

void sub_10003F008()
{
  sub_10003F0A8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10003F0A8()
{
  if (!qword_10031E080)
  {
    type metadata accessor for BuddyChildSetupFlow.FlowContinuation(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10031E080);
    }
  }
}

uint64_t type metadata accessor for BuddyChildSetupFlow.FlowContinuation(uint64_t a1)
{
  return sub_10003F120(a1, (uint64_t *)&unk_10031E0E8);
}

uint64_t sub_10003F120(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10003F158(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_unknownObjectRetain();
    uint64_t v9 = sub_10000A84C(&qword_10031DF70);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_10003F224(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10000A84C(&qword_10031DF70);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10003F2A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_unknownObjectRetain();
  uint64_t v7 = sub_10000A84C(&qword_10031DF70);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_10003F324(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10000A84C(&qword_10031DF70);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_10003F3BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10000A84C(&qword_10031DF70);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10003F43C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10000A84C(&qword_10031DF70);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_10003F4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003F4E0);
}

uint64_t sub_10003F4E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000A84C(&qword_10031DF70);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003F594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003F5A8);
}

void *sub_10003F5A8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000A84C(&qword_10031DF70);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10003F654()
{
  sub_10003F6EC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10003F6EC()
{
  if (!qword_10031E0F8)
  {
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10031E0F8);
    }
  }
}

void sub_10003F758(uint64_t a1)
{
  sub_10003E420(a1, *(void **)(v1 + 16));
}

uint64_t sub_10003F760(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000419E8;
  return v6();
}

uint64_t sub_10003F82C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000419EC;
  return v7();
}

uint64_t sub_10003F8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000417D8(a1, &qword_10031D770);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10003FAA4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10003FB80;
  return v6(a1);
}

uint64_t sub_10003FB80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003FC78(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10003FD4C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000BB14((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000BB14((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100015E58((uint64_t)v12);
  return v7;
}

uint64_t sub_10003FD4C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10003FF08(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10003FF08(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10003FFA0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100040180(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100040180(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10003FFA0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100040118(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100040118(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000A84C(&qword_10031E128);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size_1(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100040180(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A84C(&qword_10031E128);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size_1(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000402D4()
{
  uint64_t v1 = sub_10000A84C((uint64_t *)&unk_10031DCC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100040368(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_10000A84C((uint64_t *)&unk_10031DCC0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10003E600(a1, a2, v6);
}

uint64_t sub_1000403EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000403FC()
{
  return swift_release();
}

uint64_t sub_100040404()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100040454(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  int64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *int64_t v9 = v2;
  v9[1] = sub_10004051C;
  return sub_10003D470(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10004051C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_100040610(uint64_t a1)
{
  sub_10003CDE0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1002B0990, (uint64_t)sub_100040654, (uint64_t)&unk_1002B09A8);
}

uint64_t sub_100040654(char a1)
{
  return sub_10004082C(a1, &OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation);
}

uint64_t sub_100040660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031E168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000406C8(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_100040704(uint64_t a1)
{
  sub_10003CDE0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), (uint64_t)&unk_1002B09E0, (uint64_t)sub_100040820, (uint64_t)&unk_1002B09F8);
}

uint64_t sub_100040748()
{
  uint64_t v1 = sub_10000A84C(&qword_10031DF70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100040820(char a1)
{
  return sub_10004082C(a1, &OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation);
}

uint64_t sub_10004082C(char a1, void *a2)
{
  uint64_t v5 = *(void *)(sub_10000A84C(&qword_10031DF70) - 8);
  return sub_10003CFAC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

void sub_1000408A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 navigationController];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    int64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting child flow...", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v12 = OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter;
    uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter];
    if (v13)
    {
      [v13 setDelegate:v1];
      uint64_t v14 = *(void **)&v1[v12];
      if (v14)
      {
        [v14 startFlowWithNavigationController:v7];

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  id v15 = [v1 delegate];
  if (!v15)
  {
LABEL_13:
    __break(1u);
    return;
  }
  [v15 flow:v1 finishedWithLastItem:v1 nextItem:0];

  swift_unknownObjectRelease();
}

id sub_100040AD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    int64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Child setup completed", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id result = [v1 delegate];
  if (result)
  {
    [result flow:v1 finishedWithLastItem:v1 nextItem:0];
    return (id)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100040C74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v16 = v1;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = v2;
    os_log_type_t v10 = (uint8_t *)v9;
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v12;
    uint64_t v1 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Child setup failed: %@", v10, 0xCu);
    sub_10000A84C(&qword_10031D0B0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v15;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id result = [v1 delegate];
  if (result)
  {
    [result flow:v1 finishedWithLastItem:v1 nextItem:0];
    return (id)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100040EF0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000419F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10031E178 + dword_10031E178);
  return v6(v2, v3, v4);
}

uint64_t sub_100040FA8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000419F4;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_10004106C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000410A4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004115C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10031E1A8 + dword_10031E1A8);
  return v6(a1, v4);
}

uint64_t sub_10004115C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100041254()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000419F8;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10031E1B8 + dword_10031E1B8);
  return v6(v2, v3, v4);
}

uint64_t sub_10004130C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000419FC;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_1000413D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100041A00;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000414A0()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000414E8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100041A04;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10031E1D8 + dword_10031E1D8);
  return v6(v2, v3, v4);
}

uint64_t sub_1000415A0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100041A08;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10031E188 + dword_10031E188);
  return v6(v2, v3, v4);
}

uint64_t sub_100041664()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000416A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100041A0C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10031E198 + dword_10031E198);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100041770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A84C(&qword_10031E168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000417D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000A84C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100041834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100041898(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000418F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100041958()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id sub_100041990()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();

  return v1;
}

uint64_t sub_100041A10(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

uint64_t sub_100041A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100028560(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_100041BCC()
{
  *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_runState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_buddyPreferencesExcludedFromBackup] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_proximitySetupController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_analyticsManager] = 0;
  *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_capabilities] = 0;
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 modelSpecificLocalizedStringKeyForKey:v2];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    uint64_t v7 = self;
    id v8 = [v7 mainBundle];
    v22._object = (void *)0xE000000000000000;
    v9._uint64_t countAndFlagsBits = v4;
    v9._object = v6;
    v10._uint64_t countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v22._uint64_t countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v22);
    swift_bridgeObjectRelease();

    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v1 modelSpecificLocalizedStringKeyForKey:v11];

    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      id v16 = [v7 mainBundle];
      v23._object = (void *)0xE000000000000000;
      v17._uint64_t countAndFlagsBits = v13;
      v17._object = v15;
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      v23._uint64_t countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v23);
      swift_bridgeObjectRelease();

      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v21.receiver = v0;
      v21.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
      [super initWithTitle:v19 detailText:v20 icon:0 contentLayout:2];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100041E64()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
  [super viewDidLoad];
  uint64_t v1 = self;
  id v2 = [v1 mainBundle];
  v11._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010023A040;
  v3._uint64_t countAndFlagsBits = 0xD000000000000016;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v11);

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addBoldButton:v5 action:"eraseTapped"];

  id v6 = [v1 mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD000000000000019;
  v12._object = (void *)0xE000000000000000;
  v7._object = (void *)0x800000010023A060;
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v12._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v12);

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 addLinkButton:v9 action:"continueSetupTapped"];
}

void sub_1000420AC()
{
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v2 = v1;
  id v3 = [v1 window];

  if (!v3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v4 = [v0 navigationController];
  if (!v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_proximitySetupController];
  if (!v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_analyticsManager];
  if (!v6)
  {
LABEL_13:
    __break(1u);
    return;
  }
  Swift::String v7 = v4;
  id v8 = [self alertControllerWithWindow:v3 navigationController:v4 proximitySetupController:v5 analyticsManager:v6];

  [v0 presentViewController:v8 animated:1 completion:0];
}

uint64_t sub_1000423B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + *a4) = a3;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_100042470()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_runState);
  if (!v6) {
    return 0;
  }
  Swift::String v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_capabilities);
  if (v7)
  {
    swift_unknownObjectRetain();
    if ([v7 mgIsHactivated])
    {
      uint64_t v8 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
      NSString v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        Swift::String v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping app states comparison", v11, 2u);
        swift_slowDealloc();
      }

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      return 0;
    }
    unsigned int v12 = [v6 hasCompletedInitialRun];
    swift_unknownObjectRelease();
    return v12 ^ 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100042670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100042768, v9, v8);
}

uint64_t sub_100042768()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = swift_release();
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_buddyPreferencesExcludedFromBackup);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = sub_1000134F8(v4);

    if (v5)
    {
      uint64_t v6 = sub_100012FA8();
      char v7 = sub_100042900((uint64_t)v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = v7 ^ 1;
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v9 = *(void *)(v0 + 56);
      uint64_t v11 = *(void *)(v0 + 40);
      uint64_t v12 = Logger.purpleBuddyGeneral.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Found no original app states", v15, 2u);
        swift_slowDealloc();
      }
      uint64_t v17 = *(void *)(v0 + 48);
      uint64_t v16 = *(void *)(v0 + 56);
      uint64_t v18 = *(void *)(v0 + 40);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      char v8 = 1;
    }
    (*(void (**)(void))(v0 + 24))(v8 & 1);
    swift_task_dealloc();
    NSString v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100042900(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v90 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v91 = (unint64_t)(v5 + 63) >> 6;
  while (2)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v93 = v4;
      unint64_t v9 = v8 | (v4 << 6);
    }
    else
    {
      int64_t v10 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      if (v10 >= v91) {
        return 1;
      }
      unint64_t v11 = *(void *)(v90 + 8 * v10);
      int64_t v12 = v4 + 1;
      if (!v11)
      {
        int64_t v12 = v4 + 2;
        if (v4 + 2 >= v91) {
          return 1;
        }
        unint64_t v11 = *(void *)(v90 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 3;
          if (v4 + 3 >= v91) {
            return 1;
          }
          unint64_t v11 = *(void *)(v90 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 4;
            if (v4 + 4 >= v91) {
              return 1;
            }
            unint64_t v11 = *(void *)(v90 + 8 * v12);
            if (!v11)
            {
              uint64_t v13 = v4 + 5;
              if (v4 + 5 >= v91) {
                return 1;
              }
              unint64_t v11 = *(void *)(v90 + 8 * v13);
              if (!v11)
              {
                while (1)
                {
                  int64_t v12 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    break;
                  }
                  if (v12 >= v91) {
                    return 1;
                  }
                  unint64_t v11 = *(void *)(v90 + 8 * v12);
                  ++v13;
                  if (v11) {
                    goto LABEL_25;
                  }
                }
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
              }
              int64_t v12 = v4 + 5;
            }
          }
        }
      }
LABEL_25:
      unint64_t v7 = (v11 - 1) & v11;
      int64_t v93 = v12;
      unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    }
    uint64_t v14 = 16 * v9;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    sub_100013448(v20, v19);
    unint64_t v21 = sub_100043CAC(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      goto LABEL_139;
    }
    unint64_t v24 = v19 >> 62;
    id v25 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v21);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    uint64_t v28 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_142;
        }
        uint64_t v28 = HIDWORD(v27) - (int)v27;
LABEL_32:
        sub_100013448(v27, v26);
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v27 + 16);
        uint64_t v29 = *(void *)(v27 + 24);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_32;
        }
        goto LABEL_143;
      case 3uLL:
        break;
      default:
        uint64_t v28 = BYTE6(v26);
        break;
    }
    switch((int)v24)
    {
      case 1:
        LODWORD(v31) = HIDWORD(v20) - v20;
        if (__OFSUB__(HIDWORD(v20), v20)) {
          goto LABEL_144;
        }
        uint64_t v31 = (int)v31;
LABEL_38:
        if (v28 == v31)
        {
          if (v28 < 1)
          {
LABEL_7:
            sub_1000134A0(v27, v26);
            sub_1000134A0(v20, v19);
            uint64_t v3 = a1;
            int64_t v4 = v93;
          }
          else
          {
            switch(v26 >> 62)
            {
              case 1uLL:
                if ((int)v27 > v27 >> 32) {
                  goto LABEL_146;
                }
                uint64_t v40 = (char *)__DataStorage._bytes.getter();
                if (!v40) {
                  goto LABEL_52;
                }
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v27, v41)) {
                  goto LABEL_148;
                }
                v40 += (int)v27 - v41;
LABEL_52:
                uint64_t v2 = a2;
                __DataStorage._length.getter();
                if (!v24)
                {
                  __s2[0] = v20;
                  LOWORD(__s2[1]) = v19;
                  BYTE2(__s2[1]) = BYTE2(v19);
                  BYTE3(__s2[1]) = BYTE3(v19);
                  BYTE4(__s2[1]) = BYTE4(v19);
                  BYTE5(__s2[1]) = BYTE5(v19);
                  if (!v40) {
                    goto LABEL_177;
                  }
                  size_t v58 = BYTE6(v19);
                  unint64_t v60 = __s2;
                  os_log_t v59 = v40;
LABEL_120:
                  int v46 = memcmp(v59, v60, v58);
                  goto LABEL_121;
                }
                if (v24 == 1)
                {
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_158;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v20, v43)) {
                      goto LABEL_165;
                    }
                    v42 += (int)v20 - v43;
                  }
                  uint64_t v2 = a2;
                  uint64_t v44 = __DataStorage._length.getter();
                  if (v44 >= (v20 >> 32) - (int)v20) {
                    size_t v45 = (v20 >> 32) - (int)v20;
                  }
                  else {
                    size_t v45 = v44;
                  }
                  if (!v40) {
                    goto LABEL_167;
                  }
                  uint64_t v3 = a1;
                  if (!v42) {
                    goto LABEL_168;
                  }
                  int v46 = memcmp(v40, v42, v45);
                  sub_1000134A0(v20, v19);
                  sub_1000134A0(v27, v26);
                  sub_1000134A0(v20, v19);
                  goto LABEL_123;
                }
                uint64_t v81 = *(void *)(v20 + 16);
                uint64_t v80 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                id v82 = (char *)__DataStorage._bytes.getter();
                if (v82)
                {
                  uint64_t v83 = __DataStorage._offset.getter();
                  if (__OFSUB__(v81, v83)) {
                    goto LABEL_164;
                  }
                  v82 += v81 - v83;
                }
                BOOL v34 = __OFSUB__(v80, v81);
                int64_t v84 = v80 - v81;
                if (v34) {
                  goto LABEL_159;
                }
                uint64_t v85 = __DataStorage._length.getter();
                if (v85 >= v84) {
                  size_t v86 = v84;
                }
                else {
                  size_t v86 = v85;
                }
                uint64_t v3 = a1;
                if (!v40) {
                  goto LABEL_178;
                }
                uint64_t v2 = a2;
                if (!v82) {
                  goto LABEL_179;
                }
                int v71 = memcmp(v40, v82, v86);
                swift_release();
                swift_release();
                sub_1000134A0(v27, v26);
                sub_1000134A0(v20, v19);
LABEL_135:
                int64_t v4 = v93;
                if (v71) {
                  return 0;
                }
                continue;
              case 2uLL:
                uint64_t v47 = *(void *)(v27 + 16);
                swift_retain();
                swift_retain();
                uint64_t v48 = (char *)__DataStorage._bytes.getter();
                if (!v48) {
                  goto LABEL_67;
                }
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__(v47, v49)) {
                  goto LABEL_147;
                }
                v48 += v47 - v49;
LABEL_67:
                uint64_t v2 = a2;
                __DataStorage._length.getter();
                if (!v24)
                {
                  __s2[0] = v20;
                  LOWORD(__s2[1]) = v19;
                  BYTE2(__s2[1]) = BYTE2(v19);
                  BYTE3(__s2[1]) = BYTE3(v19);
                  BYTE4(__s2[1]) = BYTE4(v19);
                  BYTE5(__s2[1]) = BYTE5(v19);
                  if (!v48) {
                    goto LABEL_174;
                  }
                  int v46 = memcmp(v48, __s2, BYTE6(v19));
                  goto LABEL_106;
                }
                __s1 = v48;
                if (v24 == 1)
                {
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_152;
                  }
                  swift_retain();
                  objc_super v50 = (char *)__DataStorage._bytes.getter();
                  if (v50)
                  {
                    uint64_t v51 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v20, v51)) {
                      goto LABEL_163;
                    }
                    v50 += (int)v20 - v51;
                  }
                  uint64_t v2 = a2;
                  uint64_t v52 = __DataStorage._length.getter();
                  if (v52 >= (v20 >> 32) - (int)v20) {
                    size_t v53 = (v20 >> 32) - (int)v20;
                  }
                  else {
                    size_t v53 = v52;
                  }
                  if (!v48) {
                    goto LABEL_169;
                  }
                  if (!v50) {
                    goto LABEL_170;
                  }
                  int v46 = memcmp(v48, v50, v53);
                  sub_1000134A0(v20, v19);
LABEL_106:
                  swift_release();
                  swift_release();
LABEL_121:
                  sub_1000134A0(v27, v26);
                  sub_1000134A0(v20, v19);
LABEL_122:
                  uint64_t v3 = a1;
LABEL_123:
                  int64_t v4 = v93;
                  if (v46) {
                    return 0;
                  }
                  continue;
                }
                uint64_t v73 = *(void *)(v20 + 16);
                uint64_t v72 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v74 = (char *)__DataStorage._bytes.getter();
                if (v74)
                {
                  uint64_t v75 = __DataStorage._offset.getter();
                  if (__OFSUB__(v73, v75)) {
                    goto LABEL_162;
                  }
                  v74 += v73 - v75;
                }
                BOOL v34 = __OFSUB__(v72, v73);
                int64_t v76 = v72 - v73;
                if (v34) {
                  goto LABEL_157;
                }
                uint64_t v77 = __DataStorage._length.getter();
                if (v77 >= v76) {
                  size_t v78 = v76;
                }
                else {
                  size_t v78 = v77;
                }
                if (!__s1) {
                  goto LABEL_175;
                }
                uint64_t v2 = a2;
                if (!v74) {
                  goto LABEL_176;
                }
                int v79 = memcmp(__s1, v74, v78);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_1000134A0(v27, v26);
                sub_1000134A0(v20, v19);
                uint64_t v3 = a1;
                int64_t v4 = v93;
                if (v79) {
                  return 0;
                }
                break;
              case 3uLL:
                memset(__s2, 0, 14);
                if (!v24) {
                  goto LABEL_88;
                }
                if (v24 == 1)
                {
                  uint64_t v35 = (v20 >> 32) - (int)v20;
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_151;
                  }
                  swift_retain();
                  uint64_t v54 = __DataStorage._bytes.getter();
                  if (!v54) {
                    goto LABEL_171;
                  }
                  uint64_t v37 = v54;
                  uint64_t v55 = __DataStorage._offset.getter();
                  uint64_t v39 = (int)v20 - v55;
                  if (__OFSUB__((int)v20, v55)) {
                    goto LABEL_156;
                  }
LABEL_84:
                  uint64_t v56 = __DataStorage._length.getter();
                  if (v56 >= v35) {
                    size_t v57 = v35;
                  }
                  else {
                    size_t v57 = v56;
                  }
                  int v46 = memcmp(__s2, (const void *)(v37 + v39), v57);
                  sub_1000134A0(v20, v19);
                  sub_1000134A0(v27, v26);
                  sub_1000134A0(v20, v19);
                  uint64_t v2 = a2;
                  goto LABEL_122;
                }
                uint64_t v67 = *(void *)(v20 + 16);
                uint64_t v68 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_161;
                  }
                  v63 += v67 - v69;
                }
                int64_t v65 = v68 - v67;
                if (__OFSUB__(v68, v67)) {
                  goto LABEL_154;
                }
                uint64_t v66 = __DataStorage._length.getter();
                uint64_t v3 = a1;
                if (!v63) {
                  goto LABEL_173;
                }
LABEL_100:
                if (v66 >= v65) {
                  size_t v70 = v65;
                }
                else {
                  size_t v70 = v66;
                }
                int v71 = memcmp(__s2, v63, v70);
                swift_release();
                swift_release();
                sub_1000134A0(v27, v26);
                sub_1000134A0(v20, v19);
                uint64_t v2 = a2;
                goto LABEL_135;
              default:
                __s2[0] = v27;
                LOWORD(__s2[1]) = v26;
                BYTE2(__s2[1]) = BYTE2(v26);
                BYTE3(__s2[1]) = BYTE3(v26);
                BYTE4(__s2[1]) = BYTE4(v26);
                BYTE5(__s2[1]) = BYTE5(v26);
                if (!v24)
                {
LABEL_88:
                  uint64_t v94 = v20;
                  __int16 v95 = v19;
                  char v96 = BYTE2(v19);
                  char v97 = BYTE3(v19);
                  char v98 = BYTE4(v19);
                  size_t v58 = BYTE6(v19);
                  char v99 = BYTE5(v19);
                  os_log_t v59 = __s2;
                  unint64_t v60 = &v94;
                  goto LABEL_120;
                }
                if (v24 == 1)
                {
                  uint64_t v35 = (v20 >> 32) - (int)v20;
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_150;
                  }
                  swift_retain();
                  uint64_t v36 = __DataStorage._bytes.getter();
                  if (!v36)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
LABEL_176:
                    __break(1u);
LABEL_177:
                    __break(1u);
LABEL_178:
                    __break(1u);
LABEL_179:
                    __break(1u);
                    JUMPOUT(0x1000433B4);
                  }
                  uint64_t v37 = v36;
                  uint64_t v38 = __DataStorage._offset.getter();
                  uint64_t v39 = (int)v20 - v38;
                  if (__OFSUB__((int)v20, v38)) {
                    goto LABEL_155;
                  }
                  goto LABEL_84;
                }
                uint64_t v61 = *(void *)(v20 + 16);
                uint64_t v62 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v61, v64)) {
                    goto LABEL_160;
                  }
                  v63 += v61 - v64;
                }
                int64_t v65 = v62 - v61;
                if (__OFSUB__(v62, v61)) {
                  goto LABEL_153;
                }
                uint64_t v66 = __DataStorage._length.getter();
                uint64_t v3 = a1;
                if (!v63) {
                  goto LABEL_172;
                }
                goto LABEL_100;
            }
          }
          continue;
        }
LABEL_138:
        sub_1000134A0(v27, v26);
LABEL_139:
        sub_1000134A0(v20, v19);
        return 0;
      case 2:
        uint64_t v33 = *(void *)(v20 + 16);
        uint64_t v32 = *(void *)(v20 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_38;
        }
        goto LABEL_145;
      case 3:
        if (!v28) {
          goto LABEL_7;
        }
        goto LABEL_138;
      default:
        uint64_t v31 = BYTE6(v19);
        goto LABEL_38;
    }
  }
}

id sub_1000435CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
  return [super dealloc];
}

uint64_t type metadata accessor for BuddyPostActivationAppStateController()
{
  return self;
}

uint64_t sub_1000436A0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000436D8(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1000436F0()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100043738(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_100043800;
  return sub_100042670(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100043800()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000438F4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000439D0;
  return v6(a1);
}

uint64_t sub_1000439D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100043AC8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043B00(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100043BB8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10031E278 + dword_10031E278);
  return v6(a1, v4);
}

uint64_t sub_100043BB8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100043CAC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100043D68(a1, a2, v4);
}

unint64_t sub_100043D24(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100043E4C(a1, v4);
}

unint64_t sub_100043D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    int64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100043E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000136AC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10002FB04((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id sub_100043F14(void *a1, uint64_t a2, char a3)
{
  char v6 = objc_allocWithZone(v3);
  swift_unknownObjectWeakInit();
  *(void *)&v6[OBJC_IVAR____TtC5Setup23EnclosingViewController_enclosedViewController] = a1;
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC5Setup23EnclosingViewController_overrideBackButton] = a3;
  v10.receiver = v6;
  v10.super_class = v3;
  id v7 = a1;
  id v8 = [super initWithNibName:0 bundle:0];

  swift_unknownObjectRelease();
  return v8;
}

void sub_100044104()
{
  v46.receiver = v0;
  v46.super_class = (Class)type metadata accessor for EnclosingViewController();
  [super viewDidLoad];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong || (unsigned int v2 = [Strong hasBlackBackground], swift_unknownObjectRelease(), !v2))
  {
LABEL_5:
    id v8 = *(void **)&v0[OBJC_IVAR____TtC5Setup23EnclosingViewController_enclosedViewController];
    [v0 addChildViewController:v8];
    id v9 = [v0 view];
    if (v9)
    {
      objc_super v10 = v9;
      id v11 = [v8 view];
      if (v11)
      {
        uint64_t v12 = v11;
        [v10 addSubview:v11];

        [v8 didMoveToParentViewController:v0];
        id v13 = [v8 view];
        if (v13)
        {
          BOOL v14 = v13;
          [v13 setTranslatesAutoresizingMaskIntoConstraints:0];

          sub_10000A84C(&qword_10031D8D0);
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_100236400;
          id v16 = [v8 view];
          if (v16)
          {
            uint64_t v17 = v16;
            id v18 = [v16 topAnchor];

            id v19 = [v0 view];
            if (v19)
            {
              uint64_t v20 = v19;
              id v21 = [v19 topAnchor];

              id v22 = [v18 constraintEqualToAnchor:v21];
              *(void *)(v15 + 32) = v22;
              id v23 = [v8 view];
              if (v23)
              {
                unint64_t v24 = v23;
                id v25 = [v23 leftAnchor];

                id v26 = [v0 view];
                if (v26)
                {
                  uint64_t v27 = v26;
                  id v28 = [v26 leftAnchor];

                  id v29 = [v25 constraintEqualToAnchor:v28];
                  *(void *)(v15 + 40) = v29;
                  id v30 = [v8 view];
                  if (v30)
                  {
                    uint64_t v31 = v30;
                    id v32 = [v30 widthAnchor];

                    id v33 = [v0 view];
                    if (v33)
                    {
                      BOOL v34 = v33;
                      id v35 = [v33 widthAnchor];

                      id v36 = [v32 constraintEqualToAnchor:v35];
                      *(void *)(v15 + 48) = v36;
                      id v37 = [v8 view];
                      if (v37)
                      {
                        uint64_t v38 = v37;
                        id v39 = [v37 heightAnchor];

                        id v40 = [v0 view];
                        if (v40)
                        {
                          uint64_t v41 = v40;
                          uint64_t v42 = self;
                          id v43 = [v41 heightAnchor];

                          id v44 = [v39 constraintEqualToAnchor:v43];
                          *(void *)(v15 + 56) = v44;
                          specialized Array._endMutation()();
                          sub_10001FD20();
                          Class isa = Array._bridgeToObjectiveC()().super.isa;
                          swift_bridgeObjectRelease();
                          [v42 activateConstraints:isa];

                          return;
                        }
                        goto LABEL_27;
                      }
LABEL_26:
                      __break(1u);
LABEL_27:
                      __break(1u);
                      goto LABEL_28;
                    }
LABEL_25:
                    __break(1u);
                    goto LABEL_26;
                  }
LABEL_24:
                  __break(1u);
                  goto LABEL_25;
                }
LABEL_23:
                __break(1u);
                goto LABEL_24;
              }
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  id v3 = [v0 view];
  if (v3)
  {
    unint64_t v4 = v3;
    id v5 = [self systemBackgroundColor];
    id v6 = [self traitCollectionWithUserInterfaceStyle:2];
    id v7 = [v5 resolvedColorWithTraitCollection:v6];

    [v4 setBackgroundColor:v7];
    goto LABEL_5;
  }
LABEL_28:
  __break(1u);
}

void sub_100044740(char a1)
{
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for EnclosingViewController();
  [super viewWillAppear:a1 & 1];
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC5Setup23EnclosingViewController_overrideBackButton) == 1)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      unint64_t v4 = Strong;
      if ([Strong respondsToSelector:"usesWhiteBackButton"])
      {
        unsigned __int8 v5 = [v4 usesWhiteBackButton];
        swift_unknownObjectRelease();
        if (v5)
        {
          id v6 = [v1 navigationController];
          if (v6)
          {
            id v7 = v6;
            id v8 = [v6 navigationBar];

            id v9 = [self whiteColor];
            [v8 setTintColor:v9];
          }
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
}

id sub_1000448FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EnclosingViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for EnclosingViewController()
{
  return self;
}

uint64_t sub_1000449A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000449C8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void sub_100044DE4(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  }
  objc_storeStrong(&location, 0);
}

uint64_t start(int a1, char **a2)
{
  UIApplicationMain(a1, a2, @"Application", @"Application");
  return 0;
}

void sub_100045908(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] delegate];
  [v1 flowItemDone:location[0]];

  objc_storeStrong(location, 0);
}

double sub_100045BE8()
{
  return 0.0;
}

uint64_t sub_100046494(NSObject *a1)
{
  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100046588((uint64_t)buf, (uint64_t)[(objc_class *)a1[4].isa style]);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Welcome shown with style: %li", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return (*((uint64_t (**)(void))a1[5].isa + 2))();
}

double sub_100046588(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 134217984;
  *(_DWORD *)a1 = 134217984;
  *(void *)(a1 + 4) = a2;
  return result;
}

uint64_t sub_1000467F0(uint64_t a1, char a2)
{
  if (a2) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = 0;
  }
  [*(id *)(a1 + 32) setStyle:v3];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000479D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_100048268(id *a1, void *a2)
{
  v9[3] = a1;
  v9[2] = a2;
  v9[1] = a1;
  uint64_t v3 = &_dispatch_main_q;
  unint64_t v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100048344;
  id v8 = &unk_1002B0D20;
  v9[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v9, 0);
}

void sub_100048344(uint64_t a1)
{
  [*(id *)(a1 + 32) setHasIntent:1 a1, a1];
  if ([*(id *)(a1 + 32) didAppear])
  {
    id v2 = [*(id *)(a1 + 32) delegate];
    [v2 flowItemDone:*(void *)(a1 + 32)];
  }
}

uint64_t sub_100048828(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(result + 32) + 16))(*(void *)(result + 32), 1);
  }
  return result;
}

void sub_10004AFFC(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _menuButtonPressed];
  objc_storeStrong(location, 0);
}

void sub_10004B040(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _showModalWiFiSettings];
  objc_storeStrong(location, 0);
}

void sub_10004B084(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _writeGreenInformedDefaultPlistIfNecessary];
  objc_storeStrong(location, 0);
}

uint64_t sub_10004B0C8(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  unsigned __int8 v1 = [location[0] _doesRestartFlowCauseErase];
  objc_storeStrong(location, 0);
  return v1 & 1;
}

void sub_10004B11C(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _prepareForCloudRestoreReboot];
  objc_storeStrong(location, 0);
}

void sub_10004B160(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _exitBuddyForDemoSetUp];
  objc_storeStrong(location, 0);
}

void sub_10004B1A4(uint64_t a1, char a2)
{
  uint64_t v6 = a1;
  char v5 = a2;
  uint64_t v4 = a1;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _prepareForDeviceMigrationAfterSoftwareUpdate:v5 & 1 WeakRetained:v4];
  objc_storeStrong(&v3, 0);
}

void sub_10004B1F4(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _startDeviceMigration];
  objc_storeStrong(location, 0);
}

double sub_10004B238(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 138412290;
  *(_DWORD *)a1 = 138412290;
  *(void *)(a1 + 4) = a2;
  return result;
}

_WORD *sub_10004B24C(_WORD *result)
{
  *double result = 0;
  return result;
}

void sub_10004B254(id *a1)
{
  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _persistAnalyticsForSoftwareUpdate];
  objc_storeStrong(location, 0);
}

id sub_10004B298()
{
  uint64_t v9 = 0;
  objc_super v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321AB8;
  uint64_t v13 = qword_100321AB8;
  if (!qword_100321AB8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    char v5 = sub_10005F044;
    uint64_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10005F044(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10004B3B0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShouldRereadCloudConfigurationForControllersToSkip:1];
  objc_storeStrong(location, 0);
}

void sub_10004B408(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) environment:a1, a1];
  id v2 = [v1 managedConfiguration];
  [v2 waitForMigrationIncludingPostRestoreMigration:1 completion:&stru_1002B0E28];
}

void sub_10004B484(id a1)
{
  id v1 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v1, &stru_1002B0E48);
}

void sub_10004B4E0(id a1)
{
  id v1 = +[BuddyCloudConfigManager sharedManager];
  [v1 cloudConfigMayHaveChanged];
}

double sub_10004BB7C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 138543362;
  *(_DWORD *)a1 = 138543362;
  *(void *)(a1 + 4) = a2;
  return result;
}

double sub_10004CECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_10004CEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  uint64_t v4 = a1;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _preflightDispositionValidationWithControllerClass:v5 WeakRetained:v4];
  objc_storeStrong(&v3, 0);
}

double sub_10004CF38(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2114;
  *(void *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2114;
  *(void *)(a1 + 20) = a4;
  return result;
}

id sub_10004CF60(uint64_t a1)
{
  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id location = [*(id *)(a1 + 32) _stringForStartupCause:[*(id *)(a1 + 32) startupCause]];
    sub_10004BB7C((uint64_t)buf, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v14, "Start up cause: %{public}@", buf, 0xCu);

    objc_storeStrong(&location, 0);
  }
  objc_storeStrong((id *)oslog, 0);
  if (*(unsigned char *)(a1 + 48) & 1) != 0 && (*(unsigned char *)(a1 + 49))
  {
    id v2 = [*(id *)(a1 + 32) environment];
    id v3 = [v2 buddyPreferences];
    id v4 = [*(id *)(a1 + 40) objectForKey:@"Language"];
    [v3 setObject:v4 forKey:@"Language"];

    [*(id *)(a1 + 40) removeObjectForKey:@"Language"];
  }
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:0];
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v12;
      os_log_type_t v6 = v11;
      sub_10004B24C(v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Locale screen prepped for swap. Waiting for setupsnapshotremoved...", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
  }
  id v7 = [*(id *)(a1 + 32) navigationFlowController];
  id v8 = [v7 wifiController];
  [v8 startScanningIfNecessary];

  return [*(id *)(a1 + 32) _setupAndStartReturnToServiceIfNeeded];
}

double sub_10004D1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2114;
  *(void *)(a1 + 24) = a4;
  return result;
}

void sub_10004D204(uint64_t a1, char a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) environment];
    id v3 = [v2 proximitySetupController];
    [v3 resumeSession];
  }
}

double sub_10004DC08(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  *(void *)&double result = 67111424;
  *(_DWORD *)a1 = 67111424;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  *(_WORD *)(a1 + 26) = 1024;
  *(_DWORD *)(a1 + 28) = a6;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a7;
  *(_WORD *)(a1 + 38) = 1024;
  *(_DWORD *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 44) = 1024;
  *(_DWORD *)(a1 + 46) = a9;
  *(_WORD *)(a1 + 50) = 1024;
  *(_DWORD *)(a1 + 52) = a10;
  *(_WORD *)(a1 + 56) = 1024;
  *(_DWORD *)(a1 + 58) = a11;
  return result;
}

void sub_10004F270(id a1)
{
}

void sub_10004F2A4(id a1)
{
}

void sub_10004F2D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _menuButtonPressed:a1, a1];
}

void sub_10004F320(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)RadiosPreferences);
  char v2 = [a1[4] _isBackInBuddyForActivationOnly] & 1;
  if (([location[0] airplaneMode] & 1) != 0 && (v2 & 1) == 0) {
    [location[0] setAirplaneMode:0];
  }
  objc_storeStrong(location, 0);
}

void sub_10004F3A4(id a1)
{
  id v1 = +[AKURLBag sharedBag];
  [v1 isPhoneNumberSupportedConfig];
}

double sub_10004F3FC(uint64_t a1, int a2, int a3)
{
  *(void *)&double result = 67109376;
  *(_DWORD *)a1 = 67109376;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  return result;
}

void sub_10004F41C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _networkPathChanged];
  objc_storeStrong(location, 0);
}

id sub_10004F46C(uint64_t a1, void *a2)
{
  return [a2 _setupSnapshotRemoved];
}

id sub_10004F4A4(uint64_t a1, void *a2)
{
  return [a2 _setupStateChanged];
}

id sub_10004F4DC(uint64_t a1, void *a2)
{
  return [a2 _localeChanged];
}

void sub_10004F514(NSObject *a1, char a2)
{
  uint64_t v17 = a1;
  char v16 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v3 = oslog[0];
      os_log_type_t v4 = v14;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preheating software update cache...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v5 = [(objc_class *)a1[4].isa softwareUpdateCache];
    [v5 scanUsingCache:0 withCompletion:&stru_1002B0F88];

    os_log_type_t v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    objc_super v10 = sub_10004F94C;
    os_log_type_t v11 = &unk_1002B0D20;
    os_log_t v12 = a1[4].isa;
    dispatch_async((dispatch_queue_t)v6, &block);

    objc_storeStrong((id *)&v12, 0);
  }
}

void sub_10004F698(id a1, SUDescriptor *a2, SUDescriptor *a3, NSError *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v18 = 0;
  objc_storeStrong(&v18, a3);
  id v17 = 0;
  objc_storeStrong(&v17, a4);
  oslog[1] = (os_log_t)a1;
  if (v17)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        id v7 = (NSString *)v17;
      }
      else if (v17)
      {
        id v14 = [v17 domain];
        char v13 = 1;
        id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [v17 code]);
        id v12 = v7;
        char v11 = 1;
      }
      else
      {
        id v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Preheating software update cache failed: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (location[0]) {
        CFStringRef v8 = @"did";
      }
      else {
        CFStringRef v8 = @"did not";
      }
      if (v18) {
        CFStringRef v9 = @"did";
      }
      else {
        CFStringRef v9 = @"did not";
      }
      sub_10004CECC((uint64_t)v20, (uint64_t)v8, (uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Software update preheating succeeded and %{public}@ find preferred update, and %{public}@ find latest update", v20, 0x16u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(location, 0);
}

void sub_10004F94C(uint64_t a1)
{
  [*(id *)(a1 + 32) suspendTask:a1];
  [v1 preheat];
}

void sub_10004F99C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigationFlowController:a1, a1];
  [v1 handleDebugGesture];
}

void sub_10004F9EC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) environment:a1, a1];
  id v2 = [v1 buddyPreferencesExcludedFromBackup];
  [v2 setObject:&__kCFBooleanTrue forKey:@"DisplayZoomRestart" persistImmediately:1];
}

void sub_10004FEFC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) environment:a1, a1];
  id v2 = [v1 suspendTask];
  [v2 preheat];
}

void sub_100050040(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Failed to check for updated carrier bundles: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully checked for updated carrier bundles", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100050CB8(void *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = 0;
  id v1 = (void *)a1[4];
  obunint64_t j = 0;
  [v1 installWiFiProfileIfNeeded:&obj];
  objc_storeStrong(location, obj);
  if (location[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "Failed to install Wi-Fi profile with error: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1000510F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) environment:a1, a1];
  id v3 = [v2 proximitySetupController];
  unsigned __int8 v4 = [v3 shouldEnableProximity];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) environment];
    id v6 = [v5 proximitySetupController];
    [v6 beginAdvertisingProximitySetup];
  }
}

double sub_100051470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_100052394(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    char v6 = 0;
    char v4 = 0;
    if (_BYIsInternalInstall())
    {
      id v3 = (NSString *)location[0];
    }
    else if (location[0])
    {
      id v7 = [location[0] domain];
      char v6 = 1;
      id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v7, [location[0] code]);
      id v5 = v3;
      char v4 = 1;
    }
    else
    {
      id v3 = 0;
    }
    sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Finished applying settings with error: %{public}@", buf, 0xCu);
    if (v4) {

    }
    if (v6) {
  }
    }
  objc_storeStrong((id *)oslog, 0);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  objc_storeStrong(location, 0);
}

void sub_100054634(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v12;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested Emergency Call", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  os_log_t v8 = sub_10005478C;
  char v9 = &unk_1002B1018;
  id v10 = a1[4].isa;
  +[EmergencyDialer requestEmergencyCallControllerWithCompletion:&v5];
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  objc_storeStrong((id *)&v10, 0);
  objc_storeStrong(location, 0);
}

void sub_10005478C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong((id *)a1[4] + 6, location[0]);
  [*((id *)a1[4] + 6) setDelegate:a1[4]];
  [a1[4] endAdvertisingProximitySetup];
  id v3 = [a1[4] navigationController];
  id v4 = [v3 presentedViewController];

  id v5 = [a1[4] navigationController];
  if (v4)
  {
    id v6 = [v5 presentedViewController];
    [v6 presentViewController:*((void *)a1[4] + 6) animated:1 completion:0];
  }
  else
  {
    [v5 presentViewController:*((void *)a1[4] + 6) animated:1 completion:0];
  }

  objc_storeStrong(location, 0);
}

void sub_1000548D0(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v8;
    sub_10004B24C(v7);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested Accessibility Options", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _removeSBAlertItemsSupressionAssertion];
  id v5 = [(objc_class *)a1[4].isa navigationController];
  [v5 presentViewController:a1[5].isa animated:1 completion:0];

  objc_storeStrong((id *)a1[4].isa + 2, 0);
  id v6 = +[BuddySIMManager sharedManager];
  [v6 allowSIMUnlock];

  objc_storeStrong(location, 0);
}

void sub_100054A04(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested Wi-Fi Options", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _removeSBAlertItemsSupressionAssertion];
  [(objc_class *)a1[4].isa _showModalWiFiSettings];
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  id v5 = +[BuddySIMManager sharedManager];
  [v5 allowSIMUnlock];

  objc_storeStrong(location, 0);
}

void sub_100054B0C(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v17;
    sub_10004B24C(v16);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested Start Over", (uint8_t *)v16, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _removeSBAlertItemsSupressionAssertion];
  id v5 = [(objc_class *)a1[4].isa navigationFlowController];
  [v5 restartFlow];

  id v6 = [(objc_class *)a1[4].isa environment];
  id v7 = [v6 analyticsManager];
  id v8 = [(objc_class *)a1[4].isa navigationController];
  id v9 = [v8 topViewController];
  id v10 = (objc_class *)objc_opt_class();
  char v11 = NSStringFromClass(v10);
  +[BuddyStartOverAnalytics addRestartEventWithAnalyticsManager:v7 paneIdentifier:v11];

  id v12 = [(objc_class *)a1[4].isa environment];
  id v13 = [v12 multilingualFlowManager];
  [v13 setDidMakeSelection:0];

  id v14 = [(objc_class *)a1[4].isa environment];
  id v15 = [v14 analyticsManager];
  [v15 removeNonPersistentEvents];

  objc_storeStrong((id *)a1[4].isa + 2, 0);
  objc_storeStrong(location, 0);
}

void sub_100054D44(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested shut down UI...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  SBSPresentPowerDownUI();
  [(objc_class *)a1[4].isa _removeSBAlertItemsSupressionAssertion];
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  id v5 = +[BuddySIMManager sharedManager];
  [v5 allowSIMUnlock];

  objc_storeStrong(location, 0);
}

void sub_100054E48(id a1, UIAlertAction *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User requested log out...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v5 = +[BYManagedAppleIDBootstrap sharedManager];
  [v5 switchToLoginWindowDueToError:0 completion:&stru_1002B10C8];

  objc_storeStrong(location, 0);
}

void sub_100054F34(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    char v6 = 0;
    char v4 = 0;
    if (_BYIsInternalInstall())
    {
      id v3 = (NSString *)location[0];
    }
    else if (location[0])
    {
      id v7 = [location[0] domain];
      char v6 = 1;
      id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v7, [location[0] code]);
      id v5 = v3;
      char v4 = 1;
    }
    else
    {
      id v3 = 0;
    }
    sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Switch to login window finished with error: %{public}@", buf, 0xCu);
    if (v4) {

    }
    if (v6) {
  }
    }
  objc_storeStrong((id *)oslog, 0);
  objc_storeStrong(location, 0);
}

void sub_1000550E4(id a1, UIAlertAction *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = +[BYPreferencesController buddyPreferencesEphemeral];
  [v2 setObject:&__kCFBooleanFalse forKey:@"showInternalUI"];

  objc_storeStrong(location, 0);
}

void sub_100055168(id a1, UIAlertAction *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = +[BYPreferencesController buddyPreferencesEphemeral];
  [v2 setObject:&__kCFBooleanTrue forKey:@"showInternalUI"];

  objc_storeStrong(location, 0);
}

void sub_1000551EC(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _removeSBAlertItemsSupressionAssertion];
  objc_storeStrong((id *)a1[4] + 2, 0);
  id v3 = +[BuddySIMManager sharedManager];
  [v3 allowSIMUnlock];

  objc_storeStrong(location, 0);
}

id sub_100055710()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321AC8;
  uint64_t v13 = qword_100321AC8;
  if (!qword_100321AC8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10005F404;
    char v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10005F404(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_100055828()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321AD8;
  uint64_t v13 = qword_100321AD8;
  if (!qword_100321AD8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10005F7C4;
    char v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10005F7C4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_100055940(uint64_t a1)
{
  return [*(id *)(a1 + 32) startAnimation:a1, a1];
}

void sub_100055DFC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:1 a1, a1];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    id v2 = [*(id *)(a1 + 32) navigationFlowController];
    [v2 proceedPastLanguageLocalePane];

    *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
  }
  else if ([*(id *)(a1 + 32) shouldProceedFromAppearancePane])
  {
    id v3 = [*(id *)(a1 + 32) navigationFlowController];
    [v3 proceedPastAppearancePane];

    [*(id *)(a1 + 32) setShouldProceedFromAppearancePane:0];
  }
}

void sub_100055F88(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v17 = a1;
  char v16 = 0;
  id v2 = +[BYSetupStateManager sharedManager];
  unsigned __int8 v3 = 1;
  if (([v2 didSetupUsingiTunes] & 1) == 0) {
    unsigned __int8 v3 = [*(id *)(a1 + 32) _didRestoreIniTunes];
  }

  char v16 = v3 & 1;
  id v4 = +[BuddyActivationConfiguration currentConfiguration];
  unsigned __int8 v5 = [v4 isActivated];

  char v15 = v5 & 1;
  if (_BYLoggingEnabled())
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004F3FC((uint64_t)buf, v16 & 1, v15 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "SetupState changed, restored=%d, activated=%d", buf, 0xEu);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  if (v16 & 1) != 0 && (v15)
  {
    char v6 = &_dispatch_main_q;
    id v7 = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    id v10 = sub_1000561B4;
    int v11 = &unk_1002B0D20;
    id v12 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v6, &v7);

    objc_storeStrong(&v12, 0);
  }
}

void sub_1000561B4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigationFlowController:a1, a1];
  [v1 setUpByComputer];
}

id *sub_100056530(id *result)
{
  if ((_BYTE)result[5]) {
    return (id *)[result[4] _languageChangeAlertDone:result:result];
  }
  return result;
}

id sub_100056748()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321AE8;
  uint64_t v13 = qword_100321AE8;
  if (!qword_100321AE8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    unsigned __int8 v5 = sub_10005FB84;
    char v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10005FB84(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100056860(id a1, BOOL a2, NSError *a3)
{
  id v12 = a1;
  BOOL v11 = a2;
  id location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (v11)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = oslog[0];
      os_log_type_t v5 = v8;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully set up QR code control center module", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v6 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v13, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to set up QR code control center module: %@", v13, 0xCu);
    }
    objc_storeStrong((id *)&v6, 0);
  }
  objc_storeStrong(&location, 0);
}

double sub_100056BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  return result;
}

double sub_100057BFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&double result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

id sub_1000594BC(uint64_t a1)
{
  [*(id *)(a1 + 32) setApplyingProximitySettings:1 a1:a1];
  id v2 = [*(id *)(a1 + 32) navigationController];
  id v3 = [v2 topViewController];
  +[BFFViewControllerSpinnerManager startAnimatingSpinnerFor:v3 identifier:@"SETUP_CONTROLLER"];

  return [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:0];
}

void sub_10005967C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) proximityPairingController:a1:a1];
  [v2 prepareForLanguageChange:*(void *)(a1 + 40)];
}

void sub_1000597E4(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t v15 = a1;
  [*(id *)(a1 + 32) setApplyingProximitySettings:0];
  id v2 = [*(id *)(a1 + 32) setupAnalytics];
  [v2 setUsedProximitySetup:1];

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"SETUP_CONTROLLER"];
  [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:1];
  char v14 = 0;
  id v3 = *(void **)(a1 + 32);
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  BOOL v11 = sub_1000599A8;
  id v12 = &unk_1002B0D70;
  id v13 = *(id *)(a1 + 40);
  char v14 = [v3 updateLanguageLocale:&v9] & 1;
  if (!v14)
  {
    if (*(void *)(a1 + 40)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v4, v5);
    }
    id v6 = [*(id *)(a1 + 32) proximityPairingController:v9, v10, v11, v12];
    id v7 = [v6 delegate];
    id v8 = [*(id *)(a1 + 32) proximityPairingController];
    [v7 flowItemDone:v8];
  }
  [*(id *)(a1 + 32) setProximityPairingController:0 v9, v10, v11, v12];
  objc_storeStrong(&v13, 0);
}

uint64_t sub_1000599A8(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(result + 32) + 16))(*(void *)(result + 32), 1);
  }
  return result;
}

void sub_100059AB4(uint64_t a1)
{
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"SETUP_CONTROLLER", a1, a1];
  [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:1];
  id v2 = [*(id *)(a1 + 32) navigationController];
  id v3 = [v2 topViewController];
  id v4 = [*(id *)(a1 + 32) proximityPairingController];

  if (v3 == v4)
  {
    id v5 = [*(id *)(a1 + 32) navigationController];
    id v6 = [v5 popViewControllerAnimated:1];

    [*(id *)(a1 + 32) setProximityPairingController:0];
  }
}

id sub_100059C80(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setUserInteractionEnabled:1];
}

double sub_10005A060(_DWORD *a1, int a2)
{
  *(void *)&double result = 67109120;
  *a1 = 67109120;
  a1[1] = a2;
  return result;
}

void sub_10005A074(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  id v2 = [*(id *)(a1 + 32) navigationFlowController];
  unsigned __int8 v3 = 0;
  if (([v2 currentlyShowingActivationFlow] & 1) == 0) {
    unsigned __int8 v3 = [*(id *)(a1 + 32) shouldEndLifecycleForCause:0];
  }

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v10;
      sub_10004B24C(v9);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Terminating due to activation state change...", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [*(id *)(a1 + 32) willEndLifecycleDueToCause:0 allowDismissal:1];
    [*(id *)(a1 + 32) endLifecycleDueToCause:0];
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) navigationFlowController];
    id v7 = [v6 wifiController];
    [v7 updateNextButton];

    if (*(unsigned char *)(a1 + 40))
    {
      id v8 = [*(id *)(a1 + 32) inactivityTimer];
      [v8 stop];
    }
  }
}

void sub_10005AF44(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _prepareForMigrationReboot];
  objc_storeStrong(location, 0);
}

void sub_10005AF88(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v9 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v3 = oslog[0];
      os_log_type_t v4 = v9;
      sub_10004B24C(v8);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Keychain data transfer failed; not starting preflight",
        (uint8_t *)v8,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa environment];
    id v6 = [v5 miscState];
    id v7 = [v6 migrationManager];
    [v7 startPreflight];
  }
  objc_storeStrong(location, 0);
}

void sub_10005B454(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v9 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v3 = oslog[0];
      os_log_type_t v4 = v9;
      sub_10004B24C(v8);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Not starting keychain data import as keychain data transfer failed", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa environment];
    id v6 = [v5 miscState];
    id v7 = [v6 migrationManager];
    [v7 startKeychainDataImport];
  }
  objc_storeStrong(location, 0);
}

void sub_10005C0B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) environment:a1, a1];
  id v3 = [v2 buddyPreferencesExcludedFromBackup];
  os_log_type_t v4 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v3 setObject:v4 forKey:@"localeScrollOffset" persistImmediately:1];
}

void sub_10005C9E4(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v21 = 0;
  objc_storeStrong(&v21, a3);
  id v20 = 0;
  objc_storeStrong(&v20, a4);
  oslog[1] = a1;
  if (v21)
  {
    char v9 = &_dispatch_main_q;
    os_log_type_t v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    id v13 = sub_10005CB98;
    char v14 = &unk_1002B0D20;
    uint64_t v15 = a1[4].isa;
    dispatch_sync((dispatch_queue_t)v9, &v10);

    objc_storeStrong((id *)&v15, 0);
    int v16 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v7 = oslog[0];
      os_log_type_t v8 = v18;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring display layout observation; no layout given...",
        buf,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
    int v16 = 1;
  }
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(location, 0);
}

id sub_10005CB98(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa monitor];
  [v2 invalidate];

  [(objc_class *)a1[4].isa setMonitor:0];
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Handling display layout update...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa markBuddyComplete];
  return [(objc_class *)a1[4].isa didMarkBuddyComplete];
}

void sub_10005D7F0(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v10, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    id v9 = [objc_alloc((Class)FBSShutdownOptions) initWithReason:@"Failed Lockdown Reboot"];
    [v9 setRebootType:1];
    id v3 = +[FBSSystemService sharedService];
    [v3 shutdownWithOptions:v9];

    objc_storeStrong(&v9, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Lockdown enabled", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10005D9BC(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v2, &stru_1002B1220);

  objc_storeStrong(location, 0);
}

void sub_10005DA34(id a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v5 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v1 = oslog[0];
    os_log_type_t v2 = v5;
    sub_10004B24C(v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Suspending...", (uint8_t *)v4, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v3 = +[UIApplication sharedApplication];
  [(UIApplication *)v3 suspend];
}

void sub_10005DD30(uint64_t a1)
{
  id v2 = +[BYSetupStateManager sharedManager];
  unsigned __int8 v3 = [v2 didRestoreFromBackup];

  char v8 = v3 & 1;
  char v7 = BYSetupAssistantHasCompletedInitialRun() & 1;
  id v4 = +[BuddyCloudConfigManager sharedManager];
  unsigned __int8 v5 = [v4 isMultiUser];

  if ([*(id *)(a1 + 32) initialAnimateLanguageChoiceValue])
  {
    [*(id *)(a1 + 32) setCachedStartupCause:1];
    goto LABEL_18;
  }
  if ([*(id *)(a1 + 32) initialDisplayZoomRestartValue])
  {
    [*(id *)(a1 + 32) setCachedStartupCause:2];
    goto LABEL_18;
  }
  if ([*(id *)(a1 + 32) _isBackInBuddyForActivationOnly])
  {
    if ((*(unsigned char *)(*(void *)(a1 + 32) + 105) & 1) == 0)
    {
      [*(id *)(a1 + 32) setCachedStartupCause:3];
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  if ([*(id *)(a1 + 32) launchedForMigration])
  {
    [*(id *)(a1 + 32) setCachedStartupCause:6];
    goto LABEL_18;
  }
  if ([*(id *)(a1 + 32) _isBackInBuddyAfterRestoreFromBackup:v8 & 1])
  {
    [*(id *)(a1 + 32) setCachedStartupCause:4];
    goto LABEL_18;
  }
  if (*(unsigned char *)(*(void *)(a1 + 32) + 105))
  {
LABEL_7:
    [*(id *)(a1 + 32) setCachedStartupCause:7];
    goto LABEL_18;
  }
  if (v7 & 1) == 0 || (v5) {
    [*(id *)(a1 + 32) setCachedStartupCause:0];
  }
  else {
    [*(id *)(a1 + 32) setCachedStartupCause:5];
  }
LABEL_18:
  id v6 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v6, *(dispatch_block_t *)(a1 + 40));
}

void sub_10005F044(NSAssertionHandler *a1)
{
  sub_10005F188();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("DMCReturnToServiceController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getDMCReturnToServiceControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"SetupController.m", 189, @"Unable to find class %s", "DMCReturnToServiceController" file lineNumber description];

    __break(1u);
  }
  qword_100321AB8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10005F188()
{
  if (!sub_10005F2B8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *DMCEnrollmentProviderLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"SetupController.m", 188, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10005F2B8()
{
  if (!qword_100321AC0) {
    sub_10005F370();
  }
  return qword_100321AC0;
}

uint64_t sub_10005F370()
{
  uint64_t result = _sl_dlopen();
  qword_100321AC0 = result;
  return result;
}

void sub_10005F404(NSAssertionHandler *a1)
{
  sub_10005F548();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getWFBuddyViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"SetupController.m", 198, @"Unable to find class %s", "WFBuddyViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321AC8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10005F548()
{
  if (!sub_10005F678())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WiFiKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"SetupController.m", 197, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10005F678()
{
  if (!qword_100321AD0) {
    sub_10005F730();
  }
  return qword_100321AD0;
}

uint64_t sub_10005F730()
{
  uint64_t result = _sl_dlopen();
  qword_100321AD0 = result;
  return result;
}

void sub_10005F7C4(NSAssertionHandler *a1)
{
  sub_10005F908();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WFNetworkListController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getWFNetworkListControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"SetupController.m", 200, @"Unable to find class %s", "WFNetworkListController" file lineNumber description];

    __break(1u);
  }
  qword_100321AD8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10005F908()
{
  if (!sub_10005FA38())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WiFiKitLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"SetupController.m", 196, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10005FA38()
{
  if (!qword_100321AE0) {
    sub_10005FAF0();
  }
  return qword_100321AE0;
}

uint64_t sub_10005FAF0()
{
  uint64_t result = _sl_dlopen();
  qword_100321AE0 = result;
  return result;
}

void sub_10005FB84(NSAssertionHandler *a1)
{
  sub_10005FCC8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("BCSConfigurationManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getBCSConfigurationManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"SetupController.m", 213, @"Unable to find class %s", "BCSConfigurationManager" file lineNumber description];

    __break(1u);
  }
  qword_100321AE8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10005FCC8()
{
  if (!sub_10005FDF8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *BarcodeSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"SetupController.m", 212, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10005FDF8()
{
  if (!qword_100321AF0) {
    sub_10005FEB0();
  }
  return qword_100321AF0;
}

uint64_t sub_10005FEB0()
{
  uint64_t result = _sl_dlopen();
  qword_100321AF0 = result;
  return result;
}

id sub_10006293C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _finishedWithPasscode:*(void *)(a1 + 40) a1, a1];
}

void sub_100063750(NSObject *a1, uint64_t a2, id obj)
{
  uint64_t v17 = a1;
  *((void *)&location + 1) = a2;
  *(void *)&long long location = 0;
  objc_storeStrong((id *)&location, obj);
  oslog[1] = a1;
  if (location == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v14;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Renew credentials was successful!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = DWORD2(location);
      char v10 = 0;
      char v8 = 0;
      if (_BYIsInternalInstall())
      {
        char v7 = (NSString *)location;
      }
      else if ((void)location)
      {
        id v11 = [(id)location domain];
        char v10 = 1;
        char v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v11, [(id)location code]);
        id v9 = v7;
        char v8 = 1;
      }
      else
      {
        char v7 = 0;
      }
      sub_1000639A4((uint64_t)v18, v6, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Renew credentials failed (%d): %{public}@", v18, 0x12u);
      if (v8) {

      }
      if (v10) {
    }
      }
    objc_storeStrong((id *)&v12, 0);
  }
  [(objc_class *)a1[4].isa startRestore:a1[5].isa];
  objc_storeStrong((id *)&location, 0);
}

double sub_1000639A4(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)&double result = 67109378;
  *(_DWORD *)a1 = 67109378;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2114;
  *(void *)(a1 + 10) = a3;
  return result;
}

void sub_100063AD4(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v20 = a1;
  [*(id *)(a1 + 32) setBackupItem:*(void *)(a1 + 40)];
  id v19 = 0;
  id v2 = [*(id *)(a1 + 32) backupItem];
  id v3 = [v2 snapshotID];

  id v19 = v3;
  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) backupItem];
    id v5 = [v4 backupUDID];
    sub_100063D38((uint64_t)buf, (uint64_t)v5, (uint64_t)v19);
    _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Starting iCloud Restore for backup UDID %@ and snapshot %ld...", buf, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  int v6 = *(void **)(*(void *)(a1 + 32) + 104);
  id v7 = [*(id *)(a1 + 32) backupItem];
  id v8 = [v7 backupUDID];
  id v9 = v19;
  id v10 = [*(id *)(a1 + 32) _createRestoreOptions];
  id v11 = _NSConcreteStackBlock;
  int v12 = -1073741824;
  int v13 = 0;
  os_log_type_t v14 = sub_100063D58;
  uint64_t v15 = &unk_1002B1340;
  v16[0] = *(id *)(a1 + 32);
  v16[1] = v19;
  [v6 startRestoreForBackupUDID:v8 snapshotID:v9 options:v10 completion:&v11];

  objc_storeStrong(v16, 0);
}

double sub_100063D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_100063D58(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v20[1] = (id)a1;
  if (location[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      char v9 = 0;
      char v7 = 0;
      if (_BYIsInternalInstall())
      {
        int v6 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v10 = [location[0] domain];
        char v9 = 1;
        int v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v10, [location[0] code]);
        id v8 = v6;
        char v7 = 1;
      }
      else
      {
        int v6 = 0;
      }
      sub_10004BB7C((uint64_t)v22, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Error starting restore: %{public}@", v22, 0xCu);
      if (v7) {

      }
      if (v9) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 32) _failedToStartRestoreForSnapshotID:*(void *)(a1 + 40) error:location[0]];
  }
  else
  {
    v20[0] = (id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v20[0], OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v20[0];
      os_log_type_t v4 = v19;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "iCloud Restore started successfully", buf, 2u);
    }
    objc_storeStrong(v20, 0);
    id v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    uint64_t v15 = sub_100064038;
    int v16 = &unk_1002B0D20;
    id v17 = *(id *)(a1 + 32);
    dispatch_sync((dispatch_queue_t)v5, &block);

    objc_storeStrong(&v17, 0);
  }
  objc_storeStrong(location, 0);
}

id sub_100064038(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgressText];
}

double sub_1000649B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 134218242;
  *(_DWORD *)a1 = 134218242;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_1000649D4(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "Failed to start restore: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    int v15 = 1;
  }
  else
  {
    os_log_t v14 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v14;
      os_log_type_t v4 = v13;
      sub_10004B24C(v12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "iCloud Restore started successfully", v12, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
    id v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    char v9 = sub_100064BEC;
    id v10 = &unk_1002B0D20;
    id v11 = a1[4].isa;
    dispatch_sync((dispatch_queue_t)v5, &block);

    objc_storeStrong((id *)&v11, 0);
    int v15 = 0;
  }
  objc_storeStrong(location, 0);
}

id sub_100064BEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgressText];
}

id sub_100064C30(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  if ([a1[4] restoreState] != (id)3 && objc_msgSend(a1[5], "code") != (id)202)
  {
    [a1[4] setRestoreState:2];
    objc_initWeak(location, a1[4]);
    id v2 = a1[5];
    os_log_type_t v4 = _NSConcreteStackBlock;
    int v5 = -1073741824;
    int v6 = 0;
    int v7 = sub_100064D94;
    int v8 = &unk_1002B0CA8;
    objc_copyWeak(&v9, location);
    id v10 = +[BuddyRestoreHelpers alertForBackupError:v2 okButtonAction:&v4];
    [a1[4] _presentAlert:v10];
    objc_storeStrong(&v10, 0);
    objc_destroyWeak(&v9);
    objc_destroyWeak(location);
  }
  return [a1[4] releaseAssertions];
}

void sub_100064D94(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

double sub_10006652C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 134218498;
  *(_DWORD *)a1 = 134218498;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a4;
  return result;
}

double sub_100066554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2112;
  *(void *)(a1 + 34) = a5;
  return result;
}

void sub_1000667AC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa backupDeviceController];
  [v2 retryBackup];

  id v3 = [(objc_class *)a1[4].isa backupDeviceController];
  id v4 = [v3 error];

  if (v4)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [(objc_class *)a1[4].isa backupDeviceController];
      id v6 = [v5 error];
      sub_10004BB7C((uint64_t)buf, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Failed to retry backup: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    Class isa = a1[4].isa;
    id v8 = [(objc_class *)isa backupDeviceController];
    id v9 = [v8 error];
    [(objc_class *)isa handleBackupFailed:v9];
  }
}

void sub_10006696C(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

void sub_100066AC8(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = (id)_BYLoggingFacility();
  os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)location[0], v72, "Displaying backup failed alert to user: %@", buf, 0xCu);
  }
  objc_storeStrong(location, 0);
  char v71 = 0;
  id v70 = 0;
  id v2 = [*(id *)(a1 + 32) domain];
  BOOL v3 = 0;
  if ([v2 isEqualToString:@"MBErrorDomain"]) {
    BOOL v3 = [*(id *)(a1 + 32) code] == (id)303;
  }

  if (v3)
  {
    objc_storeStrong(&v70, @"BACKUP_FAILED_ALERT_MESSAGE_QUOTA");
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) proximitySetupController];
    char v71 = [v4 hasConnection] & 1;

    id v5 = [*(id *)(a1 + 40) proximitySetupController];
    id v69 = [v5 deviceClass];

    id v6 = +[BuddyLocalizationUtilities siblingDeviceSpecificLocalizedStringKeyForKey:@"BACKUP_FAILED_ALERT_MESSAGE" deviceClass:v69];
    id v7 = v70;
    id v70 = v6;

    if (v71)
    {
      id v8 = (id)SFLocalizableWAPIStringKeyForKey();
      id v9 = v70;
      id v70 = v8;
    }
    objc_storeStrong(&v69, 0);
  }
  id v10 = +[NSBundle mainBundle];
  id v11 = [(NSBundle *)v10 localizedStringForKey:v70 value:&stru_1002B4E18 table:@"RestoreFromBackup"];
  id v12 = [*(id *)(a1 + 40) backupDeviceController];
  id v13 = [v12 backingUpDeviceName];
  id v68 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, v13);

  os_log_t v14 = +[NSBundle mainBundle];
  int v15 = [(NSBundle *)v14 localizedStringForKey:@"BACKUP_FAILED_ALERT_TITLE" value:&stru_1002B4E18 table:@"RestoreFromBackup"];
  id v67 = +[UIAlertController alertControllerWithTitle:v15 message:v68 preferredStyle:1];

  objc_initWeak(&from, *(id *)(a1 + 40));
  size_t v58 = _NSConcreteStackBlock;
  int v59 = -1073741824;
  int v60 = 0;
  uint64_t v61 = sub_100067544;
  uint64_t v62 = &unk_1002B1390;
  id v63 = *(id *)(a1 + 40);
  objc_copyWeak(&v64, &from);
  id v65 = objc_retainBlock(&v58);
  if (v71)
  {
    id v16 = v67;
    id v17 = +[NSBundle mainBundle];
    os_log_type_t v18 = [(NSBundle *)v17 localizedStringForKey:@"TRY_AGAIN_ALERT" value:&stru_1002B4E18 table:@"RestoreFromBackup"];
    uint64_t v52 = _NSConcreteStackBlock;
    int v53 = -1073741824;
    int v54 = 0;
    uint64_t v55 = sub_10006778C;
    uint64_t v56 = &unk_1002B1040;
    id v57 = *(id *)(a1 + 40);
    os_log_type_t v19 = +[UIAlertAction actionWithTitle:v18 style:0 handler:&v52];
    [v16 addAction:v19];

    id v20 = v67;
    uint64_t v21 = +[NSBundle mainBundle];
    id v22 = [(NSBundle *)v21 localizedStringForKey:@"CHOOSE_A_DIFFERENT_BACKUP" value:&stru_1002B4E18 table:@"RestoreFromBackup"];
    id v23 = +[UIAlertAction actionWithTitle:v22 style:1 handler:v65];
    [v20 addAction:v23];

    objc_storeStrong(&v57, 0);
  }
  else
  {
    unint64_t v24 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    int v47 = -1073741824;
    int v48 = 0;
    uint64_t v49 = sub_1000677DC;
    objc_super v50 = &unk_1002B0D20;
    id v51 = *(id *)(a1 + 40);
    dispatch_async(v24, &block);

    id v25 = [*(id *)(a1 + 40) pendingRestoreState];
    id v45 = [v25 backupItem];

    id v26 = +[NSBundle mainBundle];
    uint64_t v27 = [(NSBundle *)v26 localizedStringForKey:@"USE_BACKUP_FROM" value:&stru_1002B4E18 table:@"RestoreFromBackup"];
    id v28 = [v45 dateString];
    id v44 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v27, v28);

    id v29 = v67;
    id v30 = v44;
    id v36 = _NSConcreteStackBlock;
    int v37 = -1073741824;
    int v38 = 0;
    id v39 = sub_100067854;
    id v40 = &unk_1002B13B8;
    id v41 = *(id *)(a1 + 40);
    id v42 = v45;
    objc_copyWeak(&v43, &from);
    uint64_t v31 = +[UIAlertAction actionWithTitle:v30 style:0 handler:&v36];
    [v29 addAction:v31];

    id v32 = v67;
    id v33 = +[NSBundle mainBundle];
    id v35 = [(NSBundle *)v33 localizedStringForKey:@"OTHER_OPTIONS" value:&stru_1002B4E18 table:@"RestoreFromBackup"];
    BOOL v34 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:");
    [v32 addAction:v34];

    objc_destroyWeak(&v43);
    objc_storeStrong(&v42, 0);
    objc_storeStrong(&v41, 0);
    objc_storeStrong(&v44, 0);
    objc_storeStrong(&v45, 0);
    objc_storeStrong(&v51, 0);
  }
  [*(id *)(a1 + 40) _presentAlert:v67];
  objc_storeStrong(&v65, 0);
  objc_destroyWeak(&v64);
  objc_storeStrong(&v63, 0);
  objc_destroyWeak(&from);
  objc_storeStrong(&v67, 0);
  objc_storeStrong(&v68, 0);
  objc_storeStrong(&v70, 0);
}

void sub_100067544(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  BOOL v3 = dispatch_get_global_queue(0, 0);
  block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100067650;
  id v8 = &unk_1002B1368;
  id v9 = a1[4];
  objc_copyWeak(v10, a1 + 5);
  dispatch_async(v3, &block);

  objc_destroyWeak(v10);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_100067650(id *a1)
{
  v9[2] = a1;
  v9[1] = a1;
  id v2 = [a1[4] proximitySetupController];
  [v2 setupFinished];

  BOOL v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100067748;
  id v8 = &unk_1002B0CA8;
  objc_copyWeak(v9, a1 + 5);
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_destroyWeak(v9);
}

void sub_100067748(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

void sub_10006778C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] reattemptBackup];
  objc_storeStrong(location, 0);
}

void sub_1000677DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v2 setupFinished];

  id v3 = [*(id *)(a1 + 32) backupDeviceController];
  [v3 reset];
}

void sub_100067854(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12[1] = (id)a1;
  if ([*(id *)(a1 + 32) takeAssertions])
  {
    id v3 = [*(id *)(a1 + 32) pendingRestoreState];
    id v4 = [*(id *)(a1 + 32) pendingRestoreState];
    id v5 = [v4 backupItem];
    [v3 setAttemptedBackupItem:v5];

    [*(id *)(a1 + 32) setRestoreState:0];
    *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
    [*(id *)(a1 + 32) updateProgressText];
    [*(id *)(a1 + 32) renewCredentialsThenStartRestore:*(void *)(a1 + 40)];
  }
  else
  {
    int v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    id v9 = sub_100067A24;
    id v10 = &unk_1002B0CA8;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    v12[0] = +[BuddyRestoreHelpers alertForBackupError:0 okButtonAction:&v6];
    [*(id *)(a1 + 32) _presentAlert:v12[0]];
    objc_storeStrong(v12, 0);
    objc_destroyWeak(&v11);
  }
  objc_storeStrong(location, 0);
}

void sub_100067A24(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

id sub_100067ECC(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v17 = a1;
  BOOL v16 = 0;
  id v2 = [*(id *)(a1 + 32) view];
  id v3 = [v2 window];
  BOOL v4 = v3 != 0;

  BOOL v16 = v4;
  if (v4)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = oslog;
      os_log_type_t v6 = v14;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Backup Progress presenting alert .... ", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    return [*(id *)(a1 + 32) presentViewController:*(void *)(a1 + 40) animated:1 completion:0];
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = v12;
      os_log_type_t v9 = v11;
      sub_10004B24C(v10);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Backup Progress saving alert post viewDidAppear .... ", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    return [*(id *)(a1 + 32) setAlert:*(void *)(a1 + 40)];
  }
}

uint64_t sub_100068050(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
}

void sub_100068680(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  [WeakRetained popBackFromProgress:WeakRetained a1];
  objc_storeStrong(&v4, 0);
  objc_storeStrong(location, 0);
}

void sub_1000686E8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  [v3[0] takeAssertions];
  [v3[0] _attemptRestore];
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

void sub_100068758(uint64_t a1)
{
  uint64_t v123 = a1;
  uint64_t v122 = a1;
  BOOL v121 = 0;
  BOOL v121 = ([*(id *)(a1 + 32) hasAssertions] & 1) == 0;
  char v120 = 1;
  id v2 = [*(id *)(a1 + 32) pendingRestoreState];
  unsigned __int8 v3 = [v2 useLatestSnapshot];

  if (v3)
  {
    id location = (id)_BYLoggingFacility();
    os_log_type_t v118 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = location;
      os_log_type_t v5 = v118;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Searching for the latest snapshot...", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    id v6 = [*(id *)(a1 + 32) pendingRestoreState];
    id v7 = [v6 backupItem];
    id v116 = [v7 backupUUID];

    id v8 = [*(id *)(a1 + 32) pendingRestoreState];
    id v115 = [v8 snapshotDate];

    id v114 = 0;
    os_log_type_t v9 = *(void **)(a1 + 32);
    id v113 = 0;
    id v10 = [v9 latestSnapshotForBackupUUID:v116 lastSnapshotDate:v115 error:&v113];
    objc_storeStrong(&v114, v113);
    [*(id *)(a1 + 32) setBackupItem:v10];

    if (v114)
    {
      id v112 = (id)_BYLoggingFacility();
      os_log_type_t v111 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v112, OS_LOG_TYPE_ERROR))
      {
        char v109 = 0;
        char v107 = 0;
        if (_BYIsInternalInstall())
        {
          os_log_type_t v11 = (NSString *)v114;
        }
        else if (v114)
        {
          id v110 = [v114 domain];
          char v109 = 1;
          os_log_type_t v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v110, [v114 code]);
          v108 = v11;
          char v107 = 1;
        }
        else
        {
          os_log_type_t v11 = 0;
        }
        sub_10004BB7C((uint64_t)v126, (uint64_t)v11);
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v112, v111, "Failed to find the latest snapshot: %{public}@", v126, 0xCu);
        if (v107) {

        }
        if (v109) {
      }
        }
      objc_storeStrong(&v112, 0);
      BOOL v121 = 1;
    }
    else
    {
      id v12 = [*(id *)(a1 + 32) pendingRestoreState];
      id v13 = [*(id *)(a1 + 32) backupItem];
      [v12 setBackupItem:v13 updateBackupMetadata:1 prefetchAccounts:0];
    }
    objc_storeStrong(&v114, 0);
    objc_storeStrong(&v115, 0);
    objc_storeStrong(&v116, 0);
  }
  else
  {
    id v14 = [*(id *)(a1 + 32) backupDeviceController];
    id v15 = [v14 backingUpDeviceUUID];
    id v16 = [*(id *)(a1 + 32) backupItem];
    id v17 = [v16 backup];
    id v18 = [v17 backupUUID];

    if (v15 == v18)
    {
      id v19 = [*(id *)(a1 + 32) backupDeviceController];
      id v106 = [v19 error];

      if (v106)
      {
        id v20 = (__CFString *)[v106 domain];
        BOOL v21 = 0;
        if (v20 == @"BFFBackupDeviceErrorDomain") {
          BOOL v21 = [v106 code] == (id)-1;
        }

        if (v21)
        {
          os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
          os_log_type_t v104 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = oslog;
            os_log_type_t v23 = v104;
            sub_10004B24C(v103);
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Source device disconnected at/before pushing to the restore progress pane", v103, 2u);
          }
          objc_storeStrong((id *)&oslog, 0);
          id v24 = [*(id *)(a1 + 32) waitForBackupToComplete];
          [*(id *)(a1 + 32) setBackupItem:v24];

          id v25 = *(void **)(a1 + 32);
          id v26 = [v25 backupItem];
          [v25 _traceAnalyticsForGuideUserToBackup:0 foundBackup:v26 != 0 polledForBackup:1];

          id v27 = [*(id *)(a1 + 32) backupItem];
          if (!v27)
          {
            os_log_t v102 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v101 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
            {
              id v28 = v102;
              os_log_type_t v29 = v101;
              sub_10004B24C(v100);
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "No latest backup found; giving up!", v100, 2u);
            }
            objc_storeStrong((id *)&v102, 0);
            [*(id *)(a1 + 32) handleBackupFailed:v106];
            char v120 = 0;
            BOOL v121 = 1;
          }
        }
        else
        {
          id v30 = *(void **)(a1 + 32);
          id v31 = [v30 backupDeviceController];
          id v32 = [v31 error];
          [v30 _traceAnalyticsForGuideUserToBackup:v32 foundBackup:0 polledForBackup:0];

          id v33 = *(void **)(a1 + 32);
          id v34 = [v33 backupDeviceController];
          id v35 = [v34 error];
          [v33 handleBackupFailed:v35];

          char v120 = 0;
          BOOL v121 = 1;
        }
      }
      else
      {
        id v36 = [*(id *)(a1 + 32) backupDeviceController];
        unsigned __int8 v37 = [v36 backupFinished];

        if (v37)
        {
          id v38 = [*(id *)(a1 + 32) backupItem];
          id v39 = [v38 snapshot];
          id v40 = [v39 date];
          id v41 = (void **)(*(void *)(a1 + 32) + 16);
          id v42 = *v41;
          *id v41 = v40;

          os_log_t v99 = (os_log_t)(id)_BYLoggingFacility();
          os_log_type_t v98 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
          {
            id v43 = v99;
            os_log_type_t v44 = v98;
            sub_10004B24C(v97);
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Waiting 30 seconds for iCloud servers to ingest the new backup...", v97, 2u);
          }
          objc_storeStrong((id *)&v99, 0);
          sleep(0x1Eu);
          os_log_t v96 = (os_log_t)(id)_BYLoggingFacility();
          os_log_type_t v95 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            id v45 = v96;
            os_log_type_t v46 = v95;
            sub_10004B24C(v94);
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "Searching for latest snapshot for source device...", v94, 2u);
          }
          objc_storeStrong((id *)&v96, 0);
          id v93 = 0;
          id v92 = 0;
          int v91 = 0;
          do
          {
            int v47 = *(void **)(a1 + 32);
            obunint64_t j = v93;
            id v48 = [v47 latestSnapshotForSourceDevice:&obj];
            objc_storeStrong(&v93, obj);
            id v49 = v92;
            id v92 = v48;

            if (v92) {
              break;
            }
            os_log_t v89 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v88 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              objc_super v50 = v89;
              os_log_type_t v51 = v88;
              char v52 = _BYIsInternalInstall();
              char v86 = 0;
              char v84 = 0;
              if (v52)
              {
                int v53 = (NSString *)v93;
              }
              else if (v93)
              {
                id v87 = [v93 domain];
                char v86 = 1;
                int v53 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v87, [v93 code]);
                id v85 = v53;
                char v84 = 1;
              }
              else
              {
                int v53 = 0;
              }
              sub_10004BB7C((uint64_t)v125, (uint64_t)v53);
              _os_log_impl((void *)&_mh_execute_header, v50, v51, "Unable to retrieve latest backup: %{public}@", v125, 0xCu);
              if (v84) {

              }
              if (v86) {
            }
              }
            objc_storeStrong((id *)&v89, 0);
            os_log_t v83 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v82 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            {
              int v54 = v83;
              os_log_type_t v55 = v82;
              sub_10004B24C(v81);
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Attempting to retry to get latest backup due to error...", v81, 2u);
            }
            objc_storeStrong((id *)&v83, 0);
            ++v91;
            sleep(5u);
          }
          while (v91 < 3);
          [*(id *)(a1 + 32) _traceAnalyticsForGuideUserToBackup:0 foundBackup:v92 != 0 polledForBackup:0];
          if (v92)
          {
            os_log_t v80 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v79 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
            {
              sub_10004B238((uint64_t)v124, (uint64_t)v92);
              _os_log_impl((void *)&_mh_execute_header, v80, v79, "Found latest backup item: %@", v124, 0xCu);
            }
            objc_storeStrong((id *)&v80, 0);
            id v56 = [*(id *)(a1 + 32) pendingRestoreState];
            [v56 setBackupItem:v92 updateBackupMetadata:1 prefetchAccounts:0];

            [*(id *)(a1 + 32) setBackupItem:v92];
          }
          else
          {
            BOOL v121 = 1;
          }
          objc_storeStrong(&v92, 0);
          objc_storeStrong(&v93, 0);
        }
      }
      objc_storeStrong(&v106, 0);
    }
  }
  id v57 = [*(id *)(a1 + 32) pendingRestoreState];
  id v58 = [*(id *)(a1 + 32) pendingRestoreState];
  id v59 = [v58 backupItem];
  [v57 setAttemptedBackupItem:v59];

  if (v121)
  {
    if (v120)
    {
      id v65 = &_dispatch_main_q;
      uint64_t v66 = _NSConcreteStackBlock;
      int v67 = -1073741824;
      int v68 = 0;
      id v69 = sub_10006955C;
      id v70 = &unk_1002B1408;
      objc_copyWeak(&v72, (id *)(a1 + 40));
      id v71 = *(id *)(a1 + 32);
      dispatch_async((dispatch_queue_t)v65, &v66);

      objc_storeStrong(&v71, 0);
      objc_destroyWeak(&v72);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setRestoreState:0];
    int v60 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v74 = -1073741824;
    int v75 = 0;
    int64_t v76 = sub_100069530;
    uint64_t v77 = &unk_1002B0D20;
    id v78 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v60, &block);

    id v61 = [*(id *)(a1 + 32) backupDeviceController];
    char v62 = [v61 isBackingUp] ^ 1;

    if (v62)
    {
      id v63 = *(void **)(a1 + 32);
      id v64 = [v63 backupItem];
      [v63 renewCredentialsThenStartRestore:v64];
    }
    objc_storeStrong(&v78, 0);
  }
}

id sub_100069530(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgressText:a1, a1];
}

void sub_10006955C(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = _NSConcreteStackBlock;
  int v3 = -1073741824;
  int v4 = 0;
  os_log_type_t v5 = sub_100069664;
  id v6 = &unk_1002B0CA8;
  objc_copyWeak(&v7, a1 + 5);
  location[0] = +[BuddyRestoreHelpers alertForBackupError:0 okButtonAction:&v2];
  [a1[4] _presentAlert:location[0]];
  objc_storeStrong(location, 0);
  objc_destroyWeak(&v7);
}

void sub_100069638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_100069664(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

void sub_1000697C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000697F4(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

id sub_10006A650(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:a1, a1];
}

void sub_10006A67C(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  objc_initWeak(location, *(id *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_10006A7A4;
  id v7 = &unk_1002B0CA8;
  objc_copyWeak(&v8, location);
  id v9 = +[BuddyRestoreHelpers alertForBackupError:v2 okButtonAction:&v3];
  [*(id *)(a1 + 32) _presentAlert:v9];
  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v8);
  objc_destroyWeak(location);
}

void sub_10006A770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 56));
  _Unwind_Resume(a1);
}

void sub_10006A7A4(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] popBackFromProgress];
  objc_storeStrong(location, 0);
}

id sub_10006A8CC(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 120) = *(void *)(a1 + 48);
  return [*(id *)(a1 + 32) updateProgress];
}

id sub_10006AA54(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress];
}

void sub_10006AD6C(id *a1)
{
  id v10[2] = a1;
  v10[1] = a1;
  uint64_t v2 = objc_alloc_init(BuddyDisplayMonitor);
  [a1[4] setDisplayMonitor:v2];

  id v3 = [a1[4] displayMonitor];
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_10006AE88;
  id v8 = &unk_1002B12F0;
  id v9 = a1[4];
  v10[0] = a1[5];
  [v3 wakeDisplay:&v4];

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
}

id sub_10006AE88(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa lockdownModeProvider];
  unsigned __int8 v3 = [v2 hasStagedEnablement];

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = oslog[0];
      os_log_type_t v5 = v15;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Enabling lockdown...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v6 = [(objc_class *)a1[4].isa lockdownModeProvider];
    id v8 = _NSConcreteStackBlock;
    int v9 = -1073741824;
    int v10 = 0;
    os_log_type_t v11 = sub_10006B010;
    id v12 = &unk_1002B0FF0;
    uint64_t v13 = a1[5].isa;
    [v6 enableWithStrategy:1 completionHandler:&v8];

    objc_storeStrong((id *)&v13, 0);
  }
  else
  {
    [(objc_class *)a1[5].isa rebootDevice:0];
  }
  return [(objc_class *)a1[4].isa releaseAssertions];
}

void sub_10006B010(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v8, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v3 = v7;
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Lockdown enabled", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  [(objc_class *)a1[4].isa rebootDevice:1];
  objc_storeStrong(location, 0);
}

void sub_10006B4D4(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = (id)_BYLoggingFacility();
  os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = [a1[4] backupItem];
    id v3 = [v2 backupUUID];
    sub_10004B238((uint64_t)buf, (uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)location[0], v29, "Attempting to retrieve latest snapshot again to retry restore (for backup UUID %@)...", buf, 0xCu);
  }
  objc_storeStrong(location, 0);
  id v28 = 0;
  id v4 = [a1[4] backupItem];
  id v5 = [v4 backupUUID];
  uint64_t v6 = *((void *)a1[4] + 13);
  obunint64_t j = 0;
  id v7 = +[BuddyBackupUtilities backupForUUID:v5 withManager:v6 error:&obj];
  objc_storeStrong(&v28, obj);
  id v27 = v7;

  if (v28)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      char v22 = 0;
      char v20 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v8 = (NSString *)v28;
      }
      else if (v28)
      {
        id v23 = [v28 domain];
        char v22 = 1;
        os_log_type_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v23, [v28 code]);
        id v21 = v8;
        char v20 = 1;
      }
      else
      {
        os_log_type_t v8 = 0;
      }
      sub_10004BB7C((uint64_t)v31, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Failed to get the list of backups: %{public}@", v31, 0xCu);
      if (v20) {

      }
      if (v22) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    id v19 = +[BuddyBackupUtilities latestCommittedSnapshotFromBackup:v27 requireCompatible:1];
    int v9 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    uint64_t v13 = sub_10006B910;
    id v14 = &unk_1002B1480;
    id v15 = v19;
    id v16 = v27;
    id v17 = a1[4];
    id v18 = a1[5];
    dispatch_async((dispatch_queue_t)v9, &block);

    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    objc_storeStrong(&v19, 0);
  }
  objc_storeStrong(&v27, 0);
  objc_storeStrong(&v28, 0);
}

void sub_10006B910(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    location[0] = +[RestorableBackupItem restorableBackupItemWithBackup:*(void *)(a1 + 40) snapshot:*(void *)(a1 + 32)];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Found latest backup item: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 48) renewCredentialsThenStartRestore:location[0]];
    objc_storeStrong(location, 0);
  }
  else
  {
    os_log_t v6 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v5 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v2 = v6;
      os_log_type_t v3 = v5;
      sub_10004B24C(v4);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get the latest snapshot from a backup (no snapshot returned)", (uint8_t *)v4, 2u);
    }
    objc_storeStrong((id *)&v6, 0);
    [*(id *)(a1 + 48) restoreFailedWithError:*(void *)(a1 + 56)];
  }
}

id sub_10006DCC4()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321AF8;
  uint64_t v13 = qword_100321AF8;
  if (!qword_100321AF8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10006E980;
    os_log_t v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_10006E980(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10006DDDC(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  int v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_10006DF00;
  uint64_t v9 = &unk_1002B14A8;
  char v12 = v15 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_10006DF00(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10006E000((uint64_t)buf, *(unsigned char *)(a1 + 48) & 1, *(void *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "iCloudQuota needs to run: %d, error: %@", buf, 0x12u);
  }
  objc_storeStrong((id *)oslog, 0);
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

double sub_10006E000(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)&double result = 67109378;
  *(_DWORD *)a1 = 67109378;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(void *)(a1 + 10) = a3;
  return result;
}

id sub_10006E1BC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B08;
  uint64_t v13 = qword_100321B08;
  if (!qword_100321B08)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10006ED40;
    int v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_10006ED40(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10006E980(NSAssertionHandler *a1)
{
  sub_10006EAC4();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("ICQUpgradeFlowManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getICQUpgradeFlowManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyiCloudQuotaController.m", 29, @"Unable to find class %s", "ICQUpgradeFlowManager" file lineNumber description];

    __break(1u);
  }
  qword_100321AF8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10006EAC4()
{
  if (!sub_10006EBF4())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *iCloudQuotaUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyiCloudQuotaController.m", 28, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10006EBF4()
{
  if (!qword_100321B00) {
    sub_10006ECAC();
  }
  return qword_100321B00;
}

uint64_t sub_10006ECAC()
{
  uint64_t result = _sl_dlopen();
  qword_100321B00 = result;
  return result;
}

void sub_10006ED40(NSAssertionHandler *a1)
{
  sub_10006EE84();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("ICQOfferManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getICQOfferManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyiCloudQuotaController.m", 25, @"Unable to find class %s", "ICQOfferManager" file lineNumber description];

    __break(1u);
  }
  qword_100321B08 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10006EE84()
{
  if (!sub_10006EFB4())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *iCloudQuotaLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyiCloudQuotaController.m", 24, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10006EFB4()
{
  if (!qword_100321B10) {
    sub_10006F06C();
  }
  return qword_100321B10;
}

uint64_t sub_10006F06C()
{
  uint64_t result = _sl_dlopen();
  qword_100321B10 = result;
  return result;
}

double sub_1000701CC()
{
  return -5.0;
}

void sub_100071288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000712A8(uint64_t a1, char a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v4 = [*(id *)(a1 + 32) selectedChoice];
    [WeakRetained selectChoice:v4];
  }
}

void sub_100072F70(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  if (location[0]) {
    [location[0] _reverifyUserConfigurationState];
  }
  objc_storeStrong(location, 0);
}

uint64_t sub_100072FCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100073004(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

id sub_100073DD8(NSObject *a1, char a2)
{
  char v15 = a1;
  char v14 = a2;
  oslog[1] = a1;
  if (a2)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = oslog[0];
      os_log_type_t v4 = v12;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out waiting for Wi-Fi!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v5 = v10;
      os_log_type_t v6 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Wi-Fi Acquired!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  return [(objc_class *)a1[4].isa _startFlow];
}

void sub_100073F00(uint64_t a1)
{
  uint64_t v12 = a1;
  location[1] = (id)a1;
  location[0] = +[UIAlertController alertControllerWithTitle:*(void *)(v12 + 32) message:*(void *)(v12 + 40) preferredStyle:1];
  id v2 = location[0];
  uint64_t v3 = *(void *)(a1 + 48);
  os_log_type_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  uint64_t v8 = sub_100074078;
  os_log_type_t v9 = &unk_1002B1040;
  id v10 = *(id *)(a1 + 56);
  os_log_type_t v4 = +[UIAlertAction actionWithTitle:v3 style:0 handler:&v6];
  [v2 addAction:v4, v6, v7, v8, v9];

  id v5 = [*(id *)(*(void *)(a1 + 64) + 16) topViewController];
  [v5 presentViewController:location[0] animated:1 completion:0];

  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
}

void sub_100074078(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = +[BYManagedAppleIDBootstrap sharedManager];
  [v3 switchToLoginWindowDueToError:a1[4] completion:0];

  objc_storeStrong(location, 0);
}

void sub_100074844(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_100074888(uint64_t a1)
{
}

double sub_100074894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a4;
  return result;
}

void sub_1000748BC(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = (id)a1;
  id v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  os_log_type_t v9 = sub_100074A28;
  id v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = *(id *)(a1 + 32);
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_100074A28(uint64_t a1)
{
  id v12[2] = (id)a1;
  v12[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) _stopSpinning];
    [*(id *)(a1 + 40) _retryFlowIfPossibleOrFailWithError:*(void *)(a1 + 32)];
  }
  else
  {
    id v2 = +[BYManagedAppleIDBootstrap sharedManager];
    [v2 postUserSwitchContextHasBeenUsed];

    v12[0] = [*(id *)(a1 + 48) objectForKeyedSubscript:AKAuthenticationUsernameKey];
    id location = [*(id *)(a1 + 48) objectForKeyedSubscript:AKAuthenticationPasswordKey];
    id v3 = *(id **)(a1 + 40);
    id v4 = [v3[1] passwordForCreating];
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    int v8 = sub_100074BDC;
    os_log_type_t v9 = &unk_1002B15C8;
    id v10 = *(id *)(a1 + 40);
    [v3 createAndRecoverAccountWithUsername:v12[0] password:location rawPassword:v4 completion:&v5];

    objc_storeStrong(&v10, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(v12, 0);
  }
}

void sub_100074BDC(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  id v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_100074D00;
  os_log_type_t v9 = &unk_1002B15A0;
  id v10 = *(id *)(a1 + 32);
  char v12 = v15 & 1;
  id v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_100074D00(uint64_t a1)
{
  [*(id *)(a1 + 32) _stopSpinning:a1];
  if ((*(unsigned char *)(a1 + 48) & 1) == 0 || *(void *)(a1 + 40)) {
    return [*(id *)(a1 + 32) _retryFlowIfPossibleOrFailWithError:*(void *)(a1 + 40)];
  }
  id v2 = +[BYManagedAppleIDBootstrap sharedManager];
  [v2 markUserWithManagedCredentials];

  return [*(id *)(a1 + 32) controllerDone];
}

void sub_100075000(void *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = [*(id *)(a1[4] + 16) topViewController];
  location[0] = [v2 navigationItem];

  +[BFFViewControllerSpinnerManager startAnimatingSpinnerFor:*(void *)(a1[4] + 16) identifier:@"passwordchange"];
  id v3 = +[NSBundle mainBundle];
  id v4 = [(NSBundle *)v3 localizedStringForKey:@"MULTI_USER_LOADING_PASSWORD_CHANGE" value:&stru_1002B4E18 table:@"Localizable"];
  [location[0] setTitle:v4];

  id v5 = [*(id *)(a1[4] + 16) topViewController];
  id v6 = [v5 view];
  id v7 = [v6 window];
  [v7 setUserInteractionEnabled:0];

  objc_storeStrong(location, 0);
}

void sub_10007538C(uint64_t a1, char a2, char a3, id obj)
{
  uint64_t v17 = a1;
  char v16 = a2;
  char v15 = a3;
  id location = 0;
  objc_storeStrong(&location, obj);
  v13[1] = (id)a1;
  if (v15)
  {
    v13[0] = (id)objc_opt_new();
    id v12 = [v13[0] aa_primaryAppleAccount];
    if (*(void *)(a1 + 32)) {
      [v12 _aa_setRawPassword:*(void *)(a1 + 32)];
    }
    id v5 = *(void **)(a1 + 40);
    id v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    os_log_type_t v9 = sub_1000754F8;
    id v10 = &unk_1002B0C80;
    id v11 = *(id *)(a1 + 48);
    [v5 enableDataClassesForAccount:v12 completion:&v6];
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v12, 0);
    objc_storeStrong(v13, 0);
  }
  else if (*(void *)(a1 + 48))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1000754F8(id *a1, char a2, id obj)
{
  uint64_t v13 = a1;
  char v12 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v10[1] = a1;
  if (v12)
  {
    id v4 = +[BYManagedAppleIDBootstrap sharedManager];
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    int v8 = sub_100075624;
    os_log_type_t v9 = &unk_1002B0C80;
    v10[0] = a1[4];
    [v4 recoverEMCSWithCompletion:&v5];

    objc_storeStrong(v10, 0);
  }
  else if (a1[4])
  {
    (*((void (**)(void))a1[4] + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100075624(NSObject *a1, char a2, id obj)
{
  int v7 = a1;
  char v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to recover EMCS after password change. Ignoring error: %{public}@.", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa) {
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100075BA8(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = +[NSDate date];
  [a1[4] setStartTime:v2];

  objc_initWeak(location, a1[4]);
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  char v6 = sub_100075CF0;
  int v7 = &unk_1002B0CA8;
  objc_copyWeak(&v8, location);
  id v9 = objc_retainBlock(&v3);
  if ([a1[4] addWirelessNetworks]) {
    [a1[4] waitForWirelessConnection:v9];
  }
  else {
    (*((void (**)(void))v9 + 2))();
  }
  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v8);
  objc_destroyWeak(location);
}

void sub_100075CF0(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] endProximityIfApplicable];
  id v1 = [location[0] startTime];
  [v1 timeIntervalSinceNow];
  double v3 = -v2;

  double v19 = v3;
  if (v3 >= 1.0)
  {
    char v6 = &_dispatch_main_q;
    int v7 = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    id v10 = sub_100075F54;
    id v11 = &unk_1002B0D20;
    id v12 = location[0];
    dispatch_async((dispatch_queue_t)v6, &v7);

    objc_storeStrong(&v12, 0);
  }
  else
  {
    dispatch_time_t v4 = dispatch_time(0, (uint64_t)((1.0 - v19) * 1000000000.0));
    int v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v14 = -1073741824;
    int v15 = 0;
    char v16 = sub_100075EFC;
    uint64_t v17 = &unk_1002B0D20;
    id v18 = location[0];
    dispatch_after(v4, (dispatch_queue_t)v5, &block);

    objc_storeStrong(&v18, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100075EFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_100075F54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_100076424(NSObject *a1, char a2)
{
  int v15 = a1;
  char v14 = a2;
  oslog[1] = a1;
  if (a2)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      double v3 = oslog[0];
      os_log_type_t v4 = v12;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out waiting for device to connect to Wi-Fi", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = v10;
      os_log_type_t v6 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Device connected to Wi-Fi!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    id v7 = [(objc_class *)a1[4].isa networkProvider];
    [v7 assumeNetworkReachabilityOverWiFi];
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
}

uint64_t sub_10007687C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v36 = a2;
  uint64_t v35 = a1;
  char v34 = 0;
  id v3 = [*(id *)(a1 + 32) proximitySetupController];
  unsigned __int8 v4 = [v3 hasAppliedSettings];

  char v34 = v4 & 1;
  BOOL v33 = 0;
  id v5 = [*(id *)(a1 + 32) proximitySetupController];
  id v6 = [v5 information];
  id v7 = [v6 networks];
  BOOL v8 = [v7 count] != 0;

  BOOL v33 = v8;
  char v32 = 0;
  id v9 = [*(id *)(a1 + 32) proximitySetupController];
  id v10 = [v9 handshake];
  LOBYTE(v7) = [v10 hasPasscodeSet];

  char v32 = v7 & 1;
  char v31 = 0;
  id v11 = [*(id *)(a1 + 32) proximitySetupController];
  LOBYTE(v10) = [v11 hasValidatedPasscode];

  char v31 = v10 & 1;
  char v30 = 0;
  if ((v7 & 1) == 0 || (BOOL v12 = 1, (v31 & 1) == 0)) {
    BOOL v12 = (v32 & 1) == 0;
  }
  char v30 = v12;
  char v29 = 0;
  if (v36 == 1)
  {
    char v29 = 1;
  }
  else if (v36 == 2)
  {
    char v29 = 0;
    char v30 = 1;
  }
  if (v29 & 1) != 0 && (v30)
  {
    uint64_t v13 = (void (**)(id, void))[*(id *)(a1 + 32) prepareForDeviceMigrationBlock];
    v13[2](v13, 0);
  }
  char v28 = 0;
  id v14 = [*(id *)(a1 + 32) networkProvider];
  char v15 = [v14 connectedOverWiFiAndNetworkReachable] ^ 1;

  char v28 = v15 & 1;
  char v27 = 0;
  char v16 = 0;
  if (v34)
  {
    char v16 = 0;
    if (v28)
    {
      char v16 = 0;
      if (v33) {
        char v16 = v30;
      }
    }
  }
  char v27 = v16;
  if ((v16 & 1) == 0)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100076C7C((uint64_t)buf, v34 & 1, v28 & 1, v33, v30 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v25, "Proximity Applying Settings does not need to run (applied settings: %d, waiting for Wi-Fi: %d, has networks to add: %d, user is trusted: %d)", buf, 0x1Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    uint64_t v17 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    int v20 = -1073741824;
    int v21 = 0;
    char v22 = sub_100076CA8;
    id v23 = &unk_1002B0D20;
    id v24 = *(id *)(a1 + 32);
    dispatch_async(v17, &block);

    objc_storeStrong(&v24, 0);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

double sub_100076C7C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double result = 2.0542726e-289;
  *(_DWORD *)a1 = 67109888;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  return result;
}

id sub_100076CA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) endProximityIfApplicable:a1, a1];
}

void sub_100077364(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _activationController:a1:a1];
  [v1 restart];
}

void sub_100077B04()
{
  if (!sub_100086A70())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WiFiKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyNavigationFlowController.m", 110, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

void sub_100078188(id *a1)
{
  v9[2] = a1;
  v9[1] = a1;
  id v2 = [a1[4] flowProducer];
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_10007827C;
  id v7 = &unk_1002B0CD0;
  id v8 = a1[4];
  v9[0] = a1[5];
  [v2 prepareWithCompletion:&v3];

  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10007827C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = &_dispatch_main_q;
  dispatch_assert_queue_V2((dispatch_queue_t)v2);

  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v18;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Flow started preparation complete!", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _resumeNavigationQueue];
  id v16 = 0;
  id v5 = [(objc_class *)a1[4].isa flowProducer];
  id v16 = [v5 initialFlowItemClass];

  os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)v20, (uint64_t)v16);
    _os_log_impl((void *)&_mh_execute_header, v15, v14, "Starting initial flow with %@...", v20, 0xCu);
  }
  objc_storeStrong((id *)&v15, 0);
  id location = [(objc_class *)a1[4].isa _createConditionalFlowItemForClass:v16];
  id v6 = [(objc_class *)a1[4].isa flowProducer];
  id v12 = [v6 debutFlowItemClass];

  while (1)
  {
    BOOL v7 = 0;
    if (v16) {
      BOOL v7 = location == 0;
    }
    if (!v7) {
      break;
    }
    id v8 = [(objc_class *)a1[4].isa _createConditionalFlowItemForClass:v16];
    id v9 = location;
    id location = v8;

    if (!location)
    {
      if (v12 == v16) {
        objc_exception_throw(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", +[NSString stringWithFormat:@"Debut flow item (%@) could not be created", v12], 0, 0));
      }
      id v10 = [(objc_class *)a1[4].isa flowProducer];
      id v16 = [v10 potentialNextFlowItemClassFollowingFlowItemClass:v16];
    }
  }
  if (!location) {
    objc_exception_throw(+[NSException exceptionWithName:@"No Initial Flow Item Found" reason:0 userInfo:0]);
  }
  if (v12)
  {
    [(objc_class *)a1[4].isa _setupInitialFlowFromInitialFlowItem:location debutFlowItemClass:v12 completion:a1[5].isa];
  }
  else
  {
    [(objc_class *)a1[4].isa _beginEventForNavigationDuration];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v11 = [(objc_class *)a1[4].isa buddyControllers];
      [v11 addObject:location];

      [location startFlowAnimated:0];
    }
    else
    {
      [(objc_class *)a1[4].isa pushFlowItem:location animated:0];
    }
    if (a1[5].isa) {
      (*((void (**)(void))a1[5].isa + 2))();
    }
  }
  objc_storeStrong(&location, 0);
}

void sub_1000786F4(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  id v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_1000787CC;
  BOOL v7 = &unk_1002B0D20;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_1000787CC(id *a1)
{
  void v15[2] = a1;
  v15[1] = a1;
  [a1[4] setTapFreeSetUp:1];
  id v2 = [a1[4] buddyControllers];
  v15[0] = [v2 lastObject];

  id v3 = [a1[4] navigator];
  id v14 = [v3 topViewController];

  char v12 = 0;
  BOOL v4 = 0;
  if (v15[0])
  {
    id v13 = [a1[4] _viewControllerForBuddyController:v15[0]];
    char v12 = 1;
    BOOL v4 = v13 == v14;
  }
  if (v12) {

  }
  if (v4 && ([a1[4] _doesTapFreeSetUpAffectsClass:objc_opt_class()] & 1) != 0)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (objc_class *)objc_opt_class();
      id location = NSStringFromClass(v5);
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "TFDEP: Forcing %@ to be done for tap free setup!", buf, 0xCu);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v6 = a1[4];
    id v7 = v15[0];
    id v8 = [v6 _flowForFlowItem:v15[0]];
    [v6 _flowItemDone:v7 flow:v8 nextItemClass:0 nextItem:0];
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(v15, 0);
}

void sub_100078AE4(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  id v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_100078BBC;
  id v7 = &unk_1002B0D20;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100078BBC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Proceeding past language/locale pane(s)...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  id v5 = [(objc_class *)isa _flowItemFollowingClass:objc_opt_class()];
  [(objc_class *)isa pushFlowItem:v5 inFlow:0 animated:1];
}

void sub_100078D78(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  id v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_100078E50;
  os_log_type_t v7 = &unk_1002B0D20;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100078E50(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Proceeding past appearance pane...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  id v5 = [(objc_class *)isa _flowItemFollowingClass:objc_opt_class()];
  [(objc_class *)isa pushFlowItem:v5 inFlow:0 animated:1];
}

void sub_10007900C(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  id v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_1000790E4;
  os_log_type_t v7 = &unk_1002B0D20;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_1000790E4(id *a1)
{
  id v12[2] = a1;
  v12[1] = a1;
  id v2 = [a1[4] buddyControllers];
  v12[0] = [v2 lastObject];

  if ([v12[0] isMemberOfClass:objc_opt_class()])
  {
    id location = objc_alloc_init((Class)NSMutableArray);
    memset(v9, 0, sizeof(v9));
    id v3 = [a1[4] buddyControllers];
    id v4 = [v3 countByEnumeratingWithState:v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v9[2];
      do
      {
        for (unint64_t i = 0; i < (unint64_t)v4; ++i)
        {
          if (*(void *)v9[2] != v5) {
            objc_enumerationMutation(v3);
          }
          id v10 = *(id *)(v9[1] + 8 * i);
          if (([v10 isMemberOfClass:objc_opt_class()] & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              continue;
            }
          }
          id v7 = location;
          id v8 = [a1[4] _viewControllerForBuddyController:v10];
          [v7 addObject:v8];
        }
        id v4 = [v3 countByEnumeratingWithState:v9 objects:v13 count:16];
      }
      while (v4);
    }

    [a1[4] setViewControllersToRemoveOnPush:location];
    [a1[4] flowItemDone:v12[0]];
    objc_storeStrong(&location, 0);
  }
  objc_storeStrong(v12, 0);
}

double sub_10007AF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 136315394;
  *(_DWORD *)a1 = 136315394;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_10007B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_10007B484(NSObject *a1, char a2)
{
  os_log_type_t v18 = a1;
  char v17 = a2;
  oslog[1] = a1;
  if (*(unsigned char *)(*((void *)a1[8].isa + 1) + 24))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id location = (id)objc_opt_class();
      sub_10004BB7C((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Extended init completion called more than once for %{public}@", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    *(unsigned char *)(*((void *)a1[8].isa + 1) + 24) = 1;
    id v3 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v5 = -1073741824;
    int v6 = 0;
    id v7 = sub_10007B6B8;
    id v8 = &unk_1002B1690;
    id v9 = a1[4].isa;
    char v13 = v17 & 1;
    id v10 = a1[5].isa;
    id v11 = a1[6].isa;
    char v12 = a1[7].isa;
    dispatch_async((dispatch_queue_t)v3, &block);

    objc_storeStrong((id *)&v12, 0);
    objc_storeStrong((id *)&v11, 0);
    objc_storeStrong((id *)&v10, 0);
    objc_storeStrong((id *)&v9, 0);
  }
}

void sub_10007B6B8(uint64_t a1)
{
  void v15[2] = (id)a1;
  v15[1] = (id)a1;
  v15[0] = +[NSDate date];
  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id location = (id)objc_opt_class();
    sub_10007B97C((uint64_t)buf, (uint64_t)location, *(unsigned char *)(a1 + 64) & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Extended init for %{public}@ finished, shouldShow = %d", buf, 0x12u);
    objc_storeStrong(&location, 0);
  }
  objc_storeStrong((id *)&oslog, 0);
  os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    [v15[0] timeIntervalSinceDate:*(void *)(a1 + 40)];
    uint64_t v3 = v2;
    id v9 = (id)objc_opt_class();
    sub_1000649B4((uint64_t)v18, v3, (uint64_t)v9);
    _os_log_debug_impl((void *)&_mh_execute_header, v11, v10, "Extended initialization took %fs for %@", v18, 0x16u);
    objc_storeStrong(&v9, 0);
  }
  objc_storeStrong((id *)&v11, 0);
  id v4 = [*(id *)(a1 + 48) analyticsManager];
  v16[0] = @"class";
  int v5 = (objc_class *)objc_opt_class();
  int v6 = NSStringFromClass(v5);
  v17[0] = v6;
  v16[1] = @"duration";
  [v15[0] timeIntervalSinceDate:*(void *)(a1 + 40)];
  id v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v17[1] = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
  [v4 addEvent:@"com.apple.setupassistant.ios.extendedinitialization" withPayload:v8 persist:1];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  objc_storeStrong(v15, 0);
}

double sub_10007B97C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)&double result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

id sub_10007C24C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startDisablingInteractionForExtendedInitialization:a1, a1];
}

id sub_10007C278(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 64)) {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) buddyControllers];
    [v3 addObject:*(void *)(a1 + 40)];

    return [*(id *)(a1 + 40) startFlowAnimated:*(unsigned char *)(a1 + 72) & 1];
  }
  else if (*(void *)(a1 + 48))
  {
    return [*(id *)(a1 + 48) flowItemDone:*(void *)(a1 + 56)];
  }
  else
  {
    return [*(id *)(a1 + 32) flowItemDone:*(void *)(a1 + 56)];
  }
}

id sub_10007C338(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startDisablingInteractionForExtendedInitialization:a1:a1];
}

id sub_10007C364(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 56)) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  if (a2) {
    return [*(id *)(a1 + 32) pushFlowItem:*(void *)(a1 + 40) inFlow:*(void *)(a1 + 48) withExtendedInitialization:0 animated:*(unsigned char *)(a1 + 64) & 1];
  }
  if (*(void *)(a1 + 48)) {
    return [*(id *)(a1 + 48) flowItemDone:*(void *)(a1 + 40)];
  }
  return [*(id *)(a1 + 32) flowItemDone:*(void *)(a1 + 40)];
}

id sub_10007C408(uint64_t a1)
{
  return [*(id *)(a1 + 32) _endEventForNavigationDurationFromFlowItem:*(void *)(a1 + 40) toFlowItem:*(void *)(a1 + 48) a1:a1];
}

void sub_10007C440(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v6 = a1;
  if (location[0])
  {
LABEL_9:
    int v5 = 0;
    goto LABEL_10;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10004CECC((uint64_t)buf, *(void *)(a1 + 32), *(void *)(a1 + 48));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "No view controller for BuddyController %{public}@ in flow %{public}@", buf, 0x16u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (*(void *)(a1 + 48)) {
      [*(id *)(a1 + 48) flowItemDone:*(void *)(a1 + 32)];
    }
    else {
      [*(id *)(a1 + 40) flowItemDone:*(void *)(a1 + 32)];
    }
    goto LABEL_9;
  }
  id v3 = [*(id *)(a1 + 40) buddyControllers];
  [v3 addObject:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) startFlowItem:*(unsigned char *)(a1 + 56) & 1];
  int v5 = 1;
LABEL_10:
  objc_storeStrong(location, 0);
}

void sub_10007D42C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = [v2 navigator:a1, a1];
  id v4 = [v3 navigationController];
  [v2 navigationController:v4 didShowViewController:a1[5] operation:1 animated:1];

  if (a1[6]) {
    (*(void (**)(void))(a1[6] + 16))();
  }
}

uint64_t sub_10007D4D8(uint64_t result)
{
  if (*(void *)(result + 40)) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 40) + 16))(*(void *)(result + 40), *(void *)(result + 32));
  }
  return result;
}

uint64_t sub_10007D51C(uint64_t result)
{
  if (*(void *)(result + 40)) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 40) + 16))(*(void *)(result + 40), *(void *)(result + 32));
  }
  return result;
}

void sub_10007D560(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 32) navigator];
    id v4 = [v3 view];
    id v5 = [v4 window];
    sub_10007AF48((uint64_t)buf, (uint64_t)"-[BuddyNavigationFlowController _presentViewControllerForBuddyController:animated:willPresentViewController:completion:]_block_invoke", (uint64_t)v5);
    _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], v21, "%s setUserInteractionEnabled YES %p", buf, 0x16u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v6 = [*(id *)(a1 + 32) navigator];
  id v7 = [v6 view];
  id v8 = [v7 window];
  [v8 setUserInteractionEnabled:1];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    int v20 = 1;
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    os_log_t v19 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (id)objc_opt_class();
      id v16 = (id)objc_opt_class();
      sub_10004CECC((uint64_t)v25, (uint64_t)v17, (uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v18, "Hosted view controller creation for %{public}@ => %{public}@ finished", v25, 0x16u);
      objc_storeStrong(&v16, 0);
      objc_storeStrong(&v17, 0);
    }
    objc_storeStrong((id *)&v19, 0);
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      id v9 = +[NSDate date];
      [(NSDate *)v9 timeIntervalSinceDate:*(void *)(a1 + 56)];
      uint64_t v11 = v10;
      id v13 = (id)objc_opt_class();
      sub_10007D958((uint64_t)v24, v11, (uint64_t)v13);
      _os_log_debug_impl((void *)&_mh_execute_header, v15, v14, "Hosted view controller creation took %fs for %{public}@", v24, 0x16u);

      objc_storeStrong(&v13, 0);
    }
    objc_storeStrong((id *)&v15, 0);
    +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"BuddyNavigationFlowController"];
    if (location[0])
    {
      if (*(void *)(a1 + 64)) {
        (*(void (**)(void))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64));
      }
      [*(id *)(a1 + 32) _hideBackButtonIfNecessaryOnFlowItem:withViewController:location[0] v13];
      id v12 = [*(id *)(a1 + 32) buddyControllers];
      [v12 addObject:*(void *)(a1 + 48)];
    }
    if (*(void *)(a1 + 72)) {
      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
    int v20 = 0;
  }
  objc_storeStrong(location, 0);
}

double sub_10007D958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 134218242;
  *(_DWORD *)a1 = 134218242;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_10007D978(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  Class isa = a1[4].isa;
  dispatch_time_t v3 = dispatch_time(0, 10000000000);
  if (dispatch_semaphore_wait(isa, v3))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id location = (id)objc_opt_class();
      sub_10004BB7C((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v15, "Hosted view controller creation timed out for %{public}@", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
    id v4 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    id v8 = sub_10007DBAC;
    id v9 = &unk_1002B17D0;
    v13[1] = a1[9].isa;
    uint64_t v10 = a1[6].isa;
    id v13[2] = a1[10].isa;
    uint64_t v11 = a1[5].isa;
    v13[0] = a1[8].isa;
    id v12 = a1[7].isa;
    dispatch_async((dispatch_queue_t)v4, &block);

    objc_storeStrong((id *)&v12, 0);
    objc_storeStrong(v13, 0);
    objc_storeStrong((id *)&v11, 0);
    objc_storeStrong((id *)&v10, 0);
  }
}

NSObject *sub_10007DBAC(NSObject *result)
{
  id v1 = result;
  os_log_t oslog[2] = result;
  oslog[1] = result;
  if ((*(unsigned char *)(*((void *)result[8].isa + 1) + 24) & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
    {
      id v2 = [(objc_class *)v1[4].isa navigator];
      id v3 = [v2 view];
      id v4 = [v3 window];
      sub_10007AF48((uint64_t)buf, (uint64_t)"-[BuddyNavigationFlowController _presentViewControllerForBuddyController:animated:willPresentViewController:completion:]_block_invoke", (uint64_t)v4);
      _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEBUG, "%s setUserInteractionEnabled YES %p", buf, 0x16u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v5 = [(objc_class *)v1[4].isa navigator];
    id v6 = [v5 view];
    id v7 = [v6 window];
    [v7 setUserInteractionEnabled:1];

    +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"BuddyNavigationFlowController"];
    *(unsigned char *)(*((void *)v1[9].isa + 1) + 24) = 1;
    double result = [(objc_class *)v1[5].isa cancelHostedPresentation];
    if (v1[7].isa) {
      return (*((uint64_t (**)(void))v1[7].isa + 2))();
    }
  }
  return result;
}

id sub_10007FA50()
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B20;
  uint64_t v13 = qword_100321B20;
  if (!qword_100321B20)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100086BBC;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100086BBC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

uint64_t sub_100080F48(uint64_t a1, objc_class *a2)
{
  uint64_t v15 = a1;
  Class aClass = a2;
  __b[9] = a1;
  memset(__b, 0, 0x40uLL);
  id v3 = [*(id *)(a1 + 32) navigator];
  id v4 = [v3 viewControllers];

  id v5 = [v4 countByEnumeratingWithState:__b objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)__b[2];
    while (2)
    {
      for (unint64_t i = 0; i < (unint64_t)v5; ++i)
      {
        if (*(void *)__b[2] != v6) {
          objc_enumerationMutation(v4);
        }
        __b[8] = *(void *)(__b[1] + 8 * i);
        if (objc_opt_isKindOfClass())
        {
          os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
          os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
          {
            id location = NSStringFromClass(aClass);
            sub_10004B238((uint64_t)buf, (uint64_t)location);
            _os_log_debug_impl((void *)&_mh_execute_header, oslog, v11, "%@ present", buf, 0xCu);

            objc_storeStrong(&location, 0);
          }
          objc_storeStrong((id *)&oslog, 0);
          char v16 = 1;
          int v9 = 1;
          goto LABEL_13;
        }
      }
      id v5 = [v4 countByEnumeratingWithState:__b objects:v18 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  int v9 = 0;
LABEL_13:

  if (!v9) {
    char v16 = 0;
  }
  return v16 & 1;
}

id sub_100081180(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _popToBuddyControllerWithClass:*(void *)(a1 + 40) withOffset:*(void *)(a1 + 48) animated:*(unsigned char *)(a1 + 56) & 1 a1, a1];

  return v1;
}

void sub_1000811D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v2 beginAdvertisingProximitySetup];

  id v3 = [*(id *)(a1 + 32) environment];
  id v4 = [v3 miscState];
  [v4 setMigrationManager:0];
}

id sub_10008126C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2);
  id v3 = [*(id *)(a1 + 32) _popToBuddyControllerWithClass:*(void *)(a1 + 48) withOffset:*(void *)(a1 + 56) animated:*(unsigned char *)(a1 + 64) & 1];

  return v3;
}

uint64_t sub_100081770(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v13 = a1;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  memset(__b, 0, sizeof(__b));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 136) allObjects];
  id v3 = [v2 reverseObjectEnumerator];

  id v4 = [v3 countByEnumeratingWithState:__b objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)__b[2];
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)__b[2] != v5) {
        objc_enumerationMutation(v3);
      }
      uint64_t v11 = *(void *)(__b[1] + 8 * v6);
      id v7 = [*(id *)(a1 + 32) navigator];
      id v8 = [v7 viewControllers];
      uint64_t v12 = (uint64_t)[v8 indexOfObject:v11];

      if (v12 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      if (++v6 >= (unint64_t)v4)
      {
        id v4 = [v3 countByEnumeratingWithState:__b objects:v15 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  else {
    return v12 + 1;
  }
}

uint64_t sub_10008196C(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v11 = a1;
  uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  memset(__b, 0, sizeof(__b));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 128) allObjects];
  id v3 = [v2 reverseObjectEnumerator];

  id v4 = [v3 countByEnumeratingWithState:__b objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)__b[2];
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)__b[2] != v5) {
        objc_enumerationMutation(v3);
      }
      uint64_t v9 = *(void *)(__b[1] + 8 * v6);
      uint64_t v10 = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 112) indexOfObject:v9];
      if (v10 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      if (++v6 >= (unint64_t)v4)
      {
        id v4 = [v3 countByEnumeratingWithState:__b objects:v13 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  else {
    return v10 + 1;
  }
}

id sub_100081D38(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigator:a1:a1];
  id v2 = [v1 viewControllers];
  id v3 = [v2 indexOfFirstMatchingCondition:&stru_1002B18D8];

  return v3;
}

BOOL sub_100081DBC(id a1, UIViewController *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_opt_class();
  char v2 = 0;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    char v2 = objc_opt_isKindOfClass() ^ 1;
  }
  objc_storeStrong(location, 0);
  return v2 & 1;
}

id sub_100081E54(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) buddyControllers:a1, a1];
  id v2 = [v1 indexOfFirstMatchingCondition:&stru_1002B1918];

  return v2;
}

BOOL sub_100081EB4(id a1, id a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_opt_class();
  char v2 = 0;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    char v2 = 0;
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      char v2 = objc_opt_isKindOfClass() ^ 1;
    }
  }
  objc_storeStrong(location, 0);
  return v2 & 1;
}

void sub_100082208(id a1, unint64_t a2, NSArray *a3, NSString *a4)
{
  id v13 = a1;
  unint64_t v12 = a2;
  id location = 0;
  objc_storeStrong(&location, a3);
  id v10 = 0;
  objc_storeStrong(&v10, a4);
  oslog[1] = (os_log_t)a1;
  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)v10);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v8, "%@ generated index should return an actual index", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  unint64_t v6 = v12;
  if (v6 > (unint64_t)[location count])
  {
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)v14, (uint64_t)v10);
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%@ insertion out of bounds", v14, 0xCu);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000823B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startDisablingInteractionForExtendedInitialization:a1, a1];
}

void sub_1000823E0(NSObject *a1, char a2)
{
  id v17 = a1;
  char v16 = a2;
  oslog[1] = a1;
  [(objc_class *)a1[4].isa _stopDisablingInteractionForExtendedInitialization];
  if ((v16 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id v3 = (objc_class *)objc_opt_class();
      id location = NSStringFromClass(v3);
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "%@ doesn't want to show, but showing anyway.", buf, 0xCu);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  uint64_t v12 = 0;
  uint64_t v12 = (*((uint64_t (**)(void))a1[6].isa + 2))();
  id v4 = [(objc_class *)a1[4].isa navigator];
  id v5 = [v4 viewControllers];
  id v11 = [v5 mutableCopy];

  (*((void (**)(void))a1[7].isa + 2))();
  [v11 insertObject:a1[5].isa atIndex:v12];
  id v6 = [(objc_class *)a1[4].isa navigator];
  [v6 setViewControllers:v11 animated:0];

  uint64_t v10 = (*((uint64_t (**)(void))a1[8].isa + 2))();
  Class isa = a1[7].isa;
  id v8 = [(objc_class *)a1[4].isa buddyControllers];
  (*((void (**)(Class, uint64_t, id, const __CFString *))isa + 2))(isa, v10, v8, @"buddyControllerInsertionIndexGenerator");

  id v9 = [(objc_class *)a1[4].isa buddyControllers];
  [v9 insertObject:a1[5].isa atIndex:v10];

  if (a1[9].isa) {
    (*((void (**)(void))a1[9].isa + 2))();
  }
  objc_storeStrong(&v11, 0);
}

void sub_1000829F8(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = [a1[4] navigator];
  id v3 = [v2 viewControllers];
  location[0] = [v3 lastObject];

  id v4 = a1[4];
  id v5 = [v4 navigator];
  id v6 = [v5 navigationController];
  [v4 navigationController:v6 willShowViewController:location[0] operation:2 animated:1];

  id v7 = a1[4];
  id v8 = [v7 navigator];
  id v9 = [v8 navigationController];
  [v7 navigationController:v9 didShowViewController:location[0] operation:2 animated:1];

  objc_storeStrong(location, 0);
}

double sub_100084C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)&double result = 138544130;
  *(_DWORD *)a1 = 138544130;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a5;
  return result;
}

double sub_100084C8C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&double result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

double sub_100084CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a4;
  return result;
}

BOOL sub_100084CE4(id a1, BFFFlowItem *a2, unint64_t a3, BOOL *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  objc_storeStrong(location, 0);
  return isKindOfClass & 1;
}

id sub_100085FE0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = a1;
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = location[0];
  id v5 = [WeakRetained environment:WeakRetained v9];
  [WeakRetained _injectDependencies:v4 withEnvironment:v5];

  id v6 = location[0];
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
  return v6;
}

uint64_t sub_100086A70()
{
  if (!qword_100321B18) {
    sub_100086B28();
  }
  return qword_100321B18;
}

uint64_t sub_100086B28()
{
  uint64_t result = _sl_dlopen();
  qword_100321B18 = result;
  return result;
}

void sub_100086BBC(NSAssertionHandler *a1)
{
  sub_100077B04();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getWFBuddyViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyNavigationFlowController.m", 111, @"Unable to find class %s", "WFBuddyViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321B20 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100087060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,_Unwind_Exception *exception_object,id location)
{
}

void sub_1000870B4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = [WeakRetained skipWiFi];

  if (v4)
  {
    id v5 = objc_loadWeakRetained(a1 + 4);
    id v6 = (void (**)(void))[v5 skipWiFi];
    v6[2](v6);
  }
  objc_storeStrong(location, 0);
}

void sub_100087178(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = [WeakRetained useWiFi];

  if (v4)
  {
    id v5 = objc_loadWeakRetained(a1 + 4);
    id v6 = (void (**)(void))[v5 useWiFi];
    v6[2](v6);
  }
  objc_storeStrong(location, 0);
}

NSArray *__cdecl sub_100087EC8(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createLanguageSelectorDefaults];
}

NSArray *__cdecl sub_100087EFC(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createLanguageSelectorAllData];
}

NSArray *__cdecl sub_100087F8C(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorDefaults];
}

NSArray *__cdecl sub_100087FC0(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorAllData];
}

NSArray *__cdecl sub_100087FF4(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorSelectedData];
}

NSArray *__cdecl sub_100088080(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorDefaultsForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorDefaultsForExpress:", 0, a1, a1);
}

NSArray *__cdecl sub_1000880B8(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorAllDataForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorAllDataForExpress:", 0, a1, a1);
}

NSArray *__cdecl sub_100088148(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorDefaultsForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorDefaultsForExpress:", 1, a1, a1);
}

NSArray *__cdecl sub_100088184(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorAllDataForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorAllDataForExpress:", 1, a1, a1);
}

double sub_1000885D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&double result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

uint64_t sub_100088A98(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v23 = 0;
  objc_storeStrong(&v23, a3);
  id v5 = (void *)a1[4];
  id v6 = [location[0] identifier];
  LOBYTE(v5) = [v5 containsObject:v6];

  char v22 = v5 & 1;
  id v7 = (void *)a1[4];
  id v8 = [v23 identifier];
  unsigned __int8 v9 = [v7 containsObject:v8];

  if (v22 & 1) != 0 && (v9)
  {
    uint64_t v10 = (void *)a1[5];
    id v11 = [location[0] identifier];
    LOBYTE(v10) = [v10 containsObject:v11];

    char v21 = v10 & 1;
    uint64_t v12 = (void *)a1[5];
    id v13 = [v23 identifier];
    unsigned __int8 v14 = [v12 containsObject:v13];

    if (v21 & 1) == 0 || (v14)
    {
      if ((v21 & 1) != 0 || (v14 & 1) == 0)
      {
        uint64_t v15 = (void *)a1[4];
        id v16 = [location[0] identifier];
        id v17 = [v15 indexOfObject:v16];
        os_log_type_t v18 = (void *)a1[4];
        id v19 = [v23 identifier];
        uint64_t v25 = v17 - (unsigned char *)[v18 indexOfObject:v19];
      }
      else
      {
        uint64_t v25 = 1;
      }
    }
    else
    {
      uint64_t v25 = -1;
    }
  }
  else if (v22 & 1) == 0 || (v9)
  {
    uint64_t v25 = (v22 & 1) == 0 && (v9 & 1) != 0;
  }
  else
  {
    uint64_t v25 = -1;
  }
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
  return v25;
}

id sub_100088F14(id a1, UIKeyboardInputMode *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] displayName];
  objc_storeStrong(location, 0);

  return v2;
}

void sub_100088F84(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14[3] = a3;
  v14[2] = a4;
  v14[1] = a1;
  v14[0] = location[0];
  id v13 = [v14[0] displayName];
  id v12 = 0;
  if ((unint64_t)[a1[4] countForObject:v13] > 1)
  {
    id v7 = [v14[0] identifier];
    id v8 = (id)UIKeyboardLocalizedSWLayoutName();
    id v9 = v12;
    id v12 = v8;
  }
  id v10 = [v14[0] identifier];
  id v11 = +[BuddyMultilingualLanguageData withLanguageMainDisplayText:v13 secondaryDisplayText:v12 identifier:v10 isDefault:1 editingOption:3];

  [a1[5] addObject:v11];
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(v14, 0);
  objc_storeStrong(location, 0);
}

id sub_100089360(id a1, id a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] identifier];
  objc_storeStrong(location, 0);

  return v2;
}

id sub_1000893D0(id a1, UIKeyboardInputMode *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] displayName];
  objc_storeStrong(location, 0);

  return v2;
}

void sub_100089440(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16[3] = a3;
  void v16[2] = a4;
  v16[1] = (id)a1;
  v16[0] = location[0];
  id v15 = [v16[0] displayName];
  id v14 = 0;
  if ((unint64_t)[*(id *)(a1 + 32) countForObject:v15] > 1)
  {
    id v7 = [v16[0] identifier];
    id v8 = (id)UIKeyboardLocalizedSWLayoutName();
    id v9 = v14;
    id v14 = v8;
  }
  id v10 = [v16[0] identifier];
  id v11 = *(void **)(a1 + 40);
  id v12 = [v16[0] identifier];
  id v13 = +[BuddyMultilingualLanguageData withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:](BuddyMultilingualLanguageData, "withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:", v15, v14, v10, (unint64_t)[v11 containsObject:v12] & 1, 3);

  [*(id *)(a1 + 48) addObject:v13];
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(v16, 0);
  objc_storeStrong(location, 0);
}

id sub_100089AF0(id a1, UIKeyboardInputMode *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] identifier];
  objc_storeStrong(location, 0);

  return v2;
}

id sub_100089B60(id a1, id a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] identifier];
  objc_storeStrong(location, 0);

  return v2;
}

id sub_100089BD0(id a1, UIKeyboardInputMode *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] displayName];
  objc_storeStrong(location, 0);

  return v2;
}

void sub_10008A890(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [*(id *)(a1 + 64) eraseWithWindow:*(void *)(a1 + 32) navigationController:*(void *)(a1 + 40) proximitySetupController:*(void *)(a1 + 48) analyticsManager:*(void *)(a1 + 56)];
  objc_storeStrong(location, 0);
}

void sub_10008AAB4(id *a1)
{
  v14[2] = a1;
  v14[1] = a1;
  [a1[4] setupFinished];
  id v2 = a1[5];
  id v3 = [a1[6] topViewController];
  id v4 = (objc_class *)objc_opt_class();
  id v5 = NSStringFromClass(v4);
  +[BuddyStartOverAnalytics addEraseEventWithAnalyticsManager:v2 paneIdentifier:v5];

  [a1[5] commitThenUpload];
  v14[0] = objc_alloc_init((Class)DDRResetOptions);
  id location = [objc_alloc((Class)DDRResetRequest) initWithMode:4 options:v14[0] reason:@"User-Requested Erase"];
  id v6 = +[DDRResetService sharedInstance];
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  id v10 = sub_10008AC60;
  id v11 = &unk_1002B0FF0;
  id v12 = a1[7];
  [(DDRResetService *)v6 resetWithRequest:location completion:&v7];

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v14, 0);
}

void sub_10008AC60(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Reset failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa setUserInteractionEnabled:1];
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset was successful!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10008B020(uint64_t a1)
{
  id v2 = -[BuddyMigrationTargetErrorController initWithError:]([BuddyMigrationTargetLockscreenErrorController alloc], "initWithError:", *(void *)(a1 + 40), a1, a1);
  [*(id *)(a1 + 32) setErrorController:v2];

  id v3 = [*(id *)(a1 + 32) navigationController];
  id v4 = [*(id *)(a1 + 32) errorController];
  [v3 pushViewController:v4 animated:1];
}

id sub_10008B31C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B28;
  uint64_t v13 = qword_100321B28;
  if (!qword_100321B28)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10008C0D8;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_10008C0D8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_10008B864()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B38;
  uint64_t v13 = qword_100321B38;
  if (!qword_100321B38)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10008C49C;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_10008C49C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10008BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_10008BAEC(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v33 = 0;
  objc_storeStrong(&v33, a3);
  oslog[1] = (os_log_t)a1;
  if (v33)
  {
    id v5 = [v33 domain];
    id v6 = sub_10008BEC0();
    BOOL v7 = 0;
    if ([v5 isEqualToString:v6]) {
      BOOL v7 = [v33 code] == (id)62;
    }

    if (v7)
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = oslog[0];
        os_log_type_t v9 = v31;
        sub_10004B24C(buf);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "No mandatory software update information available", buf, 2u);
      }
      objc_storeStrong((id *)oslog, 0);
    }
    else
    {
      os_log_t v29 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        sub_10004B238((uint64_t)v35, (uint64_t)v33);
        _os_log_impl((void *)&_mh_execute_header, v29, v28, "Unable to get mandatory software update information: %@", v35, 0xCu);
      }
      objc_storeStrong((id *)&v29, 0);
    }
  }
  else
  {
    id v10 = location[0];
    id v11 = sub_10008BFCC();
    id v27 = [v10 objectForKeyedSubscript:v11];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v12 = location[0];
      id v13 = sub_10008BFCC();
      id v26 = [v12 objectForKeyedSubscript:v13];

      if (v26)
      {
        id v25 = objc_alloc_init((Class)NSNumberFormatter);
        id v14 = [v25 numberFromString:v26];
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v14 unsignedIntegerValue];

        objc_storeStrong(&v25, 0);
      }
      else
      {
        os_log_t v24 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = v24;
          os_log_type_t v16 = v23;
          sub_10004B24C(v22);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "No mandatory software update information available (flags are nil)", v22, 2u);
        }
        objc_storeStrong((id *)&v24, 0);
      }
      objc_storeStrong(&v26, 0);
    }
    else
    {
      os_log_t v21 = (os_log_t)(id)_BYLoggingFacility();
      char v20 = 16;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        id v17 = v21;
        os_log_type_t v18 = v20;
        sub_10004B24C(v19);
        _os_log_error_impl((void *)&_mh_execute_header, v17, v18, "Mandatory software update information is not a string", (uint8_t *)v19, 2u);
      }
      objc_storeStrong((id *)&v21, 0);
    }
    objc_storeStrong(&v27, 0);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  objc_storeStrong(&v33, 0);
  objc_storeStrong(location, 0);
}

id sub_10008BEC0()
{
  int v4 = (void **)sub_10008C5E0();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getSUErrorDomain(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMandatoryUpdateUtilities.m", 28, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

id sub_10008BFCC()
{
  int v4 = (void **)sub_10008C74C();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getSUMandatoryUpdateFlagsKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMandatoryUpdateUtilities.m", 30, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

void sub_10008C0D8(NSAssertionHandler *a1)
{
  sub_10008C21C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUDownloadPolicyFactory");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSUDownloadPolicyFactoryClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMandatoryUpdateUtilities.m", 26, @"Unable to find class %s", "SUDownloadPolicyFactory" file lineNumber description];

    __break(1u);
  }
  qword_100321B28 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10008C21C()
{
  uint64_t v3 = sub_10008C350();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SoftwareUpdateServicesLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMandatoryUpdateUtilities.m", 25, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_10008C350()
{
  if (!qword_100321B30) {
    sub_10008C408();
  }
  return qword_100321B30;
}

uint64_t sub_10008C408()
{
  uint64_t result = _sl_dlopen();
  qword_100321B30 = result;
  return result;
}

void sub_10008C49C(NSAssertionHandler *a1)
{
  sub_10008C21C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUManagerClient");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSUManagerClientClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMandatoryUpdateUtilities.m", 32, @"Unable to find class %s", "SUManagerClient" file lineNumber description];

    __break(1u);
  }
  qword_100321B38 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10008C5E0()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321B40;
  uint64_t v13 = qword_100321B40;
  if (!qword_100321B40)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10008C6E0;
    id v6 = &unk_1002B1248;
    BOOL v7 = &v9;
    sub_10008C6E0((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_10008C6E0(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_10008C21C();
  uint64_t result = dlsym(v2, "SUErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321B40 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10008C74C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321B48;
  uint64_t v13 = qword_100321B48;
  if (!qword_100321B48)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10008C84C;
    id v6 = &unk_1002B1248;
    BOOL v7 = &v9;
    sub_10008C84C((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_10008C84C(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_10008C21C();
  uint64_t result = dlsym(v2, "SUMandatoryUpdateFlagsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321B48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10008CFE4(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] controllerDone];
  objc_storeStrong(location, 0);
}

void sub_10008D550(void *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v8 = 0;
  objc_storeStrong(&v8, a3);
  id v7 = 0;
  objc_storeStrong(&v7, a4);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v7, 0);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_10008D924(id *a1)
{
  _OWORD v32[2] = a1;
  v32[1] = a1;
  uint64_t v26 = 0;
  id v27 = &v26;
  int v28 = 838860800;
  int v29 = 48;
  char v30 = sub_10008DC20;
  os_log_type_t v31 = sub_10008DC64;
  v32[0] = 0;
  NSAssertionHandler v2 = [a1[4] termsQueue];
  block = _NSConcreteStackBlock;
  int v21 = -1073741824;
  int v22 = 0;
  os_log_type_t v23 = sub_10008DC70;
  os_log_t v24 = &unk_1002B1D70;
  v25[1] = &v26;
  v25[0] = a1[4];
  dispatch_sync(v2, &block);

  if (v27[5])
  {
    if (a1[5])
    {
      int v3 = &_dispatch_main_q;
      id v14 = _NSConcreteStackBlock;
      int v15 = -1073741824;
      int v16 = 0;
      id v17 = sub_10008DCC8;
      os_log_type_t v18 = &unk_1002B1D98;
      v19[0] = a1[5];
      v19[1] = &v26;
      dispatch_async((dispatch_queue_t)v3, &v14);

      objc_storeStrong(v19, 0);
    }
    int v13 = 1;
  }
  else
  {
    int v4 = [a1[4] termsRequestQueue];
    dispatch_suspend(v4);

    id v5 = a1[4];
    id v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    uint64_t v9 = sub_10008DD10;
    id v10 = &unk_1002B1DE8;
    id v11 = a1[4];
    id v12 = a1[5];
    [v5 fetchTermsFromServer:&v6];
    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    int v13 = 0;
  }
  objc_storeStrong(v25, 0);
  _Block_object_dispose(&v26, 8);
  objc_storeStrong(v32, 0);
}

void sub_10008DC20(uint64_t a1, uint64_t a2)
{
  int v3 = (id *)(a2 + 40);
  NSAssertionHandler v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_10008DC64(uint64_t a1)
{
}

void sub_10008DC70(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) cachedTermsData:a1, a1];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_10008DCC8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
}

void sub_10008DD10(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v23 = 0;
  objc_storeStrong(&v23, a3);
  v22[1] = a1;
  if (location[0])
  {
    id v5 = [a1[4] termsQueue];
    block = _NSConcreteStackBlock;
    int v17 = -1073741824;
    int v18 = 0;
    id v19 = sub_10008DF50;
    char v20 = &unk_1002B12F0;
    id v21 = a1[4];
    v22[0] = location[0];
    dispatch_sync(v5, &block);

    objc_storeStrong(v22, 0);
    objc_storeStrong(&v21, 0);
  }
  id v6 = [a1[4] termsRequestQueue];
  dispatch_resume(v6);

  if (a1[5])
  {
    int v7 = &_dispatch_main_q;
    int v8 = _NSConcreteStackBlock;
    int v9 = -1073741824;
    int v10 = 0;
    id v11 = sub_10008DF80;
    id v12 = &unk_1002B1DC0;
    id v15 = a1[5];
    id v13 = location[0];
    id v14 = v23;
    dispatch_async((dispatch_queue_t)v7, &v8);

    objc_storeStrong(&v14, 0);
    objc_storeStrong(&v13, 0);
    objc_storeStrong(&v15, 0);
  }
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

id sub_10008DF50(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCachedTermsData:*(void *)(a1 + 40) a1, a1];
}

uint64_t sub_10008DF80(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10008E3B0(void *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v17 = 0;
  objc_storeStrong(&v17, a3);
  id v16 = 0;
  objc_storeStrong(&v16, a4);
  v15[1] = a1;
  v15[0] = v17;
  id v14 = [v15[0] responseData];
  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [v14 length];
    char v11 = 0;
    char v9 = 0;
    if (_BYIsInternalInstall())
    {
      int v8 = (NSString *)v16;
    }
    else if (v16)
    {
      id v12 = [v16 domain];
      char v11 = 1;
      int v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [v16 code]);
      int v10 = v8;
      char v9 = 1;
    }
    else
    {
      int v8 = 0;
    }
    sub_10007D958((uint64_t)buf, (uint64_t)v7, (uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Terms request completed with data length %llu, error (non-nil does not imply failure) = %{public}@", buf, 0x16u);
    if (v9) {

    }
    if (v11) {
  }
    }
  objc_storeStrong((id *)&oslog, 0);
  [v14 length];
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v14, 0);
  objc_storeStrong(v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

double sub_10008E9E4()
{
  return 0.0;
}

double sub_10008F6D8()
{
  char v0 = BFFIsiPad();
  double result = 57.0;
  if ((v0 & 1) == 0) {
    return 18.0;
  }
  return result;
}

uint64_t sub_1000905A4(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) waiting:a1, a1];
  if (result)
  {
    [*(id *)(a1 + 32) setPaneVisible:1];
    uint64_t result = (uint64_t)[*(id *)(a1 + 32) setExtendedInitializationCompletion:0];
    if (*(void *)(a1 + 40)) {
      return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  return result;
}

id sub_10009061C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _waitForKeychainAndPreflight:a1, a1];
}

void sub_100090734(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v15[1] = a1;
  if (location[0])
  {
    v15[0] = (id)_BYLoggingFacility();
    char v14 = 16;
    if (os_log_type_enabled((os_log_t)v15[0], OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = v15[0];
      os_log_type_t v4 = v14;
      sub_10004B24C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Keychain transfer failed, not waiting for preflight!", buf, 2u);
    }
    objc_storeStrong(v15, 0);
    id v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    char v9 = sub_1000908D4;
    int v10 = &unk_1002B12F0;
    id v11 = a1[4];
    id v12 = location[0];
    dispatch_async((dispatch_queue_t)v5, &block);

    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
  }
  else
  {
    [a1[4] _waitForPreflight];
  }
  objc_storeStrong(location, 0);
}

id sub_1000908D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _showError:*(void *)(a1 + 40) a1 a1];
}

void sub_1000909F4(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  id v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  char v9 = sub_100090B44;
  int v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

id sub_100090B44(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    return [*(id *)(a1 + 40) _showError:*(void *)(a1 + 32) a1 a1];
  }
  if ([*(id *)(a1 + 40) _ableToMigrateWithPreflightInformation:*(void *)(a1 + 48) a1, a1])return [*(id *)(a1 + 40) _controllerDone]; {
  return [*(id *)(a1 + 40) _showOutOfSpaceError];
  }
}

void sub_100090F94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v2 flowItemDone:*(void *)(a1 + 32) nextItem:*(void *)(a1 + 40)];
}

void sub_10009145C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigationController:a1, a1];
  id v2 = [v1 popViewControllerAnimated:1];
}

void sub_10009189C(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  if (a1[4])
  {
    id v2 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v4 = -1073741824;
    int v5 = 0;
    id v6 = sub_10009197C;
    int v7 = &unk_1002B0D70;
    v8[0] = a1[4];
    dispatch_async((dispatch_queue_t)v2, &block);

    objc_storeStrong(v8, 0);
  }
}

uint64_t sub_10009197C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
}

void sub_100091E58(id a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v1 = oslog[0];
    os_log_type_t v2 = v6;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "\"Installing\" fake software update...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  +[BYPreferencesController flushEverything];
  sleep(2u);
  id location = [objc_alloc((Class)FBSShutdownOptions) initWithReason:@"Setup Assistant Software Update Restore Testing"];
  [location setRebootType:1];
  id v3 = +[FBSSystemService sharedService];
  [v3 shutdownWithOptions:location];

  objc_storeStrong(&location, 0);
}

void sub_100091F70(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v2 = oslog[0];
    os_log_type_t v3 = v12;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Will cancel in-progress software update download", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id location = [objc_alloc((Class)SUManagerClient) initWithDelegate:0 clientType:1];
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  int v7 = sub_1000920C4;
  int v8 = &unk_1002B0C80;
  char v9 = a1[4].isa;
  [location cancelDownload:&v4];
  objc_storeStrong((id *)&v9, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000920C4(NSObject *a1, char a2, id obj)
{
  id v13 = a1;
  char v12 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = v12 & 1;
    char v8 = 0;
    char v6 = 0;
    if (_BYIsInternalInstall())
    {
      int v5 = (NSString *)location;
    }
    else if (location)
    {
      id v9 = [location domain];
      char v8 = 1;
      int v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v9, [location code]);
      int v7 = v5;
      char v6 = 1;
    }
    else
    {
      int v5 = 0;
    }
    sub_10006E000((uint64_t)buf, v4, (uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Did cancel in-progress software update download with result %d error %@", buf, 0x12u);
    if (v6) {

    }
    if (v8) {
  }
    }
  objc_storeStrong((id *)oslog, 0);
  if (a1[4].isa) {
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1000922AC(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    Class isa = a1[5].isa;
    id v4 = [location[0] productBuildVersion];
    [(objc_class *)a1[4].isa setAbleToMigrateWithUpdate:+[SASSystemInformation compareProductVersion:isa toProductVersion:v4] != (id)1];
  }
  if (([(objc_class *)a1[4].isa ableToMigrateWithUpdate] & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = (uint64_t)a1[5].isa;
      id v6 = [(objc_class *)a1[4].isa update];
      sub_100051470((uint64_t)buf, v5, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Entered migration flow without a compatible update! %@ vs %@", buf, 0x16u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  (*((void (**)(void))a1[6].isa + 2))();
  objc_storeStrong(location, 0);
}

void sub_1000937D0(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if ([(objc_class *)a1[4].isa forceNetworkReachabilityOverWiFi])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v3 = oslog[0];
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Network path changed; removing forced network reachability for Wi-Fi",
        (uint8_t *)v5,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  [(objc_class *)a1[4].isa setForceNetworkReachabilityOverWiFi:0];
  objc_storeStrong(location, 0);
}

id sub_100094DEC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Forcing networking reachability over Wi-Fi...", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return [(objc_class *)a1[4].isa setForceNetworkReachabilityOverWiFi:1];
}

void sub_100095864(void *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  uint64_t v2 = a1[4];
  id v3 = [location[0] fetchAuthenticationContextForBiometric];
  (*(void (**)(uint64_t, BOOL))(v2 + 16))(v2, v3 != 0);

  objc_storeStrong(location, 0);
}

double sub_100095D98(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 136315138;
  *(_DWORD *)a1 = 136315138;
  *(void *)(a1 + 4) = a2;
  return result;
}

id sub_100096584()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B58;
  uint64_t v13 = qword_100321B58;
  if (!qword_100321B58)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_100097F08;
    os_log_type_t v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_100097F08(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_10009669C()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B68;
  uint64_t v13 = qword_100321B68;
  if (!qword_100321B68)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_1000982C8;
    os_log_type_t v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000982C8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100097868(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  objc_storeStrong(&location, 0);
}

void sub_100097F08(NSAssertionHandler *a1)
{
  sub_10009804C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("BiometricKitUI");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getBiometricKitUIClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMesaController.m", 43, @"Unable to find class %s", "BiometricKitUI" file lineNumber description];

    __break(1u);
  }
  qword_100321B58 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10009804C()
{
  if (!sub_10009817C())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *BiometricKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMesaController.m", 42, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10009817C()
{
  if (!qword_100321B60) {
    sub_100098234();
  }
  return qword_100321B60;
}

uint64_t sub_100098234()
{
  uint64_t result = _sl_dlopen();
  qword_100321B60 = result;
  return result;
}

void sub_1000982C8(NSAssertionHandler *a1)
{
  sub_10009840C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("BiometricKit");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getBiometricKitClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMesaController.m", 41, @"Unable to find class %s", "BiometricKit" file lineNumber description];

    __break(1u);
  }
  qword_100321B68 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10009840C()
{
  if (!sub_10009853C())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *BiometricKitLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMesaController.m", 40, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10009853C()
{
  if (!qword_100321B70) {
    sub_1000985F4();
  }
  return qword_100321B70;
}

uint64_t sub_1000985F4()
{
  uint64_t result = _sl_dlopen();
  qword_100321B70 = result;
  return result;
}

void sub_100098AB0(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    NSAssertionHandler v2 = oslog[0];
    os_log_type_t v3 = v12;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting migration preflight...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v4 = [(objc_class *)a1[4].isa _targetDeviceTransferTask];
  char v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_100098BF0;
  uint64_t v9 = &unk_1002B1E38;
  int v10 = a1[4].isa;
  [v4 startPreflightWithCompletionHandler:&v5];

  objc_storeStrong((id *)&v10, 0);
}

void sub_100098BF0(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setPreflightInformation:location[0]];
  [(objc_class *)a1[4].isa setPreflightError:v15];
  if (v15)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        char v5 = (NSString *)v15;
      }
      else if (v15)
      {
        id v12 = [v15 domain];
        char v11 = 1;
        char v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [v15 code]);
        id v10 = v5;
        char v9 = 1;
      }
      else
      {
        char v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Migration preflight failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v17, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Migration preflight completed: %@", v17, 0xCu);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  id v6 = [(objc_class *)a1[4].isa preflightCompletionBlock];

  if (v6)
  {
    int v7 = (void (**)(id, id, id))[(objc_class *)a1[4].isa preflightCompletionBlock];
    v7[2](v7, location[0], v15);

    [(objc_class *)a1[4].isa setPreflightCompletionBlock:0];
  }
  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_100098FCC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) preflightInformation];
  char v7 = 0;
  BOOL v3 = 1;
  if (!v2)
  {
    id v8 = [*(id *)(a1 + 32) preflightError];
    char v7 = 1;
    BOOL v3 = v8 != 0;
  }
  if (v7) {

  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [*(id *)(a1 + 32) preflightInformation];
    id v6 = [*(id *)(a1 + 32) preflightError];
    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
  }
  else
  {
    [*(id *)(a1 + 32) setPreflightCompletionBlock:*(void *)(a1 + 40)];
  }
}

void sub_1000991DC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v13;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting transfer of keychain data...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa setHasTransferredData:1];
  id v4 = [(objc_class *)a1[4].isa _targetDeviceTransferTask];
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_10009934C;
  char v9 = &unk_1002B1ED8;
  id v10 = a1[4].isa;
  char v11 = a1[5].isa;
  [v4 startKeychainDataTransferWithCompletionHandler:&v5];

  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_10009934C(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v18 = 0;
  objc_storeStrong(&v18, a3);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setKeychainInfo:location[0]];
  [(objc_class *)a1[4].isa setKeychainError:v18];
  if (v18)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v14 = 0;
      char v12 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v18;
      }
      else if (v18)
      {
        id v15 = [v18 domain];
        char v14 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v15, [v18 code]);
        id v13 = v5;
        char v12 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "Keychain data transfer failed: %{public}@", buf, 0xCu);
      if (v12) {

      }
      if (v14) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = v11;
      os_log_type_t v7 = v10;
      sub_10004B24C(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Keychain data transferred completed", v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  id v8 = [(objc_class *)a1[4].isa keychainDataTransferCompletionQueue];
  dispatch_resume(v8);

  objc_storeStrong(&v18, 0);
  objc_storeStrong(location, 0);
}

void sub_100099704(uint64_t a1)
{
  void v17[2] = (id)a1;
  v17[1] = (id)a1;
  uint64_t v11 = 0;
  char v12 = &v11;
  int v13 = 838860800;
  int v14 = 48;
  id v15 = sub_10009986C;
  os_log_type_t v16 = sub_1000998B0;
  v17[0] = 0;
  id v2 = [*(id *)(a1 + 32) migrationQueue];
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000998BC;
  char v9 = &unk_1002B1D70;
  v10[1] = &v11;
  v10[0] = *(id *)(a1 + 32);
  dispatch_sync(v2, &v5);

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v12[5], v3, v4);
  objc_storeStrong(v10, 0);
  _Block_object_dispose(&v11, 8);
  objc_storeStrong(v17, 0);
}

void sub_100099850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
}

void sub_10009986C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1000998B0(uint64_t a1)
{
}

void sub_1000998BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) keychainError:a1, a1];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000999DC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v13;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting import of keychain data...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa setHasTransferredData:1];
  id v4 = [(objc_class *)a1[4].isa _targetDeviceTransferTask];
  id v5 = [(objc_class *)a1[4].isa keychainInfo];
  int v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  char v9 = sub_100099B4C;
  os_log_type_t v10 = &unk_1002B0FF0;
  uint64_t v11 = a1[4].isa;
  [v4 startKeychainDataImportWithKeychainInfo:v5 completionHandler:&v6];

  objc_storeStrong((id *)&v11, 0);
}

void sub_100099B4C(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setKeychainError:location[0]];
  [(objc_class *)a1[4].isa setHasImportedKeychain:1];
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v14 = [location[0] domain];
        char v13 = 1;
        os_log_type_t v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [location[0] code]);
        id v12 = v3;
        char v11 = 1;
      }
      else
      {
        os_log_type_t v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Keychain data import failed: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v10;
      os_log_type_t v5 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Keychain data import completed", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  id v6 = [(objc_class *)a1[4].isa keychainDataImportCompletionBlock];

  if (v6)
  {
    int v7 = (void (**)(id, id))[(objc_class *)a1[4].isa keychainDataImportCompletionBlock];
    v7[2](v7, location[0]);

    [(objc_class *)a1[4].isa setKeychainDataImportCompletionBlock:0];
  }
  objc_storeStrong(location, 0);
}

void sub_100099F04(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "hasImportedKeychain", a1, a1))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = [*(id *)(a1 + 32) keychainError];
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }
  else
  {
    [*(id *)(a1 + 32) setKeychainDataImportCompletionBlock:*(void *)(a1 + 40)];
  }
}

void sub_10009A080(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (location[0]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    [*(id *)(a1 + 32) waitForKeychainDataImport:*(void *)(a1 + 40)];
  }
  objc_storeStrong(location, 0);
}

void sub_10009A1E0(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = oslog[0];
    os_log_type_t v3 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting migration data transfer...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa setHasTransferredData:1];
  id v4 = [(objc_class *)a1[4].isa _targetDeviceTransferTask];
  id v5 = [(objc_class *)a1[4].isa preflightInformation];
  [v4 startDataTransferWithPreflightInfo:v5 completionHandler:&stru_1002B1F20];
}

void sub_10009A2E0(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        os_log_type_t v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        os_log_type_t v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Migration data transfer failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Migration data transfer completed", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10009A8D8(uint64_t a1)
{
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Buddy migration manager already canceled";
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  os_log_type_t v3 = +[NSError errorWithDomain:@"MBErrorDomain" code:202 userInfo:v2];
  [*(id *)(a1 + 32) setPreflightError:v3];

  [*(id *)(a1 + 32) setPreflightInformation:0];
  id v4 = [*(id *)(a1 + 32) preflightCompletionBlock];

  if (v4)
  {
    os_log_type_t v5 = (void (**)(id, id, id))[*(id *)(a1 + 32) preflightCompletionBlock];
    id v6 = [*(id *)(a1 + 32) preflightInformation];
    id v7 = [*(id *)(a1 + 32) preflightError];
    v5[2](v5, v6, v7);

    [*(id *)(a1 + 32) setPreflightCompletionBlock:0];
  }
}

void sub_10009B664(id *a1)
{
  v9[2] = a1;
  v9[1] = a1;
  uint64_t v2 = objc_alloc_init(BuddyDisplayMonitor);
  [a1[4] setDisplayMonitor:v2];

  id v3 = [a1[4] displayMonitor];
  id v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_10009B760;
  NSErrorUserInfoKey v8 = &unk_1002B0D20;
  v9[0] = a1[4];
  [v3 wakeDisplay:&v4];

  objc_storeStrong(v9, 0);
}

id sub_10009B760(uint64_t a1)
{
  return [*(id *)(a1 + 32) _rebootDevice:a1, a1];
}

void sub_10009BA28(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v8, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v7;
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Lockdown enabled", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  [(objc_class *)a1[4].isa rebootDevice:1];
  objc_storeStrong(location, 0);
}

id sub_10009BBA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) releaseAssertions:a1, a1];
}

void sub_10009CAB8(id a1)
{
}

double sub_10009D44C()
{
  return 1.0;
}

void sub_10009E864(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) tableView:a1];
  uint64_t v2 = +[NSIndexSet indexSetWithIndex:0];
  [v1 reloadSections:v2 withRowAnimation:0];
}

void sub_10009FA14(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = 0;
  uint64_t v2 = *((void *)a1[4] + 1);
  if (*((unsigned char *)a1[4] + 32)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 3;
  }
  obunint64_t j = location[0];
  id v4 = +[BuddyBackupUtilities getBackupListWithFiltering:0 manager:v2 retries:v3 error:&obj];
  objc_storeStrong(location, obj);
  id v32 = v4;
  *((unsigned char *)a1[4] + 32) = 1;
  if (v32)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10005A060(buf, (int)[v32 count]);
      _os_log_impl((void *)&_mh_execute_header, oslog, v29, "Backups list has %u backups", buf, 8u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    os_log_t v28 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v35, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, v28, v27, "Error getting backup list: %@", v35, 0xCu);
    }
    objc_storeStrong((id *)&v28, 0);
  }
  id v5 = [a1[4] filteredRestorableItemsFromBackupList:v32];
  id v6 = v32;
  id v32 = v5;

  if (![v32 count])
  {
    os_log_t v26 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v7 = v26;
      os_log_type_t v8 = v25;
      sub_10004B24C(v24);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No backups are committed and ready to restore", v24, 2u);
    }
    objc_storeStrong((id *)&v26, 0);
  }
  id v9 = v32;
  id v10 = +[NSSortDescriptor sortDescriptorWithKey:@"snapshot.date" ascending:0];
  char v34 = v10;
  char v11 = +[NSArray arrayWithObjects:&v34 count:1];
  id v12 = [v9 sortedArrayUsingDescriptors:v11];
  id v13 = v32;
  id v32 = v12;

  id v14 = &_dispatch_main_q;
  os_log_type_t v15 = _NSConcreteStackBlock;
  int v16 = -1073741824;
  int v17 = 0;
  id v18 = sub_10009FE64;
  id v19 = &unk_1002B1F90;
  id v20 = a1[4];
  id v21 = v32;
  id v22 = location[0];
  v23[0] = a1[5];
  v23[1] = a1[6];
  v23[2] = a1[7];
  dispatch_async((dispatch_queue_t)v14, &v15);

  objc_storeStrong(v23, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v32, 0);
  objc_storeStrong(location, 0);
}

void sub_10009FE64(id *a1)
{
  char v30 = a1;
  os_log_type_t v29 = a1;
  os_log_t v28 = 0;
  os_log_type_t v27 = 0;
  id v2 = (id)_BYSignpostSubsystem();
  uint64_t v3 = (void *)_BYSignpostCreate();
  os_log_t v26 = v4;
  os_log_type_t v25 = v3;

  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v23 = 1;
  id v22 = v25;
  if (v25 && v22 != (void *)-1 && os_signpost_enabled(log))
  {
    id v5 = log;
    os_signpost_type_t v6 = v23;
    os_signpost_id_t v7 = (os_signpost_id_t)v22;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "BackupListSoftwareUpdateScan", " enableTelemetry=YES ", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_100046588((uint64_t)v31, (uint64_t)v25);
    _os_log_impl((void *)&_mh_execute_header, oslog, v19, "BEGIN [%lld]: BackupListSoftwareUpdateScan  enableTelemetry=YES ", v31, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  os_log_type_t v27 = v25;
  os_log_t v28 = v26;
  id v8 = a1[4];
  id v9 = a1[5];
  id v10 = _NSConcreteStackBlock;
  int v11 = -1073741824;
  int v12 = 0;
  id v13 = sub_1000A0138;
  id v14 = &unk_1002B1F68;
  v18[1] = v25;
  v18[2] = v26;
  id v15 = a1[4];
  id v16 = a1[5];
  id v17 = a1[6];
  v18[0] = a1[7];
  v18[3] = a1[8];
  v18[4] = a1[9];
  [v8 scanForUpdateIfNecessaryForBackupList:v9 withCompletion:&v10];
  objc_storeStrong(v18, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
}

id sub_1000A0138(uint64_t a1, char a2)
{
  uint64_t v25 = a1;
  char v24 = a2 & 1;
  uint64_t v23 = a1;
  double v22 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v20 = 2;
  os_signpost_id_t v19 = 0;
  os_signpost_id_t v19 = *(void *)(a1 + 64);
  if (v19 && v19 != -1 && os_signpost_enabled(log))
  {
    uint64_t v3 = log;
    os_signpost_type_t v4 = v20;
    os_signpost_id_t v5 = v19;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "BackupListSoftwareUpdateScan", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v27, *(void *)(a1 + 64), *(uint64_t *)&v22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v16, "END [%lld] %fs: BackupListSoftwareUpdateScan ", v27, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id result = [*(id *)(a1 + 32) setBackupList:*(void *)(a1 + 40) forceReload:v24 & 1 withError:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 56))
  {
    double v15 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
    os_log_t v14 = (os_log_t)(id)_BYSignpostSubsystem();
    char v13 = 2;
    os_signpost_id_t v12 = 0;
    os_signpost_id_t v12 = *(void *)(a1 + 80);
    if (v12 && v12 != -1 && os_signpost_enabled(v14))
    {
      os_signpost_id_t v7 = v14;
      os_signpost_type_t v8 = v13;
      os_signpost_id_t v9 = v12;
      sub_10004B24C(v11);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "BackupListLoadBackups", "", v11, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
    os_log_t v10 = (os_log_t)(id)_BYSignpostSubsystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000A0448((uint64_t)v26, *(void *)(a1 + 80), *(uint64_t *)&v15);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: BackupListLoadBackups ", v26, 0x16u);
    }
    objc_storeStrong((id *)&v10, 0);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  return result;
}

double sub_1000A0448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 134218240;
  *(_DWORD *)a1 = 134218240;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_1000A0534(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setRefreshTimerToDuration:20.0];
  objc_storeStrong(location, 0);
}

void sub_1000A0A48(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v19 = 0;
  objc_storeStrong(&v19, a3);
  id v18 = 0;
  objc_storeStrong(&v18, a4);
  v17[1] = (id)a1;
  id v7 = [*(id *)(a1 + 32) betaEnrollmentStateManager];
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = [v19 productVersion];
  os_log_t v10 = _NSConcreteStackBlock;
  int v11 = -1073741824;
  int v12 = 0;
  char v13 = sub_1000A0BEC;
  os_log_t v14 = &unk_1002B1758;
  id v15 = *(id *)(a1 + 32);
  id v16 = v19;
  v17[0] = *(id *)(a1 + 48);
  [v7 loadSeedEnrollmentStateForRestorables:v8 incompatibleWithUpdateVersion:v9 completion:&v10];

  objc_storeStrong(v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A0BEC(id *a1)
{
  id v10[2] = a1;
  v10[1] = a1;
  id v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  os_signpost_type_t v6 = sub_1000A0D0C;
  id v7 = &unk_1002B1758;
  id v8 = a1[4];
  id v9 = a1[5];
  v10[0] = a1[6];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

id sub_1000A0D0C(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)buf, *(void *)(a1 + 40));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Restore list scan found software update: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) productVersion];
  [v2 setAvailableUpdateVersion:v3];

  id result = [*(id *)(a1 + 32) setScanningForUpdate:0];
  if (*(void *)(a1 + 48)) {
    return (id)(*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40) != 0);
  }
  return result;
}

BOOL sub_1000A179C(id a1, UIViewController *a2, unint64_t a3, BOOL *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  objc_storeStrong(location, 0);
  return isKindOfClass & 1;
}

uint64_t sub_1000A2140(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1000A2188(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000A21E4(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000A2240(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000A229C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

uint64_t sub_1000A24C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 1);
}

void sub_1000A48A8(uint64_t a1, char a2)
{
  uint64_t v15 = a1;
  char v14 = a2;
  uint64_t v13 = a1;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000A49A4;
  id v9 = &unk_1002B20C0;
  char v12 = a2 & 1;
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  [v3 _presentNetworkWarningForRestorable:v4 completion:&v5];
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

void sub_1000A49A4(uint64_t a1, char a2)
{
  uint64_t v9 = a1;
  char v8 = a2;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 48))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), *(id *)(a1 + 40));
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100046588((uint64_t)buf, *(void *)(*(void *)(a1 + 32) + 96));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Selected snapshot: %p", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    id v3 = [*(id *)(a1 + 32) pendingRestoreState];
    [v3 setBackupItem:*(void *)(*(void *)(a1 + 32) + 96) updateBackupMetadata:1 prefetchAccounts:1];

    char v4 = v8;
    id v5 = [*(id *)(a1 + 32) pendingRestoreState];
    [v5 setAllowCellularNetwork:v4 & 1];

    id v6 = [*(id *)(a1 + 32) delegate];
    [v6 flowItemDone:*(void *)(a1 + 32)];
  }
}

id sub_1000A4DCC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321B88;
  uint64_t v13 = qword_100321B88;
  if (!qword_100321B88)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000A5A10;
    id v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000A5A10(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000A4EE4(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 40))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = oslog[0];
      os_log_type_t v4 = v11;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Disable iCloud Restore debug logging", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [*(id *)(a1 + 32) resetAll];
  }
  else
  {
    os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = v9;
      os_log_type_t v6 = v8;
      sub_10004B24C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Enable iCloud Restore debug logging", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
    [*(id *)(a1 + 32) setEnabledLevel:4];
    [*(id *)(a1 + 32) setPersistedLevel:4];
  }
  objc_storeStrong(location, 0);
}

void sub_1000A5A10(NSAssertionHandler *a1)
{
  sub_1000A5B54();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("OSLogPreferencesSubsystem");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getOSLogPreferencesSubsystemClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"RestoreFromBackupController.m", 61, @"Unable to find class %s", "OSLogPreferencesSubsystem" file lineNumber description];

    __break(1u);
  }
  qword_100321B88 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000A5B54()
{
  if (!sub_1000A5C84())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *LoggingSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"RestoreFromBackupController.m", 60, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000A5C84()
{
  if (!qword_100321B90) {
    sub_1000A5D3C();
  }
  return qword_100321B90;
}

uint64_t sub_1000A5D3C()
{
  uint64_t result = _sl_dlopen();
  qword_100321B90 = result;
  return result;
}

double sub_1000A60D4()
{
  return 1.0;
}

void sub_1000A75D8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShowLocalizedNames:0];
  objc_storeStrong(location, 0);
}

void sub_1000A762C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShowLocalizedNames:1];
  objc_storeStrong(location, 0);
}

double sub_1000A8748()
{
  return 1.0;
}

void sub_1000A8954(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = +[BYLocationController sharedBuddyLocationController];
  location[0] = [v2 recommendedLocaleAnalyticsEvent];

  id v3 = [a1[4] localeComposite];
  id v4 = [v3 dataSource];
  id v5 = [v4 numberOfRecommendedLocales];

  id v6 = [a1[4] localeComposite];
  id v7 = [v6 dataSource];
  LOBYTE(v4) = [v7 hasRecommendedLocaleFromLanguage];

  if (v4)
  {
    if (v5 == (id)1) {
      [location[0] setSource:4];
    }
    else {
      [location[0] setSource:5];
    }
  }
  [location[0] setUserSawRecommendedLocale:v5 != 0];
  [location[0] setUserVisitedLocalePane:1];
  objc_storeStrong(location, 0);
}

void sub_1000A8CFC(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1000A8D44(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [*(id *)(a1 + 32) buddyLocaleTableView];
  [v3 scrollToRowAtIndexPath:*(void *)(a1 + 40) atScrollPosition:3 animated:1];

  id v4 = [*(id *)(a1 + 32) buddyLocaleTableView];
  [v4 reloadData];

  objc_storeStrong(location, 0);
}

double sub_1000AA5D4()
{
  return 0.0;
}

void sub_1000AA900(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShowLocalizedNames:0];
  objc_storeStrong(location, 0);
}

void sub_1000AA954(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShowLocalizedNames:1];
  objc_storeStrong(location, 0);
}

id sub_1000AB6C0()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321BA0;
  uint64_t v13 = qword_100321BA0;
  if (!qword_100321BA0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000ABF94;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1000ABF94(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000AB7D8(id *a1, char a2, id obj)
{
  id v7 = a1;
  char v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v4[1] = a1;
  v4[0] = objc_loadWeakRetained(a1 + 4);
  [v4[0] _welcomeKitDidFinishWithSuccess:v6 & 1 settings:location];
  objc_storeStrong(v4, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000AB854(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _eraseDevice];
  objc_storeStrong(location, 0);
}

void sub_1000ABF94(NSAssertionHandler *a1)
{
  sub_1000AC0D8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WLWelcomeViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getWLWelcomeViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMoveFromAndroidController.m", 29, @"Unable to find class %s", "WLWelcomeViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321BA0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000AC0D8()
{
  if (!sub_1000AC208())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WelcomeKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMoveFromAndroidController.m", 28, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000AC208()
{
  if (!qword_100321BA8) {
    sub_1000AC2C0();
  }
  return qword_100321BA8;
}

uint64_t sub_1000AC2C0()
{
  uint64_t result = _sl_dlopen();
  qword_100321BA8 = result;
  return result;
}

double sub_1000AC984()
{
  return 29.0;
}

void sub_1000AD1D0(id *a1)
{
  v9[2] = a1;
  v9[1] = a1;
  id v2 = [a1[4] expressSetupDataProvider];
  [v2 applyExpressSettings];

  int v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1000AD2CC;
  uint64_t v8 = &unk_1002B0D20;
  v9[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v9, 0);
}

void sub_1000AD2CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) view:a1, a1];
  id v3 = [v2 window];
  [v3 setUserInteractionEnabled:1];

  id v4 = [*(id *)(a1 + 32) miscState];
  [v4 setUserChoseExpress:1];

  int v5 = (objc_class *)objc_opt_class();
  int v6 = NSStringFromClass(v5);
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:v6];

  id v7 = [*(id *)(a1 + 32) delegate];
  [v7 flowItemDone:*(void *)(a1 + 32)];
}

void sub_1000AD9A8(id *a1)
{
  id v10[2] = a1;
  v10[1] = a1;
  id v2 = a1[4];
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  int v6 = sub_1000ADAAC;
  id v7 = &unk_1002B1758;
  id v8 = a1[5];
  id v9 = a1[4];
  v10[0] = a1[6];
  [v2 prepare:&v3];
  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

uint64_t sub_1000ADAAC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) expressSettingsCache:a1, a1];
  id v3 = [*(id *)(a1 + 40) expressSetupFeatures];
  [v2 registerExpressSettings:v3];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000ADCB0(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = [*(id *)(a1 + 32) existingSettings];
  location[0] = [v2 backupMetadata];

  if (location[0])
  {
    id v3 = [BYExpressSetupBackupSource alloc];
    id v4 = [*(id *)(a1 + 32) pendingRestoreState];
    id v5 = [v4 backupItem];
    int v6 = [(BYExpressSetupBackupSource *)v3 initWithBackupItem:v5 backupMetadata:location[0]];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    objc_storeStrong((id *)&v6, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

id sub_1000ADFD4()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321BB0;
  uint64_t v13 = qword_100321BB0;
  if (!qword_100321BB0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000B5130;
    int v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1000B5130(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000AE0EC(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (!location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v6 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      int v3 = oslog[0];
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Failed to create wallet provisioning context", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa) {
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(location, 0);
}

void sub_1000AE2BC(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v8 = 0;
  objc_storeStrong(&v8, a3);
  v7[1] = a1;
  if (location[0])
  {
    id v5 = [BYExpressSetupCloudSource alloc];
    v7[0] = [(BYExpressSetupCloudSource *)v5 initWithSettings:location[0]];
    (*(void (**)(void))(a1[4] + 16))();
    objc_storeStrong(v7, 0);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "Failed to fetch cloud settings for express: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_1000AEC74(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v12 = a1;
  [*(id *)(a1 + 32) setBackupDataSource:location[0]];
  double v11 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v9 = 2;
  os_signpost_id_t v8 = 0;
  os_signpost_id_t v8 = *(void *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    int v3 = log;
    os_signpost_type_t v4 = v9;
    os_signpost_id_t v5 = v8;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupBackupDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v14, *(void *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupBackupDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000AEE3C(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v12 = a1;
  [*(id *)(a1 + 32) setCloudDataSource:location[0]];
  double v11 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v9 = 2;
  os_signpost_id_t v8 = 0;
  os_signpost_id_t v8 = *(void *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    int v3 = log;
    os_signpost_type_t v4 = v9;
    os_signpost_id_t v5 = v8;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupCloudDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v14, *(void *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupCloudDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000AF004(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v27 = a1;
  os_log_t v26 = 0;
  uint64_t v25 = 0;
  id v2 = (id)_BYSignpostSubsystem();
  uint64_t v3 = _BYSignpostCreate();
  char v24 = v4;
  uint64_t v23 = (void *)v3;

  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v21 = 1;
  uint64_t v20 = (uint64_t)v23;
  if (v23 && v20 != -1 && os_signpost_enabled(log))
  {
    os_signpost_id_t v5 = log;
    os_signpost_type_t v6 = v21;
    os_signpost_id_t v7 = v20;
    sub_10004B24C(&buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ExpressSetupWalletDataSource", "", (uint8_t *)&buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_100046588((uint64_t)v29, (uint64_t)v23);
    _os_log_impl((void *)&_mh_execute_header, oslog, v17, "BEGIN [%lld]: ExpressSetupWalletDataSource ", v29, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  uint64_t v25 = v23;
  os_log_t v26 = v24;
  os_signpost_id_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = _NSConcreteStackBlock;
  int v11 = -1073741824;
  int v12 = 0;
  uint64_t v13 = sub_1000AF280;
  char v14 = &unk_1002B2298;
  id v15 = *(id *)(a1 + 40);
  v16[1] = v25;
  void v16[2] = v26;
  v16[0] = *(id *)(a1 + 48);
  [v8 createWalletProvisionalContextUsingDataProvider:v9 completion:&v10];
  objc_storeStrong(v16, 0);
  objc_storeStrong(&v15, 0);
}

void sub_1000AF280(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v12 = a1;
  [*(id *)(a1 + 32) setWalletProvisioningContext:location[0]];
  double v11 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v9 = 2;
  os_signpost_id_t v8 = 0;
  os_signpost_id_t v8 = *(void *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    uint64_t v3 = log;
    os_signpost_type_t v4 = v9;
    os_signpost_id_t v5 = v8;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupWalletDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v14, *(void *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupWalletDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

uint64_t sub_1000B13DC(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v6 = 0;
  objc_storeStrong(&v6, a3);
  LOBYTE(a3) = [objc_opt_class() _isSettingsFeature:[location[0] unsignedIntegerValue:a1]];
  objc_storeStrong(&v6, 0);
  objc_storeStrong(location, 0);
  return a3 & 1;
}

BOOL sub_1000B146C(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v10 = 0;
  objc_storeStrong(&v10, a3);
  id v5 = [objc_opt_class() _localizedNameForFeature:[location[0] unsignedIntegerValue]];
  id v6 = [v5 length];
  id v7 = [objc_opt_class() _localizedNameForFeature:[v10 unsignedIntegerValue]];
  BOOL v8 = v6 > [v7 length];

  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
  return v8;
}

void sub_1000B3158(uint64_t a1)
{
  id v20[2] = (id)a1;
  v20[1] = (id)a1;
  id v2 = *(void **)(a1 + 32);
  id v3 = [v2 resolvedDataSource];
  v20[0] = [v2 stringForDataSourceFeatures:v3];

  os_signpost_type_t v4 = *(void **)(a1 + 32);
  id v5 = [v4 underlyingDataSource];
  id v19 = [v4 stringForDataSourceFeatures:v5];

  id location = +[BYExpressSetupDataProvider stringForDataSourceType:](BYExpressSetupDataProvider, "stringForDataSourceType:", [*(id *)(a1 + 32) dataSourceType]);
  id v6 = &_dispatch_main_q;
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  id v10 = sub_1000B3370;
  double v11 = &unk_1002B2310;
  id v12 = *(id *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 48) & 1;
  char v17 = *(unsigned char *)(a1 + 49) & 1;
  id v13 = v20[0];
  id v14 = v19;
  id v15 = location;
  dispatch_async((dispatch_queue_t)v6, &v7);

  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(v20, 0);
}

void sub_1000B3370(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) analyticsManager];
  v6[0] = @"presented";
  id v3 = +[NSNumber numberWithBool:*(unsigned char *)(a1 + 64) & 1];
  v7[0] = v3;
  v6[1] = @"customizedSettings";
  os_signpost_type_t v4 = +[NSNumber numberWithBool:*(unsigned char *)(a1 + 65) & 1];
  v7[1] = v4;
  _OWORD v6[2] = @"resolvedFeatures";
  id v7[2] = *(void *)(a1 + 40);
  _WORD v6[3] = @"originalFeatures";
  _WORD v7[3] = *(void *)(a1 + 48);
  v6[4] = @"dataSource";
  v7[4] = *(void *)(a1 + 56);
  id v5 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:5];
  [v2 addEvent:@"com.apple.setupassistant.ios.expressSetup" withPayload:v5 persist:1];
}

void sub_1000B3CE8(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1000B3D2C(uint64_t a1)
{
}

void sub_1000B3D38(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = &_dispatch_main_q;
  dispatch_assert_queue_V2((dispatch_queue_t)v3);

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), location[0]);
  id v4 = [sub_1000ADFD4() sharedInstance];
  id v5 = [location[0] resolvedDataSource];
  id v6 = [v5 walletMetadata];
  [v4 setBackupMetadata:v6];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  objc_storeStrong(location, 0);
}

void sub_1000B3E2C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v13 = 0;
  objc_storeStrong(&v13, a3);
  id v12[2] = a1;
  id v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  int v9 = sub_1000B3F64;
  id v10 = &unk_1002B2360;
  v12[1] = a1[5];
  id v11 = location[0];
  v12[0] = a1[4];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B3F64(uint64_t a1)
{
}

void sub_1000B3FB0(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BB7C((uint64_t)buf, *(void *)(*((void *)a1[6].isa + 1) + 40));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v26, "Using express setup data provider: %{public}@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  id v2 = [*(id *)(*((void *)a1[6].isa + 1) + 40) expressSetupFeatures];
  id v3 = [v2 count];

  if ((unint64_t)v3 > 2)
  {
    [(objc_class *)a1[4].isa setExpressSetupDataProvider:*(void *)(*((void *)a1[6].isa + 1) + 40)];
    id v7 = [(objc_class *)a1[4].isa expressSetupDataProvider];
    id v8 = [v7 cloudDataSource];
    id v9 = [v8 expressSettings];
    id v10 = [(objc_class *)a1[4].isa existingSettings];
    [v10 setExpressSettings:v9];

    id v11 = objc_opt_class();
    id v12 = [(objc_class *)a1[4].isa expressSetupDataProvider];
    id v13 = [v12 expressSetupFeatures];
    id v14 = [v11 _privacyIdentifiersForFeatures:v13];
    [(objc_class *)a1[4].isa setPrivacyIdentifiers:v14];

    id v15 = dispatch_get_global_queue(25, 0);
    char v16 = _NSConcreteStackBlock;
    int v17 = -1073741824;
    int v18 = 0;
    id v19 = sub_1000B4374;
    uint64_t v20 = &unk_1002B23B0;
    char v21 = a1[4].isa;
    v22[1] = a1[6].isa;
    id v22[2] = a1[7].isa;
    v22[0] = a1[5].isa;
    dispatch_async(v15, &v16);

    objc_storeStrong(v22, 0);
    objc_storeStrong((id *)&v21, 0);
  }
  else
  {
    os_log_t v25 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v25;
      os_log_type_t v5 = v24;
      sub_10004B24C(v23);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping Express Setup pane because we need more than two features to list", v23, 2u);
    }
    objc_storeStrong((id *)&v25, 0);
    [(objc_class *)a1[4].isa _recordAnalyticsEventForDataProvider:*(void *)(*((void *)a1[6].isa + 1) + 40) presented:0 customized:0];
    id v6 = [(objc_class *)a1[4].isa paneFeatureAnalyticsManager];
    [v6 setExpressDataSource:0 features:0];

    if (a1[5].isa) {
      (*((void (**)(void))a1[5].isa + 2))();
    }
  }
}

void sub_1000B4374(uint64_t a1)
{
  _DWORD v11[4] = (id)a1;
  v11[3] = (id)a1;
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) expressSetupFeatures];
  [v2 prepareStateForExpressFeatures:v3 withDataSource:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  id v4 = &_dispatch_main_q;
  os_log_type_t v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000B44BC;
  id v9 = &unk_1002B23B0;
  id v10 = *(id *)(a1 + 32);
  v11[1] = *(id *)(a1 + 48);
  v11[2] = *(id *)(a1 + 56);
  v11[0] = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(v11, 0);
  objc_storeStrong(&v10, 0);
}

void sub_1000B44BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) paneFeatureAnalyticsManager:a1:a1];
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) resolvedDataSource];
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) expressSetupFeatures];
  [v2 setExpressDataSource:v3 features:v4];

  id v5 = [*(id *)(a1 + 32) headerView];
  [v5 setIcon:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accessibilityLabel:0];

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000B5130(NSAssertionHandler *a1)
{
  sub_1000B5274();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPassLibrary");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getPKPassLibraryClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyExpressWelcomeController.m", 66, @"Unable to find class %s", "PKPassLibrary" file lineNumber description];

    __break(1u);
  }
  qword_100321BB0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000B5274()
{
  if (!sub_1000B53A4())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *PassKitCoreLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyExpressWelcomeController.m", 65, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000B53A4()
{
  if (!qword_100321BB8) {
    sub_1000B545C();
  }
  return qword_100321BB8;
}

uint64_t sub_1000B545C()
{
  uint64_t result = _sl_dlopen();
  qword_100321BB8 = result;
  return result;
}

void sub_1000B6B90(uint64_t a1)
{
  uint64_t v15 = a1;
  uint64_t v14 = a1;
  id v2 = +[BuddyActivationConfiguration currentConfiguration];
  unsigned __int8 v3 = [v2 isActivated];

  char v13 = v3 & 1;
  id v4 = &_dispatch_main_q;
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000B6CBC;
  id v9 = &unk_1002B2418;
  id v10 = *(id *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40) & 1;
  char v12 = v3 & 1;
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v10, 0);
}

id sub_1000B6CBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkActivationFailIfNotActivated:*(unsigned char *)(a1 + 40) & 1 isActivated:*(unsigned char *)(a1 + 41) & 1 a1:a1 a1:a1];
}

void sub_1000B7398(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v13 = a1;
  id v2 = +[BuddyActivationConfiguration currentConfiguration];
  unsigned __int8 v3 = [v2 isActivated];

  char v12 = v3 & 1;
  id v4 = &_dispatch_main_q;
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000B74B8;
  id v9 = &unk_1002B1130;
  char v11 = v3 & 1;
  id v10 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v10, 0);
}

id *sub_1000B74B8(id *result)
{
  if (((_BYTE)result[5] & 1) == 0) {
    return (id *)[result[4] _activate:result result];
  }
  *((_DWORD *)result[4] + 24) = 3;
  return result;
}

void sub_1000B80B8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v11 = 0;
  objc_storeStrong(&v11, a3);
  id v10 = 0;
  objc_storeStrong(&v10, a4);
  id v9 = 0;
  objc_storeStrong(&v9, a5);
  if (v9)
  {
    [*(id *)(a1 + 32) _handleFailureWithError:v9 a1];
  }
  else if (location[0])
  {
    [*(id *)(a1 + 32) _handleActivationData:location[0] responseHeaders:v11 baseURL:v10 a1];
  }
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

double sub_1000B8CA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2048;
  *(void *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(void *)(a1 + 20) = a4;
  return result;
}

void sub_1000B8CD4(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  id v8 = 0;
  objc_storeStrong(&v8, a4);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  [WeakRetained agreeToRemoteUIDialog];

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B8D80(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  id v8 = 0;
  objc_storeStrong(&v8, a4);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  [WeakRetained disagreeToRemoteUIDialog];

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B8E2C(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  id v8 = 0;
  objc_storeStrong(&v8, a4);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  [WeakRetained tryAgainOnRemoteUIDialog];

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B8ED8(uint64_t a1)
{
  v51[2] = (id)a1;
  v51[1] = (id)a1;
  uint64_t v2 = *(void *)(a1 + 32);
  char v49 = 0;
  if (v2)
  {
    uint64_t v55 = kMAOptionsActivationResponseHeaders;
    uint64_t v56 = *(void *)(a1 + 32);
    unsigned __int8 v3 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
    objc_super v50 = v3;
    char v49 = 1;
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  v51[0] = v3;
  if (v49) {

  }
  id location = 0;
  long long v47 = 0uLL;
  id v4 = (id)_BYSignpostSubsystem();
  uint64_t v5 = _BYSignpostCreate();
  *((void *)&v46 + 1) = v6;
  *(void *)&long long v46 = v5;

  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v44 = 1;
  os_signpost_id_t v43 = v46;
  if ((void)v46 && v43 != -1 && os_signpost_enabled(log))
  {
    int v7 = log;
    os_signpost_type_t v8 = v44;
    os_signpost_id_t v9 = v43;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "ActivationActivate", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_100046588((uint64_t)v54, v46);
    _os_log_impl((void *)&_mh_execute_header, oslog, v40, "BEGIN [%lld]: ActivationActivate ", v54, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  long long v47 = v46;
  obunint64_t j = location;
  char v10 = MAEActivateDeviceWithError();
  objc_storeStrong(&location, obj);
  char v39 = v10;
  double v37 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t v36 = (os_log_t)(id)_BYSignpostSubsystem();
  char v35 = 2;
  os_signpost_id_t v34 = v47;
  if ((void)v47 && v34 != -1 && os_signpost_enabled(v36))
  {
    id v11 = v36;
    os_signpost_type_t v12 = v35;
    os_signpost_id_t v13 = v34;
    sub_10004B24C(v33);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v12, v13, "ActivationActivate", "", v33, 2u);
  }
  objc_storeStrong((id *)&v36, 0);
  os_log_t v32 = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v53, v47, *(uint64_t *)&v37);
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "END [%lld] %fs: ActivationActivate ", v53, 0x16u);
  }
  objc_storeStrong((id *)&v32, 0);
  os_log_t v30 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = v39 & 1;
    char v27 = 0;
    char v25 = 0;
    if (_BYIsInternalInstall())
    {
      uint64_t v15 = (NSString *)location;
    }
    else if (location)
    {
      id v28 = [location domain];
      char v27 = 1;
      uint64_t v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v28, [location code]);
      id v26 = v15;
      char v25 = 1;
    }
    else
    {
      uint64_t v15 = 0;
    }
    sub_1000639A4((uint64_t)v52, v14, (uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v30, v29, "Buddy Activate: ticketAccepted = %d, error = %{public}@", v52, 0x12u);
    if (v25) {

    }
    if (v27) {
  }
    }
  objc_storeStrong((id *)&v30, 0);
  char v16 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v18 = -1073741824;
  int v19 = 0;
  uint64_t v20 = sub_1000B94A0;
  char v21 = &unk_1002B15A0;
  char v24 = v39 & 1;
  id v22 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v16, &block);

  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v51, 0);
}

void sub_1000B94A0(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 48))
  {
    [*(id *)(a1 + 32) _clearTicketAcceptedTimer];
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v2 = oslog[0];
      os_log_type_t v3 = v9;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Buddy Activate: Scheduling ticket accepted timer...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v4 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"_ticketAcceptedDidTimeout" selector:0 userInfo:0 repeats:20.0];
    uint64_t v5 = (void **)(*(void *)(a1 + 32) + 120);
    uint64_t v6 = *v5;
    *uint64_t v5 = v4;
  }
  else
  {
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v11, *(void *)(a1 + 40));
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Failed with response body: %@", v11, 0xCu);
    }
    objc_storeStrong((id *)&v7, 0);
    [*(id *)(a1 + 32) _enterState:5];
  }
}

void sub_1000B9BE4(void *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v25 = 0;
  objc_storeStrong(&v25, a3);
  char v24 = a1;
  double v23 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v21 = 2;
  os_signpost_id_t v20 = 0;
  os_signpost_id_t v20 = a1[5];
  if (v20 && v20 != -1 && os_signpost_enabled(log))
  {
    uint64_t v5 = log;
    os_signpost_type_t v6 = v21;
    os_signpost_id_t v7 = v20;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ActivationFindMyIdentity", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v30, a1[5], *(uint64_t *)&v23);
    _os_log_impl((void *)&_mh_execute_header, oslog, v17, "END [%lld] %fs: ActivationFindMyIdentity ", v30, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v16 = 0;
  if (!v25 && location[0])
  {
    uint64_t v27 = kMAOptionsActivationLockInfo;
    id v28 = location[0];
    os_log_type_t v9 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    id v10 = v16;
    id v16 = v9;
  }
  else
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        os_signpost_type_t v8 = (NSString *)v25;
      }
      else if (v25)
      {
        id v14 = [v25 domain];
        char v13 = 1;
        os_signpost_type_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [v25 code]);
        os_signpost_type_t v12 = v8;
        char v11 = 1;
      }
      else
      {
        os_signpost_type_t v8 = 0;
      }
      sub_10004BB7C((uint64_t)v29, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Error generating FMiP identity: %{public}@", v29, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)&v15, 0);
  }
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v25, 0);
  objc_storeStrong(location, 0);
}

id sub_1000BA1A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleFailureWithError:0 a1:a1];
}

void sub_1000BA1D0(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v11 = 0;
  objc_storeStrong(&v11, a3);
  id v10 = 0;
  objc_storeStrong(&v10, a4);
  id v9 = 0;
  objc_storeStrong(&v9, a5);
  if (v9)
  {
    [a1[4] _handleFailureWithError:v9, a1];
  }
  else if (location[0])
  {
    [a1[4] _handleActivationData:location[0] responseHeaders:v11 baseURL:v10];
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000BAB9C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _tryActivateWithOptions:location[0] requestMutator:0];
  objc_storeStrong(location, 0);
}

double sub_1000BB014(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)&double result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

void sub_1000BB640(id a1)
{
  id v8 = a1;
  id v7 = a1;
  if (lockdown_connect())
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v1 = oslog;
      os_log_type_t v2 = v4;
      sub_10004B24C(v3);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Buddy Activate: Writing ActivationStateAcknowledged key.", (uint8_t *)v3, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    lockdown_set_value();
    lockdown_disconnect();
  }
}

void sub_1000BB94C(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v3 = oslog[0];
    os_log_type_t v4 = v10;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Activation Lock Expiration Timer fired", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v5 = [(objc_class *)a1[4].isa navigationController];
  id v8 = [v5 topViewController];

  if (v8 == *((id *)a1[4].isa + 22))
  {
    id v6 = [(objc_class *)a1[4].isa navigationController];
    id v7 = [v6 popToViewController:a1[4].isa animated:1];
  }
  [(objc_class *)a1[4].isa _stopActivationLockExpirationTimer];
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_1000BBF30(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _userAgreedToTCs:1];
  objc_storeStrong(location, 0);
}

id sub_1000BC39C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkActivationFailIfNotActivated:0 isActivated:*(unsigned char *)(a1 + 40) & 1 a1 a1];
}

void sub_1000BDF04(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v28 = 0;
  objc_storeStrong(&v28, a3);
  uint64_t v27 = a1;
  double v26 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v24 = 2;
  os_signpost_id_t v23 = 0;
  os_signpost_id_t v23 = *(void *)(a1 + 64);
  if (v23 && v23 != -1 && os_signpost_enabled(log))
  {
    id v5 = log;
    os_signpost_type_t v6 = v24;
    os_signpost_id_t v7 = v23;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ActivationFindMyIdentity", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v30, *(void *)(a1 + 64), *(uint64_t *)&v26);
    _os_log_impl((void *)&_mh_execute_header, oslog, v20, "END [%lld] %fs: ActivationFindMyIdentity ", v30, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v8 = &_dispatch_main_q;
  id v9 = _NSConcreteStackBlock;
  int v10 = -1073741824;
  int v11 = 0;
  os_signpost_type_t v12 = sub_1000BE230;
  char v13 = &unk_1002B2578;
  id v14 = location[0];
  id v15 = v28;
  id v16 = *(id *)(a1 + 32);
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v8, &v9);

  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

void sub_1000BE230(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  if (![*(id *)(a1 + 32) length] || *(void *)(a1 + 40))
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      char v10 = 0;
      char v8 = 0;
      if (_BYIsInternalInstall())
      {
        os_signpost_id_t v7 = *(NSString **)(a1 + 40);
      }
      else if (*(void *)(a1 + 40))
      {
        id v11 = [*(id *)(a1 + 40) domain];
        char v10 = 1;
        os_signpost_id_t v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v11, [*(id *)(a1 + 40) code]);
        id v9 = v7;
        char v8 = 1;
      }
      else
      {
        os_signpost_id_t v7 = 0;
      }
      sub_10004BB7C((uint64_t)v26, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Failed to get identity recovery blob, error: %{public}@", v26, 0xCu);
      if (v8) {

      }
      if (v10) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 64) stopSpinningForIdentifier:*(void *)(a1 + 72)];
    [*(id *)(a1 + 64) _enterState:5];
  }
  else
  {
    location[0] = (id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v2 = location[0];
      os_log_type_t v3 = v24;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Buddy Activate: Posting activation with identity recovery blob", buf, 2u);
    }
    objc_storeStrong(location, 0);
    id v22 = (id)objc_opt_new();
    id v4 = [*(id *)(a1 + 48) serverInfo];

    if (v4)
    {
      id v5 = [*(id *)(a1 + 48) serverInfo];
      [v22 setObject:v5 forKeyedSubscript:@"serverInfo"];
    }
    id v21 = +[NSMutableURLRequest requestWithURL:*(void *)(a1 + 56)];
    [v21 setHTTPMethod:@"POST"];
    [v21 setValue:@"application/x-plist" forHTTPHeaderField:@"Content-Type"];
    [v22 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"ActivationLockRecoveryInfo"];
    id v20 = +[NSPropertyListSerialization dataWithPropertyList:v22 format:100 options:0 error:0];
    [v21 setHTTPBody:v20];
    os_signpost_type_t v6 = *(void **)(a1 + 64);
    char v13 = _NSConcreteStackBlock;
    int v14 = -1073741824;
    int v15 = 0;
    id v16 = sub_1000BE63C;
    id v17 = &unk_1002B2550;
    id v18 = *(id *)(a1 + 64);
    id v19 = *(id *)(a1 + 72);
    [v6 startRequest:v21 completion:&v13];
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v22, 0);
  }
}

void sub_1000BE63C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v11 = 0;
  objc_storeStrong(&v11, a3);
  id v10 = 0;
  objc_storeStrong(&v10, a4);
  id v9 = 0;
  objc_storeStrong(&v9, a5);
  [*(id *)(a1 + 32) stopSpinningForIdentifier:*(void *)(a1 + 40) a1];
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000BE7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_1000BE7E8(id a1, RUIElement *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  id v3 = [location[0] pageElement];
  id v4 = [v3 page];
  id v5 = [v4 attributes];
  v9[0] = [v5 objectForKeyedSubscript:@"name"];

  if (([v9[0] isEqualToString:@"FMIPLockPasscode"] & 1) == 0) {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v6 = [location[0] identifier];
    unsigned __int8 v7 = [v6 isEqualToString:@"next"];

    if (v7)
    {
      char v11 = 1;
      goto LABEL_7;
    }
LABEL_6:
    char v11 = 0;
    goto LABEL_7;
  }
  char v11 = 1;
LABEL_7:
  objc_storeStrong(v9, 0);
  objc_storeStrong(location, 0);
  return v11 & 1;
}

void sub_1000BE96C(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v24 = 0;
  objc_storeStrong(&v24, a3);
  id v23 = 0;
  objc_storeStrong(&v23, a4);
  v22[1] = a1;
  v22[0] = objc_loadWeakRetained(a1 + 4);
  if (v22[0])
  {
    id v21 = 0;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v20 = v24;
      id v7 = [v20 passcodeField];
      id v8 = [v7 stringValue];
      id v9 = v21;
      id v21 = v8;

      objc_storeStrong(&v20, 0);
    }
    else
    {
      id v19 = [location[0] subElementWithID:@"passcode"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v10 = [v19 tableCell];
        id v11 = [v10 editableTextField];
        id v12 = [v11 text];
        id v13 = v21;
        id v21 = v12;
      }
      else
      {
        os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = oslog;
          os_log_type_t v15 = v17;
          sub_10004B24C(v16);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to find passcode on FMIP passcode lock pane!", (uint8_t *)v16, 2u);
        }
        objc_storeStrong((id *)&oslog, 0);
      }
      objc_storeStrong(&v19, 0);
    }
    if (v21) {
      [v22[0] _activateWithPasscode:v21 fromObjectModel:location[0]];
    }
    else {
      [v22[0] _enterState:5];
    }
    objc_storeStrong(&v21, 0);
  }
  objc_storeStrong(v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v24, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C0538(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v40 = 0;
  objc_storeStrong(&v40, a3);
  char v39 = a1;
  BOOL v38 = 0;
  id v5 = [v40 domain];
  BOOL v6 = 0;
  if ([v5 isEqualToString:AKAppleIDAuthenticationErrorDomain]) {
    BOOL v6 = [v40 code] == (id)-7003;
  }

  BOOL v38 = v6;
  BOOL v37 = v40 == 0;
  id v36 = (id)_BYLoggingFacility();
  os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT))
  {
    char v33 = 0;
    char v31 = 0;
    if (_BYIsInternalInstall())
    {
      id v7 = (NSString *)v40;
    }
    else if (v40)
    {
      id v34 = [v40 domain];
      char v33 = 1;
      id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v34, [v40 code]);
      id v32 = v7;
      char v31 = 1;
    }
    else
    {
      id v7 = 0;
    }
    sub_1000639A4((uint64_t)buf, v37, (uint64_t)v7);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v36, v35, "Auth finished with success %i error %{public}@", buf, 0x12u);
    if (v31) {

    }
    if (v33) {
  }
    }
  objc_storeStrong(&v36, 0);
  id v30 = v40;
  if (v38)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = oslog;
      os_log_type_t v9 = v28;
      sub_10004B24C(v27);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "AuthManager: Auth canceled", v27, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else if (v40)
  {
    os_log_t v26 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      char v23 = 0;
      char v21 = 0;
      if (_BYIsInternalInstall())
      {
        id v10 = (NSString *)v40;
      }
      else if (v40)
      {
        id v24 = [v40 domain];
        char v23 = 1;
        id v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v24, [v40 code]);
        id v22 = v10;
        char v21 = 1;
      }
      else
      {
        id v10 = 0;
      }
      sub_10004BB7C((uint64_t)v42, (uint64_t)v10);
      _os_log_impl((void *)&_mh_execute_header, v26, v25, "Authenticate failed with error: %{public}@", v42, 0xCu);
      if (v21) {

      }
      if (v23) {
    }
      }
    objc_storeStrong((id *)&v26, 0);
  }
  id v11 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v13 = -1073741824;
  int v14 = 0;
  os_log_type_t v15 = sub_1000C0A60;
  id v16 = &unk_1002B2608;
  id v17 = a1[4];
  id v20 = a1[5];
  id v18 = location[0];
  id v19 = v30;
  dispatch_async((dispatch_queue_t)v11, &block);

  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(&v40, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C0A60(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setEnabled:1];
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v5 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v2 = oslog[0];
    os_log_type_t v3 = v5;
    sub_10004B24C(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AuthManager completion", (uint8_t *)v4, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  if (a1[7].isa) {
    (*((void (**)(void))a1[7].isa + 2))();
  }
}

void sub_1000C105C(NSObject *a1, void *a2, id obj)
{
  id v17 = a1;
  id v16 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    if (v16 == (void *)2) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v13, "Account is federated auth account: %{public}@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  os_log_type_t v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  os_log_type_t v9 = sub_1000C123C;
  id v10 = &unk_1002B2658;
  v12[0] = a1[4].isa;
  v12[1] = v16;
  id v11 = location;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(v12, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_1000C123C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[6], a1[4]);
}

double sub_1000C167C()
{
  return 20.0;
}

void sub_1000C17F4(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isFilled", a1, a1))
  {
    os_log_type_t v2 = +[UIColor labelColor];
    os_log_type_t v3 = [(UIColor *)v2 CGColor];
    id v4 = [*(id *)(a1 + 32) layer];
    [v4 setBackgroundColor:v3];

    id v5 = [*(id *)(a1 + 32) layer];
    [v5 setBorderColor:0];
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) layer];
    [v6 setBackgroundColor:0];

    int v7 = +[UIColor tertiaryLabelColor];
    int v8 = [(UIColor *)v7 CGColor];
    id v9 = [*(id *)(a1 + 32) layer];
    [v9 setBorderColor:v8];
  }
}

void sub_1000C220C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  char v6 = 2;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    os_log_type_t v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_debug_impl((void *)&_mh_execute_header, v2, v3, "Add keyboard language view controller did complete dismiss", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v4 = (void (**)(void))[(objc_class *)a1[4].isa completion];
  v4[2](v4);
}

id sub_1000C291C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321BC0;
  uint64_t v13 = qword_100321BC0;
  if (!qword_100321BC0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000C304C;
    char v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000C304C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1000C2A34()
{
  int v4 = (void **)sub_1000C3410();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoFlowTypeKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyCloudSIMController.m", 31, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

id sub_1000C2B40()
{
  int v4 = (void **)sub_1000C357C();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoProximitySetupStateKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyCloudSIMController.m", 32, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

void sub_1000C2C4C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4]) {
    (*(void (**)(void, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1000C304C(NSAssertionHandler *a1)
{
  sub_1000C3190();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getTSSIMSetupFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyCloudSIMController.m", 30, @"Unable to find class %s", "TSSIMSetupFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321BC0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1000C3190()
{
  uint64_t v3 = sub_1000C32C4();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SIMSetupSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyCloudSIMController.m", 29, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_1000C32C4()
{
  if (!qword_100321BC8) {
    sub_1000C337C();
  }
  return qword_100321BC8;
}

uint64_t sub_1000C337C()
{
  uint64_t result = _sl_dlopen();
  qword_100321BC8 = result;
  return result;
}

uint64_t sub_1000C3410()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321BD0;
  uint64_t v13 = qword_100321BD0;
  if (!qword_100321BD0)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000C3510;
    char v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000C3510((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1000C3510(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_1000C3190();
  uint64_t result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321BD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000C357C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321BD8;
  uint64_t v13 = qword_100321BD8;
  if (!qword_100321BD8)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000C367C;
    char v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000C367C((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1000C367C(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_1000C3190();
  uint64_t result = dlsym(v2, "TSUserInfoProximitySetupStateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321BD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000C4CFC(id a1, NSArray *a2, NSError *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v10 = 0;
  objc_storeStrong(&v10, a3);
  oslog[1] = (os_log_t)a1;
  if (v10)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v8 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id v5 = oslog[0];
      os_log_type_t v6 = v8;
      sub_10004B24C(v7);
      _os_log_error_impl((void *)&_mh_execute_header, v5, v6, "Failed to register for store account additions for suspend task", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
}

id sub_1000C51E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attemptPreheat:3 a1, a1];
}

void sub_1000C5CD0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) launchURL:a1, a1];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;

  id v3 = [*(id *)(a1 + 32) message];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3 != 0;
}

id sub_1000C5D58(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLaunchURL:*(void *)(a1 + 40) a1, a1];
}

id sub_1000C5D88(uint64_t a1)
{
  return [*(id *)(a1 + 32) setMessage:*(void *)(a1 + 40) a1, a1];
}

id sub_1000C5DB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attemptPreheat:*(void *)(a1 + 40) - 1 a1 a1];
}

id sub_1000C5F40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attemptPreheat:1 a1:a1];
}

void sub_1000C62BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000C62DC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321BE0;
  uint64_t v13 = qword_100321BE0;
  if (!qword_100321BE0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000C656C;
    os_log_type_t v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_1000C656C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000C63F4(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (location[0]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_1000C656C(NSAssertionHandler *a1)
{
  sub_1000C66B0();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("CAMCameraButtonBuddyViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getCAMCameraButtonBuddyViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyCameraButtonViewControllerWrapper.m", 17, @"Unable to find class %s", "CAMCameraButtonBuddyViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321BE0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000C66B0()
{
  if (!sub_1000C67E0())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *CameraUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyCameraButtonViewControllerWrapper.m", 16, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000C67E0()
{
  if (!qword_100321BE8) {
    sub_1000C6898();
  }
  return qword_100321BE8;
}

uint64_t sub_1000C6898()
{
  uint64_t result = _sl_dlopen();
  qword_100321BE8 = result;
  return result;
}

void sub_1000C7AA4(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  id v14 = 0;
  objc_storeStrong(&v14, a4);
  oslog[1] = a1;
  if (v14)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)v14);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v12, "CloudKit migration failed: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    BRSetMigrationStatusForDSID();
  }
  else
  {
    os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = v11;
      os_log_type_t v8 = v10;
      sub_10004B24C(v9);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CloudKit migration started!", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
    BRSetMigrationStatusForDSID();
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C7F08(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v22 = 0;
  objc_storeStrong(&v22, a3);
  id v21 = 0;
  objc_storeStrong(&v21, a4);
  oslog[1] = a1;
  if (v21)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v17 = 0;
      char v15 = 0;
      if (_BYIsInternalInstall())
      {
        int v7 = (NSString *)v21;
      }
      else if (v21)
      {
        id v18 = [v21 domain];
        char v17 = 1;
        int v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v18, [v21 code]);
        id v16 = v7;
        char v15 = 1;
      }
      else
      {
        int v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v19, "Failed to get CloudKit migration state: %{public}@", buf, 0xCu);
      if (v15) {

      }
      if (v17) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    if (a1[4].isa) {
      (*((void (**)(void))a1[4].isa + 2))();
    }
    int v14 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v13 = v22;
      id v12 = [v13 name];
      char v11 = [v12 isEqualToString:AACloudKitMigrationStateNone] & 1;
      os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_10004B238((uint64_t)v25, (uint64_t)v12);
        _os_log_impl((void *)&_mh_execute_header, v10, v9, "Received migration state: %@", v25, 0xCu);
      }
      objc_storeStrong((id *)&v10, 0);
      if (a1[4].isa) {
        (*((void (**)(void))a1[4].isa + 2))();
      }
      objc_storeStrong(&v12, 0);
      objc_storeStrong(&v13, 0);
    }
    else
    {
      os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_10004B238((uint64_t)v24, (uint64_t)v22);
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Received unexpected response type: %@", v24, 0xCu);
      }
      objc_storeStrong((id *)&v8, 0);
      if (a1[4].isa) {
        (*((void (**)(void))a1[4].isa + 2))();
      }
    }
    int v14 = 0;
  }
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C94B4(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = [WeakRetained choiceController];
  [v4 choiceConfirmed:*(void *)(a1 + 32)];

  objc_storeStrong(location, 0);
}

void sub_1000C96CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C96EC(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = [WeakRetained choiceController];
  [v4 choiceCancelled:*(void *)(a1 + 32)];

  objc_storeStrong(location, 0);
}

void sub_1000CA9B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained learnMoreButtonTapped:0 a1, a1];
}

uint64_t sub_1000CDF08(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  char v3 = [a1[4] containsObject:location[0]] ^ 1;
  objc_storeStrong(location, 0);
  return v3 & 1;
}

void sub_1000CE26C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  v9[0] = objc_loadWeakRetained(a1 + 4);
  id v3 = [v9[0] dataSource];
  id v4 = [v9[0] tableView];
  [v3 tableView:v4 appendItem:location[0] inSection:0];

  id v5 = [v9[0] dataSource];
  id v6 = [v9[0] tableView];
  id v7 = [v9[0] dataSelectorController];
  id v8 = [v7 dataStore];
  [v5 tableView:v6 allowAdditionalDataSelection:[v8 count] != 0];

  [v9[0] dismissViewControllerAnimated:1 completion:0];
  objc_storeStrong(v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000CF934(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v3 = [v2 popToBuddyControllerWithClass:objc_opt_class() animated:1];

  if (!v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    id v5 = [v4 popToBuddyControllerWithClass:objc_opt_class() animated:1];
  }
}

void sub_1000D04FC(id a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v1 = oslog[0];
    os_log_type_t v2 = v6;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "\"Installing\" fake software update...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  +[BYPreferencesController flushEverything];
  sleep(2u);
  id location = [objc_alloc((Class)FBSShutdownOptions) initWithReason:@"Setup Assistant Software Update Restore Testing"];
  [location setRebootType:1];
  id v3 = +[FBSSystemService sharedService];
  [v3 shutdownWithOptions:location];

  objc_storeStrong(&location, 0);
}

void sub_1000D0614(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  id v3 = [(objc_class *)a1[4].isa backupItem];
  id v4 = [(objc_class *)a1[4].isa update];
  id v5 = [v4 productVersion];
  -[objc_class setAbleToRestoreWithUpdate:](a1[4].isa, "setAbleToRestoreWithUpdate:", (unint64_t)[v3 isCompatibleWithUpdateToSystemVersion:v5] & 1);

  if (([(objc_class *)a1[4].isa ableToRestoreWithUpdate] & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id v6 = [(objc_class *)a1[4].isa backupItem];
      id v7 = [(objc_class *)a1[4].isa update];
      sub_100051470((uint64_t)buf, (uint64_t)v6, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Entered restore flow without a compatible update! backupItem: %@, update: %@", buf, 0x16u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  objc_storeStrong(location, 0);
}

id sub_1000D1278()
{
  uint64_t v9 = 0;
  os_log_t v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321BF0;
  uint64_t v13 = qword_100321BF0;
  if (!qword_100321BF0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000D2AAC;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1000D2AAC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1000D1A10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateImageViewPadding:a1:a1];
}

void sub_1000D1A3C(id *a1, char a2)
{
  uint64_t v9 = a1;
  char v8 = a2;
  v7[1] = a1;
  NSAssertionHandler v2 = _NSConcreteStackBlock;
  int v3 = -1073741824;
  int v4 = 0;
  id v5 = sub_1000D1AFC;
  id v6 = &unk_1002B0D20;
  v7[0] = a1[4];
  +[UIView animateWithDuration:&v2 animations:0.5];
  objc_storeStrong(v7, 0);
}

void sub_1000D1AFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) headerView:a1, a1];
  [v2 setAlpha:1.0];

  id v3 = [*(id *)(a1 + 32) contentView];
  [v3 setAlpha:1.0];
}

void sub_1000D1C70(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) headerView:a1:a1];
  [v2 setAlpha:0.0];

  id v3 = [*(id *)(a1 + 32) contentView];
  [v3 setAlpha:0.0];
}

void sub_1000D23D4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) headerView:a1, a1];
  [v1 setAlpha:0.0];
}

void sub_1000D2428(uint64_t a1, char a2)
{
  uint64_t v11 = a1;
  char v10 = a2;
  v9[1] = (id)a1;
  id v3 = [*(id *)(a1 + 32) headerView];
  [v3 setTitle:*(void *)(a1 + 40)];

  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1000D251C;
  char v8 = &unk_1002B0D20;
  v9[0] = *(id *)(a1 + 32);
  +[UIView animateWithDuration:&v4 animations:0.5];
  objc_storeStrong(v9, 0);
}

id sub_1000D251C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) headerView:a1, a1];
  [v2 setAlpha:1.0];

  return [*(id *)(a1 + 32) _updateImageViewPadding];
}

id sub_1000D26F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHeaderForConnectedToComputer:*(void *)(a1 + 40) != 0, 1, a1, a1];
}

id sub_1000D2824(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHeaderForConnectedToComputer:0 animated:1 a1:a1];
}

void sub_1000D2AAC(NSAssertionHandler *a1)
{
  sub_1000D2BF0();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("ATConnection");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getATConnectionClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"RestoreFromComputerController.m", 25, @"Unable to find class %s", "ATConnection" file lineNumber description];

    __break(1u);
  }
  qword_100321BF0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000D2BF0()
{
  if (!sub_1000D2D20())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *AirTrafficLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"RestoreFromComputerController.m", 24, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000D2D20()
{
  if (!qword_100321BF8) {
    sub_1000D2DD8();
  }
  return qword_100321BF8;
}

uint64_t sub_1000D2DD8()
{
  uint64_t result = _sl_dlopen();
  qword_100321BF8 = result;
  return result;
}

id sub_1000D2F1C()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C00;
  uint64_t v13 = qword_100321C00;
  if (!qword_100321C00)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_1000D5430;
    int v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1000D5430(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000D3144(uint64_t a1)
{
  uint64_t v70 = a1;
  uint64_t v69 = a1;
  uint64_t v64 = 0;
  id v65 = &v64;
  int v66 = 0x20000000;
  int v67 = 32;
  char ShouldBeShownInSetupAssistant = 0;
  char ShouldBeShownInSetupAssistant = BYAssistantScreenShouldBeShownInSetupAssistant();
  id v2 = [sub_1000D2F1C() sharedPreferences];
  unsigned __int8 v3 = [v2 isCurrentLocaleNativelySupported];

  char v63 = v3 & 1;
  id v4 = [sub_1000D38B8() sharedPreferences];
  unsigned __int8 v5 = [v4 voiceTriggerEnabled];

  char v62 = v5 & 1;
  if (v65[3] & 1) == 0 && (v62 & 1) == 0 && (v63)
  {
    uint64_t v57 = 0;
    id v58 = &v57;
    int v59 = 0x20000000;
    int v60 = 32;
    char v61 = 0;
    id v72 = (dispatch_once_t *)&unk_100321C30;
    id location = 0;
    objc_storeStrong(&location, &stru_1002B2888);
    if (*v72 != -1) {
      dispatch_once(v72, location);
    }
    objc_storeStrong(&location, 0);
    id v56 = dispatch_semaphore_create(0);
    id v6 = (id)qword_100321C38;
    objc_sync_enter(v6);
    char v49 = _NSConcreteStackBlock;
    int v50 = -1073741824;
    int v51 = 0;
    char v52 = sub_1000D3A24;
    int v53 = &unk_1002B28B0;
    v54[1] = &v57;
    v54[0] = v56;
    id v55 = objc_retainBlock(&v49);
    id v7 = (void *)qword_100321C38;
    id v8 = objc_retainBlock(v55);
    [v7 addObject:v8];

    objc_storeStrong(&v55, 0);
    objc_storeStrong(v54, 0);
    objc_sync_exit(v6);

    id v48 = +[NSString stringWithFormat:@"Setup-%u", getpid()];
    oslog[1] = (os_log_t)sub_1000D3A68;
    [v48 cStringUsingEncoding:4];
    uint64_t v9 = &_dispatch_main_q;
    BTSessionAttachWithQueue();

    char v10 = v56;
    dispatch_time_t v11 = dispatch_time(0, 5000000000);
    if (dispatch_semaphore_wait(v10, v11))
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
      {
        int v12 = oslog[0];
        os_log_type_t v13 = v46;
        sub_10004B24C(buf);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Timed out waiting for bluetooth check", buf, 2u);
      }
      objc_storeStrong((id *)oslog, 0);
    }
    if (v58[3])
    {
      os_log_t v44 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = v44;
        os_log_type_t v15 = v43;
        sub_10004B24C(v42);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Bluetooth device exists that supports Hey Siri, but Hey Siri is not enabled", v42, 2u);
      }
      objc_storeStrong((id *)&v44, 0);
      *((unsigned char *)v65 + 24) = 1;
    }
    objc_storeStrong(&v48, 0);
    objc_storeStrong(&v56, 0);
    _Block_object_dispose(&v57, 8);
  }
  char v40 = 0;
  char v38 = 0;
  char v36 = 0;
  char v16 = 0;
  if ((+[BYSiriUtilities isIntelligenceVoiceSelectionCompleted] & 1) == 0)
  {
    char v16 = 0;
    if (+[BYSiriUtilities currentVoiceIsDefaultVoice])
    {
      id v41 = [*(id *)(a1 + 32) buddyPreferencesExcludedFromBackup];
      char v40 = 1;
      char v16 = 0;
      if ([v41 BOOLForKey:@"IntelligencePresented"])
      {
        id v39 = [*(id *)(a1 + 32) buddyPreferencesExcludedFromBackup];
        char v38 = 1;
        id v37 = [v39 objectForKey:@"IntelligencePresented" includeCache:0];
        char v36 = 1;
        char v16 = [v37 BOOLValue] ^ 1;
      }
    }
  }
  if (v36) {

  }
  if (v38) {
  if (v40)
  }

  if (v16)
  {
    os_log_t v35 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      char v17 = v35;
      os_log_type_t v18 = v34;
      sub_10004B24C(v33);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Will show Siri for intelligence voice selection", v33, 2u);
    }
    objc_storeStrong((id *)&v35, 0);
    *((unsigned char *)v65 + 24) = 1;
  }
  os_log_type_t v25 = _NSConcreteStackBlock;
  int v26 = -1073741824;
  int v27 = 0;
  os_log_type_t v28 = sub_1000D3D68;
  os_log_type_t v29 = &unk_1002B28E0;
  v31[1] = &v64;
  id v30 = *(id *)(a1 + 32);
  v31[0] = *(id *)(a1 + 40);
  id v32 = objc_retainBlock(&v25);
  if (v65[3])
  {
    (*((void (**)(void))v32 + 2))();
  }
  else
  {
    os_log_type_t v19 = _NSConcreteStackBlock;
    int v20 = -1073741824;
    int v21 = 0;
    id v22 = sub_1000D3DE4;
    char v23 = &unk_1002B2908;
    v24[1] = &v64;
    v24[0] = v32;
    +[BYSiriUtilities requiresAcknowledgementForDataSharing:&v19];
    objc_storeStrong(v24, 0);
  }
  objc_storeStrong(&v32, 0);
  objc_storeStrong(v31, 0);
  objc_storeStrong(&v30, 0);
  _Block_object_dispose(&v64, 8);
}

id sub_1000D38B8()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C10;
  uint64_t v13 = qword_100321C10;
  if (!qword_100321C10)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    unsigned __int8 v5 = sub_1000D57F0;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1000D57F0(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000D39D0(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableArray);
  NSAssertionHandler v2 = (void *)qword_100321C38;
  qword_100321C38 = (uint64_t)v1;
}

intptr_t sub_1000D3A24(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 & 1;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1000D3A68(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v19 = result;
  int v18 = a2;
  int v17 = a3;
  uint64_t v16 = a4;
  if (!a2 && !v17)
  {
    uint64_t v15 = 0;
    char v14 = 0;
    BTLocalDeviceGetDefault();
    id v4 = (id)qword_100321C38;
    objc_sync_enter(v4);
    long long v12 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    long long v9 = 0u;
    id v5 = (id)qword_100321C38;
    id v6 = [v5 countByEnumeratingWithState:&v9 objects:v20 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v10;
      do
      {
        for (unint64_t i = 0; i < (unint64_t)v6; ++i)
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v13 = *(void *)(*((void *)&v9 + 1) + 8 * i);
          (*(void (**)(void))(v13 + 16))();
        }
        id v6 = [v5 countByEnumeratingWithState:&v9 objects:v20 count:16];
      }
      while (v6);
    }

    [(id)qword_100321C38 removeAllObjects];
    objc_sync_exit(v4);

    return BTSessionDetachWithQueue();
  }
  return result;
}

id *sub_1000D3D68(id *result)
{
  id v1 = result;
  if (*(unsigned char *)(*((void *)result[6] + 1) + 24)) {
    uint64_t result = [result[4] setDidOfferVoiceTrigger:BYAssistantScreenShouldRunForPHSUpgrade() & 1 result, result];
  }
  if (v1[5]) {
    return (id *)(*((uint64_t (**)(void))v1[5] + 2))();
  }
  return result;
}

uint64_t sub_1000D3DE4(NSObject *a1, char a2)
{
  long long v10 = a1;
  char v9 = a2;
  oslog[1] = a1;
  if (a2)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v3 = oslog[0];
      os_log_type_t v4 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will show Siri for data sharing acknowledgement", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  *(unsigned char *)(*((void *)a1[5].isa + 1) + 24) = v9 & 1;
  return (*((uint64_t (**)(void))a1[4].isa + 2))();
}

id sub_1000D3FC4()
{
  uint64_t v9 = 0;
  long long v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C20;
  uint64_t v13 = qword_100321C20;
  if (!qword_100321C20)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000D5BB0;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1000D5BB0(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000D5430(NSAssertionHandler *a1)
{
  sub_1000D5574();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("AFPreferences");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"AssistantOptInController.m", 45, @"Unable to find class %s", "AFPreferences" file lineNumber description];

    __break(1u);
  }
  qword_100321C00 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000D5574()
{
  if (!sub_1000D56A4())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"AssistantOptInController.m", 44, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000D56A4()
{
  if (!qword_100321C08) {
    sub_1000D575C();
  }
  return qword_100321C08;
}

uint64_t sub_1000D575C()
{
  uint64_t result = _sl_dlopen();
  qword_100321C08 = result;
  return result;
}

void sub_1000D57F0(NSAssertionHandler *a1)
{
  sub_1000D5934();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("VTPreferences");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getVTPreferencesClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"AssistantOptInController.m", 62, @"Unable to find class %s", "VTPreferences" file lineNumber description];

    __break(1u);
  }
  qword_100321C10 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000D5934()
{
  if (!sub_1000D5A64())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *VoiceTriggerLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"AssistantOptInController.m", 61, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000D5A64()
{
  if (!qword_100321C18) {
    sub_1000D5B1C();
  }
  return qword_100321C18;
}

uint64_t sub_1000D5B1C()
{
  uint64_t result = _sl_dlopen();
  qword_100321C18 = result;
  return result;
}

void sub_1000D5BB0(NSAssertionHandler *a1)
{
  sub_1000D5CF4();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("VTUIEnrollTrainingViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getVTUIEnrollTrainingViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"AssistantOptInController.m", 54, @"Unable to find class %s", "VTUIEnrollTrainingViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321C20 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000D5CF4()
{
  if (!sub_1000D5E24())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *VoiceTriggerUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"AssistantOptInController.m", 53, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000D5E24()
{
  if (!qword_100321C28) {
    sub_1000D5EDC();
  }
  return qword_100321C28;
}

uint64_t sub_1000D5EDC()
{
  uint64_t result = _sl_dlopen();
  qword_100321C28 = result;
  return result;
}

void sub_1000D6670(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v10 = 0;
  objc_storeStrong(&v10, a3);
  oslog[1] = a1;
  if (v10)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [v10 localizedDescription];
      sub_10004B238((uint64_t)buf, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Error fetching device properties: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa)
  {
    Class isa = a1[4].isa;
    id v7 = [location[0] valuesByPropertyKey];
    id v8 = [v7 objectForKeyedSubscript:DMFDeviceSkippedSetupPanesKey];
    (*((void (**)(Class, id))isa + 2))(isa, v8);
  }
  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
}

void sub_1000D79AC(uint64_t a1, uint64_t a2)
{
  int v3 = (id *)(a2 + 40);
  NSAssertionHandler v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1000D79F0(uint64_t a1)
{
}

void sub_1000D79FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appleIDMap:a1, a1];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = [*(id *)(a1 + 32) activeAppleID];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000D7A7C(uint64_t a1)
{
  id v31[2] = (id)a1;
  v31[1] = (id)a1;
  v26[0] = 0;
  v26[1] = v26;
  int v27 = 838860800;
  int v28 = 48;
  os_log_type_t v29 = sub_1000D79AC;
  id v30 = sub_1000D79F0;
  v31[0] = 0;
  block = _NSConcreteStackBlock;
  int v20 = -1073741824;
  int v21 = 0;
  id v22 = sub_1000D7D80;
  char v23 = &unk_1002B29C8;
  v24[0] = *(id *)(a1 + 32);
  v24[1] = v26;
  id location = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
  id v2 = dispatch_get_global_queue(25, 0);
  dispatch_async(v2, location);

  id v3 = location;
  dispatch_time_t v4 = dispatch_time(0, 30000000000);
  dispatch_block_wait(v3, v4);
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  int v14 = 838860800;
  int v15 = 48;
  uint64_t v16 = sub_1000D79AC;
  int v17 = sub_1000D79F0;
  id v18 = 0;
  id v5 = [*(id *)(a1 + 32) accountsQueue];
  uint64_t v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  uint64_t v9 = sub_1000D805C;
  id v10 = &unk_1002B29F0;
  v11[1] = *(id *)(a1 + 48);
  v11[0] = *(id *)(a1 + 32);
  v11[2] = *(id *)(a1 + 56);
  v11[3] = &v12;
  _DWORD v11[4] = v26;
  dispatch_sync(v5, &v6);

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v13[5]);
  }
  objc_storeStrong(v11, 0);
  _Block_object_dispose(&v12, 8);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v24, 0);
  _Block_object_dispose(v26, 8);
  objc_storeStrong(v31, 0);
}

void sub_1000D7D80(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = (id)_BYLoggingFacility();
  os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = location[0];
    os_log_type_t v3 = v25;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching Apple ID's from backup...", buf, 2u);
  }
  objc_storeStrong(location, 0);
  id v23 = 0;
  id v22 = 0;
  id v21 = 0;
  id v20 = objc_alloc_init((Class)MBManager);
  id v4 = [a1[4] backupUDID];
  id v5 = [a1[4] snapshotID];
  obunint64_t j = 0;
  id v18 = 0;
  id v6 = [v20 getAppleIDsMapForBackupUDID:v4 snapshotID:v5 activeAppleID:&obj error:&v18];
  objc_storeStrong(&v23, obj);
  objc_storeStrong(&v21, v18);
  id v7 = v22;
  id v22 = v6;

  int v8 = [a1[4] accountsQueue];
  block = _NSConcreteStackBlock;
  int v10 = -1073741824;
  int v11 = 0;
  uint64_t v12 = sub_1000D8000;
  uint64_t v13 = &unk_1002B29A0;
  id v14 = a1[4];
  id v15 = v22;
  id v16 = v23;
  v17[1] = a1[5];
  v17[0] = v21;
  dispatch_sync(v8, &block);

  objc_storeStrong(v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
}

void sub_1000D8000(uint64_t a1)
{
}

void sub_1000D805C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) appleIDMap:a1, a1];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = [*(id *)(a1 + 32) activeAppleID];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
}

void sub_1000DBA74(id a1)
{
  id v1 = objc_alloc_init(BuddyNavigationPit);
  id v2 = (void *)qword_100321C48;
  qword_100321C48 = (uint64_t)v1;
}

double sub_1000DC614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_1000DCF50(uint64_t a1)
{
  uint64_t v13 = a1;
  uint64_t v12 = a1;
  unsigned __int8 v2 = [*(id *)(a1 + 32) skippedByCloudConfiguration];
  char v10 = 0;
  char v8 = 0;
  BOOL v3 = 0;
  if ((v2 & 1) == 0)
  {
    id v11 = [*(id *)(a1 + 32) navigationController];
    char v10 = 1;
    id v9 = [v11 topViewController];
    char v8 = 1;
    BOOL v3 = v9 == *(id *)(a1 + 32);
  }
  if (v8) {

  }
  if (v10) {
  if (v3)
  }
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id location = (id)objc_opt_class();
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Advancing from %@ due to cloud configuration...", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 32) setSkippedByCloudConfiguration:1];
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 flowItemDone:*(void *)(a1 + 32)];
  }
}

void sub_1000DD334(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = [*(id *)(a1 + 32) proximitySetupController];
    unsigned __int8 v4 = [v3 shouldEnableProximity];
    char v6 = 0;
    LOBYTE(v5) = 0;
    if (v4)
    {
      id v7 = [*(id *)(a1 + 32) proximitySetupController];
      char v6 = 1;
      unsigned int v5 = [v7 hasAppliedSettings] ^ 1;
    }
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, v5 & 1);
    if (v6) {
  }
    }
}

void sub_1000DDC80(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_1000DDFB4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  id v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1000DE0C4;
  char v8 = &unk_1002B12F0;
  id v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000DE0C4(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        Class isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        id v16 = [(objc_class *)a1[4].isa domain];
        char v15 = 1;
        Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v16, [(objc_class *)a1[4].isa code]];
        id v14 = isa;
        char v13 = 1;
      }
      else
      {
        Class isa = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Configure MDM failed with error: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    id v3 = [(objc_class *)a1[5].isa mdmReturnToServiceController];
    [v3 returnToServiceFlowCompleted];

    [(objc_class *)a1[5].isa _presentTryAgainAlert];
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v4 = v12;
      os_log_type_t v5 = v11;
      sub_10004B24C(v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configure MDM succeed!", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    id v6 = +[BuddyCloudConfigManager sharedManager];
    id v7 = [(objc_class *)a1[5].isa managedConfiguration];
    id v8 = [v7 cloudConfigurationDetails];
    [v6 setCloudConfigurationDetails:v8];

    id v9 = [(objc_class *)a1[5].isa delegate];
    [v9 flowItemDone:a1[5].isa];
  }
}

void sub_1000DE39C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  os_log_type_t v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1000DE4F4;
  char v10 = &unk_1002B15F0;
  id v11 = location[0];
  id v12 = v14;
  v13[0] = a1[4];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000DE4F4(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(void *)(a1 + 32))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        uint64_t v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v16 = [*(id *)(a1 + 32) domain];
        char v15 = 1;
        uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v16, [*(id *)(a1 + 32) code]);
        id v14 = v2;
        char v13 = 1;
      }
      else
      {
        uint64_t v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Could not retrieve cloud configuration: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v20, *(void *)(a1 + 40));
      _os_log_impl((void *)&_mh_execute_header, v12, v11, "Detail: %@", v20, 0xCu);
    }
    objc_storeStrong((id *)&v12, 0);
    [*(id *)(a1 + 48) _presentTryAgainAlert];
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v10;
      os_log_type_t v4 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully fetched cloud configuration!", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      sub_10004B238((uint64_t)v19, *(void *)(a1 + 40));
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Details: %@", v19, 0xCu);
    }
    objc_storeStrong((id *)&v7, 0);
    id v5 = +[BuddyCloudConfigManager sharedManager];
    [v5 setCloudConfigurationDetails:*(void *)(a1 + 40)];

    id v6 = [*(id *)(a1 + 48) delegate];
    [v6 flowItemDone:*(void *)(a1 + 48)];
  }
}

void sub_1000DEBF0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _fetchCloudConfig];
  objc_storeStrong(location, 0);
}

void sub_1000DEC40(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] navigationController];
  id v4 = [v3 popViewControllerAnimated:1];

  objc_storeStrong(location, 0);
}

id sub_1000DF1DC(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v30 = 0;
  objc_storeStrong(&v30, a3);
  id v29 = 0;
  objc_storeStrong(&v29, a4);
  v28[1] = a1;
  v28[0] = v30;
  id v27 = [location[0] dequeueReusableCellWithIdentifier:v29];
  if (!v27)
  {
    id v7 = objc_alloc((Class)UITableViewCell);
    id v27 = [v7 initWithStyle:0 reuseIdentifier:v29];
  }
  id v8 = +[BFFStyle sharedStyle];
  [v8 applyThemeToTableCell:v27];

  id v9 = [v27 textLabel];
  [v9 setLineBreakMode:0];

  id v10 = [v27 textLabel];
  [v10 setNumberOfLines:0];

  os_log_type_t v11 = +[UIColor systemBlueColor];
  id v12 = [v27 imageView];
  [v12 setTintColor:v11];

  id v26 = 0;
  if ([a1[4] _useCompactMode])
  {
    id v13 = [v28[0] icon];
    double v14 = sub_1000DF4E8();
    id v16 = [v13 imageByPreparingThumbnailOfSize:v14, v15, *(void *)&v14, *(void *)&v15];
    id v17 = v26;
    id v26 = v16;
  }
  else
  {
    id v18 = [v28[0] icon];
    id v19 = v26;
    id v26 = v18;
  }
  id v20 = [v27 imageView];
  [v20 setImage:v26];

  id v21 = [v27 textLabel];
  id v22 = [v30 title];
  [v21 setText:v22];

  id v23 = +[UIColor secondarySystemBackgroundColor];
  [v27 setBackgroundColor:v23];

  id v24 = v27;
  objc_storeStrong(&v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(v28, 0);
  objc_storeStrong(&v29, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(location, 0);
  return v24;
}

double sub_1000DF4E8()
{
  return 35.0;
}

double sub_1000DF524()
{
  return 1.0;
}

void sub_1000E0B7C(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] delegate];
  char v2 = objc_opt_respondsToSelector();

  if (v2)
  {
    id v3 = [location[0] delegate];
    [v3 presentWiFiPaneForFlowItem:location[0]];
  }
  objc_storeStrong(location, 0);
}

uint64_t sub_1000E0C20(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] networkProvider];
  char v2 = [v1 currentNetworkSupportsRestore] ^ 1;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_1000E0C90(id *a1)
{
  id v3[2] = a1;
  v3[1] = a1;
  v3[0] = [a1[4] productVersion];
  id location = +[SASSystemInformation productVersion];
  if (v3[0]) {
    BOOL v4 = +[SASSystemInformation compareProductVersion:v3[0] toProductVersion:location] == (id)1;
  }
  else {
    BOOL v4 = 0;
  }
  objc_storeStrong(&location, 0);
  objc_storeStrong(v3, 0);
  return v4;
}

void sub_1000E18A0(NSObject *a1, char a2, id obj)
{
  id v21 = a1;
  char v20 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        BOOL v4 = (NSString *)location;
      }
      else if (location)
      {
        id v16 = [location domain];
        char v15 = 1;
        BOOL v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v16, [location code]);
        id v14 = v4;
        char v13 = 1;
      }
      else
      {
        BOOL v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Primary account removal failed: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  id v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1000E1B18;
  id v10 = &unk_1002B1130;
  os_log_type_t v11 = a1[4].isa;
  char v12 = v20 & 1;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000E1B18(uint64_t a1)
{
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"com.apple.buddy.migrateFromiOSChoice.spinner", a1, a1];
  id v2 = [*(id *)(a1 + 32) view];
  id v3 = [v2 window];
  [v3 setUserInteractionEnabled:1];

  if (*(unsigned char *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) proximitySetupController];
    [v4 setIntentToMigrate:1];

    id v5 = [*(id *)(a1 + 32) delegate];
    id v6 = [v5 popToBuddyControllerWithClass:objc_opt_class() animated:1];
  }
}

void sub_1000E3208(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v13 = 0;
  objc_storeStrong(&v13, a3);
  id v12 = 0;
  objc_storeStrong(&v12, a4);
  id v11 = 0;
  objc_storeStrong(&v11, a5);
  [*(id *)(a1 + 32) setProfileInstallationRequestCompleteHandler:v11 a1];
  [*(id *)(a1 + 32) setProfileIdentifier:v13];
  [*(id *)(a1 + 32) setBaseViewController:0];
  [*(id *)(a1 + 32) setNavController:0];
  [*(id *)(a1 + 32) setSignInTask:0];
  id v9 = +[MCProfileConnection sharedConnection];
  [v9 updateCloudConfigurationWithRMAccountIdentifier:v12];

  id v10 = +[BuddyCloudConfigManager sharedManager];
  [v10 cloudConfigMayHaveChanged];

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E3370(NSObject *a1, char a2, char a3, id obj)
{
  id v16 = a1;
  char v15 = a2;
  char v14 = a3;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v11, "Enrollment flow failed with error: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa _cacheAuthenticationResults:0];
    if (a1[5].isa) {
      (*((void (**)(void))a1[5].isa + 2))();
    }
    int v10 = 1;
  }
  else
  {
    os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = v9;
      os_log_type_t v6 = v8;
      sub_10004B24C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Enrollment flow succeed!", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
    int v10 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_1000E37B4(NSObject *a1, uint64_t a2, id obj, void *a4, void *a5)
{
  os_log_type_t v17 = a1;
  uint64_t v16 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v14 = 0;
  objc_storeStrong(&v14, a4);
  id v13 = 0;
  objc_storeStrong(&v13, a5);
  oslog[1] = a1;
  if (v13)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v11 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v8 = oslog[0];
      os_log_type_t v9 = v11;
      sub_10004B24C(v10);
      _os_log_error_impl((void *)&_mh_execute_header, v8, v9, "Failed to discover enrollment channel", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (v16 == 1)
  {
    [(objc_class *)a1[4].isa setMdmEnrollmentChannel:2];
  }
  else if (v16 == 3)
  {
    [(objc_class *)a1[4].isa setMdmEnrollmentChannel:1];
  }
  else
  {
    [(objc_class *)a1[4].isa setMdmEnrollmentChannel:0];
  }
  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000E3F70(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v16 = 0;
  objc_storeStrong(&v16, a3);
  oslog[1] = a1;
  if ([location[0] length] && !v16)
  {
    os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = v11;
      os_log_type_t v8 = v10;
      sub_10004B24C(v9);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Current bearer token is still valid!", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
    (*((void (**)(void))a1[4].isa + 2))();
    int v12 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v14 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id v5 = oslog[0];
      os_log_type_t v6 = v14;
      sub_10004B24C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v5, v6, "Failed to communicate with the MDM server with existing bearer token", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
    int v12 = 1;
  }
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E4420(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  oslog[1] = (os_log_t)a1;
  if (v14)
  {
    os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)v16, (uint64_t)v14);
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Silent auth failed! We have to do UI Auth. Error: %{public}@", v16, 0xCu);
    }
    objc_storeStrong((id *)&v9, 0);
    [*(id *)(a1 + 32) _requestInteractiveMAIDAuthenticationWithManagedAppleID:*(void *)(a1 + 40) personaID:*(void *)(a1 + 48) ephemeral:*(unsigned char *)(a1 + 64) & 1 completionHandler:*(void *)(a1 + 56)];
    int v10 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v5 = oslog[0];
      os_log_type_t v6 = v12;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Silent auth succeed! No need to do UI auth", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = [location[0] mutableCopy];
    (*(void (**)(uint64_t, id, void, id))(v7 + 16))(v7, v8, 0, v14);

    int v10 = 1;
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E4780(id *a1)
{
  v14[2] = a1;
  v14[1] = a1;
  id v2 = [a1[4] navController];
  id v3 = [a1[4] passcodeCacheManager];
  v14[0] = +[BuddyAppleIDSignInController federatedAuthSignInControllerInNavigationController:v2 mode:8 passcodeCacheManager:v3];

  if ([a1[5] length])
  {
    [v14[0] setUsername:a1[5]];
    [v14[0] setIsUsernameEditable:0];
  }
  objc_initWeak(&location, v14[0]);
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000E4974;
  os_log_t v9 = &unk_1002B2BD8;
  id v10 = a1[4];
  objc_copyWeak(&v12, &location);
  id v11 = a1[6];
  [v14[0] setHandler:&v5];
  id v4 = [a1[4] navController];
  [v4 pushViewController:v14[0] animated:1];

  objc_storeStrong(&v11, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&location);
  objc_storeStrong(v14, 0);
}

void sub_1000E4940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 64));
  _Unwind_Resume(a1);
}

void sub_1000E4974(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v42 = 0;
  objc_storeStrong(&v42, a3);
  oslog[1] = a1;
  id v5 = [BuddyAppleIDSignInTask alloc];
  id v6 = [(objc_class *)a1[4].isa featureFlags];
  id v7 = +[BuddyAccountTools sharedBuddyAccountTools];
  id v8 = [(BuddyAppleIDSignInTask *)v5 initWithFeatureFlags:v6 accountTools:v7];
  [(objc_class *)a1[4].isa setSignInTask:v8];

  LOBYTE(v8) = +[DMCFeatureOverrides allowAnyMAIDToSignIn] ^ 1;
  id v9 = [(objc_class *)a1[4].isa signInTask];
  [v9 setRequireAppleMAID:v8 & 1];

  id v10 = [(objc_class *)a1[4].isa navController];
  id v11 = [(objc_class *)a1[4].isa signInTask];
  [v11 setNavigationController:v10];

  id v12 = [(objc_class *)a1[4].isa featureFlags];
  LOBYTE(v11) = [v12 isUseCDPContextSecretInsteadOfSBDSecretEnabled];

  if (v11)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [(objc_class *)a1[4].isa passcodeCacheManager];
      id v14 = [(objc_class *)a1[4].isa signInTask];
      sub_1000E4F20((uint64_t)buf, (uint64_t)"-[BuddyEnrollmentCoordinator _requestInteractiveMAIDAuthenticationWithManagedAppleID:personaID:ephemeral:completionHandler:]_block_invoke_2", (uint64_t)v13, (uint64_t)v14);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v40, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v15 = [(objc_class *)a1[4].isa passcodeCacheManager];
    id v16 = [(objc_class *)a1[4].isa signInTask];
    [v16 setCacheManager:v15];
  }
  os_log_type_t v17 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v35 = -1073741824;
  int v36 = 0;
  id v37 = sub_1000E4F48;
  char v38 = &unk_1002B0CA8;
  objc_copyWeak(&v39, (id *)&a1[6].isa);
  dispatch_async((dispatch_queue_t)v17, &block);

  os_log_t v33 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = v33;
    os_log_type_t v19 = v32;
    sub_10004B24C(v31);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Beginning authentication...", v31, 2u);
  }
  objc_storeStrong((id *)&v33, 0);
  id v20 = [(objc_class *)a1[4].isa signInTask];
  id v21 = location[0];
  id v22 = v42;
  id v23 = _NSConcreteStackBlock;
  int v24 = -1073741824;
  int v25 = 0;
  id v26 = sub_1000E4F94;
  id v27 = &unk_1002B2BB0;
  objc_copyWeak(&v30, (id *)&a1[6].isa);
  int v28 = a1[4].isa;
  id v29 = a1[5].isa;
  [v20 authenticateWithUsername:v21 password:v22 completion:&v23];

  objc_storeStrong((id *)&v29, 0);
  objc_storeStrong((id *)&v28, 0);
  objc_destroyWeak(&v30);
  objc_destroyWeak(&v39);
  objc_storeStrong(&v42, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E4EEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  _Unwind_Resume(v21);
}

double sub_1000E4F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 136315650;
  *(_DWORD *)a1 = 136315650;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a4;
  return result;
}

void sub_1000E4F48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setEnabled:0 a1, a1];
}

void sub_1000E4F94(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v27 = 0;
  objc_storeStrong(&v27, a3);
  v26[1] = (id)a1;
  id v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v22 = -1073741824;
  int v23 = 0;
  int v24 = sub_1000E535C;
  int v25 = &unk_1002B0CA8;
  objc_copyWeak(v26, (id *)(a1 + 48));
  dispatch_async((dispatch_queue_t)v5, &block);

  if (v27)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v17 = 0;
      char v15 = 0;
      if (_BYIsInternalInstall())
      {
        id v6 = (NSString *)v27;
      }
      else if (v27)
      {
        id v18 = [v27 domain];
        char v17 = 1;
        id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v18, [v27 code]);
        id v16 = v6;
        char v15 = 1;
      }
      else
      {
        id v6 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v19, "Authentication failed: %{public}@", buf, 0xCu);
      if (v15) {

      }
      if (v17) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    int v14 = 1;
  }
  else
  {
    [*(id *)(a1 + 32) _cacheAuthenticationResults:location[0]];
    os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = v13;
      os_log_type_t v8 = v12;
      sub_10004B24C(v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Authentication succeeded!", v11, 2u);
    }
    objc_storeStrong((id *)&v13, 0);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = [location[0] mutableCopy];
    (*(void (**)(uint64_t, id, void, id))(v9 + 16))(v9, v10, 0, v27);

    int v14 = 0;
  }
  objc_destroyWeak(v26);
  if (!v14) {
    int v14 = 0;
  }
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E535C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setEnabled:1 a1, a1];
}

void sub_1000E554C(uint64_t a1)
{
  v45[2] = (id)a1;
  v45[1] = (id)a1;
  v45[0] = [[BuddyAppleIDSpinnerPage alloc] initWithAccountMode:1];
  id v2 = [*(id *)(a1 + 32) navController];
  [v2 pushViewController:v45[0] animated:1];

  id location = (id)_BYLoggingFacility();
  os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = location;
    os_log_type_t v4 = v43;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  id v5 = +[MDMCloudConfiguration sharedConfiguration];
  id v6 = [v5 details];
  id v41 = [v6 objectForKeyedSubscript:kCCRemoteManagementAccountIdentifierKey];

  v46[0] = ACAccountTypeIdentifierAppleAccount;
  v46[1] = ACAccountTypeIdentifieriTunesStore;
  id v7 = +[NSArray arrayWithObjects:v46 count:2];
  id v40 = [(NSArray *)v7 mutableCopy];

  if ([v41 length])
  {
    id v39 = [*(id *)(a1 + 40) objectForKeyedSubscript:AKAuthenticationAlternateDSIDKey];
    id v8 = +[ACAccountStore defaultStore];
    id v9 = [v8 dmc_iCloudAccountForRemoteManagingAccountWithAltDSID:v39];

    if (v9)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = oslog;
        os_log_type_t v11 = v37;
        sub_10004B24C(v36);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "We have signed in AppleAccount already!", v36, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      [v40 removeObject:ACAccountTypeIdentifierAppleAccount];
    }
    id v12 = +[ACAccountStore defaultStore];
    id v13 = [v12 dmc_iTunesAccountForRemoteManagingAccountWithAltDSID:v39];

    if (v13)
    {
      os_log_t v35 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = v35;
        os_log_type_t v15 = v34;
        sub_10004B24C(v33);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "We have signed in iTunesStore already!", v33, 2u);
      }
      objc_storeStrong((id *)&v35, 0);
      [v40 removeObject:ACAccountTypeIdentifieriTunesStore];
    }
    objc_storeStrong(&v39, 0);
  }
  id v26 = _NSConcreteStackBlock;
  int v27 = -1073741824;
  int v28 = 0;
  id v29 = sub_1000E5AC0;
  id v30 = &unk_1002B0C80;
  id v31 = *(id *)(a1 + 56);
  id v32 = objc_retainBlock(&v26);
  if ([v40 count])
  {
    id v18 = objc_opt_new();
    id v19 = v40;
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    id v22 = [*(id *)(a1 + 32) navController];
    [v18 signInAccountsWithTypes:v19 authenticationResult:v20 personaID:v21 canMakeAccountActive:1 baseViewController:v22 completionHandler:v32];
  }
  else
  {
    os_log_t v25 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = v25;
      os_log_type_t v17 = v24;
      sub_10004B24C(v23);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No need to sign-in any accounts!", v23, 2u);
    }
    objc_storeStrong((id *)&v25, 0);
    (*((void (**)(id, uint64_t, void))v32 + 2))(v32, 1, 0);
  }
  objc_storeStrong(&v32, 0);
  objc_storeStrong(&v31, 0);
  objc_storeStrong(&v40, 0);
  objc_storeStrong(&v41, 0);
  objc_storeStrong(v45, 0);
}

void sub_1000E5AC0(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000E5BE4;
  id v9 = &unk_1002B14A8;
  char v12 = v15 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_1000E5BE4(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 48))
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = v8;
      os_log_type_t v4 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sign-in succeeded!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v12 = [*(id *)(a1 + 32) domain];
        char v11 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [*(id *)(a1 + 32) code]);
        id v10 = v2;
        char v9 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000E5F1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) navController:a1, a1];
  id v3 = [*(id *)(a1 + 32) baseViewController];
  id v4 = [v2 popToViewController:v3 animated:1];
}

void sub_1000E6F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
}

id sub_1000E6F48(id *a1, void *a2, id obj)
{
  id location[2] = a1;
  location[1] = a2;
  location[0] = 0;
  objc_storeStrong(location, obj);
  v10[1] = a1;
  v10[0] = objc_loadWeakRetained(a1 + 4);
  if ([v10[0] isShowingVisualPairing])
  {
    id v4 = [location[0] heightAnchor];
    id v5 = [location[0] widthAnchor];
    id v6 = [v4 constraintEqualToAnchor:v5];
    [v10[0] setHeightConstraint:v6];
  }
  else
  {
    id v7 = [v10[0] heightConstraint];
    [v7 setActive:0];

    [v10[0] setHeightConstraint:0];
  }
  id v8 = [v10[0] heightConstraint];
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);

  return v8;
}

id sub_1000E7450(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) visualPairingViewController:a1, a1];
  [v2 stop];

  id v3 = [*(id *)(a1 + 32) visualPairingViewController];
  id v4 = [v3 view];
  [v4 removeFromSuperview];

  id result = [*(id *)(a1 + 32) setVisualPairingViewController:0];
  if (*(void *)(a1 + 40)) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  return result;
}

void sub_1000E99B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,_Unwind_Exception *exception_object)
{
  objc_destroyWeak((id *)(v33 - 176));
  _Unwind_Resume(a1);
}

void sub_1000E9A20(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _animationTickForPresentationValue:0];
  objc_storeStrong(location, 0);
}

void sub_1000E9A68(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  [location[0] _animationTickForPresentationValue:1];
  objc_storeStrong(location, 0);
}

double sub_1000EA45C()
{
  return 0.0;
}

id sub_1000EA490(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateForLocation:0 interactive:*(double *)(a1 + 40) *(double *)(a1 + 48) a1 a1];
}

void sub_1000EA4CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = [*(id *)(a1 + 32) gestureRecognizer];
    [v2 setEnabled:0];

    id v3 = [*(id *)(a1 + 32) backgroundViewControllerPresented];
    if (v3)
    {
      id v4 = (void (**)(void))[*(id *)(a1 + 32) backgroundViewControllerPresented];
      v4[2](v4);
    }
  }
}

void sub_1000EB0F0(uint64_t a1)
{
  id v2 = +[UIColor systemGrayColor];
  id v3 = [(UIColor *)v2 CGColor];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 32) layer];
  [v4 setBorderColor:v3];
}

void sub_1000EBE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EBE3C(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _choiceConfirmed:1];

  objc_storeStrong(location, 0);
}

void sub_1000EC018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EC038(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _choiceConfirmed:0];

  objc_storeStrong(location, 0);
}

void sub_1000ECB14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _tappedChoice:*(void *)(a1 + 32) a1 a1];
}

id *sub_1000ECC58(id *result, char a2)
{
  if (a2) {
    return (id *)[result[4] didSelectChoice:result[5]];
  }
  return result;
}

NSString *__cdecl sub_1000ED680(id a1, NSString *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (location[0]) {
    id v5 = (__CFString *)location[0];
  }
  else {
    id v5 = &stru_1002B4E18;
  }
  objc_storeStrong(location, 0);
  id v2 = v5;

  return (NSString *)v2;
}

void sub_1000EE11C(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_100321C58;
  qword_100321C58 = v1;
}

void sub_1000EE340(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = [a1[4] URLConfiguration];
  if (a1[5])
  {
    id v2 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v4 = -1073741824;
    int v5 = 0;
    id v6 = sub_1000EE460;
    id v7 = &unk_1002B1780;
    id v9 = a1[5];
    id v8 = location[0];
    dispatch_async((dispatch_queue_t)v2, &block);

    objc_storeStrong(&v8, 0);
    objc_storeStrong(&v9, 0);
  }
  objc_storeStrong(location, 0);
}

uint64_t sub_1000EE460(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000EE5D4(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1000EE618(uint64_t a1)
{
}

void sub_1000EE624(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (*((void *)a1[4].isa + 1))
  {
    objc_storeStrong((id *)(*((void *)a1[5].isa + 1) + 40), *((id *)a1[4].isa + 1));
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v2 = oslog[0];
      os_log_type_t v3 = v19;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "ConfigurationManager downloading Apple ID URL Configuration...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v4 = +[AASetupAssistantService urlConfiguration];
    uint64_t v5 = *((void *)a1[5].isa + 1);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v7 = *(void *)(*((void *)a1[5].isa + 1) + 40);
    char v16 = 0;
    BOOL v8 = 0;
    if (v7)
    {
      id v17 = [*(id *)(*((void *)a1[5].isa + 1) + 40) xmlUI];
      char v16 = 1;
      BOOL v8 = [v17 length] != 0;
    }
    if (v16) {

    }
    if (v8)
    {
      objc_storeStrong((id *)a1[4].isa + 1, *(id *)(*((void *)a1[5].isa + 1) + 40));
      *((unsigned char *)a1[4].isa + 24) = [*(id *)(*((void *)a1[5].isa + 1) + 40) setupAssistantServerEnabled] & 1;
      os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_10005A060(v21, *((unsigned char *)a1[4].isa + 24) & 1);
        _os_log_impl((void *)&_mh_execute_header, v15, v14, "ConfigurationManager downloaded AppleID configuration. Service Enabled = %d", v21, 8u);
      }
      objc_storeStrong((id *)&v15, 0);
    }
    else
    {
      os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = v13;
        os_log_type_t v10 = v12;
        sub_10004B24C(v11);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "ConfigurationManager downloaded AppleID configuration. Empty XMLUI, assuming error.", (uint8_t *)v11, 2u);
      }
      objc_storeStrong((id *)&v13, 0);
      *((unsigned char *)a1[4].isa + 24) = 1;
      objc_storeStrong((id *)a1[4].isa + 1, 0);
      +[AASetupAssistantService resetURLConfiguration];
    }
  }
}

id sub_1000EEF9C()
{
  uint64_t v9 = 0;
  os_log_type_t v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C68;
  uint64_t v13 = qword_100321C68;
  if (!qword_100321C68)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_1000F2EE4;
    id v6 = &unk_1002B1248;
    uint64_t v7 = &v9;
    sub_1000F2EE4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000EF4B4(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v5 = 0;
  objc_storeStrong(&v5, a3);
  [a1[4] _handleScanResults:location[0] error:v5];
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

void sub_1000EF52C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v5 = 0;
  objc_storeStrong(&v5, a3);
  [a1[4] _handleScanResults:location[0] error:v5 a1];
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

void sub_1000EF900(id *a1, char a2, id obj)
{
  id v42 = a1;
  char v41 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v39[1] = a1;
  if (location)
  {
    v39[0] = (id)_BYLoggingFacility();
    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v39[0], OS_LOG_TYPE_ERROR))
    {
      char v36 = 0;
      char v34 = 0;
      if (_BYIsInternalInstall())
      {
        int v4 = (NSString *)location;
      }
      else if (location)
      {
        id v37 = [location domain];
        char v36 = 1;
        int v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v37, [location code]);
        id v35 = v4;
        char v34 = 1;
      }
      else
      {
        int v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v39[0], v38, "Failed to determine if an existing download is in progress: %{public}@", buf, 0xCu);
      if (v34) {

      }
      if (v36) {
    }
      }
    objc_storeStrong(v39, 0);
  }
  if (v41)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = oslog;
      os_log_type_t v6 = v32;
      sub_10004B24C(v31);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Not starting a new download; a download is already in progress",
        v31,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    int v30 = 1;
  }
  else
  {
    char v29 = 0;
    id v7 = [a1[4] updateManager];
    id v8 = [v7 download];
    id v9 = [v8 progress];
    char v27 = 0;
    char v25 = 0;
    char v23 = 0;
    char v21 = 0;
    unsigned __int8 v10 = 0;
    if ([v9 isDone])
    {
      id v28 = [a1[4] updateManager];
      char v27 = 1;
      id v26 = [v28 download];
      char v25 = 1;
      id v24 = [v26 progress];
      char v23 = 1;
      id v22 = [v24 phase];
      char v21 = 1;
      unsigned __int8 v10 = [v22 isEqualToString:kSUDownloadPhasePreparingForInstallation];
    }
    if (v21) {

    }
    if (v23) {
    if (v25)
    }

    if (v27) {
    char v29 = v10 & 1;
    }
    if (v10)
    {
      os_log_t v20 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = v20;
        os_log_type_t v12 = v19;
        sub_10004B24C(v18);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Update already downloaded; starting install...", v18, 2u);
      }
      objc_storeStrong((id *)&v20, 0);
      [a1[4] startInstall];
    }
    else
    {
      os_log_t v17 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v17;
        os_log_type_t v14 = v16;
        sub_10004B24C(v15);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting download of update...", v15, 2u);
      }
      objc_storeStrong((id *)&v17, 0);
      [a1[4] startDownload];
    }
    int v30 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_1000EFF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1000EFF5C(void *a1, void *a2, unsigned char *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = a3;
  id v5 = [location[0] domain:a1];
  BOOL v6 = 0;
  if ([v5 isEqualToString:@"com.apple.MobileAssetError.Download"]) {
    BOOL v6 = [location[0] code] == (id)18;
  }

  if (v6)
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    unsigned char *v7 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000F05B0(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa resetProgress];
  id v3 = [(objc_class *)a1[4].isa updateManager];
  unsigned __int8 v4 = [v3 readyToResume];

  if (v4)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v5 = oslog[0];
      os_log_type_t v6 = v26;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Attempting to resume download...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v7 = [(objc_class *)a1[4].isa updateManager];
    [v7 resumeDownload];
  }
  else
  {
    id v8 = [(objc_class *)a1[4].isa updateManager];
    unsigned __int8 v9 = [v8 readyToDownloadPreferredUpdate];

    if (v9)
    {
      os_log_t v24 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v10 = v24;
        os_log_type_t v11 = v23;
        sub_10004B24C(v22);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempting to start download...", v22, 2u);
      }
      objc_storeStrong((id *)&v24, 0);
      [(objc_class *)a1[4].isa startDownload];
    }
    else
    {
      os_log_t v21 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v12 = v21;
        os_log_type_t v13 = v20;
        sub_10004B24C(v19);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Update is not ready to resume or download", (uint8_t *)v19, 2u);
      }
      objc_storeStrong((id *)&v21, 0);
      id v14 = [(objc_class *)a1[4].isa navigationController];
      Class v15 = (Class)[v14 topViewController];
      Class isa = a1[4].isa;

      if (v15 == isa)
      {
        id v17 = [(objc_class *)a1[4].isa navigationController];
        id v18 = [v17 popViewControllerAnimated:1];
      }
    }
  }
  objc_storeStrong(location, 0);
}

void sub_1000F0858(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] navigationController];
  id v4 = [v3 popViewControllerAnimated:1];

  objc_storeStrong(location, 0);
}

void sub_1000F0CE8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] delegate];
  id v4 = [v3 popToBuddyControllerWithClass:[BuddyCloudConfigController disclosureViewControllerClass] animated:1];

  objc_storeStrong(location, 0);
}

void sub_1000F0F30(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  [*(id *)(a1 + 32) handleDownload:v5 & 1 error:location a1];
  objc_storeStrong(&location, 0);
}

void sub_1000F0F94(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  [*(id *)(a1 + 32) handleDownload:v5 & 1 error:location a1];
  objc_storeStrong(&location, 0);
}

id sub_1000F169C(uint64_t a1)
{
  return [*(id *)(a1 + 32) showAlertForError:*(void *)(a1 + 40) a1, a1];
}

id sub_1000F16D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) showAlertForError:*(void *)(a1 + 40) a1 a1];
}

void sub_1000F1704(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) navigationController:a1, a1];
  id v3 = [v2 topViewController];
  id v4 = *(id *)(a1 + 32);

  if (v3 == v4)
  {
    id v5 = [*(id *)(a1 + 32) navigationController];
    id v6 = [v5 popViewControllerAnimated:1];
  }
}

void sub_1000F188C(NSObject *a1, char a2, id obj)
{
  os_log_t v21 = a1;
  char v20 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (v20)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v17;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Started install...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v22, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v15, v14, "Failed to start install: %@", v22, 0xCu);
    }
    objc_storeStrong((id *)&v15, 0);
    id v6 = &_dispatch_main_q;
    id v7 = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    unsigned __int8 v10 = sub_1000F1ABC;
    os_log_type_t v11 = &unk_1002B12F0;
    os_log_type_t v12 = a1[4].isa;
    id v13 = location;
    dispatch_async((dispatch_queue_t)v6, &v7);

    objc_storeStrong(&v13, 0);
    objc_storeStrong((id *)&v12, 0);
  }
  objc_storeStrong(&location, 0);
}

id sub_1000F1ABC(uint64_t a1)
{
  return [*(id *)(a1 + 32) showAlertForError:*(void *)(a1 + 40) a1, a1];
}

void sub_1000F1CDC(uint64_t a1)
{
  char v9 = 1;
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 3)
  {
    id v3 = [*(id *)(a1 + 32) navigationController];
    id v4 = [v3 topViewController];
    id v5 = *(id *)(a1 + 32);

    if (v4 == v5)
    {
      id v6 = [*(id *)(a1 + 32) navigationController];
      id v7 = [v6 popViewControllerAnimated:1];
    }
  }
  else if (v2 == 14)
  {
    char v9 = 0;
  }
  id v8 = [*(id *)(a1 + 32) navigationItem];
  [v8 setHidesBackButton:v9 & 1];
}

void sub_1000F1F68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) headerView:a1, a1];
  id v3 = +[NSBundle bundleForClass:objc_opt_class()];
  id v4 = [(NSBundle *)v3 localizedStringForKey:@"MANDATORY_UPDATE_PROGRESS_TITLE_DOWNLOADING" value:&stru_1002B4E18 table:@"MandatorySoftwareUpdate"];
  [v2 setTitle:v4];

  id v5 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) progress];
  [v6 normalizedPercentComplete];
  [v5 setProgress:v7];

  id v8 = *(void **)(a1 + 32);
  id v9 = [v8 updateManager];
  id v10 = [v9 progressString];
  [v8 setProgressText:v10];
}

id sub_1000F2344(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Download of software update failed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return [*(id *)(a1 + 40) showAlertForError:*(void *)(a1 + 32)];
}

void sub_1000F2530(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) headerView:a1:a1];
  id v3 = +[NSBundle bundleForClass:objc_opt_class()];
  id v4 = [(NSBundle *)v3 localizedStringForKey:@"MANDATORY_UPDATE_PROGRESS_TITLE_INSTALLING" value:&stru_1002B4E18 table:@"MandatorySoftwareUpdate"];
  [v2 setTitle:v4];

  [*(id *)(a1 + 32) setProgress:1.0];
  id v5 = *(void **)(a1 + 32);
  id v6 = [v5 updateManager];
  id v7 = [v6 progressString];
  [v5 setProgressText:v7];
}

id sub_1000F2784(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Install of software update failed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return [*(id *)(a1 + 40) showAlertForError:*(void *)(a1 + 32)];
}

void sub_1000F2A7C(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "failedToFindMDMRequiredUpdate", a1, a1))
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = [v2 updateOptions];
    [v2 showAlertForMDMMissingUpdate:v3];
  }
  else
  {
    id v3 = [*(id *)(a1 + 32) navigationController];
    id v4 = [v3 popViewControllerAnimated:1];
  }
}

void sub_1000F2EE4(NSAssertionHandler *a1)
{
  sub_1000F3028();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSUISoftwareUpdateManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getSUSUISoftwareUpdateManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMandatoryUpdateProgressController.m", 28, @"Unable to find class %s", "SUSUISoftwareUpdateManager" file lineNumber description];

    __break(1u);
  }
  qword_100321C68 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000F3028()
{
  if (!sub_1000F3158())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *SoftwareUpdateSettingsUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMandatoryUpdateProgressController.m", 27, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000F3158()
{
  if (!qword_100321C70) {
    sub_1000F3210();
  }
  return qword_100321C70;
}

uint64_t sub_1000F3210()
{
  uint64_t result = _sl_dlopen();
  qword_100321C70 = result;
  return result;
}

double sub_1000F377C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = 138413058;
  *(_DWORD *)a1 = 138413058;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2112;
  *(void *)(a1 + 34) = a5;
  return result;
}

SetupController *sub_1000F37AC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  uint64_t v1 = objc_alloc_init(SetupController);

  return v1;
}

void sub_1000F4324(id a1, LSBundleProxy *a2, BOOL *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1000F4374(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = (void (**)(void))[a1[4] showModalWiFiSettingsBlock];
  v3[2](v3);

  objc_storeStrong(location, 0);
}

void sub_1000F43E8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  *((unsigned char *)a1[4] + 10) = 1;
  [a1[4] _skipPressed:0];
  objc_storeStrong(location, 0);
}

id sub_1000F510C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] traitCollection];
  id v4 = [v3 userInterfaceStyle];

  if (v4 == (id)2) {
    id v8 = [location[0] stringByAppendingString:@"_Dark"];
  }
  else {
    id v8 = location[0];
  }
  objc_storeStrong(location, 0);
  id v5 = v8;

  return v5;
}

void sub_1000F56E8(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Tapped Skip Apple ID", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _reallySkip];
  *((unsigned char *)a1[4].isa + 10) = 0;
  objc_storeStrong(location, 0);
}

void sub_1000F57C4(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Tapped Don't Skip Apple ID", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  if (*((unsigned char *)a1[4].isa + 10))
  {
    id v5 = (void (**)(void))[(objc_class *)a1[4].isa showModalWiFiSettingsBlock];
    v5[2](v5);
  }
  *((unsigned char *)a1[4].isa + 10) = 0;
  objc_storeStrong(location, 0);
}

void sub_1000F5CFC(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [*(id *)(a1 + 32) setUrlConfiguration:location[0]];
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

id sub_1000F7DAC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C78;
  uint64_t v13 = qword_100321C78;
  if (!qword_100321C78)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1000F8478;
    os_log_type_t v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1000F8478(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1000F8478(NSAssertionHandler *a1)
{
  sub_1000F85BC();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("DMCEnrollmentFlowManagedConfigurationHelper");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getDMCEnrollmentFlowManagedConfigurationHelperClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyEnrollmentFlowMCBridge.m", 22, @"Unable to find class %s", "DMCEnrollmentFlowManagedConfigurationHelper" file lineNumber description];

    __break(1u);
  }
  qword_100321C78 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1000F85BC()
{
  if (!sub_1000F86EC())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *DMCEnrollmentProviderLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyEnrollmentFlowMCBridge.m", 21, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1000F86EC()
{
  if (!qword_100321C80) {
    sub_1000F87A4();
  }
  return qword_100321C80;
}

uint64_t sub_1000F87A4()
{
  uint64_t result = _sl_dlopen();
  qword_100321C80 = result;
  return result;
}

void sub_1000F8F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F8F90(id *a1, double a2)
{
  char v25 = a1;
  double v24 = a2;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  memset(__b, 0, sizeof(__b));
  [location[0] _contentDisplayModel];
  __b[0] = v2;
  __b[1] = v3;
  id v4 = [location[0] timeLabelCenterYConstraints];
  os_log_type_t v14 = _NSConcreteStackBlock;
  int v15 = -1073741824;
  int v16 = 0;
  os_log_type_t v17 = sub_1000F9110;
  id v18 = &unk_1002B2E58;
  double v19 = v24;
  uint64_t v20 = __b[0];
  uint64_t v21 = __b[1];
  [v4 enumerateObjectsUsingBlock:&v14];

  id v5 = [location[0] timeLabelWidthConstraints];
  os_log_type_t v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  uint64_t v9 = sub_1000F9188;
  id v10 = &unk_1002B2E58;
  double v11 = v24;
  uint64_t v12 = __b[0];
  uint64_t v13 = __b[1];
  [v5 enumerateObjectsUsingBlock:&v6];

  objc_storeStrong(location, 0);
}

void sub_1000F9110(double *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [location[0] setConstant:-(a1[4] * a1[5])];
  objc_storeStrong(location, 0);
}

void sub_1000F9188(double *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [location[0] setConstant:a1[4] * a1[6]];
  objc_storeStrong(location, 0);
}

void sub_1000FAAD8(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v34 = 0;
  objc_storeStrong(&v34, a3);
  v33[1] = a1;
  if (v34)
  {
    v33[0] = (id)_BYLoggingFacility();
    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v33[0], OS_LOG_TYPE_ERROR))
    {
      char v30 = 0;
      char v28 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v34;
      }
      else if (v34)
      {
        id v31 = [v34 domain];
        char v30 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v31, [v34 code]);
        id v29 = v5;
        char v28 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33[0], v32, "Credential recovery failed: %{public}@", buf, 0xCu);
      if (v28) {

      }
      if (v30) {
    }
      }
    objc_storeStrong(v33, 0);
    os_log_type_t v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v22 = -1073741824;
    int v23 = 0;
    double v24 = sub_1000FAEB8;
    char v25 = &unk_1002B12F0;
    id v26 = a1[4];
    id v27 = v34;
    dispatch_async((dispatch_queue_t)v6, &block);

    int v20 = 1;
    objc_storeStrong(&v27, 0);
    objc_storeStrong(&v26, 0);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = oslog;
      os_log_type_t v8 = v18;
      sub_10004B24C(v17);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Credential recovery succeeded!", v17, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    uint64_t v9 = &_dispatch_main_q;
    id v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    uint64_t v13 = sub_1000FAEEC;
    os_log_type_t v14 = &unk_1002B12F0;
    id v15 = a1[4];
    id v16 = location[0];
    dispatch_async((dispatch_queue_t)v9, &v10);

    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    int v20 = 0;
  }
  objc_storeStrong(&v34, 0);
  objc_storeStrong(location, 0);
}

id sub_1000FAEB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _signInFailedWithError:*(void *)(a1 + 40) a1, a1];
}

void sub_1000FAEEC(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 appleIDController:*(void *)(a1 + 32) didAuthenticateForCredentialRecovery:*(void *)(a1 + 40)];
  }
  else
  {
    location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
    id v5 = [*(id *)(a1 + 32) navigationController];
    [v5 pushViewController:location[0] animated:1];

    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v6 = oslog;
      os_log_type_t v7 = v17;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Beginning sign-in...", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v8 = [*(id *)(a1 + 32) signInTask];
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    uint64_t v13 = sub_1000FB104;
    os_log_type_t v14 = &unk_1002B15C8;
    id v15 = *(id *)(a1 + 32);
    [v8 signInToAllServicesWithAuthenticationResults:v9 completion:&v10];

    objc_storeStrong(&v15, 0);
    objc_storeStrong(location, 0);
  }
}

void sub_1000FB104(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  id v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_1000FB228;
  uint64_t v9 = &unk_1002B15A0;
  char v12 = v15 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000FB228(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 48))
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = v10;
      os_log_type_t v7 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sign-in succeeded!", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    [*(id *)(a1 + 40) _signInSucceeded];
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v14 = [*(id *)(a1 + 32) domain];
        char v13 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [*(id *)(a1 + 32) code]);
        id v12 = v2;
        char v11 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    id v3 = [*(id *)(a1 + 40) navigationController];
    id v4 = [*(id *)(a1 + 40) authAttemptLandingViewController];
    id v5 = [v3 popToViewController:v4 animated:1];
  }
}

void sub_1000FB868(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v34 = 0;
  objc_storeStrong(&v34, a3);
  v33[1] = a1;
  if (v34)
  {
    v33[0] = (id)_BYLoggingFacility();
    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v33[0], OS_LOG_TYPE_ERROR))
    {
      char v30 = 0;
      char v28 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v34;
      }
      else if (v34)
      {
        id v31 = [v34 domain];
        char v30 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v31, [v34 code]);
        id v29 = v5;
        char v28 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33[0], v32, "Account creation failed: %{public}@", buf, 0xCu);
      if (v28) {

      }
      if (v30) {
    }
      }
    objc_storeStrong(v33, 0);
    int v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v22 = -1073741824;
    int v23 = 0;
    double v24 = sub_1000FBC48;
    char v25 = &unk_1002B12F0;
    id v26 = a1[4];
    id v27 = v34;
    dispatch_async((dispatch_queue_t)v6, &block);

    int v20 = 1;
    objc_storeStrong(&v27, 0);
    objc_storeStrong(&v26, 0);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v7 = oslog;
      os_log_type_t v8 = v18;
      sub_10004B24C(v17);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Account creation succeeded!", v17, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    os_log_type_t v9 = &_dispatch_main_q;
    os_log_t v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    char v13 = sub_1000FBC7C;
    id v14 = &unk_1002B12F0;
    id v15 = a1[4];
    id v16 = location[0];
    dispatch_async((dispatch_queue_t)v9, &v10);

    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    int v20 = 0;
  }
  objc_storeStrong(&v34, 0);
  objc_storeStrong(location, 0);
}

id sub_1000FBC48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _signInFailedWithError:*(void *)(a1 + 40) a1 a1];
}

void sub_1000FBC7C(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
  id v2 = [*(id *)(a1 + 32) navigationController];
  [v2 pushViewController:location[0] animated:1];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog;
    os_log_type_t v4 = v14;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v5 = [*(id *)(a1 + 32) signInTask];
  uint64_t v6 = *(void *)(a1 + 40);
  os_log_type_t v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  os_log_t v10 = sub_1000FBE2C;
  int v11 = &unk_1002B15C8;
  id v12 = *(id *)(a1 + 32);
  [v5 signInToAllServicesWithAuthenticationResults:v6 completion:&v7];

  objc_storeStrong(&v12, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FBE2C(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_1000FBF50;
  int v9 = &unk_1002B15A0;
  char v12 = v15 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000FBF50(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 48))
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sign-in succeeded!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
    return [*(id *)(a1 + 40) _signInSucceeded];
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v12 = [*(id *)(a1 + 32) domain];
        char v11 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [*(id *)(a1 + 32) code]);
        id v10 = v2;
        char v9 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    return [*(id *)(a1 + 40) _signInFailedWithError:*(void *)(a1 + 32)];
  }
}

void sub_1000FC8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000FC8F4(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return [(objc_class *)a1[4].isa showCredentialRecovery];
}

void sub_1000FC9A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  char v3 = [WeakRetained isMovingToParentViewController:a1] ^ 1;

  if (v3) {
    [*(id *)(a1 + 32) cancelAuthentication];
  }
}

void sub_1000FCA04(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  oslog[1] = a1;
  id WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  [(objc_class *)a1[4].isa setAuthAttemptLandingViewController:WeakRetained];

  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v6 = oslog[0];
    os_log_type_t v7 = v13;
    sub_10004B24C(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Begin post-upgrade sign in from sign in page", (uint8_t *)v12, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  id v9 = location[0];
  id v10 = v15;
  id v11 = objc_loadWeakRetained((id *)&a1[5].isa);
  [(objc_class *)isa _beginPostUpgradeAppleIDLoginWithUsername:v9 password:v10 signInController:v11];

  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FCB34(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  os_log_type_t v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1000FCC84;
  id v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FCC84(uint64_t a1)
{
  v8[2] = (id)a1;
  v8[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) _authCompletedShouldProceed:0 error:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v1 = *(void **)(a1 + 40);
    uint64_t v2 = *(void *)(a1 + 48);
    char v3 = _NSConcreteStackBlock;
    int v4 = -1073741824;
    int v5 = 0;
    os_log_type_t v6 = sub_1000FCD64;
    int v7 = &unk_1002B15C8;
    v8[0] = *(id *)(a1 + 40);
    [v1 _upgradeAccountWithAuthenticationResults:v2 completion:&v3];
    objc_storeStrong(v8, 0);
  }
}

void sub_1000FCD64(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  int v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_1000FCE88;
  id v9 = &unk_1002B15A0;
  id v10 = *(id *)(a1 + 32);
  char v12 = v15 & 1;
  id v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000FCE88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _appleIDControllerCompletedShouldProceed:*(unsigned char *)(a1 + 48) & 1 error:*(void *)(a1 + 40) a1:a1];
}

void sub_1000FD194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000FD1D0(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return [(objc_class *)a1[4].isa showCredentialRecovery];
}

void sub_1000FD27C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  char v3 = [WeakRetained isMovingToParentViewController:a1] ^ 1;

  if (v3) {
    [*(id *)(a1 + 32) cancelAuthentication];
  }
}

void sub_1000FD2E0(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  oslog[1] = a1;
  id WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  [(objc_class *)a1[4].isa setAuthAttemptLandingViewController:WeakRetained];

  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v6 = oslog[0];
    os_log_type_t v7 = v13;
    sub_10004B24C(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Begin restore upgrade sign in from sign in page", (uint8_t *)v12, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  id v9 = location[0];
  id v10 = v15;
  id v11 = objc_loadWeakRetained((id *)&a1[5].isa);
  [(objc_class *)isa _beginPostUpgradeAppleIDLoginWithUsername:v9 password:v10 signInController:v11];

  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FD634(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = [a1[4] navigationController];
  location[0] = [v2 viewControllers];

  if ((unint64_t)[location[0] count] <= 1)
  {
    id v3 = [a1[4] navigationController];
    id v4 = [v3 topViewController];
    [a1[4] setAuthAttemptLandingViewController:v4];
  }
  else
  {
    id v3 = [location[0] objectAtIndexedSubscript:[location[0] count] - 2];
    [a1[4] setAuthAttemptLandingViewController:v3];
  }

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = oslog;
    os_log_type_t v6 = v12;
    sub_10004B24C(v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Begin silent post-upgrade sign in", (uint8_t *)v11, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v7 = a1[4];
  id v8 = [a1[5] appleID];
  id v9 = [a1[5] rawPassword];
  id v10 = [a1[5] continuationKey];
  [v7 _beginPostUpgradeAppleIDLoginWithUsername:v8 password:v9 continuationKey:v10 signInController:0];

  objc_storeStrong(location, 0);
}

void sub_1000FE100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,uint64_t a38)
{
  objc_destroyWeak(v39);
  objc_destroyWeak(v38);
  objc_destroyWeak((id *)(v40 - 216));
  _Unwind_Resume(v41);
}

void sub_1000FE1AC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v8;
    sub_10004B24C(v7);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot with create tapped", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v4 = [(objc_class *)a1[4].isa delegate];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    id v6 = [(objc_class *)a1[4].isa delegate];
    [v6 appleIDControllerWantsChoiceController:a1[4].isa];
  }
}

void sub_1000FE2B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  char v3 = [WeakRetained isMovingToParentViewController:a1] ^ 1;

  if (v3) {
    [*(id *)(a1 + 32) cancelAuthentication];
  }
}

void sub_1000FE314(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v40 = 0;
  objc_storeStrong(&v40, a3);
  id v39 = 0;
  objc_storeStrong(&v39, a4);
  v38[1] = a1;
  if (v39)
  {
    v38[0] = (id)_BYLoggingFacility();
    os_log_type_t v37 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v38[0], OS_LOG_TYPE_ERROR))
    {
      char v35 = 0;
      char v33 = 0;
      if (_BYIsInternalInstall())
      {
        id v7 = (NSString *)v39;
      }
      else if (v39)
      {
        id v36 = [v39 domain];
        char v35 = 1;
        id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v36, [v39 code]);
        id v34 = v7;
        char v33 = 1;
      }
      else
      {
        id v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v38[0], v37, "Authentication failed: %{public}@", buf, 0xCu);
      if (v33) {

      }
      if (v35) {
    }
      }
    objc_storeStrong(v38, 0);
    os_log_type_t v8 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v27 = -1073741824;
    int v28 = 0;
    id v29 = sub_1000FE77C;
    char v30 = &unk_1002B1408;
    objc_copyWeak(&v32, a1 + 6);
    id v31 = a1[4];
    dispatch_async((dispatch_queue_t)v8, &block);

    int v25 = 1;
    objc_storeStrong(&v31, 0);
    objc_destroyWeak(&v32);
  }
  else
  {
    [a1[5] markSignInStartedAfterAuthenticationCompleted];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = oslog;
      os_log_type_t v10 = v23;
      sub_10004B24C(v22);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Authentication succeeded!", v22, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v11 = &_dispatch_main_q;
    os_log_type_t v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    id v15 = sub_1000FE820;
    uint64_t v16 = &unk_1002B2F48;
    id v17 = a1[4];
    id v18 = location[0];
    id v19 = v40;
    objc_copyWeak(&v21, a1 + 6);
    id v20 = a1[5];
    dispatch_async((dispatch_queue_t)v11, &v12);

    objc_storeStrong(&v20, 0);
    objc_destroyWeak(&v21);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
    int v25 = 0;
  }
  objc_storeStrong(&v39, 0);
  objc_storeStrong(&v40, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FE77C(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 5);
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  [WeakRetained setEnabled:1];

  id v3 = [a1[4] navigationController];
  id v4 = [v3 popToViewController:location[0] animated:1];

  objc_storeStrong(location, 0);
}

void sub_1000FE820(uint64_t a1)
{
  v18[2] = (id)a1;
  v18[1] = (id)a1;
  v18[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
  id v2 = [*(id *)(a1 + 32) navigationController];
  [v2 pushViewController:v18[0] animated:1];

  id location = (id)_BYLoggingFacility();
  os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = location;
    os_log_type_t v4 = v16;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  char v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  os_log_type_t v10 = sub_1000FEA00;
  id v11 = &unk_1002B2F20;
  objc_copyWeak(&v14, (id *)(a1 + 64));
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 56);
  [v5 signInToAllServicesWithAuthenticationResults:v6 completion:&v7];
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_destroyWeak(&v14);
  objc_storeStrong(v18, 0);
}

void sub_1000FE9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_1000FEA00(id *a1, char a2, id obj)
{
  id v18 = a1;
  char v17 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v15 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_1000FEB68;
  int v9 = &unk_1002B2EF8;
  objc_copyWeak(&v13, a1 + 6);
  char v14 = v17 & 1;
  id v10 = location;
  id v11 = a1[4];
  id v12 = a1[5];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v13);
  objc_storeStrong(&location, 0);
}

void sub_1000FEB68(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(unsigned char *)(a1 + 64))
  {
    os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      char v5 = v9;
      os_log_type_t v6 = v8;
      sub_10004B24C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sign-in succeeded!", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
    [*(id *)(a1 + 48) markSignInCompleted];
    [*(id *)(a1 + 40) _signInSucceeded];
    int v10 = 0;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v14 = [*(id *)(a1 + 32) domain];
        char v13 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [*(id *)(a1 + 32) code]);
        id v12 = v2;
        char v11 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v15, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    [location[0] setEnabled:1];
    id v3 = [*(id *)(a1 + 40) navigationController];
    id v4 = [v3 popToViewController:location[0] animated:1];

    int v10 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000FEE00(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v24 = 0;
  objc_storeStrong(&v24, a3);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    char v5 = oslog[0];
    os_log_type_t v6 = v22;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Beginning authentication...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  [WeakRetained setEnabled:0];

  id v8 = objc_loadWeakRetained((id *)&a1[5].isa);
  id v9 = [v8 navigationController];
  id v10 = objc_loadWeakRetained((id *)&a1[6].isa);
  [v10 setNavigationController:v9];

  id v11 = objc_loadWeakRetained((id *)&a1[6].isa);
  id v12 = location[0];
  id v13 = v24;
  id v14 = _NSConcreteStackBlock;
  int v15 = -1073741824;
  int v16 = 0;
  char v17 = sub_1000FF01C;
  id v18 = &unk_1002B2F98;
  id v19 = a1[4].isa;
  objc_copyWeak(&v20, (id *)&a1[6].isa);
  [v11 authenticateWithUsername:v12 password:v13 completion:&v14];

  objc_destroyWeak(&v20);
  objc_storeStrong((id *)&v19, 0);
  objc_storeStrong(&v24, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000FF01C(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FF0C0(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FFA64(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  *(void *)(v29 - 184) = a1;
  *(_DWORD *)(v29 - 188) = a2;
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&v30);
  objc_destroyWeak(v23);
  objc_destroyWeak((id *)(v29 - 168));
  _Unwind_Resume(*(_Unwind_Exception **)(v29 - 184));
}

void sub_1000FFB2C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id WeakRetained = objc_loadWeakRetained((id *)&a1[4].isa);
  [WeakRetained showCredentialRecovery];
}

void sub_1000FFBEC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id WeakRetained = objc_loadWeakRetained((id *)&a1[4].isa);
  char v3 = [WeakRetained isMovingToParentViewController] ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v8;
      sub_10004B24C(v7);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Navigated back, cancelling auth", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v6 = objc_loadWeakRetained((id *)&a1[5].isa);
    [v6 cancelAuthentication];
  }
}

void sub_1000FFCD0(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v38 = 0;
  objc_storeStrong(&v38, a3);
  id v37 = 0;
  objc_storeStrong(&v37, a4);
  v36[1] = a1;
  if (v37)
  {
    v36[0] = (id)_BYLoggingFacility();
    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v36[0], OS_LOG_TYPE_ERROR))
    {
      char v33 = 0;
      char v31 = 0;
      if (_BYIsInternalInstall())
      {
        id v7 = (NSString *)v37;
      }
      else if (v37)
      {
        id v34 = [v37 domain];
        char v33 = 1;
        id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v34, [v37 code]);
        id v32 = v7;
        char v31 = 1;
      }
      else
      {
        id v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v36[0], v35, "Authentication failed: %{public}@", buf, 0xCu);
      if (v31) {

      }
      if (v33) {
    }
      }
    objc_storeStrong(v36, 0);
    os_log_type_t v8 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v25 = -1073741824;
    int v26 = 0;
    int v27 = sub_1001000E8;
    int v28 = &unk_1002B1408;
    objc_copyWeak(&v30, a1 + 5);
    id v29 = a1[4];
    dispatch_async((dispatch_queue_t)v8, &block);

    int v23 = 1;
    objc_storeStrong(&v29, 0);
    objc_destroyWeak(&v30);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = oslog;
      os_log_type_t v10 = v21;
      sub_10004B24C(v20);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Authentication succeeded!", v20, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v11 = &_dispatch_main_q;
    id v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    int v15 = sub_10010018C;
    int v16 = &unk_1002B30B0;
    id v17 = a1[4];
    id v18 = v38;
    objc_copyWeak(&v19, a1 + 5);
    dispatch_async((dispatch_queue_t)v11, &v12);

    objc_destroyWeak(&v19);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
    int v23 = 0;
  }
  objc_storeStrong(&v37, 0);
  objc_storeStrong(&v38, 0);
  objc_storeStrong(location, 0);
}

void sub_1001000E8(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 5);
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  [WeakRetained setEnabled:1];

  id v3 = [a1[4] navigationController];
  id v4 = [v3 popToViewController:location[0] animated:1];

  objc_storeStrong(location, 0);
}

void sub_10010018C(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
  id v2 = [*(id *)(a1 + 32) navigationController];
  [v2 pushViewController:location[0] animated:1];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog;
    os_log_type_t v4 = v16;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v5 = [*(id *)(a1 + 32) signInTask];
  v19[0] = AIDAServiceTypeCloud;
  v19[1] = AIDAServiceTypeStore;
  id v6 = +[NSArray arrayWithObjects:v19 count:2];
  uint64_t v7 = *(void *)(a1 + 40);
  os_log_type_t v8 = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  id v11 = sub_100100430;
  id v12 = &unk_1002B3038;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  id v13 = *(id *)(a1 + 32);
  [v5 signInToServices:v6 authenticationResults:v7 completion:&v8];

  objc_storeStrong(&v13, 0);
  objc_destroyWeak(&v14);
  objc_storeStrong(location, 0);
}

void sub_10010040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_100100430(uint64_t a1, char a2, id obj)
{
  uint64_t v17 = a1;
  char v16 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v14 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  os_log_type_t v8 = sub_100100578;
  int v9 = &unk_1002B3010;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  char v13 = v16 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&location, 0);
}

void sub_100100578(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(unsigned char *)(a1 + 56))
  {
    os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v4 = v9;
      os_log_type_t v5 = v8;
      sub_10004B24C(v7);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sign-in succeeded!", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
    id v6 = [*(id *)(a1 + 40) delegate];
    [v6 appleIDControllerFinished:*(void *)(a1 + 40)];

    int v10 = 0;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v11, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    [location[0] setEnabled:1];
    id v2 = [*(id *)(a1 + 40) navigationController];
    id v3 = [v2 popToViewController:location[0] animated:1];

    int v10 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_100100760(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v24 = 0;
  objc_storeStrong(&v24, a3);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v5 = oslog[0];
    os_log_type_t v6 = v22;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Beginning authentication...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  [WeakRetained setEnabled:0];

  id v8 = objc_loadWeakRetained((id *)&a1[5].isa);
  id v9 = [v8 navigationController];
  id v10 = objc_loadWeakRetained((id *)&a1[6].isa);
  [v10 setNavigationController:v9];

  id v11 = objc_loadWeakRetained((id *)&a1[6].isa);
  id v12 = location[0];
  id v13 = v24;
  uint64_t v14 = _NSConcreteStackBlock;
  int v15 = -1073741824;
  int v16 = 0;
  uint64_t v17 = sub_10010097C;
  id v18 = &unk_1002B2F98;
  id v19 = a1[4].isa;
  objc_copyWeak(&v20, (id *)&a1[6].isa);
  [v11 authenticateWithUsername:v12 password:v13 completion:&v14];

  objc_destroyWeak(&v20);
  objc_storeStrong((id *)&v19, 0);
  objc_storeStrong(&v24, 0);
  objc_storeStrong(location, 0);
}

void sub_100100964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10010097C(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_100100A20(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1001018D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 80));
  _Unwind_Resume(a1);
}

void sub_100101920(id *a1)
{
  v11[2] = a1;
  v11[1] = a1;
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  char v3 = [WeakRetained isMovingToParentViewController] ^ 1;

  if (v3) {
    [a1[4] cancelAuthentication];
  }
  id v4 = [a1[4] twoAccountsiCloudSignInController];

  if (v4)
  {
    id v5 = a1[4];
    os_log_type_t v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    id v9 = sub_100101A2C;
    id v10 = &unk_1002B3088;
    v11[0] = a1[4];
    [v5 _removeBackToViewControllerMatchingBlock:&v6 withOffset:1];
    objc_storeStrong(v11, 0);
  }
}

uint64_t sub_100101A2C(id *a1, void *a2)
{
  id v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = location[0];
  id v4 = [v2[4] twoAccountsiCloudSignInController];
  LOBYTE(v2) = v3 == v4;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

void sub_100101A98(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v40 = 0;
  objc_storeStrong(&v40, a3);
  id v39 = a1;
  if (location[0] || v40)
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 5);
    [a1[4] setAuthAttemptLandingViewController:WeakRetained];

    os_log_type_t v6 = [BuddyAppleIDSignInTask alloc];
    id v7 = [a1[4] featureFlags];
    id v8 = +[BuddyAccountTools sharedBuddyAccountTools];
    id v9 = [(BuddyAppleIDSignInTask *)v6 initWithFeatureFlags:v7 accountTools:v8];
    [a1[4] setSignInTask:v9];

    id v10 = objc_loadWeakRetained(a1 + 5);
    id v11 = [v10 navigationController];
    id v12 = [a1[4] signInTask];
    [v12 setNavigationController:v11];

    id v13 = [a1[4] signInTask];
    [v13 setServiceType:2];

    LOBYTE(v13) = [a1[4] _isRestore];
    id v14 = [a1[4] signInTask];
    [v14 setRestoreFromBackupMode:v13 & 1];

    id v15 = [a1[4] featureFlags];
    LOBYTE(v14) = [v15 isUseCDPContextSecretInsteadOfSBDSecretEnabled];

    if (v14)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [a1[4] passcodeCacheManager];
        id v17 = [a1[4] signInTask];
        sub_1000E4F20((uint64_t)buf, (uint64_t)"-[BuddyAppleIDController _showTwoAccountsiTunesSignInController]_block_invoke_3", (uint64_t)v16, (uint64_t)v17);
        _os_log_impl((void *)&_mh_execute_header, oslog, v36, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);
      }
      objc_storeStrong((id *)&oslog, 0);
      id v18 = [a1[4] passcodeCacheManager];
      id v19 = [a1[4] signInTask];
      [v19 setCacheManager:v18];
    }
    os_log_t v35 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = v35;
      os_log_type_t v21 = v34;
      sub_10004B24C(v33);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Beginning authentication for store account...", v33, 2u);
    }
    objc_storeStrong((id *)&v35, 0);
    id v22 = objc_loadWeakRetained(a1 + 5);
    [v22 setEnabled:0];

    id v23 = [a1[4] signInTask];
    id v24 = location[0];
    id v25 = v40;
    int v26 = _NSConcreteStackBlock;
    int v27 = -1073741824;
    int v28 = 0;
    id v29 = sub_10010203C;
    id v30 = &unk_1002B3128;
    objc_copyWeak(&v32, a1 + 5);
    id v31 = a1[4];
    [v23 authenticateWithUsername:v24 password:v25 completion:&v26];

    objc_storeStrong(&v31, 0);
    objc_destroyWeak(&v32);
    int v38 = 0;
  }
  else
  {
    [a1[4] _signInSucceeded];
    int v38 = 1;
  }
  objc_storeStrong(&v40, 0);
  objc_storeStrong(location, 0);
}

void sub_100102018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10010203C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v37 = 0;
  objc_storeStrong(&v37, a3);
  v36[1] = a1;
  if (v37)
  {
    v36[0] = (id)_BYLoggingFacility();
    os_log_type_t v35 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v36[0], OS_LOG_TYPE_ERROR))
    {
      char v33 = 0;
      char v31 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v37;
      }
      else if (v37)
      {
        id v34 = [v37 domain];
        char v33 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v34, [v37 code]);
        id v32 = v5;
        char v31 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v36[0], v35, "Authentication failed: %{public}@", buf, 0xCu);
      if (v31) {

      }
      if (v33) {
    }
      }
    objc_storeStrong(v36, 0);
    os_log_type_t v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v24 = -1073741824;
    int v25 = 0;
    int v26 = sub_100102474;
    int v27 = &unk_1002B30B0;
    objc_copyWeak(&v30, a1 + 5);
    id v28 = a1[4];
    id v29 = v37;
    dispatch_async((dispatch_queue_t)v6, &block);

    int v22 = 1;
    objc_storeStrong(&v29, 0);
    objc_storeStrong(&v28, 0);
    objc_destroyWeak(&v30);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = oslog;
      os_log_type_t v8 = v20;
      sub_10004B24C(v19);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Authentication succeeded!", v19, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v9 = &_dispatch_main_q;
    id v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    id v13 = sub_1001024D8;
    id v14 = &unk_1002B3100;
    id v15 = a1[4];
    id v16 = location[0];
    objc_copyWeak(&v18, a1 + 5);
    id v17 = v37;
    dispatch_async((dispatch_queue_t)v9, &v10);

    objc_storeStrong(&v17, 0);
    objc_destroyWeak(&v18);
    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    int v22 = 0;
  }
  objc_storeStrong(&v37, 0);
  objc_storeStrong(location, 0);
}

void sub_100102474(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  [location[0] setEnabled:1];
  [*(id *)(a1 + 32) _signInFailedWithError:*(void *)(a1 + 40)];
  objc_storeStrong(location, 0);
}

void sub_1001024D8(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
  id v2 = [*(id *)(a1 + 32) navigationController];
  [v2 pushViewController:location[0] animated:1];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog;
    os_log_type_t v4 = v17;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in for store account...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v5 = [*(id *)(a1 + 32) signInTask];
  uint64_t v20 = AIDAServiceTypeStore;
  os_log_type_t v6 = +[NSArray arrayWithObjects:&v20 count:1];
  uint64_t v7 = *(void *)(a1 + 40);
  os_log_type_t v8 = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  int v11 = sub_100102794;
  int v12 = &unk_1002B30D8;
  objc_copyWeak(&v15, (id *)(a1 + 56));
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 48);
  [v5 signInToServices:v6 authenticationResults:v7 completion:&v8];

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_destroyWeak(&v15);
  objc_storeStrong(location, 0);
}

void sub_100102770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_100102794(id *a1, char a2, id obj)
{
  id v18 = a1;
  char v17 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v15 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  os_log_type_t v8 = sub_1001028FC;
  int v9 = &unk_1002B2EF8;
  objc_copyWeak(&v13, a1 + 6);
  char v14 = v17 & 1;
  id v10 = location;
  id v11 = a1[4];
  id v12 = a1[5];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v13);
  objc_storeStrong(&location, 0);
}

void sub_1001028FC(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(unsigned char *)(a1 + 64))
  {
    os_log_t v6 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v5 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v2 = v6;
      os_log_type_t v3 = v5;
      sub_10004B24C(v4);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sign-in succeeded!", (uint8_t *)v4, 2u);
    }
    objc_storeStrong((id *)&v6, 0);
    [*(id *)(a1 + 40) _signInSucceeded];
    int v7 = 0;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v8, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    [location[0] setEnabled:1];
    [*(id *)(a1 + 40) _signInFailedWithError:*(void *)(a1 + 48)];
    int v7 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_100102C2C(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v19 = 0;
  objc_storeStrong(&v19, a3);
  oslog[1] = a1;
  if (v19)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v5 = (NSString *)v19;
      }
      else if (v19)
      {
        id v16 = [v19 domain];
        char v15 = 1;
        os_log_type_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v16, [v19 code]);
        id v14 = v5;
        char v13 = 1;
      }
      else
      {
        os_log_type_t v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Proximity authentication failed: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  id v6 = [(objc_class *)a1[4].isa proximityLoginHandler];

  if (v6)
  {
    int v7 = (void (**)(id, id, id))[(objc_class *)a1[4].isa proximityLoginHandler];
    v7[2](v7, location[0], v19);
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    char v11 = 17;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      os_log_type_t v8 = v12;
      os_log_type_t v9 = v11;
      sub_10004B24C(v10);
      _os_log_fault_impl((void *)&_mh_execute_header, v8, v9, "Proximity authentation called without a handler!", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
  }
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_100103120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 80));
  _Unwind_Resume(a1);
}

void sub_100103170(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  char v3 = [WeakRetained isMovingToParentViewController:a1] ^ 1;

  if (v3) {
    [*(id *)(a1 + 32) cancelAuthentication];
  }
}

void sub_1001031D4(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v38 = 0;
  objc_storeStrong(&v38, a3);
  oslog[1] = a1;
  id WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  [(objc_class *)a1[4].isa setAuthAttemptLandingViewController:WeakRetained];

  id v6 = [BuddyAppleIDSignInTask alloc];
  id v7 = [(objc_class *)a1[4].isa featureFlags];
  id v8 = +[BuddyAccountTools sharedBuddyAccountTools];
  os_log_type_t v9 = [(BuddyAppleIDSignInTask *)v6 initWithFeatureFlags:v7 accountTools:v8];
  [(objc_class *)a1[4].isa setSignInTask:v9];

  id v10 = objc_loadWeakRetained((id *)&a1[5].isa);
  id v11 = [v10 navigationController];
  id v12 = [(objc_class *)a1[4].isa signInTask];
  [v12 setNavigationController:v11];

  id v13 = [(objc_class *)a1[4].isa signInTask];
  [v13 setMakeStoreServiceActive:0];

  LOBYTE(v13) = [(objc_class *)a1[4].isa _isRestore];
  id v14 = [(objc_class *)a1[4].isa signInTask];
  [v14 setRestoreFromBackupMode:v13 & 1];

  id v15 = [(objc_class *)a1[4].isa featureFlags];
  LOBYTE(v14) = [v15 isUseCDPContextSecretInsteadOfSBDSecretEnabled];

  if (v14)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [(objc_class *)a1[4].isa passcodeCacheManager];
      id v17 = [(objc_class *)a1[4].isa signInTask];
      sub_1000E4F20((uint64_t)buf, (uint64_t)"-[BuddyAppleIDController _showTwoAccountsiCloudSignInController]_block_invoke_2", (uint64_t)v16, (uint64_t)v17);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v36, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v18 = [(objc_class *)a1[4].isa passcodeCacheManager];
    id v19 = [(objc_class *)a1[4].isa signInTask];
    [v19 setCacheManager:v18];
  }
  os_log_t v35 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v35;
    os_log_type_t v21 = v34;
    sub_10004B24C(v33);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Beginning authentication for iCloud account...", v33, 2u);
  }
  objc_storeStrong((id *)&v35, 0);
  id v22 = objc_loadWeakRetained((id *)&a1[5].isa);
  [v22 setEnabled:0];

  id v23 = [(objc_class *)a1[4].isa signInTask];
  id v24 = location[0];
  id v25 = v38;
  int v26 = _NSConcreteStackBlock;
  int v27 = -1073741824;
  int v28 = 0;
  id v29 = sub_10010372C;
  id v30 = &unk_1002B3128;
  objc_copyWeak(&v32, (id *)&a1[5].isa);
  char v31 = a1[4].isa;
  [v23 authenticateWithUsername:v24 password:v25 completion:&v26];

  objc_storeStrong((id *)&v31, 0);
  objc_destroyWeak(&v32);
  objc_storeStrong(&v38, 0);
  objc_storeStrong(location, 0);
}

void sub_100103708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10010372C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v36 = 0;
  objc_storeStrong(&v36, a3);
  v35[1] = a1;
  if (v36)
  {
    v35[0] = (id)_BYLoggingFacility();
    os_log_type_t v34 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v35[0], OS_LOG_TYPE_ERROR))
    {
      char v32 = 0;
      char v30 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v5 = (NSString *)v36;
      }
      else if (v36)
      {
        id v33 = [v36 domain];
        char v32 = 1;
        os_log_type_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v33, [v36 code]);
        char v31 = v5;
        char v30 = 1;
      }
      else
      {
        os_log_type_t v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v35[0], v34, "Authentication failed: %{public}@", buf, 0xCu);
      if (v30) {

      }
      if (v32) {
    }
      }
    objc_storeStrong(v35, 0);
    id v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v23 = -1073741824;
    int v24 = 0;
    id v25 = sub_100103B44;
    int v26 = &unk_1002B30B0;
    objc_copyWeak(&v29, a1 + 5);
    id v27 = a1[4];
    id v28 = v36;
    dispatch_async((dispatch_queue_t)v6, &block);

    int v21 = 1;
    objc_storeStrong(&v28, 0);
    objc_storeStrong(&v27, 0);
    objc_destroyWeak(&v29);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = oslog;
      os_log_type_t v8 = v19;
      sub_10004B24C(v18);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Authentication succeeded!", v18, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    os_log_type_t v9 = &_dispatch_main_q;
    id v10 = _NSConcreteStackBlock;
    int v11 = -1073741824;
    int v12 = 0;
    id v13 = sub_100103BA8;
    id v14 = &unk_1002B30B0;
    id v15 = a1[4];
    id v16 = location[0];
    objc_copyWeak(&v17, a1 + 5);
    dispatch_async((dispatch_queue_t)v9, &v10);

    objc_destroyWeak(&v17);
    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    int v21 = 0;
  }
  objc_storeStrong(&v36, 0);
  objc_storeStrong(location, 0);
}

void sub_100103B44(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  [location[0] setEnabled:1];
  [*(id *)(a1 + 32) _signInFailedWithError:*(void *)(a1 + 40)];
  objc_storeStrong(location, 0);
}

void sub_100103BA8(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", [*(id *)(a1 + 32) operationType]);
  id v2 = [*(id *)(a1 + 32) navigationController];
  [v2 pushViewController:location[0] animated:1];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    char v3 = oslog;
    os_log_type_t v4 = v15;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning sign-in for iCloud account...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v5 = [*(id *)(a1 + 32) signInTask];
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  id v10 = sub_100103D84;
  int v11 = &unk_1002B3150;
  objc_copyWeak(&v13, (id *)(a1 + 48));
  id v12 = *(id *)(a1 + 32);
  [v5 signInToAllServicesWithAuthenticationResults:v6 completion:&v7];

  objc_storeStrong(&v12, 0);
  objc_destroyWeak(&v13);
  objc_storeStrong(location, 0);
}

void sub_100103D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_100103D84(uint64_t a1, char a2, id obj)
{
  uint64_t v17 = a1;
  char v16 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v14 = a1;
  os_log_type_t v4 = &_dispatch_main_q;
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_100103ECC;
  int v9 = &unk_1002B3010;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  char v13 = v16 & 1;
  id v10 = location;
  id v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&location, 0);
}

void sub_100103ECC(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(unsigned char *)(a1 + 56))
  {
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      char v3 = v7;
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sign-in succeeded!", v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
    [*(id *)(a1 + 40) _showTwoAccountsiTunesSignInController];
    int v8 = 0;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v12 = [*(id *)(a1 + 32) domain];
        char v11 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [*(id *)(a1 + 32) code]);
        id v10 = v2;
        char v9 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v13, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    [location[0] setEnabled:1];
    [*(id *)(a1 + 40) _signInFailedWithError:*(void *)(a1 + 32)];
    int v8 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1001045FC(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  [*(id *)(a1 + 32) setUserInteractionEnabled:1 a1];
  [*(id *)(a1 + 40) _popBackToAuthAttemptLandingPage];
  objc_storeStrong(&location, 0);
}

double sub_100104A0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)&double result = 136315650;
  *(_DWORD *)a1 = 136315650;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(void *)(a1 + 20) = a4;
  return result;
}

void sub_100104B8C(uint64_t a1)
{
  [*(id *)(a1 + 32) _createMeCard:a1];
  [*(id *)(a1 + 32) _nameDevice];
  id v2 = [*(id *)(a1 + 32) lockdownModeProvider];
  [v2 fetchAccountStateWithCompletionHandler:&stru_1002B3198];
}

void sub_1001057F0(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  char v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  char v9 = sub_100105940;
  id v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_100105940(uint64_t a1)
{
  v8[2] = (id)a1;
  v8[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) _authCompletedShouldProceed:0 error:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v1 = *(void **)(a1 + 40);
    uint64_t v2 = *(void *)(a1 + 48);
    char v3 = _NSConcreteStackBlock;
    int v4 = -1073741824;
    int v5 = 0;
    uint64_t v6 = sub_100105A20;
    int v7 = &unk_1002B15C8;
    v8[0] = *(id *)(a1 + 40);
    [v1 _upgradeAccountWithAuthenticationResults:v2 completion:&v3];
    objc_storeStrong(v8, 0);
  }
}

void sub_100105A20(uint64_t a1, char a2, id obj)
{
  uint64_t v16 = a1;
  char v15 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v13 = a1;
  int v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_100105B44;
  char v9 = &unk_1002B15A0;
  id v10 = *(id *)(a1 + 32);
  char v12 = v15 & 1;
  id v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_100105B44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _appleIDControllerCompletedShouldProceed:*(unsigned char *)(a1 + 48) & 1 error:*(void *)(a1 + 40) a1 a1];
}

void sub_1001060F8(uint64_t a1, char a2, id obj)
{
  uint64_t v17 = a1;
  char v16 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v14 = a1;
  int v4 = &_dispatch_main_q;
  int v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  int v8 = sub_100106244;
  char v9 = &unk_1002B31C0;
  id v10 = *(id *)(a1 + 32);
  char v13 = v16 & 1;
  id v11 = location;
  id v12 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_100106244(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  [*(id *)(a1 + 32) _didFinishResponsibilityViewControllerPushSeesion];
  if (*(unsigned char *)(a1 + 56))
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v2 = v10;
      os_log_type_t v3 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sign-in succeeded!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, *(void *)(a1 + 40));
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v11, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    char v5 = *(unsigned char *)(a1 + 56);
    id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:AIDAServiceTypeCloud];
    id v7 = [v6 error];
    (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, v5 & 1, v7);
  }
}

void sub_10010652C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v33 = 0;
  objc_storeStrong(&v33, a3);
  v32[1] = a1;
  int v26 = _NSConcreteStackBlock;
  int v27 = -1073741824;
  int v28 = 0;
  id v29 = sub_100106920;
  char v30 = &unk_1002B0D20;
  id v31 = a1[4];
  v32[0] = objc_retainBlock(&v26);
  if (v33)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v22 = 0;
      char v20 = 0;
      if (_BYIsInternalInstall())
      {
        char v5 = (NSString *)v33;
      }
      else if (v33)
      {
        id v23 = [v33 domain];
        char v22 = 1;
        char v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v23, [v33 code]);
        id v21 = v5;
        char v20 = 1;
      }
      else
      {
        char v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v24, "Security upgrade authentication failed: %{public}@", buf, 0xCu);
      if (v20) {

      }
      if (v22) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    (*((void (**)(void))v32[0] + 2))();
  }
  else if ([a1[4] accountToUpgradeIsPrimary])
  {
    id v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    char v15 = sub_100106B4C;
    char v16 = &unk_1002B1758;
    id v17 = a1[4];
    id v18 = location[0];
    id v19 = v32[0];
    dispatch_async((dispatch_queue_t)v6, &block);

    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
  }
  else
  {
    os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = v11;
      os_log_type_t v8 = v10;
      sub_10004B24C(v9);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Security upgrade authentication completed for non-primary Apple ID", v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
    (*((void (**)(void))v32[0] + 2))();
  }
  objc_storeStrong(v32, 0);
  objc_storeStrong(&v31, 0);
  objc_storeStrong(&v33, 0);
  objc_storeStrong(location, 0);
}

void sub_100106920(id *a1)
{
  v8[2] = a1;
  v8[1] = a1;
  uint64_t v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_1001069F8;
  id v7 = &unk_1002B0D20;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_1001069F8(id *a1)
{
  id v9[2] = a1;
  v9[1] = a1;
  id v2 = a1[4];
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100106AE0;
  os_log_type_t v8 = &unk_1002B3088;
  v9[0] = a1[4];
  [v2 _removeBackToViewControllerMatchingBlock:&v4 withOffset:0];
  id v3 = [a1[4] delegate];
  [v3 appleIDControllerFinished:a1[4]];

  objc_storeStrong(v9, 0);
}

uint64_t sub_100106AE0(id *a1, void *a2)
{
  id v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = location[0];
  id v4 = [v2[4] authAttemptLandingViewController];
  LOBYTE(v2) = v3 == v4;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

void sub_100106B4C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v14;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Security upgrade authentication completed for primary Apple ID; proceeding with next steps",
      buf,
      2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  int v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  os_log_type_t v8 = sub_100106CC4;
  os_log_type_t v9 = &unk_1002B1758;
  os_log_type_t v10 = a1[4].isa;
  os_log_t v11 = a1[5].isa;
  id v12 = a1[6].isa;
  [(objc_class *)isa _showSpinnerPageWithIdentifier:@"appleIDSecurityUpgradePostActions" handler:&v5];
  objc_storeStrong((id *)&v12, 0);
  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_100106CC4(uint64_t a1)
{
  v8[2] = (id)a1;
  v8[1] = (id)a1;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  os_log_type_t v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  int v6 = sub_100106D84;
  int v7 = &unk_1002B0C80;
  v8[0] = *(id *)(a1 + 48);
  [v1 _upgradeAccountWithAuthenticationResults:v2 completion:&v3];
  objc_storeStrong(v8, 0);
}

void sub_100106D84(uint64_t a1, char a2, id obj)
{
  uint64_t v6 = a1;
  char v5 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
  objc_storeStrong(&location, 0);
}

void ***sub_10010806C(id *a1, void *a2)
{
  os_log_type_t v14 = a1;
  int v13 = a2;
  v12[1] = a1;
  os_log_type_t v3 = +[NSBundle bundleForClass:objc_opt_class()];
  void *v13 = [(NSBundle *)v3 localizedStringForKey:@"APPLE_ID_LOGIN_OPTIONS" value:&stru_1002B4E18 table:@"AppleIDAuth"];

  uint64_t v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  os_log_type_t v9 = sub_1001081A8;
  os_log_type_t v10 = &unk_1002B1368;
  id v11 = a1[4];
  objc_copyWeak(v12, a1 + 5);
  int v4 = objc_retainBlock(&v6);
  objc_destroyWeak(v12);
  objc_storeStrong(&v11, 0);

  return v4;
}

void sub_1001081A8(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  uint64_t v2 = +[NSBundle bundleForClass:objc_opt_class()];
  os_log_type_t v3 = [(NSBundle *)v2 localizedStringForKey:@"APPLE_ID_LOGIN_OPTIONS_TITLE" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  location[0] = +[UIAlertController alertControllerWithTitle:v3 message:&stru_1002B4E18 preferredStyle:0];

  id v4 = location[0];
  char v5 = +[NSBundle bundleForClass:objc_opt_class()];
  uint64_t v6 = [(NSBundle *)v5 localizedStringForKey:@"APPLE_ID_PROXIMITY_SIGNIN" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  char v22 = _NSConcreteStackBlock;
  int v23 = -1073741824;
  int v24 = 0;
  id v25 = sub_1001085C4;
  int v26 = &unk_1002B1390;
  id v27 = a1[4];
  objc_copyWeak(&v28, a1 + 5);
  int v7 = +[UIAlertAction actionWithTitle:v6 style:0 handler:&v22];
  [v4 addAction:v7];

  id v8 = location[0];
  os_log_type_t v9 = +[NSBundle bundleForClass:objc_opt_class()];
  os_log_type_t v10 = [(NSBundle *)v9 localizedStringForKey:@"HAVE_TWO_ACCOUNTS" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  id v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472;
  id v19 = sub_100108630;
  char v20 = &unk_1002B1040;
  id v21 = a1[4];
  id v11 = +[UIAlertAction actionWithTitle:v10 style:0 handler:&v17];
  [v8 addAction:v11, v17, v18, v19, v20];

  id v12 = location[0];
  int v13 = +[NSBundle bundleForClass:objc_opt_class()];
  os_log_type_t v14 = [(NSBundle *)v13 localizedStringForKey:@"CANCEL" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  char v15 = +[UIAlertAction actionWithTitle:v14 style:1 handler:0];
  [v12 addAction:v15];

  id v16 = [a1[4] navigationController];
  [v16 presentViewController:location[0] animated:1 completion:0];

  objc_storeStrong(&v21, 0);
  objc_destroyWeak(&v28);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

void sub_100108598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v16);
  _Unwind_Resume(a1);
}

void sub_1001085C4(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  os_log_type_t v3 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v3 _showProximityiCloudSignInController:WeakRetained];

  objc_storeStrong(location, 0);
}

void sub_100108630(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _showTwoAccountsiCloudSignInController];
  objc_storeStrong(location, 0);
}

void ***sub_100108680(id *a1, void *a2)
{
  int v13 = a1;
  id v12 = a2;
  v11[1] = a1;
  os_log_type_t v3 = +[NSBundle bundleForClass:objc_opt_class()];
  *id v12 = [(NSBundle *)v3 localizedStringForKey:@"HAVE_TWO_ACCOUNTS" value:&stru_1002B4E18 table:@"AppleIDAuth"];

  uint64_t v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  os_log_type_t v9 = sub_10010879C;
  os_log_type_t v10 = &unk_1002B0D20;
  v11[0] = a1[4];
  id v4 = objc_retainBlock(&v6);
  objc_storeStrong(v11, 0);

  return v4;
}

id sub_10010879C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _showTwoAccountsiCloudSignInController:a1];
}

void ***sub_1001087C8(id *a1, void *a2)
{
  os_log_type_t v14 = a1;
  int v13 = a2;
  v12[1] = a1;
  os_log_type_t v3 = +[NSBundle bundleForClass:objc_opt_class()];
  void *v13 = [(NSBundle *)v3 localizedStringForKey:@"APPLE_ID_PROXIMITY_SIGNIN" value:&stru_1002B4E18 table:@"AppleIDAuth"];

  uint64_t v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  os_log_type_t v9 = sub_100108904;
  os_log_type_t v10 = &unk_1002B1368;
  id v11 = a1[4];
  objc_copyWeak(v12, a1 + 5);
  id v4 = objc_retainBlock(&v6);
  objc_destroyWeak(v12);
  objc_storeStrong(&v11, 0);

  return v4;
}

void sub_100108904(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 _showProximityiCloudSignInController:WeakRetained a1 a1];
}

void sub_100109468(uint64_t a1, char a2)
{
  uint64_t v13 = a1;
  char v12 = a2;
  uint64_t v11 = a1;
  os_log_type_t v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  int v7 = sub_100109550;
  int v8 = &unk_1002B1130;
  char v10 = v12 & 1;
  id v9 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(&v9, 0);
}

id sub_100109550(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    return [*(id *)(a1 + 32) exitMigrationReconnectController:a1 a1];
  }
  [*(id *)(a1 + 32) setDidReconnect:1 a1, a1];
  return [*(id *)(a1 + 32) _startMigrationIfPossible];
}

void sub_100109A1C(uint64_t a1, char a2)
{
  uint64_t v12 = a1;
  char v11 = a2;
  v10[1] = (id)a1;
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) navigationItem];
    id v4 = [v3 leftBarButtonItem];
    [v4 setEnabled:0];

    id v5 = [*(id *)(a1 + 32) miscState];
    id v6 = [v5 migrationManager];
    [v6 cancelWithCause:2];

    if (*(unsigned char *)(a1 + 40))
    {
      id v7 = [*(id *)(a1 + 32) analyticsManager];
      [v7 commitThenUpload];

      v10[0] = objc_alloc_init((Class)DDRResetOptions);
      id location = [objc_alloc((Class)DDRResetRequest) initWithMode:4 options:v10[0] reason:@"Migration Disconnect Erase"];
      int v8 = +[DDRResetService sharedInstance];
      [(DDRResetService *)v8 resetWithRequest:location completion:&stru_1002B3258];

      objc_storeStrong(&location, 0);
      objc_storeStrong(v10, 0);
    }
    else
    {
      [*(id *)(a1 + 32) exitMigrationReconnectController];
    }
  }
  else
  {
    [*(id *)(a1 + 32) setUserDidCancelReconnect:0];
    [*(id *)(a1 + 32) _startMigrationIfPossible];
  }
}

void sub_100109BC4(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Reset failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset was successful!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10010A6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
}

void sub_10010A708(id *a1, void *a2, id obj)
{
  os_log_type_t v14 = a1;
  os_log_type_t v13 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v11[2] = a1;
  id v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  os_log_t v8 = sub_10010A824;
  char v9 = &unk_1002B32A8;
  objc_copyWeak(v11, a1 + 5);
  v11[1] = v13;
  id v10 = a1[4];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v10, 0);
  objc_destroyWeak(v11);
  objc_storeStrong(&location, 0);
}

void sub_10010A824(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  [location[0] setScreenTimeState:*(void *)(a1 + 48)];
  id v2 = objc_alloc((Class)STSetupAssistantViewController);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [location[0] managementState];
  id v5 = [v2 initWithScreenTimeState:v3 passcode:(unint64_t)[v4 isRestrictionsPasscodeSet] & 1];
  [location[0] setScreenTimeViewController:v5];

  id v6 = [location[0] screenTimeViewController];
  [v6 setDelegate:location[0]];

  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_10010AAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
}

void sub_10010AB1C(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v12 = a1;
  uint64_t v3 = &_dispatch_main_q;
  id v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  int v7 = sub_10010AC34;
  os_log_t v8 = &unk_1002B32F8;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  id v9 = location[0];
  char v11 = *(unsigned char *)(a1 + 40) & 1;
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v10);
  objc_storeStrong(location, 0);
}

void sub_10010AC34(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:v3];

  id v4 = [location[0] screenTimeViewController];
  id v5 = [v4 view];
  id v6 = [v5 window];
  [v6 setUserInteractionEnabled:1];

  if (*(void *)(a1 + 32))
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v7 = @"enable";
      }
      else {
        CFStringRef v7 = @"disable";
      }
      char v18 = 0;
      char v16 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_t v8 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v19 = [*(id *)(a1 + 32) domain];
        char v18 = 1;
        os_log_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v19, [*(id *)(a1 + 32) code]);
        id v17 = v8;
        char v16 = 1;
      }
      else
      {
        os_log_t v8 = 0;
      }
      sub_100051470((uint64_t)buf, (uint64_t)v7, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v20, "Failed to %@ Screen Time: %@", buf, 0x16u);
      if (v16) {

      }
      if (v18) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v9 = @"enabled";
      }
      else {
        CFStringRef v9 = @"disabled";
      }
      sub_10004B238((uint64_t)v23, (uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Screen Time successfully %@", v23, 0xCu);
    }
    objc_storeStrong((id *)&v15, 0);
  }
  id v10 = [location[0] buddyPreferences];
  [v10 setObject:&__kCFBooleanTrue forKey:@"ScreenTimePresented"];

  id v11 = [location[0] settingsManager];
  [v11 setScreenTimeEnabled:*(unsigned char *)(a1 + 48) & 1];

  id v12 = [location[0] paneFeatureAnalyticsManager];
  os_log_type_t v13 = +[NSNumber numberWithBool:*(unsigned char *)(a1 + 48) & 1];
  [v12 recordActionWithValue:v13 forFeature:0];

  id v14 = [location[0] delegate];
  [v14 flowItemDone:location[0]];

  objc_storeStrong(location, 0);
}

double sub_10010BC60()
{
  return 0.0;
}

void sub_10010C2B0(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [*(id *)(a1[4] + 24) reloadData];
  objc_storeStrong(location, 0);
}

void sub_10010C314(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_10010EA08(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v4[1] = a1;
  v4[0] = +[NSError errorWithDomain:@"BYCloudConfigRetreiveProfileFromWebErrorDomain" code:-5 userInfo:0];
  id v3 = [a1[4] delegate];
  [v3 webAuthCanceled:v4[0]];

  objc_storeStrong(v4, 0);
  objc_storeStrong(location, 0);
}

BYBackupMetadata *__cdecl sub_10010F518(id a1, NSString *a2, unint64_t a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = (id)BYMetadataFromBackup();
  objc_storeStrong(location, 0);

  return (BYBackupMetadata *)v3;
}

void sub_10010FA20(id *a1)
{
  id v2 = [a1[4] backupUDIDToSeedEnrolledMap:a1, a1];
  id v3 = [a1[5] backupUDID];
  id v4 = [v2 objectForKeyedSubscript:v3];

  if (!v4) {
    [a1[6] addObject:a1[5]];
  }
}

uint64_t sub_10010FAC0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v45 = a1;
  uint64_t v44 = a1;
  memset(__b, 0, sizeof(__b));
  id v2 = *(id *)(v1 + 32);
  id v3 = [v2 countByEnumeratingWithState:__b objects:v47 count:16];
  if (v3)
  {
    id v4 = (void **)&__b[2];
    uint64_t v5 = *(void *)__b[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (**v4 != v5) {
          objc_enumerationMutation(v2);
        }
        id v43 = *(id *)(__b[1] + 8 * i);
        CFStringRef v7 = (uint64_t (**)(id, id, id))[*(id *)(v1 + 40) fetchBackupMetadataBlock];
        id v8 = [v43 backupUDID];
        id location = (id)v7[2](v7, v8, [v43 snapshotID]);

        BOOL v40 = 0;
        id v9 = [location seedEnrollmentProgram];
        char v38 = 0;
        BOOL v10 = 0;
        if (v9)
        {
          id v39 = [location seedEnrollmentAssetAudience];
          char v38 = 1;
          BOOL v10 = v39 != 0;
        }
        if (v38) {

        }
        BOOL v40 = v10;
        id v11 = [*(id *)(v1 + 40) backupUDIDToSeedEnrolledMapAccessQueue];
        block = _NSConcreteStackBlock;
        int v31 = -1073741824;
        int v32 = 0;
        id v33 = sub_10010FEEC;
        os_log_type_t v34 = &unk_1002B15A0;
        id v35 = *(id *)(v1 + 40);
        id v36 = v43;
        BOOL v37 = v40;
        dispatch_sync(v11, &block);

        os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
        {
          os_log_t log = oslog;
          uint64_t v12 = v1;
          uint64_t v13 = v5;
          id v14 = v2;
          os_log_t v15 = v4;
          int v16 = v40;
          id v17 = v3;
          id v18 = [v43 backupUDID];
          int v19 = v16;
          id v4 = v15;
          id v2 = v14;
          uint64_t v5 = v13;
          uint64_t v1 = v12;
          sub_10006E000((uint64_t)buf, v19, (uint64_t)v18);
          _os_log_debug_impl((void *)&_mh_execute_header, log, v28, "Did load seed enrollment state %d for restorable item %@", buf, 0x12u);
          os_log_type_t v20 = v18;
          id v3 = v17;
        }
        objc_storeStrong((id *)&oslog, 0);
        objc_storeStrong(&v36, 0);
        objc_storeStrong(&v35, 0);
        objc_storeStrong(&location, 0);
      }
      id v3 = [v2 countByEnumeratingWithState:__b objects:v47 count:16];
    }
    while (v3);
  }

  os_log_t v27 = (os_log_t)(id)_BYLoggingFacility();
  char v26 = 2;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    id v21 = v27;
    os_log_type_t v22 = v26;
    sub_10004B24C(v25);
    _os_log_debug_impl((void *)&_mh_execute_header, v21, v22, "Finished loading seed enrollment state", v25, 2u);
  }
  objc_storeStrong((id *)&v27, 0);
  return (*(uint64_t (**)(void))(*(void *)(v1 + 48) + 16))();
}

void sub_10010FEEC(uint64_t a1)
{
  id v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned char *)(a1 + 48) & 1, a1, a1);
  id v3 = [*(id *)(a1 + 32) backupUDIDToSeedEnrolledMap];
  id v4 = [*(id *)(a1 + 40) backupUDID];
  [v3 setObject:v2 forKeyedSubscript:v4];
}

void sub_1001100E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, char a19)
{
}

void sub_100110104(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) backupUDIDToSeedEnrolledMap:a1, a1];
  id v3 = [*(id *)(a1 + 40) backupUDID];
  id v4 = [v2 objectForKeyedSubscript:v3];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 BOOLValue] & 1;
}

void sub_10011255C(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  oslog[1] = a1;
  if (v9)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)v9);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Error fetching user information: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    Class isa = a1[4].isa;
    id v6 = [location[0] repairState];
    BOOL v7 = 1;
    if (v6 != (id)2) {
      BOOL v7 = [location[0] repairState] == (id)3;
    }
    (*((void (**)(Class, BOOL))isa + 2))(isa, v7);
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_10011296C(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v19 = 0;
  objc_storeStrong(&v19, a3);
  oslog[1] = a1;
  if (v19)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v17, "Repair flow completed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v16 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v16;
      os_log_type_t v6 = v15;
      sub_10004B24C(v14);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Repair flow completed successfully!", v14, 2u);
    }
    objc_storeStrong((id *)&v16, 0);
  }
  BOOL v7 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  id v11 = sub_100112B94;
  uint64_t v12 = &unk_1002B0D20;
  uint64_t v13 = a1[4].isa;
  dispatch_async((dispatch_queue_t)v7, &block);

  objc_storeStrong((id *)&v13, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_100112B94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_1001131FC(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1001136D0(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_10011372C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_10011413C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] navigationController];
  id v4 = [v3 view];
  [v4 setNeedsLayout];

  id v5 = [a1[4] navigationController];
  id v6 = [v5 view];
  [v6 layoutIfNeeded];

  id v7 = a1[4];
  [v7 _contentViewHeight];
  [v7 _setPosedViewToBoundedHeight:1 animated:];
  objc_storeStrong(location, 0);
}

void sub_100114418(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) selectionView];
  id v3 = [v2 leftPosedView];
  [v3 updateBoundsForMaxContentHeight:*(double *)(a1 + 40)];
  double v5 = v4;

  id v6 = [*(id *)(a1 + 32) selectionView];
  id v7 = [v6 centerPosedView];
  [v7 updateBoundsForMaxContentHeight:*(double *)(a1 + 40)];

  id v8 = [*(id *)(a1 + 32) selectionView];
  id v9 = [v8 rightPosedView];
  [v9 updateBoundsForMaxContentHeight:*(double *)(a1 + 40)];

  id v10 = [*(id *)(a1 + 32) selectionViewHeightChangeBlock];
  if (v10)
  {
    id v11 = (void (**)(void, double))[*(id *)(a1 + 32) selectionViewHeightChangeBlock];
    v11[2](v11, v5);
  }
  if (*(unsigned char *)(a1 + 48) & 1) != 0 && (*(unsigned char *)(a1 + 49))
  {
    id v12 = [*(id *)(a1 + 32) view];
    [v12 layoutIfNeeded];
  }
}

void sub_1001145B4(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 40) & 1) == 0 && (a2 & 1) != 0 && (*(unsigned char *)(a1 + 41))
  {
    id v2 = [*(id *)(a1 + 32) view];
    [v2 setNeedsLayout];
  }
}

BOOL sub_100114C28(uint64_t a1)
{
  BOOL v1 = 1;
  if (a1 != 4) {
    return a1 == 3;
  }
  return v1;
}

id sub_100114F90()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C88;
  uint64_t v13 = qword_100321C88;
  if (!qword_100321C88)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    double v5 = sub_100115384;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100115384(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001150A8(NSObject *a1, char a2)
{
  os_log_type_t v17 = a1;
  char v16 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v14 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      int v3 = oslog[0];
      os_log_type_t v4 = v14;
      sub_10004B24C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Preloading resources failed; will present anyway",
        buf,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  id v5 = sub_100114F90();
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  id v10 = sub_100115214;
  int v11 = &unk_1002B0D20;
  int v12 = a1[4].isa;
  id v6 = [v5 viewControllerWithDismissHandler:&v7];
  [(objc_class *)a1[4].isa setViewController:v6];

  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong((id *)&v12, 0);
}

void sub_100115214(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) configurationCompleted:a1, a1];

  if (v2)
  {
    int v3 = (void (**)(void))[*(id *)(a1 + 32) configurationCompleted];
    v3[2](v3);
  }
}

void sub_100115384(NSAssertionHandler *a1)
{
  sub_1001154C8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("BCSetupAssistantDependencyAdapter");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getBCSetupAssistantDependencyAdapterClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyButtonConfigurationWrapper.m", 19, @"Unable to find class %s", "BCSetupAssistantDependencyAdapter" file lineNumber description];

    __break(1u);
  }
  qword_100321C88 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001154C8()
{
  if (!sub_1001155F8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    BOOL v1 = +[NSString stringWithUTF8String:"void *ActionButtonConfigurationUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyButtonConfigurationWrapper.m", 18, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001155F8()
{
  if (!qword_100321C90) {
    sub_1001156B0();
  }
  return qword_100321C90;
}

uint64_t sub_1001156B0()
{
  uint64_t result = _sl_dlopen();
  qword_100321C90 = result;
  return result;
}

void sub_100115AB4(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  if (([a1[4] isActivating] & 1) == 1)
  {
    location[0] = (id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
    {
      id v2 = location[0];
      os_log_type_t v3 = v14;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Wi-Fi activation already in-progress, ignoring additional attempt", buf, 2u);
    }
    objc_storeStrong(location, 0);
  }
  else
  {
    [a1[4] setActivating:1];
    objc_initWeak(&from, a1[4]);
    id v4 = [a1[4] activationEngine];
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    int v8 = sub_100115C70;
    int v9 = &unk_1002B3460;
    objc_copyWeak(v11, &from);
    id v10 = a1[5];
    [v4 tryActivateWithOptions:0 requestMutator:0 completion:&v5];

    objc_storeStrong(&v10, 0);
    objc_destroyWeak(v11);
    objc_destroyWeak(&from);
  }
}

void sub_100115C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, id location)
{
}

void sub_100115C70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v12 = 0;
  objc_storeStrong(&v12, a3);
  id v11 = 0;
  objc_storeStrong(&v11, a4);
  id v10 = 0;
  objc_storeStrong(&v10, a5);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained activationFinishedWithData:location[0] responseHeaders:v12 error:v10 completionHandler:*(void *)(a1 + 32) a1];

  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(location, 0);
}

void sub_100115F24(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    location[0] = (id)_BYLoggingFacility();
    os_log_type_t v21 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_ERROR))
    {
      char v19 = 0;
      char v17 = 0;
      if (_BYIsInternalInstall())
      {
        id v2 = *(NSString **)(a1 + 32);
      }
      else if (*(void *)(a1 + 32))
      {
        id v20 = [*(id *)(a1 + 32) domain];
        char v19 = 1;
        id v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v20, [*(id *)(a1 + 32) code]);
        id v18 = v2;
        char v17 = 1;
      }
      else
      {
        id v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)location[0], v21, "Error activating device: %{public}@", buf, 0xCu);
      if (v17) {

      }
      if (v19) {
    }
      }
    objc_storeStrong(location, 0);
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v3 = oslog;
      os_log_type_t v4 = v15;
      sub_10004B24C(v14);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Activation complete", v14, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v13 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"Content-Type"];
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BB7C((uint64_t)v23, (uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, v12, v11, "Activation Content-Type: %{public}@", v23, 0xCu);
    }
    objc_storeStrong((id *)&v12, 0);
    if ([v13 containsString:@"application/x-buddyml"])
    {
      os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
      char v9 = 16;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v5 = v10;
        os_log_type_t v6 = v9;
        sub_10004B24C(v8);
        _os_log_error_impl((void *)&_mh_execute_header, v5, v6, "Activation response contains buddyml, assuming activation failed", v8, 2u);
      }
      objc_storeStrong((id *)&v10, 0);
      [*(id *)(a1 + 48) setActivating:0];
      id v7 = +[NSError errorWithDomain:@"com.apple.purplebuddy.noninteractive-deviceactivator" code:1 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      objc_storeStrong(&v7, 0);
    }
    else
    {
      [*(id *)(a1 + 48) activateWithData:*(void *)(a1 + 56) headers:*(void *)(a1 + 40) completion:*(void *)(a1 + 64)];
    }
    objc_storeStrong(&v13, 0);
  }
}

void sub_100116488(uint64_t a1)
{
  id v25[2] = (id)a1;
  v25[1] = (id)a1;
  v25[0] = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t v27 = kMAOptionsActivationResponseHeaders;
    uint64_t v28 = *(void *)(a1 + 32);
    id v2 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    id v3 = v25[0];
    v25[0] = v2;
  }
  id location = 0;
  oslog[1] = 0;
  char v4 = MAEActivateDeviceWithError();
  objc_storeStrong(&location, 0);
  char v23 = v4 & 1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v5 = +[NSNumber numberWithBool:v23 & 1];
    char v19 = 0;
    char v17 = 0;
    if (_BYIsInternalInstall())
    {
      os_log_type_t v6 = (NSString *)location;
    }
    else if (location)
    {
      id v20 = [location domain];
      char v19 = 1;
      os_log_type_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v20, [location code]);
      id v18 = v6;
      char v17 = 1;
    }
    else
    {
      os_log_type_t v6 = 0;
    }
    sub_10004CECC((uint64_t)buf, (uint64_t)v5, (uint64_t)v6);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v21, "Activation response accepted: %{public}@, error = %{public}@", buf, 0x16u);
    if (v17) {

    }
    if (v19) {
  }
    }
  objc_storeStrong((id *)oslog, 0);
  id v7 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  os_log_type_t v11 = sub_1001167F0;
  os_log_t v12 = &unk_1002B31C0;
  id v13 = *(id *)(a1 + 48);
  char v16 = v23 & 1;
  id v14 = location;
  id v15 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v7, &block);

  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v25, 0);
}

void sub_1001167F0(uint64_t a1)
{
  id v3[2] = (id)a1;
  v3[1] = (id)a1;
  [*(id *)(a1 + 32) setActivating:0];
  if (*(unsigned char *)(a1 + 56))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    NSErrorUserInfoKey v4 = NSUnderlyingErrorKey;
    uint64_t v5 = *(void *)(a1 + 40);
    id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    v3[0] = +[NSError errorWithDomain:@"com.apple.purplebuddy.noninteractive-deviceactivator" code:2 userInfo:v2];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    objc_storeStrong(v3, 0);
  }
}

double sub_100118158(double a1, double a2)
{
  return fmin(a1, a2);
}

id sub_1001191E8(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  id v3 = (void *)a1[4];
  id v4 = location[0];
  uint64_t v5 = +[NSLocale currentLocale];
  os_log_type_t v6 = [(NSLocale *)v5 countryCode];
  v10[0] = [v3 buddyLocaleIdentifierFromIdentifier:v4 byAddingRegion:v6];

  id v9 = +[NSLocale localeWithLocaleIdentifier:v10[0]];
  id v7 = v9;
  objc_storeStrong(&v9, 0);
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);
  return v7;
}

BOOL sub_100119378(id a1, UIKeyboardSuggestedInputMode *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  unsigned __int8 v2 = [location[0] enabled];
  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_10011A624(uint64_t a1)
{
  BOOL v1 = 1;
  if (a1 != 4) {
    return a1 == 3;
  }
  return v1;
}

void sub_10011C0A0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_10011C0F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v29 = 0;
  objc_storeStrong(&v29, a3);
  id v28 = 0;
  objc_storeStrong(&v28, a4);
  oslog[1] = (os_log_t)a1;
  if (v28)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v24 = 0;
      char v22 = 0;
      if (_BYIsInternalInstall())
      {
        id v7 = (NSString *)v28;
      }
      else if (v28)
      {
        id v25 = [v28 domain];
        char v24 = 1;
        id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v25, [v28 code]);
        id v23 = v7;
        char v22 = 1;
      }
      else
      {
        id v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v26, "Unable to scan for software updates: %{public}@", buf, 0xCu);
      if (v22) {

      }
      if (v24) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  char v21 = 0;
  char v8 = 1;
  if (!v29) {
    char v8 = *(unsigned char *)(a1 + 56);
  }
  char v21 = v8 & 1;
  if ((v8 & 1) == 0)
  {
    [*(id *)(a1 + 32) cancelWithCause:6];
    BOOL v20 = 0;
    id v9 = [*(id *)(a1 + 40) proximitySetupController];
    id v10 = [v9 information];
    id v11 = [v10 appleID];
    BOOL v12 = v11 != 0;

    BOOL v20 = v12;
    if (!v12)
    {
      id v13 = dispatch_get_global_queue(0, 0);
      block = _NSConcreteStackBlock;
      int v15 = -1073741824;
      int v16 = 0;
      char v17 = sub_10011C450;
      id v18 = &unk_1002B0D20;
      id v19 = *(id *)(a1 + 40);
      dispatch_async(v13, &block);

      objc_storeStrong(&v19, 0);
    }
  }
  if (*(void *)(a1 + 48)) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  objc_storeStrong(&v28, 0);
  objc_storeStrong(&v29, 0);
  objc_storeStrong(location, 0);
}

void sub_10011C450(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

id sub_10011F3AC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321C98;
  uint64_t v13 = qword_100321C98;
  if (!qword_100321C98)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_10011FADC;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10011FADC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_10011F4C4()
{
  int v4 = (void **)sub_10011FEA0();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoFlowTypeKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyManagedSIMController.m", 26, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

id sub_10011F5D0()
{
  int v4 = (void **)sub_10012000C();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoIgnoreTransportKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyManagedSIMController.m", 27, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

id sub_10011F6DC()
{
  int v4 = (void **)sub_100120178();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoWaitForServiceKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyManagedSIMController.m", 28, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

void sub_10011F7E8(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_10011FADC(NSAssertionHandler *a1)
{
  sub_10011FC20();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getTSSIMSetupFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyManagedSIMController.m", 25, @"Unable to find class %s", "TSSIMSetupFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321C98 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10011FC20()
{
  uint64_t v3 = sub_10011FD54();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SIMSetupSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyManagedSIMController.m", 24, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_10011FD54()
{
  if (!qword_100321CA0) {
    sub_10011FE0C();
  }
  return qword_100321CA0;
}

uint64_t sub_10011FE0C()
{
  uint64_t result = _sl_dlopen();
  qword_100321CA0 = result;
  return result;
}

uint64_t sub_10011FEA0()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321CA8;
  uint64_t v13 = qword_100321CA8;
  if (!qword_100321CA8)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_10011FFA0;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10011FFA0((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_10011FFA0(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_10011FC20();
  uint64_t result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321CA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10012000C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321CB0;
  uint64_t v13 = qword_100321CB0;
  if (!qword_100321CB0)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_10012010C;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10012010C((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_10012010C(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_10011FC20();
  uint64_t result = dlsym(v2, "TSUserInfoIgnoreTransportKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321CB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100120178()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321CB8;
  uint64_t v13 = qword_100321CB8;
  if (!qword_100321CB8)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_100120278;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100120278((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100120278(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_10011FC20();
  uint64_t result = dlsym(v2, "TSUserInfoWaitForServiceKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321CB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001220A0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v1 = *(void *)(a1 + 40);
    id v2 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
    (*(void (**)(uint64_t, unint64_t))(v1 + 16))(v1, (unint64_t)[v2 shouldEnableProximity] & 1);
  }
}

void sub_100122524(NSObject *a1, char a2)
{
  os_log_type_t v6 = a1;
  char v5 = a2;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10005A060(buf, v5 & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Finished fetching skip keys: %d", buf, 8u);
  }
  objc_storeStrong((id *)oslog, 0);
  int v3 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v3, a1[4].isa);
}

void sub_100123120(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    int v3 = oslog[0];
    os_log_type_t v4 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Keychain transferred and imported...", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _beginSignIn];
  objc_storeStrong(location, 0);
}

id sub_1001231E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginSignIn:a1 a1];
}

void sub_100123570(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _signInCompleted:location[0]];
  objc_storeStrong(location, 0);
}

void sub_100123974(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_1001239D8(id *a1)
{
  id v11[2] = a1;
  v11[1] = a1;
  v11[0] = [a1[4] navigationController];
  id v10 = 0;
  id v2 = [v11[0] viewControllers];
  int v3 = [v2 indexOfObject:a1[4]];

  id v10 = v3;
  id v4 = [v11[0] viewControllers];
  id v5 = [v11[0] viewControllers];
  uint64_t v13 = v3;
  int v12 = (char *)((unsigned char *)[v5 count] - v3);
  id v14 = v3;
  int v15 = v12;
  os_log_type_t v6 = +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", v3, v12);
  id location = [v4 objectsAtIndexes:v6];

  id v7 = [a1[4] delegate];
  [v7 removeViewControllersOnNextPush:location];

  id v8 = [a1[4] delegate];
  [v8 flowItemDone:a1[4]];

  objc_storeStrong(&location, 0);
  objc_storeStrong(v11, 0);
}

id sub_1001241E4()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321CC0;
  uint64_t v13 = qword_100321CC0;
  if (!qword_100321CC0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100124854;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100124854(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001242FC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321CD0;
  uint64_t v13 = qword_100321CD0;
  if (!qword_100321CD0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100124C14;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100124C14(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100124414(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] delegate];
  [v1 presentWiFiPaneForFlowItem:location[0]];

  objc_storeStrong(location, 0);
}

void sub_100124480(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] delegate];
  [v1 flowItemDone:location[0]];

  objc_storeStrong(location, 0);
}

uint64_t sub_1001245F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) eraseFlow:a1, a1];
  id v3 = [v2 startFlow];
  [*(id *)(a1 + 32) setInitialViewController:v3];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100124854(NSAssertionHandler *a1)
{
  sub_100124998();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("DKEraseFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getDKEraseFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMigrationSourceEraseController.m", 16, @"Unable to find class %s", "DKEraseFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321CC0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100124998()
{
  if (!sub_100124AC8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *DisembarkUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyMigrationSourceEraseController.m", 15, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100124AC8()
{
  if (!qword_100321CC8) {
    sub_100124B80();
  }
  return qword_100321CC8;
}

uint64_t sub_100124B80()
{
  uint64_t result = _sl_dlopen();
  qword_100321CC8 = result;
  return result;
}

void sub_100124C14(NSAssertionHandler *a1)
{
  sub_100124998();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("DKConfiguration");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getDKConfigurationClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyMigrationSourceEraseController.m", 18, @"Unable to find class %s", "DKConfiguration" file lineNumber description];

    __break(1u);
  }
  qword_100321CD0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

id sub_1001252D8()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321CD8;
  uint64_t v13 = qword_100321CD8;
  if (!qword_100321CD8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100125D5C;
    os_log_type_t v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100125D5C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

uint64_t sub_100125734(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) intelligenceProvider];
    [v3 setDidShowIntelligencePaneInCurrentSession];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100125D5C(NSAssertionHandler *a1)
{
  sub_100125EA0();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("VTUIGMEnrollmentViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getVTUIGMEnrollmentViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyIntelligenceController.m", 21, @"Unable to find class %s", "VTUIGMEnrollmentViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321CD8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100125EA0()
{
  if (!sub_100125FD0())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *VoiceTriggerUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyIntelligenceController.m", 20, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100125FD0()
{
  if (!qword_100321CE0) {
    sub_100126088();
  }
  return qword_100321CE0;
}

uint64_t sub_100126088()
{
  uint64_t result = _sl_dlopen();
  qword_100321CE0 = result;
  return result;
}

double sub_1001269B8()
{
  return 0.0;
}

void sub_100127780(uint64_t a1)
{
  v65[2] = (id)a1;
  v65[1] = (id)a1;
  v65[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  id v2 = [v65[0] fetchAuthenticationContextForBiometric];
  v64.receiver = *(id *)(a1 + 32);
  v64.super_class = (Class)PearlSplashController;
  [super setAuthContext:v2];

  char v63 = 0;
  id v3 = [*(id *)(a1 + 32) managedConfiguration];
  unsigned __int8 v4 = [v3 isPasscodeSet];

  char v63 = v4 & 1;
  BOOL v62 = 0;
  id v5 = [*(id *)(a1 + 32) passcodeCacheManager];
  id v6 = [v5 cachedPasscode];
  BOOL v7 = v6 != 0;

  BOOL v62 = v7;
  BOOL v61 = 0;
  char v59 = 0;
  BOOL v8 = 1;
  if (v63)
  {
    BOOL v8 = 1;
    if (!v62)
    {
      id v60 = [*(id *)(a1 + 32) authContext];
      char v59 = 1;
      BOOL v8 = v60 != 0;
    }
  }
  if (v59) {

  }
  BOOL v61 = v8;
  BOOL v58 = 0;
  id v9 = [*(id *)(a1 + 32) managedConfiguration];
  BOOL v10 = [v9 effectiveBoolValueForSetting:MCFeatureCameraAllowed] != 2;

  BOOL v58 = v10;
  char v57 = 0;
  id v11 = [*(id *)(a1 + 32) capabilities];
  char v12 = [v11 isPearlEnrolled] ^ 1;

  char v57 = v12 & 1;
  char v56 = 0;
  id v13 = [*(id *)(a1 + 32) capabilities];
  unsigned __int8 v14 = [v13 supportsPeriocularFaceID];

  if (v14)
  {
    char v54 = 0;
    unsigned __int8 v15 = 0;
    if (BYSetupAssistantHasCompletedInitialRun())
    {
      id v55 = [*(id *)(a1 + 32) capabilities];
      char v54 = 1;
      unsigned __int8 v15 = [v55 isPearlEnrolled];
    }
    if (v54) {

    }
    if (v15)
    {
      [*(id *)(a1 + 32) setEnrollmentConfiguration:3];
      char v52 = 0;
      BOOL v16 = 0;
      if (v63)
      {
        BOOL v16 = 1;
        if (!v62)
        {
          id v53 = [*(id *)(a1 + 32) authContext];
          char v52 = 1;
          BOOL v16 = v53 != 0;
        }
      }
      BOOL v61 = v16;
      if (v52) {

      }
      char v17 = *(unsigned char *)(a1 + 48);
      char v50 = 0;
      char v48 = 0;
      char v18 = 0;
      if (v17)
      {
        char v18 = 0;
        if (v61)
        {
          char v18 = 0;
          if (v58)
          {
            id v51 = [*(id *)(a1 + 32) capabilities];
            char v50 = 1;
            unsigned __int8 v19 = [v51 hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment];
            char v18 = 0;
            if (v19)
            {
              id v49 = +[BYPreferencesController buddyPreferences];
              char v48 = 1;
              char v18 = [v49 BOOLForKey:@"FaceIDPeriocularPresented"] ^ 1;
            }
          }
        }
      }
      char v56 = v18 & 1;
      if (v48) {

      }
      if (v50) {
    }
      }
    else
    {
      [*(id *)(a1 + 32) setEnrollmentConfiguration:1];
      BOOL v20 = 0;
      if (*(unsigned char *)(a1 + 48))
      {
        BOOL v20 = 0;
        if (v61)
        {
          BOOL v20 = 0;
          if (v57) {
            BOOL v20 = v58;
          }
        }
      }
      char v56 = v20;
    }
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = BYSetupAssistantHasCompletedInitialRun() & 1;
      id v22 = [*(id *)(a1 + 32) capabilities];
      int v23 = [v22 isPearlEnrolled] & 1;
      id v24 = [*(id *)(a1 + 32) enrollmentConfiguration];
      id v25 = [*(id *)(a1 + 32) capabilities];
      sub_100128030((uint64_t)buf, v21, v23, (uint64_t)v24, [v25 hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment] & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v46, "PearlSplashController: extendedInit for periocular, user has completed initial run :%i, is pearl enrollenabled %i and enrollmentConfiguration is: %lu, has eligible enrolled identity :%i", buf, 0x1Eu);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    BOOL v26 = 0;
    if (*(unsigned char *)(a1 + 48))
    {
      BOOL v26 = 0;
      if (v61)
      {
        BOOL v26 = 0;
        if (v57) {
          BOOL v26 = v58;
        }
      }
    }
    char v56 = v26;
    os_log_t v45 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046588((uint64_t)v68, (uint64_t)[*(id *)(a1 + 32) enrollmentConfiguration]);
      _os_log_impl((void *)&_mh_execute_header, v45, v44, "PearlSplashController: extendedInit, enrollmentConfiguration is: %lu", v68, 0xCu);
    }
    objc_storeStrong((id *)&v45, 0);
  }
  if ((v56 & 1) == 0)
  {
    id v43 = +[NSString stringWithFormat:@"PearlSplashController extended init preflight failure \nisPasscodeSet: $&0 \nhasCachedPasscode: $&1 \npassCodeCheck: $&2 \ncameraAllowed: $&3 \nunenrolled: $&4 \n"];
    uint64_t v27 = +[NSNumber numberWithBool:v63 & 1];
    v67[0] = v27;
    id v28 = +[NSNumber numberWithBool:v62];
    v67[1] = v28;
    id v29 = +[NSNumber numberWithBool:v61];
    v67[2] = v29;
    char v30 = +[NSNumber numberWithBool:v58];
    v67[3] = v30;
    int v31 = +[NSNumber numberWithBool:v57 & 1];
    v67[4] = v31;
    id location = +[NSArray arrayWithObjects:v67 count:5];

    for (unsigned int i = 0; (int)i < (unint64_t)[location count]; ++i)
    {
      int v32 = +[NSString stringWithFormat:@"$&%i", i];
      id v33 = [location objectAtIndexedSubscript:(int)i];
      if ([v33 isEqual:&off_1002C1790]) {
        CFStringRef v34 = @"YES";
      }
      else {
        CFStringRef v34 = @"NO";
      }
      id v35 = [v43 stringByReplacingOccurrencesOfString:v32 withString:v34];
      id v36 = v43;
      id v43 = v35;
    }
    os_log_t v40 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v39 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      sub_10004B238((uint64_t)v66, (uint64_t)v43);
      _os_log_debug_impl((void *)&_mh_execute_header, v40, v39, "%@", v66, 0xCu);
    }
    objc_storeStrong((id *)&v40, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v43, 0);
  }
  if (*(void *)(a1 + 40))
  {
    if (v56)
    {
      uint64_t v37 = *(void *)(a1 + 40);
      v38.receiver = *(id *)(a1 + 32);
      v38.super_class = (Class)PearlSplashController;
      [super performExtendedInitializationWithCompletion:v37];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  objc_storeStrong(v65, 0);
}

double sub_100128030(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  double result = 2.0542726e-289;
  *(_DWORD *)a1 = 67109888;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 2048;
  *(void *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  return result;
}

BOOL sub_100128584(id a1, UIViewController *a2, NSDictionary *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v5 = 0;
  objc_storeStrong(&v5, a3);
  sub_10012860C();
  objc_opt_class();
  LOBYTE(a3) = objc_opt_isKindOfClass();
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
  return a3 & 1;
}

id sub_10012860C()
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321CE8;
  uint64_t v13 = qword_100321CE8;
  if (!qword_100321CE8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10012898C;
    id v6 = &unk_1002B1248;
    BOOL v7 = &v9;
    sub_10012898C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10012898C(NSAssertionHandler *a1)
{
  sub_100128AD0();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("BKUIPeriocularEnableSplashViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getBKUIPeriocularEnableSplashViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"PearlSplashController.m", 24, @"Unable to find class %s", "BKUIPeriocularEnableSplashViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321CE8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100128AD0()
{
  if (!sub_100128C00())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *BiometricKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"PearlSplashController.m", 23, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100128C00()
{
  if (!qword_100321CF0) {
    sub_100128CB8();
  }
  return qword_100321CF0;
}

uint64_t sub_100128CB8()
{
  uint64_t result = _sl_dlopen();
  qword_100321CF0 = result;
  return result;
}

void sub_100128EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v13 = a4;
  uint64_t v12 = a5;
  id v5 = &_dispatch_main_q;
  id v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  uint64_t v9 = sub_100129798;
  BOOL v10 = &unk_1002B1280;
  uint64_t v11 = v15;
  dispatch_async((dispatch_queue_t)v5, &v6);
}

void sub_1001293C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  uint64_t v13 = a4;
  uint64_t v12 = a5;
  id v5 = &_dispatch_main_q;
  id v6 = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  uint64_t v9 = sub_1001297C4;
  BOOL v10 = &unk_1002B1280;
  uint64_t v11 = v15;
  dispatch_async((dispatch_queue_t)v5, &v6);
}

id sub_100129798(uint64_t a1)
{
  return [*(id *)(a1 + 32) languageDidChange:a1, a1];
}

id sub_1001297C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) localeDidChange:a1, a1];
}

void sub_100129A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100129A94(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v15[1] = (id)a1;
  v15[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (v15[0])
  {
    [v15[0] setEnabled:0];
    id v14 = +[BuddyAppleIDAuthManager managerWithNavigationController:*(void *)(a1 + 32) passcodeCacheManager:*(void *)(a1 + 40)];
    char v13 = 0;
    char v3 = 0;
    if (*(_DWORD *)(a1 + 56) == 8) {
      char v3 = +[DMCFeatureOverrides allowAnyMAIDToSignIn] ^ 1;
    }
    char v13 = v3 & 1;
    id v4 = location[0];
    char v5 = v3 & 1;
    id v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    uint64_t v9 = sub_100129C2C;
    BOOL v10 = &unk_1002B3620;
    id v11 = v15[0];
    id v12 = location[0];
    [v14 fetchAuthModeForUsername:v4 requiresAppleMAID:v5 & 1 completion:&v6];
    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v14, 0);
  }
  objc_storeStrong(v15, 0);
  objc_storeStrong(location, 0);
}

void sub_100129C2C(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  [*(id *)(a1 + 32) setEnabled:1 a1];
  if (v6 == 2)
  {
    id v4 = [*(id *)(a1 + 32) handler];
    (*((void (**)(id, void, void))v4 + 2))(v4, *(void *)(a1 + 40), 0);
  }
  else
  {
    [*(id *)(a1 + 32) setShowsPasswordAsField:1 animated:1];
  }
  objc_storeStrong(&location, 0);
}

void sub_100129F04(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v13 = a1;
  BOOL v12 = 0;
  id v2 = +[AKURLBag sharedBag];
  BOOL v3 = 0;
  if ([v2 isPhoneNumberSupportedConfig]) {
    BOOL v3 = *(_DWORD *)(a1 + 40) != 8;
  }

  BOOL v12 = v3;
  if (v3)
  {
    id v4 = &_dispatch_main_q;
    char v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    int v8 = sub_10012A03C;
    uint64_t v9 = &unk_1002B1130;
    id v10 = *(id *)(a1 + 32);
    BOOL v11 = v12;
    dispatch_async((dispatch_queue_t)v4, &v5);

    objc_storeStrong(&v10, 0);
  }
}

void sub_10012A03C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 44) = *(unsigned char *)(a1 + 40) & 1;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 44))
  {
    id v1 = [*(id *)(*(void *)(a1 + 32) + 8) editableTextField:a1, a1];
    id v2 = +[NSBundle bundleForClass:objc_opt_class()];
    BOOL v3 = [(NSBundle *)v2 localizedStringForKey:@"SIGN_IN_EMAIL_OR_PHONE" value:&stru_1002B4E18 table:@"AppleIDAuth"];
    [v1 setPlaceholder:v3];
  }
}

void sub_10012BDC0(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = +[NSBundle bundleForClass:objc_opt_class()];
  BOOL v3 = [(NSBundle *)v2 localizedStringForKey:@"ICLOUD_UPGRADE_SKIP_TITLE" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  id v4 = +[NSBundle bundleForClass:objc_opt_class()];
  char v5 = v4;
  if (*(unsigned char *)(a1 + 40)) {
    CFStringRef v6 = @"ICLOUD_UPGRADE_SKIP_BODY";
  }
  else {
    CFStringRef v6 = @"STORE_ACCOUNT_UPGRADE_SKIP_BODY";
  }
  int v7 = [(NSBundle *)v4 localizedStringForKey:v6 value:&stru_1002B4E18 table:@"AppleIDAuth"];
  location[0] = +[UIAlertController alertControllerWithTitle:v3 message:v7 preferredStyle:1];

  int v8 = +[NSBundle bundleForClass:objc_opt_class()];
  uint64_t v9 = v8;
  if (*(unsigned char *)(a1 + 40)) {
    CFStringRef v10 = @"DONT_SKIP_ALERT_BUTTON";
  }
  else {
    CFStringRef v10 = @"CANCEL";
  }
  BOOL v11 = [(NSBundle *)v8 localizedStringForKey:v10 value:&stru_1002B4E18 table:@"AppleIDAuth"];
  BOOL v12 = +[UIAlertAction actionWithTitle:v11 style:1 handler:0];
  [location[0] addAction:v12];

  id v13 = location[0];
  uint64_t v14 = +[NSBundle bundleForClass:objc_opt_class()];
  uint64_t v15 = [(NSBundle *)v14 localizedStringForKey:@"SKIP_ALERT_BUTTON" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  char v18 = _NSConcreteStackBlock;
  int v19 = -1073741824;
  int v20 = 0;
  int v21 = sub_10012C0F8;
  id v22 = &unk_1002B13E0;
  objc_copyWeak(&v23, (id *)(a1 + 32));
  uint64_t v16 = +[UIAlertAction actionWithTitle:v15 style:0 handler:&v18];
  [v13 addAction:v16];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained presentViewController:location[0] animated:1 completion:0];

  objc_destroyWeak(&v23);
  objc_storeStrong(location, 0);
}

void sub_10012C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10012C0F8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  if (v3[0] && *((void *)v3[0] + 7)) {
    (*(void (**)(void))(*((void *)v3[0] + 7) + 16))();
  }
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

void sub_10012C1A8(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = +[NSBundle bundleForClass:objc_opt_class()];
  BOOL v3 = [(NSBundle *)v2 localizedStringForKey:@"ICLOUD_UPGRADE_SKIP_TITLE" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  id v4 = +[NSBundle bundleForClass:objc_opt_class()];
  char v5 = [(NSBundle *)v4 localizedStringForKey:@"ICLOUD_UPGRADE_SKIP_BODY" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  location[0] = +[UIAlertController alertControllerWithTitle:v3 message:v5 preferredStyle:1];

  CFStringRef v6 = +[NSBundle bundleForClass:objc_opt_class()];
  int v7 = [(NSBundle *)v6 localizedStringForKey:@"DONT_SKIP_ALERT_BUTTON" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  int v8 = +[UIAlertAction actionWithTitle:v7 style:1 handler:0];
  [location[0] addAction:v8];

  id v9 = location[0];
  CFStringRef v10 = +[NSBundle bundleForClass:objc_opt_class()];
  BOOL v11 = [(NSBundle *)v10 localizedStringForKey:@"SKIP_ALERT_BUTTON" value:&stru_1002B4E18 table:@"AppleIDAuth"];
  uint64_t v14 = _NSConcreteStackBlock;
  int v15 = -1073741824;
  int v16 = 0;
  char v17 = sub_10012C4B8;
  char v18 = &unk_1002B13E0;
  objc_copyWeak(&v19, a1 + 4);
  BOOL v12 = +[UIAlertAction actionWithTitle:v11 style:0 handler:&v14];
  [v9 addAction:v12];

  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  [WeakRetained presentViewController:location[0] animated:1 completion:0];

  objc_destroyWeak(&v19);
  objc_storeStrong(location, 0);
}

void sub_10012C48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10012C4B8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  if (v3[0] && *((void *)v3[0] + 7)) {
    (*(void (**)(void))(*((void *)v3[0] + 7) + 16))();
  }
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_10012CF30()
{
  predicate = (dispatch_once_t *)&unk_100321D00;
  dispatch_block_t block = 0;
  objc_storeStrong(&block, &stru_1002B36F8);
  if (*predicate != -1) {
    dispatch_once(predicate, block);
  }
  objc_storeStrong(&block, 0);
  return byte_100321CF8 & 1;
}

uint64_t sub_10012DA04()
{
  predicate = (dispatch_once_t *)&unk_100321D08;
  dispatch_block_t block = 0;
  objc_storeStrong(&block, &stru_1002B3718);
  if (*predicate != -1) {
    dispatch_once(predicate, block);
  }
  objc_storeStrong(&block, 0);
  return byte_100321CF9 & 1;
}

void sub_10012E6F4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) editableTextField:a1, a1];
  [v2 resignFirstResponder];

  BOOL v3 = (void (**)(id, id, id))[*(id *)(a1 + 32) handler];
  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 username];
  id v6 = [v4 _serverFriendlyDisplayNameForCurrentUserName:v5];
  id v7 = [*(id *)(*(void *)(a1 + 32) + 16) editableTextField];
  id v8 = [v7 text];
  v3[2](v3, v6, v8);
}

void sub_10012F444(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) tableView:a1];
  [v2 insertRowsAtIndexPaths:*(void *)(a1 + 40) withRowAnimation:3];

  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) editableTextField];
  [v3 becomeFirstResponder];
}

void sub_10012F4D8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) continueButton];
  [v1 setEnabled:0];
}

void sub_10012F530(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) tableView:a1];
  [v2 layoutIfNeeded];

  id v3 = [*(id *)(a1 + 32) tableView];
  [v3 deleteRowsAtIndexPaths:*(void *)(a1 + 40) withRowAnimation:*(void *)(a1 + 48)];
}

void sub_100130218(id a1)
{
  id v1 = +[UIDevice currentDevice];
  byte_100321CF8 = [(UIDevice *)v1 userInterfaceIdiom] == UIUserInterfaceIdiomPhone;
}

void sub_100130288(id a1)
{
  id v1 = +[UIDevice currentDevice];
  byte_100321CF9 = (id)[(UIDevice *)v1 userInterfaceIdiom] == (id)1;
}

void sub_10013055C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v5 = 0;
  objc_storeStrong(&v5, a3);
  [a1[4] _updateFillColor:a1];
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

double sub_100131864(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(void *)&double result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 2114;
  *(void *)(a1 + 16) = a4;
  return result;
}

id sub_1001338D0()
{
  uint64_t v9 = 0;
  CFStringRef v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D10;
  uint64_t v13 = qword_100321D10;
  if (!qword_100321D10)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100134EDC;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100134EDC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001339E8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  int v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100133AF8;
  uint64_t v8 = &unk_1002B12F0;
  id v9 = a1[4];
  v10[0] = location[0];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_100133AF8(uint64_t a1)
{
  NSAssertionHandler v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(void *)(a1 + 40) != 0, a1);
  [*(id *)(a1 + 32) setReadyForPresentation:v2];

  id v3 = [*(id *)(a1 + 32) viewControllerAvailableBlock];
  if (v3)
  {
    int v4 = (void (**)(id, id))[*(id *)(a1 + 32) viewControllerAvailableBlock];
    id v5 = [*(id *)(a1 + 32) parentViewController];
    v4[2](v4, v5);

    [*(id *)(a1 + 32) setViewControllerAvailableBlock:0];
  }
}

void sub_100133E60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) readyForPresentation:a1, a1];

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = [*(id *)(a1 + 32) parentViewController];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
  else
  {
    [*(id *)(a1 + 32) setViewControllerAvailableBlock:*(void *)(a1 + 40)];
  }
}

id sub_10013400C(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "hasAccountType", a1, a1)) {
    return (id)(*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [*(id *)(a1 + 32) accountType]);
  }
  else {
    return [*(id *)(a1 + 32) setAccountTypeSelectedBlock:*(void *)(a1 + 40)];
  }
}

id sub_100134800(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) hasAccountType:a1 a1];
  if ((result & 1) == 0) {
    return [*(id *)(a1 + 32) _accountTypeSelected:[*(id *)(a1 + 40) accountType]];
  }
  return result;
}

id sub_1001349B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accountTypeSelected:*(void *)(a1 + 40) a1 a1];
}

id sub_100134B4C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (([(objc_class *)a1[4].isa hasAccountType] & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v2 = oslog[0];
      os_log_type_t v3 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Forcing account type selection due to loss of proximity connection", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa _accountTypeSelected:2];
  }
  return [(objc_class *)a1[4].isa setDelegate:0];
}

void sub_100134EDC(NSAssertionHandler *a1)
{
  sub_100135020();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PASUIDependentViewPresenter");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getPASUIDependentViewPresenterClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyProximitySetupDependentController.m", 21, @"Unable to find class %s", "PASUIDependentViewPresenter" file lineNumber description];

    __break(1u);
  }
  qword_100321D10 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100135020()
{
  if (!sub_100135150())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *ProximityAppleIDSetupUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyProximitySetupDependentController.m", 20, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100135150()
{
  if (!qword_100321D18) {
    sub_100135208();
  }
  return qword_100321D18;
}

uint64_t sub_100135208()
{
  uint64_t result = _sl_dlopen();
  qword_100321D18 = result;
  return result;
}

void sub_10013653C(NSObject *a1, char a2, id obj)
{
  id v19 = a1;
  char v18 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        id v4 = (NSString *)location;
      }
      else if (location)
      {
        id v14 = [location domain];
        char v13 = 1;
        id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [location code]);
        id v12 = v4;
        char v11 = 1;
      }
      else
      {
        id v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Failed to determine new user disposition: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa setupMethod];
    id v6 = [v5 intent];

    BOOL v10 = v6 == (id)2;
    id v7 = objc_alloc((Class)BYSetupUserDisposition);
    id v9 = [v7 initWithNewUser:v18 & 1 child:v6 == (id)2];
    id v8 = [(objc_class *)a1[4].isa buddyPreferencesExcludedFromBackup];
    [v9 persistUsingPreferences:v8];

    objc_storeStrong(&v9, 0);
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

uint64_t sub_100137D48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
}

void sub_1001380D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001380F0(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] finishedController];
  [v1 setDelegate:0];

  id v2 = [location[0] delegate];
  id v3 = [location[0] appStoreController];
  [v3 setDelegate:v2];

  objc_storeStrong(location, 0);
}

void sub_100139388(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa managedConfiguration];
  [v2 setupAssistantDidFinish];

  id v3 = [(objc_class *)a1[4].isa mdmReturnToServiceController];
  [v3 returnToServiceFlowCompleted];

  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v4 = oslog[0];
    os_log_type_t v5 = v14;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configuring Login Window...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id location = +[DMCMultiUserModeUtilities configureToSharedDeviceWithPreferenceDomain:kMDMNotBackedUpPreferencesDomain];
  if (location)
  {
    os_log_t v11 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      char v9 = 0;
      char v7 = 0;
      if (_BYIsInternalInstall())
      {
        id v6 = (NSString *)location;
      }
      else
      {
        id v10 = [location domain];
        char v9 = 1;
        id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v10, [location code]);
        id v8 = v6;
        char v7 = 1;
      }
      sub_10004BB7C((uint64_t)v16, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Switch to Login Window failed: %{public}@", v16, 0xCu);
      if (v7) {

      }
      if (v9) {
    }
      }
    objc_storeStrong((id *)&v11, 0);
    [(objc_class *)a1[4].isa _showConfigurationFailedForError:location];
  }
  objc_storeStrong(&location, 0);
}

void sub_100139738(id *a1)
{
  v18[2] = a1;
  v18[1] = a1;
  v18[0] = 0;
  if (CPIsInternalDevice())
  {
    id v2 = [a1[4] localizedDescription];
    id v3 = +[NSString stringWithFormat:@"Internal message: %@", v2];
    id v4 = v18[0];
    v18[0] = v3;
  }
  os_log_type_t v5 = +[NSBundle mainBundle];
  id v6 = [(NSBundle *)v5 localizedStringForKey:@"MULTI_USER_CONFIG_FAILED" value:&stru_1002B4E18 table:@"Localizable"];
  id location = +[UIAlertController alertControllerWithTitle:v6 message:v18[0] preferredStyle:1];

  id v7 = location;
  id v8 = +[NSBundle mainBundle];
  char v9 = [(NSBundle *)v8 localizedStringForKey:@"OK" value:&stru_1002B4E18 table:@"Localizable"];
  os_log_t v11 = _NSConcreteStackBlock;
  int v12 = -1073741824;
  int v13 = 0;
  os_log_type_t v14 = sub_1001399A0;
  os_log_type_t v15 = &unk_1002B1040;
  id v16 = a1[5];
  id v10 = +[UIAlertAction actionWithTitle:v9 style:0 handler:&v11];
  [v7 addAction:v10];

  [a1[5] presentViewController:location animated:1 completion:0];
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v18, 0);
}

void sub_1001399A0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] navigationController];
  id v4 = [v3 popViewControllerAnimated:1];

  objc_storeStrong(location, 0);
}

id sub_10013A0A4()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D20;
  uint64_t v13 = qword_100321D20;
  if (!qword_100321D20)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10013B434;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10013B434(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10013A1BC(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v13 = 0;
  objc_storeStrong(&v13, a3);
  oslog[1] = a1;
  if (v13)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)v13);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v11, "Failed to request diagnostics view controller: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    int v10 = 1;
  }
  else
  {
    sub_10013A0A4();
    if (objc_opt_isKindOfClass())
    {
      [(objc_class *)a1[4].isa setDiagnosticsRemoteController:location[0]];
      Class isa = a1[4].isa;
      id v6 = [(objc_class *)isa diagnosticsRemoteController];
      [v6 setDelegate:isa];

      Class v7 = a1[4].isa;
      id v8 = [(objc_class *)v7 diagnosticsRemoteController];
      [(objc_class *)v7 presentViewController:v8 animated:1 completion:0];
    }
    else
    {
      os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        sub_10004B238((uint64_t)v15, (uint64_t)location[0]);
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unexpected diagnostics view controller type: %@", v15, 0xCu);
      }
      objc_storeStrong((id *)&v9, 0);
    }
    int v10 = 0;
  }
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_10013A684(id *a1)
{
  v43[2] = a1;
  v43[1] = a1;
  sub_10013AAE0();
  v43[0] = [objc_alloc((Class)NSXPCConnection) initWithServiceName:@"com.apple.DiagnosticsSessionAvailibility"];
  NSAssertionHandler v2 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___DADiagnosticsSessionAvailabilityProtocol];
  [v43[0] setRemoteObjectInterface:v2];

  id location = dispatch_semaphore_create(0);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  void v40[2] = sub_10013AC10;
  v40[3] = &unk_1002B0D20;
  id v41 = location;
  [v43[0] setInterruptionHandler:v40];
  id v3 = v43[0];
  CFStringRef v34 = _NSConcreteStackBlock;
  int v35 = -1073741824;
  int v36 = 0;
  uint64_t v37 = sub_10013ACBC;
  objc_super v38 = &unk_1002B0D20;
  id v39 = location;
  [v3 setInvalidationHandler:&v34];
  [v43[0] resume];
  uint64_t v29 = 0;
  char v30 = &v29;
  int v31 = 0x20000000;
  int v32 = 32;
  char v33 = 0;
  id v4 = [v43[0] remoteObjectProxy];
  id v22 = _NSConcreteStackBlock;
  int v23 = -1073741824;
  int v24 = 0;
  id v25 = sub_10013AD68;
  BOOL v26 = &unk_1002B3818;
  id v27 = v43[0];
  v28[1] = &v29;
  v28[0] = location;
  [v4 checkAvailabilityWithTicketNumber:0 response:&v22];

  os_log_type_t v5 = location;
  dispatch_time_t v6 = dispatch_time(0, 3000000000);
  if (dispatch_semaphore_wait(v5, v6) != 0)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      Class v7 = oslog;
      os_log_type_t v8 = v19;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Timed out checking retail diagnostics availability", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  id v9 = +[BYPreferencesController buddyPreferencesInternal];
  unsigned __int8 v10 = [v9 BOOLForKey:@"ForceShowDiagnostics"];

  if (v10) {
    *((unsigned char *)v30 + 24) = 1;
  }
  if (a1[4])
  {
    os_log_type_t v11 = &_dispatch_main_q;
    int v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    os_log_type_t v15 = sub_10013AE88;
    id v16 = &unk_1002B1D98;
    v17[0] = a1[4];
    v17[1] = &v29;
    dispatch_async((dispatch_queue_t)v11, &v12);

    objc_storeStrong(v17, 0);
  }
  objc_storeStrong(v28, 0);
  objc_storeStrong(&v27, 0);
  _Block_object_dispose(&v29, 8);
  objc_storeStrong(&v39, 0);
  objc_storeStrong(&v41, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v43, 0);
}

void sub_10013AAE0()
{
  if (!sub_10013B578())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *iOSDiagnosticsLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"RetailDiagnosticsController.m", 30, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

intptr_t sub_10013AC10(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    NSAssertionHandler v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retail Diagnostics connection interrupted", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10013ACBC(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    NSAssertionHandler v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retail Diagnostics connection invalidated", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10013AD68(uint64_t a1, char a2)
{
  uint64_t v7 = a1;
  char v6 = a2;
  oslog[1] = (os_log_t)a1;
  [*(id *)(a1 + 32) invalidate];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v6 & 1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      CFStringRef v3 = @"YASE";
    }
    else {
      CFStringRef v3 = @"NERP";
    }
    sub_10004B238((uint64_t)buf, (uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "RetailDiagnostics available: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_10013AE88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 1);
}

void sub_10013B29C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_10013B434(NSAssertionHandler *a1)
{
  sub_10013AAE0();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("DADiagnosticsRemoteHostViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getDADiagnosticsRemoteHostViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"RetailDiagnosticsController.m", 31, @"Unable to find class %s", "DADiagnosticsRemoteHostViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321D20 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10013B578()
{
  if (!qword_100321D28) {
    sub_10013B630();
  }
  return qword_100321D28;
}

uint64_t sub_10013B630()
{
  uint64_t result = _sl_dlopen();
  qword_100321D28 = result;
  return result;
}

double sub_10013CE6C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 136446210;
  *(_DWORD *)a1 = 136446210;
  *(void *)(a1 + 4) = a2;
  return result;
}

void sub_10013E6E8(id a1, NSDictionary *a2, id a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    id v5 = objc_retainBlock(v7);
    sub_10004B238((uint64_t)buf, (uint64_t)v5);
    _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEBUG, "BuddyAppleIDSignInTask proximityAIDAHandler called, invoking completion: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  if (v7) {
    (*((void (**)(void))v7 + 2))();
  }
  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_10013EDB0(id *a1)
{
  void v19[2] = a1;
  v19[1] = a1;
  v19[0] = objc_alloc_init((Class)ACAccountStore);
  id v18 = [objc_alloc((Class)AIDAServiceOwnersManager) initWithAccountStore:v19[0]];
  id v17 = [a1[4] _createServiceContextWithAuthenticationResults:a1[5]];
  id v2 = [v17 signInContexts];
  id v16 = [v2 mutableCopy];

  id location = [v16 objectForKeyedSubscript:AIDAServiceTypeStore];
  [location setCanMakeAccountActive:[a1[4] makeStoreServiceActive] & 1];
  id v3 = [a1[4] flowControllerDelegate];
  [v3 setBackgroundDataclassEnablement:1];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = oslog;
    os_log_type_t v5 = v13;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching IDS registration state...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v7 = a1[4];
  id v8 = v17;
  id v9 = v18;
  id v10 = a1[5];
  id v11 = a1[6];
  char v6 = &_dispatch_main_q;
  IDSRegistrationControlGetStateForRegistrationType();

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v7, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(v19, 0);
}

void sub_10013F090(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v42 = a1;
  uint64_t v41 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v39 = a1;
  BOOL v38 = v41 != 1;
  if (v41 == 1)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = oslog;
      os_log_type_t v10 = v24;
      sub_10004B24C(v23);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "IDS registration is disabled; not signing in iMessage or FaceTime...",
        v23,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v43[0] = AIDAServiceTypeCloud;
    v43[1] = AIDAServiceTypeStore;
    v43[2] = AIDAServiceTypeGameCenter;
    id v22 = +[NSArray arrayWithObjects:v43 count:3];
    id v11 = *(void **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    os_log_type_t v13 = _NSConcreteStackBlock;
    int v14 = -1073741824;
    int v15 = 0;
    id v16 = sub_10013F52C;
    id v17 = &unk_1002B38C0;
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    [v11 signInToServices:v22 usingContext:v12 completion:&v13];
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v22, 0);
  }
  else
  {
    id v37 = (id)_BYLoggingFacility();
    os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v37, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v37;
      os_log_type_t v5 = v36;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "IDS registration is enabled; continuing to sign in all services...",
        buf,
        2u);
    }
    objc_storeStrong(&v37, 0);
    char v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    BOOL v26 = _NSConcreteStackBlock;
    int v27 = -1073741824;
    int v28 = 0;
    uint64_t v29 = sub_10013F474;
    char v30 = &unk_1002B3898;
    id v31 = *(id *)(a1 + 56);
    id v32 = *(id *)(a1 + 32);
    id v33 = *(id *)(a1 + 48);
    id v34 = *(id *)(a1 + 64);
    [v6 _signInToAllServicesUsingContext:v7 serviceOwnersManager:v8 completion:&v26];
    objc_storeStrong(&v34, 0);
    objc_storeStrong(&v33, 0);
    objc_storeStrong(&v32, 0);
    objc_storeStrong(&v31, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_10013F474(uint64_t a1, char a2, id obj)
{
  uint64_t v8 = a1;
  char v7 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v5 = a1;
  if (v7)
  {
    id v4 = +[BFFAppleAccountInfo primaryAccountInfo];
    [v4 updateWithAuthenticationResults:*(void *)(a1 + 32)];
  }
  [*(id *)(a1 + 40) _updateAgreedTerms:*(void *)(a1 + 48) v5];
  if (*(void *)(a1 + 56)) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_10013F52C(uint64_t a1, char a2, id obj)
{
  uint64_t v11 = a1;
  char v10 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v8[1] = (id)a1;
  if (v10)
  {
    id v4 = +[BFFAppleAccountInfo primaryAccountInfo];
    [v4 updateWithAuthenticationResults:*(void *)(a1 + 32)];
  }
  [*(id *)(a1 + 40) _updateAgreedTerms:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 56))
  {
    v8[0] = [location objectForKeyedSubscript:AIDAServiceTypeCloud];
    uint64_t v5 = *(void *)(a1 + 56);
    unsigned __int8 v6 = [v8[0] success];
    id v7 = [v8[0] error];
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, v6 & 1, v7);

    objc_storeStrong(v8, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_10013F7BC(uint64_t a1)
{
  id v17[2] = (id)a1;
  v17[1] = (id)a1;
  v17[0] = objc_alloc_init((Class)ACAccountStore);
  id v16 = [objc_alloc((Class)AIDAServiceOwnersManager) initWithAccountStore:v17[0]];
  id v15 = [*(id *)(a1 + 32) _createServiceContextWithAuthenticationResults:*(void *)(a1 + 40)];
  id v2 = [v15 signInContexts];
  id location = [v2 objectForKeyedSubscript:AIDAServiceTypeStore];

  objc_msgSend(location, "setCanMakeAccountActive:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "makeStoreServiceActive") & 1);
  LOBYTE(v2) = [*(id *)(a1 + 32) skipDataclassEnablement];
  id v3 = [*(id *)(a1 + 32) flowControllerDelegate];
  [v3 setSkipDataclassEnablement:v2 & 1];

  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_10013F9F8;
  id v9 = &unk_1002B38C0;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v16;
  id v13 = *(id *)(a1 + 56);
  [v16 signInToServices:v4 usingContext:v15 completion:&v5];
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(v17, 0);
}

void sub_10013F9F8(uint64_t a1, char a2, id obj)
{
  uint64_t v8 = a1;
  char v7 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v5 = a1;
  if (v7)
  {
    id v4 = +[BFFAppleAccountInfo primaryAccountInfo];
    [v4 updateWithAuthenticationResults:*(void *)(a1 + 32)];
  }
  [*(id *)(a1 + 40) _updateAgreedTerms:*(void *)(a1 + 48) v5];
  if (*(void *)(a1 + 56)) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100140948(void *a1, char a2, id obj)
{
  id v10 = a1;
  char v9 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v7[1] = a1;
  v7[0] = [location objectForKeyedSubscript:AIDAServiceTypeCloud];
  uint64_t v4 = a1[4];
  unsigned __int8 v5 = [v7[0] success];
  id v6 = [v7[0] error];
  (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, v5 & 1, v6);

  objc_storeStrong(v7, 0);
  objc_storeStrong(&location, 0);
}

id sub_100141544(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancelMigration:a1, a1];
}

id sub_1001417CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) lockscreenController:a1:a1];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) lockscreenController];
    [v3 deviceMigrationManager:*(void *)(a1 + 40) didChangeConnectionInformation:*(void *)(a1 + 48)];
  }
  else
  {
    [*(id *)(a1 + 32) setManager:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setConnectionInfo:*(void *)(a1 + 48)];
  }
  if ([*(id *)(a1 + 48) connectionType] == (id)1)
  {
    id v4 = [*(id *)(a1 + 32) headerView];
    unsigned __int8 v5 = +[NSBundle mainBundle];
    id v6 = +[UIDevice modelSpecificLocalizedStringKeyForKey:@"PROGRESS_DETAIL_WIRED"];
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) headerView];
    unsigned __int8 v5 = +[NSBundle mainBundle];
    id v6 = +[UIDevice modelSpecificLocalizedStringKeyForKey:@"PROGRESS_DETAIL_WIRELESS"];
  }
  char v7 = [(NSBundle *)v5 localizedStringForKey:v6 value:&stru_1002B4E18 table:@"Migration"];
  [v4 setDetailText:v7];

  return [*(id *)(a1 + 32) setDeviceConnectionInformation:*(void *)(a1 + 48)];
}

void sub_100141A00(id *a1)
{
  id v11[2] = a1;
  v11[1] = a1;
  id v2 = [a1[4] connectionState];
  if (v2 != [a1[5] connectionState])
  {
    id v3 = [a1[5] disconnectionQueue];
    dispatch_suspend(v3);

    [a1[5] setConnectionState:[a1[4] connectionState]];
    id v4 = &_dispatch_main_q;
    unsigned __int8 v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    uint64_t v8 = sub_100141B50;
    char v9 = &unk_1002B12F0;
    id v10 = a1[5];
    v11[0] = a1[4];
    dispatch_sync((dispatch_queue_t)v4, &v5);

    objc_storeStrong(v11, 0);
    objc_storeStrong(&v10, 0);
  }
}

void sub_100141B50(id *a1)
{
  id v32[2] = a1;
  v32[1] = a1;
  id v2 = [a1[4] presentedViewController];
  [v2 dismissViewControllerAnimated:1 completion:0];

  id v3 = [a1[5] connectionState];
  if (!v3) {
    goto LABEL_8;
  }
  if (v3 != (id)1)
  {
    if (v3 != (id)2) {
      return;
    }
LABEL_8:
    id v10 = [BuddyMigrationDisconnectController alloc];
    id v11 = [a1[5] connectionType];
    id v21 = _NSConcreteStackBlock;
    int v22 = -1073741824;
    int v23 = 0;
    os_log_type_t v24 = sub_100141EE0;
    id v25 = &unk_1002B0D20;
    id v26 = a1[4];
    id v12 = [(BuddyMigrationDisconnectController *)v10 initWithConnectionType:v11 cancel:&v21];
    [a1[4] setDisconnectController:v12];

    id v13 = [a1[4] navigationController];
    id v14 = [a1[4] disconnectController];
    id v15 = _NSConcreteStackBlock;
    int v16 = -1073741824;
    int v17 = 0;
    id v18 = sub_100141F14;
    id v19 = &unk_1002B0D20;
    id v20 = a1[4];
    [v13 pushViewController:v14 completion:&v15];

    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v26, 0);
    return;
  }
  id v4 = [a1[4] navigationController];
  id v5 = [v4 topViewController];
  id v6 = [a1[4] disconnectController];

  if (v5 == v6)
  {
    [a1[4] setDisconnectController:0];
    id v7 = [a1[4] navigationController];
    id v8 = a1[4];
    int v27 = _NSConcreteStackBlock;
    int v28 = -1073741824;
    int v29 = 0;
    char v30 = sub_100141E90;
    id v31 = &unk_1002B0D20;
    v32[0] = a1[4];
    [v7 popToViewController:v8 completion:&v27];

    objc_storeStrong(v32, 0);
  }
  else
  {
    char v9 = [a1[4] disconnectionQueue];
    dispatch_resume(v9);
  }
}

void sub_100141E90(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) disconnectionQueue:a1, a1];
  dispatch_resume(v1);
}

id sub_100141EE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelTapped:*(void *)(a1 + 32) a1 a1];
}

void sub_100141F14(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) disconnectionQueue:a1, a1];
  dispatch_resume(v1);
}

id sub_1001420C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDeviceTransferProgress:*(void *)(a1 + 40) a1, a1];
}

void sub_1001430C0(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v30 = a1;
  id v2 = +[BuddyActivationConfiguration currentConfiguration];
  unsigned __int8 v3 = [v2 isActivated];

  char v29 = v3 & 1;
  char v28 = 0;
  char v26 = 0;
  unsigned __int8 v4 = 1;
  if ((v3 & 1) == 0)
  {
    unsigned __int8 v4 = 1;
    if ((BYSetupAssistantHasCompletedInitialRun() & 1) == 0)
    {
      id v27 = +[BYSetupStateManager sharedManager];
      char v26 = 1;
      unsigned __int8 v4 = [v27 didRestoreFromBackup];
    }
  }
  if (v26) {

  }
  char v28 = v4 & 1;
  if (v4)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = oslog;
      os_log_type_t v6 = v24;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Device is considered having been set up; not starting inactivity timer...",
        buf,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    id v7 = +[NSDate date];
    id location = +[NSDate dateWithTimeInterval:v7 sinceDate:43200.0];

    id v8 = +[BYPreferencesController buddyPreferencesInternal];
    LOBYTE(v7) = [v8 BOOLForKey:@"TestInactivityShutdown"];

    if (v7)
    {
      char v9 = +[NSDate date];
      id v10 = +[NSDate dateWithTimeInterval:v9 sinceDate:30.0];
      id v11 = location;
      id location = v10;
    }
    os_log_t v21 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BB7C((uint64_t)v32, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Starting inactivity timer to fire at %{public}@...", v32, 0xCu);
    }
    objc_storeStrong((id *)&v21, 0);
    id v12 = &_dispatch_main_q;
    dispatch_block_t block = _NSConcreteStackBlock;
    int v14 = -1073741824;
    int v15 = 0;
    int v16 = sub_100143468;
    int v17 = &unk_1002B12F0;
    id v18 = *(id *)(a1 + 32);
    id v19 = location;
    dispatch_async((dispatch_queue_t)v12, &block);

    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&location, 0);
  }
}

void sub_100143468(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PCPersistentTimer) initWithFireDate:*(void *)(a1 + 40) serviceIdentifier:@"com.apple.purplebuddy.inactivitytimer" target:*(void *)(a1 + 32) selector:@"_timerFired:" userInfo:0 a1, a1];
  [*(id *)(a1 + 32) setTimer:v2];

  id v3 = [*(id *)(a1 + 32) timer];
  [v3 setMinimumEarlyFireProportion:1.0];

  id v4 = [*(id *)(a1 + 32) timer];
  id v5 = +[NSRunLoop mainRunLoop];
  [v4 scheduleInRunLoop:v5];
}

void sub_1001436E0(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v20 = 0;
  objc_storeStrong(&v20, a3);
  oslog[1] = a1;
  if (v20)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)v20);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v18, "Failed to retrieve activation lock information: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    int v17 = 1;
  }
  else
  {
    if ([location[0] isActivationLocked])
    {
      os_log_t v16 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = v16;
        os_log_type_t v6 = v15;
        sub_10004B24C(v14);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Device is activation locked; not shutting down device",
          v14,
          2u);
      }
      objc_storeStrong((id *)&v16, 0);
    }
    else
    {
      os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = v13;
        os_log_type_t v8 = v12;
        sub_10004B24C(v11);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Shutting down device...", (uint8_t *)v11, 2u);
      }
      objc_storeStrong((id *)&v13, 0);
      [(objc_class *)a1[4].isa _removePowerLog];
      [(objc_class *)a1[4].isa _enableShelfLifeMode];
      id v9 = +[FBSSystemService sharedService];
      id v10 = [objc_alloc((Class)FBSShutdownOptions) initWithReason:@"Setup Assistant Inactivity"];
      [v9 shutdownWithOptions:v10];
    }
    int v17 = 0;
  }
  objc_storeStrong(&v20, 0);
  objc_storeStrong(location, 0);
}

void sub_100144358(uint64_t a1, char a2)
{
  uint64_t v30 = a1;
  char v29 = a2;
  uint64_t v28 = a1;
  unsigned __int8 v27 = 0;
  unsigned __int8 v27 = [*(id *)(a1 + 32) isAbleToBackupBeforeRestore] & 1;
  if (v27)
  {
    id v3 = [*(id *)(a1 + 32) backupDeviceController];
    id v4 = [*(id *)(a1 + 32) deviceName];
    id v5 = [*(id *)(a1 + 32) backupItem];
    id v6 = [v5 backup];
    id v7 = [v6 backupUUID];
    [v3 startBackupDevice:v4 UUID:v7];
  }
  id v8 = [*(id *)(a1 + 32) backupItem];
  id v9 = [v8 backup];
  id v10 = [*(id *)(a1 + 32) backupItem];
  id v11 = [v10 snapshot];
  id v26 = +[RestorableBackupItem restorableBackupItemWithBackup:v9 snapshot:v11];

  id v12 = [*(id *)(a1 + 32) pendingRestoreState];
  [v12 setBackupItem:v26 updateBackupMetadata:(v27 ^ 1) & 1 prefetchAccounts:1];

  id v13 = [*(id *)(a1 + 32) pendingRestoreState];
  [v13 setAllowCellularNetwork:v29 & 1];

  if (v27)
  {
    id v14 = [*(id *)(a1 + 32) proximitySetupController];
    id location = [v14 backupMetadata];

    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v23, "Using metadata from source device, rather than backup: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v15 = location;
    id v16 = [*(id *)(a1 + 32) existingSettings];
    [v16 setBackupMetadata:v15];

    id v17 = [*(id *)(a1 + 32) pendingRestoreState];
    [v17 setForceSoftwareUpdateRestore:((unint64_t)[*(id *)(a1 + 32) forceSoftwareUpdateRequiredForNewBackup] & 1)];

    objc_storeStrong(&location, 0);
  }
  id v18 = [*(id *)(a1 + 32) buddyPreferences];
  [v18 setObject:&__kCFBooleanTrue forKey:@"RestoreChoice"];

  if (v27)
  {
    id v19 = [*(id *)(a1 + 32) expressRestoreAnalytics];
    [v19 setRestoreChoice:1];
  }
  else
  {
    id v19 = [*(id *)(a1 + 32) expressRestoreAnalytics];
    [v19 setRestoreChoice:2];
  }

  unsigned __int8 v20 = v27;
  id v21 = [*(id *)(a1 + 32) expressRestoreAnalytics];
  [v21 setOfferedBackup:v20 & 1];

  v22.receiver = *(id *)(a1 + 32);
  v22.super_class = (Class)BuddyExpressRestoreController;
  [super continueTapped];
  objc_storeStrong(&v26, 0);
}

void sub_1001448D0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_100144A34(id a1, BYExpressSetupDataProvider *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [location[0] setWillRestoreOrMigrate:1];
  [location[0] setWillRestoreOrReallyMigrate:1];
  objc_storeStrong(location, 0);
}

void sub_100144A9C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_100144C98(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = [*(id *)(a1 + 32) backupItem];
  id v3 = [v2 backupUDID];
  id v4 = [*(id *)(a1 + 32) backupItem];
  [v4 snapshotID];
  location[0] = (id)BYMetadataFromBackup();

  if (location[0])
  {
    id v5 = [BYExpressSetupBackupSource alloc];
    id v6 = [*(id *)(a1 + 32) backupItem];
    id v7 = [(BYExpressSetupBackupSource *)v5 initWithBackupItem:v6 backupMetadata:location[0]];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    objc_storeStrong((id *)&v7, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_100145210(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_100145370(id *a1)
{
  id v9[2] = a1;
  v9[1] = a1;
  id v2 = a1[4];
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  id v6 = sub_10014544C;
  id v7 = &unk_1002B39C8;
  id v8 = a1[4];
  v9[0] = a1[5];
  [v2 _suggestedBackupToRestore:&v3];
  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10014544C(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v39 = 0;
  objc_storeStrong(&v39, a3);
  v38[1] = a1;
  if (location[0])
  {
    v38[0] = (id)_BYLoggingFacility();
    os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v38[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100051470((uint64_t)buf, (uint64_t)v39, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v38[0], v37, "Express restore flow chose restorable item for device name \"%@\": %@", buf, 0x16u);
    }
    objc_storeStrong(v38, 0);
  }
  else
  {
    id v36 = (id)_BYLoggingFacility();
    os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = v36;
      os_log_type_t v6 = v35;
      sub_10004B24C(v34);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Express restore flow didn't find any usable restorables", v34, 2u);
    }
    objc_storeStrong(&v36, 0);
  }
  [a1[4] setDeviceName:v39];
  [a1[4] setBackupItem:location[0]];
  char v33 = 0;
  [a1[4] setAbleToBackupBeforeRestore:((unint64_t)[a1[4] _ableToBackupBeforeRestore:location[0] softwareUpdateRequired:&v33] & 1)];
  char v31 = 0;
  unsigned __int8 v7 = 1;
  if ((v33 & 1) == 0)
  {
    id v32 = +[BYPreferencesController buddyPreferencesInternal];
    char v31 = 1;
    unsigned __int8 v7 = [v32 BOOLForKey:@"RequireSoftwareUpdateForGuideUserToBackup"];
  }
  [a1[4] setForceSoftwareUpdateRequiredForNewBackup:v7 & 1];
  if (v31) {

  }
  id v8 = [a1[4] proximitySetupController];
  char v9 = 0;
  if ([v8 hasConnection]) {
    char v9 = [a1[4] isAbleToBackupBeforeRestore] ^ 1;
  }

  if (v9)
  {
    id v10 = dispatch_get_global_queue(0, 0);
    dispatch_block_t block = _NSConcreteStackBlock;
    int v26 = -1073741824;
    int v27 = 0;
    uint64_t v28 = sub_1001458D8;
    char v29 = &unk_1002B0D20;
    id v30 = a1[4];
    dispatch_async(v10, &block);

    objc_storeStrong(&v30, 0);
  }
  id v11 = objc_alloc((Class)BYAnalyticsExpressRestore);
  id v12 = [a1[4] analyticsManager];
  id v13 = [v11 initWithAnalyticsManager:v12];
  [a1[4] setExpressRestoreAnalytics:v13];

  if (location[0])
  {
    id v15 = a1[4];
    id v17 = _NSConcreteStackBlock;
    int v18 = -1073741824;
    int v19 = 0;
    unsigned __int8 v20 = sub_100145928;
    id v21 = &unk_1002B0CF8;
    id v22 = a1[4];
    id v23 = a1[5];
    v16.receiver = v15;
    v16.super_class = (Class)BuddyExpressRestoreController;
    [super performExtendedInitializationWithCompletion:&v17];
    objc_storeStrong(&v23, 0);
    objc_storeStrong(&v22, 0);
    int v24 = 0;
  }
  else
  {
    id v14 = [a1[4] expressRestoreAnalytics];
    [v14 setPaneShown:0];

    if (a1[5]) {
      (*((void (**)(void))a1[5] + 2))();
    }
    int v24 = 1;
  }
  objc_storeStrong(&v39, 0);
  objc_storeStrong(location, 0);
}

void sub_1001458D8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_100145928(uint64_t a1, char a2)
{
  id v4 = [*(id *)(a1 + 32) expressRestoreAnalytics];
  [v4 setPaneShown:a2 & 1];

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100146288(NSObject *a1, char a2)
{
  char v9 = a1;
  char v8 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v3 = oslog[0];
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Backup chosen is not compatible!", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[6].isa) {
    (*((void (**)(void))a1[6].isa + 2))();
  }
}

void sub_1001465AC(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v27 = 0;
  objc_storeStrong(&v27, a3);
  id v26 = 0;
  objc_storeStrong(&v26, a4);
  oslog[1] = a1;
  if (v26)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v22 = 0;
      char v20 = 0;
      if (_BYIsInternalInstall())
      {
        unsigned __int8 v7 = (NSString *)v26;
      }
      else if (v26)
      {
        id v23 = [v26 domain];
        char v22 = 1;
        unsigned __int8 v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v23, [v26 code]);
        id v21 = v7;
        char v20 = 1;
      }
      else
      {
        unsigned __int8 v7 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v24, "Failed to scan for software updates: %{public}@", buf, 0xCu);
      if (v20) {

      }
      if (v22) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  id v8 = [(objc_class *)a1[4].isa betaEnrollmentStateManager];
  Class isa = a1[5].isa;
  char v9 = +[NSArray arrayWithObjects:&isa count:1];
  id v10 = [v27 productVersion];
  id v11 = _NSConcreteStackBlock;
  int v12 = -1073741824;
  int v13 = 0;
  id v14 = sub_100146914;
  id v15 = &unk_1002B34B0;
  objc_super v16 = a1[5].isa;
  id v17 = v27;
  int v18 = a1[4].isa;
  int v19 = a1[6].isa;
  [v8 loadSeedEnrollmentStateForRestorables:v9 incompatibleWithUpdateVersion:v10 completion:&v11];

  objc_storeStrong((id *)&v19, 0);
  objc_storeStrong((id *)&v18, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong((id *)&v16, 0);
  objc_storeStrong(&v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_100146914(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) productVersion];
  char v5 = 0;
  if (([v2 isCompatibleWithUpdateToSystemVersion:v3] & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 48) betaEnrollmentStateManager];
    char v5 = 1;
    [v6 isRestorableSeedEnrolled:*(void *)(a1 + 32)];
  }
  if (v5) {

  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1001476A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 1);
}

id sub_100147CA8()
{
  if (!qword_100321D30)
  {
    id v11 = (id)MGCopyAnswer();
    id location = v11;

    id v10 = (id)MGCopyAnswer();
    id v7 = v10;

    id v9 = (id)MGCopyAnswer();
    id v6 = v9;

    if (![location length]) {
      objc_storeStrong(&location, @"1.0");
    }
    if (![v7 length]) {
      objc_storeStrong(&v7, @"1A001a");
    }
    if (![v6 length]) {
      objc_storeStrong(&v6, &stru_1002B4E18);
    }
    id v0 = +[NSString stringWithFormat:@"iOS %@ %@ %@ Setup Assistant", location, v7, v6];
    id v1 = [(NSString *)v0 copy];
    id v2 = (void *)qword_100321D30;
    qword_100321D30 = (uint64_t)v1;

    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, qword_100321D30);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Setup Assistant User-Agent = %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_storeStrong(&v6, 0);
    objc_storeStrong(&v7, 0);
    objc_storeStrong(&location, 0);
  }
  id v3 = (void *)qword_100321D30;

  return v3;
}

BOOL sub_100147F28()
{
  id v0 = +[NSLocale preferredLanguages];
  id v1 = [(NSArray *)v0 objectAtIndex:0];
  NSLocaleLanguageDirection v2 = +[NSLocale characterDirectionForLanguage:v1];

  return v2 == NSLocaleLanguageDirectionRightToLeft;
}

id sub_100147FCC(id obj, void *a2)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v8 = 0;
  objc_storeStrong(&v8, a2);
  id v3 = objc_alloc((Class)NSAttributedString);
  id v4 = location;
  CFStringRef v10 = kCTLanguageAttributeName;
  id v11 = v8;
  char v5 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  id v6 = [v3 initWithString:v4 attributes:v5];

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&location, 0);

  return v6;
}

void sub_100148838(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v16 = a1;
  char v15 = 0;
  id v2 = [*(id *)(a1 + 32) migrationController];
  id v3 = [*(id *)(a1 + 32) existingSettings];
  id v4 = [v3 backupMetadata];
  id v5 = [v4 nanoRegistryData];
  unsigned __int8 v6 = [v2 shouldBeDisplayedGivenMigrationData:v5];

  char v15 = v6 & 1;
  id v7 = &_dispatch_main_q;
  id v8 = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  id v11 = sub_1001489B0;
  int v12 = &unk_1002B3A18;
  id v13 = *(id *)(a1 + 40);
  char v14 = v6 & 1;
  dispatch_async((dispatch_queue_t)v7, &v8);

  objc_storeStrong(&v13, 0);
}

uint64_t sub_1001489B0(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 32) + 16))(*(void *)(result + 32), *(unsigned char *)(result + 40) & 1);
  }
  return result;
}

void sub_10014BD84(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = objc_opt_class();
  id v4 = [a1[4] settingsManager];
  [v3 setSettingEnabled:0 presented:1 settingsManager:v4];

  id v5 = [a1[4] paneFeatureAnalyticsManager];
  [v5 recordActionWithValue:&__kCFBooleanFalse forFeature:6];

  id v6 = [a1[4] delegate];
  [v6 flowItemDone:a1[4]];

  objc_storeStrong(location, 0);
}

id sub_10014E604(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) hasVoiceProfileIniCloud:a1, a1];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result & 1;
  return result;
}

id sub_10014E64C()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D38;
  uint64_t v13 = qword_100321D38;
  if (!qword_100321D38)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100152654;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100152654(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

double sub_10014E764(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  *(void *)&double result = 67110658;
  *(_DWORD *)a1 = 67110658;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  *(_WORD *)(a1 + 26) = 1024;
  *(_DWORD *)(a1 + 28) = a6;
  *(_WORD *)(a1 + 32) = 2112;
  *(void *)(a1 + 34) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  return result;
}

void sub_10014F07C(uint64_t a1)
{
  uint64_t v13 = a1;
  uint64_t v12 = a1;
  char v11 = 0;
  char v11 = [*(id *)(a1 + 32) _fetchSiriVoiceProfileAvailability] & 1;
  NSAssertionHandler v2 = [*(id *)(a1 + 32) voiceProfileQueue];
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_10014F1A4;
  uint64_t v8 = &unk_1002B1130;
  id v9 = *(id *)(a1 + 32);
  char v10 = v11 & 1;
  dispatch_sync(v2, &v4);

  if (*(void *)(a1 + 40))
  {
    int v3 = &_dispatch_main_q;
    dispatch_async((dispatch_queue_t)v3, *(dispatch_block_t *)(a1 + 40));
  }
  objc_storeStrong(&v9, 0);
}

id sub_10014F1A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setHasVoiceProfileIniCloud:*(unsigned char *)(a1 + 40) & 1 a1, a1];
}

id sub_1001511D4()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D48;
  uint64_t v13 = qword_100321D48;
  if (!qword_100321D48)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_100152A14;
    int v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100152A14(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001512EC()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D58;
  uint64_t v13 = qword_100321D58;
  if (!qword_100321D58)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_100152DD4;
    int v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100152DD4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

double sub_100151404(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 134349056;
  *(_DWORD *)a1 = 134349056;
  *(void *)(a1 + 4) = a2;
  return result;
}

void sub_100151418(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v6 = 0;
      char v4 = 0;
      if (_BYIsInternalInstall())
      {
        int v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v7 = [location[0] domain];
        char v6 = 1;
        int v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v7, [location[0] code]);
        int v5 = v3;
        char v4 = 1;
      }
      else
      {
        int v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Unable to set Siri data sharing opt-in: %{public}@", buf, 0xCu);
      if (v4) {

      }
      if (v6) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100152654(NSAssertionHandler *a1)
{
  sub_100152798();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("AFPreferences");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BYExpressSetupDataProvider.m", 60, @"Unable to find class %s", "AFPreferences" file lineNumber description];

    __break(1u);
  }
  qword_100321D38 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100152798()
{
  if (!sub_1001528C8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BYExpressSetupDataProvider.m", 59, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001528C8()
{
  if (!qword_100321D40) {
    sub_100152980();
  }
  return qword_100321D40;
}

uint64_t sub_100152980()
{
  uint64_t result = _sl_dlopen();
  qword_100321D40 = result;
  return result;
}

void sub_100152A14(NSAssertionHandler *a1)
{
  sub_100152B58();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SSRVoiceProfileManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSSRVoiceProfileManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BYExpressSetupDataProvider.m", 74, @"Unable to find class %s", "SSRVoiceProfileManager" file lineNumber description];

    __break(1u);
  }
  qword_100321D48 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100152B58()
{
  if (!sub_100152C88())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SpeakerRecognitionLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BYExpressSetupDataProvider.m", 73, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100152C88()
{
  if (!qword_100321D50) {
    sub_100152D40();
  }
  return qword_100321D50;
}

uint64_t sub_100152D40()
{
  uint64_t result = _sl_dlopen();
  qword_100321D50 = result;
  return result;
}

void sub_100152DD4(NSAssertionHandler *a1)
{
  sub_100152798();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("AFSettingsConnection");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getAFSettingsConnectionClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BYExpressSetupDataProvider.m", 62, @"Unable to find class %s", "AFSettingsConnection" file lineNumber description];

    __break(1u);
  }
  qword_100321D58 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001540E8(NSObject *a1, uint64_t a2)
{
  int v11 = a1;
  uint64_t v10 = a2;
  oslog[1] = a1;
  if (a2)
  {
    *((void *)a1[4].isa + 1) = 3;
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, v10);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v8, "SetupAssistant Error setting time: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    *((void *)a1[4].isa + 1) = 2;
    os_log_t v7 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      NSAssertionHandler v2 = v7;
      os_log_type_t v3 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SetupAssistant System Time update complete.", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  char v4 = +[NSNotificationCenter defaultCenter];
  [(NSNotificationCenter *)v4 postNotificationName:@"BuddySystemTimeUpdateFinishedNotification" object:0];
}

void sub_100154280(id a1, __CFError *a2)
{
  id v4 = a1;
  os_log_type_t v3 = a2;
  oslog[1] = (os_log_t)a1;
  if (a2)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)v3);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "SetupAssistant Error setting time zone: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
}

uint64_t sub_10015471C(uint64_t result, char a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1001548A8(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        os_log_type_t v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        os_log_type_t v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Reset failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset was successful!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100154D0C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) miscState:a1, a1];
  id v3 = [v2 migrationManager];
  [v3 setIgnoreProximityDisconnections:1];

  id v4 = [*(id *)(a1 + 32) proximitySetupController];
  [v4 showMigrationInterfaceOnSource];

  id v5 = [*(id *)(a1 + 32) miscState];
  id v6 = [v5 migrationManager];
  [v6 startDataTransfer];

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100154FDC(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472;
  id v6 = sub_10015514C;
  os_log_type_t v7 = &unk_1002B15F0;
  id v8 = a1[4];
  id v9 = a1[5];
  id v10 = a1[6];
  location[0] = objc_retainBlock(&v4);
  id v2 = [a1[6] presentedViewController:v4, v5, v6, v7, v8, v9];

  if (v2)
  {
    id v3 = [a1[6] presentedViewController];
    [v3 dismissViewControllerAnimated:1 completion:location[0]];
  }
  else
  {
    (*((void (**)(void))location[0] + 2))();
  }
  objc_storeStrong(location, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10015514C(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = [[BuddyMigrationTargetErrorController alloc] initWithError:*(void *)(a1 + 32)];
  [location[0] setForceErase:((unint64_t)[*(id *)(a1 + 40) hasTransferredData] & 1)];
  id v2 = [*(id *)(a1 + 48) delegate];
  [v2 flowItemDone:*(void *)(a1 + 48) nextItem:location[0]];

  objc_storeStrong(location, 0);
}

void sub_100155794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
}

void sub_1001557D4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = (void (**)(void))[WeakRetained presentWiFiSettings];
  v4[2](v4);

  objc_storeStrong(location, 0);
}

void sub_100155D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,_Unwind_Exception *exception_object,id location)
{
}

void sub_100155DAC(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = (void (**)(void))[WeakRetained presentWiFiSettings];
  v4[2](v4);

  objc_storeStrong(location, 0);
}

void sub_100155E34(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id WeakRetained = objc_loadWeakRetained(a1 + 4);
  id v4 = (void (**)(void))[WeakRetained restoreOverCellular];
  v4[2](v4);

  objc_storeStrong(location, 0);
}

id sub_100156030()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D60;
  uint64_t v13 = qword_100321D60;
  if (!qword_100321D60)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_100156148;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_100156148(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100156148(NSAssertionHandler *a1)
{
  sub_10015628C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SOSUtilities");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSOSUtilitiesClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyEmergencyExecutor.m", 16, @"Unable to find class %s", "SOSUtilities" file lineNumber description];

    __break(1u);
  }
  qword_100321D60 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10015628C()
{
  if (!sub_1001563BC())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SOSLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyEmergencyExecutor.m", 15, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001563BC()
{
  if (!qword_100321D68) {
    sub_100156474();
  }
  return qword_100321D68;
}

uint64_t sub_100156474()
{
  uint64_t result = _sl_dlopen();
  qword_100321D68 = result;
  return result;
}

void sub_100156854(uint64_t a1, uint64_t a2)
{
  id v3 = (id)(*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = v3;
}

void sub_1001569BC(uint64_t a1)
{
}

void sub_100156B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
}

void sub_100156B5C(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  NSAssertionHandler v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_100156BA0(uint64_t a1)
{
}

void sub_100156BAC(uint64_t a1)
{
}

void sub_100157890(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    id v2 = +[BuddyActivationConfiguration currentConfiguration];
    (*(void (**)(uint64_t, void))(v1 + 16))(v1, ([v2 isActivated] ^ 1) & 1);
  }
}

void sub_100157A28(uint64_t a1)
{
  uint64_t v15 = a1;
  uint64_t v14 = a1;
  char v2 = *(unsigned char *)(a1 + 40);
  char v12 = 0;
  char v10 = 0;
  BOOL v3 = 0;
  if (v2)
  {
    BOOL v3 = 0;
    if (([*(id *)(a1 + 32) didActivate] & 1) == 0)
    {
      BOOL v3 = 0;
      if (*(unsigned char *)(a1 + 41))
      {
        id v13 = [*(id *)(a1 + 32) navigationController];
        char v12 = 1;
        id v11 = [v13 topViewController];
        char v10 = 1;
        BOOL v3 = v11 == *(id *)(a1 + 32);
      }
    }
  }
  if (v10) {

  }
  if (v12) {
  if (v3)
  }
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (objc_class *)objc_opt_class();
      id location = NSStringFromClass(v4);
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Activation state changed while on %@", buf, 0xCu);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v5 = +[BuddyActivationConfiguration currentConfiguration];
    [v5 removeDelegate:*(void *)(a1 + 32)];

    [*(id *)(a1 + 32) setDidActivate:1];
    id v6 = [*(id *)(a1 + 32) delegate];
    [v6 flowItemDone:*(void *)(a1 + 32)];
  }
}

id sub_100157F50()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D70;
  uint64_t v13 = qword_100321D70;
  if (!qword_100321D70)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001586FC;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001586FC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100158278(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, BYSetupAssistantDidCompleteSIMSetupNotification, 0, 0, 1u);
  }
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001582F8(id *a1, char a2)
{
  int v11 = a1;
  char v10 = a2;
  v9[1] = a1;
  if (a2)
  {
    id v3 = [a1[4] setupFlow];
    int v4 = _NSConcreteStackBlock;
    int v5 = -1073741824;
    int v6 = 0;
    os_log_type_t v7 = sub_1001583F4;
    uint64_t v8 = &unk_1002B26A8;
    v9[0] = a1[5];
    [v3 firstViewController:&v4];

    objc_storeStrong(v9, 0);
  }
  else
  {
    (*((void (**)(void))a1[5] + 2))();
  }
}

void sub_1001583F4(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_1001586FC(NSAssertionHandler *a1)
{
  sub_100158840();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSetupAssistantSIMSetupFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getTSSetupAssistantSIMSetupFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySIMController.m", 26, @"Unable to find class %s", "TSSetupAssistantSIMSetupFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321D70 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100158840()
{
  if (!sub_100158970())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *SIMSetupSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMController.m", 25, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100158970()
{
  if (!qword_100321D78) {
    sub_100158A28();
  }
  return qword_100321D78;
}

uint64_t sub_100158A28()
{
  uint64_t result = _sl_dlopen();
  qword_100321D78 = result;
  return result;
}

id sub_100159170()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D80;
  uint64_t v13 = qword_100321D80;
  if (!qword_100321D80)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_100159804;
    int v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_100159804(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100159460(uint64_t a1, char a2)
{
  uint64_t v6 = a1;
  char v5 = a2;
  uint64_t v4 = a1;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _setupCompleted:v5 & 1 WeakRetained:v4];
  objc_storeStrong(&v3, 0);
}

void sub_100159804(NSAssertionHandler *a1)
{
  sub_100159948();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("MSDWelcomeViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getMSDWelcomeViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyDemoController.m", 24, @"Unable to find class %s", "MSDWelcomeViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321D80 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100159948()
{
  if (!sub_100159A78())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *MobileStoreDemoSetupUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyDemoController.m", 23, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_100159A78()
{
  if (!qword_100321D88) {
    sub_100159B30();
  }
  return qword_100321D88;
}

uint64_t sub_100159B30()
{
  uint64_t result = _sl_dlopen();
  qword_100321D88 = result;
  return result;
}

id sub_100159DCC()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321D90;
  uint64_t v13 = qword_100321D90;
  if (!qword_100321D90)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    char v5 = sub_1001630E4;
    uint64_t v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001630E4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_100159EE4()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321DA0;
  uint64_t v13 = qword_100321DA0;
  if (!qword_100321DA0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    char v5 = sub_1001634A8;
    uint64_t v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001634A8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

double sub_10015A8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&double result = 136317186;
  *(_DWORD *)a1 = 136317186;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a5;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a6;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a7;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a8;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a9;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a10;
  return result;
}

void sub_10015AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 64));
  _Unwind_Resume(a1);
}

void sub_10015AA58(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v30 = 0;
  objc_storeStrong(&v30, a3);
  v29[1] = (id)a1;
  v29[0] = objc_loadWeakRetained((id *)(a1 + 48));
  id v28 = [location[0] latestUpdate];
  if (v29[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*((id *)v29[0] + 1) preferredUpdate];
      char v24 = 0;
      char v22 = 0;
      if (v5)
      {
        id v25 = [*((id *)v29[0] + 1) preferredUpdate];
        char v24 = 1;
        uint64_t v6 = (__CFString *)[v25 humanReadableUpdateName];
        id v23 = v6;
        char v22 = 1;
      }
      else
      {
        uint64_t v6 = @"N/A";
      }
      id v7 = [*((id *)v29[0] + 1) preferredUpdate];
      id v8 = [*((id *)v29[0] + 1) preferredUpdateError];
      id v9 = [*((id *)v29[0] + 1) alternateUpdate];
      char v20 = 0;
      char v18 = 0;
      if (v9)
      {
        id v21 = [*((id *)v29[0] + 1) alternateUpdate];
        char v20 = 1;
        char v10 = (__CFString *)[v21 humanReadableUpdateName];
        id v19 = v10;
        char v18 = 1;
      }
      else
      {
        char v10 = @"N/A";
      }
      id v11 = [*((id *)v29[0] + 1) alternateUpdate];
      id v12 = [*((id *)v29[0] + 1) alternateUpdateError];
      if ([*((id *)v29[0] + 1) isDelayingUpdates]) {
        uint64_t v13 = "YES";
      }
      else {
        uint64_t v13 = "NO";
      }
      unsigned __int8 v14 = [*((id *)v29[0] + 1) automaticUpdateScheduled];
      uint64_t v15 = "YES";
      if ((v14 & 1) == 0) {
        uint64_t v15 = "NO";
      }
      sub_10015AF7C((uint64_t)buf, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v15, (uint64_t)v30, (uint64_t)v28);
      _os_log_impl((void *)&_mh_execute_header, oslog, v26, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nerror: %{public}@, SUScanResults: %@", buf, 0x70u);

      if (v18) {
      if (v20)
      }

      if (v22) {
      if (v24)
      }
    }
    objc_storeStrong((id *)&oslog, 0);
    os_log_t v17 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v28 humanReadableUpdateName];
      sub_100056BAC((uint64_t)v32, (uint64_t)v16, (uint64_t)v28);
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Using latest update %{public}@ (%p)", v32, 0x16u);
    }
    objc_storeStrong((id *)&v17, 0);
    [*(id *)(a1 + 32) setUpdate:v28];
    [*(id *)(a1 + 32) setScannedForUpdate:1];
  }
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v28, 0);
  objc_storeStrong(v29, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(location, 0);
}

double sub_10015AF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)&double result = 136317698;
  *(_DWORD *)a1 = 136317698;
  *(void *)(a1 + 4) = "-[BuddySoftwareUpdateController scanForUpdateCompletion:]_block_invoke";
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(void *)(a1 + 94) = a10;
  *(_WORD *)(a1 + 102) = 2112;
  *(void *)(a1 + 104) = a11;
  return result;
}

double sub_10015B9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&double result = 136317442;
  *(_DWORD *)a1 = 136317442;
  *(void *)(a1 + 4) = "-[BuddySoftwareUpdateController didBecomeActive:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2112;
  *(void *)(a1 + 94) = a10;
  return result;
}

void sub_10015BF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, _Unwind_Exception *exception_object,id location)
{
}

void sub_10015BFB8(id *a1, char a2, id obj)
{
  id v27 = a1;
  char v26 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v24[1] = a1;
  v24[0] = objc_loadWeakRetained(a1 + 5);
  if (v24[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*((id *)v24[0] + 1) preferredUpdate];
      char v21 = 0;
      char v19 = 0;
      if (v4)
      {
        id v22 = [*((id *)v24[0] + 1) preferredUpdate];
        char v21 = 1;
        CFStringRef v5 = (const __CFString *)[v22 humanReadableUpdateName];
        char v20 = (__CFString *)v5;
        char v19 = 1;
      }
      else
      {
        CFStringRef v5 = @"N/A";
      }
      id v6 = [*((id *)v24[0] + 1) preferredUpdate];
      id v7 = [*((id *)v24[0] + 1) preferredUpdateError];
      id v8 = [*((id *)v24[0] + 1) alternateUpdate];
      char v17 = 0;
      char v15 = 0;
      if (v8)
      {
        id v18 = [*((id *)v24[0] + 1) alternateUpdate];
        char v17 = 1;
        CFStringRef v9 = (const __CFString *)[v18 humanReadableUpdateName];
        id v16 = (__CFString *)v9;
        char v15 = 1;
      }
      else
      {
        CFStringRef v9 = @"N/A";
      }
      id v10 = [*((id *)v24[0] + 1) alternateUpdate];
      id v11 = [*((id *)v24[0] + 1) alternateUpdateError];
      if ([*((id *)v24[0] + 1) isDelayingUpdates]) {
        id v12 = "YES";
      }
      else {
        id v12 = "NO";
      }
      unsigned __int8 v13 = [*((id *)v24[0] + 1) automaticUpdateScheduled];
      unsigned __int8 v14 = "YES";
      if ((v13 & 1) == 0) {
        unsigned __int8 v14 = "NO";
      }
      sub_10015C41C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController beginDownloadingUpdate]_block_invoke", (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v14, v26 & 1, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nsuccessfullyStarted: %d, error: %@", buf, 0x6Cu);

      if (v15) {
      if (v17)
      }

      if (v19) {
      if (v21)
      }
    }
    objc_storeStrong((id *)&oslog, 0);
    [*((id *)v24[0] + 3) hidesBusyIndicator];
    if ((v26 & 1) == 0) {
      [a1[4] _allButtonsSetEnabled:1];
    }
  }
  objc_storeStrong(v24, 0);
  objc_storeStrong(&location, 0);
}

double sub_10015C41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12)
{
  *(void *)&double result = 136317698;
  *(_DWORD *)a1 = 136317698;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a5;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a6;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a7;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a8;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a9;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a10;
  *(_WORD *)(a1 + 92) = 1024;
  *(_DWORD *)(a1 + 94) = a11;
  *(_WORD *)(a1 + 98) = 2112;
  *(void *)(a1 + 100) = a12;
  return result;
}

void sub_10015CDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015CE14(id *a1, char a2, id obj)
{
  char v29 = a1;
  char v28 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v26[1] = a1;
  v26[0] = objc_loadWeakRetained(a1 + 4);
  if (v26[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*((id *)v26[0] + 1) preferredUpdate];
      char v23 = 0;
      char v21 = 0;
      if (v4)
      {
        id v24 = [*((id *)v26[0] + 1) preferredUpdate];
        char v23 = 1;
        CFStringRef v5 = (const __CFString *)[v24 humanReadableUpdateName];
        id v22 = (__CFString *)v5;
        char v21 = 1;
      }
      else
      {
        CFStringRef v5 = @"N/A";
      }
      id v6 = [*((id *)v26[0] + 1) preferredUpdate];
      id v7 = [*((id *)v26[0] + 1) preferredUpdateError];
      id v8 = [*((id *)v26[0] + 1) alternateUpdate];
      char v19 = 0;
      char v17 = 0;
      if (v8)
      {
        id v20 = [*((id *)v26[0] + 1) alternateUpdate];
        char v19 = 1;
        CFStringRef v9 = (const __CFString *)[v20 humanReadableUpdateName];
        id v18 = (__CFString *)v9;
        char v17 = 1;
      }
      else
      {
        CFStringRef v9 = @"N/A";
      }
      id v10 = [*((id *)v26[0] + 1) alternateUpdate];
      id v11 = [*((id *)v26[0] + 1) alternateUpdateError];
      if ([*((id *)v26[0] + 1) isDelayingUpdates]) {
        id v12 = "YES";
      }
      else {
        id v12 = "NO";
      }
      unsigned __int8 v13 = [*((id *)v26[0] + 1) automaticUpdateScheduled];
      unsigned __int8 v14 = "YES";
      if ((v13 & 1) == 0) {
        unsigned __int8 v14 = "NO";
      }
      sub_10015C41C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController installTonightPressed]_block_invoke", (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v14, v28 & 1, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nsuccessfullyStarted: %d, error: %@", buf, 0x6Cu);

      if (v17) {
      if (v19)
      }

      if (v21) {
      if (v23)
      }
    }
    objc_storeStrong((id *)&oslog, 0);
    if (v28)
    {
      id v15 = [v26[0] delegate];
      id WeakRetained = objc_loadWeakRetained(a1 + 4);
      [v15 flowItemDone:WeakRetained];
    }
    else
    {
      [v26[0] _installFailedWithError:location];
    }
  }
  objc_storeStrong(v26, 0);
  objc_storeStrong(&location, 0);
}

void sub_10015DC2C(id *a1)
{
  id v7[2] = a1;
  v7[1] = a1;
  uint64_t v1 = (void *)*((void *)a1[4] + 1);
  NSAssertionHandler v2 = _NSConcreteStackBlock;
  int v3 = -1073741824;
  int v4 = 0;
  CFStringRef v5 = sub_10015DCF0;
  id v6 = &unk_1002B15C8;
  v7[0] = a1[4];
  [v1 startInstallWithHandler:&v2];
  objc_storeStrong(v7, 0);
}

void sub_10015DCF0(NSObject *a1, char a2, id obj)
{
  id v7 = a1;
  char v6 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100104A0C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController installNowPressed]_block_invoke_2", v6 & 1, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "%s: Started install = %d, error = %@", buf, 0x1Cu);
  }
  objc_storeStrong((id *)oslog, 0);
  if ((v6 & 1) == 0) {
    [(objc_class *)a1[4].isa _installFailedWithError:location];
  }
  objc_storeStrong(&location, 0);
}

double sub_10015EB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&double result = 136317442;
  *(_DWORD *)a1 = 136317442;
  *(void *)(a1 + 4) = "-[BuddySoftwareUpdateController _installFailedWithError:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(void *)(a1 + 94) = a10;
  return result;
}

void sub_10015ED0C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_10015F834(id *a1)
{
  id v10[2] = a1;
  v10[1] = a1;
  v10[0] = objc_loadWeakRetained(a1 + 4);
  if (v10[0])
  {
    id v9 = [[BuddyPasscodeEntryController alloc] initWithNibName:0 bundle:0];
    [v9 setDelegate:v10[0]];
    uint64_t v1 = +[NSBundle mainBundle];
    NSAssertionHandler v2 = [(NSBundle *)v1 localizedStringForKey:@"PASSCODE_TITLE" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
    [v9 setTitleText:v2];

    int v3 = +[NSBundle mainBundle];
    int v4 = [(NSBundle *)v3 localizedStringForKey:@"PASSCODE_INSTRUCTIONS" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
    [v9 setInstructions:v4];

    id v5 = [v9 navigationItem];
    id v6 = [objc_alloc((Class)UIBarButtonItem) initWithBarButtonSystemItem:1 target:v10[0] action:"_cancelDevicePasscodePicker:"];
    [v5 setLeftBarButtonItem:v6];

    id location = [objc_alloc((Class)UINavigationController) initWithRootViewController:v9];
    id v7 = +[BFFStyle sharedStyle];
    [v7 applyThemeToNavigationController:location];

    [v10[0] presentViewController:location animated:1 completion:0];
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v9, 0);
  }
  objc_storeStrong(v10, 0);
}

uint64_t sub_100160124(unsigned int a1)
{
  int v4 = (uint64_t (*)(void))sub_100163868();
  if (!v4)
  {
    uint64_t v1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"NSString *const BYSUSUISoftwareUpdateStateToString(SUSUISoftwareUpdateState)"];
    [(NSAssertionHandler *)v1 handleFailureInFunction:v2, @"BuddySoftwareUpdateController.m", 44, @"%s", dlerror(), 0 file lineNumber description];

    __break(1u);
  }
  return v4(a1);
}

double sub_100160234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)&double result = 136318466;
  *(_DWORD *)a1 = 136318466;
  *(void *)(a1 + 4) = "-[BuddySoftwareUpdateController manager:didTransitionToState:fromState:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(void *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(void *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(void *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(void *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(void *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(void *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(void *)(a1 + 94) = a10;
  *(_WORD *)(a1 + 102) = 2048;
  *(void *)(a1 + 104) = a11;
  *(_WORD *)(a1 + 112) = 2114;
  *(void *)(a1 + 114) = a12;
  *(_WORD *)(a1 + 122) = 2048;
  *(void *)(a1 + 124) = a13;
  *(_WORD *)(a1 + 132) = 2112;
  *(void *)(a1 + 134) = a14;
  return result;
}

void sub_1001602D4(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (location[0])
  {
    NSAssertionHandler v2 = (void *)*((void *)location[0] + 3);
    int v3 = +[NSBundle mainBundle];
    int v4 = [(NSBundle *)v3 localizedStringForKey:@"DOWNLOAD_AND_INSTALL" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
    [v2 setTitle:v4 forState:0];

    id v5 = [location[0] buttonTray];
    [v5 setCaptionText:&stru_1002B4E18];

    [*(id *)(a1 + 32) resetButtonState:*((void *)location[0] + 3) andEventHandlers:1];
    if (*((void *)location[0] + 4)) {
      [*(id *)(a1 + 32) resetButtonState:*((void *)location[0] + 4) andEventHandlers:1];
    }
    if (*((void *)location[0] + 5)) {
      [*(id *)(a1 + 32) resetButtonState:*((void *)location[0] + 5) andEventHandlers:0];
    }
    if (*(void *)(a1 + 40))
    {
      unsigned __int8 v47 = [*((id *)location[0] + 1) enableUpdateButtonForError:*(void *)(a1 + 40)] & 1;
      [*((id *)location[0] + 3) setEnabled:v47];
      [*((id *)location[0] + 4) setEnabled:v47 & 1];
      id v6 = [location[0] buttonTray];
      id v7 = [*((id *)location[0] + 1) humanReadableDescriptionForError:*(void *)(a1 + 40)];
      [v6 setCaptionText:v7];
    }
    id v8 = [location[0] update];

    if (v8)
    {
      id v9 = (void *)*((void *)location[0] + 2);
      id v10 = [location[0] update];
      CFStringRef v11 = (const __CFString *)[v10 publisher];
      id v12 = (__CFString *)v11;
      if (v11) {
        CFStringRef v13 = v11;
      }
      else {
        CFStringRef v13 = @"Apple, Inc.";
      }
      [v9 setPublisherText:v13];

      unsigned __int8 v14 = (void *)*((void *)location[0] + 2);
      id v15 = (void *)*((void *)location[0] + 1);
      id v16 = [location[0] update];
      id v17 = [v15 prettyNameForUpdate:v16];
      [v14 setUpdateName:v17];

      id v18 = [location[0] update];
      id v19 = [v18 documentation];
      char v45 = 0;
      char v43 = 0;
      char v41 = 0;
      BOOL v20 = 0;
      if (v19)
      {
        id v46 = [location[0] update];
        char v45 = 1;
        id v44 = [v46 documentation];
        char v43 = 1;
        id v42 = [v44 releaseNotesSummary];
        char v41 = 1;
        BOOL v20 = v42 != 0;
      }
      if (v41) {

      }
      if (v43) {
      if (v45)
      }

      if (v20)
      {
        char v21 = (void *)*((void *)location[0] + 2);
        id v22 = [location[0] update];
        id v23 = [v22 documentation];
        id v24 = [v23 releaseNotesSummary];
        [v21 setReleaseNotesSummary:v24];
      }
      if ([*((id *)location[0] + 1) state] != 12)
      {
        id v25 = (void *)*((void *)location[0] + 2);
        id v26 = [location[0] update];
        id v27 = +[NSByteCountFormatter stringFromByteCount:countStyle:](NSByteCountFormatter, "stringFromByteCount:countStyle:", [v26 downloadSize], 2);
        [v25 setStatusMessage:v27 symbolizingError:0];
      }
      [*((id *)location[0] + 2) setAnimatingGearView:[*((id *)location[0] + 1) state] == 12];
    }
    switch(*(_DWORD *)(a1 + 56))
    {
      case 5:
        [*((id *)location[0] + 2) setProgressDisplayStyle:0];
        [*((id *)location[0] + 3) setEnabled:0];
        [*((id *)location[0] + 4) setEnabled:0];
        break;
      case 6:
      case 8:
      case 9:
        [*((id *)location[0] + 2) setProgressDisplayStyle:0];
        char v28 = (void *)*((void *)location[0] + 3);
        char v29 = +[NSBundle mainBundle];
        id v30 = [(NSBundle *)v29 localizedStringForKey:@"DOWNLOAD_AND_INSTALL" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
        [v28 setTitle:v30 forState:0];

        [*((id *)location[0] + 3) addTarget:location[0] action:"downloadAndInstallPressed" forControlEvents:64];
        char v31 = (void *)*((void *)location[0] + 4);
        id v32 = +[NSBundle mainBundle];
        char v33 = [(NSBundle *)v32 localizedStringForKey:@"DOWNLOAD_AND_INSTALL_TONIGHT" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
        [v31 setTitle:v33 forState:0];

        [*((id *)location[0] + 4) addTarget:location[0] action:"downloadAndInstallTonightPressed" forControlEvents:64];
        break;
      case 0xA:
        [*((id *)location[0] + 2) setProgressDisplayStyle:0];
        id v34 = (void *)*((void *)location[0] + 3);
        os_log_type_t v35 = +[NSBundle mainBundle];
        id v36 = [(NSBundle *)v35 localizedStringForKey:@"INSTALL_NOW" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
        [v34 setTitle:v36 forState:0];

        os_log_type_t v37 = (void *)*((void *)location[0] + 4);
        BOOL v38 = +[NSBundle mainBundle];
        id v39 = [(NSBundle *)v38 localizedStringForKey:@"INSTALL_TONIGHT" value:&stru_1002B4E18 table:@"SoftwareUpdate"];
        [v37 setTitle:v39 forState:0];

        [*((id *)location[0] + 3) addTarget:location[0] action:"installNowPressed" forControlEvents:64];
        [*((id *)location[0] + 4) addTarget:location[0] action:"installTonightPressed" forControlEvents:64];
        break;
      case 0xC:
        [*((id *)location[0] + 3) setHidden:1];
        [*((id *)location[0] + 4) setHidden:1];
        break;
      case 0xE:
        [*((id *)location[0] + 3) addTarget:location[0] action:"resumePressed" forControlEvents:64];
        objc_msgSend(*((id *)location[0] + 3), "setHidden:", (objc_msgSend(*((id *)location[0] + 1), "readyToResume") ^ 1) & 1);
        [*((id *)location[0] + 4) setHidden:1];
        break;
      case 0xF:
        [location[0] _allButtonsSetEnabled:0];
        [*((id *)location[0] + 3) setHidden:1];
        [*((id *)location[0] + 4) setHidden:1];
        [*((id *)location[0] + 5) setHidden:1];
        [*((id *)location[0] + 2) setProgressDisplayStyle:0];
        break;
      default:
        break;
    }
    id v40 = [location[0] tableView];
    [v40 reloadData];
  }
  objc_storeStrong(location, 0);
}

void sub_100160F94(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  if (location[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v2 = [*(id *)(a1 + 32) progress];
      [v2 normalizedPercentComplete];
      *(double *)&uint64_t v4 = v3;
      id v5 = [*(id *)(a1 + 32) descriptor];
      id v12 = [v5 humanReadableUpdateName];
      sub_100161214((uint64_t)buf, v4, (uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "%{public}s: Progress %f for download: %@", buf, 0x20u);

      objc_storeStrong(&v12, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v6 = (void *)*((void *)location[0] + 2);
    id v7 = [*(id *)(a1 + 32) progress];
    [v7 normalizedPercentComplete];
    [v6 setProgress:];

    id v8 = (void *)*((void *)location[0] + 2);
    id v9 = [*((id *)location[0] + 1) progressString];
    [v8 setStatusMessage:v9 symbolizingError:0];

    [*((id *)location[0] + 2) setProgressDisplayStyle:*(unsigned int *)(a1 + 48)];
    id v10 = location[0];
    id v11 = [*((id *)location[0] + 1) actionString];
    [v10 setButtonTitle:v11];
  }
  objc_storeStrong(location, 0);
}

double sub_100161214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 136446722;
  *(_DWORD *)a1 = 136446722;
  *(void *)(a1 + 4) = "-[BuddySoftwareUpdateController manager:downloadProgressChanged:displayStyle:]_block_invoke";
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2112;
  *(void *)(a1 + 24) = a3;
  return result;
}

void sub_100161388(uint64_t a1)
{
  v68[2] = (id)a1;
  v68[1] = (id)a1;
  v68[0] = objc_loadWeakRetained((id *)(a1 + 40));
  if (v68[0])
  {
    if (*((void *)v68[0] + 7))
    {
      id v13 = [v68[0] navigationController];
      id v14 = [v13 topViewController];

      if (v14 == v68[0])
      {
        id v57 = (id)_BYLoggingFacility();
        os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)v57, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
          char v54 = 0;
          char v52 = 0;
          id v38 = v15;
          if (v15)
          {
            id v55 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
            char v54 = 1;
            id v16 = (__CFString *)[v55 humanReadableUpdateName];
            id v53 = v16;
            char v52 = 1;
          }
          else
          {
            id v16 = @"N/A";
          }
          id v17 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
          id v18 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdateError];
          id v19 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
          char v50 = 0;
          char v48 = 0;
          if (v19)
          {
            id v51 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
            char v50 = 1;
            BOOL v20 = (__CFString *)[v51 humanReadableUpdateName];
            id v49 = v20;
            char v48 = 1;
          }
          else
          {
            BOOL v20 = @"N/A";
          }
          id v21 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
          id v22 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdateError];
          if ([*(id *)(*(void *)(a1 + 32) + 8) isDelayingUpdates]) {
            id v23 = "YES";
          }
          else {
            id v23 = "NO";
          }
          unsigned __int8 v24 = [*(id *)(*(void *)(a1 + 32) + 8) automaticUpdateScheduled];
          id v25 = "YES";
          if ((v24 & 1) == 0) {
            id v25 = "NO";
          }
          sub_10015A8B8((uint64_t)v70, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v16, (uint64_t)v17, (uint64_t)v18, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23, (uint64_t)v25);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v57, v56, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading attempting to install...", v70, 0x5Cu);

          if (v48) {
          if (v50)
          }

          if (v52) {
          if (v54)
          }
        }
        objc_storeStrong(&v57, 0);
        if (*((void *)v68[0] + 7) == 1) {
          [v68[0] installNowPressed];
        }
        else {
          [v68[0] installTonightPressed];
        }
      }
      else
      {
        os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
          char v45 = 0;
          char v43 = 0;
          if (v26)
          {
            id v46 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
            char v45 = 1;
            CFStringRef v27 = (const __CFString *)[v46 humanReadableUpdateName];
            id v44 = (__CFString *)v27;
            char v43 = 1;
          }
          else
          {
            CFStringRef v27 = @"N/A";
          }
          id v28 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
          id v29 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdateError];
          id v30 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
          char v41 = 0;
          char v39 = 0;
          if (v30)
          {
            id v42 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
            char v41 = 1;
            CFStringRef v31 = (const __CFString *)[v42 humanReadableUpdateName];
            id v40 = (__CFString *)v31;
            char v39 = 1;
          }
          else
          {
            CFStringRef v31 = @"N/A";
          }
          id v32 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
          id v33 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdateError];
          if ([*(id *)(*(void *)(a1 + 32) + 8) isDelayingUpdates]) {
            id v34 = "YES";
          }
          else {
            id v34 = "NO";
          }
          unsigned __int8 v35 = [*(id *)(*(void *)(a1 + 32) + 8) automaticUpdateScheduled];
          id v36 = "YES";
          if ((v35 & 1) == 0) {
            id v36 = "NO";
          }
          sub_10015A8B8((uint64_t)v69, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v27, (uint64_t)v28, (uint64_t)v29, (uint64_t)v31, (uint64_t)v32, (uint64_t)v33, (uint64_t)v34, (uint64_t)v36);
          _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading, but waiting for user to initiate install (not frontmost)", v69, 0x5Cu);

          if (v39) {
          if (v41)
          }

          if (v43) {
          if (v45)
          }
        }
        objc_storeStrong((id *)&oslog, 0);
      }
    }
    else
    {
      id location = (id)_BYLoggingFacility();
      os_log_type_t v66 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
      {
        id v2 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
        char v64 = 0;
        char v62 = 0;
        id v37 = v2;
        if (v2)
        {
          id v65 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
          char v64 = 1;
          CFStringRef v3 = (const __CFString *)[v65 humanReadableUpdateName];
          char v63 = (__CFString *)v3;
          char v62 = 1;
        }
        else
        {
          CFStringRef v3 = @"N/A";
        }
        id v4 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdate];
        id v5 = [*(id *)(*(void *)(a1 + 32) + 8) preferredUpdateError];
        id v6 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
        char v60 = 0;
        char v58 = 0;
        if (v6)
        {
          id v61 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
          char v60 = 1;
          CFStringRef v7 = (const __CFString *)[v61 humanReadableUpdateName];
          char v59 = (__CFString *)v7;
          char v58 = 1;
        }
        else
        {
          CFStringRef v7 = @"N/A";
        }
        id v8 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdate];
        id v9 = [*(id *)(*(void *)(a1 + 32) + 8) alternateUpdateError];
        if ([*(id *)(*(void *)(a1 + 32) + 8) isDelayingUpdates]) {
          id v10 = "YES";
        }
        else {
          id v10 = "NO";
        }
        unsigned __int8 v11 = [*(id *)(*(void *)(a1 + 32) + 8) automaticUpdateScheduled];
        id v12 = "YES";
        if ((v11 & 1) == 0) {
          id v12 = "NO";
        }
        sub_10015A8B8((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v3, (uint64_t)v4, (uint64_t)v5, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v12);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)location, v66, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading, but waiting for user to initiate install", buf, 0x5Cu);

        if (v58) {
        if (v60)
        }

        if (v62) {
        if (v64)
        }
      }
      objc_storeStrong(&location, 0);
    }
  }
  objc_storeStrong(v68, 0);
}

void sub_1001620AC(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  if (location[0]) {
    [location[0] _installFailedWithError:*(void *)(a1 + 32)];
  }
  objc_storeStrong(location, 0);
}

id sub_100162874()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321DB8;
  uint64_t v13 = qword_100321DB8;
  if (!qword_100321DB8)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001639D4;
    id v6 = &unk_1002B1248;
    CFStringRef v7 = &v9;
    sub_1001639D4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001630E4(NSAssertionHandler *a1)
{
  sub_100163228();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSUISoftwareUpdateManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSUSUISoftwareUpdateManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySoftwareUpdateController.m", 33, @"Unable to find class %s", "SUSUISoftwareUpdateManager" file lineNumber description];

    __break(1u);
  }
  qword_100321D90 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_100163228()
{
  uint64_t v3 = sub_10016335C();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *SoftwareUpdateSettingsUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySoftwareUpdateController.m", 32, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_10016335C()
{
  if (!qword_100321D98) {
    sub_100163414();
  }
  return qword_100321D98;
}

uint64_t sub_100163414()
{
  uint64_t result = _sl_dlopen();
  qword_100321D98 = result;
  return result;
}

void sub_1001634A8(NSAssertionHandler *a1)
{
  sub_1001635EC();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSSoftwareUpdateTitleCell");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSUSSoftwareUpdateTitleCellClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySoftwareUpdateController.m", 37, @"Unable to find class %s", "SUSSoftwareUpdateTitleCell" file lineNumber description];

    __break(1u);
  }
  qword_100321DA0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001635EC()
{
  if (!sub_10016371C())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *SoftwareUpdateSettingsLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySoftwareUpdateController.m", 36, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10016371C()
{
  if (!qword_100321DA8) {
    sub_1001637D4();
  }
  return qword_100321DA8;
}

uint64_t sub_1001637D4()
{
  uint64_t result = _sl_dlopen();
  qword_100321DA8 = result;
  return result;
}

uint64_t sub_100163868()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321DB0;
  uint64_t v13 = qword_100321DB0;
  if (!qword_100321DB0)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100163968;
    id v6 = &unk_1002B1248;
    CFStringRef v7 = &v9;
    sub_100163968((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100163968(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_100163228();
  uint64_t result = dlsym(v2, "SUSUISoftwareUpdateStateToString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321DB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001639D4(NSAssertionHandler *a1)
{
  sub_1001635EC();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSSoftwareUpdateReleaseNotesDetail");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSUSSoftwareUpdateReleaseNotesDetailClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySoftwareUpdateController.m", 40, @"Unable to find class %s", "SUSSoftwareUpdateReleaseNotesDetail" file lineNumber description];

    __break(1u);
  }
  qword_100321DB8 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_100166174(id a1)
{
  id v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  [v4[0] setLineBreakMode:4];
  [v4[0] setAlignment:1];
  [v4[0] setLineSpacing:0.0];
  id location = +[UIFont preferredFontForTextStyle:UIFontTextStyleHeadline];
  v5[0] = NSFontAttributeName;
  v6[0] = location;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  NSAssertionHandler v2 = (void *)qword_100321DD0;
  qword_100321DD0 = (uint64_t)v1;

  objc_storeStrong(&location, 0);
  objc_storeStrong(v4, 0);
}

void sub_100166344(id a1)
{
  id v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  [v4[0] setLineBreakMode:4];
  [v4[0] setAlignment:1];
  v5[0] = NSFontAttributeName;
  uint64_t v1 = +[UIFont preferredFontForTextStyle:UIFontTextStyleBody];
  v6[0] = v1;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  NSAssertionHandler v2 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  int v3 = (void *)qword_100321DE0;
  qword_100321DE0 = (uint64_t)v2;

  objc_storeStrong(v4, 0);
}

double sub_100166824()
{
  return 0.0;
}

double sub_100167A34()
{
  return 0.0;
}

BOOL sub_100167A8C(double a1, double a2, double a3, double a4)
{
  BOOL v4 = 0;
  if (a1 == a3) {
    return a2 == a4;
  }
  return v4;
}

void sub_100168C94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) miscState:a1, a1];
  [v2 setUserSkippedWiFi:1];

  id v3 = [*(id *)(a1 + 32) miscState];
  [v3 setUserSelectedCellularActivation:0];

  id v4 = [*(id *)(a1 + 32) delegate];
  [v4 flowItemDone:*(void *)(a1 + 32)];
}

void sub_100168D40(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) navigationController:a1, a1];
  id v2 = [v1 popViewControllerAnimated:1];
}

void sub_100169194(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v8 = 0;
  objc_storeStrong(&v8, a3);
  uint64_t v7 = a1;
  [*(id *)(a1 + 32) setPreflightInformation:location[0]];
  uint64_t v5 = *(void *)(a1 + 40);
  v6.receiver = *(id *)(a1 + 32);
  v6.super_class = (Class)BuddyMigrationStoreRenewController;
  [super performExtendedInitializationWithCompletion:v5];
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_100169960(NSObject *a1, uint64_t a2, id obj)
{
  id v25 = a1;
  *((void *)&location + 1) = a2;
  *(void *)&long long location = 0;
  objc_storeStrong((id *)&location, obj);
  oslog[1] = a1;
  if (location == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v22;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Renew credentials was successful!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa setRenewSucceeded:1];
  }
  else
  {
    os_log_t v20 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = DWORD2(location);
      char v17 = 0;
      char v15 = 0;
      if (_BYIsInternalInstall())
      {
        uint64_t v7 = (NSString *)location;
      }
      else if ((void)location)
      {
        id v18 = [(id)location domain];
        char v17 = 1;
        uint64_t v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v18, [(id)location code]);
        id v16 = v7;
        char v15 = 1;
      }
      else
      {
        uint64_t v7 = 0;
      }
      sub_1000639A4((uint64_t)v26, v6, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Renew credentials failed (%d): %{public}@", v26, 0x12u);
      if (v15) {

      }
      if (v17) {
    }
      }
    objc_storeStrong((id *)&v20, 0);
  }
  id v8 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v10 = -1073741824;
  int v11 = 0;
  int v12 = sub_100169C60;
  uint64_t v13 = &unk_1002B0D20;
  id v14 = a1[4].isa;
  dispatch_async((dispatch_queue_t)v8, &block);

  objc_storeStrong((id *)&v14, 0);
  objc_storeStrong((id *)&location, 0);
}

void sub_100169C60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_10016ACA4(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_10016ACE8(uint64_t a1)
{
}

void sub_10016ACF4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) traitCollection:a1, a1];
  id v3 = [v2 userInterfaceStyle];

  if (v3 == (id)2)
  {
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) stringByAppendingString:@" Dark"];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_10016BBF0(id *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v53 = 0;
  objc_storeStrong(&v53, a3);
  id v52 = 0;
  objc_storeStrong(&v52, a4);
  id v51 = a1;
  if (v52)
  {
    (*((void (**)(void))a1[5] + 2))();
    int v50 = 1;
  }
  else
  {
    id v49 = objc_alloc_init((Class)SASProximityAnisetteDataProvider);
    id v7 = [a1[4] proximitySession];
    [v49 setSession:v7];

    id v8 = [BuddyAppleIDSignInTask alloc];
    id v9 = [a1[4] featureFlags];
    id v10 = +[BuddyAccountTools sharedBuddyAccountTools];
    int v11 = [(BuddyAppleIDSignInTask *)v8 initWithFeatureFlags:v9 accountTools:v10];
    [a1[4] setSignInTask:v11];

    id v12 = [a1[4] navigationController];
    id v13 = [a1[4] signInTask];
    [v13 setNavigationController:v12];

    LOBYTE(v12) = [a1[4] ignoreLockAssertErrors];
    id v14 = [a1[4] signInTask];
    [v14 setIgnoreLockAssertErrors:v12 & 1];

    LOBYTE(v12) = [a1[4] restoreFromBackupMode];
    id v15 = [a1[4] signInTask];
    [v15 setRestoreFromBackupMode:v12 & 1];

    LOBYTE(v12) = [a1[4] makeStoreServiceActive];
    id v16 = [a1[4] signInTask];
    [v16 setMakeStoreServiceActive:v12 & 1];

    id v17 = [a1[4] featureFlags];
    LOBYTE(v16) = [v17 isUseCDPContextSecretInsteadOfSBDSecretEnabled];

    if (v16)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v47 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [a1[4] cacheManager];
        id v19 = [a1[4] signInTask];
        sub_1000E4F20((uint64_t)buf, (uint64_t)"-[BuddyProximityAppleIDSignInTask authenticateThenSignInWithCompletion:]_block_invoke", (uint64_t)v18, (uint64_t)v19);
        _os_log_impl((void *)&_mh_execute_header, oslog, v47, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);
      }
      objc_storeStrong((id *)&oslog, 0);
      id v20 = [a1[4] cacheManager];
      id v21 = [a1[4] signInTask];
      [v21 setCacheManager:v20];
    }
    id v22 = [a1[4] signInTask];
    [v22 setEnableFindMy:0];

    id v23 = +[AKAccountManager sharedInstance];
    id v24 = [(AKAccountManager *)v23 securityLevelForAccount:location[0]];

    if (v24 != (id)2)
    {
      id v25 = [a1[4] messageSession];
      id v26 = [a1[4] signInTask];
      [v26 setMessageSession:v25];
    }
    os_log_t v46 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v27 = v46;
      os_log_type_t v28 = v45;
      sub_10004B24C(v44);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Beginning authentication for iCloud account...", v44, 2u);
    }
    objc_storeStrong((id *)&v46, 0);
    id v29 = objc_alloc((Class)BYAnalyticsEventAppleIDSignIn);
    id v30 = [a1[4] analyticsManager];
    id v43 = [v29 initWithAnalyticsManager:v30 context:0];

    id v31 = a1[4];
    id v32 = [location[0] username];
    id v33 = v53;
    id v34 = v49;
    unsigned __int8 v35 = _NSConcreteStackBlock;
    int v36 = -1073741824;
    int v37 = 0;
    id v38 = sub_10016C214;
    char v39 = &unk_1002B3D40;
    id v42 = a1[5];
    id v40 = v43;
    id v41 = a1[4];
    [v31 _authenticateWithUsername:v32 companionDevice:v33 anisetteDataProvider:v34 completion:&v35];

    objc_storeStrong(&v41, 0);
    objc_storeStrong(&v40, 0);
    objc_storeStrong(&v42, 0);
    objc_storeStrong(&v43, 0);
    objc_storeStrong(&v49, 0);
    int v50 = 0;
  }
  objc_storeStrong(&v52, 0);
  objc_storeStrong(&v53, 0);
  objc_storeStrong(location, 0);
}

void sub_10016C214(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v33 = 0;
  objc_storeStrong(&v33, a3);
  v32[1] = a1;
  if (v33)
  {
    v32[0] = (id)_BYLoggingFacility();
    os_log_type_t v31 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v32[0], OS_LOG_TYPE_ERROR))
    {
      char v29 = 0;
      char v27 = 0;
      if (_BYIsInternalInstall())
      {
        uint64_t v5 = (NSString *)v33;
      }
      else if (v33)
      {
        id v30 = [v33 domain];
        char v29 = 1;
        uint64_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v30, [v33 code]);
        id v28 = v5;
        char v27 = 1;
      }
      else
      {
        uint64_t v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v32[0], v31, "Authentication failed: %{public}@", buf, 0xCu);
      if (v27) {

      }
      if (v29) {
    }
      }
    objc_storeStrong(v32, 0);
    (*((void (**)(void))a1[6] + 2))();
    int v26 = 1;
  }
  else
  {
    [a1[4] markSignInStartedAfterAuthenticationCompleted];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = oslog;
      os_log_type_t v7 = v24;
      sub_10004B24C(v23);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Authentication succeeded!", v23, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    os_log_t v22 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = v22;
      os_log_type_t v9 = v21;
      sub_10004B24C(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Beginning sign-in for iCloud account...", v20, 2u);
    }
    objc_storeStrong((id *)&v22, 0);
    id v10 = [a1[5] signInTask];
    id v11 = location[0];
    id v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    id v15 = sub_10016C5E8;
    id v16 = &unk_1002B3D18;
    id v17 = a1[4];
    id v18 = location[0];
    id v19 = a1[6];
    [v10 signInToAllServicesWithAuthenticationResults:v11 completion:&v12];

    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
    int v26 = 0;
  }
  objc_storeStrong(&v33, 0);
  objc_storeStrong(location, 0);
}

void sub_10016C5E8(NSObject *a1, char a2, id obj)
{
  id v18 = a1;
  char v17 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (v17)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v14;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sign-in succeeded!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa markSignInCompleted];
    id v6 = +[BFFAppleAccountInfo primaryAccountInfo];
    [v6 updateWithAuthenticationResults:a1[5].isa];
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      char v10 = 0;
      char v8 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v7 = (NSString *)location;
      }
      else if (location)
      {
        id v11 = [location domain];
        char v10 = 1;
        os_log_type_t v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v11, [location code]);
        os_log_type_t v9 = v7;
        char v8 = 1;
      }
      else
      {
        os_log_type_t v7 = 0;
      }
      sub_10004BB7C((uint64_t)v19, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Sign-in failed: %{public}@", v19, 0xCu);
      if (v8) {

      }
      if (v10) {
    }
      }
    objc_storeStrong((id *)&v12, 0);
  }
  (*((void (**)(void))a1[6].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_10016CBA8(NSObject *a1, char a2, id obj)
{
  id v15 = a1;
  char v14 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v14 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v10 = 0;
      char v8 = 0;
      if (_BYIsInternalInstall())
      {
        id v4 = (NSString *)location;
      }
      else if (location)
      {
        id v11 = [location domain];
        char v10 = 1;
        id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v11, [location code]);
        os_log_type_t v9 = v4;
        char v8 = 1;
      }
      else
      {
        id v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Unable to save account: %{public}@", buf, 0xCu);
      if (v8) {

      }
      if (v10) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  Class isa = a1[6].isa;
  Class v6 = a1[4].isa;
  id v7 = [(objc_class *)a1[5].isa companionDevice];
  (*((void (**)(Class, Class, id, id))isa + 2))(isa, v6, v7, location);

  objc_storeStrong(&location, 0);
}

void sub_10016CFB0(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v7 = 0;
  objc_storeStrong(&v7, a3);
  id v5 = [v7 domain];
  BOOL v6 = 0;
  if ([v5 isEqualToString:AKAppleIDAuthenticationErrorDomain]) {
    BOOL v6 = [v7 code] == (id)-7006;
  }

  if (v6) {
    [*(id *)(a1 + 32) _authenticateWithUsername:*(void *)(a1 + 40) companionDevice:*(void *)(a1 + 48) anisetteDataProvider:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_10016DF00(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to get secure app assertion: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10016E1A8(id *a1)
{
  id v11[2] = a1;
  v11[1] = a1;
  id v2 = [a1[4] connectionState];
  if (v2 != [a1[5] connectionState])
  {
    id v3 = [a1[5] disconnectionQueue];
    dispatch_suspend(v3);

    [a1[5] setConnectionState:[a1[4] connectionState]];
    id v4 = &_dispatch_main_q;
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    char v8 = sub_10016E2F8;
    os_log_type_t v9 = &unk_1002B12F0;
    id v10 = a1[4];
    v11[0] = a1[5];
    dispatch_sync((dispatch_queue_t)v4, &v5);

    objc_storeStrong(v11, 0);
    objc_storeStrong(&v10, 0);
  }
}

void sub_10016E2F8(id *a1)
{
  v23[2] = a1;
  v23[1] = a1;
  id v2 = [a1[4] connectionState];
  if (!v2) {
    goto LABEL_8;
  }
  if (v2 != (id)1)
  {
    if (v2 != (id)2) {
      return;
    }
LABEL_8:
    os_log_type_t v9 = -[BuddyMigrationBaseDisconnectController initWithConnectionType:]([BuddyMigrationLockscreenDisconnectController alloc], "initWithConnectionType:", [a1[4] connectionType]);
    [a1[5] setDisconnectController:v9];

    id v10 = [a1[5] navigationController];
    id v11 = [a1[5] disconnectController];
    os_log_t v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    id v15 = sub_10016E5F4;
    id v16 = &unk_1002B0D20;
    id v17 = a1[5];
    [v10 pushViewController:v11 completion:&v12];

    objc_storeStrong(&v17, 0);
    return;
  }
  id v3 = [a1[5] navigationController];
  id v4 = [v3 topViewController];
  id v5 = [a1[5] disconnectController];

  if (v4 == v5)
  {
    [a1[5] setDisconnectController:0];
    id v6 = [a1[5] navigationController];
    id v7 = [a1[5] progressController];
    id v18 = _NSConcreteStackBlock;
    int v19 = -1073741824;
    int v20 = 0;
    os_log_type_t v21 = sub_10016E5A4;
    os_log_t v22 = &unk_1002B0D20;
    v23[0] = a1[5];
    [v6 popToViewController:v7 completion:&v18];

    objc_storeStrong(v23, 0);
  }
  else
  {
    char v8 = [a1[5] disconnectionQueue];
    dispatch_resume(v8);
  }
}

void sub_10016E5A4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) disconnectionQueue:a1, a1];
  dispatch_resume(v1);
}

void sub_10016E5F4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) disconnectionQueue:a1, a1];
  dispatch_resume(v1);
}

void sub_10016F4DC(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] delegate];
  [v3 presentWiFiPaneForFlowItem:a1[4]];

  objc_storeStrong(location, 0);
}

void sub_10016FCB8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _beginInstall];
  objc_storeStrong(location, 0);
}

void sub_10016FD08(id a1, UIAlertAction *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_10016FD50(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  [a1[4] setAutoInstallTimeRemaining:[a1[4] autoInstallTimeRemaining] - 1];
  if ((uint64_t)[a1[4] autoInstallTimeRemaining] <= 0)
  {
    [location[0] invalidate];
    id v4 = a1[5];
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    char v8 = sub_10016FE98;
    os_log_type_t v9 = &unk_1002B0D20;
    v10[0] = a1[4];
    [v4 dismissViewControllerAnimated:1 completion:&v5];
    objc_storeStrong(v10, 0);
  }
  else
  {
    id v3 = [a1[4] _autoInstallAlertMessageForTimeRemaining:[a1[4] autoInstallTimeRemaining]];
    [a1[5] setMessage:v3];
  }
  objc_storeStrong(location, 0);
}

id sub_10016FE98(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginInstall:a1:a1];
}

void sub_1001701E0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_1001703FC(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v33 = a1;
  char v32 = +[BuddyMandatoryUpdateUtilities isUpdateRequired];
  id v2 = +[BuddyCloudConfigManager sharedManager];
  char v3 = 0;
  if ([v2 hasCloudConfiguration]) {
    char v3 = v32 ^ 1;
  }

  if (v3) {
    goto LABEL_4;
  }
  id v4 = [*(id *)(a1 + 32) runState];
  char v5 = 0;
  if ([v4 hasCompletedInitialRun]) {
    char v5 = v32 ^ 1;
  }

  if (v5)
  {
LABEL_4:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id location = (id)_BYLoggingFacility();
    os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = location;
      os_log_type_t v7 = v30;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking for mandatory update...", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    char v28 = +[BuddyMandatoryUpdateUtilities hasInformation];
    char v27 = !+[BuddyMandatoryUpdateUtilities isUpdateRequired];
    id v17 = _NSConcreteStackBlock;
    int v18 = -1073741824;
    int v19 = 0;
    int v20 = sub_100170738;
    os_log_type_t v21 = &unk_1002B3E48;
    char v24 = v32 & 1;
    id v22 = *(id *)(a1 + 32);
    id v23 = *(id *)(a1 + 40);
    char v25 = v28 & 1;
    id v26 = objc_retainBlock(&v17);
    char v8 = &_dispatch_main_q;
    os_log_type_t v9 = _NSConcreteStackBlock;
    int v10 = -1073741824;
    int v11 = 0;
    os_log_t v12 = sub_100170A6C;
    int v13 = &unk_1002B14A8;
    id v14 = *(id *)(a1 + 32);
    id v15 = v26;
    char v16 = v27 & 1;
    dispatch_async((dispatch_queue_t)v8, &v9);

    objc_storeStrong(&v15, 0);
    objc_storeStrong(&v14, 0);
    objc_storeStrong(&v26, 0);
    objc_storeStrong(&v23, 0);
    objc_storeStrong(&v22, 0);
  }
}

void sub_100170738(uint64_t a1, char a2, id obj)
{
  uint64_t v25 = a1;
  char v24 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v22[1] = (id)a1;
  if (v24)
  {
    if (*(unsigned char *)(a1 + 48))
    {
      id v4 = dispatch_get_global_queue(25, 0);
      dispatch_block_t block = _NSConcreteStackBlock;
      int v18 = -1073741824;
      int v19 = 0;
      int v20 = sub_1001709CC;
      os_log_type_t v21 = &unk_1002B0D20;
      v22[0] = *(id *)(a1 + 32);
      dispatch_async(v4, &block);

      objc_storeStrong(v22, 0);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else if ((*(unsigned char *)(a1 + 48) & 1) != 0 && location)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      char v5 = oslog;
      os_log_type_t v6 = v15;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Activation has indicated an update is required and we can't successfully scan for an update", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    os_log_type_t v7 = dispatch_get_global_queue(25, 0);
    char v8 = _NSConcreteStackBlock;
    int v9 = -1073741824;
    int v10 = 0;
    int v11 = sub_100170A1C;
    os_log_t v12 = &unk_1002B0D20;
    id v13 = *(id *)(a1 + 32);
    dispatch_async(v7, &v8);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    objc_storeStrong(&v13, 0);
  }
  else
  {
    if (v24 & 1) == 0 && (*(unsigned char *)(a1 + 49)) {
      +[BuddyMandatoryUpdateUtilities removeInformation];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1001709CC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_100170A1C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_100170A6C(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v11 = a1;
  id v2 = [*(id *)(a1 + 32) softwareUpdateCache];
  char v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  os_log_type_t v6 = sub_100170B7C;
  os_log_type_t v7 = &unk_1002B3E70;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 48) & 1;
  [v2 scanUsingCache:1 allowBootstrap:1 retry:1 withCompletion:&v3];

  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_100170B7C(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v65 = 0;
  objc_storeStrong(&v65, a3);
  id v64 = 0;
  objc_storeStrong(&v64, a4);
  uint64_t v63 = a1;
  char v62 = 0;
  id v7 = [*(id *)(a1 + 32) networkProvider];
  char v60 = 0;
  char v8 = 0;
  if ([v7 networkReachable])
  {
    id v61 = [*(id *)(a1 + 32) networkProvider];
    char v60 = 1;
    char v8 = [v61 connectedOverWiFi] ^ 1;
  }
  if (v60) {

  }
  char v62 = v8 & 1;
  char v59 = 0;
  id v9 = [*(id *)(a1 + 32) networkProvider];
  unsigned __int8 v10 = [v9 connectedOverWiFiAndNetworkReachable];

  char v59 = v10 & 1;
  char v58 = 0;
  char v11 = 0;
  if ((v10 & 1) == 0) {
    char v11 = v62 ^ 1;
  }
  char v58 = v11 & 1;
  id v12 = [*(id *)(a1 + 32) analyticsManager];
  v68[0] = @"successfulScan";
  id v13 = +[NSNumber numberWithInt:v64 == 0];
  v69[0] = v13;
  v68[1] = @"cellular";
  id v14 = +[NSNumber numberWithBool:v62 & 1];
  v69[1] = v14;
  v68[2] = @"wifi";
  os_log_type_t v15 = +[NSNumber numberWithBool:v59 & 1];
  v69[2] = v15;
  id v68[3] = @"bootstrap";
  char v16 = +[NSNumber numberWithBool:v58 & 1];
  v69[3] = v16;
  id v17 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:4];
  [v12 addEvent:@"com.apple.setupassistant.ios.activation.mandatoryUpdate" withPayload:v17 persist:1];

  if (v64)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v54 = 0;
      char v52 = 0;
      if (_BYIsInternalInstall())
      {
        int v18 = (NSString *)v64;
      }
      else if (v64)
      {
        id v55 = [v64 domain];
        char v54 = 1;
        int v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v55, [v64 code]);
        id v53 = v18;
        char v52 = 1;
      }
      else
      {
        int v18 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v18);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v56, "Unable to scan for software updates: %{public}@", buf, 0xCu);
      if (v52) {

      }
      if (v54) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    int v51 = 1;
  }
  else if (location[0])
  {
    if ([location[0] mandatoryUpdateEligible])
    {
      if (+[BuddyMandatoryUpdateUtilities deviceIsFromFactory](BuddyMandatoryUpdateUtilities, "deviceIsFromFactory")|| ([location[0] mandatoryUpdateRestrictedToOutOfTheBox] & 1) == 0)
      {
        if (([location[0] mandatoryUpdateOptional] & 1) != 0
          && (*(unsigned char *)(a1 + 48) & 1) != 0)
        {
          id v25 = +[BuddyCloudConfigManager sharedManager];
          unsigned __int8 v26 = [v25 hasCloudConfiguration];

          if (v26)
          {
            os_log_t v41 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              char v27 = v41;
              os_log_type_t v28 = v40;
              sub_10004B24C(v39);
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "Found an optional update and the device has a cloud configuration", v39, 2u);
            }
            objc_storeStrong((id *)&v41, 0);
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
            int v51 = 1;
          }
          else if ([*(id *)(a1 + 32) _isDEP])
          {
            os_log_t v38 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              char v29 = v38;
              os_log_type_t v30 = v37;
              sub_10004B24C(v36);
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found an optional update and the device is enrolled in DEP", v36, 2u);
            }
            objc_storeStrong((id *)&v38, 0);
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
            int v51 = 1;
          }
          else
          {
            os_log_t v35 = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              os_log_type_t v31 = v35;
              os_log_type_t v32 = v34;
              sub_10004B24C(v33);
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found an optional update", v33, 2u);
            }
            objc_storeStrong((id *)&v35, 0);
            [*(id *)(a1 + 32) setUpdate:location[0]];
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
            int v51 = 1;
          }
        }
        else
        {
          [*(id *)(a1 + 32) setUpdate:location[0]];
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
          int v51 = 0;
        }
      }
      else
      {
        os_log_t v44 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          id v23 = v44;
          os_log_type_t v24 = v43;
          sub_10004B24C(v42);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found an update (out-of-the-box), but this device has been erased", v42, 2u);
        }
        objc_storeStrong((id *)&v44, 0);
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        int v51 = 1;
      }
    }
    else
    {
      os_log_t v47 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v21 = v47;
        os_log_type_t v22 = v46;
        sub_10004B24C(v45);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Found an update, but it's not eligible", v45, 2u);
      }
      objc_storeStrong((id *)&v47, 0);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      int v51 = 1;
    }
  }
  else
  {
    os_log_t v50 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v49 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = v50;
      os_log_type_t v20 = v49;
      sub_10004B24C(v48);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No update found", v48, 2u);
    }
    objc_storeStrong((id *)&v50, 0);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    int v51 = 1;
  }
  objc_storeStrong(&v64, 0);
  objc_storeStrong(&v65, 0);
  objc_storeStrong(location, 0);
}

void sub_100172370(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  if (location[0])
  {
    id v1 = [location[0] navigationController];

    if (v1)
    {
      id v2 = [location[0] navigationController];
      id v3 = [v2 presentedViewController];

      if (v3 == location[0]) {
        [location[0] start];
      }
    }
    else
    {
      [location[0] start];
    }
  }
  objc_storeStrong(location, 0);
}

void sub_10017267C(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v5 = a1;
  id v2 = [*(id *)(a1 + 32) visualPairingView];
  [v2 setAlpha:1.0];

  id v3 = [*(id *)(a1 + 32) visualPairingView];
  memcpy(v4, &CGAffineTransformIdentity, sizeof(v4));
  [v3 setTransform:v4];
}

void sub_100172710(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v4 = a1;
  id v1 = [*(id *)(a1 + 32) _maskContainerView];
  id v2 = [v1 maskView];
  CGAffineTransformMakeScale(&v3, 0.95, 0.95);
  [v2 setTransform:&v3];
}

void sub_10017296C(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v8 = a1;
  id v2 = [*(id *)(a1 + 32) _maskContainerView];
  id v3 = [v2 maskView];
  CGAffineTransformMakeScale(&v7, 0.666666667, 0.666666667);
  [v3 setTransform:&v7];

  id v4 = [*(id *)(a1 + 32) visualPairingView];
  [v4 setAlpha:0.0];

  id v5 = [*(id *)(a1 + 32) visualPairingView];
  CGAffineTransformMakeScale(&v6, 1.5, 1.5);
  [v5 setTransform:&v6];
}

uint64_t sub_100172A60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100174470(uint64_t a1)
{
  return [*(id *)(a1 + 32) setRetryAttempts:[*(id *)(a1 + 32) retryAttempts] + 1];
}

id sub_1001744C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setRetryAttempts:0];
}

id sub_10017450C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setRetryAttempts:[*(id *)(a1 + 32) retryAttempts] + 1];
}

void sub_1001751E4(id *a1)
{
  id v8[2] = a1;
  v8[1] = a1;
  id v2 = [a1[4] existingSettings];
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  CGAffineTransform v6 = sub_1001752B8;
  CGAffineTransform v7 = &unk_1002B3E98;
  v8[0] = a1[5];
  [v2 setBackupMetadataWithProviderBlock:&v3];

  objc_storeStrong(v8, 0);
}

id sub_1001752B8(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v7, "Fetching metadata for backup: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  id v2 = [*(id *)(a1 + 32) backupUDID];
  [*(id *)(a1 + 32) snapshotID];
  id location = (id)BYMetadataFromBackup();

  os_log_t v5 = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)v9, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Chosen backup has metadata: %@", v9, 0xCu);
  }
  objc_storeStrong((id *)&v5, 0);
  id v3 = location;
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_1001759C0(id *a1, uint64_t a2)
{
  char v27 = a1;
  uint64_t v26 = a2;
  v25[1] = a1;
  id v3 = [a1[4] proximitySetupController];
  v25[0] = [v3 sharingMessageSession];

  unsigned __int8 v24 = 0;
  id v4 = [a1[4] proximitySetupController];
  id v5 = [v4 information];
  id v6 = [v5 hasTransferrableTelephonyPlan];
  unsigned __int8 v7 = [v6 BOOLValue];

  unsigned __int8 v24 = v7;
  id v8 = sub_100175CF0();
  v28[0] = v8;
  v29[0] = &off_1002C1910;
  id v9 = sub_100175DFC();
  v28[1] = v9;
  unsigned __int8 v10 = +[NSNumber numberWithBool:v7 & 1];
  v29[1] = v10;
  char v11 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
  id v23 = +[NSMutableDictionary dictionaryWithDictionary:v11];

  if (v26 == 1 && v25[0])
  {
    id v12 = sub_100175F08();
    [v23 setObject:v25[0] forKeyedSubscript:v12];
  }
  id location = [sub_100176014() flowWithOptions:v23];
  if (location)
  {
    id v13 = _NSConcreteStackBlock;
    int v14 = -1073741824;
    int v15 = 0;
    char v16 = sub_10017612C;
    id v17 = &unk_1002B3EC0;
    id v18 = a1[4];
    id v19 = location;
    id v20 = a1[5];
    [location firstViewController:&v13];
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    int v21 = 0;
  }
  else
  {
    (*((void (**)(void))a1[5] + 2))();
    int v21 = 1;
  }
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(v25, 0);
}

id sub_100175CF0()
{
  id v4 = (void **)sub_1001767E4();
  if (!v4)
  {
    uint64_t v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoFlowTypeKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMTransferController.m", 27, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  id v2 = *v4;

  return v2;
}

id sub_100175DFC()
{
  id v4 = (void **)sub_100176BD0();
  if (!v4)
  {
    uint64_t v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoHasTransferablePlanKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMTransferController.m", 29, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  id v2 = *v4;

  return v2;
}

id sub_100175F08()
{
  id v4 = (void **)sub_100176D3C();
  if (!v4)
  {
    uint64_t v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoMessageSessionKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMTransferController.m", 28, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  id v2 = *v4;

  return v2;
}

id sub_100176014()
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E10;
  uint64_t v13 = qword_100321E10;
  if (!qword_100321E10)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_100176EA8;
    id v6 = &unk_1002B1248;
    unsigned __int8 v7 = &v9;
    sub_100176EA8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_10017612C(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v13 = a1;
  BOOL v12 = location[0] != 0;
  if (location[0])
  {
    [*(id *)(a1 + 32) setSetupFlow:*(void *)(a1 + 40)];
    int v3 = *(void **)(a1 + 32);
    id v4 = [v3 setupFlow];
    [v4 setDelegate:v3];
  }
  else
  {
    id v5 = dispatch_get_global_queue(0, 0);
    dispatch_block_t block = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    uint64_t v9 = sub_100176298;
    unsigned __int8 v10 = &unk_1002B0D20;
    id v11 = *(id *)(a1 + 32);
    dispatch_async(v5, &block);

    objc_storeStrong(&v11, 0);
  }
  if (*(void *)(a1 + 48)) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  objc_storeStrong(location, 0);
}

id sub_100176298(uint64_t a1)
{
  return [*(id *)(a1 + 32) _endProximityIfApplicable:a1, a1];
}

void sub_100176390(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) proximitySetupController];
  id v3 = [v2 information];
  id v4 = [v3 appleID];
  BOOL v5 = v4 != 0;

  BOOL v10 = v5;
  id v6 = [*(id *)(a1 + 32) miscState];
  id v7 = [v6 migrationManager];
  unsigned __int8 v8 = [v7 willMigrate];

  if (!v10 && (v8 & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 32) proximitySetupController];
    [v9 setupFinished];
  }
}

uint64_t sub_1001767E4()
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321DF0;
  uint64_t v13 = qword_100321DF0;
  if (!qword_100321DF0)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    BOOL v5 = sub_1001768E4;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001768E4((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001768E4(uint64_t a1)
{
  id v2 = (void *)sub_100176950();
  uint64_t result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321DF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100176950()
{
  uint64_t v3 = sub_100176A84();
  if (!v3)
  {
    uint64_t v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SIMSetupSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMTransferController.m", 25, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_100176A84()
{
  if (!qword_100321DF8) {
    sub_100176B3C();
  }
  return qword_100321DF8;
}

uint64_t sub_100176B3C()
{
  uint64_t result = _sl_dlopen();
  qword_100321DF8 = result;
  return result;
}

uint64_t sub_100176BD0()
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321E00;
  uint64_t v13 = qword_100321E00;
  if (!qword_100321E00)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    BOOL v5 = sub_100176CD0;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100176CD0((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100176CD0(uint64_t a1)
{
  id v2 = (void *)sub_100176950();
  uint64_t result = dlsym(v2, "TSUserInfoHasTransferablePlanKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321E00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100176D3C()
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321E08;
  uint64_t v13 = qword_100321E08;
  if (!qword_100321E08)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    BOOL v5 = sub_100176E3C;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100176E3C((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100176E3C(uint64_t a1)
{
  id v2 = (void *)sub_100176950();
  uint64_t result = dlsym(v2, "TSUserInfoMessageSessionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321E08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100176EA8(NSAssertionHandler *a1)
{
  sub_100176950();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getTSSIMSetupFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySIMTransferController.m", 26, @"Unable to find class %s", "TSSIMSetupFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321E10 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

NSString *__cdecl sub_1001777C8(id a1, BOOL a2)
{
  if (a2) {
    return (NSString *)@"YES";
  }
  else {
    return (NSString *)@"NO";
  }
}

double sub_100177800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2114;
  *(void *)(a1 + 24) = a4;
  return result;
}

id sub_100178330()
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E18;
  uint64_t v13 = qword_100321E18;
  if (!qword_100321E18)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    BOOL v5 = sub_10017A1E4;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10017A1E4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001787FC(id *a1)
{
  id v26[2] = a1;
  v26[1] = a1;
  v26[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  id v2 = [v26[0] fetchAuthenticationContextForApplePay];
  id v25 = [v2 externalizedContext];

  char v16 = _NSConcreteStackBlock;
  int v17 = -1073741824;
  int v18 = 0;
  id v19 = sub_100178ACC;
  id v20 = &unk_1002B1758;
  id v21 = v25;
  id v22 = a1[4];
  id v23 = a1[5];
  id location = objc_retainBlock(&v16);
  id v3 = [sub_10017902C() sharedInstance];
  id v4 = [a1[4] existingSettings];
  id v5 = [v4 walletData];
  [v3 setBackupMetadata:v5];

  id v6 = &_dispatch_main_q;
  id v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  BOOL v10 = sub_100179144;
  int v11 = &unk_1002B3F90;
  id v12 = a1[4];
  id v13 = v25;
  id v14 = a1[5];
  id v15 = location;
  dispatch_async((dispatch_queue_t)v6, &v7);

  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v25, 0);
  objc_storeStrong(v26, 0);
}

void sub_100178ACC(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = [objc_alloc((Class)sub_100178C24()) initWithSetupAssistant:1];
  [location[0] setExternalizedContext:*(void *)(a1 + 32)];
  [location[0] setDelegate:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 40) _createPaymentControllerWithContext:location[0]];
  [*(id *)(a1 + 40) setPaymentController:v2];

  id v3 = [*(id *)(a1 + 40) paymentController];
  id v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_100178D3C;
  int v8 = &unk_1002B3F40;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  [v3 prepareForPresentationWithCompletion:&v4];

  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_100178C24()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E28;
  uint64_t v13 = qword_100321E28;
  if (!qword_100321E28)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_10017A5A4;
    int v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10017A5A4(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100178D3C(uint64_t a1, char a2, id obj, uint64_t a4)
{
  uint64_t v23 = a1;
  char v22 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v20 = a4;
  uint64_t v19 = a1;
  if ((v22 & 1) != 0 && location)
  {
    [*(id *)(a1 + 32) setInitialViewController:location];
    id v6 = [*(id *)(a1 + 32) chronicle];
    [v6 recordFeatureShown:1];

    if (*(void *)(a1 + 40)) {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    int v18 = 1;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10017900C((uint64_t)buf, v22 & 1, v20);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Skipping Apple Pay because it did not need to run (%d) and/or requirements were not met (%lu)", buf, 0x12u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v7 = [*(id *)(a1 + 32) buddyPreferences];
    char v8 = 0;
    if (([v7 BOOLForKey:@"Payment2Presented"] & 1) == 0) {
      char v8 = v22;
    }

    if (v8)
    {
      char v16 = 1;
      char v14 = 0;
      char v9 = 0;
      if ((v20 & 2) != 0)
      {
        id v15 = [*(id *)(a1 + 32) capabilities];
        char v14 = 1;
        char v9 = [v15 canShowPasscodeScreen] ^ 1;
      }
      if (v14) {

      }
      if (v9)
      {
        char v16 = 0;
      }
      else
      {
        char v12 = 0;
        char v10 = 0;
        if (v20)
        {
          id v13 = [*(id *)(a1 + 32) capabilities];
          char v12 = 1;
          char v10 = [v13 canShowAppleIDScreen] ^ 1;
        }
        if (v12) {

        }
        if (v10) {
          char v16 = 0;
        }
      }
      if (v16)
      {
        id v11 = [*(id *)(a1 + 32) flowSkipController];
        [v11 didSkipFlow:BYFlowSkipIdentifierApplePay];
      }
    }
    if (*(void *)(a1 + 40)) {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    int v18 = 0;
  }
  objc_storeStrong(&location, 0);
}

double sub_10017900C(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)&double result = 67109376;
  *(_DWORD *)a1 = 67109376;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2048;
  *(void *)(a1 + 10) = a3;
  return result;
}

id sub_10017902C()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E30;
  uint64_t v13 = qword_100321E30;
  if (!qword_100321E30)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_10017A6E8;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_10017A6E8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100179144(uint64_t a1)
{
  v14[2] = (id)a1;
  v14[1] = (id)a1;
  id v2 = [*(id *)(a1 + 32) miscState];
  id v3 = [v2 walletProvisioningContext];

  if (v3)
  {
    v14[0] = [objc_alloc((Class)sub_100178C24()) initWithSetupAssistant:1];
    [v14[0] setExternalizedContext:*(void *)(a1 + 40)];
    [v14[0] setDelegate:*(void *)(a1 + 32)];
    id location = [objc_alloc((Class)sub_10017930C()) initWithSetupAssistantContext:v14[0]];
    id v4 = [*(id *)(a1 + 32) miscState];
    id v5 = [v4 walletProvisioningContext];
    id v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    uint64_t v9 = sub_100179424;
    char v10 = &unk_1002B3F68;
    id v11 = *(id *)(a1 + 32);
    id v12 = *(id *)(a1 + 48);
    [location expressSetupFlowForSetupProvisioningContext:v5 withCompletion:&v6];

    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(v14, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

id sub_10017930C()
{
  uint64_t v9 = 0;
  char v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E40;
  uint64_t v13 = qword_100321E40;
  if (!qword_100321E40)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_10017AAA8;
    id v6 = &unk_1002B1248;
    int v7 = &v9;
    sub_10017AAA8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100179424(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  int v3 = &_dispatch_main_q;
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  int v7 = sub_10017955C;
  uint64_t v8 = &unk_1002B1758;
  id v9 = a1[4];
  id v10 = location[0];
  v11[0] = a1[5];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_10017955C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id result = [(objc_class *)a1[4].isa setInitialViewController:a1[5].isa];
  if (a1[6].isa)
  {
    if (a1[5].isa)
    {
      id v3 = [(objc_class *)a1[4].isa chronicle];
      [v3 recordFeatureShown:1];
    }
    else
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
      {
        int v4 = oslog[0];
        os_log_type_t v5 = v7;
        sub_10004B24C(v6);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping Apple Pay because it did not return a view controller for the express flow", (uint8_t *)v6, 2u);
      }
      objc_storeStrong((id *)oslog, 0);
    }
    return (id)(*((uint64_t (**)(Class, BOOL))a1[6].isa + 2))(a1[6].isa, a1[5].isa != 0);
  }
  return result;
}

id sub_100179900()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E48;
  uint64_t v13 = qword_100321E48;
  if (!qword_100321E48)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    os_log_type_t v5 = sub_10017ABEC;
    int v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_10017ABEC(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100179B8C(void *a1, void *a2, uint64_t a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v8 = a3;
  os_log_type_t v7 = a1;
  if (location[0])
  {
    (*(void (**)(void))(a1[4] + 16))();
    int v6 = 1;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046588((uint64_t)buf, v8);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "ExpressController did not need return a setupProvisioningContext; requirements were not met (%lu)",
        buf,
        0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[4]) {
      (*(void (**)(void))(a1[4] + 16))();
    }
    int v6 = 0;
  }
  objc_storeStrong(location, 0);
}

void sub_10017A1E4(NSAssertionHandler *a1)
{
  sub_10017A328();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentSetupAssistantController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getPKPaymentSetupAssistantControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyPaymentController.m", 53, @"Unable to find class %s", "PKPaymentSetupAssistantController" file lineNumber description];

    __break(1u);
  }
  qword_100321E18 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10017A328()
{
  if (!sub_10017A458())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *PassKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyPaymentController.m", 50, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10017A458()
{
  if (!qword_100321E20) {
    sub_10017A510();
  }
  return qword_100321E20;
}

uint64_t sub_10017A510()
{
  uint64_t result = _sl_dlopen();
  qword_100321E20 = result;
  return result;
}

void sub_10017A5A4(NSAssertionHandler *a1)
{
  sub_10017A328();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKSetupAssistantContext");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getPKSetupAssistantContextClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyPaymentController.m", 51, @"Unable to find class %s", "PKSetupAssistantContext" file lineNumber description];

    __break(1u);
  }
  qword_100321E28 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10017A6E8(NSAssertionHandler *a1)
{
  sub_10017A82C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPassLibrary");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getPKPassLibraryClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyPaymentController.m", 47, @"Unable to find class %s", "PKPassLibrary" file lineNumber description];

    __break(1u);
  }
  qword_100321E30 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10017A82C()
{
  if (!sub_10017A95C())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *PassKitCoreLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyPaymentController.m", 46, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_10017A95C()
{
  if (!qword_100321E38) {
    sub_10017AA14();
  }
  return qword_100321E38;
}

uint64_t sub_10017AA14()
{
  uint64_t result = _sl_dlopen();
  qword_100321E38 = result;
  return result;
}

void sub_10017AAA8(NSAssertionHandler *a1)
{
  sub_10017A328();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentSetupAssistantExpressController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getPKPaymentSetupAssistantExpressControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyPaymentController.m", 57, @"Unable to find class %s", "PKPaymentSetupAssistantExpressController" file lineNumber description];

    __break(1u);
  }
  qword_100321E40 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_10017ABEC(NSAssertionHandler *a1)
{
  sub_10017A328();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentVerificationMethodsViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getPKPaymentVerificationMethodsViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyPaymentController.m", 55, @"Unable to find class %s", "PKPaymentVerificationMethodsViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321E48 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10017B3E0(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10017B570(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, char a7)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v16 = 0;
  objc_storeStrong(&v16, a3);
  id v15 = 0;
  objc_storeStrong(&v15, a4);
  id v14 = 0;
  objc_storeStrong(&v14, a5);
  id v13 = 0;
  objc_storeStrong(&v13, a6);
  [a1[4] setHandshake:location[0] a1];
  [a1[4] updateInformation:v16];
  [a1[4] setHasAppliedSettings:1];
  [a1[4] setModel:v14];
  [a1[4] setDeviceClass:v13];
  [a1[4] _setConnected:a7 & 1];
  [a1[4] _updatedMessageSession:v15];
  [a1[4] _setSetupIntent];
  [a1[4] prepareForDependentSetup];
  [a1[4] setHasResumed:1];
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_10017C1A0(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)SASProximityMigrationStartAction);
  id v2 = [a1[4] session];
  id v3 = [v2 sendAction:location[0]];

  objc_storeStrong(location, 0);
}

uint64_t sub_10017C874(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10017CA20(uint64_t a1)
{
  [*(id *)(a1 + 32) setupFinished:a1 a1];
  id result = [*(id *)(a1 + 32) shouldEnableProximity];
  if (result) {
    return [*(id *)(a1 + 32) beginAdvertisingProximitySetup];
  }
  return result;
}

id *sub_10017CF04(id *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (id *)[result[4] prepareForDependentSetup];
  }
  return result;
}

double sub_10017E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  return result;
}

void sub_10017E308(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers:a1, a1];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10017E46C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers:a1, a1];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10017E58C(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v8 = a1;
  memset(v6, 0, sizeof(v6));
  id v2 = [*(id *)(a1 + 32) observers];
  id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v6[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(void *)v6[2] != v4) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(v6[1] + 8 * i);
        [v7 connectionTerminated];
      }
      id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_10017EE94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  id v3 = [*(id *)(a1 + 32) deviceClass];
  [v2 displayIncompatibleProximityPairingFromDeviceClass:v3];
}

void sub_10017EF08(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = +[NSBundle mainBundle];
  id v3 = [(NSBundle *)v2 localizations];
  id v4 = [*(id *)(a1 + 32) receivedLanguages];
  os_log_type_t v5 = +[NSBundle preferredLocalizationsFromArray:v3 forPreferences:v4];
  location[0] = [(NSArray *)v5 firstObject];

  id v6 = [*(id *)(a1 + 32) buddyPreferences];
  id v7 = [v6 objectForKey:@"UserChoseLanguage"];

  if (v7)
  {
    uint64_t v8 = +[NSLocale preferredLanguages];
    id v9 = [(NSArray *)v8 firstObject];
    id v10 = location[0];
    location[0] = v9;
  }
  id v11 = [*(id *)(a1 + 32) delegate];
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  id v14 = [*(id *)(a1 + 32) accessibilitySettings];
  [v11 displayProximityPinCode:v12 language:location[0] visual:v13 & 1 accessibilitySettings:v14];

  objc_storeStrong(location, 0);
}

void sub_10017F218(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate:a1];
  [v1 dismissProximityPinCode];
}

void sub_10017FA34(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate:a1, a1];
  [v1 displayUpdateRequiredToMigrate];
}

id sub_10017FA84(uint64_t a1)
{
  return [*(id *)(a1 + 32) applySettings:a1, a1];
}

void sub_10017FF90(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v2 = [a1[4] delegate];
  [v2 willPerformProximityHandshake];

  location[0] = [a1[4] performHandshake];
  if (location[0])
  {
    id v3 = [a1[4] delegate];
    [v3 unableToApplyProximitySettings];
  }
  else
  {
    [a1[4] readyForInformation];
  }
  objc_storeStrong(location, 0);
}

void sub_100180148(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v8 = a1;
  memset(v6, 0, sizeof(v6));
  id v2 = [*(id *)(a1 + 32) observers];
  id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v6[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(void *)v6[2] != v4) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(v6[1] + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v7 receivedBackupAction:*(void *)(a1 + 40)];
        }
      }
      id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100182D44(uint64_t a1, void *a2, unsigned char *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v16 = a3;
  char v14 = 0;
  BOOL v5 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    id v15 = [location[0] detailText];
    char v14 = 1;
    BOOL v5 = [v15 length] != 0;
  }
  if (v14) {

  }
  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = +[NSBundle mainBundle];
    uint64_t v8 = [(NSBundle *)v7 localizedStringForKey:@"MULTILINGUAL_EXPRESS_KEYBOARD_WITH_SOFTWARE_LAYOUT" value:&stru_1002B4E18 table:@"Localizable"];
    id v9 = [location[0] title];
    id v10 = [location[0] detailText];
    id v11 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v8, v9, v10);
    [v6 appendString:v11];
  }
  else
  {
    uint64_t v12 = *(void **)(a1 + 32);
    id v13 = [location[0] title];
    [v12 appendString:v13];
  }
  if (v16 != (char *)[*(id *)(a1 + 40) count] - 1) {
    [*(id *)(a1 + 32) appendString:@"\n"];
  }
  objc_storeStrong(location, 0);
}

double sub_1001853EC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)&double result = 134218496;
  *(_DWORD *)a1 = 134218496;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  return result;
}

void sub_100185A04(uint64_t a1, char a2, id obj)
{
  uint64_t v36 = a1;
  char v35 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v33 = a1;
  char v32 = 0;
  if ((v35 & 1) == 0)
  {
    if (byte_100321E50)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = oslog;
        os_log_type_t v5 = v30;
        sub_10004B24C(buf);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Showing iCloud Analytics because re-opt was requested", buf, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      char v32 = 1;
    }
    else
    {
      id v28 = 0;
      id v6 = +[BuddyAccountTools sharedBuddyAccountTools];
      id obja = 0;
      id v7 = [v6 iCloudAnalyticsOptInError:&obja];
      objc_storeStrong(&v28, obja);
      id v27 = v7;

      if (v28)
      {
        os_log_t v22 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = v27;
          char v19 = 0;
          char v17 = 0;
          if (_BYIsInternalInstall())
          {
            id v11 = (NSString *)v28;
          }
          else if (v28)
          {
            id v20 = [v28 domain];
            char v19 = 1;
            id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v20, [v28 code]);
            id v18 = v11;
            char v17 = 1;
          }
          else
          {
            id v11 = 0;
          }
          sub_100185E80((uint64_t)v38, (uint64_t)v10, (uint64_t)v11);
          _os_log_impl((void *)&_mh_execute_header, v22, v21, "Unable to read iCloud Analytics value from server, iCloudAnalyticsOptIn = %{public}@, error = %@", v38, 0x16u);
          if (v17) {

          }
          if (v19) {
        }
          }
        objc_storeStrong((id *)&v22, 0);
      }
      else if (!v27 || [v27 integerValue] == (id)-1)
      {
        os_log_t v25 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = v25;
          os_log_type_t v9 = v24;
          sub_10004B24C(v23);
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "Showing iCloud analytics because it's never been seen", v23, 2u);
        }
        objc_storeStrong((id *)&v25, 0);
        char v32 = 1;
      }
      objc_storeStrong(&v27, 0);
      objc_storeStrong(&v28, 0);
    }
  }
  if (v32) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) |= 1uLL;
  }
  if (*(void *)(a1 + 40))
  {
    os_log_t v16 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      int v13 = *(unsigned char *)(a1 + 56) & 1;
      int v14 = *(unsigned char *)(a1 + 57) & 1;
      id v15 = [*(id *)(a1 + 32) miscState];
      sub_100185EA0((uint64_t)v37, v12, v13, v14, [v15 launchedWithCombinedAnalyticsMismatch] & 1, *(unsigned char *)(a1 + 58) & 1);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Diagnostics display mode = %ld, factors: Restricted = %d, AlreadyYes = %d, Mismatch = %d, AlreadyPresented = %d", v37, 0x24u);
    }
    objc_storeStrong((id *)&v16, 0);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&location, 0);
}

double sub_100185E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  return result;
}

double sub_100185EA0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  *(void *)&double result = 134219008;
  *(_DWORD *)a1 = 134219008;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  return result;
}

void sub_100186368(uint64_t a1, char a2, id obj)
{
  uint64_t v15 = a1;
  char v14 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = (os_log_t)a1;
  if (v14)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v11, "Successfully wrote %@ to IdMS", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      char v8 = 0;
      char v6 = 0;
      if (_BYIsInternalInstall())
      {
        os_log_type_t v5 = (NSString *)location;
      }
      else if (location)
      {
        id v9 = [location domain];
        char v8 = 1;
        os_log_type_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v9, [location code]);
        id v7 = v5;
        char v6 = 1;
      }
      else
      {
        os_log_type_t v5 = 0;
      }
      sub_1000DC614((uint64_t)v16, v4, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to write %@ to IdMS, error: %{public}@", v16, 0x16u);
      if (v6) {

      }
      if (v8) {
    }
      }
    objc_storeStrong((id *)&v10, 0);
  }
  objc_storeStrong(&location, 0);
}

double sub_100186970(uint64_t a1, int a2, int a3, int a4)
{
  *(void *)&double result = 67109632;
  *(_DWORD *)a1 = 67109632;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  return result;
}

void sub_100186D3C(uint64_t a1, char a2)
{
  uint64_t v12 = a1;
  char v11 = a2;
  uint64_t v10 = a1;
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = _NSConcreteStackBlock;
    int v4 = -1073741824;
    int v5 = 0;
    char v6 = sub_100186E2C;
    id v7 = &unk_1002B3A18;
    id v8 = *(id *)(a1 + 40);
    char v9 = v11 & 1;
    [v2 _prepareAnalyticsWithCompletion:&v3];
    objc_storeStrong(&v8, 0);
  }
  else if (*(void *)(a1 + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100186E2C(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 32) + 16))(*(void *)(result + 32), *(unsigned char *)(result + 40) & 1);
  }
  return result;
}

void sub_100186E74(id *a1)
{
  id v9[2] = a1;
  v9[1] = a1;
  id v2 = a1[4];
  id v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  char v6 = sub_100186F50;
  id v7 = &unk_1002B1668;
  id v8 = a1[4];
  v9[0] = a1[5];
  [v2 _determineDisplayMode:&v3];
  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

uint64_t sub_100186F50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100188760(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  oslog[1] = a1;
  if (v15)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        int v5 = (NSString *)v15;
      }
      else if (v15)
      {
        id v12 = [v15 domain];
        char v11 = 1;
        int v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [v15 code]);
        id v10 = v5;
        char v9 = 1;
      }
      else
      {
        int v5 = 0;
      }
      sub_10004B238((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Failed to fetch cut off age for child account: %@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [location[0] childCutOffAge];
      id v7 = [location[0] childCutOffAgeLocalized];
      sub_10007D958((uint64_t)v17, (uint64_t)v6, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Did fetch cut off age for child account: %ld '%{public}@'", v17, 0x16u);
    }
    objc_storeStrong((id *)&v8, 0);
    (*((void (**)(Class, id, void))a1[4].isa + 2))(a1[4].isa, [location[0] childCutOffAge], 0);
  }
  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

id sub_100188AAC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E58;
  uint64_t v13 = qword_100321E58;
  if (!qword_100321E58)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_100189374;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_100189374(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_100189374(NSAssertionHandler *a1)
{
  sub_1001894B8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("AISChildSetupPresenter");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getAISChildSetupPresenterClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyChildSetupPresenter.m", 19, @"Unable to find class %s", "AISChildSetupPresenter" file lineNumber description];

    __break(1u);
  }
  qword_100321E58 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001894B8()
{
  if (!sub_1001895E8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *AppleIDSetupUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyChildSetupPresenter.m", 18, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001895E8()
{
  if (!qword_100321E60) {
    sub_1001896A0();
  }
  return qword_100321E60;
}

uint64_t sub_1001896A0()
{
  uint64_t result = _sl_dlopen();
  qword_100321E60 = result;
  return result;
}

void sub_100189898(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v5 = -[BuddyMigrationSourceErrorController initWithError:]([BuddyMigrationSourceLockscreenErrorController alloc], "initWithError:", *(void *)(a1 + 32), a1, a1);
    [*(id *)(a1 + 40) setErrorController:v5];

    id v3 = [*(id *)(a1 + 40) navigationController];
    id v4 = [*(id *)(a1 + 40) errorController];
  }
  else
  {
    NSAssertionHandler v2 = objc_alloc_init(BuddyMigrationLockscreenFinishedController);
    [*(id *)(a1 + 40) setFinishedController:v2 a1 a1];

    id v3 = [*(id *)(a1 + 40) navigationController];
    id v4 = [*(id *)(a1 + 40) finishedController];
  }
  [v3 pushViewController:v4 animated:1];
}

void sub_100189C58(id a1)
{
  id v1 = objc_alloc_init(BuddyCloudConfigManager);
  NSAssertionHandler v2 = (void *)qword_100321E68;
  qword_100321E68 = (uint64_t)v1;
}

id sub_100189ED4(NSObject *a1, int a2)
{
  id v10 = a1;
  int v9 = a2;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Profile list has changed. Reload skip keys", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return [(objc_class *)a1[4].isa _updateSkipKeysWithCachedDetails:*((void *)a1[4].isa + 2)];
}

double sub_100189F8C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)&double result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1026;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

id sub_10018A1F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSkipKeysWithCachedDetails:*(void *)(a1 + 40) a1 a1];
}

void sub_10018A524(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mdmReturnToServiceController:a1, a1];
  char v3 = 0;
  if ([v2 shouldDoReturnToService]) {
    char v3 = [*(id *)(a1 + 40) isEqualToString:kMCCCSkipWiFi] ^ 1;
  }

  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 24) containsObject:*(void *)(a1 + 40)] & 1;
  }
}

void sub_10018B240(id *a1, char a2)
{
  char v14 = a1;
  char v13 = a2;
  v12[1] = a1;
  [a1[4] setRequiresTermsAcceptanceForPrimaryAccount:a2 & 1];
  id v3 = a1[4];
  id v4 = a1[5];
  int v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_10018B360;
  int v9 = &unk_1002B1758;
  id v10 = a1[4];
  id v11 = a1[5];
  v12[0] = a1[6];
  [v3 _startSilentEscrowRecordRepairIfNecessaryWithAccount:v4 completion:&v5];
  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

uint64_t sub_10018B360(uint64_t a1)
{
  uint64_t v74 = a1;
  uint64_t v73 = a1;
  char v72 = 0;
  id v2 = +[BYSetupStateManager sharedManager];
  char v70 = 0;
  unsigned __int8 v3 = 1;
  if ([v2 restoreType] != (id)1)
  {
    id v71 = [*(id *)(a1 + 32) miscState];
    char v70 = 1;
    unsigned __int8 v3 = [v71 forcePrimaryAppleIDAuthentication];
  }
  if (v70) {

  }
  char v72 = v3 & 1;
  if (v3)
  {
    [*(id *)(a1 + 32) setAccountToRepair:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setPerformAuthKitRepair:0];
  }
  else
  {
    id v4 = *(void **)(a1 + 32);
    id v64 = _NSConcreteStackBlock;
    int v65 = -1073741824;
    int v66 = 0;
    int v67 = sub_10018BB14;
    int v68 = &unk_1002B4160;
    id v69 = *(id *)(a1 + 32);
    [v4 _determineAccountToRepair:&v64];
    id v5 = [*(id *)(a1 + 32) accountToRepair];

    if (!v5)
    {
      id v6 = [*(id *)(a1 + 32) _accountToUpdate];
      [*(id *)(a1 + 32) setAccountForSecurityUpgrade:v6];
    }
    objc_storeStrong(&v69, 0);
  }
  char v63 = 0;
  id v7 = [*(id *)(a1 + 32) proximitySetupController];
  unsigned __int8 v8 = [v7 hasAppliedSettings];

  char v63 = v8 & 1;
  if (!*(void *)(a1 + 40))
  {
    id v16 = [*(id *)(a1 + 32) miscState];
    id v17 = [v16 iCloudAppleIdFromActivation];
    id v18 = [v17 length];

    if (v18)
    {
      id v19 = [*(id *)(a1 + 32) miscState];
      id v20 = [v19 iCloudAppleIdFromActivation];
      [*(id *)(a1 + 32) setExistingAccountUsername:v20];

      [*(id *)(a1 + 32) setExistingAccountType:1];
      os_log_t v54 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v21 = v54;
        os_log_type_t v22 = v53;
        sub_10004B24C(v52);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Buddy AppleID choice flow: Found iCloud account from activation.", v52, 2u);
      }
      objc_storeStrong((id *)&v54, 0);
    }
    else
    {
      id v23 = +[SSAccountStore defaultStore];
      id v24 = [v23 activeAccount];
      id v25 = [v24 accountName];
      [*(id *)(a1 + 32) setExistingAccountUsername:v25];

      id v26 = [*(id *)(a1 + 32) existingAccountUsername];
      id v27 = [v26 length];

      if (v27)
      {
        [*(id *)(a1 + 32) setExistingAccountType:2];
        os_log_t v51 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          id v28 = v51;
          os_log_type_t v29 = v50;
          sub_10004B24C(v49);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Buddy AppleID choice flow: Found Store account.", v49, 2u);
        }
        objc_storeStrong((id *)&v51, 0);
      }
      else
      {
        id v30 = [*(id *)(a1 + 32) proximitySetupController];
        id v31 = [v30 information];
        id location = [v31 appleID];

        if (location)
        {
          os_log_t v47 = (os_log_t)(id)_BYLoggingFacility();
          os_log_type_t v46 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            char v32 = v47;
            os_log_type_t v33 = v46;
            sub_10004B24C(v45);
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "Buddy AppleID choice flow: Found Apple ID from proximity", v45, 2u);
          }
          objc_storeStrong((id *)&v47, 0);
          [*(id *)(a1 + 32) setExistingAccountUsername:location];
          [*(id *)(a1 + 32) setExistingAccountType:1];
        }
        objc_storeStrong(&location, 0);
      }
    }
    goto LABEL_36;
  }
  id v9 = [*(id *)(a1 + 32) accountToRepair];
  char v61 = 0;
  if (v9
    || (id v62 = [*(id *)(a1 + 32) accountForSecurityUpgrade],
        char v61 = 1,
        char v10 = 0,
        v62))
  {
    char v10 = v63 ^ 1;
  }
  if (v61) {

  }
  if (v10)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v59 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = oslog;
      os_log_type_t v12 = v59;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Buddy AppleID choice flow: account needs updating.", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
LABEL_36:
    id v34 = [*(id *)(a1 + 32) buddyPreferences];
    char v43 = 0;
    char v41 = 0;
    BOOL v35 = 0;
    if ([v34 BOOLForKey:@"AppleIDPB10Presented"])
    {
      id v44 = [*(id *)(a1 + 32) accountToRepair];
      char v43 = 1;
      BOOL v35 = 0;
      if (!v44)
      {
        id v42 = [*(id *)(a1 + 32) accountForSecurityUpgrade];
        char v41 = 1;
        BOOL v35 = v42 == 0;
      }
    }
    if (v41) {

    }
    if (v43) {
    if (!v35)
    }
      return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
    os_log_t v40 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v39 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = v40;
      os_log_type_t v37 = v39;
      sub_10004B24C(v38);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping AppleID Setup: already done.", (uint8_t *)v38, 2u);
    }
    objc_storeStrong((id *)&v40, 0);
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  os_log_t v57 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    char v13 = v57;
    os_log_type_t v14 = v56;
    sub_10004B24C(v55);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Skipping AppleID Setup: iCloud account already present, no upgrade needed.", v55, 2u);
  }
  objc_storeStrong((id *)&v57, 0);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10018BB14(id *a1, void *a2, char a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setAccountToRepair:location[0] a1];
  [a1[4] setPerformAuthKitRepair:a3 & 1];
  objc_storeStrong(location, 0);
}

void sub_10018C3AC(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v12 = 0;
  objc_storeStrong(&v12, a3);
  oslog[1] = a1;
  if (v12)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      id v5 = [(objc_class *)a1[4].isa aa_altDSID];
      char v9 = 0;
      char v7 = 0;
      if (_BYIsInternalInstall())
      {
        id v6 = (NSString *)v12;
      }
      else if (v12)
      {
        id v10 = [v12 domain];
        char v9 = 1;
        id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v10, [v12 code]);
        unsigned __int8 v8 = v6;
        char v7 = 1;
      }
      else
      {
        id v6 = 0;
      }
      sub_1000DC614((uint64_t)buf, (uint64_t)v5, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to get accepted terms info for alt-DSID %@: %{public}@", buf, 0x16u);
      if (v7) {

      }
      if (v9) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  objc_storeStrong(&v12, 0);
  objc_storeStrong(location, 0);
}

void sub_10018C9AC(NSObject *a1, char a2, id obj)
{
  id v11 = a1;
  char v10 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (v10)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [(objc_class *)a1[4].isa altDSID];
      sub_10004B238((uint64_t)buf, (uint64_t)v4);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v7, "Successfully started silent escrow record repair flow for account with altDSID (%@)", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v6 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v5 = [(objc_class *)a1[4].isa altDSID];
      sub_1000DC614((uint64_t)v12, (uint64_t)v5, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to start silent escrow record repair flow for account with altDSID (%@) with error (%{public}@)", v12, 0x16u);
    }
    objc_storeStrong((id *)&v6, 0);
  }
  if (a1[5].isa) {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

uint64_t sub_10018D74C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  uint64_t result = (uint64_t)[(objc_class *)a1[4].isa waitingForMigration];
  if (result)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v3 = oslog[0];
      os_log_type_t v4 = v6;
      sub_10004B24C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Managed configuration migration is taking a while; showing completing setup UI...",
        (uint8_t *)v5,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
    uint64_t result = (uint64_t)[(objc_class *)a1[4].isa setPaneVisible:1];
    if (a1[5].isa) {
      return (*((uint64_t (**)(void))a1[5].isa + 2))();
    }
  }
  return result;
}

void sub_10018D82C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v13;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting managed configuration migration...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v4 = [(objc_class *)a1[4].isa managedConfiguration];
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  unsigned __int8 v8 = sub_10018D994;
  char v9 = &unk_1002B0CD0;
  char v10 = a1[4].isa;
  id v11 = a1[5].isa;
  [v4 waitForMigrationIncludingPostRestoreMigration:1 completion:&v5];

  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_10018D994(id *a1)
{
  id v9[2] = a1;
  v9[1] = a1;
  id v2 = &_dispatch_main_q;
  os_log_type_t v3 = _NSConcreteStackBlock;
  int v4 = -1073741824;
  int v5 = 0;
  int v6 = sub_10018DA8C;
  int v7 = &unk_1002B0CD0;
  id v8 = a1[4];
  v9[0] = a1[5];
  dispatch_async((dispatch_queue_t)v2, &v3);

  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10018DA8C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Managed configuration migration complete!", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa setWaitingForMigration:0];
  if ([(objc_class *)a1[4].isa isPaneVisible])
  {
    id v4 = [(objc_class *)a1[4].isa delegate];
    [v4 flowItemDone:a1[4].isa];
  }
  else if (a1[5].isa)
  {
    (*((void (**)(void))a1[5].isa + 2))();
  }
}

void sub_10018E350(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v18 = a1;
  char v17 = 0;
  if (a2 == 1)
  {
    char v17 = 0;
  }
  else if (a2 == 2)
  {
    char v17 = 1;
  }
  if (v17)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v3 = oslog;
      os_log_type_t v4 = v15;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning authentication and sign-in for iCloud account...", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v5 = [*(id *)(a1 + 32) proximitySetupController];
    id v6 = [v5 dependentController];
    int v7 = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    char v10 = sub_10018E538;
    id v11 = &unk_1002B3F68;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    [v6 waitForViewController:&v7];

    objc_storeStrong(&v13, 0);
    objc_storeStrong(&v12, 0);
  }
  else if (*(void *)(a1 + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10018E538(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [*(id *)(a1 + 32) setViewController:location[0]];
  os_log_type_t v3 = *(void **)(a1 + 32);
  id v4 = [v3 proximitySetupController];
  id v5 = [v4 dependentController];
  [v5 setDelegate:v3];

  id v6 = [*(id *)(a1 + 32) proximitySetupController];
  [v6 addObserver:*(void *)(a1 + 32)];

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), location[0] != 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10018EE2C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

id sub_10018EE7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flowItemDone:a1:a1];
}

void sub_10018F36C(uint64_t a1)
{
  uint64_t v38 = a1;
  uint64_t v37 = a1;
  char v36 = 0;
  id v2 = [*(id *)(a1 + 32) navigationController];
  id v3 = [v2 topViewController];
  id v4 = [*(id *)(a1 + 32) viewController];
  char v34 = 0;
  char v32 = 0;
  char isKindOfClass = 0;
  if (v3 == v4)
  {
    id v35 = [*(id *)(a1 + 32) controllers];
    char v34 = 1;
    id v33 = [v35 firstObject];
    char v32 = 1;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  if (v32) {

  }
  if (v34) {
  char v36 = isKindOfClass & 1;
  }
  char v31 = 0;
  char v31 = [*(id *)(a1 + 32) presentedPasscodeFlow] & 1;
  char v30 = 0;
  char v6 = 1;
  if ((isKindOfClass & 1) == 0) {
    char v6 = v31;
  }
  char v30 = v6;
  [*(id *)(a1 + 32) setPresentedPasscodeFlow:1];
  [*(id *)(a1 + 32) setPasscodeFlowCompletion:*(void *)(a1 + 40)];
  if (v30)
  {
    if (v31)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = oslog;
        os_log_type_t v8 = v28;
        sub_10004B24C(buf);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updating flow to show passcode flow next...", buf, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      id v9 = [*(id *)(a1 + 32) miscState];
      [v9 setHasPresentedPasscodeFlow:0];

      [*(id *)(a1 + 32) _updateClassListWithPasscodeShownInitially:0];
    }
    os_log_t v26 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      char v10 = v26;
      os_log_type_t v11 = v25;
      sub_10004B24C(v24);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Presenting biometric/passcode setup during sign-in...", v24, 2u);
    }
    objc_storeStrong((id *)&v26, 0);
    id v12 = [*(id *)(a1 + 32) viewController];

    if (v12)
    {
      id v13 = [*(id *)(a1 + 32) navigationFlowDelegate];
      id v14 = [*(id *)(a1 + 32) viewController];
      id v39 = v14;
      os_log_type_t v15 = +[NSArray arrayWithObjects:&v39 count:1];
      [v13 removeViewControllersOnNextPush:v15];
    }
    id v16 = *(void **)(a1 + 32);
    id v17 = [v16 controllers];
    id v18 = [v17 lastObject];
    [v16 flowItemDone:v18];
  }
  else
  {
    os_log_t v23 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = v23;
      os_log_type_t v20 = v22;
      sub_10004B24C(v21);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Updating flow to show passcode flow initially...", (uint8_t *)v21, 2u);
    }
    objc_storeStrong((id *)&v23, 0);
    [*(id *)(a1 + 32) _updateClassListWithPasscodeShownInitially:1];
  }
}

void sub_10018FDC4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

void sub_10018FE14(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

id sub_10018FE64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flowItemDone:a1];
}

void sub_100190134(NSObject *a1, char a2, id obj)
{
  id v13 = a1;
  char v12 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setSignInTask:0];
  id v4 = [(objc_class *)a1[4].isa proximitySetupController];
  unsigned __int8 v5 = [v4 hasConnection];

  if (v5)
  {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      char v6 = oslog[0];
      os_log_type_t v7 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Prematurely ending dependent flow after sign-in due to loss of proximity connection", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[4].isa _endFlowPrematurely];
  }
  objc_storeStrong(&location, 0);
}

void sub_100190320(uint64_t a1)
{
  uint64_t v12 = a1;
  uint64_t v11 = a1;
  id v2 = [*(id *)(a1 + 32) passcodeFlowCompletion];
  char v9 = 0;
  BOOL v3 = 0;
  if (!v2)
  {
    id v10 = [*(id *)(a1 + 32) signInTask];
    char v9 = 1;
    BOOL v3 = v10 == 0;
  }
  if (v9) {

  }
  if (v3)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Prematurely ending dependent flow due to loss of proximity connection", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 32) _endFlowPrematurely];
  }
}

void sub_100190FD4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 endPairing];
}

void sub_1001914F8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] setShouldOnlySetActiveStoreAccount:0];
  if (location[0])
  {
    [a1[4] _authenticateNextAccount];
  }
  else
  {
    id v3 = [a1[4] storeAccountsToSignIn];
    [v3 removeObjectAtIndex:0];

    [a1[4] _authenticateThenSignInNextAccount];
  }
  objc_storeStrong(location, 0);
}

void sub_100191AAC(NSObject *a1, char a2, id obj)
{
  os_log_type_t v21 = a1;
  char v20 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (v20)
  {
    [(objc_class *)a1[4].isa setActiveStoreAccount:a1[5].isa];
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        id v4 = (NSString *)location;
      }
      else if (location)
      {
        id v16 = [location domain];
        char v15 = 1;
        id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v16, [location code]);
        id v14 = v4;
        char v13 = 1;
      }
      else
      {
        id v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Failed to make store account active: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  os_log_type_t v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  char v9 = sub_100191D48;
  id v10 = &unk_1002B1780;
  uint64_t v12 = a1[6].isa;
  id v11 = location;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong((id *)&v12, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_100191D48(uint64_t result)
{
  if (*(void *)(result + 40)) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 40) + 16))(*(void *)(result + 40), *(void *)(result + 32));
  }
  return result;
}

void sub_1001921A4(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  os_log_type_t v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  char v9 = sub_1001922F4;
  id v10 = &unk_1002B4218;
  id v11 = location[0];
  v13[0] = a1[4];
  id v12 = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(v13, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001922F4(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = [*(id *)(a1 + 32) familyMembers];
  id v3 = [v2 buddy_mapSet:&stru_1002B41F0];
  location[0] = [v3 allObjects];

  if (*(void *)(a1 + 48)) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  objc_storeStrong(location, 0);
}

id sub_1001923AC(id a1, AMSFamilyMember *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] iTunesUsername];
  objc_storeStrong(location, 0);

  return v2;
}

void sub_100192E90(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v4 = [(objc_class *)a1[4].isa storeAppleIDController];
  [v4 showCredentialRecovery];
}

void sub_100192F58(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  id v1 = [location[0] signInController];
  char v2 = [v1 isMovingToParentViewController] ^ 1;

  if (v2)
  {
    id v3 = [location[0] storeAppleIDController];
    [v3 cancelAuthentication];
  }
  objc_storeStrong(location, 0);
}

void sub_100192FEC(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v26 = 0;
  objc_storeStrong(&v26, a3);
  v25[1] = a1;
  v25[0] = objc_loadWeakRetained(a1 + 5);
  id v5 = [v25[0] storeAppleIDController];
  id v6 = [v25[0] signInController];
  [v5 setAuthAttemptLandingViewController:v6];

  if (location[0])
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, oslog, v23, "Beginning authentication for store account: %@...", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v7 = [v25[0] navigationController];
    id v8 = [v25[0] passcodeCacheManager];
    id v22 = +[BuddyAppleIDAuthManager managerWithNavigationController:v7 passcodeCacheManager:v8];

    [v22 setServiceType:2];
    id v9 = [v25[0] signInController];
    id v10 = location[0];
    id v11 = v26;
    id v12 = [a1[4] altDSID];
    id v16 = _NSConcreteStackBlock;
    int v17 = -1073741824;
    int v18 = 0;
    uint64_t v19 = sub_100193374;
    char v20 = &unk_1002B2EA8;
    id v21 = v25[0];
    [v22 authenticateWithSignInController:v9 username:v10 password:v11 altDSID:v12 completion:&v16];

    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v22, 0);
  }
  else
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [a1[4] username];
      sub_10004B238((uint64_t)v28, (uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Skipping sign-in for %@...", v28, 0xCu);
    }
    objc_storeStrong((id *)&v15, 0);
    id v14 = [v25[0] storeAccountsToSignIn];
    [v14 removeObjectAtIndex:0];

    [v25[0] _authenticateThenSignInNextAccount];
  }
  objc_storeStrong(v25, 0);
  objc_storeStrong(&v26, 0);
  objc_storeStrong(location, 0);
}

void sub_100193374(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  id v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1001934C4;
  id v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001934C4(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v16 = 0;
      char v14 = 0;
      if (_BYIsInternalInstall())
      {
        Class isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        id v17 = [(objc_class *)a1[4].isa domain];
        char v16 = 1;
        Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v17, [(objc_class *)a1[4].isa code]];
        id v15 = isa;
        char v14 = 1;
      }
      else
      {
        Class isa = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v18, "Authentication failed: %{public}@", buf, 0xCu);
      if (v14) {

      }
      if (v16) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    id v3 = [(objc_class *)a1[5].isa navigationController];
    id v4 = [v3 topViewController];
    id v5 = [(objc_class *)a1[5].isa signInController];

    if (v4 != v5)
    {
      id v6 = [(objc_class *)a1[5].isa navigationController];
      id v7 = [(objc_class *)a1[5].isa signInController];
      id v8 = [v6 popToViewController:v7 animated:1];
    }
  }
  else
  {
    os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = v13;
      os_log_type_t v10 = v12;
      sub_10004B24C(v11);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Authentication succeeded!", v11, 2u);
    }
    objc_storeStrong((id *)&v13, 0);
    [(objc_class *)a1[5].isa _didAuthenticateWithAuthenticationResults:a1[6].isa];
  }
}

void sub_100193D0C(id *a1, char a2, id obj)
{
  uint64_t v19 = a1;
  char v18 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  char v16 = a1;
  id v4 = &_dispatch_main_q;
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  id v8 = sub_100193EA0;
  id v9 = &unk_1002B4290;
  id v10 = a1[4];
  char v15 = v18 & 1;
  id v11 = location;
  id v12 = a1[5];
  id v13 = a1[6];
  id v14 = a1[7];
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_100193EA0(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  [*(id *)(a1 + 32) _stopSpinningForIdentifier:@"signin"];
  if (*(unsigned char *)(a1 + 72))
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = v15;
      os_log_type_t v9 = v14;
      sub_10004B24C(v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sign-in succeeded!", v13, 2u);
    }
    objc_storeStrong((id *)&v15, 0);
    id v10 = [*(id *)(a1 + 32) activeStoreAccount];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      id v12 = [*(id *)(a1 + 48) accountForService:AIDAServiceTypeStore];
      [*(id *)(a1 + 32) setActiveStoreAccount:v12];
    }
    [*(id *)(a1 + 32) _didSignInUsername:*(void *)(a1 + 56) altDSID:*(void *)(a1 + 64)];
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v18 = 0;
      char v16 = 0;
      if (_BYIsInternalInstall())
      {
        char v2 = *(NSString **)(a1 + 40);
      }
      else if (*(void *)(a1 + 40))
      {
        id v19 = [*(id *)(a1 + 40) domain];
        char v18 = 1;
        char v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v19, [*(id *)(a1 + 40) code]);
        id v17 = v2;
        char v16 = 1;
      }
      else
      {
        char v2 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v20, "Sign-in failed: %{public}@", buf, 0xCu);
      if (v16) {

      }
      if (v18) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    id v3 = [*(id *)(a1 + 32) storeAppleIDController];
    id v4 = [v3 authAttemptLandingViewController];

    if (v4)
    {
      id v5 = [*(id *)(a1 + 32) navigationController];
      id v6 = [*(id *)(a1 + 32) storeAppleIDController];
      id v7 = [v6 authAttemptLandingViewController];
      [v5 popToViewController:v7 completion:0];
    }
  }
}

void sub_100194490(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v17 = 0;
  objc_storeStrong(&v17, a3);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa _stopSpinningForIdentifier:@"family"];
  if (v17)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_10004BB7C((uint64_t)buf, (uint64_t)v17);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Failed to look up family members: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else if ([location[0] count])
  {
    os_log_t v14 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)v20, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Found family members: %@", v20, 0xCu);
    }
    objc_storeStrong((id *)&v14, 0);
    [(objc_class *)a1[4].isa _removeAccountsToSignIn:location[0]];
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [(objc_class *)a1[4].isa storeAccountsToSignIn];
      sub_10004B238((uint64_t)v19, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, v12, v11, "Accounts to sign-in after removing family members: %@", v19, 0xCu);
    }
    objc_storeStrong((id *)&v12, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = v10;
      os_log_type_t v7 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found no family members", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  [(objc_class *)a1[4].isa _authenticateThenSignInNextAccount];
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_100194FD8(uint64_t a1)
{
}

void sub_100195004(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [*(id *)(a1 + 32) setMediaLinkedAccountDSID:location[0]];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

uint64_t sub_100195060(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 40))
  {
    id v2 = [*(id *)(result + 32) storeAccountsToSignIn:result, result];
    [v2 count];

    return (*(uint64_t (**)(void))(*(void *)(v1 + 40) + 16))();
  }
  return result;
}

void sub_1001951F4(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v81 = 0;
  objc_storeStrong(&v81, a3);
  uint64_t v80 = a1;
  [*(id *)(a1 + 32) setStoreAccountMap:location[0]];
  id v5 = objc_alloc_init((Class)NSMutableArray);
  [*(id *)(a1 + 32) setStoreAccountsToSignIn:v5];

  memset(__b, 0, sizeof(__b));
  id v6 = [location[0] allKeys];
  id v7 = [v6 countByEnumeratingWithState:__b objects:v87 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)__b[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v7; ++i)
      {
        if (*(void *)__b[2] != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v79 = *(void *)(__b[1] + 8 * i);
        id v10 = [*(id *)(a1 + 32) storeAccountMap];
        id v77 = [v10 objectForKeyedSubscript:v79];

        id v76 = [v77 objectForKeyedSubscript:@"dsid"];
        id v75 = [v77 objectForKeyedSubscript:@"altDsid"];
        os_log_type_t v11 = [BuddyStoreAccount alloc];
        id v74 = [(BuddyStoreAccount *)v11 initWithUsername:v79 dsid:v76 altDSID:v75];
        id v12 = [*(id *)(a1 + 32) storeAccountsToSignIn];
        [v12 addObject:v74];

        objc_storeStrong(&v74, 0);
        objc_storeStrong(&v75, 0);
        objc_storeStrong(&v76, 0);
        objc_storeStrong(&v77, 0);
      }
      id v7 = [v6 countByEnumeratingWithState:__b objects:v87 count:16];
    }
    while (v7);
  }

  id v73 = 0;
  id v13 = [*(id *)(a1 + 32) storeAccountsToSignIn];
  int v67 = _NSConcreteStackBlock;
  int v68 = -1073741824;
  int v69 = 0;
  char v70 = sub_100195BFC;
  id v71 = &unk_1002B4330;
  id v72 = *(id *)(a1 + 32);
  id v14 = [v13 indexOfObjectPassingTest:&v67];

  id v73 = v14;
  if (v14 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v15 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    id v66 = [v15 objectAtIndexedSubscript:v73];

    id v16 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    [v16 removeObjectAtIndex:v73];

    id v17 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    [v17 insertObject:v66 atIndex:0];

    objc_storeStrong(&v66, 0);
  }
  if (v81)
  {
    uint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
    for (uint64_t j = 0; ; ++j)
    {
      unint64_t v18 = j;
      id v19 = [*(id *)(a1 + 32) storeAccountsToSignIn];
      id v20 = [v19 count];

      if (v18 >= (unint64_t)v20) {
        break;
      }
      id v21 = [*(id *)(a1 + 32) storeAccountsToSignIn];
      id v63 = [v21 objectAtIndexedSubscript:j];

      id v22 = [v63 username];
      unsigned __int8 v23 = [v22 isEqualToString:v81];

      if (v23)
      {
        uint64_t v65 = j;
        int v62 = 4;
      }
      else
      {
        int v62 = 0;
      }
      objc_storeStrong(&v63, 0);
      if (v62) {
        break;
      }
    }
    id v61 = 0;
    if (v65 == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v24 = [BuddyStoreAccount alloc];
      os_log_type_t v25 = [(BuddyStoreAccount *)v24 initWithUsername:v81 dsid:0 altDSID:0];
      id v26 = v61;
      id v61 = v25;
    }
    else
    {
      id v28 = [*(id *)(a1 + 32) storeAccountsToSignIn];
      id v29 = [v28 objectAtIndex:v65];
      id v30 = v61;
      id v61 = v29;

      id v31 = [*(id *)(a1 + 32) storeAccountsToSignIn];
      [v31 removeObject:v61];
    }
    id v27 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    [v27 insertObject:v61 atIndex:0];

    [*(id *)(a1 + 32) setActiveBuddyStoreAccount:v61];
    objc_storeStrong(&v61, 0);
  }
  id v32 = [*(id *)(a1 + 32) _primaryAccountInfo];
  id v60 = [v32 username];

  id v33 = [*(id *)(a1 + 32) _primaryAccountInfo];
  id v59 = [v33 altDSID];

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    id v34 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    sub_10004B238((uint64_t)buf, (uint64_t)v34);
    _os_log_impl((void *)&_mh_execute_header, oslog, v57, "Store accounts to sign in: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  os_log_t v56 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v55 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004B238((uint64_t)v85, (uint64_t)v60);
    _os_log_impl((void *)&_mh_execute_header, v56, v55, "Primary Apple ID: %@", v85, 0xCu);
  }
  objc_storeStrong((id *)&v56, 0);
  os_log_t v54 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = [*(id *)(a1 + 32) activeBuddyStoreAccount];
    sub_10004B238((uint64_t)v84, (uint64_t)v35);
    _os_log_impl((void *)&_mh_execute_header, v54, v53, "Active store account: %@", v84, 0xCu);
  }
  objc_storeStrong((id *)&v54, 0);
  id v36 = [*(id *)(a1 + 32) _primaryAccountInfo];
  id v52 = [v36 dsid];

  id v51 = 0;
  id v37 = [*(id *)(a1 + 32) storeAccountsToSignIn];
  id v44 = _NSConcreteStackBlock;
  int v45 = -1073741824;
  int v46 = 0;
  os_log_t v47 = sub_100195CB0;
  char v48 = &unk_1002B4358;
  id v49 = v59;
  id v50 = v52;
  id v38 = [v37 indexOfObjectPassingTest:&v44];

  id v51 = v38;
  if (v38 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    os_log_t v43 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      id v39 = [*(id *)(a1 + 32) storeAccountsToSignIn];
      id v40 = [v39 objectAtIndexedSubscript:v51];
      id v41 = [v40 username];
      sub_10004B238((uint64_t)v83, (uint64_t)v41);
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Skipping owner account %@...", v83, 0xCu);
    }
    objc_storeStrong((id *)&v43, 0);
    id v42 = [*(id *)(a1 + 32) storeAccountsToSignIn];
    [v42 removeObjectAtIndex:v51];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  objc_storeStrong(&v50, 0);
  objc_storeStrong(&v49, 0);
  objc_storeStrong(&v52, 0);
  objc_storeStrong(&v59, 0);
  objc_storeStrong(&v60, 0);
  objc_storeStrong(&v72, 0);
  objc_storeStrong(&v81, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_100195BFC(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = (void *)a1[4];
  id v4 = [location[0] username];
  id v5 = [location[0] altDSID];
  LOBYTE(v3) = [v3 _isPrimaryAccountWithUsername:v4 orAltDSID:v5];

  objc_storeStrong(location, 0);
  return v3 & 1;
}

uint64_t sub_100195CB0(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [location[0] altDSID];
  unsigned __int8 v4 = [v3 isEqualToString:a1[4]];

  if (v4)
  {
    char v8 = 0;
  }
  else
  {
    id v5 = [location[0] dsid];
    char v8 = [v5 isEqualToString:a1[5]] & 1;
  }
  objc_storeStrong(location, 0);
  return v8 & 1;
}

id sub_100196478(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1001964A4(uint64_t a1)
{
}

void sub_1001964B0(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v10[2] = (id)a1;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    dispatch_block_cancel(*(dispatch_block_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  id v3 = &_dispatch_main_q;
  unsigned __int8 v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001965E8;
  char v8 = &unk_1002B43A8;
  v10[1] = *(id *)(a1 + 48);
  v10[0] = *(id *)(a1 + 32);
  id v9 = location[0];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v9, 0);
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);
}

void sub_1001965E8(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if ((*(unsigned char *)(*((void *)a1[6].isa + 1) + 24) & 1) == 0)
  {
    *(unsigned char *)(*((void *)a1[6].isa + 1) + 24) = 1;
    if (a1[5].isa)
    {
      id v2 = [(objc_class *)a1[4].isa value];
      unsigned __int8 v3 = [v2 BOOLValue];

      if (v3)
      {
        oslog[0] = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
        {
          id v4 = [(objc_class *)a1[4].isa value];
          sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
          _os_log_impl((void *)&_mh_execute_header, oslog[0], v17, "Media linked account result: %{public}@", buf, 0xCu);
        }
        objc_storeStrong((id *)oslog, 0);
        Class isa = a1[5].isa;
        id v6 = [(objc_class *)a1[4].isa value];
        (*((void (**)(Class, id))isa + 2))(isa, v6);
      }
      else
      {
        os_log_t v16 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = v16;
          os_log_type_t v8 = v15;
          sub_10004B24C(v14);
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "No media linked account found", v14, 2u);
        }
        objc_storeStrong((id *)&v16, 0);
        (*((void (**)(void))a1[5].isa + 2))();
      }
    }
    else
    {
      os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
      char v12 = 16;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v9 = v13;
        os_log_type_t v10 = v12;
        sub_10004B24C(v11);
        _os_log_error_impl((void *)&_mh_execute_header, v9, v10, "Completion handler missing.", (uint8_t *)v11, 2u);
      }
      objc_storeStrong((id *)&v13, 0);
    }
  }
}

uint64_t sub_100196860(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  char v6 = 16;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_error_impl((void *)&_mh_execute_header, v2, v3, "AMS cache promise did not respond in time. Timing out!", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return (*((uint64_t (**)(void))a1[4].isa + 2))();
}

void sub_10019691C(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    dispatch_block_perform(DISPATCH_BLOCK_ASSIGN_CURRENT, *(dispatch_block_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

void sub_100196964(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v17 = 0;
  objc_storeStrong(&v17, a3);
  oslog[1] = a1;
  if (v17)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        int v5 = (NSString *)v17;
      }
      else if (v17)
      {
        id v14 = [v17 domain];
        char v13 = 1;
        int v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [v17 code]);
        id v12 = v5;
        char v11 = 1;
      }
      else
      {
        int v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "AMS cache update failed to resolve with error: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      char v6 = v10;
      os_log_type_t v7 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AMS cache updated", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_100196BE0(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v22 = 0;
  objc_storeStrong(&v22, a3);
  oslog[1] = a1;
  if (v22)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v18 = 0;
      char v16 = 0;
      if (_BYIsInternalInstall())
      {
        int v5 = (NSString *)v22;
      }
      else if (v22)
      {
        id v19 = [v22 domain];
        char v18 = 1;
        int v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v19, [v22 code]);
        id v17 = v5;
        char v16 = 1;
      }
      else
      {
        int v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v20, "AMS cache promise failure to resolve with error: %{public}@", buf, 0xCu);
      if (v16) {

      }
      if (v18) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else if ([location[0] isStale])
  {
    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      char v6 = v15;
      os_log_type_t v7 = v14;
      sub_10004B24C(v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AMS cache promise resolved with stale response. Wait for update.", v13, 2u);
    }
    objc_storeStrong((id *)&v15, 0);
  }
  else
  {
    os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v8 = v12;
      os_log_type_t v9 = v11;
      sub_10004B24C(v10);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "AMS cache promise resolved with non-stale response", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_1001987CC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToDismissPairingWithError:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentController:a1[4].isa wantsToDismissPairingWithError:a1[5].isa];
  }
}

void sub_100198A78(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToTransitionToPairingWithPin:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentController:a1[4].isa wantsToTransitionToPairingWithPin:a1[5].isa];
  }
}

void sub_100198D24(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setCurrentEnrollmentStatusViewModel:a1[5].isa];
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToTransitionToEnrollmentWithInitialViewModel:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentController:a1[4].isa wantsToTransitionToEnrollmentWithInitialViewModel:a1[5].isa];
  }
}

void sub_100198FDC(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setCurrentEnrollmentStatusViewModel:a1[5].isa];
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:hasEnrollmentStatusViewModelUpdate:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentController:a1[4].isa hasEnrollmentStatusViewModelUpdate:a1[5].isa];
  }
}

void sub_1001992F4(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void, BOOL, id))(a1[4] + 16))(a1[4], location[0] == 0, location[0]);
  objc_storeStrong(location, 0);
}

void sub_100199454(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentControllerWantsToTransitionToCompletion:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentControllerWantsToTransitionToCompletion:a1[4].isa];
  }
}

void sub_1001996B8(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa delegate];
  char v3 = objc_opt_respondsToSelector() ^ 1;

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      id v4 = [(objc_class *)a1[4].isa delegate];
      id location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentControllerWantsToDisplayShutdownUI:");
      sub_10004CECC((uint64_t)buf, (uint64_t)v4, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v7, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    id v5 = [(objc_class *)a1[4].isa delegate];
    [v5 proximityAutomatedDeviceEnrollmentControllerWantsToDisplayShutdownUI:a1[4].isa];
  }
}

void sub_10019ACC4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  os_log_t v12 = a1;
  if ([location[0] length])
  {
    char v3 = &_dispatch_main_q;
    id v4 = _NSConcreteStackBlock;
    int v5 = -1073741824;
    int v6 = 0;
    os_log_type_t v7 = sub_10019ADF0;
    os_log_type_t v8 = &unk_1002B12F0;
    id v9 = location[0];
    id v10 = a1[4];
    dispatch_async((dispatch_queue_t)v3, &v4);

    objc_storeStrong(&v10, 0);
    objc_storeStrong(&v9, 0);
    int v11 = 0;
  }
  else
  {
    int v11 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_10019ADF0(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  id v2 = +[NSBundle mainBundle];
  char v3 = [(NSBundle *)v2 localizedStringForKey:@"MIGRATING_TITLE_SOURCE_WITH_NAME" value:&stru_1002B4E18 table:@"Migration"];
  location[0] = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v3, *(void *)(a1 + 32));

  [*(id *)(a1 + 40) setProgressTitle:location[0]];
  objc_storeStrong(location, 0);
}

void sub_10019B0BC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) migrationSourceClient:a1:a1];
  [v1 cancel];
}

void sub_10019B2E8(uint64_t a1)
{
  id v10[2] = (id)a1;
  v10[1] = (id)a1;
  [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) presentedViewController];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) presentedViewController];
    int v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    os_log_type_t v8 = sub_10019B41C;
    id v9 = &unk_1002B0D20;
    v10[0] = *(id *)(a1 + 32);
    [v3 dismissViewControllerAnimated:1 completion:&v5];

    objc_storeStrong(v10, 0);
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 flowItemDone:*(void *)(a1 + 32)];
  }
}

void sub_10019B41C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1];
  [v2 flowItemDone:*(void *)(a1 + 32)];
}

void sub_10019C500(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  int v5 = +[UIApplication sharedApplication];
  int v6 = [(UIApplication *)v5 applicationState];

  if ((!v6 || (unint64_t)(v6 - 1) >= 2) && IOHIDEventGetType() == 3 && IOHIDEventGetIntegerValue())
  {
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    BOOL v7 = 1;
    if (IntegerValue != 48)
    {
      BOOL v7 = 1;
      if (IntegerValue != 64)
      {
        BOOL v7 = 1;
        if (IntegerValue != 233)
        {
          BOOL v7 = 1;
          if (IntegerValue != 234) {
            BOOL v7 = IntegerValue == 149;
          }
        }
      }
    }
    [a1[4] setAnyButtonPressed:v7];
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id *sub_10019D5BC(id *result, char a2)
{
  if (a2) {
    return (id *)[result[4] selectChoice:result[5]];
  }
  return result;
}

void sub_10019DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
}

void sub_10019DE58(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v13 = 0;
      char v11 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v14 = [location[0] domain];
        char v13 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v14, [location[0] code]);
        id v12 = v3;
        char v11 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Unable to set Utah Web Content Restrictions: %{public}@", buf, 0xCu);
      if (v11) {

      }
      if (v13) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v10 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = v10;
      os_log_type_t v5 = v9;
      sub_10004B24C(v8);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Enabled Utah Web Content Restrictions", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    id WeakRetained = objc_loadWeakRetained((id *)&a1[4].isa);
    if (WeakRetained)
    {
      id v6 = [WeakRetained settingsManager];
      [v6 setWebContentFilteringEnabled:1];
    }
    objc_storeStrong(&WeakRetained, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10019E520(id *a1, char a2, id obj)
{
  int v45 = a1;
  char v44 = a2 & 1;
  id location = 0;
  objc_storeStrong(&location, obj);
  v42[1] = (os_log_t)a1;
  if (location)
  {
    v42[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v41 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(v42[0], OS_LOG_TYPE_ERROR))
    {
      char v39 = 0;
      char v37 = 0;
      if (_BYIsInternalInstall())
      {
        id v4 = (NSString *)location;
      }
      else if (location)
      {
        id v40 = [location domain];
        char v39 = 1;
        id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v40, [location code]);
        id v38 = v4;
        char v37 = 1;
      }
      else
      {
        id v4 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, v42[0], v41, "Error fetching Web Content Restriction Settings from ScreenTime: %{public}@", buf, 0xCu);
      if (v37) {

      }
      if (v39) {
    }
      }
    objc_storeStrong((id *)v42, 0);
  }
  if (v44)
  {
    id v36 = (id)_BYLoggingFacility();
    os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v5 = v36;
      os_log_type_t v6 = v35;
      sub_10004B24C(v34);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ScreenTime says web content is already restricted", v34, 2u);
    }
    objc_storeStrong(&v36, 0);
    (*((void (**)(void))a1[5] + 2))();
    int v33 = 1;
  }
  else
  {
    id v7 = [a1[4] locationQueue];
    BOOL v8 = v7 == 0;

    if (v8)
    {
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.purplebuddy.utah-location-services-queue", 0);
      [a1[4] setLocationQueue:v9];
    }
    id v10 = [a1[4] locationManager];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      id v12 = objc_alloc((Class)CLLocationManager);
      id v13 = a1[4];
      id v14 = [v13 locationQueue];
      id v15 = [v12 initWithEffectiveBundlePath:@"/System/Library/LocationBundles/WebContentFilterEligibility.bundle" delegate:v13 onQueue:v14];
      [a1[4] setLocationManager:v15];
    }
    id v16 = a1[4];
    id v17 = [v16 locationManager];
    [v17 setDelegate:v16];

    v29[0] = 0;
    v29[1] = v29;
    int v30 = 0x20000000;
    int v31 = 32;
    char v32 = 0;
    objc_initWeak(&from, a1[4]);
    id v21 = _NSConcreteStackBlock;
    int v22 = -1073741824;
    int v23 = 0;
    id v24 = sub_10019EB38;
    os_log_type_t v25 = &unk_1002B44C0;
    v26[1] = v29;
    objc_copyWeak(&v27, &from);
    v26[0] = a1[5];
    [a1[4] setExtendedInitializationCompletion:&v21];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [a1[4] locationManager];
      sub_10004BB7C((uint64_t)v46, (uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Requesting location updates using location manager %{public}@", v46, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v19 = [a1[4] locationManager];
    [v19 startUpdatingLocation];

    objc_storeStrong(v26, 0);
    objc_destroyWeak(&v27);
    objc_destroyWeak(&from);
    _Block_object_dispose(v29, 8);
    int v33 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_10019EB38(id *a1, char a2)
{
  id v14 = a1;
  char v13 = a2;
  id v12 = a1;
  id v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_10019EC44;
  BOOL v8 = &unk_1002B4498;
  v9[1] = a1[5];
  objc_copyWeak(&v10, a1 + 6);
  char v11 = v13 & 1;
  v9[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v9, 0);
  objc_destroyWeak(&v10);
}

NSObject *sub_10019EC44(NSObject *result)
{
  id v1 = result;
  os_log_t oslog[2] = result;
  oslog[1] = result;
  if ((*(unsigned char *)(*((void *)result[5].isa + 1) + 24) & 1) == 0)
  {
    *(unsigned char *)(*((void *)result[5].isa + 1) + 24) = 1;
    id WeakRetained = objc_loadWeakRetained((id *)&result[6].isa);
    [WeakRetained setExtendedInitializationCompletion:0];

    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      if ((uint64_t)v1[7].isa) {
        id v3 = "met";
      }
      else {
        id v3 = "NOT met";
      }
      sub_100095D98((uint64_t)buf, (uint64_t)v3);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Utah location criteria %s", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    return (*((uint64_t (**)(void))v1[4].isa + 2))();
  }
  return result;
}

void sub_10019F184(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v42 = 0;
  objc_storeStrong(&v42, a3);
  oslog[1] = a1;
  if (v42)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v40 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v38 = 0;
      char v36 = 0;
      if (_BYIsInternalInstall())
      {
        int v5 = (NSString *)v42;
      }
      else if (v42)
      {
        id v39 = [v42 domain];
        char v38 = 1;
        int v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v39, [v42 code]);
        id v37 = v5;
        char v36 = 1;
      }
      else
      {
        int v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v40, "Failed to reverse geocode location: %{public}@", buf, 0xCu);
      if (v36) {

      }
      if (v38) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    id v6 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

    if (v6)
    {
      id v7 = (void (**)(id, void))[(objc_class *)a1[4].isa extendedInitializationCompletion];
      v7[2](v7, 0);
    }
    int v35 = 1;
  }
  else
  {
    id v8 = [(objc_class *)a1[4].isa buddyPreferencesExcludedFromBackup];
    unsigned __int8 v9 = [v8 BOOLForKey:@"ForceUtahLocation"];

    if (v9)
    {
      os_log_t v34 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = v34;
        os_log_type_t v11 = v33;
        sub_10004B24C(v32);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Overriding Utah location criteria because testing key is set", v32, 2u);
      }
      objc_storeStrong((id *)&v34, 0);
      id v12 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

      if (v12)
      {
        char v13 = (void (**)(id, uint64_t))[(objc_class *)a1[4].isa extendedInitializationCompletion];
        v13[2](v13, 1);
      }
      int v35 = 1;
    }
    else
    {
      id v31 = [location[0] firstObject];
      if (v31)
      {
        id v18 = [v31 ISOcountryCode];
        char v19 = [v18 isEqualToString:@"US"] ^ 1;

        if (v19)
        {
          id v20 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

          if (v20)
          {
            id v21 = (void (**)(id, void))[(objc_class *)a1[4].isa extendedInitializationCompletion];
            v21[2](v21, 0);
          }
          int v35 = 1;
        }
        else
        {
          id v22 = [v31 administrativeArea];
          char v23 = [v22 isEqualToString:@"UT"] ^ 1;

          if (v23)
          {
            id v24 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

            if (v24)
            {
              os_log_type_t v25 = (void (**)(id, void))[(objc_class *)a1[4].isa extendedInitializationCompletion];
              v25[2](v25, 0);
            }
            int v35 = 1;
          }
          else
          {
            id v26 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

            if (v26)
            {
              id v27 = (void (**)(id, uint64_t))[(objc_class *)a1[4].isa extendedInitializationCompletion];
              v27[2](v27, 1);
            }
            int v35 = 0;
          }
        }
      }
      else
      {
        os_log_t v30 = (os_log_t)(id)_BYLoggingFacility();
        char v29 = 16;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          id v14 = v30;
          os_log_type_t v15 = v29;
          sub_10004B24C(v28);
          _os_log_error_impl((void *)&_mh_execute_header, v14, v15, "Placemarks array was empty!", v28, 2u);
        }
        objc_storeStrong((id *)&v30, 0);
        id v16 = [(objc_class *)a1[4].isa extendedInitializationCompletion];

        if (v16)
        {
          id v17 = (void (**)(id, void))[(objc_class *)a1[4].isa extendedInitializationCompletion];
          v17[2](v17, 0);
        }
        int v35 = 1;
      }
      objc_storeStrong(&v31, 0);
      if (!v35) {
        int v35 = 0;
      }
    }
  }
  objc_storeStrong(&v42, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A1178(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = +[NSFileManager defaultManager];
  [(NSFileManager *)v3 removeItemAtPath:@"/var/mobile/Media/iTunes_Control/iTunes/ShowLicense" error:0];

  +[BYWarranty acknowledge];
  id v4 = [a1[4] iOSTermsController];

  if (v4)
  {
    id v5 = [a1[4] iOSTermsController];
    [v5 didAgree];
  }
  id v6 = [a1[5] navigationController];
  [v6 dismissViewControllerAnimated:1 completion:0];

  id v7 = [a1[4] delegate];
  [v7 flowItemDone:a1[4]];

  objc_storeStrong(location, 0);
}

void sub_1001A16E4(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v17 = 0;
  objc_storeStrong(&v17, a3);
  v16[1] = (id)a1;
  v16[0] = [location[0] preferredDescriptor];
  id v15 = [location[0] latestUpdate];
  [*(id *)(a1 + 32) setPreferredUpdate:v16[0]];
  [*(id *)(a1 + 32) setLatestUpdate:v15];
  id v5 = +[NSDate date];
  [*(id *)(a1 + 32) setLastScanDate:v5];

  dispatch_time_t v6 = dispatch_time(0, 300000000000);
  id v7 = &_dispatch_main_q;
  unsigned __int8 v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  os_log_type_t v11 = sub_1001A1954;
  id v12 = &unk_1002B12F0;
  id v13 = *(id *)(a1 + 32);
  id v14 = v16[0];
  dispatch_after(v6, (dispatch_queue_t)v7, &v9);

  if (*(void *)(a1 + 40))
  {
    id v8 = [v17 domain:v9, v10, v11, v12, v13];
    if ([v8 isEqualToString:SUErrorDomain]) {
      [v17 code];
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A1954(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) preferredUpdate:a1 a1];
  unsigned __int8 v3 = [v2 isEqual:*(void *)(a1 + 40)];

  if (v3) {
    [*(id *)(a1 + 32) reset];
  }
}

void sub_1001A1E00(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v9 = 0;
  objc_storeStrong(&v9, a3);
  id v8 = 0;
  objc_storeStrong(&v8, a4);
  if (*(unsigned char *)(a1 + 48) & 1) != 0 && ([*(id *)(a1 + 32) BOOLValue])
  {
    id v7 = +[CTCellularPlanManager sharedManager];
    [v7 setUserInPurchaseFlow:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A2204(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v23 = 0;
  objc_storeStrong(&v23, a3);
  id v22 = 0;
  objc_storeStrong(&v22, a4);
  uint64_t v21 = a1;
  if (v22 && *(void *)(a1 + 48) < *(void *)(a1 + 56))
  {
    uint64_t v20 = 0;
    uint64_t v20 = (uint64_t)[*(id *)(a1 + 32) _retryDelaySecondsForAttemptCount:*(void *)(a1 + 48)];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046588((uint64_t)buf, v20);
      _os_log_impl((void *)&_mh_execute_header, oslog, v18, "Software update scan failed; will retry in %ld seconds...",
        buf,
        0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    dispatch_time_t v7 = dispatch_time(0, 1000000000 * v20);
    id v8 = &_dispatch_main_q;
    id v9 = _NSConcreteStackBlock;
    int v10 = -1073741824;
    int v11 = 0;
    id v12 = sub_1001A24B0;
    id v13 = &unk_1002B4538;
    id v14 = *(id *)(a1 + 32);
    char v16 = *(unsigned char *)(a1 + 64) & 1;
    char v17 = *(unsigned char *)(a1 + 65) & 1;
    v15[1] = *(id *)(a1 + 48);
    id v15[2] = *(id *)(a1 + 56);
    v15[0] = *(id *)(a1 + 40);
    dispatch_after(v7, (dispatch_queue_t)v8, &v9);

    objc_storeStrong(v15, 0);
    objc_storeStrong(&v14, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

id sub_1001A24B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scanUsingCache:*(unsigned char *)(a1 + 64) & 1 allowBootstrap:*(unsigned char *)(a1 + 65) & 1 attemptsAllowed:*(void *)(a1 + 48) + 1 withCompletion:*(void *)(a1 + 56) a1 a1];
}

void sub_1001A2718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
  objc_storeStrong(&location, 0);
  objc_storeStrong((id *)(v13 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_1001A31A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001A34CC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1001A31B0(uint64_t *a1, unint64_t a2)
{
  int v10 = a1;
  unint64_t v9 = a2;
  id result = (uint64_t *)sub_1001A4BA8(a1);
  if (a2 > (unint64_t)result)
  {
    if (v9 > sub_1001A4BF0((uint64_t)a1)) {
      sub_1001A4C58();
    }
    sub_1001A4C70();
    uint64_t v8 = v5;
    uint64_t v6 = sub_1001A4C9C(a1);
    sub_1001A4CC4(v7, v9, v6, v8);
    sub_1001A4D14(a1, v7);
    return sub_1001A4E1C((uint64_t *)v7);
  }
  return result;
}

void *sub_1001A327C(void *a1)
{
  return a1;
}

void **sub_1001A32B4(uint64_t *a1, unint64_t a2)
{
  int v10 = a1;
  unint64_t v9 = a2;
  id result = (void **)sub_1001A6C04(a1);
  if (a2 > (unint64_t)result)
  {
    if (v9 > sub_1001A5F3C((uint64_t)a1)) {
      sub_1001A5FA0();
    }
    sub_1001A5FFC();
    uint64_t v8 = v5;
    uint64_t v6 = sub_1001A5BDC(a1);
    sub_1001A76CC(v7, v9, v6, v8);
    sub_1001A771C(a1, v7);
    return sub_1001A7824(v7);
  }
  return result;
}

uint64_t sub_1001A3380(uint64_t *a1, void **a2, float32x4_t *a3)
{
  unint64_t v6 = a1[1];
  sub_1001A6028();
  if (v6 >= *v4)
  {
    uint64_t result = sub_1001A83E0(a1, a2, a3);
    uint64_t v7 = result;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1001A8338((uint64_t)a1, a2, a3);
    uint64_t v7 = v6 + 64;
  }
  a1[1] = v7;
  return result;
}

uint64_t sub_1001A3410(uint64_t *a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  sub_1001A56D0();
  if (v5 >= *v3)
  {
    uint64_t result = sub_1001A9248(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1001A91AC((uint64_t)a1, a2);
    uint64_t v6 = v5 + 24;
  }
  a1[1] = v6;
  return result;
}

uint64_t *sub_1001A3494(uint64_t *a1)
{
  return a1;
}

void sub_1001A34CC(void *a1)
{
}

float sub_1001A34E0(float a1)
{
  return powf(a1, 3.0);
}

void *sub_1001A4348(void *a1)
{
  return a1;
}

uint64_t sub_1001A4380(uint64_t *a1)
{
  return sub_1001A9AB0((uint64_t)a1, *a1);
}

uint64_t sub_1001A43B4(uint64_t a1)
{
  return sub_1001A9AB0(a1, *(void *)(a1 + 8));
}

BOOL sub_1001A43E8(uint64_t a1, uint64_t a2)
{
  return !sub_1001A9B44(a1, a2);
}

uint64_t sub_1001A4420(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_1001A4438(void *a1)
{
  return a1;
}

uint64_t sub_1001A4470(uint64_t *a1)
{
  return sub_1001AA118((uint64_t)a1, *a1);
}

uint64_t sub_1001A44A4(uint64_t a1)
{
  return sub_1001AA118(a1, *(void *)(a1 + 8));
}

BOOL sub_1001A44D8(uint64_t a1, uint64_t a2)
{
  return !sub_1001AA1AC(a1, a2);
}

uint64_t sub_1001A4510(uint64_t a1)
{
  return *(void *)a1;
}

double sub_1001A4528(float32x4_t *a1, float a2)
{
  float v2 = 1.0 - a2;
  __asm { FMOV            V2.4S, #3.0 }
  *(void *)&double result = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(*a1, v2), v2), v2), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q2), a2), v2), v2)), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q2), a2), a2), v2)), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(a1[3], a2), a2), a2)).u64[0];
  return result;
}

double sub_1001A4600(float32x4_t *a1, float a2)
{
  float v2 = 1.0 - a2;
  __asm
  {
    FMOV            V2.4S, #-3.0
    FMOV            V3.4S, #3.0
    FMOV            V4.4S, #-6.0
  }
  float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q4), v2), a2);
  __asm { FMOV            V4.4S, #6.0 }
  *(void *)&double result = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(*a1, _Q2), v2), v2), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q3), v2), v2)), v12), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q4), v2), a2)), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q2), a2), a2)), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[3], _Q3), a2), a2)).u64[0];
  return result;
}

uint64_t sub_1001A4724()
{
  return 0;
}

uint64_t sub_1001A4744(uint64_t *a1, void *a2)
{
  unint64_t v5 = a1[1];
  sub_1001AA210();
  if (v5 >= *v3)
  {
    uint64_t result = sub_1001AA2D8(a1, a2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1001AA23C((uint64_t)a1, a2);
    uint64_t v6 = v5 + 24;
  }
  a1[1] = v6;
  return result;
}

uint64_t sub_1001A47C8(uint64_t *a1, double *a2, double *a3, double *a4, double *a5)
{
  unint64_t v8 = a1[1];
  sub_1001AA65C();
  if (v8 >= *v6)
  {
    uint64_t result = sub_1001AC77C(a1, a2, a3, a4, a5);
    uint64_t v9 = result;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1001AC6C4((uint64_t)a1, a2, a3, a4, a5);
    uint64_t v9 = v8 + 24;
  }
  a1[1] = v9;
  return result;
}

void *sub_1001A4870(void *result)
{
  *result += 64;
  return result;
}

uint64_t *sub_1001A4890(uint64_t *a1)
{
  return a1;
}

void *sub_1001A48C8(void *result)
{
  *result += 24;
  return result;
}

uint64_t sub_1001A48E8(uint64_t *a1)
{
  return sub_1001AD6A4((uint64_t)a1, *a1);
}

uint64_t sub_1001A491C(uint64_t a1)
{
  return sub_1001AD6A4(a1, *(void *)(a1 + 8));
}

BOOL sub_1001A4950(uint64_t a1, uint64_t a2)
{
  return !sub_1001AD738(a1, a2);
}

uint64_t sub_1001A4988(uint64_t a1)
{
  return *(void *)a1;
}

BOOL sub_1001A49A0(void *a1)
{
  return *a1 == a1[1];
}

uint64_t sub_1001A49C8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1001A49E0(uint64_t a1)
{
  return *(void *)(a1 + 8) - 24;
}

uint64_t sub_1001A49FC(void *a1)
{
  return (a1[1] - *a1) / 24;
}

uint64_t sub_1001A4A24(void *a1, uint64_t a2)
{
  return *a1 + 24 * a2;
}

float sub_1001A4A4C(float a1, float a2)
{
  return atan2f(a1, a2);
}

void *sub_1001A4A7C(void *result)
{
  *result += 24;
  return result;
}

uint64_t *sub_1001A4A9C(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1001A4B04(uint64_t *a1)
{
  return a1;
}

void *sub_1001A4B70(void *a1)
{
  return a1;
}

uint64_t sub_1001A4BA8(void *a1)
{
  sub_1001A4E54();
  return (*v2 - *a1) / 24;
}

uint64_t sub_1001A4BF0(uint64_t a1)
{
  v3[1] = a1;
  sub_1001A4F14();
  sub_1001A4EEC();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_1001A4F40();
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_1001A4EBC(v3, &v2);
}

void sub_1001A4C48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

void sub_1001A4C58()
{
}

void sub_1001A4C70()
{
}

uint64_t sub_1001A4C9C(void *a1)
{
  return (a1[1] - *a1) / 24;
}

void **sub_1001A4CC4(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001A4D14(uint64_t *a1, void *a2)
{
  char v16 = a1;
  id v15 = a2;
  sub_1001A5514();
  sub_1001A4C70();
  uint64_t v4 = v3;
  sub_1001A563C(v13, a1[1]);
  sub_1001A563C(v12, *a1);
  sub_1001A563C(v11, v15[1]);
  uint64_t v5 = sub_1001A5524(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  uint64_t v7 = sub_1001A567C((uint64_t)v14);
  v15[1] = v7;
  sub_1001A5694(a1, v15 + 1);
  sub_1001A5694(a1 + 1, v15 + 2);
  sub_1001A56D0();
  uint64_t v9 = v8;
  sub_1001A52E4();
  sub_1001A5694(v9, v10);
  void *v15 = v15[1];
  sub_1001A4C9C(a1);
  sub_1001A56FC();
}

uint64_t *sub_1001A4E1C(uint64_t *a1)
{
  return a1;
}

void sub_1001A4E54()
{
}

void sub_1001A4E80()
{
}

void *sub_1001A4EBC(void *a1, void *a2)
{
  return sub_1001A4F58(a1, a2);
}

void sub_1001A4EEC()
{
}

void sub_1001A4F14()
{
}

uint64_t sub_1001A4F40()
{
  return nullsub_2();
}

void *sub_1001A4F58(void *a1, void *a2)
{
  if (sub_1001A4F9C((uint64_t)&v5, a2, a1)) {
    return a2;
  }
  else {
    return a1;
  }
}

BOOL sub_1001A4F9C(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

void sub_1001A4FE0()
{
}

void sub_1001A5020()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1001A5094(exception, "vector");
}

void sub_1001A507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1001A5094(std::logic_error *a1, const char *a2)
{
  return a1;
}

std::logic_error *sub_1001A50D4(std::logic_error *a1, const char *a2)
{
  return a1;
}

void sub_1001A5130()
{
}

void **sub_1001A516C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  id v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  id v15 = a1;
  v11[0] = 0;
  sub_1001A522C(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v5 = sub_1001A52B8((uint64_t)a1);
    *a1 = sub_1001A5274(v5, v13);
    unint64_t v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  unint64_t v8 = (unint64_t)*a1 + 24 * v13;
  sub_1001A52E4();
  *uint64_t v9 = v8;
  return v15;
}

void *sub_1001A522C(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001A5274(uint64_t a1, unint64_t a2)
{
  return sub_1001A539C(a1, a2);
}

uint64_t sub_1001A52B8(uint64_t a1)
{
  return sub_1001A5494(a1 + 24);
}

void sub_1001A52E4()
{
}

void *sub_1001A5310(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001A5360(void *result)
{
  *uint64_t result = 0;
  return result;
}

void *sub_1001A537C(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

void *sub_1001A539C(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001A5408();
  }
  nullsub_3();
  return sub_1001A5440(24 * a2);
}

void sub_1001A5408()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_1001A5440(size_t a1)
{
  return sub_1001A546C(a1);
}

void *sub_1001A546C(size_t a1)
{
  return operator new(a1);
}

uint64_t sub_1001A5494(uint64_t a1)
{
  return sub_1001A54C0(a1 + 8);
}

uint64_t sub_1001A54C0(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001A54D8()
{
}

uint64_t sub_1001A5524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[1] = a5;
  v17[0] = a4;
  *((void *)&v16 + 1) = a7;
  *(void *)&long long v16 = a6;
  uint64_t v15 = a1;
  v14[0] = a6;
  v14[1] = a7;
  sub_1001A5754(v12, a1, (uint64_t)v14, (uint64_t)&v16);
  sub_1001A5710((uint64_t)v13, v12);
  while (sub_1001A57A4((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v7 = v15;
    sub_1001A5828((uint64_t)&v16);
    uint64_t v9 = v8;
    int v10 = (uint64_t *)sub_1001A5850((uint64_t)v18);
    sub_1001A57F0(v7, v9, v10);
    sub_1001A5878((uint64_t)v18);
    sub_1001A5878((uint64_t)&v16);
  }
  sub_1001A5898((uint64_t)v13);
  long long v19 = v16;
  sub_1001A58B4((uint64_t)v13);
  return v19;
}

void *sub_1001A563C(void *a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1001A567C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *sub_1001A5694(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  return result;
}

void sub_1001A56D0()
{
}

uint64_t sub_1001A5710(uint64_t a1, void *a2)
{
  v3[4] = a1;
  id v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  void v3[2] = a2[2];
  return sub_1001A58EC(a1, v3);
}

void *sub_1001A5754(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

BOOL sub_1001A57A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001A567C(a1);
  return v2 != sub_1001A567C(a2);
}

void *sub_1001A57F0(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001A5994(a1, a2, a3);
}

void sub_1001A5828(uint64_t a1)
{
}

uint64_t sub_1001A5850(uint64_t a1)
{
  return *(void *)(a1 + 8) - 24;
}

uint64_t sub_1001A5878(uint64_t result)
{
  *(void *)(result + 8) -= 24;
  return result;
}

uint64_t sub_1001A5898(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001A58B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A58EC(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_1001A5928(uint64_t result, void *a2)
{
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = a2[1];
  *(void *)(result + 16) = a2[2];
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void *sub_1001A595C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void *sub_1001A5994(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001A59C8(a2, a3);
}

void *sub_1001A59C8(void *a1, uint64_t *a2)
{
  return a1;
}

void *sub_1001A5A08(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a1 + 2;
  sub_1001A5AAC();
  sub_1001A5A9C();
  sub_1001A5AD8(v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = sub_1001A5BDC(a2);
  sub_1001A5B20(a1, v4, v5, v6);
  return a1;
}

void sub_1001A5AAC()
{
}

void *sub_1001A5AD8(void *a1)
{
  return a1;
}

uint64_t sub_1001A5B20(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unint64_t v8 = a4;
  sub_1001A5CF4(&v6, (uint64_t)a1);
  sub_1001A5CC0((uint64_t)v7, v6);
  if (v8)
  {
    sub_1001A5D34(a1, v8);
    sub_1001A5DD0((uint64_t)a1, v10, v9, v8);
  }
  sub_1001A5E64((uint64_t)v7);
  return sub_1001A5E80((uint64_t)v7);
}

uint64_t sub_1001A5BDC(void *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 6;
}

void sub_1001A5C00()
{
}

void *sub_1001A5C3C(void *a1)
{
  return a1;
}

void *sub_1001A5C8C(void *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1001A5CC0(uint64_t a1, uint64_t a2)
{
  return sub_1001A5EB8(a1, a2);
}

void *sub_1001A5CF4(void *a1, uint64_t a2)
{
  return a1;
}

void sub_1001A5D34(void *a1, unint64_t a2)
{
  if (a2 > sub_1001A5F3C((uint64_t)a1)) {
    sub_1001A5FA0();
  }
  sub_1001A5FFC();
  uint64_t v4 = sub_1001A5FB8(v3, a2);
  *a1 = v4;
  a1[1] = v4;
  uint64_t v6 = *a1 + (v5 << 6);
  sub_1001A6028();
  uint64_t *v7 = v6;
  sub_1001A6054();
}

void *sub_1001A5DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t v8 = a4;
  sub_1001A617C(&v6, a1, a4);
  sub_1001A5FFC();
  uint64_t v7 = sub_1001A61C4(v4, v10, v9, v7);
  return sub_1001A624C(&v6);
}

void sub_1001A5E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t sub_1001A5E64(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t sub_1001A5E80(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A5EB8(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1001A5EF8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

void *sub_1001A5F1C(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1001A5F3C(uint64_t a1)
{
  v3[1] = a1;
  sub_1001A5AAC();
  sub_1001A6068();
  v3[0] = 0x3FFFFFFFFFFFFFFLL;
  sub_1001A4F40();
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_1001A4EBC(v3, &v2);
}

void sub_1001A5F90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

void sub_1001A5FA0()
{
}

void *sub_1001A5FB8(uint64_t a1, unint64_t a2)
{
  return sub_1001A60A0(a1, a2);
}

void sub_1001A5FFC()
{
}

void sub_1001A6028()
{
}

void sub_1001A6068()
{
}

void *sub_1001A60A0(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3FFFFFFFFFFFFFFLL) {
    sub_1001A5408();
  }
  nullsub_3();
  return sub_1001A5440(a2 << 6);
}

void sub_1001A6104()
{
}

void sub_1001A6140()
{
}

void *sub_1001A617C(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1001A61C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)sub_1001A62CC(a2, a3);
  uint64_t v6 = v5;
  sub_1001A6408();
  uint64_t v8 = sub_1001A6324(a1, v4, v6, v7);
  return sub_1001A6430(a4, v8);
}

void *sub_1001A624C(void *a1)
{
  return a1;
}

void *sub_1001A6284(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + (a3 << 6);
  return result;
}

uint64_t sub_1001A62CC(uint64_t a1, uint64_t a2)
{
  void v6[2] = a1;
  v6[1] = a2;
  sub_1001A6408();
  v6[0] = v2;
  sub_1001A6408();
  uint64_t v5 = v3;
  return sub_1001A6460(v6, &v5);
}

uint64_t sub_1001A6324(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  sub_1001A655C(v8, a1, (uint64_t)&v10, (uint64_t)&v11);
  sub_1001A6518((uint64_t)v9, v8);
  while (v13 != v12)
  {
    uint64_t v4 = v14;
    sub_1001A65E4();
    sub_1001A65AC(v4, v5, v13);
    v13 += 8;
    v11 += 64;
  }
  sub_1001A65F8((uint64_t)v9);
  uint64_t v6 = v11;
  sub_1001A6614((uint64_t)v9);
  return v6;
}

void sub_1001A6408()
{
}

uint64_t sub_1001A6430(uint64_t a1, uint64_t a2)
{
  return sub_1001A6A70(a1, a2);
}

uint64_t sub_1001A6460(void *a1, void *a2)
{
  sub_1001A649C(&v3, a1, a2);
  return v3;
}

void *sub_1001A649C(void *a1, void *a2, void *a3)
{
  return a1;
}

void *sub_1001A64E4(void *result, void *a2, void *a3)
{
  *uint64_t result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_1001A6518(uint64_t a1, void *a2)
{
  v3[4] = a1;
  id v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  void v3[2] = a2[2];
  return sub_1001A664C(a1, v3);
}

void *sub_1001A655C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001A65AC(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_1001A65F8(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001A6614(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A664C(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_1001A6688(uint64_t result, void *a2)
{
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = a2[1];
  *(void *)(result + 16) = a2[2];
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void *sub_1001A66BC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_1001A66F4(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  a2[4] = a3[4];
  a2[5] = a3[5];
  a2[6] = a3[6];
  a2[7] = a3[7];
}

uint64_t sub_1001A6754(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    sub_1001A678C(a1);
  }
  return a1;
}

BOOL sub_1001A678C(uint64_t a1)
{
  void v5[2] = a1;
  uint64_t v2 = *(void *)a1;
  sub_1001A6860(v5, **(void **)(a1 + 16));
  sub_1001A6860(v4, **(void **)(a1 + 8));
  return sub_1001A67F4(v2, v5[0], v5[1], v4[0], v4[1]);
}

BOOL sub_1001A67F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a2;
  v7[1] = a3;
  v6[1] = a5;
  v6[0] = a4;
  while (1)
  {
    BOOL result = sub_1001A68A0((uint64_t)v7, (uint64_t)v6);
    if (!result) {
      break;
    }
    sub_1001A691C((uint64_t)v7);
    sub_1001A68EC();
    sub_1001A6944((uint64_t)v7);
  }
  return result;
}

void *sub_1001A6860(void *a1, uint64_t a2)
{
  return a1;
}

BOOL sub_1001A68A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001A6964(a1);
  return v2 != sub_1001A6964(a2);
}

void sub_1001A68EC()
{
}

void sub_1001A691C(uint64_t a1)
{
}

uint64_t sub_1001A6944(uint64_t result)
{
  *(void *)(result + 8) -= 64;
  return result;
}

uint64_t sub_1001A6964(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1001A6990(uint64_t a1)
{
}

void sub_1001A69C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001A69D0(uint64_t a1)
{
  return sub_1001A69F8(a1);
}

uint64_t sub_1001A69F8(uint64_t a1)
{
  return *(void *)(a1 + 8) - 64;
}

void *sub_1001A6A20(void *result, uint64_t a2)
{
  *BOOL result = a2;
  result[1] = a2;
  return result;
}

void sub_1001A6A48()
{
}

uint64_t sub_1001A6A70(uint64_t a1, uint64_t a2)
{
  sub_1001A65E4();
  return a1 + ((a2 - v4) >> 6 << 6);
}

void *sub_1001A6ABC(void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

uint64_t sub_1001A6ADC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    sub_1001A6B14((uint64_t **)a1);
  }
  return a1;
}

void sub_1001A6B14(uint64_t **a1)
{
  if (**a1)
  {
    sub_1001A6B90(*a1);
    sub_1001A6BBC();
    sub_1001A5FFC();
    uint64_t v3 = v2;
    uint64_t v4 = (void *)**a1;
    sub_1001A6C04(*a1);
    sub_1001A6BCC(v3, v4);
  }
}

void sub_1001A6B90(uint64_t *a1)
{
}

void sub_1001A6BCC(uint64_t a1, void *a2)
{
}

uint64_t sub_1001A6C04(void *a1)
{
  sub_1001A6DB8();
  return (uint64_t)(*v2 - *a1) >> 6;
}

void sub_1001A6C48(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 64)
  {
    sub_1001A5FFC();
    sub_1001A65E4();
    sub_1001A68EC();
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1001A6CD8(uint64_t a1, void *a2)
{
}

void sub_1001A6D30(void *a1)
{
}

void sub_1001A6D64(void *a1)
{
}

void sub_1001A6D90(void *a1)
{
}

void sub_1001A6DB8()
{
}

void sub_1001A6DE4()
{
}

void sub_1001A6E20(uint64_t a1)
{
}

void sub_1001A6E50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001A6E74(uint64_t a1)
{
  return sub_1001A5850(a1);
}

uint64_t sub_1001A6E9C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    sub_1001A6ED4(a1);
  }
  return a1;
}

BOOL sub_1001A6ED4(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  sub_1001A6FF0(v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  sub_1001A6FF0(v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return sub_1001A6F7C(v2, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_1001A6F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = sub_1001A7028(a2, a3);
    if (!result) {
      break;
    }
    sub_1001A70AC(a2);
    sub_1001A707C(a1, v6);
    sub_1001A70D4(a2);
  }
  return result;
}

void *sub_1001A6FF0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A7218(a1, a2, a3);
}

BOOL sub_1001A7028(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v2 = sub_1001A7100(a1);
  v8[1] = v3;
  v8[0] = v2;
  uint64_t v4 = sub_1001A7100(v9);
  v7[1] = v5;
  v7[0] = v4;
  return sub_1001A57A4((uint64_t)v8, (uint64_t)v7);
}

uint64_t *sub_1001A707C(uint64_t a1, uint64_t *a2)
{
  return sub_1001A7124(a1, a2);
}

void sub_1001A70AC(uint64_t a1)
{
}

uint64_t sub_1001A70D4(uint64_t a1)
{
  return sub_1001A71F8(a1 + 24);
}

uint64_t sub_1001A7100(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t *sub_1001A7124(uint64_t a1, uint64_t *a2)
{
  return sub_1001A3494(a2);
}

void sub_1001A7150(uint64_t a1)
{
}

void sub_1001A7180(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001A7190(uint64_t a1)
{
  return sub_1001A71B8(a1);
}

uint64_t sub_1001A71B8(uint64_t a1)
{
  void v3[2] = a1;
  v3[0] = *(void *)(a1 + 24);
  v3[1] = *(void *)(a1 + 32);
  uint64_t v1 = sub_1001A71F8((uint64_t)v3);
  return sub_1001A5850(v1);
}

uint64_t sub_1001A71F8(uint64_t result)
{
  *(void *)(result + 8) += 24;
  return result;
}

void *sub_1001A7218(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *sub_1001A7254(void *result, uint64_t a2)
{
  *BOOL result = a2;
  result[1] = a2;
  return result;
}

void sub_1001A727C()
{
}

uint64_t *sub_1001A72A4(uint64_t *a1)
{
  sub_1001A7318(a1);
  if (*a1)
  {
    uint64_t v2 = sub_1001A52B8((uint64_t)a1);
    uint64_t v3 = (void *)*a1;
    sub_1001A737C(a1);
    sub_1001A7344(v2, v3);
  }
  return a1;
}

uint64_t *sub_1001A7318(uint64_t *a1)
{
  return sub_1001A73C4(a1, a1[1]);
}

void sub_1001A7344(uint64_t a1, void *a2)
{
}

uint64_t sub_1001A737C(void *a1)
{
  sub_1001A74D0();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_1001A73C4(uint64_t *a1, uint64_t a2)
{
  return sub_1001A73F4(a1, a2);
}

uint64_t *sub_1001A73F4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  while (a2 != *(void *)(v2 + 16))
  {
    uint64_t v3 = sub_1001A52B8(v2);
    *(void *)(v2 + 16) -= 24;
    sub_1001A6E60();
    BOOL result = sub_1001A707C(v3, v4);
  }
  return result;
}

void sub_1001A7474(uint64_t a1, void *a2)
{
}

void sub_1001A74D0()
{
}

void sub_1001A74FC()
{
}

void *sub_1001A7524(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1001A7570(a1 + 2);
  return a1;
}

void *sub_1001A7570(void *a1)
{
  return a1;
}

void *sub_1001A75B8(void *a1)
{
  return a1;
}

uint64_t sub_1001A7604(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A763C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001A7688(uint64_t *a1)
{
  v3[1] = a1;
  sub_1001A5CF4(v3, (uint64_t)a1);
  sub_1001A6B14(v3);
  return a1;
}

void **sub_1001A76CC(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001A771C(uint64_t *a1, void *a2)
{
  long long v16 = a1;
  uint64_t v15 = a2;
  sub_1001A6BBC();
  sub_1001A5FFC();
  uint64_t v4 = v3;
  sub_1001A6860(v13, a1[1]);
  sub_1001A6860(v12, *a1);
  sub_1001A6860(v11, v15[1]);
  uint64_t v5 = sub_1001A7A98(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  uint64_t v7 = sub_1001A6964((uint64_t)v14);
  v15[1] = v7;
  sub_1001A7B18(a1, v15 + 1);
  sub_1001A7B18(a1 + 1, v15 + 2);
  sub_1001A6028();
  uint64_t v9 = v8;
  sub_1001A7990();
  sub_1001A7B18(v9, v10);
  void *v15 = v15[1];
  sub_1001A5BDC(a1);
  sub_1001A6054();
}

void **sub_1001A7824(void **a1)
{
  return a1;
}

void **sub_1001A785C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  sub_1001A791C(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v5 = sub_1001A7964((uint64_t)a1);
    *a1 = sub_1001A5FB8(v5, v13);
    unint64_t v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v7 = (char *)*a1 + 64 * v12;
  a1[2] = v7;
  a1[1] = v7;
  unint64_t v8 = (unint64_t)*a1 + 64 * v13;
  sub_1001A7990();
  *uint64_t v9 = v8;
  return v15;
}

void *sub_1001A791C(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1001A7964(uint64_t a1)
{
  return sub_1001A7A2C(a1 + 24);
}

void sub_1001A7990()
{
}

void *sub_1001A79BC(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001A7A0C(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

uint64_t sub_1001A7A2C(uint64_t a1)
{
  return sub_1001A7A58(a1 + 8);
}

uint64_t sub_1001A7A58(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001A7A70()
{
}

uint64_t sub_1001A7A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001A7B54(a2, a3, a4, a5, a6, a7);
}

uint64_t *sub_1001A7B18(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *BOOL result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1001A7B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a1;
  v7[9] = a2;
  _WORD v7[7] = a4;
  v7[6] = a3;
  void v7[5] = a6;
  v7[4] = a5;
  sub_1001A7BD0(v7, a1, a2, a3, a4, a5, a6);
  return v7[2];
}

void *sub_1001A7BD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001A7C38(a1, a2, a3, a4, a5, a6, a7);
}

void *sub_1001A7C38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001A7CA0(a1, a2, a3, a4, a5, a6, a7);
}

void *sub_1001A7CA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = a3;
  *((void *)&v31 + 1) = a5;
  *(void *)&long long v31 = a4;
  *((void *)&v30 + 1) = a7;
  *(void *)&long long v30 = a6;
  long long v28 = v32;
  long long v27 = v31;
  sub_1001A7DC0(v29, a2, a3, a4, a5);
  long long v23 = v29[0];
  long long v22 = v29[1];
  long long v19 = v30;
  sub_1001A7F0C();
  uint64_t v21 = v8;
  uint64_t v20 = v9;
  sub_1001A7E40(&v25, (uint64_t)&v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v9, v8);
  long long v17 = v32;
  long long v16 = v25;
  uint64_t v10 = sub_1001A7F84(v32, *((uint64_t *)&v32 + 1), v25);
  v18[1] = v11;
  v18[0] = v10;
  uint64_t v12 = sub_1001A7FE4(v30, *((uint64_t *)&v30 + 1), v26);
  v15[1] = v13;
  v15[0] = v12;
  return sub_1001A7F54(a1, v18, v15);
}

void *sub_1001A7DC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  id v13[3] = a5;
  uint64_t v13[2] = a4;
  long long v12 = v14;
  sub_1001A7F0C();
  v13[1] = v6;
  v13[0] = v7;
  sub_1001A7F0C();
  v11[1] = v8;
  v11[0] = v9;
  return sub_1001A7F54(a1, v13, v11);
}

void *sub_1001A7E40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a3;
  v14[1] = a4;
  v13[1] = a6;
  v13[0] = a5;
  v12[1] = a8;
  v12[0] = a7;
  while (sub_1001A68A0((uint64_t)v14, (uint64_t)v13))
  {
    uint64_t v9 = (void *)sub_1001A8044((uint64_t)v14);
    uint64_t v10 = (void *)sub_1001A69F8((uint64_t)v12);
    *uint64_t v10 = *v9;
    v10[1] = v9[1];
    id v10[2] = v9[2];
    id v10[3] = v9[3];
    id v10[4] = v9[4];
    v10[5] = v9[5];
    void v10[6] = v9[6];
    uint8_t v10[7] = v9[7];
    sub_1001A6944((uint64_t)v14);
    sub_1001A6944((uint64_t)v12);
  }
  return sub_1001A7F54(a1, v14, v12);
}

void sub_1001A7F0C()
{
}

void *sub_1001A7F54(void *a1, void *a2, void *a3)
{
  return sub_1001A8098(a1, a2, a3);
}

uint64_t sub_1001A7F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A7FE4(a1, a2, a3);
}

uint64_t sub_1001A7FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A8124(a1, a2, a3);
}

uint64_t sub_1001A8044(uint64_t a1)
{
  return sub_1001A69F8(a1);
}

void *sub_1001A8098(void *a1, void *a2, void *a3)
{
  return a1;
}

void *sub_1001A80E0(void *result, void *a2, void *a3)
{
  *BOOL result = *a2;
  result[1] = a2[1];
  result[2] = *a3;
  result[3] = a3[1];
  return result;
}

uint64_t sub_1001A8124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void **sub_1001A8150(void **a1)
{
  sub_1001A81C4((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = sub_1001A7964((uint64_t)a1);
    uint64_t v3 = *a1;
    sub_1001A81F0(a1);
    sub_1001A6BCC(v2, v3);
  }
  return a1;
}

void sub_1001A81C4(uint64_t a1)
{
}

uint64_t sub_1001A81F0(void *a1)
{
  sub_1001A82E4();
  return (uint64_t)(*v2 - *a1) >> 6;
}

void sub_1001A8234(uint64_t a1, uint64_t a2)
{
}

void sub_1001A8264(uint64_t a1, uint64_t a2)
{
  while (a2 != *(void *)(a1 + 16))
  {
    sub_1001A7964(a1);
    *(void *)(a1 + 16) -= 64;
    sub_1001A65E4();
    sub_1001A68EC();
  }
}

void sub_1001A82E4()
{
}

void sub_1001A8310()
{
}

void *sub_1001A8338(uint64_t a1, void **a2, float32x4_t *a3)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  sub_1001A617C(&v7, a1, 1);
  sub_1001A5FFC();
  uint64_t v4 = v3;
  sub_1001A65E4();
  sub_1001A84C8(v4, v5, v10, v9);
  v8 += 64;
  return sub_1001A624C(&v7);
}

void sub_1001A83BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

uint64_t sub_1001A83E0(uint64_t *a1, void **a2, float32x4_t *a3)
{
  long long v17 = a1;
  long long v16 = a2;
  uint64_t v15 = a3;
  sub_1001A5FFC();
  uint64_t v14 = v4;
  uint64_t v5 = sub_1001A5BDC(a1);
  unint64_t v6 = sub_1001A9090(a1, v5 + 1);
  uint64_t v7 = sub_1001A5BDC(a1);
  sub_1001A76CC(v12, v6, v7, v14);
  uint64_t v8 = v14;
  sub_1001A65E4();
  sub_1001A84C8(v8, v9, v16, v15);
  v13 += 64;
  sub_1001A771C(a1, v12);
  uint64_t v10 = a1[1];
  sub_1001A7824(v12);
  return v10;
}

void sub_1001A84A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, void *a13)
{
}

float32x4_t *sub_1001A84C8(uint64_t a1, float32x4_t *a2, void **a3, float32x4_t *a4)
{
  return sub_1001A8508(a1, a2, a3, a4);
}

float32x4_t *sub_1001A8508(uint64_t a1, float32x4_t *a2, void **a3, float32x4_t *a4)
{
  return sub_1001A854C(a2, *a3, *a4);
}

float32x4_t *sub_1001A854C(float32x4_t *a1, void *a2, float32x4_t a3)
{
  uint64_t v7 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v3 = v7;
  sub_1001A85D0(v7, location, a3);
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_1001A85B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  objc_storeStrong((id *)(v13 - 32), 0);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1001A85D0(float32x4_t *a1, void *a2, float32x4_t a3)
{
  id v61 = a1;
  id location = 0;
  objc_storeStrong(&location, a2);
  uint64_t v3 = v61;
  id v4 = [location objectForKeyedSubscript:@"p0"];
  id v72 = 0;
  objc_storeStrong(&v72, v4);
  if (v72 && [v72 count] == (id)4)
  {
    id v5 = [v72 objectAtIndexedSubscript:0];
    [v5 floatValue];
    unsigned int v7 = v6;
    id v8 = [v72 objectAtIndexedSubscript:1];
    [v8 floatValue];
    unsigned int v10 = v9;
    id v11 = [v72 objectAtIndexedSubscript:2];
    [v11 floatValue];
    unsigned int v13 = v12;
    id v14 = [v72 objectAtIndexedSubscript:3];
    [v14 floatValue];
    unsigned int v86 = v7;
    unsigned int v85 = v10;
    unsigned int v84 = v13;
    unsigned int v83 = v15;
    v82.i64[0] = __PAIR64__(v10, v7);
    v82.i64[1] = __PAIR64__(v15, v13);
    float32x4_t v73 = v82;

    int v71 = 1;
  }
  else
  {
    int v81 = 0;
    int v80 = 0;
    int v79 = 0;
    int v78 = 0;
    int v74 = 0;
    int v75 = 0;
    int v76 = 0;
    int v77 = 0;
    float32x4_t v73 = 0u;
    int v71 = 1;
  }
  objc_storeStrong(&v72, 0);
  float32x4_t v58 = vmulq_f32(v73, a3);

  float32x4_t *v3 = v58;
  long long v16 = v3 + 1;
  id v17 = [location objectForKeyedSubscript:@"p1"];
  id v69 = 0;
  objc_storeStrong(&v69, v17);
  if (v69 && [v69 count] == (id)4)
  {
    id v18 = [v69 objectAtIndexedSubscript:0];
    [v18 floatValue];
    unsigned int v20 = v19;
    id v21 = [v69 objectAtIndexedSubscript:1];
    [v21 floatValue];
    unsigned int v23 = v22;
    id v24 = [v69 objectAtIndexedSubscript:2];
    [v24 floatValue];
    unsigned int v26 = v25;
    id v27 = [v69 objectAtIndexedSubscript:3];
    [v27 floatValue];
    unsigned int v99 = v20;
    unsigned int v98 = v23;
    unsigned int v97 = v26;
    unsigned int v96 = v28;
    v95.i64[0] = __PAIR64__(v23, v20);
    v95.i64[1] = __PAIR64__(v28, v26);
    float32x4_t v70 = v95;

    int v68 = 1;
    long long v16 = v3 + 1;
  }
  else
  {
    int v94 = 0;
    int v93 = 0;
    int v92 = 0;
    int v91 = 0;
    int v87 = 0;
    int v88 = 0;
    int v89 = 0;
    int v90 = 0;
    float32x4_t v70 = 0u;
    int v68 = 1;
  }
  objc_storeStrong(&v69, 0);
  float32x4_t v57 = vmulq_f32(v70, a3);

  *long long v16 = v57;
  char v29 = v3 + 2;
  id v30 = [location objectForKeyedSubscript:@"p2"];
  id v66 = 0;
  objc_storeStrong(&v66, v30);
  if (v66 && [v66 count] == (id)4)
  {
    id v31 = [v66 objectAtIndexedSubscript:0];
    [v31 floatValue];
    unsigned int v33 = v32;
    id v34 = [v66 objectAtIndexedSubscript:1];
    [v34 floatValue];
    unsigned int v36 = v35;
    id v37 = [v66 objectAtIndexedSubscript:2];
    [v37 floatValue];
    unsigned int v39 = v38;
    id v40 = [v66 objectAtIndexedSubscript:3];
    [v40 floatValue];
    unsigned int v112 = v33;
    unsigned int v111 = v36;
    unsigned int v110 = v39;
    unsigned int v109 = v41;
    v108.i64[0] = __PAIR64__(v36, v33);
    v108.i64[1] = __PAIR64__(v41, v39);
    float32x4_t v67 = v108;

    int v65 = 1;
    char v29 = v3 + 2;
  }
  else
  {
    int v107 = 0;
    int v106 = 0;
    int v105 = 0;
    int v104 = 0;
    int v100 = 0;
    int v101 = 0;
    int v102 = 0;
    int v103 = 0;
    float32x4_t v67 = 0u;
    int v65 = 1;
  }
  objc_storeStrong(&v66, 0);
  float32x4_t v56 = vmulq_f32(v67, a3);

  *char v29 = v56;
  id v42 = [location objectForKeyedSubscript:@"p3"];
  id v63 = 0;
  objc_storeStrong(&v63, v42);
  if (v63 && [v63 count] == (id)4)
  {
    id v43 = [v63 objectAtIndexedSubscript:0];
    [v43 floatValue];
    unsigned int v45 = v44;
    id v46 = [v63 objectAtIndexedSubscript:1];
    [v46 floatValue];
    unsigned int v48 = v47;
    id v49 = [v63 objectAtIndexedSubscript:2];
    [v49 floatValue];
    unsigned int v51 = v50;
    id v52 = [v63 objectAtIndexedSubscript:3];
    [v52 floatValue];
    unsigned int v125 = v45;
    unsigned int v124 = v48;
    unsigned int v123 = v51;
    unsigned int v122 = v53;
    v121.i64[0] = __PAIR64__(v48, v45);
    v121.i64[1] = __PAIR64__(v53, v51);
    float32x4_t v64 = v121;

    int v62 = 1;
  }
  else
  {
    int v120 = 0;
    int v119 = 0;
    int v118 = 0;
    int v117 = 0;
    int v113 = 0;
    int v114 = 0;
    int v115 = 0;
    int v116 = 0;
    float32x4_t v64 = 0u;
    int v62 = 1;
  }
  objc_storeStrong(&v63, 0);
  float32x4_t v55 = vmulq_f32(v64, a3);

  void v3[3] = v55;
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_1001A9014()
{
}

void sub_1001A9020()
{
  JUMPOUT(0x1001A907CLL);
}

void sub_1001A9038()
{
  JUMPOUT(0x1001A907CLL);
}

void sub_1001A9050()
{
  JUMPOUT(0x1001A907CLL);
}

void sub_1001A9068(_Unwind_Exception *a1)
{
  objc_storeStrong(&v3, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_1001A9090(void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = sub_1001A5F3C((uint64_t)a1);
  if (v7[0] > v6) {
    sub_1001A5FA0();
  }
  unint64_t v5 = sub_1001A6C04(a1);
  if (v5 >= v6 >> 1) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *sub_1001A9138(&v4, v7);
}

void *sub_1001A9138(void *a1, void *a2)
{
  return sub_1001A9168(a1, a2);
}

void *sub_1001A9168(void *a1, void *a2)
{
  if (sub_1001A4F9C((uint64_t)&v5, a1, a2)) {
    return a2;
  }
  else {
    return a1;
  }
}

void *sub_1001A91AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = a1;
  id v8 = a2;
  sub_1001A9328(&v6, a1);
  sub_1001A4C70();
  uint64_t v3 = v2;
  sub_1001A6E60();
  sub_1001A9374(v3, v4, v8);
  v7 += 24;
  return sub_1001A93AC(&v6);
}

void sub_1001A9224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t sub_1001A9248(uint64_t *a1, uint64_t *a2)
{
  unsigned int v15 = a1;
  id v14 = a2;
  sub_1001A4C70();
  uint64_t v13 = v3;
  uint64_t v4 = sub_1001A4C9C(a1);
  unint64_t v5 = sub_1001A9480(a1, v4 + 1);
  uint64_t v6 = sub_1001A4C9C(a1);
  sub_1001A4CC4(v11, v5, v6, v13);
  uint64_t v7 = v13;
  sub_1001A6E60();
  sub_1001A9374(v7, v8, v14);
  v12 += 24;
  sub_1001A4D14(a1, v11);
  uint64_t v9 = a1[1];
  sub_1001A4E1C((uint64_t *)v11);
  return v9;
}

void sub_1001A9304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

void *sub_1001A9328(void *a1, uint64_t a2)
{
  return a1;
}

void *sub_1001A9374(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001A942C(a1, a2, a3);
}

void *sub_1001A93AC(void *a1)
{
  return a1;
}

void *sub_1001A93E4(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 24 * a3;
  return result;
}

void *sub_1001A942C(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001A59C8(a2, a3);
}

void *sub_1001A9460(void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

unint64_t sub_1001A9480(void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = sub_1001A4BF0((uint64_t)a1);
  if (v7[0] > v6) {
    sub_1001A4C58();
  }
  unint64_t v5 = sub_1001A4BA8(a1);
  if (v5 >= v6 >> 1) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *sub_1001A9138(&v4, v7);
}

void *sub_1001A9528(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1001A9574(a1 + 2);
  return a1;
}

void *sub_1001A9574(void *a1)
{
  return a1;
}

void *sub_1001A95BC(void *a1)
{
  return a1;
}

void *sub_1001A9608(void *result)
{
  *BOOL result = 0;
  return result;
}

uint64_t sub_1001A9624(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A965C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001A96A8(uint64_t *a1)
{
  v3[1] = a1;
  sub_1001A96EC(v3, (uint64_t)a1);
  sub_1001A972C(v3);
  return a1;
}

void *sub_1001A96EC(void *a1, uint64_t a2)
{
  return a1;
}

void sub_1001A972C(uint64_t **a1)
{
  if (**a1)
  {
    sub_1001A97C8(*a1);
    sub_1001A97F4();
    sub_1001A983C();
    uint64_t v3 = v2;
    uint64_t v4 = (void *)**a1;
    sub_1001A9868(*a1);
    sub_1001A9804(v3, v4);
  }
}

void *sub_1001A97A8(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

uint64_t *sub_1001A97C8(uint64_t *a1)
{
  return sub_1001A98B0(a1, *a1);
}

void sub_1001A9804(uint64_t a1, void *a2)
{
}

void sub_1001A983C()
{
}

uint64_t sub_1001A9868(void *a1)
{
  sub_1001A9A48();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_1001A98B0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = result[1]; a2 != i; i -= 24)
  {
    sub_1001A983C();
    uint64_t v4 = v3;
    sub_1001A9970();
    BOOL result = sub_1001A9940(v4, v5);
  }
  v2[1] = a2;
  return result;
}

uint64_t *sub_1001A9940(uint64_t a1, uint64_t *a2)
{
  return sub_1001A9984(a1, a2);
}

uint64_t *sub_1001A9984(uint64_t a1, uint64_t *a2)
{
  return sub_1001A4890(a2);
}

void sub_1001A99B0(uint64_t a1, void *a2)
{
}

void sub_1001A9A0C()
{
}

void sub_1001A9A48()
{
}

void sub_1001A9A74()
{
}

uint64_t sub_1001A9AB0(uint64_t a1, uint64_t a2)
{
  sub_1001A9AE4(&v3, a2);
  return v3;
}

void *sub_1001A9AE4(void *a1, uint64_t a2)
{
  return a1;
}

void *sub_1001A9B24(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

BOOL sub_1001A9B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001A9B90(a1);
  return v2 == sub_1001A9B90(a2);
}

uint64_t sub_1001A9B90(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_1001A9BA8(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1001A9BF4(a1 + 2);
  return a1;
}

void *sub_1001A9BF4(void *a1)
{
  return a1;
}

void *sub_1001A9C3C(void *a1)
{
  return a1;
}

void *sub_1001A9C88(void *result)
{
  *BOOL result = 0;
  return result;
}

uint64_t sub_1001A9CA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A9CDC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001A9D28(uint64_t *a1)
{
  v3[1] = a1;
  sub_1001A9D6C(v3, (uint64_t)a1);
  sub_1001A9DAC(v3);
  return a1;
}

void *sub_1001A9D6C(void *a1, uint64_t a2)
{
  return a1;
}

void sub_1001A9DAC(uint64_t **a1)
{
  if (**a1)
  {
    sub_1001A9E48(*a1);
    sub_1001A9E74();
    sub_1001A9EBC();
    uint64_t v3 = v2;
    uint64_t v4 = (void *)**a1;
    sub_1001A9EE8(*a1);
    sub_1001A9E84(v3, v4);
  }
}

void *sub_1001A9E28(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

void sub_1001A9E48(uint64_t *a1)
{
}

void sub_1001A9E84(uint64_t a1, void *a2)
{
}

void sub_1001A9EBC()
{
}

uint64_t sub_1001A9EE8(void *a1)
{
  sub_1001AA0B0();
  return (*v2 - *a1) / 24;
}

void sub_1001A9F30(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); a2 != i; i -= 24)
  {
    sub_1001A9EBC();
    sub_1001A9FF0();
    sub_1001A9FC0();
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1001A9FC0()
{
}

void sub_1001AA018(uint64_t a1, void *a2)
{
}

void sub_1001AA074()
{
}

void sub_1001AA0B0()
{
}

void sub_1001AA0DC()
{
}

uint64_t sub_1001AA118(uint64_t a1, uint64_t a2)
{
  sub_1001AA14C(&v3, a2);
  return v3;
}

void *sub_1001AA14C(void *a1, uint64_t a2)
{
  return a1;
}

void *sub_1001AA18C(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

BOOL sub_1001AA1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001AA1F8(a1);
  return v2 == sub_1001AA1F8(a2);
}

uint64_t sub_1001AA1F8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001AA210()
{
}

void *sub_1001AA23C(uint64_t a1, void *a2)
{
  uint64_t v9 = a1;
  id v8 = a2;
  sub_1001AA3F4(&v6, a1);
  sub_1001A983C();
  uint64_t v3 = v2;
  sub_1001A9970();
  sub_1001AA440(v3, v4, v8);
  v7 += 24;
  return sub_1001AA478(&v6);
}

void sub_1001AA2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t sub_1001AA2D8(uint64_t *a1, void *a2)
{
  unsigned int v15 = a1;
  id v14 = a2;
  sub_1001A983C();
  uint64_t v13 = v3;
  uint64_t v4 = sub_1001AA7F4(a1);
  unint64_t v5 = sub_1001AA74C(a1, v4 + 1);
  uint64_t v6 = sub_1001AA7F4(a1);
  sub_1001AA81C(v11, v5, v6, v13);
  uint64_t v7 = v13;
  sub_1001A9970();
  sub_1001AA440(v7, v8, v14);
  v12 += 24;
  sub_1001AA86C(a1, v11);
  uint64_t v9 = a1[1];
  sub_1001AA974((uint64_t *)v11);
  return v9;
}

void sub_1001AA394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

void sub_1001AA3B8()
{
}

void *sub_1001AA3F4(void *a1, uint64_t a2)
{
  return a1;
}

void *sub_1001AA440(uint64_t a1, void *a2, void *a3)
{
  return sub_1001AA4F8(a1, a2, a3);
}

void *sub_1001AA478(void *a1)
{
  return a1;
}

void *sub_1001AA4B0(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 24 * a3;
  return result;
}

void *sub_1001AA4F8(uint64_t a1, void *a2, void *a3)
{
  return sub_1001AA52C(a2, a3);
}

void *sub_1001AA52C(void *a1, void *a2)
{
  return a1;
}

void *sub_1001AA56C(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a1 + 2;
  sub_1001A9EBC();
  sub_1001AA614(v3);
  *a1 = *a2;
  a1[1] = a2[1];
  sub_1001AA65C();
  uint64_t v5 = *v4;
  sub_1001AA65C();
  *uint64_t v6 = v5;
  sub_1001AA65C();
  void *v7 = 0;
  a2[1] = 0;
  *a2 = 0;
  return a1;
}

void *sub_1001AA614(void *a1)
{
  return a1;
}

void sub_1001AA65C()
{
}

void *sub_1001AA688(void *a1)
{
  return a1;
}

void sub_1001AA6F0()
{
}

void *sub_1001AA72C(void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

unint64_t sub_1001AA74C(void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = sub_1001AA9AC((uint64_t)a1);
  if (v7[0] > v6) {
    sub_1001AAA14();
  }
  unint64_t v5 = sub_1001A9868(a1);
  if (v5 >= v6 >> 1) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *sub_1001A9138(&v4, v7);
}

uint64_t sub_1001AA7F4(void *a1)
{
  return (a1[1] - *a1) / 24;
}

void **sub_1001AA81C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001AA86C(uint64_t *a1, void *a2)
{
  long long v16 = a1;
  unsigned int v15 = a2;
  sub_1001A97F4();
  sub_1001A983C();
  uint64_t v4 = v3;
  sub_1001AAED0(v13, a1[1]);
  sub_1001AAED0(v12, *a1);
  sub_1001AAED0(v11, v15[1]);
  uint64_t v5 = sub_1001AADB8(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  uint64_t v7 = sub_1001AAF10((uint64_t)v14);
  v15[1] = v7;
  sub_1001AAF28(a1, v15 + 1);
  sub_1001AAF28(a1 + 1, v15 + 2);
  sub_1001AA210();
  uint64_t v9 = v8;
  sub_1001AAC44();
  sub_1001AAF28(v9, v10);
  void *v15 = v15[1];
  sub_1001AA7F4(a1);
  sub_1001AAF64();
}

uint64_t *sub_1001AA974(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1001AA9AC(uint64_t a1)
{
  v3[1] = a1;
  sub_1001AAA54();
  sub_1001AAA2C();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_1001A4F40();
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_1001A4EBC(v3, &v2);
}

void sub_1001AAA04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

void sub_1001AAA14()
{
}

void sub_1001AAA2C()
{
}

void sub_1001AAA54()
{
}

void sub_1001AAA90()
{
}

void **sub_1001AAACC(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  id v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  unsigned int v15 = a1;
  v11[0] = 0;
  sub_1001AAB8C(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v5 = sub_1001AAC18((uint64_t)a1);
    *a1 = sub_1001AABD4(v5, v13);
    unint64_t v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  unint64_t v8 = (unint64_t)*a1 + 24 * v13;
  sub_1001AAC44();
  *uint64_t v9 = v8;
  return v15;
}

void *sub_1001AAB8C(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001AABD4(uint64_t a1, unint64_t a2)
{
  return sub_1001AACE0(a1, a2);
}

uint64_t sub_1001AAC18(uint64_t a1)
{
  return sub_1001AAD4C(a1 + 24);
}

void sub_1001AAC44()
{
}

void *sub_1001AAC70(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001AACC0(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

void *sub_1001AACE0(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001A5408();
  }
  nullsub_3();
  return sub_1001A5440(24 * a2);
}

uint64_t sub_1001AAD4C(uint64_t a1)
{
  return sub_1001AAD78(a1 + 8);
}

uint64_t sub_1001AAD78(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001AAD90()
{
}

uint64_t sub_1001AADB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a2;
  v18[1] = a3;
  v17[1] = a5;
  v17[0] = a4;
  *((void *)&v16 + 1) = a7;
  *(void *)&long long v16 = a6;
  uint64_t v15 = a1;
  v14[0] = a6;
  v14[1] = a7;
  sub_1001AAFBC(v12, a1, (uint64_t)v14, (uint64_t)&v16);
  sub_1001AAF78((uint64_t)v13, v12);
  while (sub_1001AB00C((uint64_t)v18, (uint64_t)v17))
  {
    uint64_t v7 = v15;
    sub_1001AB090((uint64_t)&v16);
    uint64_t v9 = v8;
    unsigned int v10 = (uint64_t *)sub_1001AB0B8((uint64_t)v18);
    sub_1001AB058(v7, v9, v10);
    sub_1001AB0E0((uint64_t)v18);
    sub_1001AB0E0((uint64_t)&v16);
  }
  sub_1001AB100((uint64_t)v13);
  long long v19 = v16;
  sub_1001AB11C((uint64_t)v13);
  return v19;
}

void *sub_1001AAED0(void *a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1001AAF10(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *sub_1001AAF28(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *BOOL result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1001AAF78(uint64_t a1, void *a2)
{
  v3[4] = a1;
  void v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  void v3[2] = a2[2];
  return sub_1001AB154(a1, v3);
}

void *sub_1001AAFBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

BOOL sub_1001AB00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001AAF10(a1);
  return v2 != sub_1001AAF10(a2);
}

void *sub_1001AB058(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001AB1FC(a1, a2, a3);
}

void sub_1001AB090(uint64_t a1)
{
}

uint64_t sub_1001AB0B8(uint64_t a1)
{
  return *(void *)(a1 + 8) - 24;
}

uint64_t sub_1001AB0E0(uint64_t result)
{
  *(void *)(result + 8) -= 24;
  return result;
}

uint64_t sub_1001AB100(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001AB11C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001AB154(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_1001AB190(uint64_t result, void *a2)
{
  *(void *)BOOL result = *a2;
  *(void *)(result + 8) = a2[1];
  *(void *)(result + 16) = a2[2];
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void *sub_1001AB1C4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void *sub_1001AB1FC(uint64_t a1, void *a2, uint64_t *a3)
{
  return sub_1001AB230(a2, a3);
}

void *sub_1001AB230(void *a1, uint64_t *a2)
{
  return a1;
}

void *sub_1001AB270(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a1 + 2;
  sub_1001AB314();
  sub_1001AB304();
  sub_1001AA614(v3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = sub_1001A49FC(a2);
  sub_1001AB340(a1, v4, v5, v6);
  return a1;
}

void sub_1001AB314()
{
}

uint64_t sub_1001AB340(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  unint64_t v8 = a4;
  sub_1001A9D6C(&v6, (uint64_t)a1);
  sub_1001AB438((uint64_t)v7, v6);
  if (v8)
  {
    sub_1001AB46C(a1, v8);
    sub_1001AB508((uint64_t)a1, v10, v9, v8);
  }
  sub_1001AB59C((uint64_t)v7);
  return sub_1001AB5B8((uint64_t)v7);
}

void sub_1001AB3FC()
{
}

uint64_t sub_1001AB438(uint64_t a1, uint64_t a2)
{
  return sub_1001AB5F0(a1, a2);
}

void sub_1001AB46C(void *a1, unint64_t a2)
{
  if (a2 > sub_1001AB654((uint64_t)a1)) {
    sub_1001AB6BC();
  }
  sub_1001A9EBC();
  uint64_t v4 = sub_1001AB6D4(v3, a2);
  *a1 = v4;
  a1[1] = v4;
  uint64_t v6 = *a1 + 24 * v5;
  sub_1001AA65C();
  uint64_t *v7 = v6;
  sub_1001AB718();
}

void *sub_1001AB508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t v8 = a4;
  sub_1001AB7D0(&v6, a1, a4);
  sub_1001A9EBC();
  uint64_t v7 = sub_1001AB818(v4, v10, v9, v7);
  return sub_1001AB8A0(&v6);
}

void sub_1001AB578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t sub_1001AB59C(uint64_t result)
{
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t sub_1001AB5B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001AB5F0(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1001AB630(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = a2;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

uint64_t sub_1001AB654(uint64_t a1)
{
  v3[1] = a1;
  sub_1001AB314();
  sub_1001AB72C();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_1001A4F40();
  uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_1001A4EBC(v3, &v2);
}

void sub_1001AB6AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

void sub_1001AB6BC()
{
}

void *sub_1001AB6D4(uint64_t a1, unint64_t a2)
{
  return sub_1001AB764(a1, a2);
}

void sub_1001AB72C()
{
}

void *sub_1001AB764(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001A5408();
  }
  nullsub_3();
  return sub_1001A5440(24 * a2);
}

void *sub_1001AB7D0(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1001AB818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)sub_1001AB920(a2, a3);
  uint64_t v6 = v5;
  sub_1001ABA5C();
  uint64_t v8 = sub_1001AB978(a1, v4, v6, v7);
  return sub_1001ABA84(a4, v8);
}

void *sub_1001AB8A0(void *a1)
{
  return a1;
}

void *sub_1001AB8D8(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = *(void *)(a2 + 8) + 24 * a3;
  return result;
}

uint64_t sub_1001AB920(uint64_t a1, uint64_t a2)
{
  void v6[2] = a1;
  v6[1] = a2;
  sub_1001ABA5C();
  v6[0] = v2;
  sub_1001ABA5C();
  uint64_t v5 = v3;
  return sub_1001ABAB4(v6, &v5);
}

uint64_t sub_1001AB978(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  sub_1001ABBB0(v8, a1, (uint64_t)&v10, (uint64_t)&v11);
  sub_1001ABB6C((uint64_t)v9, v8);
  while (v13 != v12)
  {
    uint64_t v4 = v14;
    sub_1001A9FF0();
    sub_1001ABC00(v4, v5, v13);
    v13 += 3;
    v11 += 24;
  }
  sub_1001ABC38((uint64_t)v9);
  uint64_t v6 = v11;
  sub_1001ABC54((uint64_t)v9);
  return v6;
}

void sub_1001ABA5C()
{
}

uint64_t sub_1001ABA84(uint64_t a1, uint64_t a2)
{
  return sub_1001AC044(a1, a2);
}

uint64_t sub_1001ABAB4(void *a1, void *a2)
{
  sub_1001ABAF0(&v3, a1, a2);
  return v3;
}

void *sub_1001ABAF0(void *a1, void *a2, void *a3)
{
  return a1;
}

void *sub_1001ABB38(void *result, void *a2, void *a3)
{
  *BOOL result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_1001ABB6C(uint64_t a1, void *a2)
{
  v3[4] = a1;
  void v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  void v3[2] = a2[2];
  return sub_1001ABC8C(a1, v3);
}

void *sub_1001ABBB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001ABC00(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_1001ABC38(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001ABC54(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001ABC8C(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_1001ABCC8(uint64_t result, void *a2)
{
  *(void *)BOOL result = *a2;
  *(void *)(result + 8) = a2[1];
  *(void *)(result + 16) = a2[2];
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void *sub_1001ABCFC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_1001ABD34(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
}

uint64_t sub_1001ABD6C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    sub_1001ABDA4(a1);
  }
  return a1;
}

BOOL sub_1001ABDA4(uint64_t a1)
{
  void v5[2] = a1;
  uint64_t v2 = *(void *)a1;
  sub_1001ABE78(v5, **(void **)(a1 + 16));
  sub_1001ABE78(v4, **(void **)(a1 + 8));
  return sub_1001ABE0C(v2, v5[0], v5[1], v4[0], v4[1]);
}

BOOL sub_1001ABE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a2;
  v7[1] = a3;
  v6[1] = a5;
  v6[0] = a4;
  while (1)
  {
    BOOL result = sub_1001ABEB8((uint64_t)v7, (uint64_t)v6);
    if (!result) {
      break;
    }
    sub_1001ABF04((uint64_t)v7);
    sub_1001A9FC0();
    sub_1001ABF2C((uint64_t)v7);
  }
  return result;
}

void *sub_1001ABE78(void *a1, uint64_t a2)
{
  return a1;
}

BOOL sub_1001ABEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001ABF4C(a1);
  return v2 != sub_1001ABF4C(a2);
}

void sub_1001ABF04(uint64_t a1)
{
}

uint64_t sub_1001ABF2C(uint64_t result)
{
  *(void *)(result + 8) -= 24;
  return result;
}

uint64_t sub_1001ABF4C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1001ABF64(uint64_t a1)
{
}

void sub_1001ABF94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001ABFA4(uint64_t a1)
{
  return sub_1001ABFCC(a1);
}

uint64_t sub_1001ABFCC(uint64_t a1)
{
  return *(void *)(a1 + 8) - 24;
}

void *sub_1001ABFF4(void *result, uint64_t a2)
{
  *BOOL result = a2;
  result[1] = a2;
  return result;
}

void sub_1001AC01C()
{
}

uint64_t sub_1001AC044(uint64_t a1, uint64_t a2)
{
  sub_1001A9FF0();
  return a1 + 24 * ((a2 - v4) / 24);
}

void *sub_1001AC094(void *result)
{
  *(void *)(*result + 8) = result[1];
  return result;
}

uint64_t sub_1001AC0B4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    sub_1001A9DAC((uint64_t **)a1);
  }
  return a1;
}

void sub_1001AC0EC(uint64_t a1)
{
}

void sub_1001AC11C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001AC12C(uint64_t a1)
{
  return sub_1001AB0B8(a1);
}

uint64_t sub_1001AC154(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    sub_1001AC18C(a1);
  }
  return a1;
}

BOOL sub_1001AC18C(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  sub_1001AC2A8(v5, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8));
  sub_1001AC2A8(v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return sub_1001AC234(v2, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_1001AC234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    BOOL result = sub_1001AC2E0(a2, a3);
    if (!result) {
      break;
    }
    sub_1001AC334(a2);
    sub_1001A9940(a1, v6);
    sub_1001AC35C(a2);
  }
  return result;
}

void *sub_1001AC2A8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AC474(a1, a2, a3);
}

BOOL sub_1001AC2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v2 = sub_1001AC388(a1);
  v8[1] = v3;
  v8[0] = v2;
  uint64_t v4 = sub_1001AC388(v9);
  v7[1] = v5;
  v7[0] = v4;
  return sub_1001AB00C((uint64_t)v8, (uint64_t)v7);
}

void sub_1001AC334(uint64_t a1)
{
}

uint64_t sub_1001AC35C(uint64_t a1)
{
  return sub_1001AC454(a1 + 24);
}

uint64_t sub_1001AC388(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void sub_1001AC3AC(uint64_t a1)
{
}

void sub_1001AC3DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

uint64_t sub_1001AC3EC(uint64_t a1)
{
  return sub_1001AC414(a1);
}

uint64_t sub_1001AC414(uint64_t a1)
{
  void v3[2] = a1;
  v3[0] = *(void *)(a1 + 24);
  v3[1] = *(void *)(a1 + 32);
  uint64_t v1 = sub_1001AC454((uint64_t)v3);
  return sub_1001AB0B8(v1);
}

uint64_t sub_1001AC454(uint64_t result)
{
  *(void *)(result + 8) += 24;
  return result;
}

void *sub_1001AC474(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *sub_1001AC4B0(void *result, uint64_t a2)
{
  *BOOL result = a2;
  result[1] = a2;
  return result;
}

uint64_t *sub_1001AC4D8(uint64_t *a1)
{
  sub_1001AC54C(a1);
  if (*a1)
  {
    uint64_t v2 = sub_1001AAC18((uint64_t)a1);
    uint64_t v3 = (void *)*a1;
    sub_1001AC578(a1);
    sub_1001A9804(v2, v3);
  }
  return a1;
}

uint64_t *sub_1001AC54C(uint64_t *a1)
{
  return sub_1001AC5C0(a1, a1[1]);
}

uint64_t sub_1001AC578(void *a1)
{
  sub_1001AC670();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_1001AC5C0(uint64_t *a1, uint64_t a2)
{
  return sub_1001AC5F0(a1, a2);
}

uint64_t *sub_1001AC5F0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  while (a2 != *(void *)(v2 + 16))
  {
    uint64_t v3 = sub_1001AAC18(v2);
    *(void *)(v2 + 16) -= 24;
    sub_1001A9970();
    BOOL result = sub_1001A9940(v3, v4);
  }
  return result;
}

void sub_1001AC670()
{
}

void sub_1001AC69C()
{
}

void *sub_1001AC6C4(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  unint64_t v13 = a3;
  uint64_t v12 = a4;
  uint64_t v11 = a5;
  sub_1001AB7D0(&v9, a1, 1);
  sub_1001A9EBC();
  uint64_t v6 = v5;
  sub_1001A9FF0();
  sub_1001AC874(v6, v7, v14, v13, v12, v11);
  v10 += 24;
  return sub_1001AB8A0(&v9);
}

void sub_1001AC758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

uint64_t sub_1001AC77C(uint64_t *a1, double *a2, double *a3, double *a4, double *a5)
{
  id v21 = a1;
  unsigned int v20 = a2;
  long long v19 = a3;
  id v18 = a4;
  id v17 = a5;
  sub_1001A9EBC();
  uint64_t v16 = v6;
  uint64_t v7 = sub_1001A49FC(a1);
  unint64_t v8 = sub_1001AC9B4(a1, v7 + 1);
  uint64_t v9 = sub_1001A49FC(a1);
  sub_1001ACA5C(v14, v8, v9, v16);
  uint64_t v10 = v16;
  sub_1001A9FF0();
  sub_1001AC874(v10, v11, v20, v19, v18, v17);
  v15 += 24;
  sub_1001ACAAC(a1, v14);
  uint64_t v12 = a1[1];
  sub_1001ACBB4(v14);
  return v12;
}

void sub_1001AC850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, void *a13)
{
}

float sub_1001AC874(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6)
{
  return sub_1001AC8C4(a1, a2, a3, a4, a5, a6);
}

float sub_1001AC8C4(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6)
{
  float v6 = *a5;
  float v7 = *a6;
  return sub_1001AC928(a2, *a3, *a4, v6, v7);
}

float sub_1001AC928(uint64_t a1, double a2, double a3, float a4, float a5)
{
  return sub_1001AC970(a1, a2, a3, a4, a5);
}

float sub_1001AC970(uint64_t a1, double a2, double a3, float a4, float a5)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(float *)(a1 + 16) = a4;
  float result = a5;
  *(float *)(a1 + 20) = a5;
  return result;
}

unint64_t sub_1001AC9B4(void *a1, uint64_t a2)
{
  v7[1] = a1;
  v7[0] = a2;
  unint64_t v6 = sub_1001AB654((uint64_t)a1);
  if (v7[0] > v6) {
    sub_1001AB6BC();
  }
  unint64_t v5 = sub_1001A9EE8(a1);
  if (v5 >= v6 >> 1) {
    return v6;
  }
  uint64_t v4 = 2 * v5;
  return *sub_1001A9138(&v4, v7);
}

void **sub_1001ACA5C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_1001ACAAC(uint64_t *a1, void *a2)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  sub_1001A9E74();
  sub_1001A9EBC();
  uint64_t v4 = v3;
  sub_1001ABE78(v13, a1[1]);
  sub_1001ABE78(v12, *a1);
  sub_1001ABE78(v11, v15[1]);
  uint64_t v5 = sub_1001ACE28(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  uint64_t v7 = sub_1001ABF4C((uint64_t)v14);
  v15[1] = v7;
  sub_1001ACEA8(a1, v15 + 1);
  sub_1001ACEA8(a1 + 1, v15 + 2);
  sub_1001AA65C();
  uint64_t v9 = v8;
  sub_1001ACD20();
  sub_1001ACEA8(v9, v10);
  void *v15 = v15[1];
  sub_1001A49FC(a1);
  sub_1001AB718();
}

void **sub_1001ACBB4(void **a1)
{
  return a1;
}

void **sub_1001ACBEC(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a1;
  unint64_t v13 = a2;
  uint64_t v12 = a3;
  v11[1] = a4;
  uint64_t v15 = a1;
  v11[0] = 0;
  sub_1001ACCAC(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    uint64_t v5 = sub_1001ACCF4((uint64_t)a1);
    *a1 = sub_1001AB6D4(v5, v13);
    unint64_t v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  uint64_t v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  unint64_t v8 = (unint64_t)*a1 + 24 * v13;
  sub_1001ACD20();
  *uint64_t v9 = v8;
  return v15;
}

void *sub_1001ACCAC(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1001ACCF4(uint64_t a1)
{
  return sub_1001ACDBC(a1 + 24);
}

void sub_1001ACD20()
{
}

void *sub_1001ACD4C(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *sub_1001ACD9C(void *result, uint64_t a2)
{
  *float result = a2;
  return result;
}

uint64_t sub_1001ACDBC(uint64_t a1)
{
  return sub_1001ACDE8(a1 + 8);
}

uint64_t sub_1001ACDE8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1001ACE00()
{
}

uint64_t sub_1001ACE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001ACEE4(a2, a3, a4, a5, a6, a7);
}

uint64_t *sub_1001ACEA8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *float result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1001ACEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a1;
  v7[9] = a2;
  _WORD v7[7] = a4;
  v7[6] = a3;
  void v7[5] = a6;
  v7[4] = a5;
  sub_1001ACF60(v7, a1, a2, a3, a4, a5, a6);
  return v7[2];
}

void *sub_1001ACF60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001ACFC8(a1, a2, a3, a4, a5, a6, a7);
}

void *sub_1001ACFC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001AD030(a1, a2, a3, a4, a5, a6, a7);
}

void *sub_1001AD030(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = a3;
  *((void *)&v31 + 1) = a5;
  *(void *)&long long v31 = a4;
  *((void *)&v30 + 1) = a7;
  *(void *)&long long v30 = a6;
  long long v28 = v32;
  long long v27 = v31;
  sub_1001AD150(v29, a2, a3, a4, a5);
  long long v23 = v29[0];
  long long v22 = v29[1];
  long long v19 = v30;
  sub_1001AD274();
  uint64_t v21 = v8;
  uint64_t v20 = v9;
  sub_1001AD1D0(&v25, (uint64_t)&v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v9, v8);
  long long v17 = v32;
  long long v16 = v25;
  uint64_t v10 = sub_1001AD2EC(v32, *((uint64_t *)&v32 + 1), v25);
  v18[1] = v11;
  v18[0] = v10;
  uint64_t v12 = sub_1001AD34C(v30, *((uint64_t *)&v30 + 1), v26);
  v15[1] = v13;
  v15[0] = v12;
  return sub_1001AD2BC(a1, v18, v15);
}

void *sub_1001AD150(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  id v13[3] = a5;
  uint64_t v13[2] = a4;
  long long v12 = v14;
  sub_1001AD274();
  v13[1] = v6;
  v13[0] = v7;
  sub_1001AD274();
  v11[1] = v8;
  v11[0] = v9;
  return sub_1001AD2BC(a1, v13, v11);
}

void *sub_1001AD1D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v14[0] = a3;
  v14[1] = a4;
  v13[1] = a6;
  v13[0] = a5;
  v12[1] = a8;
  v12[0] = a7;
  while (sub_1001ABEB8((uint64_t)v14, (uint64_t)v13))
  {
    uint64_t v9 = (void *)sub_1001AD3AC((uint64_t)v14);
    uint64_t v10 = (void *)sub_1001ABFCC((uint64_t)v12);
    *uint64_t v10 = *v9;
    v10[1] = v9[1];
    id v10[2] = v9[2];
    sub_1001ABF2C((uint64_t)v14);
    sub_1001ABF2C((uint64_t)v12);
  }
  return sub_1001AD2BC(a1, v14, v12);
}

void sub_1001AD274()
{
}

void *sub_1001AD2BC(void *a1, void *a2, void *a3)
{
  return sub_1001AD400(a1, a2, a3);
}

uint64_t sub_1001AD2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AD34C(a1, a2, a3);
}

uint64_t sub_1001AD34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AD48C(a1, a2, a3);
}

uint64_t sub_1001AD3AC(uint64_t a1)
{
  return sub_1001ABFCC(a1);
}

void *sub_1001AD400(void *a1, void *a2, void *a3)
{
  return a1;
}

void *sub_1001AD448(void *result, void *a2, void *a3)
{
  *float result = *a2;
  result[1] = a2[1];
  result[2] = *a3;
  result[3] = a3[1];
  return result;
}

uint64_t sub_1001AD48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void **sub_1001AD4B8(void **a1)
{
  sub_1001AD52C((uint64_t)a1);
  if (*a1)
  {
    uint64_t v2 = sub_1001ACCF4((uint64_t)a1);
    uint64_t v3 = *a1;
    sub_1001AD558(a1);
    sub_1001A9E84(v2, v3);
  }
  return a1;
}

void sub_1001AD52C(uint64_t a1)
{
}

uint64_t sub_1001AD558(void *a1)
{
  sub_1001AD650();
  return (*v2 - *a1) / 24;
}

void sub_1001AD5A0(uint64_t a1, uint64_t a2)
{
}

void sub_1001AD5D0(uint64_t a1, uint64_t a2)
{
  while (a2 != *(void *)(a1 + 16))
  {
    sub_1001ACCF4(a1);
    *(void *)(a1 + 16) -= 24;
    sub_1001A9FF0();
    sub_1001A9FC0();
  }
}

void sub_1001AD650()
{
}

void sub_1001AD67C()
{
}

uint64_t sub_1001AD6A4(uint64_t a1, uint64_t a2)
{
  sub_1001AD6D8(&v3, a2);
  return v3;
}

void *sub_1001AD6D8(void *a1, uint64_t a2)
{
  return a1;
}

void *sub_1001AD718(void *result, uint64_t a2)
{
  *float result = a2;
  return result;
}

BOOL sub_1001AD738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001AD784(a1);
  return v2 == sub_1001AD784(a2);
}

uint64_t sub_1001AD784(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_1001AD79C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1001AD7E8(a1 + 2);
  return a1;
}

void *sub_1001AD7E8(void *a1)
{
  return a1;
}

void *sub_1001AD830(void *a1)
{
  return a1;
}

uint64_t sub_1001AD87C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001AD8B4(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001AD900(uint64_t *a1)
{
  v3[1] = a1;
  sub_1001AD944(v3, (uint64_t)a1);
  sub_1001AD984(v3);
  return a1;
}

void *sub_1001AD944(void *a1, uint64_t a2)
{
  return a1;
}

void sub_1001AD984(uint64_t **a1)
{
  if (**a1)
  {
    sub_1001ADA20(*a1);
    sub_1001A5514();
    sub_1001A4C70();
    uint64_t v3 = v2;
    uint64_t v4 = (void *)**a1;
    sub_1001A4BA8(*a1);
    sub_1001A7344(v3, v4);
  }
}

void *sub_1001ADA00(void *result, uint64_t a2)
{
  *float result = a2;
  return result;
}

uint64_t *sub_1001ADA20(uint64_t *a1)
{
  return sub_1001ADA4C(a1, *a1);
}

uint64_t *sub_1001ADA4C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = result[1]; a2 != i; i -= 24)
  {
    sub_1001A4C70();
    uint64_t v4 = v3;
    sub_1001A6E60();
    float result = sub_1001A707C(v4, v5);
  }
  v2[1] = a2;
  return result;
}

BOOL sub_1001AE704(uint64_t a1)
{
  BOOL v1 = 1;
  if (a1 != 4) {
    return a1 == 3;
  }
  return v1;
}

void sub_1001AF740(id *a1)
{
  v2[2] = a1;
  v2[1] = a1;
  v2[0] = a1[4];
  BOOL v1 = &_dispatch_main_q;
  IDSRegistrationControlGetStateForRegistrationType();

  objc_storeStrong(v2, 0);
}

void sub_1001AF810(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v10 = a1;
  char v9 = 1;
  if (v12)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = oslog;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "PhoneNumber Permission skipped because IDS registration status is already set", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    char v9 = 0;
  }
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1001AFA38(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  if (!v7)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 32) buddyPreferences:a1];
    [v4 _registerPhoneNumberPermissionEnabled:0 buddyPreferences:v5];
  }
  objc_storeStrong(&location, 0);
}

void sub_1001AFE18(id a1, BOOL a2, NSError *a3)
{
  id v7 = a1;
  BOOL v6 = a2;
  id location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (!v6)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "PhoneNumber Permission enable failed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_1001AFF10(id a1, BOOL a2, NSError *a3)
{
  id v7 = a1;
  BOOL v6 = a2;
  id location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (!v6)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "PhoneNumber Permission disable failed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_1001B08C4(id *a1)
{
  void v12[2] = a1;
  v12[1] = a1;
  uint64_t v2 = [a1[4] accountOperationsQueue];
  dispatch_suspend(v2);

  id v3 = +[ACAccountStore defaultStore];
  id v4 = a1[5];
  id v5 = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_1001B0A14;
  char v9 = &unk_1002B3D18;
  id v10 = a1[5];
  id v11 = a1[4];
  v12[0] = a1[6];
  [v3 removeAccount:v4 withCompletionHandler:&v5];

  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

void sub_1001B0A14(id *a1, char a2, id obj)
{
  id v18 = a1;
  char v17 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v15 = a1;
  id v4 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v6 = -1073741824;
  int v7 = 0;
  uint64_t v8 = sub_1001B0B80;
  char v9 = &unk_1002B1690;
  char v14 = v17 & 1;
  id v10 = a1[4];
  id v11 = location;
  id v12 = a1[5];
  id v13 = a1[6];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_1001B0B80(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(unsigned char *)(a1 + 64))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, *(void *)(a1 + 32));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v9, "Done removing account: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      char v6 = 0;
      char v4 = 0;
      if (_BYIsInternalInstall())
      {
        uint64_t v2 = *(NSString **)(a1 + 40);
      }
      else if (*(void *)(a1 + 40))
      {
        id v7 = [*(id *)(a1 + 40) domain];
        char v6 = 1;
        uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v7, [*(id *)(a1 + 40) code]);
        id v5 = v2;
        char v4 = 1;
      }
      else
      {
        uint64_t v2 = 0;
      }
      sub_10004BB7C((uint64_t)v11, (uint64_t)v2);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error removing account: %{public}@", v11, 0xCu);
      if (v4) {

      }
      if (v6) {
    }
      }
    objc_storeStrong((id *)&v8, 0);
  }
  [*(id *)(*(void *)(a1 + 48) + 16) removeObject:*(void *)(a1 + 32)];
  id v3 = [*(id *)(a1 + 48) accountOperationsQueue];
  dispatch_resume(v3);

  if (*(void *)(a1 + 56)) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

BOOL sub_1001B0F58(id a1, id a2, NSDictionary *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v11 = 0;
  objc_storeStrong(&v11, a3);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  char v9 = 0;
  char v7 = 0;
  unsigned __int8 v5 = 0;
  if (isKindOfClass)
  {
    id v10 = [location[0] accountType];
    char v9 = 1;
    id v8 = [v10 identifier];
    char v7 = 1;
    unsigned __int8 v5 = [v8 isEqualToString:ACAccountTypeIdentifierIDMS];
  }
  char v13 = v5 & 1;
  if (v7) {

  }
  if (v9) {
  objc_storeStrong(&v11, 0);
  }
  objc_storeStrong(location, 0);
  return v13 & 1;
}

void sub_1001B107C(NSObject *a1, char a2, id obj)
{
  id v11 = a1;
  char v10 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v10 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v7 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v4 = oslog[0];
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "IDMS account removal failed", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa) {
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1001B1288(uint64_t a1, char a2, id obj)
{
  uint64_t v9 = a1;
  char v8 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v6 = a1;
  if (v8)
  {
    int v5 = SecItemDeleteAll();
    if (v5)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        sub_10005A060(buf, v5);
        _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Unable to delete keychain items: %d for primary account type", buf, 8u);
      }
      objc_storeStrong((id *)&oslog, 0);
    }
  }
  if (*(void *)(a1 + 32)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1001B14B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B14D8(uint64_t a1, char a2, id obj)
{
  uint64_t v10 = a1;
  char v9 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  uint64_t v7 = a1;
  if (v9)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained removeIDMSAccount:[a1 + 32] WeakRetained];
    objc_storeStrong(&v5, 0);
    int v6 = 0;
  }
  else
  {
    if (*(void *)(a1 + 32)) {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    int v6 = 1;
  }
  objc_storeStrong(&location, 0);
}

uint64_t sub_1001B1740(id *a1, void *a2)
{
  uint64_t v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [location[0] identifier];
  id v4 = [v2[4] identifier];
  LOBYTE(v2) = [v3 isEqualToString:v4];

  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_1001B18A0(id a1, id a2, NSDictionary *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v11 = 0;
  objc_storeStrong(&v11, a3);
  v10[1] = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v10[0] = location[0];
    id v5 = [v10[0] accountType];
    id v6 = [v5 identifier];
    unsigned __int8 v7 = [v6 isEqualToString:ACAccountTypeIdentifieriTunesStore];
    unsigned __int8 v8 = 0;
    if (v7) {
      unsigned __int8 v8 = [v10[0] isActive];
    }
    char v13 = v8 & 1;

    objc_storeStrong(v10, 0);
  }
  else
  {
    char v13 = 0;
  }
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
  return v13 & 1;
}

void sub_1001B1BB8(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  uint64_t v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1001B1BFC(uint64_t a1)
{
}

void sub_1001B1C08(uint64_t a1)
{
  id v2 = +[ACAccountStore defaultStore];
  id v3 = [v2 accounts];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1001B1F5C(uint64_t a1, char a2, id obj, void *a4)
{
  uint64_t v20 = a1;
  char v19 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  id v17 = 0;
  objc_storeStrong(&v17, a4);
  uint64_t v16 = a1;
  if (v19)
  {
    BOOL v14 = location == 0;
    char v13 = [location isManagedAppleID] & 1;
    id v6 = [location isUnderage];
    unsigned __int8 v7 = [v6 BOOLValue];

    char v12 = v7 & 1;
    id v8 = [location isLegacyStudent];
    unsigned __int8 v9 = [v8 BOOLValue];

    char v11 = v9 & 1;
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100186970((uint64_t)buf, v13 & 1, v12 & 1, v11 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Account Tools: isChild - isMAID: %d isUnderage: %d isStudent: %d", buf, 0x14u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (*(void *)(a1 + 32)) {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    int v15 = 0;
  }
  else
  {
    if (*(void *)(a1 + 32)) {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    int v15 = 1;
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&location, 0);
}

void sub_1001B2440(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (!*((void *)a1[4].isa + 6))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v2 = oslog[0];
      os_log_type_t v3 = v16;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Account Tools: Fetching configuration info...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v14 = dispatch_semaphore_create(0);
    id location = (id)objc_opt_new();
    CFStringRef v18 = @"com.apple.idms.config.privacy.icloud.data";
    uint64_t v4 = +[NSArray arrayWithObjects:&v18 count:1];
    Class isa = a1[5].isa;
    id v6 = _NSConcreteStackBlock;
    int v7 = -1073741824;
    int v8 = 0;
    unsigned __int8 v9 = sub_1001B2674;
    uint64_t v10 = &unk_1002B46F8;
    v12[1] = a1[6].isa;
    char v11 = a1[4].isa;
    v12[0] = v14;
    [location configurationInfoWithIdentifiers:v4 forAltDSID:isa completion:&v6];

    dispatch_semaphore_wait((dispatch_semaphore_t)v14, 0xFFFFFFFFFFFFFFFFLL);
    objc_storeStrong(v12, 0);
    objc_storeStrong((id *)&v11, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v14, 0);
  }
  objc_storeStrong((id *)(*((void *)a1[7].isa + 1) + 40), *((id *)a1[4].isa + 6));
}

void sub_1001B2674(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  obuint64_t j = 0;
  objc_storeStrong(&obj, a3);
  oslog[1] = (os_log_t)a1;
  if (obj)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      char v15 = 0;
      char v13 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)obj;
      }
      else if (obj)
      {
        id v16 = [obj domain];
        char v15 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v16, [obj code]);
        id v14 = v5;
        char v13 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v17, "Account Tools: Error fetching configurationInfo: %{public}@", buf, 0xCu);
      if (v13) {

      }
      if (v15) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      os_log_t v9 = (os_log_t)(id)_BYLoggingFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        sub_10004B238((uint64_t)v21, (uint64_t)location[0]);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Account Tools: fetched configurationInfo %@", v21, 0xCu);
      }
      objc_storeStrong((id *)&v9, 0);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), location[0]);
    }
    else
    {
      os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)objc_opt_class();
        sub_10004BB7C((uint64_t)v22, (uint64_t)v10);
        _os_log_impl((void *)&_mh_execute_header, v12, v11, "Account Tools: configurationInfo dict was not a dict, it was a %{public}@", v22, 0xCu);
        objc_storeStrong(&v10, 0);
      }
      objc_storeStrong((id *)&v12, 0);
      id v6 = +[NSError errorWithDomain:@"com.apple.purplebuddy.accounterror" code:1 userInfo:0];
      uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
      int v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      objc_storeStrong(location, 0);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  objc_storeStrong(&obj, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B2B08(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = 0;
  id v2 = *(void **)(a1 + 32);
  obuint64_t j = 0;
  id v3 = [v2 configurationInfoError:&obj];
  objc_storeStrong(location, obj);
  id v14 = v3;
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = &_dispatch_main_q;
    id v5 = _NSConcreteStackBlock;
    int v6 = -1073741824;
    int v7 = 0;
    int v8 = sub_1001B2C74;
    os_log_t v9 = &unk_1002B1DC0;
    id v12 = *(id *)(a1 + 40);
    id v10 = v14;
    id v11 = location[0];
    dispatch_async((dispatch_queue_t)v4, &v5);

    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v10, 0);
    objc_storeStrong(&v12, 0);
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_1001B2C74(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1001B3190(uint64_t a1)
{
}

void sub_1001B31CC(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v32 = 0;
  objc_storeStrong(&v32, a3);
  v31[1] = a1;
  if (v32)
  {
    v31[0] = (id)_BYLoggingFacility();
    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v31[0], OS_LOG_TYPE_ERROR))
    {
      char v28 = 0;
      char v26 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v32;
      }
      else if (v32)
      {
        id v29 = [v32 domain];
        char v28 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v29, [v32 code]);
        id v27 = v5;
        char v26 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v31[0], v30, "Unable to retrieve the primary account: %{public}@", buf, 0xCu);
      if (v26) {

      }
      if (v28) {
    }
      }
    objc_storeStrong(v31, 0);
    if (a1[5]) {
      (*((void (**)(void))a1[5] + 2))();
    }
    int v25 = 1;
  }
  else if (location[0])
  {
    os_log_t v21 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = v21;
      os_log_type_t v9 = v20;
      sub_10004B24C(v19);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Account Tools: Fetching user information...", v19, 2u);
    }
    objc_storeStrong((id *)&v21, 0);
    id v18 = (id)objc_opt_new();
    id v10 = [location[0] aa_altDSID];
    id v11 = _NSConcreteStackBlock;
    int v12 = -1073741824;
    int v13 = 0;
    id v14 = sub_1001B35D8;
    char v15 = &unk_1002B4748;
    id v17 = a1[5];
    id v16 = a1[4];
    [v18 getUserInformationForAltDSID:v10 completion:&v11];

    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v18, 0);
    int v25 = 0;
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = oslog;
      os_log_type_t v7 = v23;
      sub_10004B24C(v22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No primary account found!", v22, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[5]) {
      (*((void (**)(void))a1[5] + 2))();
    }
    int v25 = 1;
  }
  objc_storeStrong(&v32, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B35D8(NSObject *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v21 = 0;
  objc_storeStrong(&v21, a3);
  oslog[1] = a1;
  if (v21)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      char v17 = 0;
      char v15 = 0;
      if (_BYIsInternalInstall())
      {
        id v5 = (NSString *)v21;
      }
      else if (v21)
      {
        id v18 = [v21 domain];
        char v17 = 1;
        id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v18, [v21 code]);
        id v16 = v5;
        char v15 = 1;
      }
      else
      {
        id v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v19, "Account Tools: Failed to fetch user information error: %{public}@", buf, 0xCu);
      if (v15) {

      }
      if (v17) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    if (a1[5].isa) {
      (*((void (**)(void))a1[5].isa + 2))();
    }
    int v14 = 1;
  }
  else
  {
    int v6 = *((void *)a1[4].isa + 3);
    dispatch_block_t block = _NSConcreteStackBlock;
    int v8 = -1073741824;
    int v9 = 0;
    id v10 = sub_1001B38B0;
    id v11 = &unk_1002B12F0;
    int v12 = a1[4].isa;
    id v13 = location[0];
    dispatch_async(v6, &block);
    (*((void (**)(void))a1[5].isa + 2))();
    objc_storeStrong(&v13, 0);
    objc_storeStrong((id *)&v12, 0);
    int v14 = 0;
  }
  objc_storeStrong(&v21, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B38B0(uint64_t a1)
{
}

void sub_1001B5608(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1001B564C(uint64_t a1)
{
}

void sub_1001B5658(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v45 = 0;
  objc_storeStrong(&v45, a3);
  id v44 = 0;
  objc_storeStrong(&v44, a4);
  uint64_t v43 = a1;
  double v42 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  id v41 = (id)_BYSignpostSubsystem();
  char v40 = 2;
  os_signpost_id_t v39 = 0;
  os_signpost_id_t v39 = *(void *)(a1 + 56);
  if (v39 && v39 != -1 && os_signpost_enabled((os_log_t)v41))
  {
    os_log_type_t v7 = v41;
    os_signpost_type_t v8 = v40;
    os_signpost_id_t v9 = v39;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong(&v41, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v51, *(void *)(a1 + 56), *(uint64_t *)&v42);
    _os_log_impl((void *)&_mh_execute_header, oslog, v36, "END [%lld] %fs: ActivationSendRequest ", v51, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  uint64_t v35 = 0;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v10 = (uint64_t)[v45 statusCode];
  }
  else {
    uint64_t v10 = 200;
  }
  uint64_t v35 = v10;
  if (!v44 && v35 == 200)
  {
    char v17 = dispatch_get_global_queue(25, 0);
    dispatch_block_t block = _NSConcreteStackBlock;
    int v19 = -1073741824;
    int v20 = 0;
    id v21 = sub_1001B5C58;
    long long v22 = &unk_1002B15F0;
    id v23 = *(id *)(a1 + 32);
    id v24 = *(id *)(a1 + 40);
    id v25 = location[0];
    dispatch_async(v17, &block);

    objc_storeStrong(&v25, 0);
    objc_storeStrong(&v24, 0);
    objc_storeStrong(&v23, 0);
  }
  else
  {
    if (v44)
    {
      os_log_t v34 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        char v31 = 0;
        char v29 = 0;
        if (_BYIsInternalInstall())
        {
          id v11 = (NSString *)v44;
        }
        else if (v44)
        {
          id v32 = [v44 domain];
          char v31 = 1;
          id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v32, [v44 code]);
          id v30 = v11;
          char v29 = 1;
        }
        else
        {
          id v11 = 0;
        }
        sub_10004BB7C((uint64_t)v50, (uint64_t)v11);
        _os_log_impl((void *)&_mh_execute_header, v34, v33, "Buddy Activation: Failed session request: %{public}@", v50, 0xCu);
        if (v29) {

        }
        if (v31) {
      }
        }
      objc_storeStrong((id *)&v34, 0);
    }
    else
    {
      os_log_t v28 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        sub_100046588((uint64_t)v49, v35);
        _os_log_impl((void *)&_mh_execute_header, v28, v27, "Buddy Activation: Session request returned http %ld", v49, 0xCu);
      }
      objc_storeStrong((id *)&v28, 0);
      CFStringRef v47 = @"statusCode";
      int v12 = +[NSNumber numberWithInteger:v35];
      unsigned int v48 = v12;
      id v13 = +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
      int v14 = +[NSError errorWithDomain:@"com.apple.purplebuddy.activation" code:1 userInfo:v13];
      id v15 = v44;
      id v44 = v14;
    }
    id v16 = [*(id *)(a1 + 32) completion];

    if (v16)
    {
      id v26 = [*(id *)(a1 + 32) completion];
      [*(id *)(a1 + 32) _cleanup];
      (*((void (**)(id, void, void, void, id))v26 + 2))(v26, 0, 0, 0, v44);
      objc_storeStrong(&v26, 0);
    }
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
  objc_storeStrong(&v44, 0);
  objc_storeStrong(&v45, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B5C58(uint64_t a1)
{
  id location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = 0;
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  obuint64_t j = 0;
  id v5 = [v2 _newActivationRequestWithOptions:v3 sessionData:v4 error:&obj];
  objc_storeStrong(location, obj);
  id v16 = v5;
  int v6 = &_dispatch_main_q;
  os_log_type_t v7 = _NSConcreteStackBlock;
  int v8 = -1073741824;
  int v9 = 0;
  uint64_t v10 = sub_1001B5DBC;
  id v11 = &unk_1002B15F0;
  id v12 = v16;
  id v13 = *(id *)(a1 + 32);
  id v14 = location[0];
  dispatch_async((dispatch_queue_t)v6, &v7);

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B5DBC(uint64_t a1)
{
  id v39[2] = (id)a1;
  v39[1] = (id)a1;
  if (*(void *)(a1 + 32))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 72), *(id *)(a1 + 32));
    v39[0] = (id)_BYLoggingFacility();
    os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v39[0], OS_LOG_TYPE_DEFAULT))
    {
      int v2 = *(unsigned char *)(*(void *)(a1 + 40) + 25) & 1;
      id v3 = [*(id *)(a1 + 32) URL];
      id location = [v3 absoluteString];
      sub_10006E000((uint64_t)buf, v2, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v39[0], v38, "Buddy Activation Request: Activate, AllowAnyHTTPSCert=%d, with URL: %@.\n", buf, 0x12u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong(v39, 0);
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v35 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void **)(a1 + 32);
      id v34 = [v4 allHTTPHeaderFields];
      sub_100051470((uint64_t)v42, (uint64_t)v4, (uint64_t)v34);
      _os_log_debug_impl((void *)&_mh_execute_header, oslog, v35, "Using request %@ with headers %@", v42, 0x16u);

      objc_storeStrong(&v34, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v33 = [*(id *)(a1 + 40) completion];
    id v32 = 0;
    char v31 = 0;
    id v5 = (id)_BYSignpostSubsystem();
    int v6 = (void *)_BYSignpostCreate();
    id v30 = v7;
    char v29 = v6;

    os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
    char v27 = 1;
    id v26 = v29;
    if (v29 && v26 != (void *)-1 && os_signpost_enabled(log))
    {
      int v8 = log;
      os_signpost_type_t v9 = v27;
      os_signpost_id_t v10 = (os_signpost_id_t)v26;
      sub_10004B24C(v25);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, v9, v10, "ActivationSendRequest", "", v25, 2u);
    }
    objc_storeStrong((id *)&log, 0);
    os_log_t v24 = (os_log_t)(id)_BYSignpostSubsystem();
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046588((uint64_t)v41, (uint64_t)v29);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "BEGIN [%lld]: ActivationSendRequest ", v41, 0xCu);
    }
    objc_storeStrong((id *)&v24, 0);
    char v31 = v29;
    id v32 = v30;
    char v17 = _NSConcreteStackBlock;
    int v18 = -1073741824;
    int v19 = 0;
    int v20 = sub_1001B62EC;
    id v21 = &unk_1002B4798;
    v22[1] = v29;
    id v22[2] = v30;
    v22[0] = v33;
    [*(id *)(a1 + 40) setCompletion:&v17];
    id v11 = [*(id *)(a1 + 40) session];
    id v16 = [v11 dataTaskWithRequest:*(void *)(a1 + 32)];

    os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BB7C((uint64_t)v40, (uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v15, v14, "Buddy Activation Request: Created data task: %{public}@", v40, 0xCu);
    }
    objc_storeStrong((id *)&v15, 0);
    [v16 resume];
    objc_storeStrong(&v16, 0);
    objc_storeStrong(v22, 0);
    objc_storeStrong(&v33, 0);
  }
  else
  {
    id v12 = [*(id *)(a1 + 40) completion];

    if (v12)
    {
      id v13 = [*(id *)(a1 + 40) completion];
      [*(id *)(a1 + 40) _cleanup];
      (*((void (**)(id, void, void, void, void))v13 + 2))(v13, 0, 0, 0, *(void *)(a1 + 48));
      objc_storeStrong(&v13, 0);
    }
  }
}

void sub_1001B62EC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v21 = 0;
  objc_storeStrong(&v21, a3);
  id v20 = 0;
  objc_storeStrong(&v20, a4);
  id v19 = 0;
  objc_storeStrong(&v19, a5);
  int v18 = a1;
  double v17 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v15 = 2;
  os_signpost_id_t v14 = 0;
  os_signpost_id_t v14 = a1[5];
  if (v14 && v14 != -1 && os_signpost_enabled(log))
  {
    os_signpost_type_t v9 = log;
    os_signpost_type_t v10 = v15;
    os_signpost_id_t v11 = v14;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, v10, v11, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v23, a1[5], *(uint64_t *)&v17);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ActivationSendRequest ", v23, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B66DC(uint64_t a1)
{
  v51[2] = (id)a1;
  v51[1] = (id)a1;
  v51[0] = 0;
  id v50 = 0;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  id v2 = (id)_BYSignpostSubsystem();
  uint64_t v3 = _BYSignpostCreate();
  uint64_t v47 = v4;
  uint64_t v46 = v3;

  id location = (id)_BYSignpostSubsystem();
  char v44 = 1;
  uint64_t v43 = v46;
  if (v46 && v43 != -1 && os_signpost_enabled((os_log_t)location))
  {
    id v5 = location;
    os_signpost_type_t v6 = v44;
    os_signpost_id_t v7 = v43;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ActivationCreateSessionRequest", "", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_100046588((uint64_t)v55, v46);
    _os_log_impl((void *)&_mh_execute_header, oslog, v40, "BEGIN [%lld]: ActivationCreateSessionRequest ", v55, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  uint64_t v48 = v46;
  uint64_t v49 = v47;
  obuint64_t j = v51[0];
  id v38 = v50;
  char v8 = MAECreateSessionRequestWithError();
  objc_storeStrong(v51, obj);
  objc_storeStrong(&v50, v38);
  if (v8)
  {
    double v24 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
    os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
    char v22 = 2;
    uint64_t v21 = v48;
    if (v48 && v21 != -1 && os_signpost_enabled(log))
    {
      os_signpost_id_t v11 = log;
      os_signpost_type_t v12 = v22;
      os_signpost_id_t v13 = v21;
      sub_10004B24C(v20);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v12, v13, "ActivationCreateSessionRequest", "", v20, 2u);
    }
    objc_storeStrong((id *)&log, 0);
    os_log_t v19 = (os_log_t)(id)_BYSignpostSubsystem();
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000A0448((uint64_t)v53, v48, *(uint64_t *)&v24);
      _os_log_impl((void *)&_mh_execute_header, v19, v18, "END [%lld] %fs: ActivationCreateSessionRequest ", v53, 0x16u);
    }
    objc_storeStrong((id *)&v19, 0);
    [*(id *)(a1 + 32) _addCommonHeaders:v51[0]];
    if (*(void *)(a1 + 56)) {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    if (*(void *)(*(void *)(a1 + 32) + 48)) {
      [v51[0] setURL:*(void *)(*(void *)(a1 + 32) + 48)];
    }
    os_log_t v17 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      id v14 = v51[0];
      id v15 = [v51[0] allHTTPHeaderFields];
      sub_100051470((uint64_t)v52, (uint64_t)v14, (uint64_t)v15);
      _os_log_debug_impl((void *)&_mh_execute_header, v17, v16, "Created session request %@ with headers %@", v52, 0x16u);

      objc_storeStrong(&v15, 0);
    }
    objc_storeStrong((id *)&v17, 0);
    [*(id *)(a1 + 32) _sendSessionRequest:v51[0] withOptions:*(void *)(a1 + 40)];
  }
  else
  {
    os_log_t v37 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      char v34 = 0;
      char v32 = 0;
      if (_BYIsInternalInstall())
      {
        os_signpost_type_t v9 = (NSString *)v50;
      }
      else if (v50)
      {
        id v35 = [v50 domain];
        char v34 = 1;
        os_signpost_type_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v35, [v50 code]);
        id v33 = v9;
        char v32 = 1;
      }
      else
      {
        os_signpost_type_t v9 = 0;
      }
      sub_10004BB7C((uint64_t)v54, (uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v37, v36, "Activation: Failed to create session url request: %{public}@", v54, 0xCu);
      if (v32) {

      }
      if (v34) {
    }
      }
    objc_storeStrong((id *)&v37, 0);
    os_signpost_type_t v10 = &_dispatch_main_q;
    dispatch_block_t block = _NSConcreteStackBlock;
    int v26 = -1073741824;
    int v27 = 0;
    os_log_t v28 = sub_1001B6D24;
    char v29 = &unk_1002B1780;
    id v31 = *(id *)(a1 + 48);
    id v30 = v50;
    dispatch_async((dispatch_queue_t)v10, &block);

    objc_storeStrong(&v30, 0);
    objc_storeStrong(&v31, 0);
  }
  objc_storeStrong(&v50, 0);
  objc_storeStrong(v51, 0);
}

uint64_t sub_1001B6D24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

void sub_1001B710C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v21 = 0;
  objc_storeStrong(&v21, a3);
  id v20 = 0;
  objc_storeStrong(&v20, a4);
  id v19 = 0;
  objc_storeStrong(&v19, a5);
  os_log_type_t v18 = a1;
  double v17 = (double)(unint64_t)_BYSignpostGetNanoseconds() / 1000000000.0;
  os_log_t log = (os_log_t)(id)_BYSignpostSubsystem();
  char v15 = 2;
  os_signpost_id_t v14 = 0;
  os_signpost_id_t v14 = a1[5];
  if (v14 && v14 != -1 && os_signpost_enabled(log))
  {
    os_signpost_type_t v9 = log;
    os_signpost_type_t v10 = v15;
    os_signpost_id_t v11 = v14;
    sub_10004B24C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, v10, v11, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  os_log_t oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000A0448((uint64_t)v23, a1[5], *(uint64_t *)&v17);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ActivationSendRequest ", v23, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(location, 0);
}

double sub_1001B7E48(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(void *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(void *)(a1 + 20) = a4;
  return result;
}

void sub_1001B80B4(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = oslog[0];
    os_log_type_t v4 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating and cancelling activation session task due to connectivity", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa cancel];
  objc_storeStrong(location, 0);
}

void sub_1001B95C4(id a1)
{
  id location[2] = a1;
  location[1] = a1;
  id v1 = +[BuddyTestFundamentalFlow classes];
  location[0] = [v1 mutableCopy];

  memset(__b, 0, sizeof(__b));
  id v2 = [location[0] copy];
  id v3 = [v2 countByEnumeratingWithState:__b objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)__b[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(void *)__b[2] != v4) {
          objc_enumerationMutation(v2);
        }
        id v11 = 0;
        id v11 = *(id *)(__b[1] + 8 * i);
        if ([v11 isSubclassOfClass:objc_opt_class()])
        {
          id v6 = location[0];
          id v7 = [v11 allowedFlowItems];
          [v6 addObjectsFromArray:v7];
        }
      }
      id v3 = [v2 countByEnumeratingWithState:__b objects:v13 count:16];
    }
    while (v3);
  }

  id v8 = [location[0] copy];
  os_signpost_type_t v9 = (void *)qword_100321E80;
  qword_100321E80 = (uint64_t)v8;

  objc_storeStrong(location, 0);
}

void sub_1001BA330(uint64_t a1)
{
  [*(id *)(a1 + 32) alphaForBuddyBackgroundStyle:*(void *)(a1 + 40) a1, a1];
  double v3 = v2;
  id v4 = [*(id *)(a1 + 32) view];
  [v4 setAlpha:v3];
}

id sub_1001BA510()
{
  uint64_t v9 = 0;
  os_signpost_type_t v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321E90;
  uint64_t v13 = qword_100321E90;
  if (!qword_100321E90)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001BA790;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001BA790(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001BA628(id a1, BOOL a2, NSError *a3)
{
  id v13 = a1;
  BOOL v12 = a2;
  id location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (v12)
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "FTRegAppleIDSetupManager (background) setup success.", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10004B238((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v9, "FTRegAppleIDSetupManager (background) setup failed with error %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_1001BA790(NSAssertionHandler *a1)
{
  sub_1001BA8D4();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("FTRegAppleIDSetupManager");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getFTRegAppleIDSetupManagerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyAppleIDFacetimeRegistrationManager.m", 20, @"Unable to find class %s", "FTRegAppleIDSetupManager" file lineNumber description];

    __break(1u);
  }
  qword_100321E90 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001BA8D4()
{
  if (!sub_1001BAA04())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *CommunicationsSetupUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyAppleIDFacetimeRegistrationManager.m", 19, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001BAA04()
{
  if (!qword_100321E98) {
    sub_1001BAABC();
  }
  return qword_100321E98;
}

uint64_t sub_1001BAABC()
{
  uint64_t result = _sl_dlopen();
  qword_100321E98 = result;
  return result;
}

void sub_1001BACF4(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [location[0] genericTermsURL];
  int v4 = +[NSURL URLWithString:v3];
  [*(id *)(a1 + 32) setTermsURL:v4];

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) termsURL];
  (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v6 != 0);

  objc_storeStrong(location, 0);
}

void sub_1001BAF2C(uint64_t a1, void *a2, void *a3)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v17 = 0;
  objc_storeStrong(&v17, a3);
  if (([*(id *)(a1 + 32) presentationCanceled] & 1) == 0)
  {
    if (location[0])
    {
      [*(id *)(a1 + 32) setNavigationController:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) setPresentationCompletion:*(void *)(a1 + 48)];
      id v5 = objc_alloc_init((Class)RemoteUIController);
      [*(id *)(a1 + 32) setRemoteUIController:v5];

      id v6 = [*(id *)(a1 + 32) navigationController];
      id v7 = [*(id *)(a1 + 32) remoteUIController];
      [v7 setNavigationController:v6];

      os_log_t v8 = *(void **)(a1 + 32);
      id v9 = [v8 remoteUIController];
      [v9 setDelegate:v8];

      id v10 = +[RUIStyle setupAssistantStyle];
      id v11 = [*(id *)(a1 + 32) remoteUIController];
      [v11 setStyle:v10];

      BOOL v12 = *(void **)(a1 + 32);
      id v13 = [v12 remoteUIController];
      [v12 _addHandlersForTermsButtonsToRemoteUIController:v13];

      id v14 = [*(id *)(a1 + 32) remoteUIController];
      id v15 = location[0];
      id v16 = [*(id *)(a1 + 32) termsURL];
      [v14 loadData:v15 baseURL:v16];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_1001BB59C(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v15 = 0;
  objc_storeStrong(&v15, a3);
  id v14 = 0;
  objc_storeStrong(&v14, a4);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v7 = oslog[0];
    os_log_type_t v8 = v12;
    sub_10004B24C(v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "User agreed to terms", (uint8_t *)v11, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  Class isa = a1[4].isa;
  id v10 = [(id)objc_opt_class() _termsVersionFromObjectModel:location[0]];
  [(objc_class *)isa _userRespondedToCombinedTCsWithAgreement:1 withSLAVersion:v10];

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_1001BB6D4(NSObject *a1, void *a2, void *a3, void *a4)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v13 = 0;
  objc_storeStrong(&v13, a3);
  id v12 = 0;
  objc_storeStrong(&v12, a4);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v7 = oslog[0];
    os_log_type_t v8 = v10;
    sub_10004B24C(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "User disagreed to terms", (uint8_t *)v9, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _userRespondedToCombinedTCsWithAgreement:0 withSLAVersion:0];
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_1001BD35C(uint64_t a1, char a2, id obj)
{
  uint64_t v21 = a1;
  char v20 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v18[1] = (id)a1;
  if (v20)
  {
    int v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 48);
    id v12 = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    id v15 = sub_1001BD5EC;
    id v16 = &unk_1002B37C8;
    id v17 = *(id *)(a1 + 40);
    v18[0] = *(id *)(a1 + 48);
    [v4 saveAccount:v5 withCompletionHandler:&v12];
    objc_storeStrong(v18, 0);
    objc_storeStrong(&v17, 0);
  }
  else
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      char v9 = 0;
      char v7 = 0;
      if (_BYIsInternalInstall())
      {
        id v6 = (NSString *)location;
      }
      else if (location)
      {
        id v10 = [location domain];
        char v9 = 1;
        id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v10, [location code]);
        os_log_type_t v8 = v6;
        char v7 = 1;
      }
      else
      {
        id v6 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "AppleIDHost: Silent -updateProperties failed, error: %{public}@", buf, 0xCu);
      if (v7) {

      }
      if (v9) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1001BD5EC(NSObject *a1, char a2, id obj)
{
  int v13 = a1;
  char v12 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  [(objc_class *)a1[4].isa setRanSilentUpdateProperties:1];
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = v12 & 1;
    char v8 = 0;
    char v6 = 0;
    if (_BYIsInternalInstall())
    {
      uint64_t v5 = (NSString *)location;
    }
    else if (location)
    {
      id v9 = [location domain];
      char v8 = 1;
      uint64_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v9, [location code]);
      char v7 = v5;
      char v6 = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_1000639A4((uint64_t)buf, v4, (uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "AppleIDHost: Silent -updateProperties succeeded! Save success = %d error: %{public}@", buf, 0x12u);
    if (v6) {

    }
    if (v8) {
  }
    }
  objc_storeStrong((id *)oslog, 0);
  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_1001BE0E0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8[1] = a1;
  v8[0] = objc_alloc_init((Class)ACAccountStore);
  id v7 = [v8[0] accounts];
  if ([v7 count])
  {
    id v3 = +[BuddyAccountTools sharedBuddyAccountTools];
    id v4 = [v7 objectAtIndexedSubscript:0];
    [v3 removeAccount:v4 completion:0];
  }
  id v5 = [a1[4] delegate];
  id v6 = [v5 popToBuddyControllerWithClass:objc_opt_class() withOffset:1 animated:1];

  objc_storeStrong(&v7, 0);
  objc_storeStrong(v8, 0);
  objc_storeStrong(location, 0);
}

id sub_1001BE84C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321EA0;
  uint64_t v13 = qword_100321EA0;
  if (!qword_100321EA0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001BEB44;
    id v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001BEB44(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001BEB44(NSAssertionHandler *a1)
{
  sub_1001BEC88();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SBFSecureWindow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getSBFSecureWindowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyLockscreenSceneDelegate.m", 21, @"Unable to find class %s", "SBFSecureWindow" file lineNumber description];

    __break(1u);
  }
  qword_100321EA0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001BEC88()
{
  if (!sub_1001BEDB8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SpringBoardFoundationLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyLockscreenSceneDelegate.m", 20, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001BEDB8()
{
  if (!qword_100321EA8) {
    sub_1001BEE70();
  }
  return qword_100321EA8;
}

uint64_t sub_1001BEE70()
{
  uint64_t result = _sl_dlopen();
  qword_100321EA8 = result;
  return result;
}

void sub_1001C08F8(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v26 = a1;
  char v25 = 0;
  id v2 = [*(id *)(a1 + 32) managedConfiguration];
  unsigned __int8 v3 = [v2 isPasscodeSet];

  char v25 = v3 & 1;
  if ((v3 & 1) == 0)
  {
    id v4 = [*(id *)(a1 + 32) passcodeCacheManager];
    id v24 = [v4 cachedPasscode];

    id v5 = [*(id *)(a1 + 32) passcodeCacheManager];
    [v5 uncachePasscode];

    if (v24)
    {
      id location = 0;
      id v6 = [*(id *)(a1 + 32) managedConfiguration];
      obuint64_t j = 0;
      unsigned __int8 v7 = [v6 changePasscodeFrom:0 to:v24 outError:&obj];
      objc_storeStrong(&location, obj);

      if ((v7 ^ 1))
      {
        os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          char v18 = 0;
          char v16 = 0;
          if (_BYIsInternalInstall())
          {
            uint64_t v8 = (NSString *)location;
          }
          else if (location)
          {
            id v19 = [location domain];
            char v18 = 1;
            uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v19, [location code]);
            id v17 = v8;
            char v16 = 1;
          }
          else
          {
            uint64_t v8 = 0;
          }
          sub_10004BB7C((uint64_t)buf, (uint64_t)v8);
          _os_log_impl((void *)&_mh_execute_header, oslog, v20, "Failed to set the passcode: %{public}@", buf, 0xCu);
          if (v16) {

          }
          if (v18) {
        }
          }
        objc_storeStrong((id *)&oslog, 0);
      }
      else
      {
        os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = v15;
          os_log_type_t v10 = v14;
          sub_10004B24C(v13);
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully set the passcode!", v13, 2u);
        }
        objc_storeStrong((id *)&v15, 0);
        BYSetupAssistantCreateAuthContext();
        id v11 = [*(id *)(a1 + 32) passcodeCacheManager];
        [v11 cachePasscode:v24 retrievable:1];

        id v12 = [*(id *)(a1 + 32) buddyPreferences];
        [v12 setObject:&__kCFBooleanTrue forKey:@"Passcode4Presented"];
      }
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong(&v24, 0);
  }
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001C2CF0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate:a1, a1];
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = [v3 error];
  [v2 backupDeviceController:v3 backupCompletedWithError:v4];
}

double sub_1001C37C8()
{
  return 0.0;
}

double sub_1001C48C4(uint64_t a1, int a2, uint64_t a3, int a4)
{
  *(void *)&double result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(void *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  return result;
}

double sub_1001C4FFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)&double result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2048;
  *(void *)(a1 + 20) = a4;
  return result;
}

void sub_1001C5378(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_100321EB0;
  qword_100321EB0 = v1;
}

void sub_1001C6CCC(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 16) layer:a1, a1];
  id v2 = +[UIColor _labelColor];
  [v1 setBorderColor:[v2 CGColor]];
}

void sub_1001C8080(id a1)
{
  id v1 = objc_alloc_init(BuddySIMManager);
  id v2 = (void *)qword_100321EC8;
  qword_100321EC8 = (uint64_t)v1;
}

void sub_1001C8AA4(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4]) {
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(location, 0);
}

double sub_1001CA184()
{
  return 0.01;
}

void sub_1001CA554(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] view];
  id v4 = [v3 window];
  id v5 = [v4 windowScene];
  +[BuddyPasscodeBaseViewController _passcodeInputVerticalPaddingForOrientation:](BuddyPasscodeBaseViewController, "_passcodeInputVerticalPaddingForOrientation:", [v5 interfaceOrientation]);
  double v7 = v6;

  id v8 = [a1[4] contentViewTopConstraint];
  [v8 setConstant:v7];

  id v9 = [a1[4] passcodeInputViewBottomConstraint];
  [v9 setConstant:v7];

  objc_storeStrong(location, 0);
}

void sub_1001CAD1C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] delegate];
  [v3 flowItemDone:a1[4]];

  objc_storeStrong(location, 0);
}

void sub_1001CAD8C(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v45 = a1;
  char v44 = 0;
  id v2 = [*(id *)(a1 + 32) proximitySetupController];
  unsigned __int8 v3 = [v2 validatePasscode:*(void *)(a1 + 40)];

  char v44 = v3 & 1;
  if (v3)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = oslog;
      os_log_type_t v8 = v33;
      sub_10004B24C(v32);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Passcode entered by user does match source device", v32, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    id v9 = [*(id *)(a1 + 32) proximitySetupController];
    [v9 setHasValidatedPasscode:1];

    char v31 = 0;
    id v10 = [*(id *)(a1 + 32) managedConfiguration];
    unsigned __int8 v11 = [v10 passcode:*(void *)(a1 + 40) meetsCurrentConstraintsOutError:0];

    char v31 = v11 & 1;
    if ([*(id *)(a1 + 32) _shouldSetPasscode] & 1) != 0 && (v31)
    {
      os_log_t v30 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = v30;
        os_log_type_t v13 = v29;
        sub_10004B24C(v28);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting a breadcrumb for the passcode to be set later...", v28, 2u);
      }
      objc_storeStrong((id *)&v30, 0);
      id v14 = +[UIKeyboardInputModeController sharedInputModeController];
      [v14 saveDeviceUnlockPasscodeInputModes];

      id v15 = [*(id *)(a1 + 32) passcodeCacheManager];
      [v15 cachePasscode:*(void *)(a1 + 40) retrievable:1];
    }
    else
    {
      os_log_t v27 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        char v16 = v27;
        os_log_type_t v17 = v26;
        sub_10004B24C(v25);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Passcode breadcrumb not set; not supposed to set passcode or does not meet current policy",
          v25,
          2u);
      }
      objc_storeStrong((id *)&v27, 0);
    }
    char v18 = &_dispatch_main_q;
    id v19 = _NSConcreteStackBlock;
    int v20 = -1073741824;
    int v21 = 0;
    char v22 = sub_1001CB2C0;
    os_log_type_t v23 = &unk_1002B0D20;
    id v24 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v18, &v19);

    objc_storeStrong(&v24, 0);
  }
  else
  {
    id location = (id)_BYLoggingFacility();
    os_log_type_t v42 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = location;
      os_log_type_t v5 = v42;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Passcode entered by user does not match source device", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    double v6 = &_dispatch_main_q;
    dispatch_block_t block = _NSConcreteStackBlock;
    int v36 = -1073741824;
    int v37 = 0;
    id v38 = sub_1001CB1D8;
    os_signpost_id_t v39 = &unk_1002B0D20;
    id v40 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v6, &block);

    objc_storeStrong(&v40, 0);
  }
}

void sub_1001CB1D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) view:a1, a1];
  id v3 = [v2 window];
  [v3 setUserInteractionEnabled:1];

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"BUDDY_PROXIMITY_PASSCODE_VALIDATION_CONTROLLER"];
  id v4 = [*(id *)(a1 + 32) passcodeInputView];
  [v4 shakePasscode];

  id v5 = [*(id *)(a1 + 32) passcodeInputView];
  [v5 setPasscode:&stru_1002B4E18];
}

void sub_1001CB2C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) view:a1, a1];
  id v3 = [v2 window];
  [v3 setUserInteractionEnabled:1];

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"BUDDY_PROXIMITY_PASSCODE_VALIDATION_CONTROLLER"];
  id v4 = [*(id *)(a1 + 32) delegate];
  [v4 flowItemDone:*(void *)(a1 + 32)];
}

void sub_1001CBA58(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  id v3 = [a1[4] proximitySetupController];
  [v3 resetInformation];

  id v4 = [a1[4] proximitySetupController];
  [v4 setExpressDataSource:0];

  id v5 = dispatch_get_global_queue(0, 0);
  double v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472;
  id v9 = sub_1001CBBBC;
  id v10 = &unk_1002B0D20;
  v11[0] = a1[4];
  dispatch_async(v5, &v7);

  id v6 = [a1[4] delegate:v7, v8, v9, v10];
  [v6 flowItemDone:a1[4]];

  objc_storeStrong(v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001CBBBC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) proximitySetupController:a1, a1];
  [v1 setupFinished];
}

uint64_t sub_1001CBD70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2 == 1)
  {
    id v3 = [*(id *)(result + 32) proximitySetupController];
    id v4 = [v3 handshake];
    [v4 hasPasscodeSet];

    id v5 = [*(id *)(v2 + 32) proximitySetupController];
    [v5 hasValidatedPasscode];

    return (*(uint64_t (**)(void))(*(void *)(v2 + 40) + 16))();
  }
  else if (a2 == 2)
  {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16))();
  }
  return result;
}

uint64_t sub_1001CCD18()
{
  uint64_t v3 = sub_1001CFED4();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WiFiKitLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyWiFiController.m", 40, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

void sub_1001CCE4C()
{
  if (!sub_1001D0020())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *WiFiKitUILibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyWiFiController.m", 41, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

id sub_1001CD318()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321EE0;
  uint64_t v13 = qword_100321EE0;
  if (!qword_100321EE0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001D016C;
    id v6 = &unk_1002B1248;
    double v7 = &v9;
    sub_1001D016C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001CD430()
{
  int v4 = (void **)sub_1001D02B0();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getWFNetworkListControllerAssociationDidFinishNotification(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyWiFiController.m", 48, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

id sub_1001CD53C()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321EF0;
  uint64_t v13 = qword_100321EF0;
  if (!qword_100321EF0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001D041C;
    id v6 = &unk_1002B1248;
    double v7 = &v9;
    sub_1001D041C(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001CDF6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) miscState:a1 a1];
  [v2 setUserSkippedWiFi:1];

  return [*(id *)(a1 + 32) _flowItemDoneWithResetActivationMethod:*(unsigned char *)(a1 + 40) & 1];
}

id sub_1001CDFD8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) startScanning:a1, a1];
}

void sub_1001CE404(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v19 = a1;
  id v2 = +[BuddyActivationConfiguration currentConfiguration];
  char v3 = [v2 isActivated] ^ 1;

  char v18 = v3 & 1;
  char v17 = 0;
  id v4 = [*(id *)(a1 + 32) networkProvider];
  char v5 = 1;
  if (([v4 connectedOverWiFiAndNetworkReachable] & 1) == 0) {
    char v5 = v18 ^ 1;
  }

  char v17 = v5 & 1;
  char v15 = 0;
  unsigned __int8 v6 = 0;
  if (v18)
  {
    id v16 = +[BYPreferencesController buddyPreferencesInternal];
    char v15 = 1;
    unsigned __int8 v6 = [v16 BOOLForKey:@"skipWiFiRequirement"];
  }
  if (v15) {

  }
  if (v6) {
    char v17 = 1;
  }
  double v7 = &_dispatch_main_q;
  uint64_t v8 = _NSConcreteStackBlock;
  int v9 = -1073741824;
  int v10 = 0;
  int v11 = sub_1001CE5D0;
  int v12 = &unk_1002B1130;
  id v13 = *(id *)(a1 + 32);
  char v14 = v17 & 1;
  dispatch_async((dispatch_queue_t)v7, &v8);

  objc_storeStrong(&v13, 0);
}

void sub_1001CE5D0(uint64_t a1)
{
  id v11[2] = (id)a1;
  v11[1] = (id)a1;
  v11[0] = [*(id *)(a1 + 32) viewController];
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    id v8 = [v11[0] buttonTray];
    [v8 removeAllButtons];

    goto LABEL_8;
  }
  id v2 = [v11[0] buttonTray];
  id v3 = [v2 allButtons];
  unsigned __int8 v4 = 1;
  if (![v3 count]) {
    unsigned __int8 v4 = [*(id *)(a1 + 32) preventNextButtonCreation];
  }

  if ((v4 & 1) == 0)
  {
    id location = +[OBBoldTrayButton boldButton];
    [location addTarget:*(void *)(a1 + 32) action:"_nextTapped:" forEvents:64];
    char v5 = +[NSBundle mainBundle];
    unsigned __int8 v6 = [(NSBundle *)v5 localizedStringForKey:@"CONTINUE" value:&stru_1002B4E18 table:@"Localizable"];
    [location setTitle:v6 forState:0];

    id v7 = [v11[0] buttonTray];
    [v7 addButton:location];

    objc_storeStrong(&location, 0);
LABEL_8:
    [*(id *)(*(void *)(a1 + 32) + 8) setShowAdditionalSetupInfo:(*(unsigned char *)(a1 + 40) ^ 1) & 1];
    int v10 = 0;
    goto LABEL_9;
  }
  int v10 = 1;
LABEL_9:
  objc_storeStrong(v11, 0);
}

id sub_1001CEC44()
{
  unsigned __int8 v4 = (void **)sub_1001D0560();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"NSString *getWFNetworkListControllerAssociationErrorKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyWiFiController.m", 50, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  id v2 = *v4;

  return v2;
}

void sub_1001CF3D0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = (void (**)(void))[a1[4] showModalWiFiSettingsBlock];
  v3[2](v3);

  objc_storeStrong((id *)a1[4] + 4, 0);
  objc_storeStrong(location, 0);
}

void sub_1001CF454(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong((id *)(a1[4] + 32), 0);
  objc_storeStrong(location, 0);
}

void sub_1001CF5FC(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  int v10 = a1;
  [a1[4] _clearReturnToServiceTimer];
  char v9 = 0;
  id v3 = [a1[4] networkProvider];
  unsigned __int8 v4 = [v3 isCellularDataPossible];

  char v9 = v4 & 1;
  id v5 = +[BuddyActivationConfiguration currentConfiguration];
  unsigned __int8 v6 = [v5 supportsCellularActivation];

  char v8 = v6 & 1;
  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004F3FC((uint64_t)buf, v9 & 1, v8 & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Return to Service timer timed out. isCellularDataPossible: %d isCellularActivationPossible: %d", buf, 0xEu);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (v9 & 1) != 0 && (v8) {
    [a1[4] _flowItemDoneWithResetActivationMethod:0];
  }
  objc_storeStrong(location, 0);
}

id sub_1001CF9C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateActivationMethod:a1 a1];
}

uint64_t sub_1001CFED4()
{
  if (!qword_100321ED0) {
    sub_1001CFF8C();
  }
  return qword_100321ED0;
}

uint64_t sub_1001CFF8C()
{
  uint64_t result = _sl_dlopen();
  qword_100321ED0 = result;
  return result;
}

uint64_t sub_1001D0020()
{
  if (!qword_100321ED8) {
    sub_1001D00D8();
  }
  return qword_100321ED8;
}

uint64_t sub_1001D00D8()
{
  uint64_t result = _sl_dlopen();
  qword_100321ED8 = result;
  return result;
}

void sub_1001D016C(NSAssertionHandler *a1)
{
  sub_1001CCE4C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getWFBuddyViewControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyWiFiController.m", 43, @"Unable to find class %s", "WFBuddyViewController" file lineNumber description];

    __break(1u);
  }
  qword_100321EE0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001D02B0()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321EE8;
  uint64_t v13 = qword_100321EE8;
  if (!qword_100321EE8)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001D03B0;
    unsigned __int8 v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001D03B0((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001D03B0(uint64_t a1)
{
  id v2 = (void *)sub_1001CCD18();
  uint64_t result = dlsym(v2, "WFNetworkListControllerAssociationDidFinishNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321EE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001D041C(NSAssertionHandler *a1)
{
  sub_1001CCD18();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("WFNetworkListController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getWFNetworkListControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyWiFiController.m", 45, @"Unable to find class %s", "WFNetworkListController" file lineNumber description];

    __break(1u);
  }
  qword_100321EF0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001D0560()
{
  uint64_t v9 = 0;
  int v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321EF8;
  uint64_t v13 = qword_100321EF8;
  if (!qword_100321EF8)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001D0660;
    unsigned __int8 v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001D0660((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001D0660(uint64_t a1)
{
  id v2 = (void *)sub_1001CCD18();
  uint64_t result = dlsym(v2, "WFNetworkListControllerAssociationErrorKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321EF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001D0900(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v16 = a1;
  char v15 = 0;
  id v2 = [*(id *)(a1 + 32) managedConfiguration];
  unsigned __int8 v3 = [v2 shouldShowCloudConfigurationUI];

  char v15 = v3 & 1;
  id v4 = +[BuddyCloudConfigManager sharedManager];
  id v5 = [v4 cloudConfigurationDetails];
  id v6 = [v5 objectForKeyedSubscript:kCCRemoteManagementAccountIdentifierKey];
  char v15 = (v15 & 1 & (v6 == 0)) != 0;

  if (v15)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) enrollmentCoordinator];
    uint64_t v8 = _NSConcreteStackBlock;
    int v9 = -1073741824;
    int v10 = 0;
    int v11 = sub_1001D0AD4;
    int v12 = &unk_1002B0CF8;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    [v7 verifyEnrollmentStateWithCompletionHandler:&v8];

    objc_storeStrong(&v14, 0);
    objc_storeStrong(&v13, 0);
  }
}

uint64_t sub_1001D0AD4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 32) managedConfiguration];
    [v3 cloudConfigurationUIDidCompleteWasApplied:1];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001D1618(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  id v3 = &_dispatch_main_q;
  id v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001D1750;
  uint64_t v8 = &unk_1002B15F0;
  id v9 = location[0];
  id v10 = a1[4];
  v11[0] = a1[5];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001D1750(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v8 = 0;
      char v6 = 0;
      if (_BYIsInternalInstall())
      {
        Class isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        id v9 = [(objc_class *)a1[4].isa domain];
        char v8 = 1;
        Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v9, [(objc_class *)a1[4].isa code]];
        id v7 = isa;
        char v6 = 1;
      }
      else
      {
        Class isa = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to set UI complete for cloud configuration. Error: %{public}@", buf, 0xCu);
      if (v6) {

      }
      if (v8) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    Class v3 = a1[5].isa;
    id v4 = [(objc_class *)a1[6].isa disclosureViewController];
    LOBYTE(v3) = [(objc_class *)v3 isEqual:v4];

    if (v3)
    {
      id v5 = [(objc_class *)a1[6].isa disclosureViewController];
      [v5 showRetrievalError:a1[4].isa];
    }
    else
    {
      [(objc_class *)a1[6].isa transitionToErrorViewInDisclosureViewControllerFromController:a1[5].isa lastError:a1[4].isa];
    }
  }
  else
  {
    [(objc_class *)a1[6].isa _completeCloudConfig];
  }
}

BOOL sub_1001D2104(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v1 = [location domain];
  BOOL v2 = 0;
  if ([v1 isEqualToString:DMCHTTPTransactionErrorDomain]) {
    BOOL v2 = [location code] == (id)23006;
  }

  objc_storeStrong(&location, 0);
  return v2;
}

id sub_1001D25D4()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321F08;
  uint64_t v13 = qword_100321F08;
  if (!qword_100321F08)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    id v5 = sub_1001E02A8;
    char v6 = &unk_1002B1248;
    id v7 = &v9;
    sub_1001E02A8(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001D26EC(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        int v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        int v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        int v3 = 0;
      }
      sub_10004B238((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Error enrolling in beta program: %@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully enrolled in beta program", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001D3034(id a1)
{
  uint64_t v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  [v4[0] setLineBreakMode:4];
  [v4[0] setAlignment:0];
  v5[0] = NSFontAttributeName;
  id v1 = +[UIFont preferredFontForTextStyle:UIFontTextStyleBody];
  v6[0] = v1;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  NSAssertionHandler v2 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  int v3 = (void *)qword_100321F18;
  qword_100321F18 = (uint64_t)v2;

  objc_storeStrong(v4, 0);
}

void sub_1001D59E0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  int v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  os_log_type_t v7 = sub_1001D5AF0;
  os_log_t v8 = &unk_1002B12F0;
  id v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_1001D5AF0(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"Disclosure"];
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    char v7 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      NSAssertionHandler v2 = oslog[0];
      os_log_type_t v3 = v7;
      sub_10004B24C(v6);
      _os_log_error_impl((void *)&_mh_execute_header, v2, v3, "BuddyCloudConfigController: _setupForCloudConfigurationState: Error attempting to store cloud config details!", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    return [(objc_class *)a1[5].isa showRetrievalError:a1[4].isa];
  }
  else
  {
    [(objc_class *)a1[5].isa setLastRetrievalError:0];
    id v5 = [(objc_class *)a1[5].isa configController];
    [v5 setCloudConfigState:3];

    return [(objc_class *)a1[5].isa _setupForCloudConfigurationState];
  }
}

void sub_1001D5C04(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  os_log_type_t v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  char v7 = sub_1001D5D14;
  os_log_t v8 = &unk_1002B12F0;
  id v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_1001D5D14(uint64_t a1)
{
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"Disclosure", a1, a1];
  if (*(void *)(a1 + 32)) {
    return [*(id *)(a1 + 40) showRetrievalError:*(void *)(a1 + 32)];
  }
  [*(id *)(a1 + 40) setLastRetrievalError:0];
  id v3 = [*(id *)(a1 + 40) configController];
  [v3 setCloudConfigState:3];

  return [*(id *)(a1 + 40) _setupForCloudConfigurationState];
}

void sub_1001D5DB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained showAboutConfiguration:a1, a1];
}

void sub_1001D62C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
}

void sub_1001D62F4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  id v3 = &_dispatch_main_q;
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  char v7 = sub_1001D63E0;
  os_log_t v8 = &unk_1002B0CA8;
  objc_copyWeak(v9, a1 + 4);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_destroyWeak(v9);
  objc_storeStrong(location, 0);
}

void sub_1001D63E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _showEraseDeviceAlert:a1, a1];
}

void sub_1001D65DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
}

void sub_1001D6608(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  id v3 = &_dispatch_main_q;
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  char v7 = sub_1001D66F4;
  os_log_t v8 = &unk_1002B0CA8;
  objc_copyWeak(v9, a1 + 4);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_destroyWeak(v9);
  objc_storeStrong(location, 0);
}

void sub_1001D66F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _leaveRemoteManagementAndErase:a1, a1];
}

void sub_1001D6890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  objc_destroyWeak((id *)(v16 - 40));
  _Unwind_Resume(a1);
}

void sub_1001D68BC(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22[1] = a1;
  if (location[0])
  {
    int v4 = +[NSBundle mainBundle];
    int v5 = [(NSBundle *)v4 localizedStringForKey:@"REMOTE_MANAGEMENT_LEAVE_FAILED_ALERT_TITLE" value:&stru_1002B4E18 table:@"Localizable"];
    int v6 = +[NSBundle mainBundle];
    id v7 = +[UIDevice modelSpecificLocalizedStringKeyForKey:@"REMOTE_MANAGEMENT_LEAVE_FAILED_ALERT_BODY"];
    os_log_t v8 = [(NSBundle *)v6 localizedStringForKey:v7 value:&stru_1002B4E18 table:@"Localizable"];
    id v20 = +[UIAlertController alertControllerWithTitle:v5 message:v8 preferredStyle:1];

    id v9 = +[NSBundle mainBundle];
    id v10 = [(NSBundle *)v9 localizedStringForKey:@"OK" value:&stru_1002B4E18 table:@"Localizable"];
    id v19 = +[UIAlertAction actionWithTitle:v10 style:1 handler:0];

    [v20 addAction:v19];
    char v11 = &_dispatch_main_q;
    dispatch_block_t block = _NSConcreteStackBlock;
    int v13 = -1073741824;
    int v14 = 0;
    char v15 = sub_1001D6E64;
    uint64_t v16 = &unk_1002B1408;
    objc_copyWeak(&v18, a1 + 4);
    id v17 = v20;
    dispatch_async((dispatch_queue_t)v11, &block);

    objc_storeStrong(&v17, 0);
    objc_destroyWeak(&v18);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v20, 0);
  }
  else
  {
    NSLog(@"Unenroll is successfull. Erasing the device...");
    v22[0] = objc_alloc_init((Class)DDRResetOptions);
    [v22[0] setEraseDataPlan:1];
    id v21 = [objc_alloc((Class)DDRResetRequest) initWithMode:4 options:v22[0] reason:@"Remote Management Unenroll"];
    id v3 = +[DDRResetService sharedInstance];
    [(DDRResetService *)v3 resetWithRequest:v21 completion:&stru_1002B49A8];

    objc_storeStrong(&v21, 0);
    objc_storeStrong(v22, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001D6C38(id a1, NSError *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v11 = 0;
      char v9 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v12 = [location[0] domain];
        char v11 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v12, [location[0] code]);
        id v10 = v3;
        char v9 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Reset failed: %{public}@", buf, 0xCu);
      if (v9) {

      }
      if (v11) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    os_log_t v8 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = v8;
      os_log_type_t v5 = v7;
      sub_10004B24C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset was successful!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001D6E64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained navigationController:a1];
  [v3 presentViewController:*(void *)(a1 + 32) animated:1 completion:0];
}

id sub_1001D808C(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v17 = 0;
  if (location)
  {
    id v1 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [location count]);
    id v2 = v17;
    id v17 = v1;

    memset(__b, 0, sizeof(__b));
    id v3 = location;
    id v4 = [v3 countByEnumeratingWithState:__b objects:v19 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)__b[2];
      do
      {
        for (unint64_t i = 0; i < (unint64_t)v4; ++i)
        {
          if (*(void *)__b[2] != v5) {
            objc_enumerationMutation(v3);
          }
          CFDataRef data = *(CFDataRef *)(__b[1] + 8 * i);
          CFTypeRef cf = 0;
          CFTypeRef cf = SecCertificateCreateWithData(0, data);
          if (cf)
          {
            [v17 addObject:cf];
            CFRelease(cf);
          }
          else
          {
            os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
            os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
            {
              os_log_type_t v7 = oslog;
              os_log_type_t v8 = v12;
              sub_10004B24C(v11);
              _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not parse anchor certificate data. Ignoring.", (uint8_t *)v11, 2u);
            }
            objc_storeStrong((id *)&oslog, 0);
          }
        }
        id v4 = [v3 countByEnumeratingWithState:__b objects:v19 count:16];
      }
      while (v4);
    }
  }
  id v9 = v17;
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&location, 0);
  return v9;
}

void sub_1001D82C8(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  uint64_t v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1001D8418;
  id v10 = &unk_1002B15F0;
  id v11 = location[0];
  id v12 = a1[4];
  v13[0] = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001D8418(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"Disclosure"];
  if (a1[4].isa)
  {
    if (sub_1001D2104(a1[4].isa))
    {
      id v2 = [(objc_class *)a1[5].isa configController];
      [v2 transitionToSoftwareUpdateControllerFromController:a1[5].isa lastError:a1[4].isa];
    }
    else if (sub_1001D869C(a1[4].isa))
    {
      id v3 = [(objc_class *)a1[5].isa configController];
      [v3 setCloudConfigState:6];

      id v4 = [(objc_class *)a1[5].isa configController];
      [v4 transitionToLoginViewControllerFromController:a1[5].isa lastError:a1[4].isa];
    }
    else
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility();
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
      {
        char v8 = 0;
        char v6 = 0;
        if (_BYIsInternalInstall())
        {
          Class isa = (NSString *)a1[4].isa;
        }
        else if (a1[4].isa)
        {
          id v9 = [(objc_class *)a1[4].isa domain];
          char v8 = 1;
          Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v9, [(objc_class *)a1[4].isa code]];
          int v7 = isa;
          char v6 = 1;
        }
        else
        {
          Class isa = 0;
        }
        sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
        _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Error retrieving cloud config: %{public}@", buf, 0xCu);
        if (v6) {

        }
        if (v8) {
      }
        }
      objc_storeStrong((id *)oslog, 0);
      [(objc_class *)a1[5].isa showRetrievalError:a1[4].isa];
    }
  }
  else
  {
    [(objc_class *)a1[5].isa _storeProfileDataAndCompleteDisclosure:a1[6].isa];
  }
}

BOOL sub_1001D869C(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v1 = [location domain];
  char v6 = 0;
  if (([v1 isEqualToString:DMCHTTPTransactionErrorDomain] & 1) == 0
    || (id v2 = [location code], v3 = 1, v2 != (id)23003))
  {
    id v7 = [location domain];
    char v6 = 1;
    unsigned __int8 v4 = [v7 isEqualToString:MCCloudConfigErrorDomain];
    BOOL v3 = 0;
    if (v4) {
      BOOL v3 = [location code] == (id)33000;
    }
  }
  BOOL v9 = v3;
  if (v6) {

  }
  objc_storeStrong(&location, 0);
  return v9;
}

void sub_1001D8954(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  uint64_t v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  BOOL v9 = sub_1001D8AA4;
  id v10 = &unk_1002B15F0;
  id v11 = v14;
  id v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001D8AA4(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"Disclosure"];
  if (a1[4].isa)
  {
    if (sub_1001D2104(a1[4].isa))
    {
      id v2 = [(objc_class *)a1[5].isa configController];
      [v2 transitionToSoftwareUpdateControllerFromController:a1[5].isa lastError:a1[4].isa];
    }
    else if (sub_1001D869C(a1[4].isa))
    {
      id v3 = [(objc_class *)a1[5].isa configController];
      [v3 setCloudConfigState:6];

      id v4 = [(objc_class *)a1[5].isa configController];
      [v4 transitionToLoginViewControllerFromController:a1[5].isa lastError:a1[4].isa];
    }
    else
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v26 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
      {
        char v24 = 0;
        char v22 = 0;
        if (_BYIsInternalInstall())
        {
          Class isa = (NSString *)a1[4].isa;
        }
        else if (a1[4].isa)
        {
          id v25 = [(objc_class *)a1[4].isa domain];
          char v24 = 1;
          Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v25, [(objc_class *)a1[4].isa code]];
          id v23 = isa;
          char v22 = 1;
        }
        else
        {
          Class isa = 0;
        }
        sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
        _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v26, "Error retrieving cloud config: %{public}@", buf, 0xCu);
        if (v22) {

        }
        if (v24) {
      }
        }
      objc_storeStrong((id *)oslog, 0);
      [(objc_class *)a1[5].isa showRetrievalError:a1[4].isa];
    }
  }
  else
  {
    id location = (id)objc_opt_new();
    char v20 = 0;
    memset(__b, 0, sizeof(__b));
    id v6 = [(objc_class *)a1[5].isa navigationController];
    id v7 = [v6 viewControllers];

    id v8 = [v7 countByEnumeratingWithState:__b objects:v28 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)__b[2];
      do
      {
        for (unint64_t i = 0; i < (unint64_t)v8; ++i)
        {
          if (*(void *)__b[2] != v9) {
            objc_enumerationMutation(v7);
          }
          id v19 = *(id *)(__b[1] + 8 * i);
          if (v20)
          {
            [location addObject:v19];
          }
          else if ([v19 isEqual:a1[5].isa])
          {
            char v20 = 1;
          }
        }
        id v8 = [v7 countByEnumeratingWithState:__b objects:v28 count:16];
      }
      while (v8);
    }

    id v11 = [(objc_class *)a1[5].isa configController];
    id v12 = [v11 delegate];
    [v12 removeViewControllersOnNextPush:location];

    os_log_t v17 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v13 = v17;
      os_log_type_t v14 = v16;
      sub_10004B24C(v15);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "MDM profile retrieved!!", v15, 2u);
    }
    objc_storeStrong((id *)&v17, 0);
    [(objc_class *)a1[5].isa _storeProfileDataAndCompleteDisclosure:a1[6].isa];
    objc_storeStrong(&location, 0);
  }
}

void sub_1001D911C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  id v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001D922C;
  id v8 = &unk_1002B12F0;
  id v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001D922C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      char v6 = 0;
      char v4 = 0;
      if (_BYIsInternalInstall())
      {
        Class isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        id v7 = [(objc_class *)a1[4].isa domain];
        char v6 = 1;
        Class isa = +[NSString stringWithFormat:@"<Error domain: %@, code %ld>", v7, [(objc_class *)a1[4].isa code]];
        int v5 = isa;
        char v4 = 1;
      }
      else
      {
        Class isa = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to store profile data with error: %{public}@", buf, 0xCu);
      if (v4) {

      }
      if (v6) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
    [(objc_class *)a1[5].isa showRetrievalError:a1[4].isa];
  }
  else
  {
    id v3 = [(objc_class *)a1[5].isa configController];
    [v3 cloudConfigDidFinishFromViewController:a1[5].isa wasApplied:1];
  }
}

id sub_1001D990C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Web controller finished dimissing; advancing panes!",
      (uint8_t *)v5,
      2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return [(objc_class *)a1[4].isa _storeProfileDataAndCompleteDisclosure:a1[5].isa];
}

void sub_1001DA7C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) tableView];
  [v2 frame];
  double v31 = v3;
  double v30 = v4;
  double v32 = v5;

  double v33 = *(double *)(a1 + 48) - v31;
  id v6 = [*(id *)(a1 + 32) tableView];
  [v6 setFrame:v30, v31, v32, v33];

  id v7 = [*(id *)(a1 + 32) activeTextField];
  if (v7)
  {
    id v8 = [*(id *)(a1 + 32) tableView];
    id v9 = [*(id *)(a1 + 32) activeTextField];
    id v10 = [v9 superview];
    [v10 bounds];
    double v23 = v11;
    double v22 = v12;
    double v25 = v13;
    double v24 = v14;
    id v15 = [*(id *)(a1 + 32) activeTextField];
    id v16 = [v15 superview];
    [v8 convertRect:v16 fromView:v22, v23, v24, v25];
    double v27 = v17;
    double v26 = v18;
    double v29 = v19;
    double v28 = v20;

    id v21 = [*(id *)(a1 + 32) tableView];
    [v21 scrollRectToVisible:0 v26 v27 v28 v29];
  }
}

id sub_1001DA9C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDisableExcessiveLayout:0];
}

id sub_1001DAB44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _layoutTableView:a1];
}

double sub_1001DB344(id obj)
{
  id location = 0;
  objc_storeStrong(&location, obj);
  id v1 = +[UIDevice currentDevice];
  id v2 = [(UIDevice *)v1 userInterfaceIdiom];

  if (v2 == (id)1)
  {
    id v3 = [location view];
    [v3 bounds];
    double v18 = v4 * 0.09;
  }
  else
  {
    id v5 = [location navigationController];
    id v6 = [v5 navigationBar];
    [v6 bounds];
    double v8 = v7;

    double v16 = v8;
    id v9 = [location navigationController];
    id v10 = [v9 navigationBar];
    unsigned __int8 v11 = [v10 isHidden];

    if (v11) {
      double v16 = 0.0;
    }
    double v12 = +[UIScreen mainScreen];
    [(UIScreen *)v12 bounds];
    float v14 = v13 * 0.09 - v16;
    double v18 = fmaxf(v14, 0.0);
  }
  objc_storeStrong(&location, 0);
  return v18;
}

void sub_1001DBE7C(id *a1)
{
  v30[2] = a1;
  v30[1] = a1;
  id v2 = [a1[4] managedConfiguration];
  v30[0] = [v2 cloudConfigurationDetails];

  id v3 = [v30[0] objectForKeyedSubscript:kMCCCConfigurationURLKey];
  id v29 = +[NSURL URLWithString:v3];

  id v4 = a1[4];
  id v5 = [v4 usernameCell];
  id v6 = [v5 editableTextField];
  id v7 = [v6 text];
  id v28 = [v4 _sanitizedUsername:v7];

  id v8 = [a1[4] passwordCell];
  id v9 = [v8 editableTextField];
  id v27 = [v9 text];

  id v10 = [v30[0] objectForKeyedSubscript:kMCCCAnchorCertificatesKey];
  id location = sub_1001D808C(v10);

  os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1001DC24C((uint64_t)buf, (uint64_t)v28);
    _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Retrieving configuration for username: \"%{private}@\"", buf, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  id v11 = [a1[4] managedConfiguration];
  id v12 = v29;
  id v13 = v28;
  id v14 = v27;
  id v15 = location;
  uint64_t v31 = kMDMCanRequestSoftwareUpdateKey;
  double v16 = +[NSNumber numberWithBool:1];
  double v32 = v16;
  double v17 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
  double v18 = _NSConcreteStackBlock;
  int v19 = -1073741824;
  int v20 = 0;
  id v21 = sub_1001DC260;
  double v22 = &unk_1002B49D0;
  id v23 = a1[4];
  [v11 retrieveCloudConfigurationFromURL:v12 username:v13 password:v14 anchorCertificates:v15 additionalMachineInfo:v17 completionBlock:&v18];

  objc_storeStrong(&v23, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(&v29, 0);
  objc_storeStrong(v30, 0);
}

double sub_1001DC24C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 138477827;
  *(_DWORD *)a1 = 138477827;
  *(void *)(a1 + 4) = a2;
  return result;
}

void sub_1001DC260(id *a1, void *a2, void *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  id v5 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v7 = -1073741824;
  int v8 = 0;
  id v9 = sub_1001DC3B0;
  id v10 = &unk_1002B15F0;
  id v11 = a1[4];
  id v12 = location[0];
  v13[0] = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001DC3B0(uint64_t a1)
{
  id v31[2] = (id)a1;
  v31[1] = (id)a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"Login"];
  id v2 = +[UIApplication sharedApplication];
  [(UIApplication *)v2 endIgnoringInteractionEvents];

  id v3 = [*(id *)(a1 + 32) usernameCell];
  id v4 = [v3 editableTextField];
  [v4 setEnabled:1];

  id v5 = [*(id *)(a1 + 32) passwordCell];
  id v6 = [v5 editableTextField];
  [v6 setEnabled:1];

  if (*(void *)(a1 + 40))
  {
    if (sub_1001D869C(*(id *)(a1 + 40)))
    {
      id v7 = [*(id *)(a1 + 32) configController];
      [v7 setCloudConfigState:6];

      id v8 = [*(id *)(a1 + 32) passwordCell];
      id v9 = [v8 editableTextField];
      [v9 becomeFirstResponder];

      id v10 = +[NSBundle mainBundle];
      id v11 = [(NSBundle *)v10 localizedStringForKey:@"CLOUD_CONFIG_CREDENTIAL_MISSING_OR_WRONG" value:&stru_1002B4E18 table:@"Localizable"];
      v31[0] = +[UIAlertController alertControllerWithTitle:0 message:v11 preferredStyle:1];

      id v12 = +[NSBundle mainBundle];
      id v13 = [(NSBundle *)v12 localizedStringForKey:@"OK" value:&stru_1002B4E18 table:0];
      os_log_type_t v24 = _NSConcreteStackBlock;
      int v25 = -1073741824;
      int v26 = 0;
      id v27 = sub_1001DC828;
      id v28 = &unk_1002B1040;
      id v29 = v31[0];
      id location = +[UIAlertAction actionWithTitle:v13 style:0 handler:&v24];

      [v31[0] addAction:location];
      id v14 = [*(id *)(a1 + 32) navigationController];
      [v14 presentViewController:v31[0] animated:1 completion:0];

      objc_storeStrong(&location, 0);
      objc_storeStrong(&v29, 0);
      objc_storeStrong(v31, 0);
    }
    else
    {
      if (sub_1001D2104(*(id *)(a1 + 40)))
      {
        id v15 = [*(id *)(a1 + 32) configController];
        [v15 transitionToSoftwareUpdateControllerFromController:*(void *)(a1 + 32) lastError:*(void *)(a1 + 40)];
      }
      else
      {
        id v15 = [*(id *)(a1 + 32) configController];
        [v15 transitionToErrorViewInDisclosureViewControllerFromController:*(void *)(a1 + 32) lastError:*(void *)(a1 + 40)];
      }
    }
  }
  else
  {
    id v16 = [*(id *)(a1 + 32) managedConfiguration];
    uint64_t v17 = *(void *)(a1 + 48);
    double v18 = _NSConcreteStackBlock;
    int v19 = -1073741824;
    int v20 = 0;
    id v21 = sub_1001DC884;
    double v22 = &unk_1002B0FF0;
    id v23 = *(id *)(a1 + 32);
    [v16 storeProfileData:v17 completion:&v18];

    objc_storeStrong(&v23, 0);
  }
}

void sub_1001DC828(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] dismissViewControllerAnimated:1 completion:0];
  objc_storeStrong(location, 0);
}

void sub_1001DC884(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  id v3 = &_dispatch_main_q;
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001DC994;
  id v8 = &unk_1002B12F0;
  id v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001DC994(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = [*(id *)(a1 + 40) configController:a1:a1];
    [v2 transitionToErrorViewInDisclosureViewControllerFromController:*(void *)(a1 + 40) lastError:*(void *)(a1 + 32)];
  }
  else
  {
    id v2 = [*(id *)(a1 + 40) configController:a1:a1];
    [v2 cloudConfigDidFinishFromViewController:*(void *)(a1 + 40) wasApplied:1];
  }
}

void sub_1001DE16C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v11[0] = [a1[4] managedConfiguration];
  id v3 = location[0];
  id v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001DE290;
  id v8 = &unk_1002B4A48;
  id v9 = a1[4];
  id v10 = a1[5];
  [v11[0] createMDMUnlockTokenIfNeededWithPasscode:v3 completionBlock:&v4];
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001DE290(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      char v6 = 0;
      char v4 = 0;
      if (_BYIsInternalInstall())
      {
        id v3 = (NSString *)location[0];
      }
      else if (location[0])
      {
        id v7 = [location[0] domain];
        char v6 = 1;
        id v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v7, [location[0] code]);
        int v5 = v3;
        char v4 = 1;
      }
      else
      {
        id v3 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v3);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Failed to create unlock escrow with error: %{public}@", buf, 0xCu);
      if (v4) {

      }
      if (v6) {
    }
      }
    objc_storeStrong((id *)oslog, 0);
  }
  [(objc_class *)a1[4].isa _tryToInstallStoredProfileShouldCreateEscrowIfNeeded:0 completion:a1[5].isa];
  objc_storeStrong(location, 0);
}

void sub_1001DE460(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = [[BuddyPasscodeEntryController alloc] initWithNibName:0 bundle:0];
  [location[0] setDelegate:a1[4]];
  id v2 = +[NSBundle mainBundle];
  id v3 = [(NSBundle *)v2 localizedStringForKey:@"CLOUD_CONFIG_PASSCODE_TITLE" value:&stru_1002B4E18 table:@"Localizable"];
  [location[0] setTitleText:v3];

  char v4 = +[NSBundle mainBundle];
  int v5 = [(NSBundle *)v4 localizedStringForKey:@"CLOUD_CONFIG_PASSCODE_INSTRUCTIONS" value:&stru_1002B4E18 table:@"Localizable"];
  [location[0] setInstructions:v5];

  id v6 = [location[0] navigationItem];
  id v7 = [objc_alloc((Class)UIBarButtonItem) initWithBarButtonSystemItem:1 target:a1[4] action:"_cancelDevicePasscodePicker:"];
  [v6 setLeftBarButtonItem:v7];

  id v11 = [objc_alloc((Class)UINavigationController) initWithRootViewController:location[0]];
  id v8 = +[BFFStyle sharedStyle];
  [v8 applyThemeToNavigationController:v11];

  [a1[4] presentViewController:v11 animated:1 completion:0];
  id v9 = a1[4];
  id v10 = [v11 presentationController];
  [v10 setDelegate:v9];

  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001DE8F0(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  uint64_t v14 = a1;
  id v3 = &_dispatch_main_q;
  char v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  id v7 = sub_1001DEA54;
  id v8 = &unk_1002B4A98;
  id v9 = location[0];
  char v13 = *(unsigned char *)(a1 + 56) & 1;
  id v10 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001DEA54(uint64_t a1)
{
  char v8 = 1;
  if (*(void *)(a1 + 32))
  {
    if ((*(unsigned char *)(a1 + 64) & 1) != 0
      && ([*(id *)(a1 + 40) _isEscrowMissingError:*(void *)(a1 + 32)] & 1) != 0)
    {
      char v8 = 0;
      [*(id *)(a1 + 40) _createUnlockEscrowAndRetryProfileInstallationWithCompletion:*(void *)(a1 + 56)];
    }
    else
    {
      id v2 = [*(id *)(a1 + 32) localizedRecoverySuggestion];
      id v3 = [v2 length];

      if (v3)
      {
        id v4 = [*(id *)(a1 + 32) localizedDescription];
        id v5 = [*(id *)(a1 + 32) localizedRecoverySuggestion];
        int v6 = +[NSString localizedStringWithFormat:@"%@\n%@", v4, v5];
        [*(id *)(a1 + 40) setLastErrorDescription:v6];
      }
      else
      {
        id v7 = [*(id *)(a1 + 32) localizedDescription];
        [*(id *)(a1 + 40) setLastErrorDescription:v7];
      }
    }
  }
  else
  {
    [*(id *)(a1 + 48) storeProfileData:0];
    [*(id *)(a1 + 40) setLastErrorDescription:0];
  }
  if (v8) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1001DF2AC(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v24 = a1;
  unsigned __int8 v2 = [*(id *)(a1 + 32) isAwaitingDeviceConfigured];
  char v22 = 0;
  BOOL v3 = 0;
  if (v2)
  {
    id v23 = [*(id *)(a1 + 40) lastErrorDescription];
    char v22 = 1;
    BOOL v3 = v23 == 0;
  }
  if (v22) {

  }
  if (v3)
  {
    objc_initWeak(&location, *(id *)(a1 + 40));
    id v15 = _NSConcreteStackBlock;
    int v16 = -1073741824;
    int v17 = 0;
    double v18 = sub_1001DF574;
    int v19 = &unk_1002B0CA8;
    objc_copyWeak(&v20, &location);
    [*(id *)(a1 + 40) setDeviceConfiguredCompletionBlock:&v15];
    [*(id *)(a1 + 40) setState:4];
    [*(id *)(a1 + 40) _setupForState];
    id v4 = *(void **)(a1 + 40);
    char v13 = 0;
    BOOL v5 = 0;
    if ([v4 cloudConfigurationChangedDuringInstallation])
    {
      id v14 = [*(id *)(a1 + 40) deviceConfiguredCompletionBlock];
      char v13 = 1;
      BOOL v5 = v14 != 0;
    }
    if (v13) {

    }
    if (v5)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = oslog;
        os_log_type_t v7 = v11;
        sub_10004B24C(v10);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cloud configuration changed during installation; jumping straight to completion...",
          (uint8_t *)v10,
          2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      char v8 = (void (**)(void))[*(id *)(a1 + 40) deviceConfiguredCompletionBlock];
      v8[2](v8);

      [*(id *)(a1 + 40) setDeviceConfiguredCompletionBlock:0];
    }
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);
  }
  else
  {
    [*(id *)(a1 + 40) setState:5];
    [*(id *)(a1 + 40) _setupForState];
  }
  id v9 = [*(id *)(a1 + 40) view];
  [v9 setNeedsLayout];
}

void sub_1001DF574(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v2 = oslog[0];
    os_log_type_t v3 = v6;
    sub_10004B24C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Device configuration completed!", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id location = objc_loadWeakRetained((id *)&a1[4].isa);
  [location setState:5];
  [location _setupForState];
  objc_storeStrong(&location, 0);
}

void sub_1001DF72C(NSObject *a1)
{
  os_log_t oslog[2] = a1;
  oslog[1] = a1;
  id v2 = [(objc_class *)a1[4].isa managedConfiguration];
  unsigned __int8 v3 = [v2 isAwaitingDeviceConfigured];

  if (v3)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      id v4 = oslog[0];
      os_log_type_t v5 = v22;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cloud configuration changed, but we are still waiting for device to be configured. So ignore this change.", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    unsigned int v6 = [(objc_class *)a1[4].isa state];
    char v19 = 0;
    BOOL v7 = 0;
    if (v6 == 4)
    {
      id v20 = [(objc_class *)a1[4].isa deviceConfiguredCompletionBlock];
      char v19 = 1;
      BOOL v7 = v20 != 0;
    }
    if (v19) {

    }
    if (v7)
    {
      os_log_t v18 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        char v8 = v18;
        os_log_type_t v9 = v17;
        sub_10004B24C(v16);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cloud configuration installed!", v16, 2u);
      }
      objc_storeStrong((id *)&v18, 0);
      id v10 = (void (**)(void))[(objc_class *)a1[4].isa deviceConfiguredCompletionBlock];
      v10[2](v10);

      [(objc_class *)a1[4].isa setDeviceConfiguredCompletionBlock:0];
    }
    else if ([(objc_class *)a1[4].isa state] == 3)
    {
      os_log_t v15 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v11 = v15;
        os_log_type_t v12 = v14;
        sub_10004B24C(v13);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cloud configuration did change during installation; taking note...",
          (uint8_t *)v13,
          2u);
      }
      objc_storeStrong((id *)&v15, 0);
      [(objc_class *)a1[4].isa setCloudConfigurationChangedDuringInstallation:1];
    }
  }
}

void sub_1001E02A8(NSAssertionHandler *a1)
{
  sub_1001E03EC();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("SDMDMConfigurator");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    id v2 = +[NSString stringWithUTF8String:"Class getSDMDMConfiguratorClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddyCloudConfigController.m", 58, @"Unable to find class %s", "SDMDMConfigurator" file lineNumber description];

    __break(1u);
  }
  qword_100321F08 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001E03EC()
{
  if (!sub_1001E051C())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *SeedingLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddyCloudConfigController.m", 57, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001E051C()
{
  if (!qword_100321F10) {
    sub_1001E05D4();
  }
  return qword_100321F10;
}

uint64_t sub_1001E05D4()
{
  uint64_t result = _sl_dlopen();
  qword_100321F10 = result;
  return result;
}

id sub_1001E255C(uint64_t a1)
{
  return [*(id *)(a1 + 32) becomeFirstResponder:a1, a1];
}

double sub_1001E2CA0()
{
  return 0.01;
}

void sub_1001E31B4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  unsigned __int8 v3 = objc_opt_class();
  id v4 = [a1[4] view];
  id v5 = [v4 window];
  id v6 = [v5 windowScene];
  [v3 _passcodeInputVerticalPaddingForOrientation:[v6 interfaceOrientation]];
  double v8 = v7;

  id v9 = [a1[4] contentViewTopConstraint];
  [v9 setConstant:v8];

  id v10 = [a1[4] passcodeInputViewBottomConstraint];
  [v10 setConstant:v8];

  objc_storeStrong(location, 0);
}

void sub_1001E37E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) passcodeManager:a1, a1];
  [v2 transitionToNextPasscodeStateForInput:*(void *)(a1 + 40)];
}

void sub_1001E3DF0(uint64_t a1, double a2)
{
  id v3 = [*(id *)(a1 + 32) contentViewTopConstraint];
  [v3 constant];
  double v5 = v4 + a2;
  id v6 = objc_opt_class();
  double v7 = +[UIApplication sharedApplication];
  [v6 _passcodeInputVerticalPaddingForOrientation:[UIApplication activeInterfaceOrientation]];
  char v17 = 0;
  char v15 = 0;
  if (v5 <= v8)
  {
    os_log_type_t v11 = objc_opt_class();
    int v16 = +[UIApplication sharedApplication];
    char v15 = 1;
    [v11 _passcodeInputVerticalPaddingForOrientation:[UIApplication activeInterfaceOrientation]];
    double v10 = v12;
  }
  else
  {
    id v18 = [*(id *)(a1 + 32) contentViewTopConstraint];
    char v17 = 1;
    [v18 constant];
    double v10 = v9 + a2;
  }
  id v13 = [*(id *)(a1 + 32) contentViewTopConstraint];
  [v13 setConstant:v10];

  if (v15) {
  if (v17)
  }

  id v14 = [*(id *)(a1 + 32) view];
  [v14 layoutIfNeeded];
}

void sub_1001E5270(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] passcodeManager];
  [v3 acceptWeakPasscode:0];

  objc_storeStrong(location, 0);
}

void sub_1001E52E0(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v7;
    sub_10004B24C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User accepted weak passcode", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  id v5 = [(objc_class *)a1[4].isa passcodeManager];
  [v5 acceptWeakPasscode:1];

  objc_storeStrong(location, 0);
}

void sub_1001E573C(NSObject *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    id v3 = oslog[0];
    os_log_type_t v4 = v6;
    sub_10004B24C(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "User opted out of passcode", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  [(objc_class *)a1[4].isa _finishedWithPasscode:0];
  objc_storeStrong(location, 0);
}

void sub_1001E6118(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] passcodeManager];
  [v3 setNumericPasscodeEntry:0];

  id v4 = [a1[4] passcodeManager];
  [v4 setSimplePasscodeEntryLength:0];

  [a1[4] _commitPasscodeEntryTypeChange];
  objc_storeStrong(location, 0);
}

void sub_1001E61B8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] passcodeManager];
  [v3 setNumericPasscodeEntry:1];

  id v4 = [a1[4] passcodeManager];
  [v4 setSimplePasscodeEntryLength:0];

  [a1[4] _commitPasscodeEntryTypeChange];
  objc_storeStrong(location, 0);
}

void sub_1001E625C(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] passcodeManager];
  [v3 setNumericPasscodeEntry:1];

  id v4 = [a1[4] passcodeManager];
  [v4 setSimplePasscodeEntryLength:6];

  [a1[4] _commitPasscodeEntryTypeChange];
  objc_storeStrong(location, 0);
}

void sub_1001E6300(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v3 = [a1[4] passcodeManager];
  [v3 setNumericPasscodeEntry:1];

  id v4 = [a1[4] passcodeManager];
  [v4 setSimplePasscodeEntryLength:4];

  [a1[4] _commitPasscodeEntryTypeChange];
  objc_storeStrong(location, 0);
}

void sub_1001E63A4(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _showSkipPasscodeAlert];
  objc_storeStrong(location, 0);
}

BOOL sub_1001E65CC(id a1, UIView *a2, NSDictionary *a3)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v5 = 0;
  objc_storeStrong(&v5, a3);
  objc_opt_class();
  LOBYTE(a3) = objc_opt_isKindOfClass();
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
  return a3 & 1;
}

void sub_1001E6CAC(id a1)
{
  attr[2] = (dispatch_queue_attr_t)a1;
  attr[1] = (dispatch_queue_attr_t)a1;
  attr[0] = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v1 = dispatch_queue_create("Setup Catalyst Queue", attr[0]);
  CATSetCatalystQueue();

  id v2 = objc_alloc_init(BuddyDeviceManagementSupport);
  id v3 = (void *)qword_100321F28;
  qword_100321F28 = (uint64_t)v2;

  objc_storeStrong((id *)attr, 0);
}

void sub_1001E703C(uint64_t a1, uint64_t a2)
{
  id v3 = (id *)(a2 + 40);
  id v2 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);

  objc_storeStrong(v3, 0);
}

void sub_1001E7080(uint64_t a1)
{
}

void sub_1001E708C(uint64_t a1)
{
}

void sub_1001E7364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, _Unwind_Exception *exception_object, id location)
{
}

uint64_t sub_1001E7390(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1001E73D8(uint64_t a1, char a2)
{
  uint64_t v32 = a1;
  char v31 = a2;
  uint64_t v30 = a1;
  int v29 = 2;
  if (a2)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10005A060(buf, *(_DWORD *)(a1 + 64));
      _os_log_impl((void *)&_mh_execute_header, oslog, v27, "Skip keys loaded in %i attempts", buf, 8u);
    }
    objc_storeStrong((id *)&oslog, 0);
    [*(id *)(a1 + 32) setDidFetchSkipKeysSuccessfully:1];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else if (*(_DWORD *)(a1 + 64) == 2)
  {
    os_log_t v26 = (os_log_t)(id)_BYLoggingFacility();
    char v25 = 16;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      id v3 = v26;
      os_log_type_t v4 = v25;
      sub_10004B24C(v24);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Abort loading skip keys. Max retry attempt reached.", v24, 2u);
    }
    objc_storeStrong((id *)&v26, 0);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    os_log_t v23 = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v22 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      sub_10005A060(v33, *(_DWORD *)(a1 + 64));
      _os_log_debug_impl((void *)&_mh_execute_header, v23, v22, "Retry loading skip keys: %i", v33, 8u);
    }
    objc_storeStrong((id *)&v23, 0);
    id location = objc_loadWeakRetained((id *)(a1 + 56));
    if (location)
    {
      [location _delayBetweenLoadSkipKeysRetriesInSeconds];
      dispatch_time_t v6 = dispatch_time(0, (uint64_t)(float)(v5 * 1000000000.0));
      os_log_type_t v7 = *((void *)location + 4);
      dispatch_block_t block = _NSConcreteStackBlock;
      int v14 = -1073741824;
      int v15 = 0;
      int v16 = sub_1001E778C;
      char v17 = &unk_1002B4B88;
      id v18 = *(id *)(a1 + 32);
      int v20 = *(_DWORD *)(a1 + 64);
      id v19 = *(id *)(a1 + 48);
      dispatch_after(v6, v7, &block);
      objc_storeStrong(&v19, 0);
      objc_storeStrong(&v18, 0);
    }
    else
    {
      os_log_t v12 = (os_log_t)(id)_BYLoggingFacility();
      char v11 = 16;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        double v8 = v12;
        os_log_type_t v9 = v11;
        sub_10004B24C(v10);
        _os_log_error_impl((void *)&_mh_execute_header, v8, v9, "Abort loading skip keys. Self not found", (uint8_t *)v10, 2u);
      }
      objc_storeStrong((id *)&v12, 0);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    objc_storeStrong(&location, 0);
  }
}

id sub_1001E778C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadSkipKeysWithCurrentTry:(*(_DWORD *)(a1 + 48) + 1) completion:*(void *)(a1 + 40) a1:a1];
}

void sub_1001E78D4(uint64_t a1, void *a2)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = (id)a1;
  id v3 = [*(id *)(a1 + 32) skipKeysQueue];
  dispatch_block_t block = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  os_log_type_t v7 = sub_1001E7A08;
  double v8 = &unk_1002B12F0;
  id v9 = *(id *)(a1 + 32);
  v10[0] = location[0];
  dispatch_sync(v3, &block);

  if (*(void *)(a1 + 40)) {
    (*(void (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), location[0] != 0);
  }
  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001E7A08(uint64_t a1)
{
}

void sub_1001E7C70(uint64_t a1)
{
}

void sub_1001EC310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  objc_destroyWeak((id *)(v17 - 56));
  _Unwind_Resume(a1);
}

void sub_1001EC350(id *a1)
{
  id location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 5);
  if (location[0])
  {
    [location[0] additionViewControllerCompleted];
    id v2 = [a1[4] multilingualFlowManager];
    [v2 setDidMakeSelection:1];
  }
  objc_storeStrong(location, 0);
}

id sub_1001EC6D8(id a1, BuddyMultilingualDisplayableViewModel *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v2 = [location[0] identifier];
  objc_storeStrong(location, 0);

  return v2;
}

void sub_1001ED814(uint64_t a1)
{
  [*(id *)(a1 + 32) loadViewIfNeeded:a1, a1];
  if ([*(id *)(a1 + 40) connectionType] == (id)1)
  {
    id v2 = [*(id *)(a1 + 32) headerView];
    id v3 = +[NSBundle mainBundle];
    id v4 = +[UIDevice modelSpecificLocalizedStringKeyForKey:@"PROGRESS_DETAIL_WIRED"];
  }
  else
  {
    id v2 = [*(id *)(a1 + 32) headerView];
    id v3 = +[NSBundle mainBundle];
    id v4 = +[UIDevice modelSpecificLocalizedStringKeyForKey:@"PROGRESS_DETAIL_WIRELESS"];
  }
  int v5 = [(NSBundle *)v3 localizedStringForKey:v4 value:&stru_1002B4E18 table:@"Migration"];
  [v2 setDetailText:v5];
}

id sub_1001EDB04(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDeviceTransferProgress:*(void *)(a1 + 40) a1, a1];
}

void sub_1001EDCE0(id a1)
{
  dispatch_queue_t v1 = objc_alloc_init(BYDevice);
  id v2 = (void *)qword_100321F50;
  qword_100321F50 = (uint64_t)v1;
}

uint64_t sub_1001EE0D8()
{
  id v3 = (uint64_t (*)(void))sub_1001EE4CC();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    dispatch_queue_t v1 = +[NSString stringWithUTF8String:"BOOL BYSBSIsSystemApertureAvailable(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BYDevice.m", 18, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  return v3() & 1;
}

uint64_t sub_1001EE380()
{
  if (!qword_100321F40) {
    sub_1001EE438();
  }
  return qword_100321F40;
}

uint64_t sub_1001EE438()
{
  uint64_t result = _sl_dlopen();
  qword_100321F40 = result;
  return result;
}

uint64_t sub_1001EE4CC()
{
  uint64_t v9 = 0;
  double v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321F48;
  uint64_t v13 = qword_100321F48;
  if (!qword_100321F48)
  {
    id v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_1001EE5CC;
    int v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001EE5CC((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001EE5CC(uint64_t a1)
{
  id v2 = (void *)sub_1001EE638();
  uint64_t result = dlsym(v2, "SBSIsSystemApertureAvailable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321F48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1001EE638()
{
  uint64_t v3 = sub_1001EE380();
  if (!v3)
  {
    uint64_t v0 = +[NSAssertionHandler currentHandler];
    dispatch_queue_t v1 = +[NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BYDevice.m", 17, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

void sub_1001EE7FC(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_100321F78;
  qword_100321F78 = v1;
}

id sub_1001EEC04()
{
  uint64_t v9 = 0;
  double v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321F60;
  uint64_t v13 = qword_100321F60;
  if (!qword_100321F60)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_1001EF274;
    int v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001EF274(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001EF090()
{
  uint64_t v9 = 0;
  double v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321F70;
  uint64_t v13 = qword_100321F70;
  if (!qword_100321F70)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    int v5 = sub_1001EF634;
    int v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001EF634(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

void sub_1001EF274(NSAssertionHandler *a1)
{
  sub_1001EF3B8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("CDPAccount");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getCDPAccountClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BYSecurityInterface.m", 20, @"Unable to find class %s", "CDPAccount" file lineNumber description];

    __break(1u);
  }
  qword_100321F60 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001EF3B8()
{
  if (!sub_1001EF4E8())
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *CoreCDPLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BYSecurityInterface.m", 18, @"%s", 0 file lineNumber description];

    __break(1u);
  }
}

uint64_t sub_1001EF4E8()
{
  if (!qword_100321F68) {
    sub_1001EF5A0();
  }
  return qword_100321F68;
}

uint64_t sub_1001EF5A0()
{
  uint64_t result = _sl_dlopen();
  qword_100321F68 = result;
  return result;
}

void sub_1001EF634(NSAssertionHandler *a1)
{
  sub_1001EF3B8();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("CDPStateController");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getCDPStateControllerClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BYSecurityInterface.m", 21, @"Unable to find class %s", "CDPStateController" file lineNumber description];

    __break(1u);
  }
  qword_100321F70 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

void sub_1001F0220(id *a1, char a2)
{
  int v16 = a1;
  char v15 = a2;
  int v14 = a1;
  int v3 = &_dispatch_main_q;
  int v4 = _NSConcreteStackBlock;
  int v5 = -1073741824;
  int v6 = 0;
  os_log_type_t v7 = sub_1001F0370;
  uint64_t v8 = &unk_1002B4CB0;
  id v9 = a1[4];
  char v13 = v15 & 1;
  id v10 = a1[5];
  id v11 = a1[6];
  id v12 = a1[7];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
}

void sub_1001F0370(uint64_t a1)
{
  os_log_t oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:@"beta re-enroll spinner"];
  id v2 = [*(id *)(a1 + 32) view];
  id v3 = [v2 window];
  [v3 setUserInteractionEnabled:1];

  if (*(unsigned char *)(a1 + 64) & 1) != 0 || ([*(id *)(a1 + 32) fakeBetaReEnrollment])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = oslog[0];
      os_log_type_t v5 = v15;
      sub_10004B24C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beta Re-Enroll did succeed", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    id v6 = [*(id *)(a1 + 32) softwareUpdateCache];
    [v6 reset];

    id v7 = [*(id *)(a1 + 32) settingsManager];
    [v7 setSeedEnrollmentProgramName:*(void *)(a1 + 40) assetAudience:*(void *)(a1 + 48) programID:*(void *)(a1 + 56)];

    id v8 = [*(id *)(a1 + 32) delegate];
    [v8 flowItemDone:*(void *)(a1 + 32) nextItem:0];
  }
  else
  {
    os_log_t v13 = (os_log_t)(id)_BYLoggingFacility();
    char v12 = 16;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v9 = v13;
      os_log_type_t v10 = v12;
      sub_10004B24C(v11);
      _os_log_error_impl((void *)&_mh_execute_header, v9, v10, "Beta Re-Enroll did fail", (uint8_t *)v11, 2u);
    }
    objc_storeStrong((id *)&v13, 0);
    [*(id *)(a1 + 32) _presentReEnrollFailureAlert];
  }
}

void sub_1001F0CB0(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _enrollTapped:a1[4]];
  objc_storeStrong(location, 0);
}

void sub_1001F0D04(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _recordAnalyticsEventForEnrollment:0];
  id v3 = [a1[4] delegate];
  [v3 flowItemDone:a1[4] nextItem:0];

  objc_storeStrong(location, 0);
}

void sub_1001F0D84(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _enrollTapped:a1[4]];
  objc_storeStrong(location, 0);
}

void sub_1001F0DD8(id *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  [a1[4] _recordAnalyticsEventForEnrollment:0];
  id v3 = [a1[4] miscState];
  id v4 = [v3 migrationManager];
  unsigned __int8 v5 = [v4 willMigrate];

  if (v5)
  {
    id v6 = [a1[4] miscState];
    id v7 = [v6 migrationManager];
    [v7 reset];
  }
  id v8 = [a1[4] delegate];
  id v9 = [v8 popToBuddyControllerWithClass:objc_opt_class() animated:1];

  objc_storeStrong(location, 0);
}

void sub_1001F1080(id a1, UIAlertAction *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1001F135C(uint64_t a1)
{
  uint64_t v87 = a1;
  uint64_t v86 = a1;
  id v2 = [*(id *)(a1 + 32) existingSettings];
  id v3 = [v2 backupMetadata];
  [*(id *)(a1 + 32) setBackupMetadata:v3];

  id v4 = [*(id *)(a1 + 32) backupMetadata];
  char v84 = 0;
  char v82 = 0;
  char v80 = 0;
  BOOL v5 = 0;
  if (!v4)
  {
    id v85 = [*(id *)(a1 + 32) proximitySetupController];
    char v84 = 1;
    BOOL v5 = 0;
    if ([v85 hasAppliedSettings])
    {
      id v83 = [*(id *)(a1 + 32) proximitySetupController];
      char v82 = 1;
      id v81 = [v83 backupMetadataFromTerminatedConnection];
      char v80 = 1;
      BOOL v5 = v81 != 0;
    }
  }
  if (v80) {

  }
  if (v82) {
  if (v84)
  }

  if (v5)
  {
    id location = (id)_BYLoggingFacility();
    char v78 = 2;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEBUG))
    {
      id v6 = location;
      os_log_type_t v7 = v78;
      sub_10004B24C(buf);
      _os_log_debug_impl((void *)&_mh_execute_header, v6, v7, "Beta Re-Enroll using backup metadata from terminated proximity connection", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    id v8 = [*(id *)(a1 + 32) proximitySetupController];
    id v9 = [v8 backupMetadataFromTerminatedConnection];
    [*(id *)(a1 + 32) setBackupMetadata:v9];
  }
  char v76 = 0;
  id v10 = [*(id *)(a1 + 32) backupMetadata];
  char v74 = 0;
  unsigned __int8 v11 = 0;
  if ([v10 hasSeedEnrollmentProgram])
  {
    id v75 = [*(id *)(a1 + 32) backupMetadata];
    char v74 = 1;
    unsigned __int8 v11 = [v75 hasSeedEnrollmentAssetAudience];
  }
  if (v74) {

  }
  if (v11)
  {
    id v12 = [*(id *)(a1 + 32) seedProgramManager];
    id v73 = [v12 currentEnrollmentMetadata];

    id v13 = [v73 bySeedProgramManager_valueForProgramKey];
    id v14 = [*(id *)(a1 + 32) backupMetadata];
    id v15 = [v14 seedEnrollmentProgram];
    char v71 = 0;
    char v69 = 0;
    char v67 = 0;
    char v16 = 1;
    if ([v13 isEqualToString:v15])
    {
      id v72 = [v73 bySeedProgramManager_valueForAssetAudienceKey];
      char v71 = 1;
      id v70 = [*(id *)(a1 + 32) backupMetadata];
      char v69 = 1;
      id v68 = [v70 seedEnrollmentAssetAudience];
      char v67 = 1;
      char v16 = [v72 isEqualToString:] ^ 1;
    }
    if (v67) {

    }
    if (v69) {
    if (v71)
    }

    if (v16)
    {
      os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
      char v65 = 2;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = oslog;
        os_log_type_t v18 = v65;
        sub_10004B24C(v64);
        _os_log_debug_impl((void *)&_mh_execute_header, v17, v18, "Beta Re-Enroll: Backup has enrollment that we lack", v64, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      char v76 = 1;
    }
    objc_storeStrong(&v73, 0);
  }
  if ((v76 & 1) == 0)
  {
    id v19 = [*(id *)(a1 + 32) buddyPreferencesInternal];
    [*(id *)(a1 + 32) setFakeBetaReEnrollment:[v19 BOOLForKey:@"FakeBetaReEnrollment"] & 1];

    char v76 = [*(id *)(a1 + 32) fakeBetaReEnrollment] & 1;
  }
  if (v76)
  {
    char v63 = 0;
    id v20 = [*(id *)(a1 + 32) miscState];
    id v62 = [v20 migrationManager];

    if ([v62 willMigrate])
    {
      if (([v62 forceUpdateToMigrate] & 1) != 0
        || ([v62 requiresUpdateToMigrate] & 1) != 0)
      {
        char v63 = 1;
        id v21 = [*(id *)(a1 + 32) proximitySetupController];
        id v22 = [v21 productVersion];
        [*(id *)(a1 + 32) setSourceSystemVersion:v22];
      }
      id v23 = [*(id *)(a1 + 32) proximitySetupController];
      id v24 = [v23 deviceClass];
      [*(id *)(a1 + 32) setSourceDeviceClass:v24];

      os_log_t v61 = (os_log_t)(id)_BYLoggingFacility();
      os_log_type_t v60 = OS_LOG_TYPE_DEBUG;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        char v25 = +[NSNumber numberWithBool:v63 & 1];
        sub_10004BB7C((uint64_t)v89, (uint64_t)v25);
        _os_log_debug_impl((void *)&_mh_execute_header, v61, v60, "Beta Re-Enroll: Migration needs software update? %{public}@", v89, 0xCu);
      }
      objc_storeStrong((id *)&v61, 0);
    }
    else
    {
      id v26 = [*(id *)(a1 + 32) pendingRestoreState];
      id v27 = [v26 backupItem];

      if (v27)
      {
        id v28 = [*(id *)(a1 + 32) pendingRestoreState];
        char v58 = 0;
        char v56 = 0;
        char v29 = 1;
        if (([v28 forceSoftwareUpdateRestore] & 1) == 0)
        {
          id v59 = [*(id *)(a1 + 32) pendingRestoreState];
          char v58 = 1;
          id v57 = [v59 backupItem];
          char v56 = 1;
          char v29 = [v57 isCompatible] ^ 1;
        }
        if (v56) {

        }
        if (v58) {
        if (v29)
        }
        {
          char v63 = 1;
          id v30 = [*(id *)(a1 + 32) pendingRestoreState];
          id v31 = [v30 backupItem];
          id v32 = [v31 snapshot];
          id v33 = [v32 systemVersion];
          [*(id *)(a1 + 32) setSourceSystemVersion:v33];
        }
        id v34 = [*(id *)(a1 + 32) pendingRestoreState];
        id v35 = [v34 backupItem];
        id v36 = [v35 backup];
        id v37 = [v36 deviceClass];
        [*(id *)(a1 + 32) setSourceDeviceClass:v37];

        os_log_t v55 = (os_log_t)(id)_BYLoggingFacility();
        os_log_type_t v54 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          id v38 = +[NSNumber numberWithBool:v63 & 1];
          sub_10004BB7C((uint64_t)v88, (uint64_t)v38);
          _os_log_debug_impl((void *)&_mh_execute_header, v55, v54, "Beta Re-Enroll: Restore needs software update? %{public}@", v88, 0xCu);
        }
        objc_storeStrong((id *)&v55, 0);
      }
      else
      {
        id v39 = [*(id *)(a1 + 32) proximitySetupController];
        id v40 = [v39 deviceClass];
        [*(id *)(a1 + 32) setSourceDeviceClass:v40];
      }
    }
    if ((v63 & 1) == 0)
    {
      id v41 = [*(id *)(a1 + 32) buddyPreferencesInternal];
      unsigned __int8 v42 = [v41 BOOLForKey:@"FakeRequireBetaReEnrollment"];

      if (v42)
      {
        char v63 = 1;
        [*(id *)(a1 + 32) setSourceSystemVersion:@"99.9"];
        uint64_t v43 = (void *)MGCopyAnswer();
        [*(id *)(a1 + 32) setSourceDeviceClass:v43];
      }
    }
    if (v63)
    {
      id v44 = [*(id *)(a1 + 32) softwareUpdateCache];
      uint64_t v45 = _NSConcreteStackBlock;
      int v46 = -1073741824;
      int v47 = 0;
      uint64_t v48 = sub_1001F1E68;
      uint64_t v49 = &unk_1002B3538;
      id v50 = v62;
      id v51 = *(id *)(a1 + 32);
      id v52 = *(id *)(a1 + 40);
      char v53 = v76 & 1;
      [v44 scanUsingCache:1 withCompletion:&v45];

      objc_storeStrong(&v52, 0);
      objc_storeStrong(&v51, 0);
      objc_storeStrong(&v50, 0);
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    objc_storeStrong(&v62, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001F1E68(uint64_t a1, void *a2, void *a3, void *a4)
{
  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  id v22 = 0;
  objc_storeStrong(&v22, a3);
  id v21 = 0;
  objc_storeStrong(&v21, a4);
  uint64_t v20 = a1;
  char v19 = 0;
  if (v22)
  {
    if ([*(id *)(a1 + 32) willMigrate])
    {
      id v7 = [*(id *)(a1 + 40) sourceSystemVersion];
      id v8 = [v22 productVersion];
      char v19 = +[BuddyMigrationCapability supportsMigrationFromProductVersion:v7 toProductVersion:v8];
    }
    else
    {
      id v9 = [*(id *)(a1 + 40) pendingRestoreState];
      id v10 = [v9 backupItem];
      id v11 = [v22 productVersion];
      char v19 = [v10 isCompatibleWithUpdateToSystemVersion:v11] & 1;
    }
  }
  if (v19)
  {
    id v12 = [*(id *)(a1 + 40) buddyPreferencesInternal];
    unsigned __int8 v13 = [v12 BOOLForKey:@"FakeRequireBetaReEnrollment"];

    if (v13) {
      char v19 = 0;
    }
  }
  if ((v19 & 1) == 0)
  {
    [*(id *)(a1 + 40) setRequiresBetaReEnrollment:1];
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    char v17 = 2;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
    {
      id v14 = oslog;
      os_log_type_t v15 = v17;
      sub_10004B24C(v16);
      _os_log_debug_impl((void *)&_mh_execute_header, v14, v15, "Beta Re-Enroll: Re-enrollment required", (uint8_t *)v16, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_1001F482C(id a1)
{
  id location[2] = a1;
  location[1] = a1;
  v14[0] = objc_opt_class();
  v14[1] = objc_opt_class();
  void v14[2] = objc_opt_class();
  id v14[3] = objc_opt_class();
  id v14[4] = objc_opt_class();
  v14[5] = objc_opt_class();
  v14[6] = objc_opt_class();
  uint8_t v14[7] = objc_opt_class();
  v14[8] = objc_opt_class();
  v14[9] = objc_opt_class();
  v14[10] = objc_opt_class();
  v14[11] = objc_opt_class();
  v14[12] = objc_opt_class();
  v14[13] = objc_opt_class();
  v14[14] = objc_opt_class();
  v14[15] = objc_opt_class();
  uint8_t v14[16] = objc_opt_class();
  v14[17] = objc_opt_class();
  v14[18] = objc_opt_class();
  v14[19] = objc_opt_class();
  v14[20] = objc_opt_class();
  v14[21] = objc_opt_class();
  v14[22] = objc_opt_class();
  v14[23] = objc_opt_class();
  uint8_t v14[24] = objc_opt_class();
  v14[25] = objc_opt_class();
  v14[26] = objc_opt_class();
  v14[27] = objc_opt_class();
  v14[28] = objc_opt_class();
  v14[29] = objc_opt_class();
  v14[30] = objc_opt_class();
  v14[31] = objc_opt_class();
  v14[32] = objc_opt_class();
  v14[33] = objc_opt_class();
  v14[34] = objc_opt_class();
  v14[35] = objc_opt_class();
  v14[36] = objc_opt_class();
  v14[37] = objc_opt_class();
  v14[38] = objc_opt_class();
  v14[39] = objc_opt_class();
  v14[40] = objc_opt_class();
  v14[41] = objc_opt_class();
  v14[42] = objc_opt_class();
  v14[43] = objc_opt_class();
  v14[44] = objc_opt_class();
  v14[45] = objc_opt_class();
  v14[46] = objc_opt_class();
  v14[47] = objc_opt_class();
  v14[48] = objc_opt_class();
  v14[49] = objc_opt_class();
  v14[50] = objc_opt_class();
  v14[51] = objc_opt_class();
  v14[52] = objc_opt_class();
  v14[53] = objc_opt_class();
  v14[54] = objc_opt_class();
  v14[55] = objc_opt_class();
  v14[56] = objc_opt_class();
  v14[57] = objc_opt_class();
  v14[58] = objc_opt_class();
  v14[59] = objc_opt_class();
  v14[60] = objc_opt_class();
  v14[61] = objc_opt_class();
  v14[62] = objc_opt_class();
  v14[63] = objc_opt_class();
  v14[64] = objc_opt_class();
  v14[65] = objc_opt_class();
  v14[66] = objc_opt_class();
  v14[67] = objc_opt_class();
  v14[68] = objc_opt_class();
  v14[69] = objc_opt_class();
  v14[70] = objc_opt_class();
  v14[71] = objc_opt_class();
  v14[72] = objc_opt_class();
  v14[73] = objc_opt_class();
  v14[74] = objc_opt_class();
  v14[75] = objc_opt_class();
  v14[76] = objc_opt_class();
  v14[77] = objc_opt_class();
  v14[78] = objc_opt_class();
  v14[79] = objc_opt_class();
  v14[80] = objc_opt_class();
  v14[81] = objc_opt_class();
  v14[82] = objc_opt_class();
  v14[83] = objc_opt_class();
  v14[84] = objc_opt_class();
  v14[85] = objc_opt_class();
  v14[86] = objc_opt_class();
  v14[87] = objc_opt_class();
  v14[88] = objc_opt_class();
  v14[89] = objc_opt_class();
  v14[90] = objc_opt_class();
  v14[91] = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:v14 count:92];
  location[0] = [(NSArray *)v1 mutableCopy];

  memset(__b, 0, sizeof(__b));
  id v2 = [location[0] copy];
  id v3 = [v2 countByEnumeratingWithState:__b objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)__b[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(void *)__b[2] != v4) {
          objc_enumerationMutation(v2);
        }
        id v11 = 0;
        id v11 = *(id *)(__b[1] + 8 * i);
        if ([v11 isSubclassOfClass:objc_opt_class()])
        {
          id v6 = location[0];
          id v7 = [v11 allowedFlowItems];
          [v6 addObjectsFromArray:v7];
        }
      }
      id v3 = [v2 countByEnumeratingWithState:__b objects:v13 count:16];
    }
    while (v3);
  }

  id v8 = [location[0] copy];
  id v9 = (void *)qword_100321F88;
  qword_100321F88 = (uint64_t)v8;

  objc_storeStrong(location, 0);
}

void sub_1001F6378(id a1)
{
  uint64_t v1 = objc_alloc_init(BuddyActivationConfiguration);
  id v2 = (void *)qword_100321FA8;
  qword_100321FA8 = (uint64_t)v1;
}

id sub_1001F66F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setInitialActivationState:((unint64_t)[*(id *)(a1 + 32) isActivated] & 1)];
}

void sub_1001F6848(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegates:a1, a1];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1001F69AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegates:a1, a1];
  [v2 removeObject:*(void *)(a1 + 40)];
}

id sub_1001F6ADC(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyDelegatesConfigurationChanged:*(unsigned char *)(a1 + 40) & 1 isActivated:(unint64_t)[*(id *)(a1 + 32) isActivated:a1, a1] & 1];
}

void sub_1001F6C14(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v8 = a1;
  memset(v6, 0, sizeof(v6));
  id v2 = [*(id *)(a1 + 32) delegates];
  id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v6[2];
    do
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(void *)v6[2] != v4) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(v6[1] + 8 * i);
        [v7 activationConfigurationChanged:*(unsigned char *)(a1 + 40) & 1 isActivated:*(unsigned char *)(a1 + 41) & 1];
      }
      id v3 = [v2 countByEnumeratingWithState:v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1001F708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
}

uint64_t sub_1001F70A8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8) & 1;
  return result;
}

void sub_1001F77B0(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v10 = a1;
  char v9 = 0;
  char v9 = [*(id *)(a1 + 32) isActivated] & 1;
  id v2 = [*(id *)(a1 + 32) activationStateQueue];
  id v3 = _NSConcreteStackBlock;
  uint64_t v4 = 3221225472;
  BOOL v5 = sub_1001F78B4;
  id v6 = &unk_1002B1130;
  id v7 = *(id *)(a1 + 32);
  char v8 = v9 & 1;
  dispatch_sync(v2, &v3);

  [*(id *)(a1 + 32) notifyDelegatesConfigurationChanged:1 v3, v4, v5, v6];
  objc_storeStrong(&v7, 0);
}

id sub_1001F78B4(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v4 = a1;
  LOBYTE(v2) = 0;
  if (*(unsigned char *)(a1 + 40)) {
    unsigned int v2 = [*(id *)(a1 + 32) initialActivationState:a1] ^ 1;
  }
  return [*(id *)(a1 + 32) setHasActivated:v2 & 1 v4, v5];
}

id sub_1001F7958(uint64_t a1, void *a2)
{
  return [a2 _activationStateChanged];
}

void sub_1001F81A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, id location)
{
}

void sub_1001F81D0(id *a1, uint64_t a2, id obj)
{
  id v37 = a1;
  uint64_t v36 = a2;
  id location = 0;
  objc_storeStrong(&location, obj);
  v34[1] = a1;
  v34[0] = objc_loadWeakRetained(a1 + 5);
  id v4 = [v34[0] miscState];
  [v4 setActivationPlanRequest:0];

  if (v36 != 2)
  {
    os_log_t oslog = (os_log_t)(id)_BYLoggingFacility();
    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      char v30 = 0;
      char v28 = 0;
      if (_BYIsInternalInstall())
      {
        uint64_t v5 = (NSString *)location;
      }
      else if (location)
      {
        id v31 = [location domain];
        char v30 = 1;
        uint64_t v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"<Error domain: %@, code %ld>", v31, [location code]);
        id v29 = v5;
        char v28 = 1;
      }
      else
      {
        uint64_t v5 = 0;
      }
      sub_10004BB7C((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v32, "Failed to add cellular plan: %{public}@", buf, 0xCu);
      if (v28) {

      }
      if (v30) {
    }
      }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[4]) {
      (*((void (**)(void))a1[4] + 2))();
    }
LABEL_24:
    int v24 = 0;
    goto LABEL_25;
  }
  os_log_t v27 = (os_log_t)(id)_BYLoggingFacility();
  os_log_type_t v26 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = v27;
    os_log_type_t v7 = v26;
    sub_10004B24C(v25);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully added cellular plan", v25, 2u);
  }
  objc_storeStrong((id *)&v27, 0);
  id v8 = [v34[0] miscState];
  unsigned __int8 v9 = [v8 skipActivationForActivationPlanRequest];

  if ((v9 & 1) == 0)
  {
    id v10 = sub_1001F8668();
    id v11 = sub_1001F8780();
    id v38 = v11;
    id v39 = &off_1002C19E8;
    id v12 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    id v13 = [v10 flowWithOptions:v12];
    [v34[0] setSetupFlow:v13];

    id v14 = [v34[0] setupFlow];
    LOBYTE(v13) = v14 == 0;

    if (v13)
    {
      (*((void (**)(void))a1[4] + 2))();
      int v24 = 1;
      goto LABEL_25;
    }
    id v15 = v34[0];
    id v16 = [v34[0] setupFlow];
    [v16 setDelegate:v15];

    id v17 = [v34[0] setupFlow];
    os_log_type_t v18 = _NSConcreteStackBlock;
    int v19 = -1073741824;
    int v20 = 0;
    id v21 = sub_1001F888C;
    id v22 = &unk_1002B26A8;
    id v23 = a1[4];
    [v17 firstViewController:&v18];

    objc_storeStrong(&v23, 0);
    goto LABEL_24;
  }
  if (a1[4]) {
    (*((void (**)(void))a1[4] + 2))();
  }
  int v24 = 1;
LABEL_25:
  objc_storeStrong(v34, 0);
  if (!v24) {
    int v24 = 0;
  }
  objc_storeStrong(&location, 0);
}

id sub_1001F8668()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 1342177280;
  int v12 = 32;
  uint64_t v8 = qword_100321FB0;
  uint64_t v13 = qword_100321FB0;
  if (!qword_100321FB0)
  {
    v2.super.Class isa = (Class)_NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_1001F8E08;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001F8E08(&v2);
  }
  id v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);

  return v0;
}

id sub_1001F8780()
{
  int v4 = (void **)sub_1001F91CC();
  if (!v4)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getTSUserInfoFlowTypeKey(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMActivationController.m", 27, @"%s", dlerror() file lineNumber description];

    __break(1u);
  }
  NSAssertionHandler v2 = *v4;

  return v2;
}

void sub_1001F888C(void *a1, void *a2)
{
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4]) {
    (*(void (**)(void, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001F8E08(NSAssertionHandler *a1)
{
  sub_1001F8F4C();
  *(void *)(*((void *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(void *)(*((void *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler];
    NSAssertionHandler v2 = +[NSString stringWithUTF8String:"Class getTSSIMSetupFlowClass(void)_block_invoke"];
    [(NSAssertionHandler *)a1 handleFailureInFunction:v2, @"BuddySIMActivationController.m", 26, @"Unable to find class %s", "TSSIMSetupFlow" file lineNumber description];

    __break(1u);
  }
  qword_100321FB0 = *(void *)(*((void *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001F8F4C()
{
  uint64_t v3 = sub_1001F9080();
  if (!v3)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v1 = +[NSString stringWithUTF8String:"void *SIMSetupSupportLibrary(void)"];
    [(NSAssertionHandler *)v0 handleFailureInFunction:v1, @"BuddySIMActivationController.m", 25, @"%s", 0 file lineNumber description];

    __break(1u);
  }
  return v3;
}

uint64_t sub_1001F9080()
{
  if (!qword_100321FB8) {
    sub_1001F9138();
  }
  return qword_100321FB8;
}

uint64_t sub_1001F9138()
{
  uint64_t result = _sl_dlopen();
  qword_100321FB8 = result;
  return result;
}

uint64_t sub_1001F91CC()
{
  uint64_t v9 = 0;
  id v10 = &v9;
  int v11 = 0x20000000;
  int v12 = 32;
  uint64_t v8 = qword_100321FC0;
  uint64_t v13 = qword_100321FC0;
  if (!qword_100321FC0)
  {
    NSAssertionHandler v2 = _NSConcreteStackBlock;
    int v3 = -1073741824;
    int v4 = 0;
    uint64_t v5 = sub_1001F92CC;
    id v6 = &unk_1002B1248;
    os_log_type_t v7 = &v9;
    sub_1001F92CC((uint64_t)&v2);
  }
  uint64_t v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001F92CC(uint64_t a1)
{
  NSAssertionHandler v2 = (void *)sub_1001F8F4C();
  uint64_t result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100321FC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t Calendar.component(_:from:)()
{
  return Calendar.component(_:from:)();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t type metadata accessor for ProductKitCatalog()
{
  return type metadata accessor for ProductKitCatalog();
}

uint64_t iosmacHardware.imageName.getter()
{
  return iosmacHardware.imageName.getter();
}

uint64_t type metadata accessor for iosmacHardware()
{
  return type metadata accessor for iosmacHardware();
}

uint64_t iosmacHardware.init(_:)()
{
  return iosmacHardware.init(_:)();
}

uint64_t LockdownModeManager.setEnabled(enabled:options:completion:)()
{
  return LockdownModeManager.setEnabled(enabled:options:completion:)();
}

uint64_t LockdownModeManager.getEnabledInAccount(synchronize:completion:)()
{
  return LockdownModeManager.getEnabledInAccount(synchronize:completion:)();
}

uint64_t static LockdownModeManager.shared.getter()
{
  return static LockdownModeManager.shared.getter();
}

uint64_t LockdownModeManager.enabled.getter()
{
  return LockdownModeManager.enabled.getter();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
}

uint64_t GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter()
{
  return GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability();
}

uint64_t GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)()
{
  return GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Parameters()
{
  return type metadata accessor for GenerativeModelsAvailability.Parameters();
}

uint64_t GenerativeModelsAvailability.availability.getter()
{
  return GenerativeModelsAvailability.availability.getter();
}

uint64_t static GenerativeModelsAvailability.shouldBeShown(inSetupAssistantReturning:)()
{
  return static GenerativeModelsAvailability.shouldBeShown(inSetupAssistantReturning:)();
}

uint64_t static GenerativeModelsAvailability.current(parameters:)()
{
  return static GenerativeModelsAvailability.current(parameters:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability()
{
  return type metadata accessor for GenerativeModelsAvailability();
}

uint64_t AvailabilityClient.init()()
{
  return AvailabilityClient.init()();
}

uint64_t type metadata accessor for AvailabilityClient()
{
  return type metadata accessor for AvailabilityClient();
}

uint64_t static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)()
{
  return static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)();
}

uint64_t static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)()
{
  return static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)();
}

uint64_t type metadata accessor for ViewControllerSpinnerManager()
{
  return type metadata accessor for ViewControllerSpinnerManager();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UTType._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t Logger.purpleBuddyGeneral.unsafeMutableAddressor()
{
  return Logger.purpleBuddyGeneral.unsafeMutableAddressor();
}

uint64_t Logger.purpleBuddyAppearance.unsafeMutableAddressor()
{
  return Logger.purpleBuddyAppearance.unsafeMutableAddressor();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.perform()()
{
  return dispatch thunk of DispatchWorkItem.perform()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return OS_dispatch_queue.sync<A>(flags:execute:)();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t BFFIsiPad()
{
  return _BFFIsiPad();
}

uint64_t BFFIsiPhone()
{
  return _BFFIsiPhone();
}

uint64_t BFFPointImageOfColor()
{
  return _BFFPointImageOfColor();
}

uint64_t BFFRoundToPixel()
{
  return _BFFRoundToPixel();
}

uint64_t BRSetMigrationStatusForDSID()
{
  return _BRSetMigrationStatusForDSID();
}

uint64_t BSFloatGreaterThanFloat()
{
  return _BSFloatGreaterThanFloat();
}

uint64_t BTDeviceSupportsHS()
{
  return _BTDeviceSupportsHS();
}

uint64_t BTLocalDeviceGetDefault()
{
  return _BTLocalDeviceGetDefault();
}

uint64_t BTLocalDeviceGetPairedDevices()
{
  return _BTLocalDeviceGetPairedDevices();
}

uint64_t BTSessionAttachWithQueue()
{
  return _BTSessionAttachWithQueue();
}

uint64_t BTSessionDetachWithQueue()
{
  return _BTSessionDetachWithQueue();
}

uint64_t BYAssistantScreenShouldBeShownInSetupAssistant()
{
  return _BYAssistantScreenShouldBeShownInSetupAssistant();
}

uint64_t BYAssistantScreenShouldRunForPHSUpgrade()
{
  return _BYAssistantScreenShouldRunForPHSUpgrade();
}

uint64_t BYIsRunningInStoreDemoMode()
{
  return _BYIsRunningInStoreDemoMode();
}

uint64_t BYMetadataFromBackup()
{
  return _BYMetadataFromBackup();
}

uint64_t BYMetadataFromDataArchive()
{
  return _BYMetadataFromDataArchive();
}

uint64_t BYObserveFinishSetupTriggers()
{
  return _BYObserveFinishSetupTriggers();
}

uint64_t BYSetLaunchSentinel()
{
  return _BYSetLaunchSentinel();
}

uint64_t BYSetupAssistantCreateAuthContext()
{
  return _BYSetupAssistantCreateAuthContext();
}

uint64_t BYSetupAssistantHasCompletedInitialRun()
{
  return _BYSetupAssistantHasCompletedInitialRun();
}

uint64_t BYStringForFlowItemDispositions()
{
  return _BYStringForFlowItemDispositions();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  return _CAFrameRateRangeMake(minimum, maximum, preferred);
}

uint64_t CATSetCatalystQueue()
{
  return _CATSetCatalystQueue();
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DMakeScale(retstr, sx, sy, sz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return _CGPathCreateCopyByTransformingPath(path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return _CGPathCreateMutable();
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  return _CGPathGetPathBoundingBox(path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

uint64_t CPIsInternalDevice()
{
  return _CPIsInternalDevice();
}

uint64_t CTCopyCurrentCalls()
{
  return _CTCopyCurrentCalls();
}

uint64_t DBSStringForDisplayZoomOption()
{
  return _DBSStringForDisplayZoomOption();
}

uint64_t DMCSetSkipBackupAttributeToItemAtPath()
{
  return _DMCSetSkipBackupAttributeToItemAtPath();
}

uint64_t IDSRegistrationControlDisableRegistrationType()
{
  return _IDSRegistrationControlDisableRegistrationType();
}

uint64_t IDSRegistrationControlEnableRegistrationType()
{
  return _IDSRegistrationControlEnableRegistrationType();
}

uint64_t IDSRegistrationControlGetStateForRegistrationType()
{
  return _IDSRegistrationControlGetStateForRegistrationType();
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MAEActivateDeviceWithError()
{
  return _MAEActivateDeviceWithError();
}

uint64_t MAECopyActivationRecordWithError()
{
  return _MAECopyActivationRecordWithError();
}

uint64_t MAECreateActivationRequestWithError()
{
  return _MAECreateActivationRequestWithError();
}

uint64_t MAECreateSessionRequestWithError()
{
  return _MAECreateSessionRequestWithError();
}

uint64_t MAEGetActivationStateWithError()
{
  return _MAEGetActivationStateWithError();
}

uint64_t MDMAuthenticationResultsCacheFilePath()
{
  return _MDMAuthenticationResultsCacheFilePath();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MGIsDeviceOneOfType()
{
  return _MGIsDeviceOneOfType();
}

uint64_t MKBDeviceLockAssertion()
{
  return _MKBDeviceLockAssertion();
}

uint64_t MKBDeviceLockAssertionConsume()
{
  return _MKBDeviceLockAssertionConsume();
}

uint64_t MKBDeviceLockAssertionPromote()
{
  return _MKBDeviceLockAssertionPromote();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t PDUDisclosureReviewViewControllerForApplicationWithVariant()
{
  return _PDUDisclosureReviewViewControllerForApplicationWithVariant();
}

uint64_t PSHasStockholmPass()
{
  return _PSHasStockholmPass();
}

uint64_t PSKeychainSyncGetCircleMembershipStatus()
{
  return _PSKeychainSyncGetCircleMembershipStatus();
}

uint64_t PSKeychainSyncGetStatus()
{
  return _PSKeychainSyncGetStatus();
}

uint64_t PSSupportsMesa()
{
  return _PSSupportsMesa();
}

uint64_t SADSUninstallIneligibleAppsWithError()
{
  return _SADSUninstallIneligibleAppsWithError();
}

uint64_t SBSAlertItemsSuppressionAssertionCreate()
{
  return _SBSAlertItemsSuppressionAssertionCreate();
}

uint64_t SBSLockDevice()
{
  return _SBSLockDevice();
}

uint64_t SBSPresentPowerDownUI()
{
  return _SBSPresentPowerDownUI();
}

uint64_t SBUIIsSystemApertureEnabled()
{
  return _SBUIIsSystemApertureEnabled();
}

uint64_t SFLicenseFilePath()
{
  return _SFLicenseFilePath();
}

uint64_t SFLocalizableWAPIStringKeyForKey()
{
  return _SFLocalizableWAPIStringKeyForKey();
}

uint64_t SFLocalizedMultipickerStringForKey()
{
  return _SFLocalizedMultipickerStringForKey();
}

uint64_t SFLocalizedStringFromTableInBundleForLanguage()
{
  return _SFLocalizedStringFromTableInBundleForLanguage();
}

uint64_t SFWarrantyFilePath()
{
  return _SFWarrantyFilePath();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

uint64_t SecItemDeleteAll()
{
  return _SecItemDeleteAll();
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return _SecTrustEvaluate(trust, result);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return _SecTrustSetAnchorCertificates(trust, anchorCertificates);
}

uint64_t TMSetAutomaticTimeZoneEnabled()
{
  return _TMSetAutomaticTimeZoneEnabled();
}

uint64_t TMSetupTime()
{
  return _TMSetupTime();
}

uint64_t TMSetupTimeZone()
{
  return _TMSetupTimeZone();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  return _UIContentSizeCategoryCompareToCategory(lhs, rhs);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return _UIContentSizeCategoryIsAccessibilityCategory(category);
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

uint64_t UIKeyboardLocalizedSWLayoutName()
{
  return _UIKeyboardLocalizedSWLayoutName();
}

void UIRectFill(CGRect rect)
{
}

uint64_t UIRectGetCenter()
{
  return _UIRectGetCenter();
}

uint64_t UIRoundToViewScale()
{
  return _UIRoundToViewScale();
}

uint64_t WiFiDeviceClientGetPower()
{
  return _WiFiDeviceClientGetPower();
}

uint64_t WiFiManagerClientAddNetwork()
{
  return _WiFiManagerClientAddNetwork();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return _WiFiManagerClientCopyDevices();
}

uint64_t WiFiManagerClientCreate()
{
  return _WiFiManagerClientCreate();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return _WiFiManagerClientScheduleWithRunLoop();
}

uint64_t WiFiManagerClientSetPower()
{
  return _WiFiManagerClientSetPower();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return _WiFiManagerClientUnscheduleFromRunLoop();
}

uint64_t WiFiNetworkCreate()
{
  return _WiFiNetworkCreate();
}

uint64_t WiFiNetworkSetPassword()
{
  return _WiFiNetworkSetPassword();
}

uint64_t _AXSCopySettingsDataBlobForBuddy()
{
  return __AXSCopySettingsDataBlobForBuddy();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return __AXSEnhanceTextLegibilityEnabled();
}

uint64_t _AXSInvertColorsEnabled()
{
  return __AXSInvertColorsEnabled();
}

uint64_t _AXSRestoreSettingsFromDataBlobForBuddy()
{
  return __AXSRestoreSettingsFromDataBlobForBuddy();
}

uint64_t _AXSSetEnhanceTextLegibilityEnabled()
{
  return __AXSSetEnhanceTextLegibilityEnabled();
}

uint64_t _BYIsInternalInstall()
{
  return __BYIsInternalInstall();
}

uint64_t _BYLoggingEnabled()
{
  return __BYLoggingEnabled();
}

uint64_t _BYLoggingFacility()
{
  return __BYLoggingFacility();
}

uint64_t _BYSignpostCreate()
{
  return __BYSignpostCreate();
}

uint64_t _BYSignpostGetNanoseconds()
{
  return __BYSignpostGetNanoseconds();
}

uint64_t _BYSignpostSubsystem()
{
  return __BYSignpostSubsystem();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFNetworkCopyPreferredLanguageCode()
{
  return __CFNetworkCopyPreferredLanguageCode();
}

uint64_t _CFPreferencesFlushCachesForIdentifier()
{
  return __CFPreferencesFlushCachesForIdentifier();
}

uint64_t _CTServerConnectionCreate()
{
  return __CTServerConnectionCreate();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return __CTServerConnectionCreateOnTargetQueue();
}

uint64_t _CTServerConnectionCreateWithIdentifier()
{
  return __CTServerConnectionCreateWithIdentifier();
}

uint64_t _CTServerConnectionGetRadioModuleIsDead()
{
  return __CTServerConnectionGetRadioModuleIsDead();
}

uint64_t _CTServerConnectionOTAActivationAssertionCreate()
{
  return __CTServerConnectionOTAActivationAssertionCreate();
}

uint64_t _CTServerConnectionSetCellularUsagePolicy()
{
  return __CTServerConnectionSetCellularUsagePolicy();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_call_unexpected(void *a1)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

float atan2f(float a1, float a2)
{
  return _atan2f(a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t certificatesFromDERCertificateDataArray()
{
  return _certificatesFromDERCertificateDataArray();
}

uint64_t container_system_group_path_for_identifier()
{
  return _container_system_group_path_for_identifier();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

void dispatch_block_perform(dispatch_block_flags_t flags, dispatch_block_t block)
{
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return _dispatch_block_wait(block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

uint64_t lockdown_connect()
{
  return _lockdown_connect();
}

uint64_t lockdown_disconnect()
{
  return _lockdown_disconnect();
}

uint64_t lockdown_set_value()
{
  return _lockdown_set_value();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  return _nw_path_monitor_create();
}

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
}

void nw_path_monitor_set_update_handler(nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

uint64_t os_variant_has_internal_ui()
{
  return _os_variant_has_internal_ui();
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

int settimeofday(const timeval *a1, const timezone *a2)
{
  return _settimeofday(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t tzlink()
{
  return _tzlink();
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_DMCDictionaryFromFile_(void *a1, const char *a2, ...)
{
  return [a1 DMCDictionaryFromFile:];
}

id objc_msgSend_DMCWriteToBinaryFile_(void *a1, const char *a2, ...)
{
  return [a1 DMCWriteToBinaryFile:];
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _[a1 HTTPBody];
}

id objc_msgSend_HTTPMethod(void *a1, const char *a2, ...)
{
  return _[a1 HTTPMethod];
}

id objc_msgSend_ISOcountryCode(void *a1, const char *a2, ...)
{
  return _[a1 ISOcountryCode];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [a1 JSONObjectWithData:options:error:];
}

id objc_msgSend_MIMEType(void *a1, const char *a2, ...)
{
  return _[a1 MIMEType];
}

id objc_msgSend_SUManager(void *a1, const char *a2, ...)
{
  return _[a1 SUManager];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 URLConfiguration];
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _[a1 URLContexts];
}

id objc_msgSend_URLForKey_(void *a1, const char *a2, ...)
{
  return [a1 URLForKey:];
}

id objc_msgSend_URLForKey_account_(void *a1, const char *a2, ...)
{
  return [a1 URLForKey:account:];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:withExtension:];
}

id objc_msgSend_URLForResource_withExtension_subdirectory_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:withExtension:subdirectory:];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__aa_setRawPassword_(void *a1, const char *a2, ...)
{
  return [a1 _aa_setRawPassword];
}

id objc_msgSend__ableToBackupBeforeRestore_softwareUpdateRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ableToBackupBeforeRestore:softwareUpdateRequired:");
}

id objc_msgSend__ableToMigrateWithPreflightInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ableToMigrateWithPreflightInformation:");
}

id objc_msgSend__accessoryViewForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryViewForFeature:");
}

id objc_msgSend__accountInfos(void *a1, const char *a2, ...)
{
  return _[a1 _accountInfos];
}

id objc_msgSend__accountToUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _accountToUpdate];
}

id objc_msgSend__accountTypeSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountTypeSelected:");
}

id objc_msgSend__activate(void *a1, const char *a2, ...)
{
  return _[a1 _activate];
}

id objc_msgSend__activateIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _activateIfNecessary];
}

id objc_msgSend__activateWithPasscode_fromObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateWithPasscode:fromObjectModel:");
}

id objc_msgSend__activationController(void *a1, const char *a2, ...)
{
  return _[a1 _activationController];
}

id objc_msgSend__activationMethodForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activationMethodForSection:");
}

id objc_msgSend__activationStateChanged(void *a1, const char *a2, ...)
{
  return _[a1 _activationStateChanged];
}

id objc_msgSend__activityIndicatorViewStyle(void *a1, const char *a2, ...)
{
  return _[a1 _activityIndicatorViewStyle];
}

id objc_msgSend__addAnalyticsEventWithSuccess_(void *a1, const char *a2, ...)
{
  return [a1 _addAnalyticsEventWithSuccess:];
}

id objc_msgSend__addButtons(void *a1, const char *a2, ...)
{
  return _[a1 _addButtons];
}

id objc_msgSend__addCachedLocalSecretToCDPContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCachedLocalSecretToCDPContext:");
}

id objc_msgSend__addCloudPlayerView(void *a1, const char *a2, ...)
{
  return _[a1 _addCloudPlayerView];
}

id objc_msgSend__addCommonHeaders_(void *a1, const char *a2, ...)
{
  return [a1 _addCommonHeaders:];
}

id objc_msgSend__addEventForClass_activeDuration_backgroundDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addEventForClass:activeDuration:backgroundDuration:");
}

id objc_msgSend__addEventForCurrentViewController(void *a1, const char *a2, ...)
{
  return _[a1 _addEventForCurrentViewController];
}

id objc_msgSend__addFeatureCardsForFeatures_(void *a1, const char *a2, ...)
{
  return [a1 _addFeatureCardsForFeatures:];
}

id objc_msgSend__addHandlersForTermsButtonsToRemoteUIController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHandlersForTermsButtonsToRemoteUIController:");
}

id objc_msgSend__addHeadersToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHeadersToRequest:");
}

id objc_msgSend__addItems_toFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addItems:toFlow:");
}

id objc_msgSend__addLearnMoreButton(void *a1, const char *a2, ...)
{
  return _[a1 _addLearnMoreButton];
}

id objc_msgSend__addMaskViewIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _addMaskViewIfNeeded];
}

id objc_msgSend__addPairForiPad(void *a1, const char *a2, ...)
{
  return _[a1 _addPairForiPad];
}

id objc_msgSend__addPairForiPhone_(void *a1, const char *a2, ...)
{
  return [a1 _addPairForiPhone:];
}

id objc_msgSend__addSBAlertItemsSupressionAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _addSBAlertItemsSupressionAssertion];
}

id objc_msgSend__addVisualPairingCodeView(void *a1, const char *a2, ...)
{
  return _[a1 _addVisualPairingCodeView];
}

id objc_msgSend__additionRowForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_additionRowForSection:");
}

id objc_msgSend__alertControllerForCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alertControllerForCellular:");
}

id objc_msgSend__allButtonsSetEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allButtonsSetEnabled:");
}

id objc_msgSend__allowSkip(void *a1, const char *a2, ...)
{
  return _[a1 _allowSkip];
}

id objc_msgSend__allowedDeviceClasses(void *a1, const char *a2, ...)
{
  return _[a1 _allowedDeviceClasses];
}

id objc_msgSend__allowedToPair(void *a1, const char *a2, ...)
{
  return _[a1 _allowedToPair];
}

id objc_msgSend__amsAccountStore(void *a1, const char *a2, ...)
{
  return _[a1 _amsAccountStore];
}

id objc_msgSend__amsStoreAccountForUsername_altDSID_(void *a1, const char *a2, ...)
{
  return [_amsStoreAccountForUsername:altDSID:];
}

id objc_msgSend__animateCursiveForTimePassed(void *a1, const char *a2, ...)
{
  return _[a1 _animateCursiveForTimePassed];
}

id objc_msgSend__animateUsingSpringWithTension_friction_interactive_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateUsingSpringWithTension:friction:interactive:animations:completion:");
}

id objc_msgSend__animatedPasscodeViewTransitionToState_animation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animatedPasscodeViewTransitionToState:animation:");
}

id objc_msgSend__animationTickForPresentationValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationTickForPresentationValue:");
}

id objc_msgSend__appendErrorInformationForInternal_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendErrorInformationForInternal:error:");
}

id objc_msgSend__appleIDControllerCompletedShouldProceed_error_(void *a1, const char *a2, ...)
{
  return [_appleIDControllerCompletedShouldProceed:error:];
}

id objc_msgSend__applicationIconImageForBundleIdentifier_format_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForBundleIdentifier:format:scale:");
}

id objc_msgSend__applyArchivedAuthorizationDecisions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyArchivedAuthorizationDecisions:");
}

id objc_msgSend__applyDataSourceSetting_forFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDataSourceSetting:forFeature:");
}

id objc_msgSend__attemptDismiss(void *a1, const char *a2, ...)
{
  return _[a1 _attemptDismiss];
}

id objc_msgSend__attemptPreheat_(void *a1, const char *a2, ...)
{
  return [a1 _attemptPreheat:];
}

id objc_msgSend__attemptRestore(void *a1, const char *a2, ...)
{
  return _[a1 _attemptRestore];
}

id objc_msgSend__authCompletedShouldProceed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authCompletedShouldProceed:error:");
}

id objc_msgSend__authWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authWithContext:completion:");
}

id objc_msgSend__authenticateAccount_(void *a1, const char *a2, ...)
{
  return [a1 _authenticateAccount:];
}

id objc_msgSend__authenticateNextAccount(void *a1, const char *a2, ...)
{
  return _[a1 _authenticateNextAccount];
}

id objc_msgSend__authenticateThenSignInNextAccount(void *a1, const char *a2, ...)
{
  return _[a1 _authenticateThenSignInNextAccount];
}

id objc_msgSend__authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithContext:completion:");
}

id objc_msgSend__authenticateWithSignInController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithSignInController:completion:");
}

id objc_msgSend__authenticateWithUsername_companionDevice_anisetteDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithUsername:companionDevice:anisetteDataProvider:completion:");
}

id objc_msgSend__authenticationContextForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 _authenticationContextForSecurityUpgrade];
}

id objc_msgSend__autoInstallAlertMessageForTimeRemaining_(void *a1, const char *a2, ...)
{
  return [a1 _autoInstallAlertMessageForTimeRemaining:];
}

id objc_msgSend__backgroundInset(void *a1, const char *a2, ...)
{
  return _[a1 _backgroundInset];
}

id objc_msgSend__backupListErrorSectionCount(void *a1, const char *a2, ...)
{
  return _[a1 _backupListErrorSectionCount];
}

id objc_msgSend__beginEventForNavigationDuration(void *a1, const char *a2, ...)
{
  return _[a1 _beginEventForNavigationDuration];
}

id objc_msgSend__beginInstall(void *a1, const char *a2, ...)
{
  return _[a1 _beginInstall];
}

id objc_msgSend__beginPostUpgradeAppleIDLoginWithUsername_password_continuationKey_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginPostUpgradeAppleIDLoginWithUsername:password:continuationKey:signInController:");
}

id objc_msgSend__beginPostUpgradeAppleIDLoginWithUsername_password_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginPostUpgradeAppleIDLoginWithUsername:password:signInController:");
}

id objc_msgSend__beginSignIn(void *a1, const char *a2, ...)
{
  return _[a1 _beginSignIn];
}

id objc_msgSend__bodyFont(void *a1, const char *a2, ...)
{
  return _[a1 _bodyFont];
}

id objc_msgSend__boldFontForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boldFontForFont:");
}

id objc_msgSend__buttonTrayInlined(void *a1, const char *a2, ...)
{
  return _[a1 _buttonTrayInlined];
}

id objc_msgSend__cacheAuthenticationResults_(void *a1, const char *a2, ...)
{
  return [a1 _cacheAuthenticationResults:];
}

id objc_msgSend__cachedAuthenticationResults(void *a1, const char *a2, ...)
{
  return _[a1 _cachedAuthenticationResults];
}

id objc_msgSend__callPresentationCompletionWithNothing(void *a1, const char *a2, ...)
{
  return _[a1 _callPresentationCompletionWithNothing];
}

id objc_msgSend__canShortCircuitGreen(void *a1, const char *a2, ...)
{
  return _[a1 _canShortCircuitGreen];
}

id objc_msgSend__canSkipAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canSkipAccount:");
}

id objc_msgSend__cancelFlow(void *a1, const char *a2, ...)
{
  return _[a1 _cancelFlow];
}

id objc_msgSend__cancelTapped_(void *a1, const char *a2, ...)
{
  return [a1 _cancelTapped:];
}

id objc_msgSend__checkActivationFailIfNotActivated_(void *a1, const char *a2, ...)
{
  return [a1 _checkActivationFailIfNotActivated];
}

id objc_msgSend__checkActivationFailIfNotActivated_isActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkActivationFailIfNotActivated:isActivated:");
}

id objc_msgSend__checkBasebandStatusBeforeActivation(void *a1, const char *a2, ...)
{
  return _[a1 _checkBasebandStatusBeforeActivation];
}

id objc_msgSend__chevronImage(void *a1, const char *a2, ...)
{
  return _[a1 _chevronImage];
}

id objc_msgSend__chevronWidth(void *a1, const char *a2, ...)
{
  return _[a1 _chevronWidth];
}

id objc_msgSend__choiceConfirmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_choiceConfirmed:");
}

id objc_msgSend__cleanUpAllNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpAllNotifications];
}

id objc_msgSend__cleanUpAppLifecycleNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpAppLifecycleNotifications];
}

id objc_msgSend__cleanUpPlayerItemNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpPlayerItemNotifications];
}

id objc_msgSend__cleanUpVideoPlayerNotificationsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpVideoPlayerNotificationsIfNeeded];
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _[a1 _cleanup];
}

id objc_msgSend__cleanupRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupRemoteUI];
}

id objc_msgSend__clearDisplayTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDisplayTimer];
}

id objc_msgSend__clearImage(void *a1, const char *a2, ...)
{
  return _[a1 _clearImage];
}

id objc_msgSend__clearReturnToServiceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearReturnToServiceTimer];
}

id objc_msgSend__clearTicketAcceptedTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearTicketAcceptedTimer];
}

id objc_msgSend__clearWaitingForBasebandTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearWaitingForBasebandTimer];
}

id objc_msgSend__clearWifiTimeoutTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearWifiTimeoutTimer];
}

id objc_msgSend__cloudConfigManager(void *a1, const char *a2, ...)
{
  return _[a1 _cloudConfigManager];
}

id objc_msgSend__commitAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _commitAnalytics];
}

id objc_msgSend__commitPasscodeEntryTypeChange(void *a1, const char *a2, ...)
{
  return _[a1 _commitPasscodeEntryTypeChange];
}

id objc_msgSend__compareProductVersion_toProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compareProductVersion:toProductVersion:");
}

id objc_msgSend__completeCloudConfig(void *a1, const char *a2, ...)
{
  return _[a1 _completeCloudConfig];
}

id objc_msgSend__confirmThenFlowItemDoneWithResetActivationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_confirmThenFlowItemDoneWithResetActivationMethod:");
}

id objc_msgSend__connectToService(void *a1, const char *a2, ...)
{
  return _[a1 _connectToService];
}

id objc_msgSend__containsCJKScriptsOnly(void *a1, const char *a2, ...)
{
  return _[a1 _containsCJKScriptsOnly];
}

id objc_msgSend__contentDisplayModel(void *a1, const char *a2, ...)
{
  return _[a1 _contentDisplayModel];
}

id objc_msgSend__contentViewHeight(void *a1, const char *a2, ...)
{
  return _[a1 _contentViewHeight];
}

id objc_msgSend__contextForPrimaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 _contextForPrimaryAccount];
}

id objc_msgSend__contextForPrimaryAccountSilentAuth(void *a1, const char *a2, ...)
{
  return _[a1 _contextForPrimaryAccountSilentAuth];
}

id objc_msgSend__contextFromAuthenticationResults_requiresAppleMAID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextFromAuthenticationResults:requiresAppleMAID:");
}

id objc_msgSend__continuousCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 _continuousCornerRadius];
}

id objc_msgSend__controllerDone(void *a1, const char *a2, ...)
{
  return _[a1 _controllerDone];
}

id objc_msgSend__controllerDone_(void *a1, const char *a2, ...)
{
  return [_controllerDone:];
}

id objc_msgSend__countryCode(void *a1, const char *a2, ...)
{
  return _[a1 _countryCode];
}

id objc_msgSend__countrySupportsFastDeviceAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _[a1 _countrySupportsFastDeviceAnalyticsOptIn];
}

id objc_msgSend__createAVPlayerItem(void *a1, const char *a2, ...)
{
  return _[a1 _createAVPlayerItem];
}

id objc_msgSend__createAccountWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAccountWithCompletion:");
}

id objc_msgSend__createAndAttachAVPlayer(void *a1, const char *a2, ...)
{
  return _[a1 _createAndAttachAVPlayer];
}

id objc_msgSend__createAnimationController(void *a1, const char *a2, ...)
{
  return _[a1 _createAnimationController];
}

id objc_msgSend__createAuthenticationContext(void *a1, const char *a2, ...)
{
  return _[a1 _createAuthenticationContext];
}

id objc_msgSend__createConditionalFlowItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createConditionalFlowItemForClass:");
}

id objc_msgSend__createContainerSize_aspectRatio_hostViewLayoutMargins_posedDevicesPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createContainerSize:aspectRatio:hostViewLayoutMargins:posedDevicesPadding:");
}

id objc_msgSend__createDictationSelectorAllDataForExpress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDictationSelectorAllDataForExpress:");
}

id objc_msgSend__createDictationSelectorDefaultsForExpress_(void *a1, const char *a2, ...)
{
  return [a1 _createDictationSelectorDefaultsForExpress];
}

id objc_msgSend__createDictationSelectorIncludeSuggested_shouldIncludeUserSelectedKeyboards_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDictationSelectorIncludeSuggested:shouldIncludeUserSelectedKeyboards:");
}

id objc_msgSend__createDisplayLink(void *a1, const char *a2, ...)
{
  return _[a1 _createDisplayLink];
}

id objc_msgSend__createFeatureCardForApplePay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForApplePay:");
}

id objc_msgSend__createFeatureCardForConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForConnections:");
}

id objc_msgSend__createFeatureCardForDataTransferMethod_deviceName_lastBackupDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForDataTransferMethod:deviceName:lastBackupDate:");
}

id objc_msgSend__createFeatureCardForSettings_withDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForSettings:withDataSource:");
}

id objc_msgSend__createFlowItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFlowItemForClass:");
}

id objc_msgSend__createKeyboardSelectorAllData(void *a1, const char *a2, ...)
{
  return _[a1 _createKeyboardSelectorAllData];
}

id objc_msgSend__createKeyboardSelectorDefaults(void *a1, const char *a2, ...)
{
  return _[a1 _createKeyboardSelectorDefaults];
}

id objc_msgSend__createKeyboardSelectorSelectedData(void *a1, const char *a2, ...)
{
  return _[a1 _createKeyboardSelectorSelectedData];
}

id objc_msgSend__createLanguageSelectorAllData(void *a1, const char *a2, ...)
{
  return _[a1 _createLanguageSelectorAllData];
}

id objc_msgSend__createLanguageSelectorDefaults(void *a1, const char *a2, ...)
{
  return _[a1 _createLanguageSelectorDefaults];
}

id objc_msgSend__createMeCard(void *a1, const char *a2, ...)
{
  return _[a1 _createMeCard];
}

id objc_msgSend__createNavigationController(void *a1, const char *a2, ...)
{
  return _[a1 _createNavigationController];
}

id objc_msgSend__createPaymentControllerWithContext_(void *a1, const char *a2, ...)
{
  return [a1 _createPaymentControllerWithContext:];
}

id objc_msgSend__createRestoreOptions(void *a1, const char *a2, ...)
{
  return _[a1 _createRestoreOptions];
}

id objc_msgSend__createServiceContextWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createServiceContextWithAuthenticationResults:");
}

id objc_msgSend__createServiceHeader(void *a1, const char *a2, ...)
{
  return _[a1 _createServiceHeader];
}

id objc_msgSend__createTransformerWithInputAnimatableProperties_modelValueSetter_presentationValueSetter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTransformerWithInputAnimatableProperties:modelValueSetter:presentationValueSetter:");
}

id objc_msgSend__createUnlockEscrowAndRetryProfileInstallationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createUnlockEscrowAndRetryProfileInstallationWithCompletion:");
}

id objc_msgSend__currentActivationRecordDictionary(void *a1, const char *a2, ...)
{
  return _[a1 _currentActivationRecordDictionary];
}

id objc_msgSend__currentHardwareSupportsMigration(void *a1, const char *a2, ...)
{
  return _[a1 _currentHardwareSupportsMigration];
}

id objc_msgSend__currentPasscodeInputView(void *a1, const char *a2, ...)
{
  return _[a1 _currentPasscodeInputView];
}

id objc_msgSend__decorateComposedItemView_displayModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decorateComposedItemView:displayModel:");
}

id objc_msgSend__delayBetweenLoadSkipKeysRetriesInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 _delayBetweenLoadSkipKeysRetriesInSeconds];
}

id objc_msgSend__descriptionFont(void *a1, const char *a2, ...)
{
  return _[a1 _descriptionFont];
}

id objc_msgSend__descriptionForDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForDataSource:");
}

id objc_msgSend__descriptionText(void *a1, const char *a2, ...)
{
  return _[a1 _descriptionText];
}

id objc_msgSend__detailForDataSourceDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailForDataSourceDeviceClass:");
}

id objc_msgSend__detailText(void *a1, const char *a2, ...)
{
  return _[a1 _detailText];
}

id objc_msgSend__detailTextAlignment(void *a1, const char *a2, ...)
{
  return _[a1 _detailTextAlignment];
}

id objc_msgSend__determineAccountToRepair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineAccountToRepair:");
}

id objc_msgSend__determineDisplayMode_(void *a1, const char *a2, ...)
{
  return [a1 _determineDisplayMode:];
}

id objc_msgSend__determineDisplayModeShouldPotentiallyIncludeApps(void *a1, const char *a2, ...)
{
  return _[a1 _determineDisplayModeShouldPotentiallyIncludeApps];
}

id objc_msgSend__determineIfFeatureIsInExpress_withDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineIfFeatureIsInExpress:withDataSource:");
}

id objc_msgSend__determineStyleWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineStyleWithCompletion:");
}

id objc_msgSend__deviceLanguage(void *a1, const char *a2, ...)
{
  return _[a1 _deviceLanguage];
}

id objc_msgSend__deviceTypeForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceTypeForProductType:");
}

id objc_msgSend__dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 _dictionaryRepresentation];
}

id objc_msgSend__didAuthenticateWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didAuthenticateWithAuthenticationResults:");
}

id objc_msgSend__didFinishResponsibilityViewControllerPushSeesion(void *a1, const char *a2, ...)
{
  return _[a1 _didFinishResponsibilityViewControllerPushSeesion];
}

id objc_msgSend__didRestoreIniTunes(void *a1, const char *a2, ...)
{
  return _[a1 _didRestoreIniTunes];
}

id objc_msgSend__didSignInUsername_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didSignInUsername:altDSID:");
}

id objc_msgSend__dismissGestureChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissGestureChanged:");
}

id objc_msgSend__dismissGestureEndedWithGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissGestureEndedWithGestureRecognizer:");
}

id objc_msgSend__dismissRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 _dismissRemoteUI];
}

id objc_msgSend__doesRestartFlowCauseErase(void *a1, const char *a2, ...)
{
  return _[a1 _doesRestartFlowCauseErase];
}

id objc_msgSend__doesTapFreeSetUpAffectsClass_(void *a1, const char *a2, ...)
{
  return [a1 _doesTapFreeSetUpAffectsClass];
}

id objc_msgSend__eligibleForChlorine(void *a1, const char *a2, ...)
{
  return _[a1 _eligibleForChlorine];
}

id objc_msgSend__enableAutomaticDownload_enableAutomaticUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableAutomaticDownload:enableAutomaticUpdate:");
}

id objc_msgSend__enableShelfLifeMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableShelfLifeMode];
}

id objc_msgSend__endEventForNavigationDurationFromFlowItem_toFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endEventForNavigationDurationFromFlowItem:toFlowItem:");
}

id objc_msgSend__endFlowPrematurely(void *a1, const char *a2, ...)
{
  return _[a1 _endFlowPrematurely];
}

id objc_msgSend__endProximityIfApplicable(void *a1, const char *a2, ...)
{
  return _[a1 _endProximityIfApplicable];
}

id objc_msgSend__enrollTapped_(void *a1, const char *a2, ...)
{
  return [a1 _enrollTapped:];
}

id objc_msgSend__ensureControllerExistsWithTarget_viewControllerInsertionIndexGenerator_buddyControllerInsertionIndexGenerator_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureControllerExistsWithTarget:viewControllerInsertionIndexGenerator:buddyControllerInsertionIndexGenerator:withCompletion:");
}

id objc_msgSend__ensureDeviceProximitySetupControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureDeviceProximitySetupControllerWithCompletion:");
}

id objc_msgSend__ensureDeviceRestoreChoiceControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureDeviceRestoreChoiceControllerWithCompletion:");
}

id objc_msgSend__ensurePresenter(void *a1, const char *a2, ...)
{
  return _[a1 _ensurePresenter];
}

id objc_msgSend__enterState_(void *a1, const char *a2, ...)
{
  return [a1 _enterState:];
}

id objc_msgSend__eraseDevice(void *a1, const char *a2, ...)
{
  return _[a1 _eraseDevice];
}

id objc_msgSend__exitBuddyForDemoSetUp(void *a1, const char *a2, ...)
{
  return _[a1 _exitBuddyForDemoSetUp];
}

id objc_msgSend__failedToStartRestoreForSnapshotID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failedToStartRestoreForSnapshotID:error:");
}

id objc_msgSend__familyMembersForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_familyMembersForAccount:completion:");
}

id objc_msgSend__faultForNilPropertyWithDescription_(void *a1, const char *a2, ...)
{
  return [a1 _faultForNilPropertyWithDescription];
}

id objc_msgSend__fetchAccountsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccountsWithCompletion:");
}

id objc_msgSend__fetchCloudConfig(void *a1, const char *a2, ...)
{
  return _[a1 _fetchCloudConfig];
}

id objc_msgSend__fetchMediaLinkedAccountDSIDWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 _fetchMediaLinkedAccountDSIDWithCompletion:];
}

id objc_msgSend__fetchRequiresTermsAcceptanceForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequiresTermsAcceptanceForAccount:completion:");
}

id objc_msgSend__fetchSiriVoiceProfileAvailability(void *a1, const char *a2, ...)
{
  return _[a1 _fetchSiriVoiceProfileAvailability];
}

id objc_msgSend__fetchUserInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUserInformation:");
}

id objc_msgSend__finishedWithPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishedWithPasscode:");
}

id objc_msgSend__firstBaselineOffsetFromTop(void *a1, const char *a2, ...)
{
  return _[a1 _firstBaselineOffsetFromTop];
}

id objc_msgSend__firstEntryInstructions(void *a1, const char *a2, ...)
{
  return _[a1 _firstEntryInstructions];
}

id objc_msgSend__firstLineBaselineOffsetFromBoundsTop(void *a1, const char *a2, ...)
{
  return _[a1 _firstLineBaselineOffsetFromBoundsTop];
}

id objc_msgSend__flatImageWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flatImageWithColor:");
}

id objc_msgSend__flowForFlowItem_(void *a1, const char *a2, ...)
{
  return [a1 _flowForFlowItem:];
}

id objc_msgSend__flowItemDone(void *a1, const char *a2, ...)
{
  return _[a1 _flowItemDone];
}

id objc_msgSend__flowItemDone_flow_nextItemClass_nextItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemDone:flow:nextItemClass:nextItem:");
}

id objc_msgSend__flowItemDoneWithResetActivationMethod_(void *a1, const char *a2, ...)
{
  return [a1 _flowItemDoneWithResetActivationMethod:];
}

id objc_msgSend__flowItemFollowingClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemFollowingClass:");
}

id objc_msgSend__flowMapByClass(void *a1, const char *a2, ...)
{
  return _[a1 _flowMapByClass];
}

id objc_msgSend__footerIcon(void *a1, const char *a2, ...)
{
  return _[a1 _footerIcon];
}

id objc_msgSend__footnoteFont(void *a1, const char *a2, ...)
{
  return _[a1 _footnoteFont];
}

id objc_msgSend__forceInteractiveAuthFromPreTigrisUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 _forceInteractiveAuthFromPreTigrisUpgrade];
}

id objc_msgSend__getEncodedMachineInfo(void *a1, const char *a2, ...)
{
  return _[a1 _getEncodedMachineInfo];
}

id objc_msgSend__getHeight_forWidth_shouldLayoutViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getHeight:forWidth:shouldLayoutViews:");
}

id objc_msgSend__getSRPInitNonceRequestOptionsCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSRPInitNonceRequestOptionsCompletion:");
}

id objc_msgSend__handleActivationData_responseHeaders_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleActivationData:responseHeaders:baseURL:");
}

id objc_msgSend__handleEscrowResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEscrowResponse:");
}

id objc_msgSend__handleFailureWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFailureWithError:");
}

id objc_msgSend__handlePlanAddition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePlanAddition:");
}

id objc_msgSend__handleScanResults_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScanResults:error:");
}

id objc_msgSend__hasBiometricEnrollment(void *a1, const char *a2, ...)
{
  return _[a1 _hasBiometricEnrollment];
}

id objc_msgSend__hasLocaleAndLanguage(void *a1, const char *a2, ...)
{
  return _[a1 _hasLocaleAndLanguage];
}

id objc_msgSend__hasWiFiControllerInNavigationStack(void *a1, const char *a2, ...)
{
  return _[a1 _hasWiFiControllerInNavigationStack];
}

id objc_msgSend__hasiCloudSiriTrainingDataForLanguage_withMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasiCloudSiriTrainingDataForLanguage:withMetadata:");
}

id objc_msgSend__headerToContentPadding(void *a1, const char *a2, ...)
{
  return _[a1 _headerToContentPadding];
}

id objc_msgSend__helloBackgroundForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloBackgroundForProductType:");
}

id objc_msgSend__helloScreenViewForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloScreenViewForProductType:");
}

id objc_msgSend__helloScreenViewWithBackgroundImage_cursiveImage_labelBottomOffset_labelHorizontalInset_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloScreenViewWithBackgroundImage:cursiveImage:labelBottomOffset:labelHorizontalInset:deviceType:");
}

id objc_msgSend__hideBackButtonIfNecessaryOnFlowItem_withViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideBackButtonIfNecessaryOnFlowItem:withViewController:");
}

id objc_msgSend__hidePairingCode(void *a1, const char *a2, ...)
{
  return _[a1 _hidePairingCode];
}

id objc_msgSend__homeScreenImageForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenImageForProductType:");
}

id objc_msgSend__homeScreenViewForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenViewForProductType:");
}

id objc_msgSend__homeScreenViewWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenViewWithImage:");
}

id objc_msgSend__humanReadableOSVersionWithProductVersion_buildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_humanReadableOSVersionWithProductVersion:buildVersion:");
}

id objc_msgSend__idealPosedDeviceSizeForAspectRatio_layoutMargins_posedDevicesPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idealPosedDeviceSizeForAspectRatio:layoutMargins:posedDevicesPadding:");
}

id objc_msgSend__identifier(void *a1, const char *a2, ...)
{
  return _[a1 _identifier];
}

id objc_msgSend__imageLeadingMargin(void *a1, const char *a2, ...)
{
  return _[a1 _imageLeadingMargin];
}

id objc_msgSend__imageThatSuppressesAccessibilityHairlineThickening(void *a1, const char *a2, ...)
{
  return _[a1 _imageThatSuppressesAccessibilityHairlineThickening];
}

id objc_msgSend__imageTrailingMargin(void *a1, const char *a2, ...)
{
  return _[a1 _imageTrailingMargin];
}

id objc_msgSend__imageWidth(void *a1, const char *a2, ...)
{
  return _[a1 _imageWidth];
}

id objc_msgSend__initialFlowItemClass(void *a1, const char *a2, ...)
{
  return _[a1 _initialFlowItemClass];
}

id objc_msgSend__initializeGreen(void *a1, const char *a2, ...)
{
  return _[a1 _initializeGreen];
}

id objc_msgSend__initializeViews(void *a1, const char *a2, ...)
{
  return _[a1 _initializeViews];
}

id objc_msgSend__injectDependencies_(void *a1, const char *a2, ...)
{
  return [a1 _injectDependencies:];
}

id objc_msgSend__injectDependencies_withEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectDependencies:withEnvironment:");
}

id objc_msgSend__insertWiFiControllerAsFirstPane(void *a1, const char *a2, ...)
{
  return _[a1 _insertWiFiControllerAsFirstPane];
}

id objc_msgSend__installFailedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installFailedWithError:");
}

id objc_msgSend__isActiveBuddyStoreAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveBuddyStoreAccount:");
}

id objc_msgSend__isActiveBuddyStoreAccountWithUsername_orAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveBuddyStoreAccountWithUsername:orAltDSID:");
}

id objc_msgSend__isBackInBuddyAfterRestoreFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackInBuddyAfterRestoreFromBackup:");
}

id objc_msgSend__isBackInBuddyForActivationOnly(void *a1, const char *a2, ...)
{
  return _[a1 _isBackInBuddyForActivationOnly];
}

id objc_msgSend__isBackupFromProximityDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackupFromProximityDevice:");
}

id objc_msgSend__isControllerSkippedForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isControllerSkippedForFeature:");
}

id objc_msgSend__isDEP(void *a1, const char *a2, ...)
{
  return _[a1 _isDEP];
}

id objc_msgSend__isEmojiSoleDataItemPostDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEmojiSoleDataItemPostDeletion:");
}

id objc_msgSend__isEscrowMissingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEscrowMissingError:");
}

id objc_msgSend__isFlowItemAllowed_(void *a1, const char *a2, ...)
{
  return [a1 _isFlowItemAllowed:];
}

id objc_msgSend__isLightMode(void *a1, const char *a2, ...)
{
  return _[a1 _isLightMode];
}

id objc_msgSend__isPlaying(void *a1, const char *a2, ...)
{
  return _[a1 _isPlaying];
}

id objc_msgSend__isPrimaryAccount_(void *a1, const char *a2, ...)
{
  return [a1 _isPrimaryAccount:];
}

id objc_msgSend__isPrimaryAccountWithUsername_orAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryAccountWithUsername:orAltDSID:");
}

id objc_msgSend__isRestore(void *a1, const char *a2, ...)
{
  return _[a1 _isRestore];
}

id objc_msgSend__isRestrictedForFeature_(void *a1, const char *a2, ...)
{
  return [a1 _isRestrictedForFeature:];
}

id objc_msgSend__isSettingsFeature_(void *a1, const char *a2, ...)
{
  return [a1 _isSettingsFeature:];
}

id objc_msgSend__isStolenDeviceProtectionRestricted(void *a1, const char *a2, ...)
{
  return _[a1 _isStolenDeviceProtectionRestricted];
}

id objc_msgSend__isWaitingForReconnection(void *a1, const char *a2, ...)
{
  return _[a1 _isWaitingForReconnection];
}

id objc_msgSend__labelColor(void *a1, const char *a2, ...)
{
  return _[a1 _labelColor];
}

id objc_msgSend__labelFont(void *a1, const char *a2, ...)
{
  return _[a1 _labelFont];
}

id objc_msgSend__landscapeDefaultSize(void *a1, const char *a2, ...)
{
  return _[a1 _landscapeDefaultSize];
}

id objc_msgSend__languageChangeAlertDone(void *a1, const char *a2, ...)
{
  return _[a1 _languageChangeAlertDone];
}

id objc_msgSend__largeAXMode(void *a1, const char *a2, ...)
{
  return _[a1 _largeAXMode];
}

id objc_msgSend__largerThanStandardAX(void *a1, const char *a2, ...)
{
  return _[a1 _largerThanStandardAX];
}

id objc_msgSend__lastNonFlowFlowItemRelativeToFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastNonFlowFlowItemRelativeToFlowItem:");
}

id objc_msgSend__layoutTableView(void *a1, const char *a2, ...)
{
  return _[a1 _layoutTableView];
}

id objc_msgSend__leaveRemoteManagementAndErase(void *a1, const char *a2, ...)
{
  return _[a1 _leaveRemoteManagementAndErase];
}

id objc_msgSend__loadClassicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadClassicState:");
}

id objc_msgSend__loadModernState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadModernState:");
}

id objc_msgSend__loadSavedStatePostLanguageReboot(void *a1, const char *a2, ...)
{
  return _[a1 _loadSavedStatePostLanguageReboot];
}

id objc_msgSend__loadSecurityUpgradeUI(void *a1, const char *a2, ...)
{
  return _[a1 _loadSecurityUpgradeUI];
}

id objc_msgSend__loadSkipKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSkipKeys:");
}

id objc_msgSend__loadSkipKeysWithCurrentTry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSkipKeysWithCurrentTry:completion:");
}

id objc_msgSend__localeChanged(void *a1, const char *a2, ...)
{
  return _[a1 _localeChanged];
}

id objc_msgSend__localizedDescriptionForFeature_(void *a1, const char *a2, ...)
{
  return [a1 _localizedDescriptionForFeature:];
}

id objc_msgSend__localizedExtraStoresSignInTextForStoreContentMap_(void *a1, const char *a2, ...)
{
  return [a1 _localizedExtraStoresSignInTextForStoreContentMap:];
}

id objc_msgSend__localizedExtraStoresSignInTextKeyForStoreContentMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedExtraStoresSignInTextKeyForStoreContentMap:");
}

id objc_msgSend__localizedHelloCursiveAssetForDeviceType_(void *a1, const char *a2, ...)
{
  return [a1 _localizedHelloCursiveAssetForDeviceType:];
}

id objc_msgSend__localizedNameForFeature_(void *a1, const char *a2, ...)
{
  return [a1 _localizedNameForFeature:];
}

id objc_msgSend__machineInfo(void *a1, const char *a2, ...)
{
  return _[a1 _machineInfo];
}

id objc_msgSend__mainViewToAccessoryViewPadding(void *a1, const char *a2, ...)
{
  return _[a1 _mainViewToAccessoryViewPadding];
}

id objc_msgSend__makeCurrentVersionRow(void *a1, const char *a2, ...)
{
  return _[a1 _makeCurrentVersionRow];
}

id objc_msgSend__makeDetailLabelWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeDetailLabelWithViewModel:");
}

id objc_msgSend__makeLearnMoreButton(void *a1, const char *a2, ...)
{
  return _[a1 _makeLearnMoreButton];
}

id objc_msgSend__makeRequiredVersionRowWithScanOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeRequiredVersionRowWithScanOptions:");
}

id objc_msgSend__makeRowViewWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeRowViewWithViewModel:");
}

id objc_msgSend__makeRowViews(void *a1, const char *a2, ...)
{
  return _[a1 _makeRowViews];
}

id objc_msgSend__makeSpacer(void *a1, const char *a2, ...)
{
  return _[a1 _makeSpacer];
}

id objc_msgSend__makeStoreAccountActiveForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeStoreAccountActiveForAccount:completion:");
}

id objc_msgSend__makeTitleLabelWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeTitleLabelWithViewModel:");
}

id objc_msgSend__mandatoryUpdateInformationFromActivation(void *a1, const char *a2, ...)
{
  return _[a1 _mandatoryUpdateInformationFromActivation];
}

id objc_msgSend__maskContainerView(void *a1, const char *a2, ...)
{
  return _[a1 _maskContainerView];
}

id objc_msgSend__menuButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 _menuButtonPressed];
}

id objc_msgSend__micaAssetName(void *a1, const char *a2, ...)
{
  return _[a1 _micaAssetName];
}

id objc_msgSend__micaAssetNameForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_micaAssetNameForRegion:");
}

id objc_msgSend__migrateFromiOSSelected(void *a1, const char *a2, ...)
{
  return _[a1 _migrateFromiOSSelected];
}

id objc_msgSend__nameDevice(void *a1, const char *a2, ...)
{
  return _[a1 _nameDevice];
}

id objc_msgSend__networkPathChanged(void *a1, const char *a2, ...)
{
  return _[a1 _networkPathChanged];
}

id objc_msgSend__newActivationRequestWithOptions_sessionData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newActivationRequestWithOptions:sessionData:error:");
}

id objc_msgSend__noBackupsFoundSectionCount(void *a1, const char *a2, ...)
{
  return _[a1 _noBackupsFoundSectionCount];
}

id objc_msgSend__observeAppLifecycleNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _observeAppLifecycleNotifications];
}

id objc_msgSend__onboardingPasscodeAnimationForBFF_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onboardingPasscodeAnimationForBFF:");
}

id objc_msgSend__passcodeInputVerticalPaddingForOrientation_(void *a1, const char *a2, ...)
{
  return [a1 _passcodeInputVerticalPaddingForOrientation:];
}

id objc_msgSend__passcodeInputViewForState_updateDetailText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passcodeInputViewForState:updateDetailText:");
}

id objc_msgSend__pausePlayer(void *a1, const char *a2, ...)
{
  return _[a1 _pausePlayer];
}

id objc_msgSend__performExtendedInitializationForFlowItem_willBegin_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performExtendedInitializationForFlowItem:willBegin:withCompletion:");
}

id objc_msgSend__performPairingDidSucceedAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPairingDidSucceedAnimation:");
}

id objc_msgSend__persistAnalyticsForLanguageReboot(void *a1, const char *a2, ...)
{
  return _[a1 _persistAnalyticsForLanguageReboot];
}

id objc_msgSend__persistAnalyticsForSoftwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _persistAnalyticsForSoftwareUpdate];
}

id objc_msgSend__pitLog_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pitLog:withObject:");
}

id objc_msgSend__popBackToAuthAttemptLandingPage(void *a1, const char *a2, ...)
{
  return _[a1 _popBackToAuthAttemptLandingPage];
}

id objc_msgSend__popToBuddyControllerWithClass_withOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_popToBuddyControllerWithClass:withOffset:animated:");
}

id objc_msgSend__populateDataSourcesForDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateDataSourcesForDataProvider:completion:");
}

id objc_msgSend__populatePowerLogAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _populatePowerLogAnalytics];
}

id objc_msgSend__populateRestoreChoices(void *a1, const char *a2, ...)
{
  return _[a1 _populateRestoreChoices];
}

id objc_msgSend__populateSetupAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _populateSetupAnalytics];
}

id objc_msgSend__portraitDefaultHeight(void *a1, const char *a2, ...)
{
  return _[a1 _portraitDefaultHeight];
}

id objc_msgSend__postLanguageReboot(void *a1, const char *a2, ...)
{
  return _[a1 _postLanguageReboot];
}

id objc_msgSend__preCommitAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _preCommitAnalytics];
}

id objc_msgSend__preStashAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _preStashAnalytics];
}

id objc_msgSend__preferredHeight(void *a1, const char *a2, ...)
{
  return _[a1 _preferredHeight];
}

id objc_msgSend__preflightDispositionValidationWithControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preflightDispositionValidationWithControllerClass:");
}

id objc_msgSend__prepareAnalyticsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareAnalyticsWithCompletion:");
}

id objc_msgSend__prepareContentView(void *a1, const char *a2, ...)
{
  return _[a1 _prepareContentView];
}

id objc_msgSend__prepareForCloudRestoreReboot(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForCloudRestoreReboot];
}

id objc_msgSend__prepareForDeviceMigrationAfterSoftwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForDeviceMigrationAfterSoftwareUpdate:");
}

id objc_msgSend__prepareForMigrationReboot(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForMigrationReboot];
}

id objc_msgSend__prepareForPresentation(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForPresentation];
}

id objc_msgSend__prepareForSoftwareUpdateToBuild_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForSoftwareUpdateToBuild:completion:");
}

id objc_msgSend__prepareTransitionForPasscodeInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareTransitionForPasscodeInput:");
}

id objc_msgSend__presentAdditionDataSource(void *a1, const char *a2, ...)
{
  return _[a1 _presentAdditionDataSource];
}

id objc_msgSend__presentAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentAlert:");
}

id objc_msgSend__presentEraseAlertWithTitle_message_eraseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentEraseAlertWithTitle:message:eraseHandler:");
}

id objc_msgSend__presentNetworkWarning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentNetworkWarning:");
}

id objc_msgSend__presentNetworkWarningForRestorable_completion_(void *a1, const char *a2, ...)
{
  return [a1 _presentNetworkWarningForRestorable:completion:];
}

id objc_msgSend__presentReEnrollFailureAlert(void *a1, const char *a2, ...)
{
  return _[a1 _presentReEnrollFailureAlert];
}

id objc_msgSend__presentTryAgainAlert(void *a1, const char *a2, ...)
{
  return _[a1 _presentTryAgainAlert];
}

id objc_msgSend__presentViewControllerForBuddyController_animated_willPresentViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentViewControllerForBuddyController:animated:willPresentViewController:completion:");
}

id objc_msgSend__presentableAdditionalDataSource(void *a1, const char *a2, ...)
{
  return _[a1 _presentableAdditionalDataSource];
}

id objc_msgSend__primaryAccount(void *a1, const char *a2, ...)
{
  return _[a1 _primaryAccount];
}

id objc_msgSend__primaryAccountInfo(void *a1, const char *a2, ...)
{
  return _[a1 _primaryAccountInfo];
}

id objc_msgSend__privacyBundlesForDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyBundlesForDisplayMode:");
}

id objc_msgSend__privacyIdentifiersForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyIdentifiersForFeature:");
}

id objc_msgSend__privacyIdentifiersForFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyIdentifiersForFeatures:");
}

id objc_msgSend__pushFlowItem_inFlow_withExtendedInitialization_animated_willPushFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushFlowItem:inFlow:withExtendedInitialization:animated:willPushFlowItem:");
}

id objc_msgSend__pushNextViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushNextViewController:");
}

id objc_msgSend__reallySkip(void *a1, const char *a2, ...)
{
  return _[a1 _reallySkip];
}

id objc_msgSend__rebootDevice(void *a1, const char *a2, ...)
{
  return _[a1 _rebootDevice];
}

id objc_msgSend__recordAnalyticsEvent(void *a1, const char *a2, ...)
{
  return _[a1 _recordAnalyticsEvent];
}

id objc_msgSend__recordAnalyticsEventForDataProvider_presented_customized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAnalyticsEventForDataProvider:presented:customized:");
}

id objc_msgSend__recordAnalyticsEventForEnrollment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAnalyticsEventForEnrollment:");
}

id objc_msgSend__refreshLanguage(void *a1, const char *a2, ...)
{
  return _[a1 _refreshLanguage];
}

id objc_msgSend__registerForActivationStateNotification(void *a1, const char *a2, ...)
{
  return _[a1 _registerForActivationStateNotification];
}

id objc_msgSend__registerPhoneNumberPermissionEnabled_buddyPreferences_(void *a1, const char *a2, ...)
{
  return [a1 _registerPhoneNumberPermissionEnabled:buddyPreferences:];
}

id objc_msgSend__releaseOTAAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _releaseOTAAssertion];
}

id objc_msgSend__reloadSectionHeaderFooters_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadSectionHeaderFooters:withRowAnimation:");
}

id objc_msgSend__remoteManagementText(void *a1, const char *a2, ...)
{
  return _[a1 _remoteManagementText];
}

id objc_msgSend__removeAccountsToSignIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAccountsToSignIn:");
}

id objc_msgSend__removeBackToViewControllerMatchingBlock_withOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBackToViewControllerMatchingBlock:withOffset:");
}

id objc_msgSend__removeDisplayLink(void *a1, const char *a2, ...)
{
  return _[a1 _removeDisplayLink];
}

id objc_msgSend__removePowerLog(void *a1, const char *a2, ...)
{
  return _[a1 _removePowerLog];
}

id objc_msgSend__removeSBAlertItemsSupressionAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _removeSBAlertItemsSupressionAssertion];
}

id objc_msgSend__removeSiriPanesFromNavHierarchy(void *a1, const char *a2, ...)
{
  return _[a1 _removeSiriPanesFromNavHierarchy];
}

id objc_msgSend__removeViewControllersIncludingSelf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeViewControllersIncludingSelf:");
}

id objc_msgSend__requestInteractiveMAIDAuthenticationWithManagedAppleID_personaID_ephemeral_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestInteractiveMAIDAuthenticationWithManagedAppleID:personaID:ephemeral:completionHandler:");
}

id objc_msgSend__requiredTerms(void *a1, const char *a2, ...)
{
  return _[a1 _requiredTerms];
}

id objc_msgSend__resetPlayer(void *a1, const char *a2, ...)
{
  return _[a1 _resetPlayer];
}

id objc_msgSend__resetWifiControllerTimeoutSpinner(void *a1, const char *a2, ...)
{
  return _[a1 _resetWifiControllerTimeoutSpinner];
}

id objc_msgSend__restoreFromBackupJustFinished(void *a1, const char *a2, ...)
{
  return _[a1 _restoreFromBackupJustFinished];
}

id objc_msgSend__restorePasteboard(void *a1, const char *a2, ...)
{
  return _[a1 _restorePasteboard];
}

id objc_msgSend__resumeNavigationQueue(void *a1, const char *a2, ...)
{
  return _[a1 _resumeNavigationQueue];
}

id objc_msgSend__resumePlayer(void *a1, const char *a2, ...)
{
  return _[a1 _resumePlayer];
}

id objc_msgSend__retrieveEnterpriseConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 _retrieveEnterpriseConfiguration];
}

id objc_msgSend__retrieveEnterpriseConfigurationForManagementVersion1(void *a1, const char *a2, ...)
{
  return _[a1 _retrieveEnterpriseConfigurationForManagementVersion1];
}

id objc_msgSend__retrieveEnterpriseConfigurationForManagementVersion2(void *a1, const char *a2, ...)
{
  return _[a1 _retrieveEnterpriseConfigurationForManagementVersion2];
}

id objc_msgSend__retrieveEnterpriseConfigurationFromWebURL_withAnchorCerts_(void *a1, const char *a2, ...)
{
  return [a1 _retrieveEnterpriseConfigurationFromWebURL:withAnchorCerts:];
}

id objc_msgSend__retryDelaySecondsForAttemptCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryDelaySecondsForAttemptCount:");
}

id objc_msgSend__retryFlowIfPossibleOrFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryFlowIfPossibleOrFailWithError:");
}

id objc_msgSend__reverifyUserConfigurationState(void *a1, const char *a2, ...)
{
  return _[a1 _reverifyUserConfigurationState];
}

id objc_msgSend__sanitizeSystemTime(void *a1, const char *a2, ...)
{
  return _[a1 _sanitizeSystemTime];
}

id objc_msgSend__sanitizedUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizedUsername:");
}

id objc_msgSend__saveAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveAccount:completion:");
}

id objc_msgSend__savedItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedItemForClass:");
}

id objc_msgSend__scanUsingCache_allowBootstrap_attemptCount_attemptsAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanUsingCache:allowBootstrap:attemptCount:attemptsAllowed:withCompletion:");
}

id objc_msgSend__scanUsingCache_allowBootstrap_attemptsAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanUsingCache:allowBootstrap:attemptsAllowed:withCompletion:");
}

id objc_msgSend__screenImagePrefixForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_screenImagePrefixForProductType:");
}

id objc_msgSend__secondaryGetStartedContentView(void *a1, const char *a2, ...)
{
  return _[a1 _secondaryGetStartedContentView];
}

id objc_msgSend__secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _[a1 _secondaryLabelColor];
}

id objc_msgSend__selectLanguage_(void *a1, const char *a2, ...)
{
  return [a1 _selectLanguage:];
}

id objc_msgSend__sendSessionRequest_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSessionRequest:withOptions:");
}

id objc_msgSend__serverFriendlyDisplayNameForCurrentUserName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverFriendlyDisplayNameForCurrentUserName:");
}

id objc_msgSend__setAppearanceHandler_forSpinnerPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAppearanceHandler:forSpinnerPage:");
}

id objc_msgSend__setAsGlobalUserInflection(void *a1, const char *a2, ...)
{
  return _[a1 _setAsGlobalUserInflection];
}

id objc_msgSend__setAttributedTitle_(void *a1, const char *a2, ...)
{
  return [_a1 _setAttributedTitle:];
}

id objc_msgSend__setBackgroundStyle_(void *a1, const char *a2, ...)
{
  return [a1 _setBackgroundStyle:];
}

id objc_msgSend__setConnected_(void *a1, const char *a2, ...)
{
  return [a1 _setConnected:];
}

id objc_msgSend__setContinueButtonEnabledOrDisabled(void *a1, const char *a2, ...)
{
  return _[a1 _setContinueButtonEnabledOrDisabled];
}

id objc_msgSend__setContinuousCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinuousCornerRadius:");
}

id objc_msgSend__setCornerRadius_(void *a1, const char *a2, ...)
{
  return [a1 _setCornerRadius:];
}

id objc_msgSend__setDiagnosticLoggingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 _setDiagnosticLoggingEnabled:];
}

id objc_msgSend__setDownloadDelegate_(void *a1, const char *a2, ...)
{
  return [_a1 _setDownloadDelegate:];
}

id objc_msgSend__setDragInteractionPolicy_(void *a1, const char *a2, ...)
{
  return [a1 _setDragInteractionPolicy:];
}

id objc_msgSend__setDrawsSeparatorAtTopOfSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDrawsSeparatorAtTopOfSections:");
}

id objc_msgSend__setHandlerForPasscode(void *a1, const char *a2, ...)
{
  return _[a1 _setHandlerForPasscode];
}

id objc_msgSend__setHeaderTitle_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeaderTitle:animated:");
}

id objc_msgSend__setIdentityToken_(void *a1, const char *a2, ...)
{
  return [a1 _setIdentityToken:];
}

id objc_msgSend__setIndicatorInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIndicatorInsetAdjustmentBehavior:");
}

id objc_msgSend__setLogInOptionsForBuddyAppleIDAuthMode_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLogInOptionsForBuddyAppleIDAuthMode:signInController:");
}

id objc_msgSend__setManualScrollEdgeAppearanceEnabled_(void *a1, const char *a2, ...)
{
  return [a1 _setManualScrollEdgeAppearanceEnabled:];
}

id objc_msgSend__setManualScrollEdgeAppearanceProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceProgress:");
}

id objc_msgSend__setObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setObjectID:");
}

id objc_msgSend__setPassword_(void *a1, const char *a2, ...)
{
  return [a1 _setPassword:];
}

id objc_msgSend__setPersistentPresentedKey_(void *a1, const char *a2, ...)
{
  return [a1 _setPersistentPresentedKey];
}

id objc_msgSend__setPosedViewToBoundedHeight_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPosedViewToBoundedHeight:animated:");
}

id objc_msgSend__setPosedViewToBoundedHeight_animated_requireLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPosedViewToBoundedHeight:animated:requireLayout:");
}

id objc_msgSend__setPresentationValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPresentationValue:forKey:");
}

id objc_msgSend__setProxyingForApp_(void *a1, const char *a2, ...)
{
  return [a1 _setProxyingForApp:];
}

id objc_msgSend__setSetupIntent(void *a1, const char *a2, ...)
{
  return _[a1 _setSetupIntent];
}

id objc_msgSend__setShortLivedToken_(void *a1, const char *a2, ...)
{
  return [_a1 _setShortLivedToken:];
}

id objc_msgSend__setShouldHaveFullLengthBottomSeparator_(void *a1, const char *a2, ...)
{
  return [a1 _setShouldHaveFullLengthBottomSeparator:];
}

id objc_msgSend__setShouldHaveFullLengthTopSeparator_(void *a1, const char *a2, ...)
{
  return [a1 _setShouldHaveFullLengthTopSeparator:];
}

id objc_msgSend__setShowsBackgroundShadow_(void *a1, const char *a2, ...)
{
  return [a1 _setShowsBackgroundShadow:];
}

id objc_msgSend__setUseCustomBackButtonAction_(void *a1, const char *a2, ...)
{
  return [a1 _setUseCustomBackButtonAction:];
}

id objc_msgSend__setupAVPlayer(void *a1, const char *a2, ...)
{
  return _[a1 _setupAVPlayer];
}

id objc_msgSend__setupAccountForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 _setupAccountForSecurityUpgrade];
}

id objc_msgSend__setupAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _setupAnalytics];
}

id objc_msgSend__setupAndStartReturnToServiceIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupAndStartReturnToServiceIfNeeded];
}

id objc_msgSend__setupButtons(void *a1, const char *a2, ...)
{
  return _[a1 _setupButtons];
}

id objc_msgSend__setupCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupCompleted:");
}

id objc_msgSend__setupFirstEntry(void *a1, const char *a2, ...)
{
  return _[a1 _setupFirstEntry];
}

id objc_msgSend__setupForCloudConfigurationState(void *a1, const char *a2, ...)
{
  return _[a1 _setupForCloudConfigurationState];
}

id objc_msgSend__setupForState(void *a1, const char *a2, ...)
{
  return _[a1 _setupForState];
}

id objc_msgSend__setupInitialFlowFromInitialFlowItem_debutFlowItemClass_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupInitialFlowFromInitialFlowItem:debutFlowItemClass:completion:");
}

id objc_msgSend__setupSnapshotRemoved(void *a1, const char *a2, ...)
{
  return _[a1 _setupSnapshotRemoved];
}

id objc_msgSend__setupStateChanged(void *a1, const char *a2, ...)
{
  return _[a1 _setupStateChanged];
}

id objc_msgSend__setupVideoPlayerObservationIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setupVideoPlayerObservationIfNeeded];
}

id objc_msgSend__setupViews(void *a1, const char *a2, ...)
{
  return _[a1 _setupViews];
}

id objc_msgSend__shieldColorForNewTopFlowItemPush(void *a1, const char *a2, ...)
{
  return _[a1 _shieldColorForNewTopFlowItemPush];
}

id objc_msgSend__shouldAddFeatureDeviceAndAppAnalyticsForDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAddFeatureDeviceAndAppAnalyticsForDataSource:");
}

id objc_msgSend__shouldAllowEnablingSiriWithVoiceTriggerEnabledSetting_hasNeededTrainingData_(void *a1, const char *a2, ...)
{
  return [a1 _shouldAllowEnablingSiriWithVoiceTriggerEnabledSetting:hasNeededTrainingData:];
}

id objc_msgSend__shouldReportCombinedAnalyticsChoice(void *a1, const char *a2, ...)
{
  return _[a1 _shouldReportCombinedAnalyticsChoice];
}

id objc_msgSend__shouldReverseLayoutDirection(void *a1, const char *a2, ...)
{
  return _[a1 _shouldReverseLayoutDirection];
}

id objc_msgSend__shouldSetPasscode(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSetPasscode];
}

id objc_msgSend__shouldShowCursiveAnimation(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowCursiveAnimation];
}

id objc_msgSend__shouldShowGetStartedButton(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowGetStartedButton];
}

id objc_msgSend__shouldShowIntelligenceAnimationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowIntelligenceAnimationWithCompletion:");
}

id objc_msgSend__shouldTapFreeSetUpSkipControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldTapFreeSetUpSkipControllerClass:");
}

id objc_msgSend__showAllFooterPresent(void *a1, const char *a2, ...)
{
  return _[a1 _showAllFooterPresent];
}

id objc_msgSend__showAutoInstallAlert(void *a1, const char *a2, ...)
{
  return _[a1 _showAutoInstallAlert];
}

id objc_msgSend__showConfigurationFailedForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showConfigurationFailedForError:");
}

id objc_msgSend__showEraseDeviceAlert(void *a1, const char *a2, ...)
{
  return _[a1 _showEraseDeviceAlert];
}

id objc_msgSend__showError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showError:");
}

id objc_msgSend__showErrorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showErrorController:");
}

id objc_msgSend__showFailureAlertWithTitle_andMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showFailureAlertWithTitle:andMessage:");
}

id objc_msgSend__showMiniAlertWithRestart_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showMiniAlertWithRestart:withLanguage:");
}

id objc_msgSend__showModalWiFiSettings(void *a1, const char *a2, ...)
{
  return _[a1 _showModalWiFiSettings];
}

id objc_msgSend__showNavBarSpinner(void *a1, const char *a2, ...)
{
  return _[a1 _showNavBarSpinner];
}

id objc_msgSend__showOutOfSpaceError(void *a1, const char *a2, ...)
{
  return _[a1 _showOutOfSpaceError];
}

id objc_msgSend__showPairingCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showPairingCode:");
}

id objc_msgSend__showPasscodeOptionsSheet(void *a1, const char *a2, ...)
{
  return _[a1 _showPasscodeOptionsSheet];
}

id objc_msgSend__showProximityiCloudSignInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showProximityiCloudSignInController:");
}

id objc_msgSend__showSkipPasscodeAlert(void *a1, const char *a2, ...)
{
  return _[a1 _showSkipPasscodeAlert];
}

id objc_msgSend__showSpinnerPage_appearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSpinnerPage:appearanceHandler:");
}

id objc_msgSend__showSpinnerPageWithIdentifier_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSpinnerPageWithIdentifier:handler:");
}

id objc_msgSend__showTwoAccountsiCloudSignInController(void *a1, const char *a2, ...)
{
  return _[a1 _showTwoAccountsiCloudSignInController];
}

id objc_msgSend__showTwoAccountsiTunesSignInController(void *a1, const char *a2, ...)
{
  return _[a1 _showTwoAccountsiTunesSignInController];
}

id objc_msgSend__showWeakWarningAlert(void *a1, const char *a2, ...)
{
  return _[a1 _showWeakWarningAlert];
}

id objc_msgSend__signInCompleted_(void *a1, const char *a2, ...)
{
  return [a1 _signInCompleted:];
}

id objc_msgSend__signInFailedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInFailedWithError:");
}

id objc_msgSend__signInSucceeded(void *a1, const char *a2, ...)
{
  return _[a1 _signInSucceeded];
}

id objc_msgSend__signInToAccount(void *a1, const char *a2, ...)
{
  return _[a1 _signInToAccount];
}

id objc_msgSend__signInToAllServicesUsingContext_serviceOwnersManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInToAllServicesUsingContext:serviceOwnersManager:completion:");
}

id objc_msgSend__siriWantsToRun(void *a1, const char *a2, ...)
{
  return _[a1 _siriWantsToRun];
}

id objc_msgSend__sizeConsistentRowHeight(void *a1, const char *a2, ...)
{
  return _[a1 _sizeConsistentRowHeight];
}

id objc_msgSend__skipPressed_(void *a1, const char *a2, ...)
{
  return [a1 _skipPressed:];
}

id objc_msgSend__sortViewsForInterfaceDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortViewsForInterfaceDirection:");
}

id objc_msgSend__sourceHasAppleID(void *a1, const char *a2, ...)
{
  return _[a1 _sourceHasAppleID];
}

id objc_msgSend__stackHasOnlyCloudConfigurationItems(void *a1, const char *a2, ...)
{
  return _[a1 _stackHasOnlyCloudConfigurationItems];
}

id objc_msgSend__stageReboot(void *a1, const char *a2, ...)
{
  return _[a1 _stageReboot];
}

id objc_msgSend__startActivation(void *a1, const char *a2, ...)
{
  return _[a1 _startActivation];
}

id objc_msgSend__startActivationLockExpirationTimerForPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startActivationLockExpirationTimerForPage:");
}

id objc_msgSend__startDeviceMigration(void *a1, const char *a2, ...)
{
  return _[a1 _startDeviceMigration];
}

id objc_msgSend__startDisablingInteractionForExtendedInitialization(void *a1, const char *a2, ...)
{
  return _[a1 _startDisablingInteractionForExtendedInitialization];
}

id objc_msgSend__startFlow(void *a1, const char *a2, ...)
{
  return _[a1 _startFlow];
}

id objc_msgSend__startMigration(void *a1, const char *a2, ...)
{
  return _[a1 _startMigration];
}

id objc_msgSend__startMigrationIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _startMigrationIfPossible];
}

id objc_msgSend__startReturnToServiceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startReturnToServiceTimer];
}

id objc_msgSend__startSilentEscrowRecordRepairIfNecessaryWithAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSilentEscrowRecordRepairIfNecessaryWithAccount:completion:");
}

id objc_msgSend__startSpinningWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSpinningWithIdentifier:");
}

id objc_msgSend__stashAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 _stashAnalytics];
}

id objc_msgSend__stashPasteboard(void *a1, const char *a2, ...)
{
  return _[a1 _stashPasteboard];
}

id objc_msgSend__stateFont(void *a1, const char *a2, ...)
{
  return _[a1 _stateFont];
}

id objc_msgSend__stateStackViewAxis(void *a1, const char *a2, ...)
{
  return _[a1 _stateStackViewAxis];
}

id objc_msgSend__stateStringForFeature_withDataSource_withFeatureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateStringForFeature:withDataSource:withFeatureState:");
}

id objc_msgSend__stopActivationLockExpirationTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopActivationLockExpirationTimer];
}

id objc_msgSend__stopDisablingInteractionForExtendedInitialization(void *a1, const char *a2, ...)
{
  return _[a1 _stopDisablingInteractionForExtendedInitialization];
}

id objc_msgSend__stopSpinning(void *a1, const char *a2, ...)
{
  return _[a1 _stopSpinning];
}

id objc_msgSend__stopSpinningForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 _stopSpinningForIdentifier:];
}

id objc_msgSend__storeProfileDataAndCompleteDisclosure_(void *a1, const char *a2, ...)
{
  return [a1 _storeProfileDataAndCompleteDisclosure:];
}

id objc_msgSend__stringForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForFeature:");
}

id objc_msgSend__stringForStartupCause_(void *a1, const char *a2, ...)
{
  return [a1 _stringForStartupCause:];
}

id objc_msgSend__stringToKey_(void *a1, const char *a2, ...)
{
  return [a1 _stringToKey:];
}

id objc_msgSend__subTitleText(void *a1, const char *a2, ...)
{
  return _[a1 _subTitleText];
}

id objc_msgSend__subtitleFont(void *a1, const char *a2, ...)
{
  return _[a1 _subtitleFont];
}

id objc_msgSend__subtitleTextForMode_(void *a1, const char *a2, ...)
{
  return [a1 _subtitleTextForMode:];
}

id objc_msgSend__suggestSoftwareUpdateWithOSVersion_buildVersion_navigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestSoftwareUpdateWithOSVersion:buildVersion:navigationController:");
}

id objc_msgSend__suggestSoftwareUpdateWithSoftwareUpdateRequiredError_navigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestSoftwareUpdateWithSoftwareUpdateRequiredError:navigationController:");
}

id objc_msgSend__suggestedBackupForUDID_deviceClass_backups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestedBackupForUDID:deviceClass:backups:");
}

id objc_msgSend__suggestedBackupToRestore_(void *a1, const char *a2, ...)
{
  return [a1 _suggestedBackupToRestore:];
}

id objc_msgSend__supportsAlwaysOnHeySiri(void *a1, const char *a2, ...)
{
  return _[a1 _supportsAlwaysOnHeySiri];
}

id objc_msgSend__supportsCellularActivationForMethod_(void *a1, const char *a2, ...)
{
  return [a1 _supportsCellularActivationForMethod:];
}

id objc_msgSend__supportsDependentSetup_(void *a1, const char *a2, ...)
{
  return [a1 _supportsDependentSetup:];
}

id objc_msgSend__systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 _systemBackgroundColor];
}

id objc_msgSend__systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNamed:");
}

id objc_msgSend__tappedChoice_(void *a1, const char *a2, ...)
{
  return [a1 _tappedChoice:];
}

id objc_msgSend__targetDeviceTransferTask(void *a1, const char *a2, ...)
{
  return _[a1 _targetDeviceTransferTask];
}

id objc_msgSend__termsVersionFromObjectModel_(void *a1, const char *a2, ...)
{
  return [a1 _termsVersionFromObjectModel:];
}

id objc_msgSend__textChanged_(void *a1, const char *a2, ...)
{
  return [a1 _textChanged:];
}

id objc_msgSend__titleFont(void *a1, const char *a2, ...)
{
  return _[a1 _titleFont];
}

id objc_msgSend__titleForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleForViewController:");
}

id objc_msgSend__titleText(void *a1, const char *a2, ...)
{
  return _[a1 _titleText];
}

id objc_msgSend__titleTextForAuthMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleTextForAuthMode:");
}

id objc_msgSend__titleWithLocalDeviceClass_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleWithLocalDeviceClass:language:");
}

id objc_msgSend__topPaddingForSectionHeader(void *a1, const char *a2, ...)
{
  return _[a1 _topPaddingForSectionHeader];
}

id objc_msgSend__traceAnalyticsForGuideUserToBackup_foundBackup_polledForBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_traceAnalyticsForGuideUserToBackup:foundBackup:polledForBackup:");
}

id objc_msgSend__tryActivateWithOptions_requestMutator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryActivateWithOptions:requestMutator:");
}

id objc_msgSend__tryToInstallStoredProfileShouldCreateEscrowIfNeeded_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryToInstallStoredProfileShouldCreateEscrowIfNeeded:completion:");
}

id objc_msgSend__unmarkFlowItemAsFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmarkFlowItemAsFinished:");
}

id objc_msgSend__updateActions(void *a1, const char *a2, ...)
{
  return _[a1 _updateActions];
}

id objc_msgSend__updateActivationMethod(void *a1, const char *a2, ...)
{
  return _[a1 _updateActivationMethod];
}

id objc_msgSend__updateAgreedTerms_(void *a1, const char *a2, ...)
{
  return [a1 _updateAgreedTerms:];
}

id objc_msgSend__updateAnalyticsWithChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAnalyticsWithChoice:");
}

id objc_msgSend__updateChromelessBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChromelessBar:");
}

id objc_msgSend__updateClassList(void *a1, const char *a2, ...)
{
  return _[a1 _updateClassList];
}

id objc_msgSend__updateClassListWithPasscodeShownInitially_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateClassListWithPasscodeShownInitially:");
}

id objc_msgSend__updateContentLabelLayout(void *a1, const char *a2, ...)
{
  return _[a1 _updateContentLabelLayout];
}

id objc_msgSend__updateDimmingViewForProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDimmingViewForProgress:");
}

id objc_msgSend__updateDots(void *a1, const char *a2, ...)
{
  return _[a1 _updateDots];
}

id objc_msgSend__updateFillColor(void *a1, const char *a2, ...)
{
  return _[a1 _updateFillColor];
}

id objc_msgSend__updateForLocation_interactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateForLocation:interactive:");
}

id objc_msgSend__updateHeaderForConnectedToComputer_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeaderForConnectedToComputer:animated:");
}

id objc_msgSend__updateHumanReadableName(void *a1, const char *a2, ...)
{
  return _[a1 _updateHumanReadableName];
}

id objc_msgSend__updateImageViewHeight(void *a1, const char *a2, ...)
{
  return _[a1 _updateImageViewHeight];
}

id objc_msgSend__updateImageViewPadding(void *a1, const char *a2, ...)
{
  return _[a1 _updateImageViewPadding];
}

id objc_msgSend__updateIsOptional(void *a1, const char *a2, ...)
{
  return _[a1 _updateIsOptional];
}

id objc_msgSend__updateLanguageList(void *a1, const char *a2, ...)
{
  return _[a1 _updateLanguageList];
}

id objc_msgSend__updateLayout(void *a1, const char *a2, ...)
{
  return _[a1 _updateLayout];
}

id objc_msgSend__updateNavigationBackButtonTitleForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationBackButtonTitleForViewController:");
}

id objc_msgSend__updateNavigationBarBackButtonIfNeeded_forViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationBarBackButtonIfNeeded:forViewController:");
}

id objc_msgSend__updateNavigationBarBackgroundIfNeeded_forViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationBarBackgroundIfNeeded:forViewController:");
}

id objc_msgSend__updateNextButton(void *a1, const char *a2, ...)
{
  return _[a1 _updateNextButton];
}

id objc_msgSend__updateNextButtonForPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNextButtonForPasscode:");
}

id objc_msgSend__updateSelectedChoiceCheckmark(void *a1, const char *a2, ...)
{
  return _[a1 _updateSelectedChoiceCheckmark];
}

id objc_msgSend__updateSelectedChoiceCheckmarkWithtableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelectedChoiceCheckmarkWithtableView:");
}

id objc_msgSend__updateSkipKeysWithCachedDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSkipKeysWithCachedDetails:");
}

id objc_msgSend__updateTable_toMatchArray_withVisibleArray_maxVisible_fromOldSection_toNewSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTable:toMatchArray:withVisibleArray:maxVisible:fromOldSection:toNewSection:");
}

id objc_msgSend__updateView(void *a1, const char *a2, ...)
{
  return _[a1 _updateView];
}

id objc_msgSend__updateViewContainerForAccessibilityOptions_contents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewContainerForAccessibilityOptions:contents:");
}

id objc_msgSend__updatedMessageSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatedMessageSession:");
}

id objc_msgSend__upgradeAccountWithAuthenticationResults_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeAccountWithAuthenticationResults:completion:");
}

id objc_msgSend__useCompactMode(void *a1, const char *a2, ...)
{
  return _[a1 _useCompactMode];
}

id objc_msgSend__useSideButton(void *a1, const char *a2, ...)
{
  return _[a1 _useSideButton];
}

id objc_msgSend__useTableLayout(void *a1, const char *a2, ...)
{
  return _[a1 _useTableLayout];
}

id objc_msgSend__userAgreedToTCs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userAgreedToTCs:");
}

id objc_msgSend__userFriendlyDisplayNameForCurrentUserName_(void *a1, const char *a2, ...)
{
  return [a1 _userFriendlyDisplayNameForCurrentUserName];
}

id objc_msgSend__userRespondedToCombinedTCsWithAgreement_withSLAVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userRespondedToCombinedTCsWithAgreement:withSLAVersion:");
}

id objc_msgSend__userSelectedLocale_localePaneScrollOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userSelectedLocale:localePaneScrollOffset:");
}

id objc_msgSend__validateBackupIsCompatible_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateBackupIsCompatible:completion:");
}

id objc_msgSend__validatePasscode_(void *a1, const char *a2, ...)
{
  return [a1 _validatePasscode:];
}

id objc_msgSend__valueForKey_outputData_outputSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:outputData:outputSize:");
}

id objc_msgSend__viewControllerForBuddyController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerForBuddyController:");
}

id objc_msgSend__waitForKeychainAndPreflight(void *a1, const char *a2, ...)
{
  return _[a1 _waitForKeychainAndPreflight];
}

id objc_msgSend__waitForPreflight(void *a1, const char *a2, ...)
{
  return _[a1 _waitForPreflight];
}

id objc_msgSend__welcomeGradientShouldAdjustBuddyColor(void *a1, const char *a2, ...)
{
  return _[a1 _welcomeGradientShouldAdjustBuddyColor];
}

id objc_msgSend__welcomeKitDidFinishWithSuccess_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_welcomeKitDidFinishWithSuccess:settings:");
}

id objc_msgSend__willEndLifecycleForDataTransfer(void *a1, const char *a2, ...)
{
  return _[a1 _willEndLifecycleForDataTransfer];
}

id objc_msgSend__willStartResponsibilityViewControllerPushSession(void *a1, const char *a2, ...)
{
  return _[a1 _willStartResponsibilityViewControllerPushSession];
}

id objc_msgSend__writeAcknowledgment(void *a1, const char *a2, ...)
{
  return _[a1 _writeAcknowledgment];
}

id objc_msgSend__writeData_writeDataSize_forKey_(void *a1, const char *a2, ...)
{
  return [a1 _writeData:writeDataSize:forKey:];
}

id objc_msgSend__writeGreenInformedDefaultPlistIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _writeGreenInformedDefaultPlistIfNecessary];
}

id objc_msgSend__writeGreenInformedDefaultPlistIfNecessaryForLocaleCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeGreenInformedDefaultPlistIfNecessaryForLocaleCountryCode:");
}

id objc_msgSend__writeOutCurrentPrivacyVersion(void *a1, const char *a2, ...)
{
  return _[a1 _writeOutCurrentPrivacyVersion];
}

id objc_msgSend__writeOutDictationDefaults(void *a1, const char *a2, ...)
{
  return _[a1 _writeOutDictationDefaults];
}

id objc_msgSend__writeValuesForKeysToIdMS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeValuesForKeysToIdMS:");
}

id objc_msgSend_aa_accountsEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return [a1 aa_accountsEnabledForDataclass];
}

id objc_msgSend_aa_ageCategory(void *a1, const char *a2, ...)
{
  return [a1 aa_ageCategory];
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return [a1 aa_altDSID];
}

id objc_msgSend_aa_authToken(void *a1, const char *a2, ...)
{
  return [a1 aa_authToken];
}

id objc_msgSend_aa_firstName(void *a1, const char *a2, ...)
{
  return [a1 aa_firstName];
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return [a1 aa_isAccountClass:];
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return [a1 aa_isManagedAppleID];
}

id objc_msgSend_aa_lastAgreedTermsInfo(void *a1, const char *a2, ...)
{
  return [a1 aa_lastAgreedTermsInfo];
}

id objc_msgSend_aa_lastName(void *a1, const char *a2, ...)
{
  return [a1 aa_lastName];
}

id objc_msgSend_aa_password(void *a1, const char *a2, ...)
{
  return [a1 aa_password];
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return [a1 aa_personID];
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryAppleAccount];
}

id objc_msgSend_aa_primaryAppleAccountWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryAppleAccountWithCompletion:];
}

id objc_msgSend_aa_primaryEmail(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryEmail];
}

id objc_msgSend_aa_repairState(void *a1, const char *a2, ...)
{
  return [a1 aa_repairState];
}

id objc_msgSend_aa_setPrimaryAccount_(void *a1, const char *a2, ...)
{
  return [a1 aa_setPrimaryAccount];
}

id objc_msgSend_aa_setUsesCloudDocs_(void *a1, const char *a2, ...)
{
  return [a1 aa_setUsesCloudDocs:];
}

id objc_msgSend_aa_updatePropertiesForAppleAccount_completion_(void *a1, const char *a2, ...)
{
  return [a1 aa_updatePropertiesForAppleAccount:completion:];
}

id objc_msgSend_ableToMigrateWithUpdate(void *a1, const char *a2, ...)
{
  return _[a1 ableToMigrateWithUpdate];
}

id objc_msgSend_ableToRestoreWithUpdate(void *a1, const char *a2, ...)
{
  return _[a1 ableToRestoreWithUpdate];
}

id objc_msgSend_aboutConfigurationContainerController(void *a1, const char *a2, ...)
{
  return _[a1 aboutConfigurationContainerController];
}

id objc_msgSend_aboutController(void *a1, const char *a2, ...)
{
  return _[a1 aboutController];
}

id objc_msgSend_aboutRemoteManagementContentView(void *a1, const char *a2, ...)
{
  return _[a1 aboutRemoteManagementContentView];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURLWithString_(void *a1, const char *a2, ...)
{
  return [a1 absoluteURLWithString:];
}

id objc_msgSend_acceptWeakPasscode_(void *a1, const char *a2, ...)
{
  return [a1 acceptWeakPasscode:];
}

id objc_msgSend_accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityIdentifier];
}

id objc_msgSend_accessibilitySettings(void *a1, const char *a2, ...)
{
  return _[a1 accessibilitySettings];
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityTraits];
}

id objc_msgSend_accessibilityViewController(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityViewController];
}

id objc_msgSend_accessoryButton(void *a1, const char *a2, ...)
{
  return _[a1 accessoryButton];
}

id objc_msgSend_accessoryView(void *a1, const char *a2, ...)
{
  return _[a1 accessoryView];
}

id objc_msgSend_accessoryViewAndPaddingHeight(void *a1, const char *a2, ...)
{
  return _[a1 accessoryViewAndPaddingHeight];
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_accountEligibleForUpdate(void *a1, const char *a2, ...)
{
  return _[a1 accountEligibleForUpdate];
}

id objc_msgSend_accountForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 accountForSecurityUpgrade];
}

id objc_msgSend_accountForService_(void *a1, const char *a2, ...)
{
  return [a1 accountForService:];
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _[a1 accountName];
}

id objc_msgSend_accountOperationsQueue(void *a1, const char *a2, ...)
{
  return _[a1 accountOperationsQueue];
}

id objc_msgSend_accountProperties(void *a1, const char *a2, ...)
{
  return _[a1 accountProperties];
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _[a1 accountStore];
}

id objc_msgSend_accountToRepair(void *a1, const char *a2, ...)
{
  return _[a1 accountToRepair];
}

id objc_msgSend_accountToUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 accountToUpgrade];
}

id objc_msgSend_accountToUpgradeIsPrimary(void *a1, const char *a2, ...)
{
  return _[a1 accountToUpgradeIsPrimary];
}

id objc_msgSend_accountTools(void *a1, const char *a2, ...)
{
  return _[a1 accountTools];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accountTypeSelectedBlock(void *a1, const char *a2, ...)
{
  return _[a1 accountTypeSelectedBlock];
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 accountTypeWithAccountTypeIdentifier:];
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 accountWithIdentifier:];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsQueue(void *a1, const char *a2, ...)
{
  return _[a1 accountsQueue];
}

id objc_msgSend_acknowledge(void *a1, const char *a2, ...)
{
  return _[a1 acknowledge];
}

id objc_msgSend_acknowledgementNeededForPrivacyIdentifier_account_(void *a1, const char *a2, ...)
{
  return [a1 acknowledgementNeededForPrivacyIdentifier:account:];
}

id objc_msgSend_acquireSecureAppAssertionWithType_errorHandler_(void *a1, const char *a2, ...)
{
  return [a1 acquireSecureAppAssertionWithType:errorHandler:];
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithError:];
}

id objc_msgSend_actionButtonData(void *a1, const char *a2, ...)
{
  return _[a1 actionButtonData];
}

id objc_msgSend_actionString(void *a1, const char *a2, ...)
{
  return _[a1 actionString];
}

id objc_msgSend_actionTypeForStarting_endingDataSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionTypeForStarting:endingDataSet:");
}

id objc_msgSend_actionWithReason_options_targetURL_(void *a1, const char *a2, ...)
{
  return [a1 actionWithReason:options:targetURL:];
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return [a1 actionWithTitle:style:handler:];
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return [a1 activateConstraints:];
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 activateWithCompletion:];
}

id objc_msgSend_activateWithData_headers_completion_(void *a1, const char *a2, ...)
{
  return [a1 activateWithData:headers:completion:];
}

id objc_msgSend_activateWithTemplateMessageSession_completion_(void *a1, const char *a2, ...)
{
  return [a1 activateWithTemplateMessageSession:completion:];
}

id objc_msgSend_activationConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 activationConfiguration];
}

id objc_msgSend_activationConfigurationChanged_isActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationConfigurationChanged:isActivated:");
}

id objc_msgSend_activationEngine(void *a1, const char *a2, ...)
{
  return _[a1 activationEngine];
}

id objc_msgSend_activationFinishedWithData_responseHeaders_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationFinishedWithData:responseHeaders:error:completionHandler:");
}

id objc_msgSend_activationLockInfoFromDeviceWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationLockInfoFromDeviceWithCompletion:");
}

id objc_msgSend_activationMethodChanged(void *a1, const char *a2, ...)
{
  return _[a1 activationMethodChanged];
}

id objc_msgSend_activationPlanRequest(void *a1, const char *a2, ...)
{
  return _[a1 activationPlanRequest];
}

id objc_msgSend_activationRecord(void *a1, const char *a2, ...)
{
  return _[a1 activationRecord];
}

id objc_msgSend_activationRecordIndicatesCloudConfigurationIsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 activationRecordIndicatesCloudConfigurationIsAvailable];
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _[a1 activationState];
}

id objc_msgSend_activationStateQueue(void *a1, const char *a2, ...)
{
  return _[a1 activationStateQueue];
}

id objc_msgSend_activatorUsingWiFi(void *a1, const char *a2, ...)
{
  return _[a1 activatorUsingWiFi];
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeAccount];
}

id objc_msgSend_activeAppleID(void *a1, const char *a2, ...)
{
  return _[a1 activeAppleID];
}

id objc_msgSend_activeBuddyStoreAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeBuddyStoreAccount];
}

id objc_msgSend_activeDuration(void *a1, const char *a2, ...)
{
  return _[a1 activeDuration];
}

id objc_msgSend_activeInputModes(void *a1, const char *a2, ...)
{
  return _[a1 activeInputModes];
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 activeInterfaceOrientation];
}

id objc_msgSend_activeKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 activeKeyboard];
}

id objc_msgSend_activeStartTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 activeStartTimestamp];
}

id objc_msgSend_activeStoreAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeStoreAccount];
}

id objc_msgSend_activeTextField(void *a1, const char *a2, ...)
{
  return _[a1 activeTextField];
}

id objc_msgSend_activityIndicator(void *a1, const char *a2, ...)
{
  return _[a1 activityIndicator];
}

id objc_msgSend_activityLabel(void *a1, const char *a2, ...)
{
  return _[a1 activityLabel];
}

id objc_msgSend_addAccessoryButton_(void *a1, const char *a2, ...)
{
  return [a1 addAccessoryButton:];
}

id objc_msgSend_addAccountHeadersToRequest_(void *a1, const char *a2, ...)
{
  return [a1 addAccountHeadersToRequest];
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return [a1 addAction:];
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return [a1 addAnimation:forKey:];
}

id objc_msgSend_addArrangedSubview_(void *a1, const char *a2, ...)
{
  return [a1 addArrangedSubview:];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttribute:value:range:];
}

id objc_msgSend_addAttributes_range_(void *a1, const char *a2, ...)
{
  return [a1 addAttributes:range:];
}

id objc_msgSend_addBagKey_valueType_(void *a1, const char *a2, ...)
{
  return [a1 addBagKey:valueType:];
}

id objc_msgSend_addBoldButton_action_(void *a1, const char *a2, ...)
{
  return [a1 addBoldButton:action:];
}

id objc_msgSend_addBulletedListItemWithTitle_description_image_(void *a1, const char *a2, ...)
{
  return [a1 addBulletedListItemWithTitle:description:image:];
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return [a1 addButton:];
}

id objc_msgSend_addButtonWithTitle_style_action_(void *a1, const char *a2, ...)
{
  return [a1 addButtonWithTitle:style:action:];
}

id objc_msgSend_addCardCell_(void *a1, const char *a2, ...)
{
  return [a1 addCardCell:];
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return [a1 addChildViewController:];
}

id objc_msgSend_addConstraint_(void *a1, const char *a2, ...)
{
  return [a1 addConstraint:];
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return [a1 addConstraints:];
}

id objc_msgSend_addContentSubView_heightConstraintForLayout_(void *a1, const char *a2, ...)
{
  return [a1 addContentSubView:heightConstraintForLayout:];
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:];
}

id objc_msgSend_addDelegateObserver_(void *a1, const char *a2, ...)
{
  return [a1 addDelegateObserver];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addEraseEventWithAnalyticsManager_paneIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 addEraseEventWithAnalyticsManager:paneIdentifier:];
}

id objc_msgSend_addEvent_withPayload_persist_(void *a1, const char *a2, ...)
{
  return [a1 addEvent:withPayload:persist:];
}

id objc_msgSend_addEventUsingAnalyticsManager_(void *a1, const char *a2, ...)
{
  return [a1 addEventUsingAnalyticsManager:];
}

id objc_msgSend_addEventsUsingAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventsUsingAnalyticsManager:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return [a1 addFinishBlock:];
}

id objc_msgSend_addFooterLinkWithTitle_handler_(void *a1, const char *a2, ...)
{
  return [a1 addFooterLinkWithTitle:handler:];
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 addGestureRecognizer:];
}

id objc_msgSend_addLinkButton_action_(void *a1, const char *a2, ...)
{
  return [a1 addLinkButton:action:];
}

id objc_msgSend_addLinkWithTitle_handler_(void *a1, const char *a2, ...)
{
  return [a1 addLinkWithTitle:handler:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:selector:name:object:];
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addObserverForName:object:queue:usingBlock:];
}

id objc_msgSend_addPairingStyleToggleButtonBelowView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPairingStyleToggleButtonBelowView:");
}

id objc_msgSend_addPlanWith_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 addPlanWith:completionHandler:];
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return [a1 addPointer:];
}

id objc_msgSend_addPowerLogEvent_withPayload_(void *a1, const char *a2, ...)
{
  return [a1 addPowerLogEvent:withPayload:];
}

id objc_msgSend_addRestartEventWithAnalyticsManager_paneIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 addRestartEventWithAnalyticsManager:paneIdentifier:];
}

id objc_msgSend_addService_description_(void *a1, const char *a2, ...)
{
  return [a1 addService:description:];
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return [a1 addSublayer:];
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return [a1 addSubview:];
}

id objc_msgSend_addTarget_action_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:];
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:forControlEvents:];
}

id objc_msgSend_addTarget_action_forEvents_(void *a1, const char *a2, ...)
{
  return [a1 addTarget:action:forEvents:];
}

id objc_msgSend_addToCollectionCellWithTableView_(void *a1, const char *a2, ...)
{
  return [a1 addToCollectionCellWithTableView:];
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return [a1 addToRunLoop:forMode:];
}

id objc_msgSend_addWirelessNetworks(void *a1, const char *a2, ...)
{
  return _[a1 addWirelessNetworks];
}

id objc_msgSend_additionLabel(void *a1, const char *a2, ...)
{
  return _[a1 additionLabel];
}

id objc_msgSend_additionViewControllerCompleted(void *a1, const char *a2, ...)
{
  return _[a1 additionViewControllerCompleted];
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 administrativeArea];
}

id objc_msgSend_agreeToRemoteUIDialog(void *a1, const char *a2, ...)
{
  return _[a1 agreeToRemoteUIDialog];
}

id objc_msgSend_agreeURL(void *a1, const char *a2, ...)
{
  return _[a1 agreeURL];
}

id objc_msgSend_airTrafficConnection(void *a1, const char *a2, ...)
{
  return _[a1 airTrafficConnection];
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _[a1 airplaneMode];
}

id objc_msgSend_airplaneModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 airplaneModeEnabled];
}

id objc_msgSend_alert(void *a1, const char *a2, ...)
{
  return _[a1 alert];
}

id objc_msgSend_alertController(void *a1, const char *a2, ...)
{
  return _[a1 alertController];
}

id objc_msgSend_alertControllerForNetworkConnectionWithProvider_estimatedRestoreSize_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerForNetworkConnectionWithProvider:estimatedRestoreSize:];
}

id objc_msgSend_alertControllerForSource_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerForSource];
}

id objc_msgSend_alertControllerForTargetWithNeedsErase_completion_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerForTargetWithNeedsErase:completion:];
}

id objc_msgSend_alertControllerForUnsupportedNetworkWithCellularRestoreSupport_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerForUnsupportedNetworkWithCellularRestoreSupport];
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return [a1 alertControllerWithTitle:message:preferredStyle:];
}

id objc_msgSend_alertControllerWithWindow_navigationController_proximitySetupController_analyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithWindow:navigationController:proximitySetupController:analyticsManager:");
}

id objc_msgSend_alertForBackupError_forBackup_okButtonAction_(void *a1, const char *a2, ...)
{
  return [a1 alertForBackupError:forBackup:okButtonAction:];
}

id objc_msgSend_alertForBackupError_okButtonAction_(void *a1, const char *a2, ...)
{
  return [a1 alertForBackupError:okButtonAction:];
}

id objc_msgSend_allButtons(void *a1, const char *a2, ...)
{
  return _[a1 allButtons];
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHTTPHeaderFields];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allSiriLanguageCodesForSystemLanguageCode_isGoodFit_(void *a1, const char *a2, ...)
{
  return [a1 allSiriLanguageCodesForSystemLanguageCode:isGoodFit:];
}

id objc_msgSend_allowAnyMAIDToSignIn(void *a1, const char *a2, ...)
{
  return _[a1 allowAnyMAIDToSignIn];
}

id objc_msgSend_allowBack(void *a1, const char *a2, ...)
{
  return _[a1 allowBack];
}

id objc_msgSend_allowCellularNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowCellularNetwork];
}

id objc_msgSend_allowDismissalForExit(void *a1, const char *a2, ...)
{
  return _[a1 allowDismissalForExit];
}

id objc_msgSend_allowInteraction(void *a1, const char *a2, ...)
{
  return _[a1 allowInteraction];
}

id objc_msgSend_allowManualRowHeight(void *a1, const char *a2, ...)
{
  return _[a1 allowManualRowHeight];
}

id objc_msgSend_allowMoreOn5G(void *a1, const char *a2, ...)
{
  return _[a1 allowMoreOn5G];
}

id objc_msgSend_allowSIMUnlock(void *a1, const char *a2, ...)
{
  return _[a1 allowSIMUnlock];
}

id objc_msgSend_allowSkip(void *a1, const char *a2, ...)
{
  return _[a1 allowSkip];
}

id objc_msgSend_allowUserToInstallTonight(void *a1, const char *a2, ...)
{
  return _[a1 allowUserToInstallTonight];
}

id objc_msgSend_allowUserToSkip(void *a1, const char *a2, ...)
{
  return _[a1 allowUserToSkip];
}

id objc_msgSend_allowedFlowItems(void *a1, const char *a2, ...)
{
  return _[a1 allowedFlowItems];
}

id objc_msgSend_allowedTerminationSources(void *a1, const char *a2, ...)
{
  return _[a1 allowedTerminationSources];
}

id objc_msgSend_allowsSkip(void *a1, const char *a2, ...)
{
  return _[a1 allowsSkip];
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _[a1 alpha];
}

id objc_msgSend_alphaForBuddyBackgroundStyle_(void *a1, const char *a2, ...)
{
  return [a1 alphaForBuddyBackgroundStyle:];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return [a1 altDSIDForAccount:];
}

id objc_msgSend_alternateDSID(void *a1, const char *a2, ...)
{
  return _[a1 alternateDSID];
}

id objc_msgSend_alternateUpdate(void *a1, const char *a2, ...)
{
  return _[a1 alternateUpdate];
}

id objc_msgSend_alternateUpdateError(void *a1, const char *a2, ...)
{
  return _[a1 alternateUpdateError];
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return [a1 ams_DSID];
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return [a1 ams_activeiTunesAccount];
}

id objc_msgSend_ams_altDSID(void *a1, const char *a2, ...)
{
  return [a1 ams_altDSID];
}

id objc_msgSend_ams_iTunesAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return [a1 ams_iTunesAccountWithAltDSID];
}

id objc_msgSend_ams_iTunesAccountWithUsername_(void *a1, const char *a2, ...)
{
  return [a1 ams_iTunesAccountWithUsername:];
}

id objc_msgSend_ams_isBundleOwner(void *a1, const char *a2, ...)
{
  return [a1 ams_isBundleOwner];
}

id objc_msgSend_ams_sharedAccountStore(void *a1, const char *a2, ...)
{
  return [a1 ams_sharedAccountStore];
}

id objc_msgSend_analyticsEventAppearance(void *a1, const char *a2, ...)
{
  return _[a1 analyticsEventAppearance];
}

id objc_msgSend_analyticsManager(void *a1, const char *a2, ...)
{
  return _[a1 analyticsManager];
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateAlongsideTransition:];
}

id objc_msgSend_animateAlongsideTransitionInView_animation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransitionInView:animation:completion:");
}

id objc_msgSend_animateDetailText_animationType_heightDifference_(void *a1, const char *a2, ...)
{
  return [a1 animateDetailText:animationType:heightDifference:];
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:];
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:animations:completion:];
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateWithDuration:delay:options:animations:completion:];
}

id objc_msgSend_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:");
}

id objc_msgSend_animationController(void *a1, const char *a2, ...)
{
  return _[a1 animationController];
}

id objc_msgSend_animationView(void *a1, const char *a2, ...)
{
  return _[a1 animationView];
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 animationWithKeyPath:];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_anyRequestLoading(void *a1, const char *a2, ...)
{
  return _[a1 anyRequestLoading];
}

id objc_msgSend_appAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _[a1 appAnalyticsOptIn];
}

id objc_msgSend_appStoreController(void *a1, const char *a2, ...)
{
  return _[a1 appStoreController];
}

id objc_msgSend_appearanceMode(void *a1, const char *a2, ...)
{
  return _[a1 appearanceMode];
}

id objc_msgSend_appearanceModeProvider(void *a1, const char *a2, ...)
{
  return _[a1 appearanceModeProvider];
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return [a1 appendAttributedString:];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_appleIDController(void *a1, const char *a2, ...)
{
  return _[a1 appleIDController];
}

id objc_msgSend_appleIDController_didAuthenticateForCredentialRecovery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDController:didAuthenticateForCredentialRecovery:");
}

id objc_msgSend_appleIDController_failedWithError_(void *a1, const char *a2, ...)
{
  return [a1 appleIDController:failedWithError:];
}

id objc_msgSend_appleIDControllerFinished_(void *a1, const char *a2, ...)
{
  return [a1 appleIDControllerFinished:];
}

id objc_msgSend_appleIDControllerWantsChoiceController_(void *a1, const char *a2, ...)
{
  return [a1 appleIDControllerWantsChoiceController:];
}

id objc_msgSend_appleIDHeadersForRequest_(void *a1, const char *a2, ...)
{
  return [a1 appleIDHeadersForRequest:];
}

id objc_msgSend_appleIDMap(void *a1, const char *a2, ...)
{
  return _[a1 appleIDMap];
}

id objc_msgSend_appleIDs(void *a1, const char *a2, ...)
{
  return _[a1 appleIDs];
}

id objc_msgSend_applicableDispositions(void *a1, const char *a2, ...)
{
  return _[a1 applicableDispositions];
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _[a1 applicationState];
}

id objc_msgSend_applyDataSourceSetting_forFeature_(void *a1, const char *a2, ...)
{
  return [a1 applyDataSourceSetting:forFeature:];
}

id objc_msgSend_applyExpressSettings(void *a1, const char *a2, ...)
{
  return _[a1 applyExpressSettings];
}

id objc_msgSend_applyHandlers_(void *a1, const char *a2, ...)
{
  return [a1 applyHandlers:];
}

id objc_msgSend_applySettings(void *a1, const char *a2, ...)
{
  return _[a1 applySettings];
}

id objc_msgSend_applyThemeToAllTableViews(void *a1, const char *a2, ...)
{
  return _[a1 applyThemeToAllTableViews];
}

id objc_msgSend_applyThemeToLabel_(void *a1, const char *a2, ...)
{
  return [a1 applyThemeToLabel:];
}

id objc_msgSend_applyThemeToNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToNavigationController:");
}

id objc_msgSend_applyThemeToTableCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToTableCell:");
}

id objc_msgSend_applyThemeToTitleLabel_(void *a1, const char *a2, ...)
{
  return [a1 applyThemeToTitleLabel:];
}

id objc_msgSend_applyToObjectModel_(void *a1, const char *a2, ...)
{
  return [a1 applyToObjectModel:];
}

id objc_msgSend_applyingProximitySettings(void *a1, const char *a2, ...)
{
  return _[a1 applyingProximitySettings];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [a1 archivedDataWithRootObject:requiringSecureCoding:error:];
}

id objc_msgSend_arrangedSubviews(void *a1, const char *a2, ...)
{
  return _[a1 arrangedSubviews];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayByAddingObjectsFromArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_aspectRatio(void *a1, const char *a2, ...)
{
  return _[a1 aspectRatio];
}

id objc_msgSend_assertion(void *a1, const char *a2, ...)
{
  return _[a1 assertion];
}

id objc_msgSend_assistantIsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistantIsEnabled];
}

id objc_msgSend_assumeNetworkReachabilityOverWiFi(void *a1, const char *a2, ...)
{
  return _[a1 assumeNetworkReachabilityOverWiFi];
}

id objc_msgSend_assumeResponsibilityForRUIPage(void *a1, const char *a2, ...)
{
  return _[a1 assumeResponsibilityForRUIPage];
}

id objc_msgSend_attemptValidationWithPIN_(void *a1, const char *a2, ...)
{
  return [a1 attemptValidationWithPIN:];
}

id objc_msgSend_attemptedBackupItem(void *a1, const char *a2, ...)
{
  return _[a1 attemptedBackupItem];
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return [a1 attributeWithDomain:name:];
}

id objc_msgSend_attributedSubTitleText(void *a1, const char *a2, ...)
{
  return _[a1 attributedSubTitleText];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_authAttemptLandingViewController(void *a1, const char *a2, ...)
{
  return _[a1 authAttemptLandingViewController];
}

id objc_msgSend_authContext(void *a1, const char *a2, ...)
{
  return _[a1 authContext];
}

id objc_msgSend_authKitAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return [a1 authKitAccountWithAltDSID:];
}

id objc_msgSend_authManager(void *a1, const char *a2, ...)
{
  return _[a1 authManager];
}

id objc_msgSend_authModeHandler(void *a1, const char *a2, ...)
{
  return _[a1 authModeHandler];
}

id objc_msgSend_authResults(void *a1, const char *a2, ...)
{
  return _[a1 authResults];
}

id objc_msgSend_authenticateForAccountCreationWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateForAccountCreationWithCompletion:];
}

id objc_msgSend_authenticateForCredentialRecoveryWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateForCredentialRecoveryWithCompletion:");
}

id objc_msgSend_authenticateThenSignInWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateThenSignInWithCompletion:];
}

id objc_msgSend_authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateWithContext:completion:];
}

id objc_msgSend_authenticateWithProximity_(void *a1, const char *a2, ...)
{
  return [a1 authenticateWithProximity:];
}

id objc_msgSend_authenticateWithSignInController_username_password_altDSID_completion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateWithSignInController:username:password:altDSID:completion:];
}

id objc_msgSend_authenticateWithSignInController_username_password_completion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateWithSignInController:username:password:completion:];
}

id objc_msgSend_authenticateWithUsername_companionDevice_anisetteDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithUsername:companionDevice:anisetteDataProvider:completion:");
}

id objc_msgSend_authenticateWithUsername_password_completion_(void *a1, const char *a2, ...)
{
  return [a1 authenticateWithUsername:password:completion:];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_autoDownloadEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoDownloadEnabled];
}

id objc_msgSend_autoInstallTimeRemaining(void *a1, const char *a2, ...)
{
  return _[a1 autoInstallTimeRemaining];
}

id objc_msgSend_autoUpdateEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoUpdateEnabled];
}

id objc_msgSend_automaticTimeZoneEnabled(void *a1, const char *a2, ...)
{
  return _[a1 automaticTimeZoneEnabled];
}

id objc_msgSend_automaticUpdateScheduled(void *a1, const char *a2, ...)
{
  return _[a1 automaticUpdateScheduled];
}

id objc_msgSend_available(void *a1, const char *a2, ...)
{
  return _[a1 available];
}

id objc_msgSend_availableData(void *a1, const char *a2, ...)
{
  return _[a1 availableData];
}

id objc_msgSend_availableUpdateVersion(void *a1, const char *a2, ...)
{
  return _[a1 availableUpdateVersion];
}

id objc_msgSend_awaitUserConfigurationController(void *a1, const char *a2, ...)
{
  return _[a1 awaitUserConfigurationController];
}

id objc_msgSend_awaitUserConfigurationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 awaitUserConfigurationEnabled];
}

id objc_msgSend_awaitUserConfigurationViewController(void *a1, const char *a2, ...)
{
  return _[a1 awaitUserConfigurationViewController];
}

id objc_msgSend_backButtonTitle(void *a1, const char *a2, ...)
{
  return _[a1 backButtonTitle];
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColor];
}

id objc_msgSend_backgroundDuration(void *a1, const char *a2, ...)
{
  return _[a1 backgroundDuration];
}

id objc_msgSend_backgroundStartTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 backgroundStartTimestamp];
}

id objc_msgSend_backgroundViewController(void *a1, const char *a2, ...)
{
  return _[a1 backgroundViewController];
}

id objc_msgSend_backgroundViewControllerPresented(void *a1, const char *a2, ...)
{
  return _[a1 backgroundViewControllerPresented];
}

id objc_msgSend_backingLanguageComposite(void *a1, const char *a2, ...)
{
  return _[a1 backingLanguageComposite];
}

id objc_msgSend_backingLocaleComposite(void *a1, const char *a2, ...)
{
  return _[a1 backingLocaleComposite];
}

id objc_msgSend_backingStore(void *a1, const char *a2, ...)
{
  return _[a1 backingStore];
}

id objc_msgSend_backingUpDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 backingUpDeviceName];
}

id objc_msgSend_backingUpDeviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 backingUpDeviceUUID];
}

id objc_msgSend_backingViewController(void *a1, const char *a2, ...)
{
  return _[a1 backingViewController];
}

id objc_msgSend_backlightState(void *a1, const char *a2, ...)
{
  return _[a1 backlightState];
}

id objc_msgSend_backup(void *a1, const char *a2, ...)
{
  return _[a1 backup];
}

id objc_msgSend_backupDataSource(void *a1, const char *a2, ...)
{
  return _[a1 backupDataSource];
}

id objc_msgSend_backupDeviceController(void *a1, const char *a2, ...)
{
  return _[a1 backupDeviceController];
}

id objc_msgSend_backupDeviceController_backupCompletedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupDeviceController:backupCompletedWithError:");
}

id objc_msgSend_backupFinished(void *a1, const char *a2, ...)
{
  return _[a1 backupFinished];
}

id objc_msgSend_backupForUUID_backups_(void *a1, const char *a2, ...)
{
  return [a1 backupForUUID:backups:];
}

id objc_msgSend_backupForUUID_withManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupForUUID:withManager:error:");
}

id objc_msgSend_backupItem(void *a1, const char *a2, ...)
{
  return _[a1 backupItem];
}

id objc_msgSend_backupManager(void *a1, const char *a2, ...)
{
  return _[a1 backupManager];
}

id objc_msgSend_backupMetadata(void *a1, const char *a2, ...)
{
  return _[a1 backupMetadata];
}