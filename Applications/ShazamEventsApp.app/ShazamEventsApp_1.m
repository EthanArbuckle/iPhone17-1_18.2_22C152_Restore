uint64_t sub_1000BBF98()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  swift_retain();
  v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000BC034;
  return sub_1001272A0();
}

uint64_t sub_1000BC034()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    v5 = sub_1000BC244;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    v5 = sub_1000BC150;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000BC150()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  if (v1)
  {
    swift_retain();
    uint64_t v2 = swift_retain();
    sub_1001273F4(v2);
    swift_release();
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    swift_retain();
    return EnvironmentObject.error()();
  }
}

uint64_t sub_1000BC244()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double sub_1000BC2B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_1000BC3D4((uint64_t)v8);
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[23] = v8[1];
  *(_OWORD *)&v10[119] = v8[7];
  v10[135] = v9;
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[7] = v8[0];
  long long v3 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v4 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v4;
  long long v5 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v7 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 81) = v3;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0x4022000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 145) = *(void *)&v10[128];
  *(_OWORD *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_1000BC3D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = Image.init(systemName:)();
  char v24 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (qword_1001980B8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001AA360;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = swift_getKeyPath();
  *(void *)a1 = v25;
  *(unsigned char *)(a1 + 8) = v24;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = KeyPath;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v21;
  *(unsigned char *)(a1 + 128) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100010924(v14, v16, v20);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v14, v16, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BC60C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100127710();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000BC63C()
{
  return sub_1001277C4();
}

uint64_t sub_1000BC664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  swift_retain();
  id v14 = sub_10012787C();
  swift_release();
  uint64_t v15 = *(void **)(a2 + *(void *)(*(void *)a2 + 112));
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain();
  id v17 = v15;
  swift_retain();
  uint64_t v18 = static SafeAreaRegions.all.getter();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a7 = v14;
  *(void *)(a7 + 8) = v17;
  *(void *)(a7 + 16) = sub_1000BC9B4;
  *(void *)(a7 + 24) = v16;
  *(void *)(a7 + 32) = v18;
  *(unsigned char *)(a7 + 40) = result;
  return result;
}

uint64_t sub_1000BC754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BA6A8(*(void *)v2, *(void *)(v2 + 8), *(void (**)(void, void, void))(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_1000BC770@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100127710();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000BC7A0()
{
  return sub_1001277C4();
}

uint64_t sub_1000BC7C8()
{
  return 16;
}

__n128 sub_1000BC7D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000BC7E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC664(v1[4], v1[5], v1[6], v1[7], v1[2], v1[3], a1);
}

unint64_t sub_1000BC7F4()
{
  unint64_t result = qword_10019D098;
  if (!qword_10019D098)
  {
    sub_10000650C(&qword_10019D080);
    sub_1000BC894();
    sub_100010484(&qword_10019BC50, &qword_10019BB60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D098);
  }
  return result;
}

unint64_t sub_1000BC894()
{
  unint64_t result = qword_10019D0A0;
  if (!qword_10019D0A0)
  {
    sub_10000650C(&qword_10019D078);
    sub_100010484(&qword_10019D0A8, &qword_10019D070);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D0A0);
  }
  return result;
}

unint64_t sub_1000BC934()
{
  unint64_t result = qword_10019D0B0;
  if (!qword_10019D0B0)
  {
    sub_10000650C(&qword_10019D090);
    sub_1000B6D30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D0B0);
  }
  return result;
}

uint64_t sub_1000BC9B4()
{
  swift_retain();
  sub_1001278DC();

  return swift_release();
}

unint64_t sub_1000BC9F4()
{
  unint64_t result = qword_10019D0D8;
  if (!qword_10019D0D8)
  {
    sub_10000650C(&qword_10019A630);
    sub_100010484(&qword_10019D0E0, &qword_10019A628);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D0D8);
  }
  return result;
}

uint64_t sub_1000BCA98()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BCAD8()
{
  return sub_1000BBDAC(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

double sub_1000BCAE8@<D0>(uint64_t a1@<X8>)
{
  return sub_1000BC2B4(a1);
}

uint64_t sub_1000BCB00()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000BCB48(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100010CB0;
  return sub_1000BBEF8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000BCC44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BCCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v10 = (void **)(v8 + 48);
  while (1)
  {
    uint64_t v11 = (uint64_t)*(v10 - 1);
    uint64_t v12 = *v10;
    if ((*(unsigned char *)(v10 - 2) & 1) == 0) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_8;
    }
    v10 += 3;
    swift_bridgeObjectRelease();
    if (!--v9)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  object = Locale.localizedString(forRegionCode:)(v14).value._object;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!object) {
    return 0;
  }
  uint64_t v16 = *(void *)(a2 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain_n();
  id v17 = (unint64_t *)(a2 + 40);
  while (1)
  {
    unint64_t v18 = *v17;
    if (*v17 < 2) {
      goto LABEL_11;
    }
    uint64_t v19 = *(v17 - 1);
    Swift::String v20 = String.lowercased()();
    Swift::String v21 = String.lowercased()();
    if (v20._countAndFlagsBits == v21._countAndFlagsBits && v20._object == v21._object) {
      break;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_24;
    }
    sub_1000BCF9C(v19, v18);
LABEL_11:
    v17 += 2;
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
LABEL_24:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1000BCF9C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t destroy for ScrollableTabViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)(a1 + 16);
  if (result >= 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s15ShazamEventsApp22ScrollableTabViewModelVwCP_0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2 + 1;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 >= 2)
  {
    a1[1] = *v3;
    a1[2] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v3;
  }
  return a1;
}

void *assignWithCopy for ScrollableTabViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v4 >= 2)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000AFAA0((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for ScrollableTabViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = a2 + 1;
  if (a1[2] >= 2uLL)
  {
    unint64_t v5 = a2[2];
    if (v5 >= 2)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000AFAA0((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollableTabViewModel()
{
  return &type metadata for ScrollableTabViewModel;
}

void *sub_1000BD1BC(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1000BD2C0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000BD338(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000BD3EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1000BD49C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000BD534(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000BD5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD5E8);
}

uint64_t sub_1000BD5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000BD698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD6AC);
}

uint64_t sub_1000BD6AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CompactDatePickerConfiguration()
{
  uint64_t result = qword_10019D170;
  if (!qword_10019D170) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BD7A0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000BD840()
{
  return sub_1000BE97C(&qword_10019D1B0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
}

uint64_t sub_1000BD888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = sub_100006560(&qword_10019D1C0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v27 - v17;
  sub_1000BDB78(a1, (uint64_t)&v27 - v17);
  sub_1000BDB78(a2, (uint64_t)v15);
  sub_1000BE97C(&qword_10019D1C8, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v27 = v6;
    v28 = a3;
    Swift::String v20 = &v11[*(int *)(v6 + 48)];
    Swift::String v21 = (void (*)(char *, char *, uint64_t))v13[4];
    v21(v11, v18, v12);
    v21(v20, v15, v12);
    v22 = &v8[*(int *)(v6 + 48)];
    char v23 = (void (*)(char *, char *, uint64_t))v13[2];
    v23(v8, v11, v12);
    v23(v22, v20, v12);
    v21(v28, v8, v12);
    char v24 = (void (*)(char *, uint64_t))v13[1];
    v24(v22, v12);
    uint64_t v25 = &v8[*(int *)(v27 + 48)];
    v21(v8, v11, v12);
    v21(v25, v20, v12);
    uint64_t v26 = sub_100006560(&qword_10019D1D0);
    v21(&v28[*(int *)(v26 + 36)], v25, v12);
    return ((uint64_t (*)(char *, uint64_t))v24)(v8, v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BDB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v33 = a2;
  uint64_t v2 = type metadata accessor for DateComponents();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  __chkstk_darwin(v2);
  v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = sub_100006560(&qword_10019D1D8);
  __chkstk_darwin(v10 - 8);
  uint64_t v27 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  static Calendar.current.getter();
  sub_100006560(&qword_10019D1E0);
  uint64_t v12 = type metadata accessor for Calendar.Component();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100152FC0;
  unint64_t v17 = v16 + v15;
  unint64_t v18 = *(void (**)(unint64_t, void, uint64_t))(v13 + 104);
  v18(v17, enum case for Calendar.Component.year(_:), v12);
  v18(v17 + v14, enum case for Calendar.Component.month(_:), v12);
  v18(v17 + 2 * v14, enum case for Calendar.Component.day(_:), v12);
  v18(v17 + 3 * v14, enum case for Calendar.Component.hour(_:), v12);
  v18(v17 + 4 * v14, enum case for Calendar.Component.minute(_:), v12);
  v18(v17 + 5 * v14, enum case for Calendar.Component.second(_:), v12);
  sub_1000BE604(v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v19 = v28;
  Calendar.dateComponents(_:from:)();
  uint64_t v20 = (uint64_t)v27;
  swift_bridgeObjectRelease();
  Swift::String v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v22 = v29;
  v21(v6, v29);
  Calendar.date(from:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v32);
  v21(v9, v22);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v20, 1, v23) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v33, v20, v23);
  }
  Date.init()();
  return sub_1000BE91C(v20);
}

Swift::Int sub_1000BDFDC(uint64_t a1)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000BE97C(&qword_10019D1B8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_1000BE0B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000BE97C(&qword_10019D1B8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_1000BE17C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000BE97C(&qword_10019D1B8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_1000BE250(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = type metadata accessor for CompactDatePickerConfiguration();
    if (static Date.== infix(_:_:)()) {
      char v6 = *((unsigned char *)a1 + *(int *)(v7 + 24)) ^ *((unsigned char *)a2 + *(int *)(v7 + 24)) ^ 1;
    }
    else {
      char v6 = 0;
    }
  }
  return v6 & 1;
}

void *sub_1000BE2EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentationDetent();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100006560(&qword_10019D200);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000BE97C(&qword_10019D208, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000BE97C(&qword_10019D210, (void (*)(uint64_t))&type metadata accessor for PresentationDetent);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000BE604(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100006560(&qword_10019D1E8);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000BE97C(&qword_10019D1F0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000BE97C(&qword_10019D1F8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000BE91C(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019D1D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BE97C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BE9CC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000BEA34(&qword_10019D218);
  uint64_t result = sub_1000BEA34((unint64_t *)&unk_10019D220);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000BEA34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.WatchFace();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BEA78()
{
  uint64_t result = type metadata accessor for FeaturedVideoPlayer();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000BEB18()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_1000BEB60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - v8;
  sub_1000BEB18();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 24))(v2);
LABEL_3:
    char v10 = 0;
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v9, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  uint64_t v14 = v13(v2, v12);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v17 = v13(v2, v12);
  if (!v16) {
    goto LABEL_3;
  }
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease();
    char v10 = 1;
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_4:
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1000BEDEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_1000BEB60(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  if (v7) {
    uint64_t v8 = v5[*(int *)(a1 + 36)];
  }
  else {
    uint64_t v8 = 1;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v8;
}

id sub_1000BEEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)AVPlayerViewController) init];
  (*(void (**)(void))(*(void *)(a2 + 24) + 40))(*(void *)(a2 + 16));
  id v8 = objc_allocWithZone((Class)AVPlayer);
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  id v12 = [v8 initWithURL:v10];

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  [v7 setModalPresentationStyle:0];
  [v7 setExitsFullScreenWhenPlaybackEnds:1];
  [v7 setShowsPlaybackControls:1];
  [v7 setVideoGravity:AVLayerVideoGravityResizeAspectFill];
  [v7 setPlayer:v12];
  id v13 = [v7 player];
  if (v13)
  {
    uint64_t v14 = v13;
    swift_getWitnessTable();
    type metadata accessor for UIViewControllerRepresentableContext();
    UIViewControllerRepresentableContext.coordinator.getter();
    uint64_t v15 = v20;
    NSString v16 = String._bridgeToObjectiveC()();
    [v14 addObserver:v15 forKeyPath:v16 options:1 context:0];
  }
  swift_getWitnessTable();
  type metadata accessor for UIViewControllerRepresentableContext();
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v17 = v20;
  [v7 setDelegate:v20];

  return v7;
}

void *sub_1000BF18C()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for FeaturedVideoPlayer.Coordinator());
  return sub_1000C2488(v0);
}

id sub_1000BF1C8()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = swift_isaMask & *v0;
  if (*(void *)((char *)v0 + *(void *)(v2 + 0x68)))
  {
    swift_retain();
    sub_100006560(&qword_100199670);
    Task.cancel()();
    swift_release();
    uint64_t v2 = swift_isaMask & *v0;
  }
  if (*(void *)((char *)v0 + *(void *)(v2 + 112)))
  {
    swift_retain();
    sub_100006560(&qword_100199670);
    Task.cancel()();
    swift_release();
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return [super dealloc];
}

id sub_1000BF2E4(void *a1)
{
  id v1 = a1;
  return sub_1000BF1C8();
}

uint64_t sub_1000BF30C(void *a1)
{
  id v1 = (char *)a1 + *(void *)((swift_isaMask & *a1) + 0x60);
  uint64_t v2 = type metadata accessor for FeaturedVideoPlayer();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_release();
}

uint64_t sub_1000BF414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for Notification();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_100006560(&qword_10019D3B8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000BF560, 0, 0);
}

uint64_t sub_1000BF560()
{
  id v1 = [self defaultCenter];
  if (qword_100198138 != -1) {
    swift_once();
  }
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v2 = sub_1000C2D30((unint64_t *)&unk_10019D3C0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000BF6E4;
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_1000BF6E4()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C2E3C;
  }
  else {
    uint64_t v2 = sub_1000BF7F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BF7F8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[7];
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      sub_1000BF9F8();

      (*v7)(v5, v6);
      uint64_t v9 = sub_1000C2D30((unint64_t *)&unk_10019D3C0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
      uint64_t v10 = (void *)swift_task_alloc();
      v0[14] = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_1000BF6E4;
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[11];
      return dispatch thunk of AsyncIteratorProtocol.next()(v11, v12, v9);
    }
    (*v7)(v0[9], v0[7]);
  }
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000BF9F8()
{
  uint64_t v1 = swift_isaMask & *v0;
  uint64_t v2 = (void *)Notification.name.getter();
  if (qword_100198138 != -1) {
    swift_once();
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_14:
    uint64_t v14 = Notification.userInfo.getter();
    if (v14)
    {
      uint64_t v15 = v14;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v15 + 16) && (unint64_t v16 = sub_1000A8288((uint64_t)v25), (v17 & 1) != 0))
      {
        sub_10004DE80(*(void *)(v15 + 56) + 32 * v16, (uint64_t)&v26);
      }
      else
      {
        long long v26 = 0u;
        long long v27 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000A82CC((uint64_t)v25);
      if (*((void *)&v27 + 1))
      {
        uint64_t result = swift_dynamicCast();
        if ((result & 1) == 0) {
          return result;
        }
        uint64_t v20 = v25[0];
        uint64_t v19 = v25[1];
        if (v20 == (*(uint64_t (**)(void))(*(void *)(v1 + 88) + 24))(*(void *)(v1 + 80))
          && v19 == v21)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v23 & 1) == 0) {
            return result;
          }
        }
        return sub_1000C0590();
      }
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    return sub_1000067DC((uint64_t)&v26, (uint64_t *)&unk_10019D3D0);
  }
  uint64_t v9 = (void *)Notification.name.getter();
  if (qword_100198140 != -1) {
    swift_once();
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v24 & 1) == 0) {
      return result;
    }
  }

  return sub_1000C0734();
}

uint64_t sub_1000BFD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C29EC(a1, (uint64_t)v7);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000067DC((uint64_t)v7, &qword_10019D390);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_1000BFF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for Notification();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_100006560(&qword_10019D3B8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000C0074, 0, 0);
}

uint64_t sub_1000C0074()
{
  id v1 = [self defaultCenter];
  if (qword_100198140 != -1) {
    swift_once();
  }
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v2 = sub_1000C2D30((unint64_t *)&unk_10019D3C0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C01F8;
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_1000C01F8()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000C050C;
  }
  else {
    uint64_t v2 = sub_1000C030C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000C030C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[9], v1, v2);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[7];
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      sub_1000BF9F8();

      (*v7)(v5, v6);
      uint64_t v9 = sub_1000C2D30((unint64_t *)&unk_10019D3C0, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
      uint64_t v10 = (void *)swift_task_alloc();
      v0[14] = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_1000C01F8;
      uint64_t v11 = v0[10];
      uint64_t v12 = v0[11];
      return dispatch thunk of AsyncIteratorProtocol.next()(v11, v12, v9);
    }
    (*v7)(v0[9], v0[7]);
  }
  (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000C050C()
{
  *(void *)(v0 + 40) = *(void *)(v0 + 120);
  sub_100006560(&qword_100199670);
  uint64_t v1 = swift_dynamicCast();
  return _swift_willThrowTypedImpl(v1, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1000C0590()
{
  uint64_t v1 = swift_isaMask & *(void *)v0;
  uint64_t v2 = *(void *)(v1 + 0x50);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))((char *)&v10 - v6, &v0[*(void *)(v1 + 96)], v2, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v2);
  type metadata accessor for FeaturedVideoPlayer();
  sub_1000C22E4((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1000C0734()
{
  uint64_t v1 = *(void *)((swift_isaMask & *v0) + 0x50);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v1 - 8) + 56))((char *)&v8 - v5, 1, 1, v1, v4);
  type metadata accessor for FeaturedVideoPlayer();
  sub_1000C22E4((uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1000C08A4(void *a1, void *a2)
{
  id v3 = [a1 player];
  if (v3)
  {
    __n128 v4 = v3;
    [v3 rate];
    if (v5 > 0.0)
    {
      id v6 = [v4 error];
      if (!v6)
      {
        char v7 = 1;
        goto LABEL_7;
      }
    }
    char v7 = 0;
LABEL_7:
    uint64_t v8 = swift_allocObject();
    *(unsigned char *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = v4;
    v11[4] = sub_1000C2E04;
    v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1000C09F8;
    v11[3] = &unk_1001915A0;
    uint64_t v9 = _Block_copy(v11);
    id v10 = v4;
    swift_release();
    [a2 animateAlongsideTransition:0 completion:v9];
    _Block_release(v9);
  }
}

uint64_t sub_1000C09F8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000C0A58(uint64_t a1, uint64_t a2)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  sub_1000C2DA4();
  if (v2) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x8000000100158DB0;
    v8._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1000C0BE4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  type metadata accessor for MainActor();
  v9[2] = a3;
  v9[3] = a4;
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  sub_1000C0A58((uint64_t)sub_1000C2D78, (uint64_t)v9);

  swift_unknownObjectRelease();
}

uint64_t sub_1000C0C94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v17, 0, sizeof(v17));
    id v14 = a5;
    id v15 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v11 = a5;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_1000C2D30(&qword_1001981F8, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  sub_1000C2A54(v8, v10, (uint64_t)v17, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1000067DC((uint64_t)v17, (uint64_t *)&unk_10019D3D0);
}

void sub_1000C0DD8()
{
}

uint64_t type metadata accessor for FeaturedVideoPlayer.Coordinator()
{
  return sub_1000068A4();
}

uint64_t type metadata accessor for FeaturedVideoPlayer()
{
  return sub_1000068A4();
}

uint64_t sub_1000C0E4C()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t v0 = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

void *sub_1000C0F40(void *a1, void *a2, uint64_t a3)
{
  __n128 v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  int v9 = *(_DWORD *)(v6 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = ~(v9 | 7);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = v8 + 1;
  }
  unint64_t v13 = ((v9 + 16) & ~(unint64_t)v9)
      + v12
      + (((v9 | 7) + v8 + 1) & ~(v9 | 7));
  int v14 = v9 & 0x100000;
  if (v10 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *__n128 v4 = *a2;
    __n128 v4 = (void *)(v17 + ((v10 + 16) & v11));
    swift_retain();
  }
  else
  {
    long long v26 = *(void (**)(void *, void *, uint64_t))(v6 + 16);
    v26(a1, a2, v5);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v18 = (void *)(((unint64_t)v4 + v8 + 8) & v11);
    uint64_t v19 = (void *)(((unint64_t)a2 + v8 + 8) & v11);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    uint64_t v22 = (void *)(((unint64_t)v20 + v10 + 8) & ~v10);
    char v23 = (void *)(((unint64_t)v21 + v10 + 8) & ~v10);
    char v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    if (v24(v23, 1, v5))
    {
      memcpy(v22, v23, v12);
    }
    else
    {
      v26(v22, v23, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_1000C1124(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  uint64_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v11(a1, v3);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (a1 + v6 + (v7 | 7) + 1) & ~(v7 | 7);
  swift_release();
  swift_release();
  unint64_t v9 = (v7 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v3);
  if (!result)
  {
    return v11(v9, v3);
  }
  return result;
}

void *sub_1000C1264(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v20 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v20(a1, a2, v5);
  size_t v8 = *(void *)(v6 + 64);
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 | 7) + 1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  size_t v12 = (void *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  id v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  unint64_t v16 = (const void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_retain();
  swift_retain();
  if (v17(v16, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v18 = v8;
    }
    else {
      size_t v18 = v8 + 1;
    }
    memcpy(v15, v16, v18);
  }
  else
  {
    v20(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

void *sub_1000C1408(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  char v23 = a1;
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 | 7) + 1;
  size_t v12 = (void *)(((unint64_t)a1 + v9 + v11) & ~(v10 | 7));
  unint64_t v13 = (void *)(((unint64_t)a2 + v9 + v11) & ~(v10 | 7));
  *size_t v12 = *v13;
  swift_retain();
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v14 = *v15;
  swift_retain();
  swift_release();
  unint64_t v16 = (void *)(((unint64_t)v14 + v10 + 8) & ~v10);
  uint64_t v17 = (void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  size_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v14) = v18(v16, 1, v5);
  int v19 = v18(v17, 1, v5);
  if (v14)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v16, v17, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v5);
      return v23;
    }
    int v20 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v19)
    {
      v8(v16, v17, v5);
      return v23;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v16, v5);
    int v20 = *(_DWORD *)(v7 + 84);
  }
  if (v20) {
    size_t v21 = v9;
  }
  else {
    size_t v21 = v9 + 1;
  }
  memcpy(v16, v17, v21);
  return v23;
}

void *sub_1000C1624(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 | 7) + 1;
  size_t v12 = (void *)(((unint64_t)a1 + v9 + v11) & ~(v10 | 7));
  unint64_t v13 = (void *)(((unint64_t)a2 + v9 + v11) & ~(v10 | 7));
  *size_t v12 = *v13;
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v14 = *v15;
  unint64_t v16 = (void *)(((unint64_t)v14 + v10 + 8) & ~v10);
  uint64_t v17 = (const void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v18 = v9;
    }
    else {
      size_t v18 = v9 + 1;
    }
    memcpy(v16, v17, v18);
  }
  else
  {
    v8(v16, v17, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1000C17A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v24 = a1;
  size_t v10 = v9 + a2;
  *(unsigned char *)(v9 + a1) = *(unsigned char *)(v9 + a2);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  unint64_t v13 = (void *)((v12 + v9 + a1) & ~(v11 | 7));
  int v14 = (void *)((v12 + v10) & ~(v11 | 7));
  *unint64_t v13 = *v14;
  swift_release();
  id v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *id v15 = *v16;
  swift_release();
  uint64_t v17 = (void *)(((unint64_t)v15 + v11 + 8) & ~v11);
  size_t v18 = (void *)(((unint64_t)v16 + v11 + 8) & ~v11);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v16) = v19(v17, 1, v5);
  int v20 = v19(v18, 1, v5);
  if (v16)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v5);
      return v24;
    }
    int v21 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v20)
    {
      v8((uint64_t)v17, (uint64_t)v18, v5);
      return v24;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v5);
    int v21 = *(_DWORD *)(v7 + 84);
  }
  if (v21) {
    size_t v22 = v9;
  }
  else {
    size_t v22 = v9 + 1;
  }
  memcpy(v17, v18, v22);
  return v24;
}

uint64_t sub_1000C19B0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  if (v6 <= v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v10 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v11 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = v12 | 7;
  int v14 = a2 - v9;
  if (a2 <= v9) {
    goto LABEL_32;
  }
  uint64_t v15 = ((v12 + 16) & ~v12) + v11 + ((v13 + v10 + 1) & ~v13);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v19 < 2)
    {
LABEL_32:
      if (v6 >= v8)
      {
        char v23 = *(uint64_t (**)(void))(v5 + 48);
        return v23();
      }
      else
      {
        int v21 = (unint64_t *)(((((unint64_t)a1 + v10 + v13 + 1) & ~v13) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          unsigned int v24 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v21 + v12 + 8) & ~v12);
          if (v24 >= 2) {
            return v24 - 1;
          }
          else {
            return 0;
          }
        }
        else
        {
          unint64_t v22 = *v21;
          if (v22 >= 0xFFFFFFFF) {
            LODWORD(v22) = -1;
          }
          return (v22 + 1);
        }
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_32;
  }
LABEL_24:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v15 | v20) + 1;
}

void sub_1000C1BF0(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = a1;
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v8 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  if (v8) {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  size_t v16 = v14 + v15 + (((v13 | 7) + v12 + 1) & ~(v13 | 7));
  BOOL v17 = a3 >= v11;
  unsigned int v18 = a3 - v11;
  if (v18 == 0 || !v17)
  {
LABEL_23:
    if (v11 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v16 > 3)
  {
    int v6 = 1;
    if (v11 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  unsigned int v19 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
  if (!HIWORD(v19))
  {
    if (v19 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v19 > 1;
    }
    goto LABEL_23;
  }
  int v6 = 4;
  if (v11 < a2)
  {
LABEL_24:
    unsigned int v20 = ~v11 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      if (v16)
      {
        int v22 = v20 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)uint64_t v5 = v22;
          v5[2] = BYTE2(v22);
        }
        else if (v16 == 2)
        {
          *(_WORD *)uint64_t v5 = v22;
        }
        else
        {
          *uint64_t v5 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)uint64_t v5 = v20;
      int v21 = 1;
    }
    switch(v6)
    {
      case 1:
        v5[v16] = v21;
        return;
      case 2:
        *(_WORD *)&v5[v16] = v21;
        return;
      case 3:
        goto LABEL_81;
      case 4:
        *(_DWORD *)&v5[v16] = v21;
        return;
      default:
        return;
    }
  }
LABEL_16:
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_81:
      __break(1u);
      JUMPOUT(0x1000C1FB8);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (!a2) {
        return;
      }
LABEL_32:
      if (v8 >= v10) {
        goto LABEL_75;
      }
      uint64_t v5 = (char *)((unint64_t)&a1[v12 + 1 + (v13 | 7)] & ~(v13 | 7));
      if (v8) {
        int v23 = v12;
      }
      else {
        int v23 = v12 + 1;
      }
      if (v10 >= a2)
      {
        BOOL v28 = (void *)((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v5 = (char *)(((unint64_t)v28 + v13 + 8) & ~v13);
          if (v8) {
            size_t v30 = v12;
          }
          else {
            size_t v30 = (v12 + 1);
          }
          if (v9 >= a2)
          {
            a2 = (a2 + 1);
LABEL_75:
            uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 56);
            v33(v5, a2);
          }
          else
          {
            if (v30 <= 3) {
              int v31 = ~(-1 << (8 * v30));
            }
            else {
              int v31 = -1;
            }
            if (v30)
            {
              int v26 = v31 & (~v9 + a2);
              if (v30 <= 3) {
                int v32 = v30;
              }
              else {
                int v32 = 4;
              }
              bzero(v5, v30);
              switch(v32)
              {
                case 2:
LABEL_71:
                  *(_WORD *)uint64_t v5 = v26;
                  break;
                case 3:
LABEL_78:
                  *(_WORD *)uint64_t v5 = v26;
                  v5[2] = BYTE2(v26);
                  break;
                case 4:
LABEL_79:
                  *(_DWORD *)uint64_t v5 = v26;
                  break;
                default:
LABEL_45:
                  *uint64_t v5 = v26;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v29 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v29 = (a2 - 1);
          }
          void *v28 = v29;
        }
      }
      else
      {
        unsigned int v24 = v23 + v14;
        if ((v23 + v14) <= 3) {
          int v25 = ~(-1 << (8 * (v23 + v14)));
        }
        else {
          int v25 = -1;
        }
        if (v24)
        {
          int v26 = v25 & (~v10 + a2);
          if (v24 <= 3) {
            int v27 = v23 + v14;
          }
          else {
            int v27 = 4;
          }
          bzero(v5, (v23 + v14));
          switch(v27)
          {
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_78;
            case 4:
              goto LABEL_79;
            default:
              goto LABEL_45;
          }
        }
      }
      return;
  }
}

uint64_t sub_1000C2000@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for FeaturedVideoPlayer();
  *(unsigned char *)(a5 + *(int *)(v8 + 36)) = a2;
  uint64_t v9 = a5 + *(int *)(v8 + 40);
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a3, v10);
}

void sub_1000C20F0(void *a1, uint64_t a2, uint64_t a3)
{
}

void *sub_1000C20F8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000BF18C();
  *a1 = result;
  return result;
}

uint64_t sub_1000C2120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_1000C219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000C2218()
{
}

uint64_t sub_1000C2258()
{
  return swift_getWitnessTable();
}

NSString sub_1000C2274()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001AA418 = (uint64_t)result;
  return result;
}

NSString sub_1000C22AC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001AA420 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C22E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v7 - v4, a1, v2, v3);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

void sub_1000C23D0(void *a1, uint64_t a2)
{
  id v4 = [a1 player];
  if (v4)
  {
    id v5 = v4;
    if (sub_1000BEDEC(a2))
    {
      [v5 pause];
      [a1 setShowsPlaybackControls:0];
      [a1 setShowsPlaybackControls:1];
    }
  }
}

void *sub_1000C2488(uint64_t a1)
{
  uint64_t v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  id v5 = (void *)(swift_isaMask & *v1);
  uint64_t v6 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)((char *)v2 + v5[13]) = 0;
  *(void *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x70)) = 0;
  uint64_t v9 = (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60);
  uint64_t v10 = v5[10];
  uint64_t v11 = v5[11];
  uint64_t v12 = type metadata accessor for FeaturedVideoPlayer();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v9, a1, v12);
  v24.receiver = v2;
  v24.super_class = ObjectType;
  [super init];
  uint64_t v14 = type metadata accessor for TaskPriority();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v8, 1, 1, v14);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  BOOL v17 = (void *)swift_allocObject();
  _OWORD v17[2] = 0;
  v17[3] = 0;
  v17[4] = v10;
  v17[5] = v11;
  v17[6] = v16;
  unsigned int v18 = v13;
  uint64_t v19 = sub_1000BFD60((uint64_t)v8, (uint64_t)&unk_10019D3A0, (uint64_t)v17);
  sub_1000067DC((uint64_t)v8, &qword_10019D390);
  *(void *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x68)) = v19;
  swift_release();
  v15(v8, 1, 1, v14);
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v10;
  v21[5] = v11;
  v21[6] = v20;
  uint64_t v22 = sub_1000BFD60((uint64_t)v8, (uint64_t)&unk_10019D3B0, (uint64_t)v21);

  sub_1000067DC((uint64_t)v8, &qword_10019D390);
  *(void *)((char *)v18 + *(void *)((swift_isaMask & *v18) + 0x70)) = v22;
  swift_release();
  return v18;
}

uint64_t sub_1000C27DC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000C2818(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A678;
  return sub_1000BF414(a1, v4, v5, v6);
}

uint64_t sub_1000C28E4()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C2924(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100010CB0;
  return sub_1000BFF28(a1, v4, v5, v6);
}

uint64_t sub_1000C29EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019D390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000C2A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = swift_isaMask & *v4;
  if (!a2) {
    return;
  }
  uint64_t v7 = v5;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return;
  }
  if (!a4 || !*(void *)(a4 + 16))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    goto LABEL_16;
  }
  uint64_t v8 = NSKeyValueChangeNewKey;
  unint64_t v9 = sub_1000A81F4((uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;

    goto LABEL_16;
  }
  sub_10004DE80(*(void *)(a4 + 56) + 32 * v9, (uint64_t)&v18);

  if (!*((void *)&v19 + 1))
  {
LABEL_16:
    sub_1000067DC((uint64_t)&v18, (uint64_t *)&unk_10019D3D0);
    return;
  }
  if ((swift_dynamicCast() & 1) != 0 && v17 != 0.0)
  {
    id v11 = [self defaultCenter];
    if (qword_100198138 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_1001AA418;
    sub_100006560((uint64_t *)&unk_10019D3E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014D4D0;
    *(void *)&long long v18 = 0x44496F65646976;
    *((void *)&v18 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)(v7 + 88) + 24))(*(void *)(v7 + 80));
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v14;
    *(void *)(inited + 80) = v15;
    sub_10013BBB0(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 postNotificationName:v12 object:0 userInfo:isa];
  }
}

void sub_1000C2D00()
{
}

uint64_t sub_1000C2D30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000C2D78()
{
  sub_1000C08A4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000C2D94()
{
  return swift_deallocObject();
}

uint64_t sub_1000C2DA4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000C2DCC()
{
  return swift_deallocObject();
}

id sub_1000C2E04()
{
  if (*(unsigned char *)(v0 + 16) == 1) {
    return [*(id *)(v0 + 24) play];
  }
  return result;
}

uint64_t sub_1000C2E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C2E34()
{
  return swift_release();
}

uint64_t destroy for TourPhotosTitleView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosTitleView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosTitleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosTitleView()
{
  return &type metadata for TourPhotosTitleView;
}

uint64_t sub_1000C3144()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C3160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  __chkstk_darwin(v1);
  long long v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BlendMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019D3F0);
  __chkstk_darwin(v8 - 8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019D3F8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006560(&qword_10019D400);
  uint64_t v14 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)char v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 0;
  uint64_t v17 = sub_100006560(&qword_10019D408);
  sub_1000C34F8(v23, (uint64_t)&v10[*(int *)(v17 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for BlendMode.plusLighter(_:), v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v13[*(int *)(v11 + 36)], v7, v4);
  sub_1000066D4((uint64_t)v10, (uint64_t)v13, &qword_10019D3F0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000067DC((uint64_t)v10, &qword_10019D3F0);
  static AccessibilityChildBehavior.combine.getter();
  sub_1000C4170();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v25);
  sub_1000067DC((uint64_t)v13, &qword_10019D3F8);
  uint64_t v18 = v26;
  uint64_t v19 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v26, v16, v22);
  *(unsigned char *)(v18 + *(int *)(sub_100006560(&qword_10019D420) + 36)) = 1;
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v19);
}

uint64_t sub_1000C34F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v99 = a2;
  uint64_t v3 = sub_100006560(&qword_10019D428);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019D430);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019D438);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  id v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v90 - v15;
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4010000000000000;
  v5[16] = 0;
  uint64_t v17 = sub_100006560(&qword_10019D440);
  sub_1000C3C94((uint64_t)&v5[*(int *)(v17 + 44)]);
  static Color.white.getter();
  uint64_t v18 = Color.opacity(_:)();
  swift_release();
  sub_1000066D4((uint64_t)v5, (uint64_t)v9, &qword_10019D428);
  *(void *)&v9[*(int *)(v7 + 44)] = v18;
  sub_1000067DC((uint64_t)v5, &qword_10019D428);
  char v19 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_1000066D4((uint64_t)v9, (uint64_t)v13, &qword_10019D430);
  BOOL v28 = &v13[*(int *)(v11 + 44)];
  char *v28 = v19;
  *((void *)v28 + 1) = v21;
  *((void *)v28 + 2) = v23;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v27;
  v28[40] = 0;
  sub_1000067DC((uint64_t)v9, &qword_10019D430);
  v100 = v16;
  v101 = v13;
  sub_1000C4248((uint64_t)v13, (uint64_t)v16);
  uint64_t v29 = *(void *)(a1 + 72);
  if (v29)
  {
    uint64_t v111 = *(void *)(a1 + 64);
    uint64_t v112 = v29;
    sub_10002374C();
    swift_bridgeObjectRetain();
    uint64_t v30 = Text.init<A>(_:)();
    uint64_t v32 = v31;
    char v34 = v33 & 1;
    static Font.largeTitle.getter();
    static Font.Weight.bold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v35 = Text.font(_:)();
    uint64_t v37 = v36;
    char v39 = v38;
    swift_release();
    sub_1000065A4(v30, v32, v34);
    swift_bridgeObjectRelease();
    static Color.white.getter();
    uint64_t v40 = Color.opacity(_:)();
    swift_release();
    uint64_t v111 = v40;
    uint64_t v41 = Text.foregroundStyle<A>(_:)();
    uint64_t v109 = v42;
    uint64_t v110 = v41;
    uint64_t v107 = v43 & 1;
    uint64_t v108 = v44;
    sub_1000065A4(v35, v37, v39 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v105 = swift_getKeyPath();
    unsigned __int8 v45 = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v98 = v46;
    uint64_t v97 = v47;
    uint64_t v96 = v48;
    uint64_t v95 = v49;
    uint64_t v102 = v45;
    uint64_t v103 = 1;
    uint64_t v104 = 2;
  }
  else
  {
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v105 = 0;
    uint64_t KeyPath = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v102 = 0;
    uint64_t v98 = 0;
    uint64_t v97 = 0;
    uint64_t v96 = 0;
    uint64_t v95 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v52 = v51;
  char v54 = v53 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v55 = Text.font(_:)();
  uint64_t v57 = v56;
  char v59 = v58;
  swift_release();
  sub_1000065A4(v50, v52, v54);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v60 = Color.opacity(_:)();
  swift_release();
  uint64_t v111 = v60;
  uint64_t v61 = Text.foregroundStyle<A>(_:)();
  uint64_t v93 = v62;
  uint64_t v94 = v63;
  int v92 = v64 & 1;
  sub_1000065A4(v55, v57, v59 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v91 = swift_getKeyPath();
  uint64_t v65 = swift_getKeyPath();
  uint64_t v66 = (uint64_t)v101;
  sub_1000066D4((uint64_t)v100, (uint64_t)v101, &qword_10019D438);
  uint64_t v67 = v66;
  uint64_t v68 = v99;
  sub_1000066D4(v67, v99, &qword_10019D438);
  uint64_t v69 = sub_100006560(&qword_10019D448);
  uint64_t v70 = v68 + *(int *)(v69 + 48);
  uint64_t v71 = v109;
  uint64_t v72 = v110;
  *(void *)uint64_t v70 = v110;
  *(void *)(v70 + 8) = v71;
  uint64_t v109 = v71;
  uint64_t v110 = v72;
  uint64_t v73 = v71;
  uint64_t v74 = v107;
  *(void *)(v70 + 16) = v107;
  char v75 = v74;
  uint64_t v107 = v74;
  uint64_t v76 = v108;
  *(void *)(v70 + 24) = v108;
  uint64_t v77 = v76;
  uint64_t v108 = v76;
  uint64_t v78 = KeyPath;
  *(void *)(v70 + 32) = KeyPath;
  uint64_t KeyPath = v78;
  uint64_t v79 = v104;
  *(void *)(v70 + 40) = v104;
  *(void *)(v70 + 48) = 0;
  uint64_t v104 = v79;
  uint64_t v80 = v105;
  *(void *)(v70 + 56) = v105;
  uint64_t v105 = v80;
  uint64_t v81 = v103;
  *(void *)(v70 + 64) = v103;
  uint64_t v103 = v81;
  uint64_t v82 = v102;
  *(void *)(v70 + 72) = v102;
  uint64_t v102 = v82;
  uint64_t v83 = v97;
  *(void *)(v70 + 80) = v98;
  *(void *)(v70 + 88) = v83;
  uint64_t v84 = v95;
  *(void *)(v70 + 96) = v96;
  *(void *)(v70 + 104) = v84;
  *(unsigned char *)(v70 + 112) = 0;
  uint64_t v85 = v68 + *(int *)(v69 + 64);
  uint64_t v86 = v93;
  *(void *)uint64_t v85 = v61;
  *(void *)(v85 + 8) = v86;
  char v87 = v92;
  *(unsigned char *)(v85 + 16) = v92;
  uint64_t v88 = v91;
  *(void *)(v85 + 24) = v94;
  *(void *)(v85 + 32) = v88;
  *(void *)(v85 + 40) = 2;
  *(unsigned char *)(v85 + 48) = 0;
  *(void *)(v85 + 56) = v65;
  *(unsigned char *)(v85 + 64) = 1;
  sub_1000C42C0(v72, v73, v75, v77);
  sub_100010924(v61, v86, v87);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000067DC((uint64_t)v100, &qword_10019D438);
  sub_1000065A4(v61, v86, v87);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000C4324(v110, v109, v107, v108);
  return sub_1000067DC((uint64_t)v101, &qword_10019D438);
}

uint64_t sub_1000C3C94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019D450);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019D458);
  __chkstk_darwin(v8 - 8);
  uint64_t v31 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - v11;
  Image.init(_:bundle:)();
  uint64_t v13 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v14 = type metadata accessor for Image.TemplateRenderingMode();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v7, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  Image.renderingMode(_:)();
  swift_release();
  sub_1000067DC((uint64_t)v7, &qword_10019D450);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v1);
  uint64_t v16 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v33 = v16;
  uint64_t v34 = v39;
  char v35 = v40;
  uint64_t v36 = v41;
  char v37 = v42;
  long long v38 = v43;
  sub_100006560(&qword_10019D460);
  sub_1000C4388();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18;
  LOBYTE(v7) = v20 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v21 = Text.font(_:)();
  uint64_t v23 = v22;
  LOBYTE(v2) = v24;
  uint64_t v26 = v25;
  swift_release();
  LOBYTE(v2) = v2 & 1;
  sub_1000065A4(v17, v19, (char)v7);
  swift_bridgeObjectRelease();
  uint64_t v27 = v31;
  sub_1000066D4((uint64_t)v12, v31, &qword_10019D458);
  uint64_t v28 = v32;
  sub_1000066D4(v27, v32, &qword_10019D458);
  uint64_t v29 = v28 + *(int *)(sub_100006560(&qword_10019D470) + 48);
  *(void *)uint64_t v29 = v21;
  *(void *)(v29 + 8) = v23;
  *(unsigned char *)(v29 + 16) = v2;
  *(void *)(v29 + 24) = v26;
  sub_100010924(v21, v23, v2);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v12, &qword_10019D458);
  sub_1000065A4(v21, v23, v2);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v27, &qword_10019D458);
}

uint64_t sub_1000C412C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3160(a1);
}

unint64_t sub_1000C4170()
{
  unint64_t result = qword_10019D410;
  if (!qword_10019D410)
  {
    sub_10000650C(&qword_10019D3F8);
    sub_1000C41EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D410);
  }
  return result;
}

unint64_t sub_1000C41EC()
{
  unint64_t result = qword_10019D418;
  if (!qword_10019D418)
  {
    sub_10000650C(&qword_10019D3F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D418);
  }
  return result;
}

uint64_t sub_1000C4248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019D438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C42C0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100010924(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000C4324(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000065A4(result, a2, a3 & 1);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000C4388()
{
  unint64_t result = qword_10019D468;
  if (!qword_10019D468)
  {
    sub_10000650C(&qword_10019D460);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D468);
  }
  return result;
}

unint64_t sub_1000C4400()
{
  unint64_t result = qword_10019D478;
  if (!qword_10019D478)
  {
    sub_10000650C(&qword_10019D420);
    sub_10000650C(&qword_10019D3F8);
    sub_1000C4170();
    swift_getOpaqueTypeConformance2();
    sub_100021350();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D478);
  }
  return result;
}

uint64_t sub_1000C44B0@<X0>(char a1@<W0>, char a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = a1;
  *(unsigned char *)(a6 + 1) = a2;
  *(void *)(a6 + 8) = a4;
  *(void *)(a6 + 16) = a5;
  type metadata accessor for ObservableScrollView();
  uint64_t v7 = swift_retain();
  a3(v7);

  return swift_release();
}

uint64_t type metadata accessor for ObservableScrollView()
{
  return sub_1000068A4();
}

uint64_t sub_1000C4548()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000C4600(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    uint64_t v10 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = ((unint64_t)v10 + v6 + 16) & ~v6;
    uint64_t v14 = ((unint64_t)v11 + v6 + 16) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t sub_1000C472C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

unsigned char *sub_1000C47A4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = v5[1];
  *uint64_t v4 = *v5;
  v4[1] = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v4 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v5 + v9 + 16) & ~v9;
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

unsigned char *sub_1000C4854(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = v6[1];
  *uint64_t v5 = *v6;
  v5[1] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

unsigned char *sub_1000C4908(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unsigned char *sub_1000C4998(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1000C4A3C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 16) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000C4BE4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000C4E4CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          char v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 16) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
      }
      return;
  }
}

uint64_t sub_1000C4E74()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000C4EB8(double *a1@<X8>)
{
  *a1 = sub_100035B10();
}

uint64_t sub_1000C4F10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v38 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v5 = v4;
  uint64_t v28 = v4;
  uint64_t v30 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for SizeModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v48 = v5;
  uint64_t v49 = swift_getWitnessTable();
  char v37 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ScrollView();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unsigned int v8 = (char *)&v27 - v7;
  sub_10000650C(&qword_10019D500);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v11 = (char *)&v27 - v10;
  unint64_t v32 = sub_1000C5738();
  uint64_t v34 = type metadata accessor for _PreferenceActionModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unsigned int v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int v17 = (uint64_t *)((char *)&v27 - v16);
  uint64_t v39 = v29;
  uint64_t v40 = v28;
  uint64_t v41 = v3;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v46 = 0x69566C6C6F726373;
  unint64_t v47 = 0xEA00000000007765;
  uint64_t v18 = swift_getWitnessTable();
  View.coordinateSpace<A>(name:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  uint64_t v20 = *(void *)(v3 + 8);
  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  unint64_t v22 = sub_1000C57FC();
  uint64_t v44 = v18;
  unint64_t v45 = v22;
  swift_retain();
  uint64_t v23 = swift_getWitnessTable();
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v42 = v23;
  uint64_t v43 = v24;
  swift_getWitnessTable();
  sub_1000508C8(v17, v14, v12);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v35 + 8);
  v25(v14, v12);
  sub_1000508C8(v38, v17, v12);
  return ((uint64_t (*)(void *, uint64_t))v25)(v17, v12);
}

uint64_t sub_1000C53F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v24 = a4;
  uint64_t v23 = type metadata accessor for CoordinateSpace();
  uint64_t v6 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned int v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey();
  v21[1] = swift_getWitnessTable();
  v21[2] = type metadata accessor for SizeModifier();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v21 - v15);
  v22 += *(int *)(type metadata accessor for ObservableScrollView() + 44);
  uint64_t v27 = 0x69566C6C6F726373;
  unint64_t v28 = 0xEA00000000007765;
  AnyHashable.init<A>(_:)();
  uint64_t v17 = v23;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for CoordinateSpace.named(_:), v23);
  sub_10006A548(v9, (uint64_t)v8, (uint64_t)sub_1000C5714, 0, a2, a3, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = a3;
  uint64_t v26 = WitnessTable;
  swift_getWitnessTable();
  sub_1000508C8(v16, v13, v10);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  sub_1000508C8(v24, v16, v10);
  return ((uint64_t (*)(void *, uint64_t))v19)(v16, v10);
}

void sub_1000C5714(double *a1@<X8>, double a2@<D1>)
{
  *a1 = a2;
}

uint64_t type metadata accessor for ObservableScrollView.OffsetPreferenceKey()
{
  return sub_1000068A4();
}

unint64_t sub_1000C5738()
{
  unint64_t result = qword_10019D508;
  if (!qword_10019D508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D508);
  }
  return result;
}

uint64_t sub_1000C578C@<X0>(void *a1@<X8>)
{
  return sub_1000C53F0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000C5798()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C57D0(double *a1)
{
  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

unint64_t sub_1000C57FC()
{
  unint64_t result = qword_10019D510[0];
  if (!qword_10019D510[0])
  {
    sub_10000650C(&qword_10019D500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10019D510);
  }
  return result;
}

uint64_t sub_1000C5858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_1000C5860()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000C5A08(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000C5A44@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1000C5B60();
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3 & 1;
  uint64_t v4 = (int *)type metadata accessor for FilterView();
  uint64_t v5 = (uint64_t *)(a1 + v4[9]);
  *uint64_t v5 = swift_getKeyPath();
  sub_100006560(&qword_100198A98);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a1 + v4[10]);
  *uint64_t v6 = swift_getKeyPath();
  sub_100006560(qword_100198AA0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(a1 + v4[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v7 = result;
  v7[1] = v9;
  return result;
}

void sub_1000C5B58(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000C5B60()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t type metadata accessor for FilterView()
{
  return sub_1000068A4();
}

uint64_t sub_1000C5BF8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *((unsigned __int8 *)v2 + 16);
  uint64_t v6 = type metadata accessor for FilterViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return a2(v3, v4, v5, v6, WitnessTable);
}

uint64_t sub_1000C5C88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v20 = type metadata accessor for NavigationPath();
  uint64_t v44 = sub_10000650C(&qword_100198C58);
  sub_10000650C(&qword_10019D618);
  _OWORD v17[2] = sub_10000650C(&qword_10019D620);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v18 = v3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v17[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v36 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v46 = type metadata accessor for Divider();
  uint64_t v47 = sub_10000650C(&qword_10019D630);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_getWitnessTable();
  sub_1000D3A98(&qword_10019D1B0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v5 = sub_10000650C(&qword_10019D638);
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v7 = sub_100010484(&qword_10019D640, &qword_10019D638);
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019D648);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019D650);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v39 = OpaqueTypeMetadata2;
  uint64_t v40 = v5;
  uint64_t v41 = OpaqueTypeConformance2;
  uint64_t v42 = v7;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  uint64_t v33 = sub_100010484(&qword_10019D658, &qword_10019D648);
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = sub_100010484(&qword_10019D660, &qword_10019D650);
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = &protocol witness table for _AppearanceActionModifier;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for NavigationStack();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v17 - v13);
  uint64_t v23 = v18;
  uint64_t v24 = v19;
  uint64_t v25 = v21;
  NavigationStack.init<>(root:)();
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  sub_1000508C8(v22, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v15)(v14, v8);
}

uint64_t sub_1000C6680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v180 = a1;
  v161 = a4;
  uint64_t v6 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v159 = *(void *)(v6 - 8);
  uint64_t v160 = v6;
  __chkstk_darwin(v6);
  v158 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = a3;
  uint64_t v174 = type metadata accessor for FilterView();
  uint64_t v177 = *(void *)(v174 - 8);
  uint64_t v175 = *(void *)(v177 + 64);
  __chkstk_darwin(v174);
  v176 = (char *)&v121 - v8;
  unint64_t v167 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v167);
  v157 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = sub_10000650C(&qword_100198C58);
  sub_10000650C(&qword_10019D618);
  v173 = (void (*)(char *, uint64_t, uint64_t))sub_10000650C(&qword_10019D620);
  uint64_t v178 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v200 = v10;
  unint64_t v201 = AssociatedTypeWitness;
  uint64_t v202 = v12;
  uint64_t v203 = WitnessTable;
  uint64_t v204 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v198 = v15;
  uint64_t v199 = v16;
  v168 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v197 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  uint64_t v206 = type metadata accessor for ModifiedContent();
  uint64_t v207 = type metadata accessor for Divider();
  uint64_t v208 = sub_10000650C(&qword_10019D630);
  swift_getTupleTypeMetadata();
  v173 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for TupleView();
  uint64_t v172 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for VStack();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v121 - v19;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v144 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  v166 = (char *)&v121 - v22;
  uint64_t v171 = swift_getWitnessTable();
  uint64_t v195 = v171;
  v196 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = sub_1000D3A98(&qword_10019D1B0, (void (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v25 = v21;
  uint64_t v122 = v21;
  uint64_t v123 = v23;
  unint64_t v26 = v167;
  uint64_t v200 = v21;
  unint64_t v201 = v167;
  uint64_t v202 = v23;
  uint64_t v203 = v24;
  uint64_t v27 = v24;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v146 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v164 = (char *)&v121 - v29;
  uint64_t v200 = v25;
  unint64_t v201 = v26;
  uint64_t v202 = v23;
  uint64_t v203 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v200 = OpaqueTypeMetadata2;
  unint64_t v201 = v26;
  uint64_t v31 = OpaqueTypeMetadata2;
  uint64_t v129 = OpaqueTypeMetadata2;
  uint64_t v130 = OpaqueTypeConformance2;
  unint64_t v32 = v26;
  uint64_t v202 = OpaqueTypeConformance2;
  uint64_t v203 = v27;
  uint64_t v33 = OpaqueTypeConformance2;
  uint64_t v121 = v27;
  uint64_t v34 = swift_getOpaqueTypeMetadata2();
  uint64_t v143 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  v128 = (char *)&v121 - v35;
  uint64_t v200 = v31;
  unint64_t v201 = v32;
  uint64_t v202 = v33;
  uint64_t v203 = v27;
  uint64_t v36 = swift_getOpaqueTypeConformance2();
  uint64_t v200 = v34;
  unint64_t v201 = v36;
  uint64_t v37 = v34;
  uint64_t v126 = v34;
  uint64_t v127 = v36;
  uint64_t v38 = v36;
  uint64_t v39 = swift_getOpaqueTypeMetadata2();
  uint64_t v147 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  v125 = (char *)&v121 - v40;
  uint64_t v200 = v37;
  unint64_t v201 = v38;
  uint64_t v41 = swift_getOpaqueTypeConformance2();
  uint64_t v200 = v39;
  unint64_t v201 = v41;
  uint64_t v42 = v39;
  uint64_t v131 = v39;
  uint64_t v132 = v41;
  uint64_t v43 = v41;
  uint64_t v44 = swift_getOpaqueTypeMetadata2();
  uint64_t v138 = v44;
  uint64_t v142 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  v133 = (char *)&v121 - v45;
  uint64_t v46 = sub_10000650C(&qword_10019D638);
  uint64_t v137 = v46;
  uint64_t v200 = v42;
  unint64_t v201 = v43;
  uint64_t v47 = swift_getOpaqueTypeConformance2();
  uint64_t v136 = v47;
  uint64_t v135 = sub_100010484(&qword_10019D640, &qword_10019D638);
  uint64_t v200 = v44;
  unint64_t v201 = v46;
  uint64_t v202 = v47;
  uint64_t v203 = v135;
  v139 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v134 = swift_getOpaqueTypeMetadata2();
  uint64_t v141 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  v124 = (char *)&v121 - v48;
  sub_10000650C(&qword_10019D648);
  uint64_t v140 = type metadata accessor for ModifiedContent();
  uint64_t v148 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  v163 = (char *)&v121 - v49;
  sub_10000650C(&qword_10019D650);
  uint64_t v149 = type metadata accessor for ModifiedContent();
  uint64_t v152 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  v165 = (char *)&v121 - v50;
  uint64_t v151 = type metadata accessor for ModifiedContent();
  uint64_t v155 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  v145 = (char *)&v121 - v51;
  uint64_t v154 = type metadata accessor for ModifiedContent();
  uint64_t v156 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  v150 = (char *)&v121 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v153 = (uint64_t *)((char *)&v121 - v54);
  static HorizontalAlignment.leading.getter();
  uint64_t v55 = v178;
  uint64_t v184 = v178;
  uint64_t v185 = v179;
  uint64_t v56 = v180;
  uint64_t v186 = v180;
  VStack.init(alignment:spacing:content:)();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v57 = v174;
  sub_1000C5BF8(v174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  char v58 = v157;
  sub_100109E64();
  swift_release();
  uint64_t v60 = v176;
  uint64_t v59 = v177;
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v177 + 16);
  uint64_t v172 = v177 + 16;
  v173 = v61;
  v61(v176, v56, v57);
  uint64_t v62 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v170 = ((v62 + 32) & ~v62) + v175;
  uint64_t v171 = (v62 + 32) & ~v62;
  uint64_t v63 = v171;
  uint64_t v175 = v62 | 7;
  uint64_t v64 = swift_allocObject();
  uint64_t v65 = v179;
  *(void *)(v64 + 16) = v55;
  *(void *)(v64 + 24) = v65;
  uint64_t v66 = *(void (**)(uint64_t, char *, uint64_t))(v59 + 32);
  uint64_t v177 = v59 + 32;
  v66(v64 + v63, v60, v57);
  v169 = v66;
  uint64_t v67 = (uint64_t)v58;
  uint64_t v68 = v122;
  uint64_t v69 = v166;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1000D3FA8(v67, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v69, v68);
  uint64_t v70 = v180;
  sub_1000C5BF8(v57, v162);
  sub_100109EB0();
  swift_release();
  uint64_t v71 = v176;
  v173(v176, v70, v57);
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = v178;
  *(void *)(v72 + 24) = v65;
  v66(v72 + v171, v71, v57);
  uint64_t v74 = v128;
  uint64_t v73 = v129;
  char v75 = v164;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1000D3FA8(v67, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v75, v73);
  uint64_t v77 = v158;
  uint64_t v76 = v159;
  uint64_t v78 = v160;
  (*(void (**)(char *, void, uint64_t))(v159 + 104))(v158, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v160);
  uint64_t v80 = v125;
  uint64_t v79 = v126;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v74, v79);
  uint64_t v81 = v180;
  sub_1000C5BF8(v57, v162);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v82 = v133;
  uint64_t v83 = v131;
  View.navigationBarTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v147 + 8))(v80, v83);
  uint64_t v84 = v178;
  uint64_t v85 = v179;
  uint64_t v181 = v178;
  uint64_t v182 = v179;
  uint64_t v183 = v81;
  uint64_t v86 = v124;
  unint64_t v88 = v137;
  uint64_t v87 = v138;
  uint64_t v90 = v135;
  uint64_t v89 = v136;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v142 + 8))(v82, v87);
  uint64_t v200 = v87;
  unint64_t v201 = v88;
  uint64_t v202 = v89;
  uint64_t v203 = v90;
  v166 = (char *)swift_getOpaqueTypeConformance2();
  unint64_t v167 = sub_1000D3BDC();
  uint64_t v91 = v134;
  sub_10006B310();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v86, v91);
  int v92 = v176;
  uint64_t v93 = v173;
  uint64_t v94 = v174;
  v173(v176, v180, v174);
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = v84;
  *(void *)(v95 + 24) = v85;
  uint64_t v96 = v171;
  v169(v95 + v171, v92, v94);
  uint64_t v97 = sub_100010484(&qword_10019D658, &qword_10019D648);
  v193 = v166;
  uint64_t v194 = v97;
  uint64_t v98 = v140;
  uint64_t v99 = swift_getWitnessTable();
  sub_1000606EC();
  v100 = v163;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v100, v98);
  v101 = v176;
  uint64_t v102 = v174;
  v93(v176, v180, v174);
  uint64_t v103 = swift_allocObject();
  uint64_t v104 = v179;
  *(void *)(v103 + 16) = v178;
  *(void *)(v103 + 24) = v104;
  uint64_t v105 = v103 + v96;
  uint64_t v106 = v102;
  v169(v105, v101, v102);
  uint64_t v107 = sub_100010484(&qword_10019D660, &qword_10019D650);
  uint64_t v191 = v99;
  uint64_t v192 = v107;
  uint64_t v108 = v149;
  uint64_t v109 = swift_getWitnessTable();
  uint64_t v110 = v145;
  uint64_t v111 = v165;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v152 + 8))(v111, v108);
  v173(v101, v180, v106);
  uint64_t v112 = swift_allocObject();
  uint64_t v113 = v179;
  *(void *)(v112 + 16) = v178;
  *(void *)(v112 + 24) = v113;
  v169(v112 + v171, v101, v106);
  uint64_t v189 = v109;
  v190 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v114 = v151;
  uint64_t v115 = swift_getWitnessTable();
  v116 = v150;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v155 + 8))(v110, v114);
  uint64_t v187 = v115;
  v188 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v117 = v154;
  swift_getWitnessTable();
  v118 = v153;
  sub_1000508C8(v153, v116, v117);
  v119 = *(void (**)(char *, uint64_t))(v156 + 8);
  v119(v116, v117);
  sub_1000508C8(v161, v118, v117);
  return ((uint64_t (*)(void *, uint64_t))v119)(v118, v117);
}

uint64_t sub_1000C7CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v164 = a1;
  uint64_t v204 = a4;
  uint64_t v203 = type metadata accessor for AccessibilityTraits();
  uint64_t v202 = *(void *)(v203 - 8);
  __chkstk_darwin(v203);
  unint64_t v201 = (char *)v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v192);
  v193 = (char *)v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = type metadata accessor for FilterView();
  uint64_t v179 = *(void *)(v213 - 8);
  uint64_t v177 = *(void *)(v179 + 64);
  __chkstk_darwin(v213);
  uint64_t v178 = (char *)v156 - v8;
  uint64_t v183 = sub_100006560(&qword_10019D690);
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  uint64_t v181 = (char *)v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_100006560(&qword_10019D698);
  __chkstk_darwin(v180);
  uint64_t v186 = (void (*)(char *, uint64_t))((char *)v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v184 = sub_100006560(&qword_10019D6A0);
  __chkstk_darwin(v184);
  uint64_t v189 = (uint64_t)v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_100006560(&qword_10019D6A8);
  __chkstk_darwin(v185);
  v190 = (char *)v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = sub_100006560(&qword_10019D6B0);
  __chkstk_darwin(v187);
  uint64_t v191 = (uint64_t)v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_100006560(&qword_10019D6B8);
  __chkstk_darwin(v188);
  uint64_t v195 = (char *)v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = sub_100006560(&qword_10019D6C0);
  __chkstk_darwin(v196);
  uint64_t v197 = (uint64_t)v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = sub_100006560(&qword_10019D630);
  __chkstk_darwin(v198);
  uint64_t v200 = (uint64_t)v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v194 = (char *)v156 - v18;
  __chkstk_darwin(v19);
  uint64_t v199 = (uint64_t)v156 - v20;
  uint64_t v168 = type metadata accessor for ColorScheme();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  v166 = (char *)v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v165 = (uint64_t)v156 - v23;
  sub_10000650C(&qword_10019D618);
  uint64_t v210 = sub_10000650C(&qword_10019D620);
  uint64_t v212 = a3;
  uint64_t v211 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v24 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v222 = v24;
  uint64_t v223 = AssociatedTypeWitness;
  uint64_t v224 = v26;
  uint64_t v225 = WitnessTable;
  uint64_t v226 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v221[11] = v29;
  v221[12] = v30;
  v221[10] = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  v156[2] = type metadata accessor for VStack();
  v156[1] = swift_getWitnessTable();
  uint64_t v31 = type metadata accessor for ScrollView();
  uint64_t v157 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  v156[0] = (char *)v156 - v32;
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v159 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v158 = (char *)v156 - v34;
  uint64_t v160 = v35;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v162 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v205 = (char *)v156 - v37;
  sub_10000650C(&qword_100198608);
  uint64_t v163 = v36;
  uint64_t v210 = type metadata accessor for ModifiedContent();
  uint64_t v207 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  v176 = (char *)v156 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v161 = (char *)v156 - v40;
  __chkstk_darwin(v41);
  v209 = (char *)v156 - v42;
  uint64_t v43 = type metadata accessor for Divider();
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v208 = (char *)v156 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v48 = (char *)v156 - v47;
  uint64_t v49 = sub_100006560(&qword_100198C58);
  __chkstk_darwin(v49);
  uint64_t v51 = (char *)v156 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)v156 - v53;
  Divider.init()();
  LOBYTE(v26) = static Edge.Set.top.getter();
  uint64_t v55 = v164;
  sub_1000C5BF8(v213, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100109DAC();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  uint64_t v170 = v44 + 16;
  v169 = v64;
  v64(v51, v48, v43);
  uint64_t v172 = v49;
  uint64_t v65 = *(int *)(v49 + 36);
  uint64_t v66 = v156[0];
  uint64_t v67 = &v51[v65];
  *uint64_t v67 = v26;
  *((void *)v67 + 1) = v57;
  *((void *)v67 + 2) = v59;
  *((void *)v67 + 3) = v61;
  *((void *)v67 + 4) = v63;
  v67[40] = 0;
  uint64_t v68 = *(void (**)(char *, uint64_t))(v44 + 8);
  v173 = v48;
  uint64_t v175 = v43;
  uint64_t v174 = v44 + 8;
  uint64_t v171 = v68;
  v68(v48, v43);
  uint64_t v206 = v51;
  uint64_t v69 = (uint64_t)v54;
  sub_10001D6D8((uint64_t)v51, (uint64_t)v54, &qword_100198C58);
  uint64_t v214 = v211;
  uint64_t v215 = v212;
  uint64_t v70 = v55;
  uint64_t v216 = v55;
  static Axis.Set.vertical.getter();
  ScrollView.init(_:showsIndicators:content:)();
  LOBYTE(v55) = static Edge.Set.leading.getter();
  unsigned __int8 v71 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v55) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v71) {
    Edge.Set.init(rawValue:)();
  }
  sub_1000C5BF8(v213, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100109DAC();
  swift_release();
  uint64_t v72 = swift_getWitnessTable();
  uint64_t v73 = v158;
  sub_10006A708();
  uint64_t v74 = v31;
  uint64_t v75 = v70;
  (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v66, v74);
  static Edge.Set.horizontal.getter();
  unint64_t v76 = sub_100061B88();
  v221[8] = v72;
  v221[9] = v76;
  uint64_t v77 = v160;
  uint64_t v78 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v159 + 8))(v73, v77);
  uint64_t v79 = v165;
  sub_10001D3A4(v165);
  uint64_t v80 = v167;
  uint64_t v81 = v166;
  uint64_t v82 = v168;
  (*(void (**)(char *, void, uint64_t))(v167 + 104))(v166, enum case for ColorScheme.light(_:), v168);
  char v83 = static ColorScheme.== infix(_:_:)();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v80 + 8);
  v84(v81, v82);
  v84((char *)v79, v82);
  if (v83)
  {
    uint64_t v85 = (uint64_t)v186;
    if (qword_1001980B8 != -1) {
      swift_once();
    }
    uint64_t v86 = &qword_1001AA360;
  }
  else
  {
    uint64_t v85 = (uint64_t)v186;
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v86 = &qword_1001AA338;
  }
  uint64_t v87 = *v86;
  swift_retain();
  uint64_t v222 = v87;
  static Edge.Set.all.getter();
  v221[6] = v78;
  v221[7] = &protocol witness table for _PaddingLayout;
  uint64_t v88 = v163;
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v90 = v161;
  uint64_t v91 = v205;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v162 + 8))(v91, v88);
  uint64_t v92 = sub_100010484(&qword_100198600, &qword_100198608);
  v221[4] = v89;
  v221[5] = v92;
  uint64_t v93 = v210;
  uint64_t v168 = swift_getWitnessTable();
  sub_1000508C8(v209, v90, v93);
  uint64_t v94 = *(void (**)(char *, uint64_t))(v207 + 8);
  uint64_t v205 = (char *)(v207 + 8);
  uint64_t v186 = v94;
  v94(v90, v93);
  Divider.init()();
  uint64_t v95 = v179;
  uint64_t v96 = v178;
  uint64_t v97 = v213;
  (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v178, v75, v213);
  unint64_t v98 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
  uint64_t v99 = swift_allocObject();
  uint64_t v100 = v211;
  uint64_t v101 = v212;
  *(void *)(v99 + 16) = v211;
  *(void *)(v99 + 24) = v101;
  uint64_t v102 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v95 + 32))(v99 + v98, v96, v97);
  __chkstk_darwin(v102);
  v156[-4] = v100;
  v156[-3] = v101;
  v156[-2] = v75;
  sub_100006560(&qword_10019D6C8);
  sub_1000D3F04();
  uint64_t v103 = v181;
  Button.init(action:label:)();
  sub_1000C5BF8(v97, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v100) = sub_10010B908();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v105 = swift_allocObject();
  *(unsigned char *)(v105 + 16) = (v100 & 1) == 0;
  uint64_t v106 = v182;
  uint64_t v107 = v183;
  (*(void (**)(uint64_t, char *, uint64_t))(v182 + 16))(v85, v103, v183);
  uint64_t v108 = (uint64_t *)(v85 + *(int *)(v180 + 36));
  *uint64_t v108 = KeyPath;
  v108[1] = (uint64_t)sub_1000D7E50;
  v108[2] = v105;
  (*(void (**)(char *, uint64_t))(v106 + 8))(v103, v107);
  sub_1000C5BF8(v97, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v93) = sub_10010B908();
  swift_release();
  if (v93) {
    uint64_t v109 = static Color.blue.getter();
  }
  else {
    uint64_t v109 = static Color.gray.getter();
  }
  uint64_t v110 = v109;
  uint64_t v111 = (uint64_t)v195;
  char v112 = static Edge.Set.all.getter();
  uint64_t v113 = v189;
  sub_1000066D4(v85, v189, &qword_10019D698);
  uint64_t v114 = v113 + *(int *)(v184 + 36);
  *(void *)uint64_t v114 = v110;
  *(unsigned char *)(v114 + 8) = v112;
  sub_1000067DC(v85, &qword_10019D698);
  uint64_t v115 = v193;
  v116 = &v193[*(int *)(v192 + 20)];
  uint64_t v117 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v118 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v118 - 8) + 104))(v116, v117, v118);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v115 = _Q0;
  uint64_t v124 = (uint64_t)v190;
  uint64_t v125 = (uint64_t)&v190[*(int *)(v185 + 36)];
  sub_1000D50F0((uint64_t)v115, v125, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v125 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4(v113, v124, &qword_10019D6A0);
  sub_1000D3FA8((uint64_t)v115, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC(v113, &qword_10019D6A0);
  LOBYTE(v125) = static Edge.Set.vertical.getter();
  uint64_t v126 = v191;
  sub_1000066D4(v124, v191, &qword_10019D6A8);
  uint64_t v127 = v126 + *(int *)(v187 + 36);
  *(unsigned char *)uint64_t v127 = v125;
  *(_OWORD *)(v127 + 8) = 0u;
  *(_OWORD *)(v127 + 24) = 0u;
  *(unsigned char *)(v127 + 40) = 1;
  sub_1000067DC(v124, &qword_10019D6A8);
  LOBYTE(v125) = static Edge.Set.horizontal.getter();
  sub_1000066D4(v126, v111, &qword_10019D6B0);
  uint64_t v128 = v111 + *(int *)(v188 + 36);
  *(unsigned char *)uint64_t v128 = v125;
  *(_OWORD *)(v128 + 8) = 0u;
  *(_OWORD *)(v128 + 24) = 0u;
  *(unsigned char *)(v128 + 40) = 1;
  sub_1000067DC(v126, &qword_10019D6B0);
  LOBYTE(v126) = static Edge.Set.leading.getter();
  unsigned __int8 v129 = static Edge.Set.trailing.getter();
  unsigned __int8 v130 = static Edge.Set.bottom.getter();
  char v131 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v126) {
    char v131 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v129) {
    char v131 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v130) {
    char v131 = Edge.Set.init(rawValue:)();
  }
  sub_1000C5BF8(v213, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  double v132 = sub_100109DAC();
  uint64_t v134 = v133;
  uint64_t v136 = v135;
  uint64_t v138 = v137;
  swift_release();
  uint64_t v139 = v197;
  sub_1000066D4(v111, v197, &qword_10019D6B8);
  uint64_t v140 = v139 + *(int *)(v196 + 36);
  *(unsigned char *)uint64_t v140 = v131;
  *(double *)(v140 + 8) = v132;
  *(void *)(v140 + 16) = v134;
  *(void *)(v140 + 24) = v136;
  *(void *)(v140 + 32) = v138;
  sub_1000067DC(v111, &qword_10019D6B8);
  uint64_t v141 = v201;
  static AccessibilityTraits.isHeader.getter();
  sub_1000D4008();
  uint64_t v142 = (uint64_t)v194;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v141, v203);
  sub_1000067DC(v139, &qword_10019D6C0);
  uint64_t v143 = v199;
  sub_10001D6D8(v142, v199, &qword_10019D630);
  uint64_t v144 = (uint64_t)v206;
  sub_1000066D4(v69, (uint64_t)v206, &qword_100198C58);
  uint64_t v222 = v144;
  v145 = v176;
  uint64_t v146 = v209;
  uint64_t v147 = v210;
  (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v176, v209, v210);
  uint64_t v223 = (uint64_t)v145;
  uint64_t v148 = v173;
  uint64_t v149 = v208;
  uint64_t v150 = v175;
  v169(v173, v208, v175);
  uint64_t v224 = (uint64_t)v148;
  uint64_t v151 = v200;
  sub_1000066D4(v143, v200, &qword_10019D630);
  uint64_t v225 = v151;
  v221[0] = v172;
  v221[1] = v147;
  v221[2] = v150;
  v221[3] = v198;
  unint64_t v217 = sub_1000D42E4();
  uint64_t v218 = v168;
  uint64_t v219 = sub_1000D3A98(&qword_10019D718, (void (*)(uint64_t))&type metadata accessor for Divider);
  unint64_t v220 = sub_1000D4390();
  sub_100050970(&v222, 4uLL, (uint64_t)v221);
  sub_1000067DC(v143, &qword_10019D630);
  uint64_t v152 = v149;
  v153 = v171;
  v171(v152, v150);
  uint64_t v154 = v186;
  v186(v146, v147);
  sub_1000067DC(v69, &qword_100198C58);
  sub_1000067DC(v151, &qword_10019D630);
  v153(v148, v150);
  v154(v145, v147);
  return sub_1000067DC((uint64_t)v206, &qword_100198C58);
}

uint64_t sub_1000C9794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a4;
  v17[0] = sub_10000650C(&qword_10019D618);
  v17[1] = sub_10000650C(&qword_10019D620);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v26 = v6;
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v23 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for VStack();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v17 - v13);
  static HorizontalAlignment.leading.getter();
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = v18;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  sub_1000508C8(v19, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v15)(v14, v8);
}

uint64_t sub_1000C9CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v168 = a1;
  uint64_t v159 = a4;
  uint64_t v170 = a2;
  uint64_t v171 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  *(void *)&long long v241 = v4;
  *((void *)&v241 + 1) = AssociatedTypeWitness;
  *(void *)&long long v242 = type metadata accessor for ModifiedContent();
  *((void *)&v242 + 1) = swift_getWitnessTable();
  *(void *)&long long v243 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v217 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v215 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for LazyVGrid();
  v135[1] = swift_getWitnessTable();
  v135[2] = v6;
  uint64_t v7 = type metadata accessor for ScrollView();
  uint64_t v137 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v136 = (char *)v135 - v8;
  uint64_t v138 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v139 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v141 = (char *)v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v140 = (char *)v135 - v13;
  uint64_t v172 = sub_10000650C(&qword_10019D618);
  uint64_t v142 = v10;
  swift_getTupleTypeMetadata2();
  uint64_t v156 = type metadata accessor for TupleView();
  uint64_t v158 = type metadata accessor for Optional();
  uint64_t v166 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v155 = (uint64_t)v135 - v16;
  uint64_t v153 = sub_100006560(&qword_10019D728);
  __chkstk_darwin(v153);
  uint64_t v149 = (uint64_t)v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006560(&qword_10019D730);
  uint64_t v151 = *(void *)(v18 - 8);
  uint64_t v152 = v18;
  __chkstk_darwin(v18);
  uint64_t v150 = (char *)v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = sub_100006560(&qword_10019D620);
  __chkstk_darwin(v164);
  uint64_t v154 = (uint64_t)v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v148 = (char *)v135 - v22;
  __chkstk_darwin(v23);
  uint64_t v165 = (uint64_t)v135 - v24;
  uint64_t v161 = type metadata accessor for AccessibilityTraits();
  uint64_t v167 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  uint64_t v160 = (char *)v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v135[0] = (char *)v135 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v162 = (char *)v135 - v29;
  __chkstk_darwin(v30);
  uint64_t v169 = (uint64_t)v135 - v31;
  __chkstk_darwin(v32);
  uint64_t v163 = (uint64_t)v135 - v33;
  uint64_t v146 = type metadata accessor for FilterView();
  uint64_t v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000C5BF8(v146, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  __int16 v134 = 256;
  uint64_t v133 = 0;
  uint64_t v34 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v39 = Text.fontWeight(_:)();
  uint64_t v41 = v40;
  char v43 = v42 & 1;
  sub_1000065A4(v34, v36, v38);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v44 = Text.font(_:)();
  uint64_t v144 = v45;
  uint64_t v145 = v44;
  LOBYTE(AssociatedTypeWitness) = v46;
  uint64_t v143 = v47;
  swift_release();
  sub_1000065A4(v39, v41, v43);
  swift_bridgeObjectRelease();
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v48 = v218;
  LOBYTE(v41) = v219;
  uint64_t v49 = v220;
  LOBYTE(v36) = v221;
  uint64_t v50 = v222;
  uint64_t v51 = v223;
  char v52 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  char v237 = AssociatedTypeWitness & 1;
  char v235 = v41;
  char v233 = v36;
  char v230 = 0;
  LOBYTE(v41) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  *(_DWORD *)((char *)&v206 + 1) = *(_DWORD *)v236;
  DWORD1(v206) = *(_DWORD *)&v236[3];
  *(_DWORD *)((char *)&v207 + 9) = *(_DWORD *)v234;
  HIDWORD(v207) = *(_DWORD *)&v234[3];
  *(_DWORD *)((char *)&v208 + 9) = *(_DWORD *)v232;
  HIDWORD(v208) = *(_DWORD *)&v232[3];
  *(_DWORD *)((char *)&v210 + 1) = *(_DWORD *)v231;
  DWORD1(v210) = *(_DWORD *)&v231[3];
  char v238 = 0;
  *(void *)&long long v205 = v145;
  *((void *)&v205 + 1) = v144;
  LOBYTE(v206) = v237;
  *((void *)&v206 + 1) = v143;
  *(void *)&long long v207 = v48;
  BYTE8(v207) = v235;
  *(void *)&long long v208 = v49;
  uint64_t v61 = v169;
  BYTE8(v208) = v233;
  *(void *)&long long v209 = v50;
  *((void *)&v209 + 1) = v51;
  LOBYTE(v210) = v52;
  *((void *)&v210 + 1) = v54;
  *(void *)&long long v211 = v56;
  *((void *)&v211 + 1) = v58;
  *(void *)&long long v212 = v60;
  BYTE8(v212) = v230;
  HIDWORD(v212) = *(_DWORD *)&v240[3];
  *(_DWORD *)((char *)&v212 + 9) = *(_DWORD *)v240;
  LOBYTE(v213) = v41;
  DWORD1(v213) = *(_DWORD *)&v239[3];
  *(_DWORD *)((char *)&v213 + 1) = *(_DWORD *)v239;
  *((void *)&v213 + 1) = v62;
  *(void *)&v214[0] = v63;
  *((void *)&v214[0] + 1) = v64;
  *(void *)&v214[1] = v65;
  BYTE8(v214[1]) = 0;
  uint64_t v66 = v160;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v67 = sub_100006560(&qword_10019D738);
  uint64_t v68 = sub_1000D7CD4(&qword_10019D740, &qword_10019D738, (void (*)(void))sub_1000D4448);
  uint64_t v69 = (uint64_t)v162;
  uint64_t v145 = v68;
  View.accessibilityAddTraits(_:)();
  uint64_t v70 = *(void (**)(char *, uint64_t))(v167 + 8);
  v167 += 8;
  uint64_t v144 = v70;
  v70(v66, v161);
  long long v249 = v213;
  v250[0] = v214[0];
  *(_OWORD *)((char *)v250 + 9) = *(_OWORD *)((char *)v214 + 9);
  long long v245 = v209;
  long long v246 = v210;
  long long v248 = v212;
  long long v247 = v211;
  long long v241 = v205;
  long long v242 = v206;
  long long v244 = v208;
  long long v243 = v207;
  sub_1000D4548((uint64_t)&v241);
  ModifiedContent<>.accessibilityHeading(_:)();
  sub_1000067DC(v69, &qword_10019D618);
  sub_10001D6D8(v61, v163, &qword_10019D618);
  uint64_t v173 = v170;
  uint64_t v174 = v171;
  uint64_t v175 = v168;
  sub_1000CC280(v149);
  sub_100006560(&qword_10019D768);
  sub_1000D4594();
  sub_1000D47CC();
  unsigned __int8 v71 = v150;
  Section<>.init(header:content:)();
  LOBYTE(v69) = static Edge.Set.bottom.getter();
  uint64_t v73 = v151;
  uint64_t v72 = v152;
  uint64_t v74 = (uint64_t)v148;
  (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v148, v71, v152);
  uint64_t v75 = v74 + *(int *)(v164 + 36);
  *(unsigned char *)uint64_t v75 = v69;
  *(_OWORD *)(v75 + 8) = 0u;
  *(_OWORD *)(v75 + 24) = 0u;
  *(unsigned char *)(v75 + 40) = 1;
  uint64_t v76 = v73;
  uint64_t v77 = v146;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v71, v72);
  sub_10001D6D8(v74, v165, &qword_10019D620);
  sub_1000C5BF8(v77, v147);
  LOBYTE(v69) = sub_10010AAE8();
  swift_release();
  if (v69)
  {
    sub_1000C5BF8(v77, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    __int16 v134 = 256;
    uint64_t v78 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v80 = v79;
    char v82 = v81 & 1;
    static Font.Weight.semibold.getter();
    uint64_t v83 = Text.fontWeight(_:)();
    uint64_t v85 = v84;
    uint64_t v153 = v67;
    char v87 = v86 & 1;
    sub_1000065A4(v78, v80, v82);
    swift_bridgeObjectRelease();
    static Font.title2.getter();
    uint64_t v88 = Text.font(_:)();
    uint64_t v151 = v89;
    uint64_t v152 = v88;
    char v91 = v90;
    uint64_t v93 = v92;
    swift_release();
    sub_1000065A4(v83, v85, v87);
    swift_bridgeObjectRelease();
    static Alignment.leading.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v94 = v224;
    LOBYTE(v80) = v225;
    uint64_t v95 = v226;
    char v96 = v227;
    uint64_t v97 = v228;
    uint64_t v98 = v229;
    LOBYTE(v83) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    uint64_t v104 = v103;
    uint64_t v106 = v105;
    char v197 = v91 & 1;
    char v195 = v80;
    char v193 = v96;
    char v190 = 0;
    LOBYTE(v80) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    *(_DWORD *)((char *)&v181 + 1) = *(_DWORD *)v196;
    DWORD1(v181) = *(_DWORD *)&v196[3];
    *(_DWORD *)((char *)&v182 + 9) = *(_DWORD *)v194;
    HIDWORD(v182) = *(_DWORD *)&v194[3];
    *(_DWORD *)((char *)&v183 + 9) = *(_DWORD *)v192;
    HIDWORD(v183) = *(_DWORD *)&v192[3];
    *(_DWORD *)((char *)&v185 + 1) = *(_DWORD *)v191;
    DWORD1(v185) = *(_DWORD *)&v191[3];
    char v198 = 0;
    *(void *)&long long v180 = v152;
    *((void *)&v180 + 1) = v151;
    LOBYTE(v181) = v197;
    *((void *)&v181 + 1) = v93;
    *(void *)&long long v182 = v94;
    BYTE8(v182) = v195;
    *(void *)&long long v183 = v95;
    BYTE8(v183) = v193;
    *(void *)&long long v184 = v97;
    *((void *)&v184 + 1) = v98;
    uint64_t v61 = v169;
    LOBYTE(v185) = v83;
    *((void *)&v185 + 1) = v100;
    *(void *)&long long v186 = v102;
    *((void *)&v186 + 1) = v104;
    *(void *)&long long v187 = v106;
    BYTE8(v187) = v190;
    HIDWORD(v187) = *(_DWORD *)&v200[3];
    *(_DWORD *)((char *)&v187 + 9) = *(_DWORD *)v200;
    LOBYTE(v188) = v80;
    DWORD1(v188) = *(_DWORD *)&v199[3];
    *(_DWORD *)((char *)&v188 + 1) = *(_DWORD *)v199;
    *((void *)&v188 + 1) = v107;
    *(void *)&v189[0] = v108;
    *((void *)&v189[0] + 1) = v109;
    *(void *)&v189[1] = v110;
    BYTE8(v189[1]) = 0;
    uint64_t v111 = v160;
    static AccessibilityTraits.isHeader.getter();
    uint64_t v112 = v135[0];
    View.accessibilityAddTraits(_:)();
    v144(v111, v161);
    long long v213 = v188;
    v214[0] = v189[0];
    *(_OWORD *)((char *)v214 + 9) = *(_OWORD *)((char *)v189 + 9);
    long long v209 = v184;
    long long v210 = v185;
    long long v211 = v186;
    long long v212 = v187;
    long long v205 = v180;
    long long v206 = v181;
    long long v207 = v182;
    long long v208 = v183;
    sub_1000D4548((uint64_t)&v205);
    uint64_t v113 = (uint64_t)v162;
    ModifiedContent<>.accessibilityHeading(_:)();
    sub_1000067DC(v112, &qword_10019D618);
    uint64_t v114 = sub_10001D6D8(v113, v61, &qword_10019D618);
    __chkstk_darwin(v114);
    uint64_t v115 = v171;
    v135[-4] = v170;
    v135[-3] = v115;
    uint64_t v133 = v168;
    static Axis.Set.vertical.getter();
    v116 = v136;
    ScrollView.init(_:showsIndicators:content:)();
    static Edge.Set.bottom.getter();
    uint64_t v117 = v138;
    uint64_t v118 = swift_getWitnessTable();
    v119 = v141;
    View.padding(_:_:)();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v116, v117);
    uint64_t v178 = v118;
    uint64_t v179 = &protocol witness table for _PaddingLayout;
    uint64_t v120 = v142;
    uint64_t v121 = swift_getWitnessTable();
    uint64_t v122 = v140;
    sub_1000508C8(v140, v119, v120);
    uint64_t v123 = v139;
    uint64_t v124 = *(void (**)(char *, uint64_t))(v139 + 8);
    v124(v119, v120);
    sub_1000066D4(v61, v113, &qword_10019D618);
    *(void *)&long long v180 = v113;
    (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v119, v122, v120);
    *((void *)&v180 + 1) = v119;
    unint64_t v202 = v172;
    uint64_t v203 = v120;
    unint64_t v176 = sub_1000D486C();
    uint64_t v177 = v121;
    uint64_t v125 = (uint64_t)v157;
    sub_100050970((uint64_t *)&v180, 2uLL, (uint64_t)&v202);
    v124(v122, v120);
    sub_1000067DC(v61, &qword_10019D618);
    v124(v119, v120);
    sub_1000067DC(v113, &qword_10019D618);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v125, 0, 1, v156);
  }
  else
  {
    uint64_t v125 = (uint64_t)v157;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v157, 1, 1, v156);
  }
  swift_getWitnessTable();
  uint64_t v126 = v155;
  sub_100050904(v125, v155);
  uint64_t v127 = v158;
  uint64_t v171 = *(void (**)(void, void))(v166 + 8);
  v171(v125, v158);
  uint64_t v128 = v163;
  sub_1000066D4(v163, v61, &qword_10019D618);
  *(void *)&long long v205 = v61;
  uint64_t v129 = v165;
  uint64_t v130 = v154;
  sub_1000066D4(v165, v154, &qword_10019D620);
  *((void *)&v205 + 1) = v130;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v125, v126, v127);
  *(void *)&long long v206 = v125;
  *(void *)&long long v180 = v172;
  *((void *)&v180 + 1) = v164;
  *(void *)&long long v181 = v127;
  unint64_t v202 = sub_1000D486C();
  uint64_t v203 = sub_1000D7CD4(&qword_10019D7B8, &qword_10019D620, (void (*)(void))sub_1000D4944);
  uint64_t v201 = swift_getWitnessTable();
  uint64_t v204 = swift_getWitnessTable();
  sub_100050970((uint64_t *)&v205, 3uLL, (uint64_t)&v180);
  char v131 = v171;
  v171(v126, v127);
  sub_1000067DC(v129, &qword_10019D620);
  sub_1000067DC(v128, &qword_10019D618);
  v131(v125, v127);
  sub_1000067DC(v130, &qword_10019D620);
  return sub_1000067DC(v169, &qword_10019D618);
}

uint64_t sub_1000CB144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100006560(&qword_10019D7A8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = static Alignment.center.getter();
  v10[1] = v11;
  uint64_t v12 = sub_100006560(&qword_10019D7F8);
  sub_1000CB26C(a1, a2, a3, (uint64_t)v10 + *(int *)(v12 + 44));
  LOBYTE(a3) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_1000066D4((uint64_t)v10, a4, &qword_10019D7A8);
  uint64_t v21 = a4 + *(int *)(sub_100006560(&qword_10019D768) + 36);
  *(unsigned char *)uint64_t v21 = a3;
  *(void *)(v21 + 8) = v14;
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v18;
  *(void *)(v21 + 32) = v20;
  *(unsigned char *)(v21 + 40) = 0;
  return sub_1000067DC((uint64_t)v10, &qword_10019D7A8);
}

uint64_t sub_1000CB26C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v73 = a3;
  uint64_t v70 = a4;
  uint64_t v71 = a1;
  uint64_t v4 = sub_100006560(&qword_10019D800);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100006560(&qword_10019D808);
  __chkstk_darwin(v66);
  uint64_t v68 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100006560(&qword_10019D810);
  __chkstk_darwin(v67);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v69 = (uint64_t)&v62 - v11;
  uint64_t v12 = type metadata accessor for ColorScheme();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = type metadata accessor for RoundedRectangle();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (_OWORD *)((char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = sub_100006560(&qword_10019C6D0);
  __chkstk_darwin(v63);
  uint64_t v65 = (uint64_t)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v62 - v25;
  __chkstk_darwin(v27);
  uint64_t v64 = (uint64_t)&v62 - v28;
  uint64_t v29 = (char *)v22 + *(int *)(v20 + 28);
  uint64_t v30 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v31 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v29, v30, v31);
  __asm { FMOV            V0.2D, #8.0 }
  _OWORD *v22 = _Q0;
  type metadata accessor for FilterView();
  sub_10001D3A4((uint64_t)v18);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for ColorScheme.light(_:), v12);
  LOBYTE(v29) = static ColorScheme.== infix(_:_:)();
  char v37 = *(void (**)(char *, uint64_t))(v13 + 8);
  v37(v15, v12);
  v37(v18, v12);
  if (v29)
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    char v38 = &qword_1001AA338;
  }
  else
  {
    if (qword_1001980B8 != -1) {
      swift_once();
    }
    char v38 = &qword_1001AA360;
  }
  uint64_t v39 = *v38;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000D50F0((uint64_t)v22, (uint64_t)v26, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v41 = (uint64_t *)&v26[*(int *)(v63 + 36)];
  *uint64_t v41 = KeyPath;
  v41[1] = v39;
  sub_1000D3FA8((uint64_t)v22, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v42 = v64;
  sub_10001D6D8((uint64_t)v26, v64, &qword_10019C6D0);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  uint64_t v43 = sub_100006560(&qword_10019D818);
  sub_1000CB8AC(v72, v73, (uint64_t)&v6[*(int *)(v43 + 44)]);
  char v44 = static Edge.Set.horizontal.getter();
  uint64_t v45 = v68;
  sub_1000066D4((uint64_t)v6, v68, &qword_10019D800);
  uint64_t v46 = v45 + *(int *)(v66 + 36);
  *(unsigned char *)uint64_t v46 = v44;
  *(_OWORD *)(v46 + 8) = 0u;
  *(_OWORD *)(v46 + 24) = 0u;
  *(unsigned char *)(v46 + 40) = 1;
  sub_1000067DC((uint64_t)v6, &qword_10019D800);
  char v47 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  sub_1000066D4(v45, (uint64_t)v9, &qword_10019D808);
  uint64_t v56 = &v9[*(int *)(v67 + 36)];
  *uint64_t v56 = v47;
  *((void *)v56 + 1) = v49;
  *((void *)v56 + 2) = v51;
  *((void *)v56 + 3) = v53;
  *((void *)v56 + 4) = v55;
  v56[40] = 0;
  sub_1000067DC(v45, &qword_10019D808);
  uint64_t v57 = v69;
  sub_10001D6D8((uint64_t)v9, v69, &qword_10019D810);
  uint64_t v58 = v65;
  sub_1000066D4(v42, v65, &qword_10019C6D0);
  sub_1000066D4(v57, (uint64_t)v9, &qword_10019D810);
  uint64_t v59 = v70;
  sub_1000066D4(v58, v70, &qword_10019C6D0);
  uint64_t v60 = sub_100006560(&qword_10019D820);
  sub_1000066D4((uint64_t)v9, v59 + *(int *)(v60 + 48), &qword_10019D810);
  sub_1000067DC(v57, &qword_10019D810);
  sub_1000067DC(v42, &qword_10019C6D0);
  sub_1000067DC((uint64_t)v9, &qword_10019D810);
  return sub_1000067DC(v58, &qword_10019C6D0);
}

uint64_t sub_1000CB8AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v71 = type metadata accessor for Divider();
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v69 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v60 - v7;
  uint64_t v8 = sub_100006560(&qword_10019D828);
  __chkstk_darwin(v8 - 8);
  uint64_t v74 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t)&v60 - v11;
  __chkstk_darwin(v12);
  uint64_t v75 = (uint64_t)&v60 - v13;
  uint64_t v14 = (int *)(type metadata accessor for CompactDatePicker(0) - 8);
  __chkstk_darwin(v14);
  uint64_t v68 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v77 = (uint64_t)&v60 - v17;
  __chkstk_darwin(v18);
  uint64_t v76 = (uint64_t)&v60 - v19;
  __chkstk_darwin(v20);
  uint64_t v79 = (uint64_t)&v60 - v21;
  uint64_t v22 = type metadata accessor for FilterView();
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v94 = a1;
  uint64_t v95 = a2;
  swift_getKeyPath();
  type metadata accessor for FilterViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v92 = a1;
  uint64_t v93 = a2;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v64 = a1;
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v24 = a2;
  uint64_t v65 = a2;
  swift_getKeyPath();
  uint64_t v25 = (uint64_t)v74;
  uint64_t v62 = WitnessTable;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v88 = a1;
  uint64_t v89 = v24;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v61 = v96;
  uint64_t v60 = v97;
  uint64_t v26 = v98;
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v27 = v79;
  sub_10010A190((char *)(v79 + v14[10]));
  swift_release();
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  double v28 = sub_10010A420();
  swift_release();
  sub_1000C5BF8(v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v24) = sub_10010A4BC();
  swift_release();
  sub_10001D6D8(v75, v27, &qword_10019D828);
  sub_10001D6D8(v73, v27 + v14[7], &qword_10019D828);
  sub_10001D6D8(v25, v27 + v14[8], &qword_10019D828);
  uint64_t v66 = v14;
  uint64_t v29 = (void *)(v27 + v14[9]);
  uint64_t v30 = v60;
  *uint64_t v29 = v61;
  v29[1] = v30;
  v29[2] = v26;
  *(double *)(v27 + v14[11]) = v28;
  *(unsigned char *)(v27 + v14[12]) = v24 & 1;
  Divider.init()();
  uint64_t v31 = v63;
  sub_1000C5BF8(v22, v63);
  uint64_t v32 = v64;
  uint64_t v33 = v65;
  uint64_t v86 = v64;
  uint64_t v87 = v65;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000C5BF8(v22, v31);
  uint64_t v84 = v32;
  uint64_t v85 = v33;
  uint64_t v34 = v33;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000C5BF8(v22, v31);
  uint64_t v82 = v32;
  uint64_t v83 = v33;
  swift_getKeyPath();
  uint64_t v35 = (uint64_t)v74;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  sub_1000C5BF8(v22, v31);
  uint64_t v80 = v32;
  uint64_t v81 = v34;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v36 = v96;
  uint64_t v37 = v97;
  uint64_t v38 = v98;
  uint64_t v39 = v67;
  sub_1000C5BF8(v22, v67);
  uint64_t v40 = v66;
  uint64_t v41 = v76;
  sub_10010A4FC((char *)(v76 + v66[10]));
  swift_release();
  sub_1000C5BF8(v22, v39);
  sub_10010A79C();
  uint64_t v43 = v42;
  swift_release();
  sub_1000C5BF8(v22, v39);
  LOBYTE(v39) = sub_10010A864();
  swift_release();
  sub_10001D6D8(v75, v41, &qword_10019D828);
  char v44 = v40;
  sub_10001D6D8(v73, v41 + v40[7], &qword_10019D828);
  uint64_t v45 = v41 + v40[8];
  uint64_t v46 = v41;
  sub_10001D6D8(v35, v45, &qword_10019D828);
  char v47 = (void *)(v41 + v44[9]);
  *char v47 = v36;
  v47[1] = v37;
  v47[2] = v38;
  *(void *)(v41 + v44[11]) = v43;
  *(unsigned char *)(v41 + v44[12]) = v39 & 1;
  uint64_t v48 = v77;
  sub_1000D50F0(v79, v77, type metadata accessor for CompactDatePicker);
  uint64_t v49 = v70;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  uint64_t v51 = v69;
  uint64_t v52 = v78;
  uint64_t v53 = v71;
  v50(v69, v78, v71);
  uint64_t v54 = v46;
  uint64_t v55 = v68;
  sub_1000D50F0(v54, v68, type metadata accessor for CompactDatePicker);
  uint64_t v56 = v72;
  sub_1000D50F0(v48, v72, type metadata accessor for CompactDatePicker);
  uint64_t v57 = sub_100006560(&qword_10019D830);
  v50((char *)(v56 + *(int *)(v57 + 48)), v51, v53);
  sub_1000D50F0(v55, v56 + *(int *)(v57 + 64), type metadata accessor for CompactDatePicker);
  sub_1000D3FA8(v76, type metadata accessor for CompactDatePicker);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
  v58(v52, v53);
  sub_1000D3FA8(v79, type metadata accessor for CompactDatePicker);
  sub_1000D3FA8(v55, type metadata accessor for CompactDatePicker);
  v58(v51, v53);
  return sub_1000D3FA8(v77, type metadata accessor for CompactDatePicker);
}

void sub_1000CC1D8(double *a1@<X8>)
{
  *a1 = sub_10010A168();
}

uint64_t sub_1000CC204()
{
  return sub_10010A17C();
}

void sub_1000CC22C(double *a1@<X8>)
{
  *a1 = sub_10010A4D4();
}

uint64_t sub_1000CC258()
{
  return sub_10010A4E8();
}

uint64_t sub_1000CC280@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v1 = type metadata accessor for AccessibilityTraits();
  uint64_t v42 = *(void *)(v1 - 8);
  uint64_t v43 = v1;
  __chkstk_darwin(v1);
  uint64_t v40 = &v35[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = sub_100006560(&qword_10019D7F0);
  uint64_t v38 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for FilterView();
  uint64_t v6 = sub_1000C5BF8(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v7 = (uint64_t *)(v6 + *(void *)(*(void *)v6 + 216));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v44 = v8;
  unint64_t v45 = v9;
  sub_10002374C();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v16 = v15;
  char v17 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  int v26 = v14 & 1;
  int v36 = v26;
  uint64_t v27 = qword_1001AA348;
  swift_retain();
  uint64_t v28 = static Font.caption.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v44 = v10;
  unint64_t v45 = v12;
  char v46 = v26;
  uint64_t v47 = v16;
  char v48 = v17;
  uint64_t v49 = v19;
  uint64_t v50 = v21;
  uint64_t v51 = v23;
  uint64_t v52 = v25;
  char v53 = 0;
  uint64_t v54 = v27;
  uint64_t v55 = KeyPath;
  uint64_t v56 = v28;
  static Font.Weight.semibold.getter();
  uint64_t v37 = v16;
  uint64_t v30 = sub_100006560(&qword_10019D778);
  unint64_t v31 = sub_1000D4674();
  View.fontWeight(_:)();
  sub_1000065A4(v10, v12, v36);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v32 = v40;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v44 = v30;
  unint64_t v45 = v31;
  swift_getOpaqueTypeConformance2();
  uint64_t v33 = v39;
  View.accessibilityRemoveTraits(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v32, v43);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v38 + 8))(v4, v33);
}

uint64_t sub_1000CC614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v30 = a4;
  uint64_t v6 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v6 - 8);
  uint64_t v29 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v37 = v8;
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = v10;
  uint64_t v40 = WitnessTable;
  uint64_t v41 = AssociatedConformanceWitness;
  uint64_t v13 = type metadata accessor for ForEach();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v15 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v35 = v14;
  uint64_t v36 = v15;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v27 = v13;
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for LazyVGrid();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v27 - v21);
  uint64_t v23 = type metadata accessor for FilterView();
  uint64_t v24 = v28;
  sub_1000C5BF8(v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = v24;
  static HorizontalAlignment.center.getter();
  sub_10011937C();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v22, v19, v16);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, v16);
  sub_1000508C8(v30, v22, v16);
  return ((uint64_t (*)(void *, uint64_t))v25)(v22, v16);
}

uint64_t sub_1000CCB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v31 = type metadata accessor for FilterView();
  uint64_t v35 = *(void *)(v31 - 8);
  uint64_t v36 = *(void *)(v35 + 64);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)v30 - v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Array();
  v30[3] = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000650C(&qword_10019D628);
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  v30[1] = type metadata accessor for Button();
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  v30[5] = v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  v30[2] = WitnessTable;
  v30[4] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v41 = v6;
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v43 = v8;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v11 = type metadata accessor for ForEach();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v30 - v16);
  uint64_t v18 = v31;
  sub_1000C5BF8(v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v19 = sub_10010ABB4();
  swift_release();
  uint64_t v41 = v19;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, a1, v18);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v33;
  *(void *)(v23 + 16) = v32;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v23 + v22, v20, v18);
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v39 = v25;
  uint64_t v40 = v26;
  uint64_t v27 = swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  uint64_t v38 = v27;
  swift_getWitnessTable();
  sub_1000508C8(v17, v14, v11);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v14, v11);
  sub_1000508C8(v37, v17, v11);
  return ((uint64_t (*)(void *, uint64_t))v28)(v17, v11);
}

uint64_t sub_1000CD0A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v68 = a5;
  uint64_t v69 = a2;
  uint64_t v60 = a1;
  uint64_t v7 = type metadata accessor for AccessibilityTraits();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  __chkstk_darwin(v7);
  uint64_t v67 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v57 = *(void *)(v10 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v56 = (char *)&v48 - v11;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v12 = type metadata accessor for FilterView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v50 = (char *)&v48 - v15;
  sub_10000650C(&qword_10019D628);
  swift_getAssociatedConformanceWitness();
  uint64_t v49 = AssociatedTypeWitness;
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v53 = type metadata accessor for ZStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Button();
  uint64_t v62 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v51 = (char *)&v48 - v18;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v63 = v17;
  uint64_t v58 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v59 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v21 = __chkstk_darwin(v20);
  uint64_t v61 = (uint64_t *)((char *)&v48 - v22);
  uint64_t v23 = v13;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, v69, v12, v21);
  uint64_t v24 = v10;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v26 = v56;
  uint64_t v27 = v60;
  v25(v56, v60, AssociatedTypeWitness);
  unint64_t v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v29 = v24;
  unint64_t v30 = (v14 + v28 + *(unsigned __int8 *)(v24 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v54;
  uint64_t v33 = v55;
  *(void *)(v31 + 16) = v54;
  *(void *)(v31 + 24) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v31 + v28, v50, v12);
  uint64_t v34 = v26;
  uint64_t v35 = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v31 + v30, v34, v49);
  uint64_t v70 = v32;
  uint64_t v71 = v33;
  uint64_t v72 = v69;
  uint64_t v73 = v27;
  Button.init(action:label:)();
  sub_1000C5BF8(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v27) = sub_10010B2CC();
  swift_release();
  if (v27)
  {
    sub_100006560(&qword_100198C18);
    uint64_t v36 = v65;
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_10014CCD0;
    static AccessibilityTraits.isToggle.getter();
    static AccessibilityTraits.isSelected.getter();
    uint64_t v74 = v37;
    sub_1000D3A98(&qword_100198C20, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_100006560(&qword_100198C28);
    sub_100010484(&qword_100198C30, &qword_100198C28);
    uint64_t v38 = v67;
    uint64_t v39 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)();
  }
  else
  {
    uint64_t v38 = v67;
    static AccessibilityTraits.isToggle.getter();
    uint64_t v36 = v65;
    uint64_t v39 = v66;
  }
  uint64_t v40 = v63;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = v59;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v40);
  uint64_t v43 = sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v75 = v41;
  uint64_t v76 = v43;
  uint64_t v44 = v58;
  swift_getWitnessTable();
  uint64_t v45 = v61;
  sub_1000508C8(v61, v42, v44);
  char v46 = *(void (**)(char *, uint64_t))(v64 + 8);
  v46(v42, v44);
  sub_1000508C8(v68, v45, v44);
  return ((uint64_t (*)(void *, uint64_t))v46)(v45, v44);
}

uint64_t sub_1000CD8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FilterView();
  sub_1000C5BF8(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10010ABC8(a2);
  swift_release();
  sub_1000C5BF8(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v5 = *(void *)(a1 + *(int *)(v4 + 44));
  if (v5)
  {
    swift_retain();
    sub_10010AFC4(7, 0x65726E6567, 0xE500000000000000, 2u, v5);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CDA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v19 = a5;
  sub_10000650C(&qword_10019D628);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  type metadata accessor for _AnimationModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ZStack();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v18 - v14);
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v15, v12, v9);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  sub_1000508C8(v19, v15, v9);
  return ((uint64_t (*)(void *, uint64_t))v16)(v15, v9);
}

uint64_t sub_1000CDCC8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v111 = a2;
  uint64_t v113 = a1;
  uint64_t v103 = a4;
  uint64_t v96 = sub_100006560(&qword_10019D7C8);
  __chkstk_darwin(v96);
  uint64_t v99 = (uint64_t)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v93 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v92 = (uint64_t)&v91 - v9;
  uint64_t v10 = type metadata accessor for RoundedRectangle();
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (_OWORD *)((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100006560(&qword_10019A978);
  __chkstk_darwin(v104);
  uint64_t v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019D628);
  __chkstk_darwin(v16);
  uint64_t v98 = (void (*)(char *, uint64_t))((char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = AssociatedTypeWitness;
  uint64_t v19 = (uint64_t)v13;
  uint64_t v20 = type metadata accessor for Set();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v106 = v20;
  uint64_t v21 = type metadata accessor for _AnimationModifier();
  uint64_t v97 = v16;
  uint64_t v107 = v21;
  uint64_t v110 = type metadata accessor for ModifiedContent();
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v102 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v95 = (char *)&v91 - v24;
  __chkstk_darwin(v25);
  uint64_t v109 = (char *)&v91 - v26;
  uint64_t v27 = (char *)v13 + *(int *)(v11 + 28);
  uint64_t v28 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v29 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v13 = _Q0;
  uint64_t v112 = type metadata accessor for FilterView();
  uint64_t v35 = v92;
  sub_10001D3A4(v92);
  uint64_t v37 = v93;
  uint64_t v36 = v94;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v93, enum case for ColorScheme.light(_:), v94);
  LOBYTE(v27) = static ColorScheme.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v6 + 8);
  v38(v37, v36);
  v38((char *)v35, v36);
  if (v27)
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v39 = &qword_1001AA338;
  }
  else
  {
    if (qword_1001980B8 != -1) {
      swift_once();
    }
    uint64_t v39 = &qword_1001AA360;
  }
  uint64_t v40 = *v39;
  swift_retain();
  sub_1000D50F0(v19, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v41 = v104;
  *(void *)&v15[*((int *)v104 + 13)] = v40;
  *(_WORD *)&v15[*((int *)v41 + 14)] = 256;
  sub_1000D3FA8(v19, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  static Color.blue.getter();
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  sub_1000C5BF8(v112, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10010B2CC();
  swift_release();
  uint64_t v42 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v43 = (uint64_t)v98;
  sub_1000D50F0((uint64_t)v15, (uint64_t)v98, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  double v44 = *(double *)&v151 * 0.5;
  uint64_t v45 = v99;
  sub_1000D50F0((uint64_t)v15, v99, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(double *)(v45 + *(int *)(type metadata accessor for RoundedRectangle._Inset() + 20)) = v44;
  uint64_t v46 = v45 + *(int *)(sub_100006560(&qword_10019D7D0) + 36);
  long long v47 = v152;
  *(_OWORD *)uint64_t v46 = v151;
  *(_OWORD *)(v46 + 16) = v47;
  *(void *)(v46 + 32) = v153;
  uint64_t v48 = v96;
  *(void *)(v45 + *(int *)(v96 + 52)) = v42;
  *(_WORD *)(v45 + *(int *)(v48 + 56)) = 256;
  uint64_t v49 = static Alignment.center.getter();
  uint64_t v51 = v50;
  uint64_t v52 = v43 + *(int *)(v97 + 68);
  uint64_t v53 = v52 + *(int *)(sub_100006560(&qword_10019D7D8) + 36);
  sub_1000066D4((uint64_t)v15, v53, &qword_10019A978);
  uint64_t v54 = (uint64_t *)(v53 + *(int *)(sub_100006560(&qword_10019D7E0) + 36));
  *uint64_t v54 = v49;
  v54[1] = v51;
  sub_10001D6D8(v45, v52, &qword_10019D7C8);
  sub_1000067DC((uint64_t)v15, &qword_10019A978);
  uint64_t v55 = v112;
  uint64_t v56 = v104;
  sub_1000C5BF8(v112, v104);
  sub_10010B2CC();
  swift_release();
  static Animation.easeInOut(duration:)();
  sub_1000C5BF8(v55, v56);
  uint64_t v57 = sub_10010B398();
  swift_release();
  uint64_t v139 = v57;
  uint64_t v58 = sub_100010484(&qword_10019D7E8, &qword_10019D628);
  uint64_t v59 = v95;
  View.animation<A>(_:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000067DC(v43, &qword_10019D628);
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v149 = v58;
  uint64_t v150 = v60;
  uint64_t v96 = v60;
  uint64_t v61 = v110;
  uint64_t v97 = swift_getWitnessTable();
  sub_1000508C8(v109, v59, v61);
  uint64_t v98 = *(void (**)(char *, uint64_t))(v108 + 8);
  uint64_t v99 = v108 + 8;
  v98(v59, v61);
  uint64_t v139 = (*(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 32))(v101);
  uint64_t v140 = (uint64_t *)v62;
  sub_10002374C();
  uint64_t v63 = Text.init<A>(_:)();
  uint64_t v65 = v64;
  char v67 = v66;
  sub_1000C5BF8(v112, v104);
  LOBYTE(v43) = sub_10010B2CC();
  swift_release();
  if (v43) {
    static Color.blue.getter();
  }
  else {
    static Color.primary.getter();
  }
  char v68 = v67 & 1;
  uint64_t v69 = Text.foregroundColor(_:)();
  uint64_t v71 = v70;
  char v73 = v72;
  uint64_t v75 = v74;
  swift_release();
  v73 &= 1u;
  sub_1000065A4(v63, v65, v68);
  swift_bridgeObjectRelease();
  uint64_t v129 = v69;
  uint64_t v130 = (uint64_t *)v71;
  char v131 = v73;
  uint64_t v132 = v75;
  uint64_t v76 = v112;
  sub_1000C5BF8(v112, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10010B2CC();
  swift_release();
  static Animation.easeInOut(duration:)();
  sub_1000C5BF8(v76, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v77 = sub_10010B398();
  swift_release();
  uint64_t v117 = v77;
  View.animation<A>(_:value:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000065A4(v69, v71, v73);
  swift_bridgeObjectRelease();
  uint64_t v78 = v139;
  uint64_t v79 = (uint64_t)v140;
  LOBYTE(v71) = v141;
  uint64_t v117 = v139;
  uint64_t v118 = v140;
  char v119 = v141;
  uint64_t v120 = v142;
  uint64_t v121 = v143;
  uint64_t v122 = v144;
  type metadata accessor for ModifiedContent();
  uint64_t v127 = &protocol witness table for Text;
  uint64_t v128 = v96;
  uint64_t v113 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v80 = swift_getWitnessTable();
  View.padding(_:)();
  sub_1000065A4(v78, v79, v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v81 = v129;
  uint64_t v82 = (uint64_t)v130;
  char v83 = v131;
  uint64_t v117 = v129;
  uint64_t v118 = v130;
  char v119 = v131;
  uint64_t v120 = v132;
  uint64_t v121 = v133;
  uint64_t v122 = v134;
  char v123 = v135;
  long long v124 = v136;
  long long v125 = v137;
  char v126 = v138;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  v116[2] = v80;
  v116[3] = &protocol witness table for _PaddingLayout;
  uint64_t v85 = swift_getWitnessTable();
  sub_1000508C8(&v139, &v117, v84);
  sub_1000065A4(v81, v82, v83);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v86 = v109;
  uint64_t v87 = (uint64_t)v102;
  uint64_t v88 = v110;
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v102, v109, v110);
  uint64_t v129 = v139;
  uint64_t v130 = v140;
  char v131 = v141;
  uint64_t v132 = v142;
  uint64_t v133 = v143;
  uint64_t v134 = v144;
  char v135 = v145;
  long long v136 = v146;
  long long v137 = v147;
  char v138 = v148;
  uint64_t v117 = v87;
  uint64_t v118 = &v129;
  sub_100010924(v139, (uint64_t)v140, v141);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v116[0] = v88;
  v116[1] = v84;
  uint64_t v114 = v97;
  uint64_t v115 = v85;
  sub_100050970(&v117, 2uLL, (uint64_t)v116);
  sub_1000065A4(v139, (uint64_t)v140, v141);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t))v98;
  v98(v86, v88);
  sub_1000065A4(v129, (uint64_t)v130, v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v89(v87, v88);
}

uint64_t sub_1000CE97C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DismissAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FilterView();
  sub_1000C5BF8(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10010B3AC();
  swift_release();
  sub_1000C5BF8(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v7 = *(void *)(a1 + *(int *)(v6 + 44));
  if (v7)
  {
    swift_retain();
    sub_10010AFC4(7, 21, 0, 3u, v7);
    swift_release();
    swift_release();
    sub_10001D698((uint64_t)v5);
    DismissAction.callAsFunction()();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_1000CEB5C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000C5BF8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = sub_10010B80C();
  uint64_t v5 = v4;
  swift_release();
  *(void *)&long long v49 = v3;
  *((void *)&v49 + 1) = v5;
  sub_10002374C();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v11 = Text.fontWeight(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_1000065A4(v6, v8, v10);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  LOBYTE(v5) = v19;
  swift_release();
  LOBYTE(v6) = v5 & 1;
  sub_1000065A4(v11, v13, v15);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v20 = Text.foregroundColor(_:)();
  uint64_t v37 = v21;
  char v23 = v22;
  uint64_t v25 = v24;
  swift_release();
  sub_1000065A4(v16, v18, v6);
  swift_bridgeObjectRelease();
  LOBYTE(v6) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v20;
  uint64_t v40 = v37;
  char v41 = v23 & 1;
  uint64_t v42 = v25;
  char v43 = v6;
  uint64_t v44 = v26;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  uint64_t v47 = v29;
  char v48 = 0;
  static Alignment.center.getter();
  sub_1000522C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v38, 0.0, 1, 0.0, 1);
  sub_1000065A4(v20, v37, v23 & 1);
  swift_bridgeObjectRelease();
  long long v57 = v38[10];
  long long v58 = v38[11];
  long long v53 = v38[4];
  long long v54 = v38[5];
  long long v55 = v38[6];
  long long v56 = v38[7];
  long long v49 = v38[0];
  long long v50 = v38[1];
  long long v51 = v38[2];
  long long v52 = v38[3];
  long long v30 = v38[9];
  a1[8] = v38[8];
  a1[9] = v30;
  long long v31 = v58;
  a1[10] = v57;
  a1[11] = v31;
  long long v32 = v54;
  a1[4] = v53;
  a1[5] = v32;
  long long v33 = v56;
  a1[6] = v55;
  a1[7] = v33;
  long long v34 = v50;
  *a1 = v49;
  a1[1] = v34;
  double result = *(double *)&v51;
  long long v36 = v52;
  a1[2] = v51;
  a1[3] = v36;
  return result;
}

uint64_t sub_1000CEDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v24 = sub_100006560(&qword_10019D670);
  __chkstk_darwin(v24);
  char v22 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006560(&qword_10019D678);
  uint64_t v8 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  char v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v11 - 8);
  uint64_t v21 = sub_100006560(&qword_10019B278);
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  char v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter();
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a1;
  sub_100006560(&qword_100198620);
  sub_100010484(&qword_10019B288, &qword_100198620);
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a1;
  sub_100006560(&qword_10019D680);
  sub_1000D3DA8();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v15 = v21;
  uint64_t v16 = &v22[*(int *)(v24 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v22, v14, v21);
  uint64_t v17 = v16;
  uint64_t v18 = v23;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v10, v23);
  TupleToolbarContent.init(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v15);
}

uint64_t sub_1000CF130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v7 = type metadata accessor for FilterView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v17 - v9;
  uint64_t v12 = sub_1000C5BF8(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 248);
  uint64_t v18 = *(void *)v13;
  void v17[3] = *(unsigned __int8 *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, v10, v7);
  return Button<>.init(_:action:)();
}

uint64_t sub_1000CF2EC()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilterView();
  sub_10001D698((uint64_t)v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000CF3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v32 = a4;
  uint64_t v5 = type metadata accessor for FilterView();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v25 - v7;
  uint64_t v9 = sub_100006560(&qword_100198620);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v12 = sub_1000C5BF8(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 240);
  uint64_t v26 = *(void *)v13;
  v25[1] = *(unsigned __int8 *)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v29;
  *(void *)(v15 + 16) = v28;
  *(void *)(v15 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, v8, v5);
  Button<>.init(_:action:)();
  sub_1000C5BF8(v5, v27);
  char v17 = sub_10010BFC0();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = (v17 & 1) == 0;
  uint64_t v21 = v30;
  uint64_t v20 = v31;
  uint64_t v22 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v11, v31);
  uint64_t v23 = (uint64_t *)(v22 + *(int *)(sub_100006560(&qword_10019D680) + 36));
  *uint64_t v23 = KeyPath;
  v23[1] = (uint64_t)sub_1000D3EAC;
  v23[2] = v19;
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v20);
}

uint64_t sub_1000CF6E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v12 = type metadata accessor for FilterView();
  sub_1000C5BF8(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a4();
  swift_release();
  sub_1000C5BF8(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v13 = *(void *)(a1 + *(int *)(v12 + 44));
  if (v13)
  {
    swift_retain();
    sub_10010AFC4(7, a5, a6, a7, v13);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CF82C()
{
  uint64_t v0 = type metadata accessor for FilterView();
  sub_1000C5BF8(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10010BFF8();

  return swift_release();
}

uint64_t sub_1000CF8B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000C5BF8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + *(int *)(v2 + 44)))
  {
    uint64_t v3 = swift_retain();
    sub_10010C0C8(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CF9A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FilterView();
  sub_1000C5BF8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v3)
  {
    swift_retain();
    sub_10010AFC4(7, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000D3A98((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CFAA0()
{
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v0 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v24);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimeZone();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v23 - v14, 1, 1, v5, v13);
  id v16 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v16 setDateStyle:2];
  sub_1000066D4((uint64_t)v15, (uint64_t)v11, &qword_100198898);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    sub_1000067DC((uint64_t)v11, &qword_100198898);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v16 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_1000067DC((uint64_t)v15, &qword_100198898);
  type metadata accessor for CompactDatePicker(0);
  sub_100006560(&qword_10019D828);
  Binding.wrappedValue.getter();
  uint64_t v18 = v25;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, &v4[*(int *)(v24 + 20)], v25);
  sub_1000D3FA8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v18);
  id v20 = [v16 stringFromDate:v19];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v21;
}

uint64_t sub_1000CFE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = sub_100006560(&qword_10019D8F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = sub_100006560(&qword_10019D900);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019D908);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v34 - v17;
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  v11[16] = 1;
  uint64_t v19 = sub_100006560(&qword_10019D910);
  sub_1000D0130(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  char v20 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_1000066D4((uint64_t)v11, (uint64_t)v15, &qword_10019D900);
  uint64_t v29 = &v15[*(int *)(v13 + 44)];
  *uint64_t v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_1000067DC((uint64_t)v11, &qword_10019D900);
  sub_10001D6D8((uint64_t)v15, (uint64_t)v18, &qword_10019D908);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v30 = sub_100006560(&qword_10019D918);
  sub_1000D11F0(a1, &v8[*(int *)(v30 + 44)]);
  sub_1000066D4((uint64_t)v18, (uint64_t)v15, &qword_10019D908);
  sub_1000066D4((uint64_t)v8, (uint64_t)v5, &qword_10019D8F8);
  uint64_t v31 = v35;
  sub_1000066D4((uint64_t)v15, v35, &qword_10019D908);
  uint64_t v32 = sub_100006560(&qword_10019D920);
  sub_1000066D4((uint64_t)v5, v31 + *(int *)(v32 + 48), &qword_10019D8F8);
  sub_1000067DC((uint64_t)v8, &qword_10019D8F8);
  sub_1000067DC((uint64_t)v18, &qword_10019D908);
  sub_1000067DC((uint64_t)v5, &qword_10019D8F8);
  return sub_1000067DC((uint64_t)v15, &qword_10019D908);
}

uint64_t sub_1000D0130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v79 = a2;
  uint64_t v76 = type metadata accessor for DatePickerButtonStyle(0);
  __chkstk_darwin(v76);
  char v73 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CompactDatePicker(0);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v68 = *(void *)(v69 + 64);
  uint64_t v5 = v4 - 8;
  uint64_t v66 = v4 - 8;
  __chkstk_darwin(v4 - 8);
  uint64_t v67 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100006560(&qword_10019D9B8);
  uint64_t v78 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v70 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100006560(&qword_10019D9C0);
  uint64_t v74 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v71 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v72 = (char *)&v58 - v10;
  uint64_t v63 = type metadata accessor for AccessibilityTraits();
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = sub_100006560(&qword_100198288);
  __chkstk_darwin(v61);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v58 = (char *)&v58 - v19;
  __chkstk_darwin(v20);
  uint64_t v59 = (uint64_t)&v58 - v21;
  uint64_t v65 = a1 + *(int *)(v5 + 32);
  uint64_t v64 = sub_100006560(&qword_10019D828);
  Binding.wrappedValue.getter();
  uint64_t v22 = *v15;
  uint64_t v23 = v15[1];
  swift_bridgeObjectRetain();
  sub_1000D3FA8((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v81 = v22;
  uint64_t v82 = v23;
  sub_10002374C();
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  static Font.Weight.regular.getter();
  uint64_t v29 = Text.fontWeight(_:)();
  uint64_t v31 = v30;
  char v33 = v32;
  uint64_t v35 = v34;
  sub_1000065A4(v24, v26, v28);
  swift_bridgeObjectRelease();
  uint64_t v81 = v29;
  uint64_t v82 = v31;
  char v83 = v33 & 1;
  uint64_t v84 = v35;
  static AccessibilityTraits.isHeader.getter();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v12, v63);
  sub_1000065A4(v81, v82, v83);
  swift_bridgeObjectRelease();
  uint64_t v36 = (uint64_t)v58;
  ModifiedContent<>.accessibilityHeading(_:)();
  sub_1000067DC((uint64_t)v17, &qword_100198288);
  uint64_t v37 = v59;
  sub_10001D6D8(v36, v59, &qword_100198288);
  uint64_t v38 = v60;
  uint64_t v39 = v67;
  sub_1000D50F0(v60, v67, type metadata accessor for CompactDatePicker);
  unint64_t v40 = (*(unsigned __int8 *)(v69 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  uint64_t v41 = swift_allocObject();
  sub_1000D6EC8(v39, v41 + v40);
  uint64_t v80 = v38;
  sub_100006628();
  uint64_t v42 = v70;
  Button.init(action:label:)();
  LOBYTE(v35) = *(unsigned char *)(v38 + *(int *)(v66 + 48));
  uint64_t v43 = v76;
  uint64_t v44 = v73;
  Binding.wrappedValue.getter();
  *uint64_t v44 = v35;
  *(void *)&v44[*(int *)(v43 + 24)] = 0x3FD3333333333333;
  sub_100010484(&qword_10019D9C8, &qword_10019D9B8);
  sub_1000D3A98(&qword_10019D9D0, (void (*)(uint64_t))type metadata accessor for DatePickerButtonStyle);
  uint64_t v45 = v71;
  uint64_t v46 = v75;
  View.buttonStyle<A>(_:)();
  sub_1000D3FA8((uint64_t)v44, type metadata accessor for DatePickerButtonStyle);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v46);
  uint64_t v47 = v74;
  char v48 = v72;
  uint64_t v49 = v77;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v45, v77);
  sub_1000066D4(v37, v36, &qword_100198288);
  uint64_t v50 = v47;
  long long v51 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  long long v52 = v45;
  v51(v45, v48, v49);
  uint64_t v53 = v79;
  sub_1000066D4(v36, v79, &qword_100198288);
  uint64_t v54 = sub_100006560(&qword_10019D9D8);
  uint64_t v55 = v53 + *(int *)(v54 + 48);
  *(void *)uint64_t v55 = 0;
  *(unsigned char *)(v55 + 8) = 1;
  v51((char *)(v53 + *(int *)(v54 + 64)), v52, v49);
  long long v56 = *(void (**)(char *, uint64_t))(v50 + 8);
  v56(v48, v49);
  sub_1000067DC(v37, &qword_100198288);
  v56(v52, v49);
  return sub_1000067DC(v36, &qword_100198288);
}

uint64_t sub_1000D0928()
{
  return swift_release();
}

uint64_t sub_1000D09A4(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019D828);
  __chkstk_darwin(v2);
  uint64_t v38 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v36 - v8);
  __chkstk_darwin(v10);
  uint64_t v37 = (char *)v36 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v36 - v13);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v36 - v16);
  uint64_t v39 = a1 + *(int *)(type metadata accessor for CompactDatePicker(0) + 24);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.getter();
  BOOL v18 = *v17 == *v14 && v17[1] == v14[1];
  if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (static Date.== infix(_:_:)())
  {
    uint64_t v19 = v4;
    uint64_t v20 = *(int *)(v4 + 24);
    int v46 = *((unsigned __int8 *)v17 + v20);
    v36[1] = a1;
    int v21 = *((unsigned __int8 *)v14 + v20);
    uint64_t v22 = (uint64_t)v14;
    uint64_t v23 = v19;
    sub_1000D3FA8(v22, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_1000D3FA8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    uint64_t v24 = (uint64_t)v38;
    if (v46 == v21)
    {
      uint64_t v25 = v37;
      Binding.wrappedValue.getter();
      v25[*(int *)(v23 + 24)] = 0;
      Binding.wrappedValue.setter();
    }
  }
  else
  {
    sub_1000D3FA8((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_1000D3FA8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    uint64_t v24 = (uint64_t)v38;
    uint64_t v23 = v4;
  }
  Binding.wrappedValue.getter();
  Binding.wrappedValue.getter();
  BOOL v26 = *v9 == *v6 && v9[1] == v6[1];
  if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (static Date.== infix(_:_:)())
  {
    uint64_t v27 = *(int *)(v23 + 24);
    int v28 = *((unsigned __int8 *)v9 + v27);
    uint64_t v29 = v23;
    int v30 = *((unsigned __int8 *)v6 + v27);
    sub_1000D3FA8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_1000D3FA8((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    if (v28 == v30)
    {
      uint64_t v31 = v37;
      Binding.wrappedValue.getter();
      v31[*(int *)(v29 + 24)] = 0;
      Binding.wrappedValue.setter();
    }
  }
  else
  {
    sub_1000D3FA8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
    sub_1000D3FA8((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  }
  sub_1000066D4(v39, v24, &qword_10019D828);
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_1000067DC(v24, &qword_10019D828);
  uint64_t v32 = v43;
  uint64_t v33 = v44;
  char v34 = v45;
  uint64_t v40 = v43;
  uint64_t v41 = v44;
  char v42 = v45;
  sub_100006560(&qword_10019CD30);
  Binding.wrappedValue.getter();
  uint64_t v40 = v32;
  uint64_t v41 = v33;
  char v42 = v34;
  BOOL v47 = (v48 & 1) == 0;
  Binding.wrappedValue.setter();
  swift_release();
  return swift_release();
}

uint64_t sub_1000D0DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v1 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessibilityTraits();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006560(&qword_100198288);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v21 = (char *)v20 - v11;
  uint64_t v25 = sub_1000CFAA0();
  uint64_t v26 = v12;
  sub_10002374C();
  uint64_t v25 = Text.init<A>(_:)();
  uint64_t v26 = v13;
  char v27 = v14 & 1;
  uint64_t v28 = v15;
  type metadata accessor for CompactDatePicker(0);
  sub_100006560(&qword_10019D828);
  Binding.wrappedValue.getter();
  v20[1] = v1;
  int v16 = v3[*(int *)(v1 + 24)];
  sub_1000D3FA8((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v16 == 1)
  {
    sub_100006560(&qword_100198C18);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_10014D4D0;
    static AccessibilityTraits.isSelected.getter();
    uint64_t v24 = (void *)v17;
  }
  else
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
  }
  sub_1000D3A98(&qword_100198C20, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_100006560(&qword_100198C28);
  sub_100010484(&qword_100198C30, &qword_100198C28);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000065A4(v25, v26, v27);
  swift_bridgeObjectRelease();
  Binding.wrappedValue.getter();
  sub_1000D3FA8((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v18 = (uint64_t)v21;
  ModifiedContent<>.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000067DC((uint64_t)v9, &qword_100198288);
  return sub_10001D6D8(v18, v23, &qword_100198288);
}

uint64_t sub_1000D11F0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v130 = a2;
  uint64_t v3 = type metadata accessor for CompactDatePicker(0);
  uint64_t v127 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v128 = v4;
  uint64_t v129 = (uint64_t)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for CoordinateSpace();
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  char v123 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GraphicalDatePickerStyle();
  uint64_t v121 = *(void *)(v6 - 8);
  uint64_t v122 = v6;
  __chkstk_darwin(v6);
  char v119 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DatePickerComponents();
  __chkstk_darwin(v8 - 8);
  uint64_t v103 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v100 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019D928);
  __chkstk_darwin(v12 - 8);
  uint64_t v95 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019D828);
  __chkstk_darwin(v14);
  uint64_t v94 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100006560(&qword_10019D930);
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v96 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_100006560(&qword_10019D938);
  __chkstk_darwin(v101);
  uint64_t v102 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100006560(&qword_10019D940);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v104 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100006560(&qword_10019D948);
  __chkstk_darwin(v97);
  uint64_t v112 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_100006560(&qword_10019D950);
  __chkstk_darwin(v106);
  uint64_t v111 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_100006560(&qword_10019D958);
  __chkstk_darwin(v105);
  uint64_t v114 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100006560(&qword_10019A658);
  __chkstk_darwin(v110);
  uint64_t v117 = (uint64_t)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006560(&qword_10019A660);
  __chkstk_darwin(v23 - 8);
  uint64_t v116 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100006560(&qword_10019D960);
  __chkstk_darwin(v115);
  uint64_t v120 = (uint64_t)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v113 = (uint64_t)&v90 - v27;
  __chkstk_darwin(v28);
  uint64_t v118 = (uint64_t)&v90 - v29;
  uint64_t v30 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Divider();
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  char v34 = (char *)&v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100006560(&qword_10019D968);
  uint64_t v134 = *(void *)(v35 - 8);
  uint64_t v135 = v35;
  __chkstk_darwin(v35);
  uint64_t v107 = (char *)&v90 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v90 - v38;
  __chkstk_darwin(v40);
  uint64_t v133 = (char *)&v90 - v41;
  Divider.init()();
  uint64_t v136 = v3;
  uint64_t v42 = a1 + *(int *)(v3 + 24);
  uint64_t v125 = v14;
  uint64_t v131 = v42;
  Binding.wrappedValue.getter();
  uint64_t v132 = v30;
  LOBYTE(v42) = v32[*(int *)(v30 + 24)];
  sub_1000D3FA8((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  uint64_t v43 = static Animation.linear(duration:)();
  if ((v42 & 1) == 0)
  {
    Animation.delay(_:)();
    uint64_t v43 = swift_release();
  }
  __chkstk_darwin(v43);
  sub_100006560(&qword_10019A670);
  sub_1000D3A98(&qword_10019D718, (void (*)(uint64_t))&type metadata accessor for Divider);
  uint64_t v92 = a1;
  sub_1000D7CD4(&qword_10019D970, &qword_10019A670, (void (*)(void))sub_1000D6D54);
  uint64_t v44 = v93;
  View.animation<A>(_:body:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v34, v44);
  (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v133, v39, v135);
  uint64_t v45 = (uint64_t)v94;
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  sub_1000067DC(v45, &qword_10019D828);
  sub_1000066D4(a1 + *(int *)(v136 + 32), v100, &qword_10019D1D0);
  static DatePickerComponents.date.getter();
  int v46 = v96;
  DatePicker.init(selection:in:displayedComponents:label:)();
  Binding.wrappedValue.getter();
  sub_1000D3FA8((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  sub_100010484(&qword_10019D990, &qword_10019D930);
  uint64_t v47 = (uint64_t)v102;
  uint64_t v48 = v99;
  View.accessibilityHidden(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v98 + 8))(v46, v48);
  uint64_t v49 = v119;
  GraphicalDatePickerStyle.init()();
  sub_1000D6DF4();
  sub_1000D3A98(&qword_10019D9A0, (void (*)(uint64_t))&type metadata accessor for GraphicalDatePickerStyle);
  uint64_t v50 = v104;
  uint64_t v51 = v122;
  View.datePickerStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v49, v51);
  sub_1000067DC(v47, &qword_10019D938);
  uint64_t v53 = v123;
  uint64_t v52 = v124;
  uint64_t v54 = v126;
  (*(void (**)(char *, void, uint64_t))(v124 + 104))(v123, enum case for CoordinateSpace.local(_:), v126);
  uint64_t v55 = (uint64_t)v112;
  long long v56 = &v112[*(int *)(v97 + 36)];
  uint64_t v57 = sub_100006560(&qword_10019D9A8);
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(&v56[*(int *)(v57 + 36)], v53, v54);
  *(void *)long long v56 = &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
  long long v58 = (void (**)(CGFloat *@<X8>, double@<D0>))&v56[*(int *)(v57 + 40)];
  *long long v58 = sub_1000D24F4;
  v58[1] = 0;
  uint64_t v59 = v108;
  uint64_t v60 = v109;
  (*(void (**)(uint64_t, char *, uint64_t))(v108 + 16))(v55, v50, v109);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v50, v60);
  uint64_t v61 = v92;
  uint64_t v62 = v129;
  sub_1000D50F0(v92, v129, type metadata accessor for CompactDatePicker);
  unint64_t v63 = (*(unsigned __int8 *)(v127 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
  uint64_t v64 = swift_allocObject();
  sub_1000D6EC8(v62, v64 + v63);
  uint64_t v65 = v111;
  sub_1000066D4(v55, v111, &qword_10019D948);
  uint64_t v66 = (uint64_t (**)())(v65 + *(int *)(v106 + 36));
  *uint64_t v66 = sub_1000D6F2C;
  v66[1] = (uint64_t (*)())v64;
  sub_1000067DC(v55, &qword_10019D948);
  uint64_t v67 = *(void *)(v61 + *(int *)(v136 + 36));
  uint64_t v68 = v114;
  sub_1000066D4(v65, v114, &qword_10019D950);
  uint64_t v69 = (void *)(v68 + *(int *)(v105 + 36));
  *uint64_t v69 = 0;
  v69[1] = v67;
  sub_1000067DC(v65, &qword_10019D950);
  Binding.wrappedValue.getter();
  uint64_t v70 = v132;
  LODWORD(v64) = v32[*(int *)(v132 + 24)];
  sub_1000D3FA8((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v64) {
    double v71 = 1.0;
  }
  else {
    double v71 = 0.5;
  }
  uint64_t v72 = v117;
  sub_1000066D4(v68, v117, &qword_10019D958);
  *(double *)(v72 + *(int *)(v110 + 36)) = v71;
  sub_1000067DC(v68, &qword_10019D958);
  Binding.wrappedValue.getter();
  int v73 = v32[*(int *)(v70 + 24)];
  sub_1000D3FA8((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v73) {
    double v74 = INFINITY;
  }
  else {
    double v74 = 0.0;
  }
  uint64_t v75 = static Alignment.center.getter();
  uint64_t v76 = v116;
  sub_100052484(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v116, 0.0, 1, v74, 0, v75, v77);
  sub_1000067DC(v72, &qword_10019A658);
  uint64_t v78 = v113;
  sub_1000066D4(v76, v113, &qword_10019A660);
  *(_WORD *)(v78 + *(int *)(v115 + 36)) = 0;
  sub_1000067DC(v76, &qword_10019A660);
  uint64_t v79 = v118;
  sub_10001D6D8(v78, v118, &qword_10019D960);
  uint64_t v81 = v133;
  uint64_t v80 = v134;
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
  char v83 = v107;
  uint64_t v84 = v135;
  v82(v107, v133, v135);
  uint64_t v85 = v120;
  sub_1000066D4(v79, v120, &qword_10019D960);
  uint64_t v86 = v130;
  v82(v130, v83, v84);
  uint64_t v87 = sub_100006560(&qword_10019D9B0);
  sub_1000066D4(v85, (uint64_t)&v86[*(int *)(v87 + 48)], &qword_10019D960);
  sub_1000067DC(v79, &qword_10019D960);
  uint64_t v88 = *(void (**)(char *, uint64_t))(v80 + 8);
  v88(v81, v84);
  sub_1000067DC(v85, &qword_10019D960);
  return ((uint64_t (*)(char *, uint64_t))v88)(v83, v84);
}

uint64_t sub_1000D2278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019A668);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019A670);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompactDatePicker(0);
  sub_100006560(&qword_10019D828);
  Binding.wrappedValue.getter();
  int v14 = v6[*(int *)(v4 + 32)];
  sub_1000D3FA8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v14) {
    double v15 = 1.0;
  }
  else {
    double v15 = 0.0;
  }
  uint64_t v16 = sub_100006560(&qword_10019D988);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v10, a1, v16);
  *(double *)&v10[*(int *)(v8 + 44)] = v15;
  Binding.wrappedValue.getter();
  int v17 = v6[*(int *)(v4 + 32)];
  sub_1000D3FA8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CompactDatePickerConfiguration);
  if (v17) {
    double v18 = INFINITY;
  }
  else {
    double v18 = 0.0;
  }
  uint64_t v19 = static Alignment.center.getter();
  sub_1000524E0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v13, 0.0, 1, v18, 0, v19, v20);
  sub_1000067DC((uint64_t)v10, &qword_10019A668);
  return sub_10001D6D8((uint64_t)v13, v23, &qword_10019A670);
}

void sub_1000D24F4(CGFloat *a1@<X8>, double a2@<D0>)
{
  *a1 = CGRectGetHeight(*(CGRect *)&a2);
}

uint64_t sub_1000D251C()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000D2590@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.leading.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = sub_100006560(&qword_10019D8F0);
  return sub_1000CFE6C(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_1000D25D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v75 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v75);
  uint64_t v76 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100006560(&qword_10019DA90);
  __chkstk_darwin(v65);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100006560(&qword_10019DA98);
  __chkstk_darwin(v66);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100006560(&qword_10019DAA0);
  __chkstk_darwin(v67);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100006560(&qword_10019DAA8);
  __chkstk_darwin(v68);
  int v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100006560(&qword_10019DAB0);
  __chkstk_darwin(v70);
  uint64_t v69 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100006560(&qword_10019DAB8);
  __chkstk_darwin(v71);
  double v74 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100006560(&qword_10019DAC0);
  __chkstk_darwin(v73);
  uint64_t v72 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v77 = v1;
  if (*v1 == 1) {
    uint64_t v18 = static Color.blue.getter();
  }
  else {
    uint64_t v18 = static Color.primary.getter();
  }
  uint64_t v19 = v18;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  uint64_t v21 = (uint64_t *)&v8[*(int *)(v65 + 36)];
  *uint64_t v21 = KeyPath;
  v21[1] = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v22 = 0.3;
  }
  else {
    double v22 = 1.0;
  }
  sub_1000066D4((uint64_t)v8, (uint64_t)v10, &qword_10019DA90);
  *(double *)&v10[*(int *)(v66 + 36)] = v22;
  sub_1000067DC((uint64_t)v8, &qword_10019DA90);
  char v23 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_1000066D4((uint64_t)v10, (uint64_t)v12, &qword_10019DA98);
  uint64_t v32 = &v12[*(int *)(v67 + 36)];
  *uint64_t v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_1000067DC((uint64_t)v10, &qword_10019DA98);
  char v33 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_1000066D4((uint64_t)v12, (uint64_t)v14, &qword_10019DAA0);
  uint64_t v42 = &v14[*(int *)(v68 + 36)];
  *uint64_t v42 = v33;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  sub_1000067DC((uint64_t)v12, &qword_10019DAA0);
  if (qword_1001980B8 != -1) {
    swift_once();
  }
  uint64_t v43 = qword_1001AA360;
  swift_retain();
  char v44 = static Edge.Set.all.getter();
  uint64_t v45 = v69;
  sub_1000066D4((uint64_t)v14, v69, &qword_10019DAA8);
  uint64_t v46 = v45 + *(int *)(v70 + 36);
  *(void *)uint64_t v46 = v43;
  *(unsigned char *)(v46 + 8) = v44;
  sub_1000067DC((uint64_t)v14, &qword_10019DAA8);
  uint64_t v47 = v76;
  uint64_t v48 = &v76[*(int *)(v75 + 20)];
  uint64_t v49 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v50 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v48, v49, v50);
  __asm { FMOV            V0.2D, #7.0 }
  *uint64_t v47 = _Q0;
  uint64_t v56 = (uint64_t)v74;
  uint64_t v57 = (uint64_t)&v74[*(int *)(v71 + 36)];
  sub_1000D50F0((uint64_t)v47, v57, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v57 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4(v45, v56, &qword_10019DAB0);
  sub_1000D3FA8((uint64_t)v47, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC(v45, &qword_10019DAB0);
  uint64_t v58 = type metadata accessor for DatePickerButtonStyle(0);
  uint64_t v59 = v77;
  uint64_t v60 = static Animation.easeInOut(duration:)();
  uint64_t v61 = &v59[*(int *)(v58 + 20)];
  LOBYTE(v59) = v61[*(int *)(type metadata accessor for CompactDatePickerConfiguration() + 24)];
  uint64_t v62 = v72;
  sub_1000066D4(v56, v72, &qword_10019DAB8);
  uint64_t v63 = v62 + *(int *)(v73 + 36);
  *(void *)uint64_t v63 = v60;
  *(unsigned char *)(v63 + 8) = (_BYTE)v59;
  sub_1000067DC(v56, &qword_10019DAB8);
  return sub_10001D6D8(v62, v78, &qword_10019DAC0);
}

void sub_1000D2CBC()
{
  sub_1000D63A4(319, (unint64_t *)&qword_100198FC0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_1000D63A4(319, (unint64_t *)&qword_100199860, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000D2DF8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100035D50();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[9];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[10];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[11];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    *uint64_t v20 = v22;
    v20[1] = v23;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000D2FD8(uint64_t a1, uint64_t a2)
{
  sub_10001D0DC();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000D3104(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[9];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)((char *)a2 + v9);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[10];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  swift_retain();
  return a1;
}

uint64_t sub_1000D3298(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001D0DC();
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = a3[9];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000067DC(a1 + v9, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[10];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_1000067DC(a1 + v13, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v17 = a3[11];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t)a2 + v17;
  *(void *)(a1 + v17) = *(uint64_t *)((char *)a2 + v17);
  swift_retain();
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  return a1;
}

uint64_t sub_1000D3474(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[9];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[10];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000D360C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001D0DC();
  if (a1 != a2)
  {
    uint64_t v7 = a3[9];
    char v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_1000067DC(a1 + v7, &qword_100198A98);
    uint64_t v10 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = a3[10];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (const void *)(a2 + v12);
    sub_1000067DC(a1 + v12, qword_100198AA0);
    uint64_t v15 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[11];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (void *)(a2 + v17);
  *(void *)(a1 + v17) = *v19;
  swift_release();
  *(void *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_1000D37F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3808);
}

uint64_t sub_1000D3808(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[9];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100006560(&qword_100198648);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[11]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1000D392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3940);
}

uint64_t sub_1000D3940(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
  }
  else
  {
    uint64_t result = sub_100006560(&qword_100198648);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[11]) = a2;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[10];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_1000D3A54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000D3A98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D3AE0@<X0>(void *a1@<X8>)
{
  return sub_1000C6680(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D3AEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C7CA0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D3AFC()
{
  return sub_1000D3B28((void (*)(void))sub_10010B928, 1702125924, 0xE400000000000000, 2u);
}

uint64_t sub_1000D3B28(void (*a1)(void), uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(type metadata accessor for FilterView() - 8);
  return sub_1000CF6E8(v4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v9, v10, a1, a2, a3, a4);
}

uint64_t sub_1000D3BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CEDF0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000D3BDC()
{
  unint64_t result = qword_10019D668;
  if (!qword_10019D668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D668);
  }
  return result;
}

uint64_t sub_1000D3C34()
{
  type metadata accessor for FilterView();

  return sub_1000CF82C();
}

uint64_t sub_1000D3CC4()
{
  return sub_1000D3CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CF8B8);
}

uint64_t sub_1000D3CDC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for FilterView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_1000D3D78()
{
  return sub_1000D3CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CF9A0);
}

uint64_t sub_1000D3D90@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CF130(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D3D9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CF3E0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000D3DA8()
{
  unint64_t result = qword_10019D688;
  if (!qword_10019D688)
  {
    sub_10000650C(&qword_10019D680);
    sub_100010484(&qword_10019B288, &qword_100198620);
    sub_100010484(&qword_100199510, &qword_100199518);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D688);
  }
  return result;
}

uint64_t sub_1000D3E70()
{
  return sub_1000D3B28((void (*)(void))sub_10010BB2C, 18, 0, 3u);
}

uint64_t sub_1000D3E9C()
{
  return swift_deallocObject();
}

unsigned char *sub_1000D3EAC(unsigned char *a1)
{
  return sub_10002FAFC(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1000D3EB8()
{
  return sub_1000D3CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CF2EC);
}

uint64_t sub_1000D3ED0@<X0>(void *a1@<X8>)
{
  return sub_1000C9794(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D3EE0()
{
  return sub_1000D3CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CE97C);
}

double sub_1000D3EF8@<D0>(_OWORD *a1@<X8>)
{
  return sub_1000CEB5C(a1);
}

unint64_t sub_1000D3F04()
{
  unint64_t result = qword_10019D6D0;
  if (!qword_10019D6D0)
  {
    sub_10000650C(&qword_10019D6C8);
    sub_1000D44DC((unint64_t *)&qword_10019CBD8, &qword_10019CBD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D6D0);
  }
  return result;
}

uint64_t sub_1000D3F98()
{
  return swift_deallocObject();
}

uint64_t sub_1000D3FA8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000D4008()
{
  unint64_t result = qword_10019D6D8;
  if (!qword_10019D6D8)
  {
    sub_10000650C(&qword_10019D6C0);
    sub_1000D7CD4(&qword_10019D6E0, &qword_10019D6B8, (void (*)(void))sub_1000D40B0);
    sub_100061B88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D6D8);
  }
  return result;
}

uint64_t sub_1000D40B0()
{
  return sub_1000D7CD4(&qword_10019D6E8, &qword_10019D6B0, (void (*)(void))sub_1000D40E0);
}

unint64_t sub_1000D40E0()
{
  unint64_t result = qword_10019D6F0;
  if (!qword_10019D6F0)
  {
    sub_10000650C(&qword_10019D6A8);
    sub_1000D4180();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D6F0);
  }
  return result;
}

unint64_t sub_1000D4180()
{
  unint64_t result = qword_10019D6F8;
  if (!qword_10019D6F8)
  {
    sub_10000650C(&qword_10019D6A0);
    sub_1000D4220();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D6F8);
  }
  return result;
}

unint64_t sub_1000D4220()
{
  unint64_t result = qword_10019D700;
  if (!qword_10019D700)
  {
    sub_10000650C(&qword_10019D698);
    sub_100010484(&qword_10019D708, &qword_10019D690);
    sub_100010484(&qword_100199510, &qword_100199518);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D700);
  }
  return result;
}

unint64_t sub_1000D42E4()
{
  unint64_t result = qword_10019D710;
  if (!qword_10019D710)
  {
    sub_10000650C(&qword_100198C58);
    sub_1000D3A98(&qword_10019D718, (void (*)(uint64_t))&type metadata accessor for Divider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D710);
  }
  return result;
}

unint64_t sub_1000D4390()
{
  unint64_t result = qword_10019D720;
  if (!qword_10019D720)
  {
    sub_10000650C(&qword_10019D630);
    sub_1000D4008();
    sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D720);
  }
  return result;
}

uint64_t sub_1000D443C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C9CCC(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), a1);
}

unint64_t sub_1000D4448()
{
  unint64_t result = qword_10019D748;
  if (!qword_10019D748)
  {
    sub_10000650C(&qword_10019D750);
    sub_1000D44DC(&qword_10019D758, &qword_10019D760);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D748);
  }
  return result;
}

uint64_t sub_1000D44DC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D4548(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D4588@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CB144(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000D4594()
{
  unint64_t result = qword_10019D770;
  if (!qword_10019D770)
  {
    sub_10000650C(&qword_10019D728);
    sub_10000650C(&qword_10019D778);
    sub_1000D4674();
    swift_getOpaqueTypeConformance2();
    sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D770);
  }
  return result;
}

unint64_t sub_1000D4674()
{
  unint64_t result = qword_10019D780;
  if (!qword_10019D780)
  {
    sub_10000650C(&qword_10019D778);
    sub_1000D4714();
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D780);
  }
  return result;
}

unint64_t sub_1000D4714()
{
  unint64_t result = qword_10019D788;
  if (!qword_10019D788)
  {
    sub_10000650C(&qword_10019D790);
    sub_1000D44DC((unint64_t *)&qword_10019CBD8, &qword_10019CBD0);
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D788);
  }
  return result;
}

unint64_t sub_1000D47CC()
{
  unint64_t result = qword_10019D798;
  if (!qword_10019D798)
  {
    sub_10000650C(&qword_10019D768);
    sub_100010484(&qword_10019D7A0, &qword_10019D7A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D798);
  }
  return result;
}

unint64_t sub_1000D486C()
{
  unint64_t result = qword_10019D7B0;
  if (!qword_10019D7B0)
  {
    sub_10000650C(&qword_10019D618);
    sub_1000D7CD4(&qword_10019D740, &qword_10019D738, (void (*)(void))sub_1000D4448);
    sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D7B0);
  }
  return result;
}

unint64_t sub_1000D4944()
{
  unint64_t result = qword_10019D7C0;
  if (!qword_10019D7C0)
  {
    sub_10000650C(&qword_10019D730);
    sub_1000D4594();
    sub_1000D47CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D7C0);
  }
  return result;
}

uint64_t sub_1000D49CC@<X0>(void *a1@<X8>)
{
  return sub_1000CC614(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D49D8@<X0>(void *a1@<X8>)
{
  return sub_1000CCB38(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D49E8()
{
  uint64_t v1 = type metadata accessor for FilterView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_10001D0DC();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D4B94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for FilterView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000CD0A8(a1, v8, v5, v6, a2);
}

uint64_t sub_1000D4C30()
{
  uint64_t v1 = type metadata accessor for FilterView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  sub_10001D0DC();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_1000D4E90()
{
  uint64_t v1 = *(void *)(type metadata accessor for FilterView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1000CD8CC(v0 + v2, v5);
}

uint64_t sub_1000D4F90@<X0>(void *a1@<X8>)
{
  return sub_1000CDA0C(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000D4F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CDCC8(*(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for CompactDatePicker(uint64_t a1)
{
  return sub_10002DE00(a1, (uint64_t *)&unk_10019D890);
}

uint64_t sub_1000D4FE0()
{
  return 16;
}

__n128 sub_1000D4FEC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D5000()
{
  return 16;
}

__n128 sub_1000D500C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000D5018(double *a1@<X8>)
{
  *a1 = sub_10010A168();
}

uint64_t sub_1000D5044()
{
  return sub_10010A17C();
}

uint64_t sub_1000D506C()
{
  return 16;
}

__n128 sub_1000D5078(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000D5084(double *a1@<X8>)
{
  *a1 = sub_10010A4D4();
}

uint64_t sub_1000D50B0()
{
  return sub_10010A4E8();
}

uint64_t sub_1000D50D8()
{
  return 16;
}

__n128 sub_1000D50E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D50F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for FilterViewSafeAreaPreferenceKey()
{
  return &type metadata for FilterViewSafeAreaPreferenceKey;
}

void *sub_1000D5168(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v49 = sub_100006560(&qword_10019D828);
    uint64_t v7 = *(int *)(v49 + 32);
    unint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7 + 8);
    *unint64_t v8 = *(void *)((char *)a2 + v7);
    v8[1] = v10;
    uint64_t v11 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v45 = (char *)v8 + v12;
    unint64_t v13 = &v9[v12];
    uint64_t v46 = type metadata accessor for Date();
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    swift_bridgeObjectRetain();
    v48(v45, v13, v46);
    *((unsigned char *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    uint64_t v14 = a3[5];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = *(int *)(v49 + 32);
    uint64_t v19 = (void *)((char *)v15 + v18);
    uint64_t v20 = (char *)v16 + v18;
    uint64_t v21 = *(void *)((char *)v16 + v18 + 8);
    *uint64_t v19 = *(void *)((char *)v16 + v18);
    v19[1] = v21;
    uint64_t v22 = *(int *)(v11 + 20);
    uint64_t v23 = (char *)v15 + v18 + v22;
    uint64_t v24 = &v20[v22];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v48(v23, v24, v46);
    *((unsigned char *)v19 + *(int *)(v11 + 24)) = v20[*(int *)(v11 + 24)];
    uint64_t v25 = a3[6];
    uint64_t v26 = (void *)((char *)a1 + v25);
    uint64_t v27 = (void *)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = *(int *)(v49 + 32);
    uint64_t v30 = (void *)((char *)v26 + v29);
    uint64_t v31 = (char *)v27 + v29;
    uint64_t v32 = *(void *)((char *)v27 + v29 + 8);
    *uint64_t v30 = *(void *)((char *)v27 + v29);
    v30[1] = v32;
    uint64_t v33 = *(int *)(v11 + 20);
    uint64_t v34 = (char *)v26 + v29 + v33;
    uint64_t v50 = &v31[v33];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v48(v34, v50, v46);
    *((unsigned char *)v30 + *(int *)(v11 + 24)) = v31[*(int *)(v11 + 24)];
    uint64_t v35 = a3[7];
    uint64_t v36 = a3[8];
    uint64_t v37 = (void *)((char *)a1 + v35);
    uint64_t v38 = (void *)((char *)a2 + v35);
    uint64_t v39 = v38[2];
    v37[1] = v38[1];
    v37[2] = v39;
    void *v37 = *v38;
    uint64_t v40 = (char *)a1 + v36;
    uint64_t v41 = (char *)a2 + v36;
    swift_retain();
    swift_retain();
    v48(v40, v41, v46);
    uint64_t v42 = sub_100006560(&qword_10019D1D0);
    v48(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v46);
    uint64_t v43 = a3[10];
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
  }
  return a1;
}

uint64_t sub_1000D5444(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = sub_100006560(&qword_10019D828);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v7 = v5 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v16)((void *)(v8 - 8), v7, v8);
  uint64_t v9 = a1 + a2[5];
  swift_release();
  swift_release();
  uint64_t v10 = v9 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v16(v10 + *(int *)(v6 + 20), v8);
  uint64_t v11 = a1 + a2[6];
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v16(v12 + *(int *)(v6 + 20), v8);
  swift_release();
  swift_release();
  uint64_t v13 = a1 + a2[8];
  v16(v13, v8);
  uint64_t v14 = v13 + *(int *)(sub_100006560(&qword_10019D1D0) + 36);

  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v14, v8);
}

void *sub_1000D55FC(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  uint64_t v48 = sub_100006560(&qword_10019D828);
  uint64_t v6 = *(int *)(v48 + 32);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v45 = (char *)v7 + v11;
  uint64_t v12 = &v8[v11];
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
  swift_bridgeObjectRetain();
  v47(v45, v12, v46);
  *((unsigned char *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  uint64_t v13 = a3[5];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = *(int *)(v48 + 32);
  uint64_t v18 = (void *)((char *)v14 + v17);
  uint64_t v19 = (char *)v15 + v17;
  uint64_t v20 = *(void *)((char *)v15 + v17 + 8);
  *uint64_t v18 = *(void *)((char *)v15 + v17);
  v18[1] = v20;
  uint64_t v21 = *(int *)(v10 + 20);
  uint64_t v22 = (char *)v14 + v17 + v21;
  uint64_t v23 = &v19[v21];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v47(v22, v23, v46);
  *((unsigned char *)v18 + *(int *)(v10 + 24)) = v19[*(int *)(v10 + 24)];
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = *(int *)(v48 + 32);
  uint64_t v29 = (void *)((char *)v25 + v28);
  uint64_t v30 = (char *)v26 + v28;
  uint64_t v31 = *(void *)((char *)v26 + v28 + 8);
  *uint64_t v29 = *(void *)((char *)v26 + v28);
  v29[1] = v31;
  uint64_t v32 = *(int *)(v10 + 20);
  uint64_t v33 = (char *)v25 + v28 + v32;
  uint64_t v34 = &v30[v32];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v47(v33, v34, v46);
  *((unsigned char *)v29 + *(int *)(v10 + 24)) = v30[*(int *)(v10 + 24)];
  uint64_t v35 = a3[7];
  uint64_t v36 = a3[8];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[2];
  v37[1] = v38[1];
  v37[2] = v39;
  void *v37 = *v38;
  uint64_t v40 = (char *)a1 + v36;
  uint64_t v41 = (char *)a2 + v36;
  swift_retain();
  swift_retain();
  v47(v40, v41, v46);
  uint64_t v42 = sub_100006560(&qword_10019D1D0);
  v47(&v40[*(int *)(v42 + 36)], &v41[*(int *)(v42 + 36)], v46);
  uint64_t v43 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v43) = *((unsigned char *)a2 + v43);
  return a1;
}

char *sub_1000D5878(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  uint64_t v33 = sub_100006560(&qword_10019D828);
  uint64_t v5 = *(int *)(v33 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = *(void *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24);
  v12(v10, v11, v35);
  v6[*(int *)(v8 + 24)] = v7[*(int *)(v8 + 24)];
  uint64_t v13 = a3[5];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_retain();
  swift_release();
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  uint64_t v16 = *(int *)(v33 + 32);
  uint64_t v17 = &v14[v16];
  uint64_t v18 = &v15[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v17[*(int *)(v8 + 20)], &v18[*(int *)(v8 + 20)], v35);
  v17[*(int *)(v8 + 24)] = v18[*(int *)(v8 + 24)];
  uint64_t v19 = a3[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_retain();
  swift_release();
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(v33 + 32);
  uint64_t v23 = &v20[v22];
  uint64_t v24 = &v21[v22];
  *(void *)uint64_t v23 = *(void *)&v21[v22];
  *((void *)v23 + 1) = *(void *)&v21[v22 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12(&v23[*(int *)(v8 + 20)], &v24[*(int *)(v8 + 20)], v35);
  v23[*(int *)(v8 + 24)] = v24[*(int *)(v8 + 24)];
  uint64_t v25 = a3[7];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_retain();
  swift_release();
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_retain();
  swift_release();
  *((void *)v26 + 2) = *((void *)v27 + 2);
  uint64_t v28 = a3[8];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  v12(&a1[v28], &a2[v28], v35);
  uint64_t v31 = sub_100006560(&qword_10019D1D0);
  v12(&v29[*(int *)(v31 + 36)], &v30[*(int *)(v31 + 36)], v35);
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_1000D5B70(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  uint64_t v38 = sub_100006560(&qword_10019D828);
  uint64_t v6 = *(int *)(v38 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  uint64_t v19 = *(int *)(v38 + 32);
  uint64_t v20 = &v16[v19];
  uint64_t v21 = &v17[v19];
  *(_OWORD *)&v16[v19] = *(_OWORD *)&v17[v19];
  v14(&v16[v19 + *(int *)(v9 + 20)], &v17[v19 + *(int *)(v9 + 20)], v13);
  v20[*(int *)(v9 + 24)] = v21[*(int *)(v9 + 24)];
  uint64_t v22 = a3[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = *(int *)(v38 + 32);
  uint64_t v27 = &v23[v26];
  uint64_t v28 = &v24[v26];
  *(_OWORD *)&v23[v26] = *(_OWORD *)&v24[v26];
  v14(&v23[v26 + *(int *)(v9 + 20)], &v24[v26 + *(int *)(v9 + 20)], v13);
  v27[*(int *)(v9 + 24)] = v28[*(int *)(v9 + 24)];
  uint64_t v29 = a3[7];
  uint64_t v30 = a3[8];
  uint64_t v31 = &a1[v29];
  uint64_t v32 = &a2[v29];
  *((void *)v31 + 2) = *((void *)v32 + 2);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  uint64_t v33 = &a1[v30];
  uint64_t v34 = &a2[v30];
  v14(&a1[v30], &a2[v30], v13);
  uint64_t v35 = sub_100006560(&qword_10019D1D0);
  v14(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v13);
  uint64_t v36 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[v36] = a2[v36];
  return a1;
}

char *sub_1000D5D70(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  uint64_t v38 = sub_100006560(&qword_10019D828);
  uint64_t v5 = *(int *)(v38 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5 + 8];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  v6[*(int *)(v9 + 24)] = v7[*(int *)(v9 + 24)];
  uint64_t v15 = a3[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  swift_release();
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  uint64_t v18 = *(int *)(v38 + 32);
  uint64_t v19 = &v16[v18];
  uint64_t v20 = &v17[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  v14(&v19[*(int *)(v9 + 20)], &v20[*(int *)(v9 + 20)], v13);
  v19[*(int *)(v9 + 24)] = v20[*(int *)(v9 + 24)];
  uint64_t v22 = a3[6];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_release();
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_release();
  uint64_t v25 = *(int *)(v38 + 32);
  uint64_t v26 = &v23[v25];
  uint64_t v27 = &v24[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  v14(&v26[*(int *)(v9 + 20)], &v27[*(int *)(v9 + 20)], v13);
  v26[*(int *)(v9 + 24)] = v27[*(int *)(v9 + 24)];
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  *(void *)&a1[v29] = *(void *)&a2[v29];
  swift_release();
  *((void *)v30 + 1) = *((void *)v31 + 1);
  swift_release();
  *((void *)v30 + 2) = *((void *)v31 + 2);
  uint64_t v32 = a3[8];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  v14(&a1[v32], &a2[v32], v13);
  uint64_t v35 = sub_100006560(&qword_10019D1D0);
  v14(&v33[*(int *)(v35 + 36)], &v34[*(int *)(v35 + 36)], v13);
  uint64_t v36 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  a1[v36] = a2[v36];
  return a1;
}

uint64_t sub_1000D5FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6004);
}

uint64_t sub_1000D6004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006560(&qword_10019D828);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100006560(&qword_10019D1D0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000D613C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D6150);
}

uint64_t sub_1000D6150(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100006560(&qword_10019D828);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100006560(&qword_10019D1D0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000D6288()
{
  sub_1000D63A4(319, &qword_10019D8A0, (uint64_t (*)(uint64_t))type metadata accessor for CompactDatePickerConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v0 <= 0x3F)
  {
    sub_1000D6408();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000D63A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1000D6408()
{
  if (!qword_10019D8A8)
  {
    type metadata accessor for Date();
    sub_1000D3A98(&qword_10019D1C8, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019D8A8);
    }
  }
}

uint64_t sub_1000D649C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000D6D08()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000D6D24(uint64_t a1)
{
  unint64_t result = sub_1000D3BDC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000D6D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D2278(a1, a2);
}

unint64_t sub_1000D6D54()
{
  unint64_t result = qword_10019D978;
  if (!qword_10019D978)
  {
    sub_10000650C(&qword_10019A668);
    sub_100010484(&qword_10019D980, &qword_10019D988);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D978);
  }
  return result;
}

unint64_t sub_1000D6DF4()
{
  unint64_t result = qword_10019D998;
  if (!qword_10019D998)
  {
    sub_10000650C(&qword_10019D938);
    sub_100010484(&qword_10019D990, &qword_10019D930);
    sub_1000D3A98((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019D998);
  }
  return result;
}

uint64_t sub_1000D6EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompactDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6F2C()
{
  type metadata accessor for CompactDatePicker(0);

  return sub_1000D251C();
}

uint64_t type metadata accessor for DatePickerButtonStyle(uint64_t a1)
{
  return sub_10002DE00(a1, qword_10019DA38);
}

uint64_t sub_1000D6FC0()
{
  uint64_t v1 = (int *)(type metadata accessor for CompactDatePicker(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = sub_100006560(&qword_10019D828);
  uint64_t v4 = v2 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for Date();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v2 + v1[7];
  swift_release();
  swift_release();
  uint64_t v10 = v9 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  v8(v10 + *(int *)(v5 + 20), v7);
  uint64_t v11 = v2 + v1[8];
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(v3 + 32);
  swift_bridgeObjectRelease();
  v8(v12 + *(int *)(v5 + 20), v7);
  swift_release();
  swift_release();
  uint64_t v13 = v2 + v1[10];
  v8(v13, v7);
  uint64_t v14 = sub_100006560(&qword_10019D1D0);
  v8(v13 + *(int *)(v14 + 36), v7);

  return swift_deallocObject();
}

uint64_t sub_1000D71E0()
{
  type metadata accessor for CompactDatePicker(0);

  return sub_1000D0928();
}

uint64_t sub_1000D7240@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D0DE4(a1);
}

uint64_t sub_1000D7248()
{
  return sub_1000D09A4(*(void *)(v0 + 16));
}

ValueMetadata *type metadata accessor for FilterViewStartDatePickerHeightPreferenceKey()
{
  return &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
}

uint64_t *sub_1000D7274(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *unint64_t v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    uint64_t v11 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v17 = &v9[v12];
    uint64_t v18 = (char *)v8 + v12;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v18, v17, v13);
    *((unsigned char *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1000D73AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for CompactDatePickerConfiguration() + 20);
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

unsigned char *sub_1000D742C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5 + 8];
  *uint64_t v6 = *(void *)&a2[v5];
  v6[1] = v8;
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v15 = (char *)v6 + v10;
  uint64_t v11 = &v7[v10];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v15, v11, v12);
  *((unsigned char *)v6 + *(int *)(v9 + 24)) = v7[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1000D751C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = *(void *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)v7 + v10;
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *((unsigned char *)v7 + *(int *)(v9 + 24)) = v8[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1000D7600(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  uint64_t v9 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1000D76CC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = (char *)v7 + v11;
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *((unsigned char *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1000D77A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D77B4);
}

uint64_t sub_1000D77B4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000D7864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7878);
}

unsigned char *sub_1000D7878(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *unint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for CompactDatePickerConfiguration();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000D791C()
{
  uint64_t result = type metadata accessor for CompactDatePickerConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000D79C0()
{
  return sub_100010484(&qword_10019DA78, &qword_10019DA80);
}

unint64_t sub_1000D79FC(uint64_t a1)
{
  unint64_t result = sub_1000D7A24();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D7A24()
{
  unint64_t result = qword_10019DA88;
  if (!qword_10019DA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DA88);
  }
  return result;
}

uint64_t sub_1000D7A78()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000D7A98()
{
  unint64_t result = qword_10019DAC8;
  if (!qword_10019DAC8)
  {
    sub_10000650C(&qword_10019DAC0);
    sub_1000D7B38();
    sub_100010484(&qword_10019DB00, &qword_10019DB08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DAC8);
  }
  return result;
}

unint64_t sub_1000D7B38()
{
  unint64_t result = qword_10019DAD0;
  if (!qword_10019DAD0)
  {
    sub_10000650C(&qword_10019DAB8);
    sub_1000D7BD8();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DAD0);
  }
  return result;
}

unint64_t sub_1000D7BD8()
{
  unint64_t result = qword_10019DAD8;
  if (!qword_10019DAD8)
  {
    sub_10000650C(&qword_10019DAB0);
    sub_1000D7CD4(&qword_10019DAE0, &qword_10019DAA8, (void (*)(void))sub_1000D7CA4);
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DAD8);
  }
  return result;
}

uint64_t sub_1000D7CA4()
{
  return sub_1000D7CD4(&qword_10019DAE8, &qword_10019DAA0, (void (*)(void))sub_1000D7D50);
}

uint64_t sub_1000D7CD4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D7D50()
{
  return sub_1000D7CD4(&qword_10019DAF0, &qword_10019DA98, (void (*)(void))sub_1000D7D80);
}

unint64_t sub_1000D7D80()
{
  unint64_t result = qword_10019DAF8;
  if (!qword_10019DAF8)
  {
    sub_10000650C(&qword_10019DA90);
    sub_1000D3A98(&qword_10019C310, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DAF8);
  }
  return result;
}

unint64_t destroy for Tab(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *_s15ShazamEventsApp3TabVwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >= 2)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for Tab(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v4 >= 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000AFAA0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for Tab(void *a1, void *a2)
{
  if (a1[1] >= 2uLL)
  {
    unint64_t v4 = a2[1];
    if (v4 >= 2)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000AFAA0((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Tab(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab()
{
  return &type metadata for Tab;
}

unint64_t sub_1000D8068()
{
  unint64_t result = qword_10019DB10;
  if (!qword_10019DB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DB10);
  }
  return result;
}

uint64_t sub_1000D80BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 7105633;
  if (a2) {
    uint64_t v2 = a1;
  }
  if (a2 == 1) {
    uint64_t v3 = 0x4C746E6572727563;
  }
  else {
    uint64_t v3 = v2;
  }
  sub_1000B069C(a1, a2);
  return v3;
}

Swift::Int sub_1000D8128()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000D81A8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (!v1)
  {
    Swift::UInt v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 1;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  Hasher._combine(_:)(2uLL);

  String.hash(into:)();
}

Swift::Int sub_1000D8230()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    }
    Swift::UInt v2 = 1;
  }
  else
  {
    Swift::UInt v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000D82AC()
{
  return sub_1000D80BC(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1000D82B4(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

Swift::Int sub_1000D8314()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_1000BCF9C(v1, v2);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 1;
  }
  else
  {
    Swift::UInt v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000D83A8()
{
  unint64_t v1 = v0[1];
  if (!v1)
  {
    Swift::UInt v2 = 0;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 1;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  uint64_t v3 = *v0;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  sub_1000BCF9C(v3, v1);
}

Swift::Int sub_1000D8444()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_1000BCF9C(v1, v2);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 1;
  }
  else
  {
    Swift::UInt v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

unint64_t destroy for Tab.Style(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s15ShazamEventsApp3TabV5StyleOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for Tab.Style(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Tab.Style(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab.Style(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Tab.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000D86F4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000D870C(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab.Style()
{
  return &type metadata for Tab.Style;
}

unint64_t sub_1000D8740()
{
  unint64_t result = qword_10019DB18;
  if (!qword_10019DB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DB18);
  }
  return result;
}

uint64_t sub_1000D8798(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000D8800(&qword_10019AD28);
  uint64_t result = sub_1000D8800(qword_10019DB20);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000D8800(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Genre();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D8844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6 & 1;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_1000D8898()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D88DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000D893C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D89C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for LineupViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_1000D8AD0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  char v6 = (int *)type metadata accessor for FeaturedVideosView();
  uint64_t v7 = a3 + v6[9];
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  sub_1000D8D24(a2);
  uint64_t v9 = (uint64_t *)(a3 + v6[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_1000DF648((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *uint64_t v9 = EnvironmentObject.init()();
  v9[1] = v10;
  uint64_t v11 = (uint64_t *)(a3 + v6[12]);
  *uint64_t v11 = swift_getKeyPath();
  sub_100006560(&qword_100198940);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = (uint64_t *)(a3 + v6[13]);
  *uint64_t v12 = swift_getKeyPath();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for FeaturedVideosView()
{
  return sub_1000068A4();
}

uint64_t sub_1000D8CE4()
{
  type metadata accessor for FeaturedVideosViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000D8D24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - v5, a1, v2, v4);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_1000D8E18()
{
  return State.projectedValue.getter();
}

uint64_t sub_1000D8E60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v20 = a2;
  v19[1] = sub_10000650C(&qword_10019DC28);
  uint64_t v3 = *(void *)(a1 + 16);
  type metadata accessor for Array();
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198618);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100199E18);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  v19[0] = &protocol conformance descriptor for VStack<A>;
  uint64_t v28 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getWitnessTable();
  uint64_t v32 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  type metadata accessor for LazyHStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v6 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v28 = OpaqueTypeMetadata2;
  uint64_t WitnessTable = v3;
  uint64_t v30 = v6;
  uint64_t v31 = v32;
  uint64_t v25 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = &protocol witness table for _FlexFrameLayout;
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v24 = *(void *)(v32 + 8);
  uint64_t v28 = v7;
  uint64_t WitnessTable = v8;
  uint64_t v30 = v9;
  uint64_t v31 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for VStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v19 - v15);
  static HorizontalAlignment.leading.getter();
  uint64_t v21 = v3;
  uint64_t v22 = v4;
  uint64_t v23 = v19[2];
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v16, v13, v10);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  sub_1000508C8(v20, v16, v10);
  return ((uint64_t (*)(void *, uint64_t))v17)(v16, v10);
}

uint64_t sub_1000D9470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v182 = a1;
  uint64_t v173 = a4;
  uint64_t v181 = type metadata accessor for FeaturedVideosView();
  uint64_t v170 = *(void *)(v181 - 8);
  uint64_t v171 = *(void *)(v170 + 64);
  __chkstk_darwin(v181);
  long long v183 = (char *)&v122 - v6;
  uint64_t v175 = type metadata accessor for Optional();
  uint64_t v172 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v169 = (char *)&v122 - v7;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v167 = *(void *)(v8 - 8);
  uint64_t v168 = (void (*)(char *, uint64_t, uint64_t))v8;
  __chkstk_darwin(v8);
  uint64_t v166 = (char *)&v122 - v9;
  uint64_t v10 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v10 - 8);
  uint64_t v164 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v165 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v163 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ContentMarginPlacement();
  uint64_t v161 = *(void *)(v14 - 8);
  uint64_t v162 = v14;
  __chkstk_darwin(v14);
  uint64_t v160 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Array();
  uint64_t v17 = a3;
  long long v185 = (void (*)(void, void))a3;
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198618);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100199E18);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v192 = v18;
  uint64_t v193 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = (void *)v17[1];
  uint64_t v192 = v16;
  uint64_t v193 = a2;
  uint64_t v194 = OpaqueTypeMetadata2;
  char v195 = (void *)v21;
  uint64_t v196 = (uint64_t)v22;
  uint64_t v23 = v22;
  type metadata accessor for ForEach();
  uint64_t v192 = v18;
  uint64_t v193 = WitnessTable;
  v207[8] = swift_getOpaqueTypeConformance2();
  swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for LazyHStack();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v192 = v24;
  uint64_t v193 = v25;
  uint64_t v149 = swift_getOpaqueTypeMetadata2();
  uint64_t v192 = v24;
  uint64_t v193 = v25;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = type metadata accessor for ScrollView();
  uint64_t v154 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  long long v146 = (char *)&v122 - v27;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v192 = v26;
  uint64_t v193 = v28;
  uint64_t v29 = v28;
  uint64_t v143 = v28;
  uint64_t v30 = swift_getOpaqueTypeMetadata2();
  uint64_t v153 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v142 = (char *)&v122 - v31;
  uint64_t v192 = v26;
  uint64_t v193 = v29;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  uint64_t v192 = v30;
  uint64_t v33 = v30;
  uint64_t v135 = v30;
  uint64_t v136 = v32;
  uint64_t v193 = v32;
  uint64_t v34 = v32;
  uint64_t v35 = swift_getOpaqueTypeMetadata2();
  uint64_t v151 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v134 = (char *)&v122 - v36;
  uint64_t v192 = v33;
  uint64_t v193 = v34;
  uint64_t v37 = swift_getOpaqueTypeConformance2();
  uint64_t v192 = v35;
  uint64_t v38 = v35;
  uint64_t v131 = v12;
  uint64_t v132 = v35;
  uint64_t v193 = v12;
  uint64_t v194 = v37;
  uint64_t v133 = v37;
  char v195 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v39 = swift_getOpaqueTypeMetadata2();
  uint64_t v150 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v130 = (char *)&v122 - v40;
  uint64_t v192 = v38;
  uint64_t v193 = v12;
  uint64_t v194 = v37;
  char v195 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v41 = swift_getOpaqueTypeConformance2();
  uint64_t v192 = v39;
  uint64_t v42 = v39;
  uint64_t v123 = v39;
  uint64_t v124 = v41;
  uint64_t v174 = a2;
  uint64_t v193 = a2;
  uint64_t v194 = v41;
  uint64_t v43 = v41;
  char v195 = v23;
  uint64_t v141 = swift_getOpaqueTypeMetadata2();
  uint64_t v147 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v126 = (char *)&v122 - v44;
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v158 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v179 = (char *)&v122 - v46;
  uint64_t v192 = v42;
  uint64_t v193 = a2;
  uint64_t v194 = v43;
  uint64_t v122 = v23;
  char v195 = v23;
  uint64_t v125 = swift_getOpaqueTypeConformance2();
  v207[6] = v125;
  v207[7] = (uint64_t)&protocol witness table for _FlexFrameLayout;
  uint64_t v159 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v144 = v45;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v176 = v47;
  v207[5] = v23[1];
  uint64_t v48 = v175;
  uint64_t v145 = swift_getWitnessTable();
  uint64_t v192 = v45;
  uint64_t v193 = v48;
  uint64_t v194 = v47;
  char v195 = (void *)v145;
  uint64_t v155 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v152 = swift_getOpaqueTypeMetadata2();
  uint64_t v156 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v178 = (char *)&v122 - v49;
  uint64_t v180 = type metadata accessor for ModifiedContent();
  uint64_t v157 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  long long v184 = (char *)&v122 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v177 = (void **)((char *)&v122 - v52);
  uint64_t v53 = v181;
  uint64_t v54 = v182;
  sub_1000D8CE4();
  sub_10008C05C();
  swift_release();
  uint64_t v55 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v57 = v56;
  LOBYTE(v17) = v58 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v59 = Text.font(_:)();
  uint64_t v138 = v60;
  uint64_t v139 = v59;
  LOBYTE(v12) = v61;
  uint64_t v140 = v62;
  swift_release();
  int v137 = v12 & 1;
  sub_1000065A4(v55, v57, (char)v17);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v128 = swift_getKeyPath();
  int v127 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  static Axis.Set.horizontal.getter();
  uint64_t v71 = v174;
  uint64_t v186 = v174;
  long long v187 = v185;
  uint64_t v72 = v54;
  uint64_t v188 = v54;
  uint64_t v73 = v146;
  ScrollView.init(_:showsIndicators:content:)();
  sub_1000D8CE4();
  sub_10008C124();
  swift_release();
  double v74 = v142;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v154 + 8))(v73, v26);
  static Edge.Set.horizontal.getter();
  uint64_t v75 = v160;
  static ContentMarginPlacement.automatic.getter();
  uint64_t v77 = v134;
  uint64_t v76 = v135;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v161 + 8))(v75, v162);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v74, v76);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  uint64_t v78 = v163;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  uint64_t v80 = v130;
  uint64_t v79 = v131;
  uint64_t v81 = v132;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v165 + 8))(v78, v79);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v77, v81);
  uint64_t v82 = v166;
  sub_1000B4AD4(v53, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  char v83 = v126;
  uint64_t v84 = v123;
  uint64_t v85 = v71;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v167 + 8))(v82, v168);
  (*(void (**)(char *, uint64_t))(v150 + 8))(v80, v84);
  static Alignment.center.getter();
  uint64_t v86 = v141;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v147 + 8))(v83, v86);
  uint64_t v87 = v169;
  uint64_t v88 = v53;
  sub_1000B4AD4(v53, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v89 = v170;
  uint64_t v168 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 16);
  uint64_t v90 = v183;
  v168(v183, v72, v88);
  uint64_t v91 = *(unsigned __int8 *)(v89 + 80);
  uint64_t v92 = (v91 + 32) & ~v91;
  v171 += v92;
  uint64_t v167 = v91 | 7;
  uint64_t v93 = swift_allocObject();
  uint64_t v94 = v185;
  *(void *)(v93 + 16) = v85;
  *(void *)(v93 + 24) = v94;
  uint64_t v170 = *(void *)(v89 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v170)(v93 + v92, v90, v88);
  uint64_t v95 = v179;
  uint64_t v96 = v144;
  uint64_t v97 = (void *)v145;
  uint64_t v98 = v175;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v172 + 8))(v87, v98);
  uint64_t v99 = v95;
  uint64_t v100 = v96;
  (*(void (**)(char *, uint64_t))(v158 + 8))(v99, v96);
  uint64_t v101 = v183;
  uint64_t v102 = v181;
  v168(v183, v182, v181);
  uint64_t v103 = swift_allocObject();
  uint64_t v104 = v185;
  *(void *)(v103 + 16) = v174;
  *(void *)(v103 + 24) = v104;
  ((void (*)(uint64_t, char *, uint64_t))v170)(v103 + v92, v101, v102);
  uint64_t v192 = v100;
  uint64_t v193 = v98;
  uint64_t v194 = v176;
  char v195 = v97;
  uint64_t v105 = swift_getOpaqueTypeConformance2();
  uint64_t v106 = v184;
  uint64_t v107 = v152;
  uint64_t v108 = v178;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v108, v107);
  v207[2] = v105;
  v207[3] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  uint64_t v109 = v180;
  long long v183 = (char *)swift_getWitnessTable();
  uint64_t v110 = v177;
  sub_1000508C8(v177, v106, v109);
  uint64_t v111 = v157;
  long long v185 = *(void (**)(void, void))(v157 + 8);
  v185(v106, v109);
  uint64_t v113 = v138;
  uint64_t v112 = v139;
  uint64_t v192 = v139;
  uint64_t v193 = v138;
  LOBYTE(v109) = v137;
  LOBYTE(v194) = v137;
  char v195 = v140;
  uint64_t v196 = KeyPath;
  uint64_t v197 = 2;
  char v198 = 0;
  uint64_t v199 = v128;
  char v200 = 0;
  char v201 = v127;
  uint64_t v202 = v64;
  uint64_t v203 = v66;
  uint64_t v204 = v68;
  uint64_t v205 = v70;
  char v206 = 0;
  v207[0] = (uint64_t)&v192;
  uint64_t v114 = *(void (**)(char *, void *, uint64_t))(v111 + 16);
  uint64_t v115 = (uint64_t)v184;
  uint64_t v116 = v110;
  uint64_t v117 = v180;
  v114(v184, v116, v180);
  v207[1] = v115;
  sub_100010924(v112, v113, v109);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v191[0] = sub_100006560(&qword_10019DC28);
  v191[1] = v117;
  unint64_t v189 = sub_1000DEFF0();
  char v190 = v183;
  sub_100050970(v207, 2uLL, (uint64_t)v191);
  uint64_t v118 = v117;
  uint64_t v119 = v117;
  uint64_t v120 = (void (*)(char *, uint64_t))v185;
  v185(v177, v118);
  sub_1000065A4(v112, v113, v109);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v120(v184, v119);
  sub_1000065A4(v192, v193, v194);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DA77C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a4;
  uint64_t v6 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v6 - 8);
  uint64_t v32 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Array();
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198618);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100199E18);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v9;
  uint64_t v40 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v13 = *(void *)(a3 + 8);
  uint64_t v39 = v8;
  uint64_t v40 = a2;
  uint64_t v41 = OpaqueTypeMetadata2;
  uint64_t v42 = v12;
  uint64_t v43 = v13;
  type metadata accessor for ForEach();
  uint64_t v39 = v9;
  uint64_t v40 = WitnessTable;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for LazyHStack();
  uint64_t v31 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v39 = v14;
  uint64_t v40 = v28;
  uint64_t v30 = &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>;
  uint64_t v17 = swift_getOpaqueTypeMetadata2();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v27 - v22);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v33;
  static VerticalAlignment.center.getter();
  sub_1000DC544();
  LazyHStack.init(alignment:spacing:pinnedViews:content:)();
  uint64_t v24 = v28;
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  uint64_t v39 = v14;
  uint64_t v40 = v24;
  swift_getOpaqueTypeConformance2();
  sub_1000508C8(v23, v20, v17);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  v25(v20, v17);
  sub_1000508C8(v34, v23, v17);
  return ((uint64_t (*)(void *, uint64_t))v25)(v23, v17);
}

uint64_t sub_1000DABFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v7 = type metadata accessor for FeaturedVideosView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v41 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v40 = (char *)&KeyPath - v9;
  uint64_t v10 = type metadata accessor for Array();
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198618);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100199E18);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for VStack();
  uint64_t v37 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = v11;
  uint64_t v48 = WitnessTable;
  uint64_t v33 = &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>;
  uint64_t v34 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v38 = OpaqueTypeMetadata2;
  uint64_t v39 = v10;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v35 = *(void *)(a3 + 8);
  uint64_t v36 = v14;
  uint64_t v47 = v10;
  uint64_t v48 = a2;
  uint64_t v49 = OpaqueTypeMetadata2;
  uint64_t v50 = v14;
  uint64_t v51 = v35;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v32 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&KeyPath - v19);
  sub_1000D8CE4();
  uint64_t v21 = sub_10008C2DC();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v46 = v21;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = v8;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v24 = v40;
  uint64_t v25 = v7;
  v23(v40, a1, v7);
  unint64_t v26 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a2;
  *(void *)(v27 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v27 + v26, v24, v25);
  uint64_t v47 = v37;
  uint64_t v48 = v34;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  ForEach<>.init(_:id:content:)();
  uint64_t v45 = OpaqueTypeConformance2;
  swift_getWitnessTable();
  sub_1000508C8(v20, v17, v15);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v32 + 8);
  v28(v17, v15);
  sub_1000508C8(v42, v20, v15);
  return ((uint64_t (*)(void *, uint64_t))v28)(v20, v15);
}

uint64_t sub_1000DB034@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v118 = a2;
  uint64_t v107 = a1;
  uint64_t v113 = a5;
  uint64_t v7 = type metadata accessor for FeaturedVideosView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v116 = v7;
  uint64_t v117 = v8;
  __chkstk_darwin(v7);
  uint64_t v112 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v115 = (char *)&v89 - v11;
  uint64_t v102 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v12 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v92 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_1001989F0);
  __chkstk_darwin(v14);
  uint64_t v101 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v114 = (void (*)(char *, uint64_t, uint64_t))((char *)&v89 - v17);
  uint64_t v18 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v18 - 8);
  uint64_t v91 = (uint64_t)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v99 = (char *)&v89 - v21;
  __chkstk_darwin(v22);
  uint64_t v97 = (uint64_t)&v89 - v23;
  __chkstk_darwin(v24);
  uint64_t v98 = (char *)&v89 - v25;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v89 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v89 - v30;
  type metadata accessor for FeaturedVideoPlayer();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198618);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100199E18);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for VStack();
  uint64_t v108 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v89 - v33;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v111 = v32;
  uint64_t v123 = v32;
  uint64_t v124 = WitnessTable;
  uint64_t v106 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v109 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v110 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v104 = (char *)&v89 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v105 = (uint64_t *)((char *)&v89 - v39);
  static HorizontalAlignment.leading.getter();
  uint64_t v119 = a3;
  uint64_t v120 = a4;
  uint64_t v40 = v116;
  uint64_t v121 = v107;
  uint64_t v122 = v118;
  uint64_t v107 = v34;
  VStack.init(alignment:spacing:content:)();
  int v103 = static Axis.Set.horizontal.getter();
  sub_10001CA34((uint64_t)v31);
  uint64_t v41 = v102;
  uint64_t v93 = *(void (**)(char *, void, uint64_t))(v12 + 104);
  v93(v28, enum case for UserInterfaceSizeClass.regular(_:), v102);
  uint64_t v42 = v41;
  uint64_t v94 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
  v94(v28, 0, 1, v41);
  uint64_t v96 = v14;
  uint64_t v43 = *(int *)(v14 + 48);
  uint64_t v44 = v114;
  uint64_t v45 = (uint64_t)v114 + v43;
  sub_100091660((uint64_t)v31, (uint64_t)v114);
  sub_100091660((uint64_t)v28, v45);
  uint64_t v100 = v12;
  uint64_t v46 = v12;
  uint64_t v47 = v42;
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  unsigned int v49 = v48((uint64_t)v44, 1, v47);
  uint64_t v95 = v48;
  if (v49 == 1)
  {
    uint64_t v50 = (uint64_t)v28;
    uint64_t v51 = v48;
    uint64_t v52 = &qword_100198948;
    sub_1000067DC(v50, &qword_100198948);
    sub_1000067DC((uint64_t)v31, &qword_100198948);
    if (v51(v45, 1, v47) == 1)
    {
      char v53 = -1;
    }
    else
    {
      uint64_t v52 = &qword_1001989F0;
      char v53 = 0;
    }
  }
  else
  {
    uint64_t v90 = v31;
    uint64_t v54 = (uint64_t)v98;
    sub_100091660((uint64_t)v44, (uint64_t)v98);
    if (v48(v45, 1, v47) == 1)
    {
      sub_1000067DC((uint64_t)v28, &qword_100198948);
      sub_1000067DC((uint64_t)v90, &qword_100198948);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v54, v47);
      char v53 = 0;
      uint64_t v52 = &qword_1001989F0;
    }
    else
    {
      uint64_t v55 = v100;
      uint64_t v56 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 32))(v92, v45, v47);
      sub_1000DF648((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v57 = *(void (**)(char *, uint64_t))(v55 + 8);
      char v58 = v56;
      uint64_t v44 = v114;
      v57(v58, v47);
      uint64_t v52 = &qword_100198948;
      sub_1000067DC((uint64_t)v28, &qword_100198948);
      sub_1000067DC((uint64_t)v90, &qword_100198948);
      v57(v98, v47);
      uint64_t v40 = v116;
    }
  }
  sub_1000067DC((uint64_t)v44, v52);
  uint64_t v59 = v117;
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
  char v61 = v115;
  v60(v115, v118, v40);
  if ((v53 & 1) == 0)
  {
    uint64_t v114 = v60;
    uint64_t v64 = v97;
    sub_10001CA34(v97);
    uint64_t v65 = (uint64_t)v99;
    v93(v99, enum case for UserInterfaceSizeClass.compact(_:), v47);
    uint64_t v66 = v64;
    v94((char *)v65, 0, 1, v47);
    uint64_t v67 = v65;
    uint64_t v68 = v101;
    uint64_t v69 = v101 + *(int *)(v96 + 48);
    sub_100091660(v66, v101);
    sub_100091660(v67, v69);
    uint64_t v70 = v95;
    if (v95(v68, 1, v47) == 1)
    {
      sub_1000067DC(v67, &qword_100198948);
      sub_1000067DC(v66, &qword_100198948);
      uint64_t v62 = *(void (**)(char *, uint64_t))(v117 + 8);
      v62(v61, v40);
      if (v70(v69, 1, v47) == 1)
      {
        sub_1000067DC(v101, &qword_100198948);
        uint64_t v63 = v112;
        uint64_t v60 = v114;
        goto LABEL_13;
      }
      uint64_t v63 = v112;
      uint64_t v68 = v101;
    }
    else
    {
      uint64_t v71 = v91;
      sub_100091660(v68, v91);
      unsigned int v72 = v70(v69, 1, v47);
      uint64_t v73 = v100;
      double v74 = (void (**)(uint64_t, uint64_t))(v100 + 8);
      if (v72 != 1)
      {
        uint64_t v76 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v100 + 32))(v92, v69, v47);
        sub_1000DF648((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
        LODWORD(v100) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v77 = v66;
        uint64_t v78 = v40;
        uint64_t v79 = v71;
        uint64_t v80 = *(void (**)(char *, uint64_t))(v73 + 8);
        v80(v76, v47);
        sub_1000067DC((uint64_t)v99, &qword_100198948);
        sub_1000067DC(v77, &qword_100198948);
        uint64_t v62 = *(void (**)(char *, uint64_t))(v117 + 8);
        v62(v115, v78);
        v80((char *)v79, v47);
        uint64_t v40 = v78;
        sub_1000067DC(v101, &qword_100198948);
        uint64_t v63 = v112;
        v114(v112, v118, v78);
        if (v100) {
          goto LABEL_14;
        }
LABEL_20:
        v62(v63, v40);
        goto LABEL_21;
      }
      sub_1000067DC((uint64_t)v99, &qword_100198948);
      sub_1000067DC(v66, &qword_100198948);
      uint64_t v62 = *(void (**)(char *, uint64_t))(v117 + 8);
      v62(v115, v40);
      (*v74)(v71, v47);
      uint64_t v63 = v112;
    }
    uint64_t v75 = v114;
    sub_1000067DC(v68, &qword_1001989F0);
    v75(v63, v118, v40);
    goto LABEL_20;
  }
  uint64_t v62 = *(void (**)(char *, uint64_t))(v59 + 8);
  v62(v61, v40);
  uint64_t v63 = v112;
LABEL_13:
  v60(v63, v118, v40);
LABEL_14:
  sub_1000D8CE4();
  sub_10008C0C0();
  swift_release();
  v62(v63, v40);
LABEL_21:
  static Alignment.center.getter();
  uint64_t v81 = v104;
  uint64_t v82 = v111;
  uint64_t v83 = v106;
  uint64_t v84 = v107;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v84, v82);
  uint64_t v123 = v82;
  uint64_t v124 = v83;
  swift_getOpaqueTypeConformance2();
  uint64_t v85 = v105;
  uint64_t v86 = v110;
  sub_1000508C8(v105, v81, v110);
  uint64_t v87 = *(void (**)(char *, uint64_t))(v109 + 8);
  v87(v81, v86);
  sub_1000508C8(v113, v85, v86);
  return ((uint64_t (*)(void *, uint64_t))v87)(v85, v86);
}

uint64_t sub_1000DBD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1;
  uint64_t v67 = a1;
  uint64_t v72 = a4;
  uint64_t v71 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FeaturedVideoPlayer();
  uint64_t v66 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v65 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)&v63 - v18;
  sub_10000650C(&qword_100198618);
  uint64_t v74 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v73 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v21 = __chkstk_darwin(v20);
  uint64_t v75 = (uint64_t *)((char *)&v63 - v22);
  uint64_t v23 = v14;
  uint64_t v24 = (uint64_t)v14;
  uint64_t v25 = a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v23, v6, a2, v21);
  uint64_t v26 = a3;
  type metadata accessor for FeaturedVideosView();
  sub_1000D8CE4();
  LOBYTE(v6) = sub_10008BF3C();
  swift_release();
  sub_1000D8E18();
  uint64_t v27 = v25;
  sub_1000C2000(v24, v6 & 1, (uint64_t)v10, v25, (uint64_t)v17);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v64;
  View.aspectRatio(_:contentMode:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v15);
  uint64_t v30 = v70;
  uint64_t v31 = &v70[*(int *)(v71 + 20)];
  uint64_t v32 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v33 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v30 = _Q0;
  v86[5] = WitnessTable;
  v86[6] = (uint64_t)&protocol witness table for _AspectRatioLayout;
  uint64_t v39 = v65;
  uint64_t v40 = swift_getWitnessTable();
  sub_1000DF648(&qword_10019DC48, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  uint64_t v41 = v73;
  View.clipShape<A>(_:style:)();
  sub_100010934((uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v29, v39);
  uint64_t v42 = sub_100010484(&qword_100198610, &qword_100198618);
  v86[3] = v40;
  v86[4] = v42;
  uint64_t v43 = v74;
  uint64_t v68 = swift_getWitnessTable();
  sub_1000508C8(v75, v41, v43);
  uint64_t v44 = v69;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v70 = (char *)(v69 + 8);
  uint64_t v71 = (uint64_t)v45;
  v45(v41, v43);
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v27, v26);
  uint64_t v80 = v46;
  sub_10002374C();
  uint64_t v47 = Text.init<A>(_:)();
  uint64_t v49 = v48;
  LOBYTE(v29) = v50 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v51 = Text.font(_:)();
  uint64_t v53 = v52;
  LOBYTE(v27) = v54;
  uint64_t v56 = v55;
  swift_release();
  sub_1000065A4(v47, v49, (char)v29);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v58 = (uint64_t)v73;
  uint64_t v59 = v74;
  uint64_t v60 = v75;
  (*(void (**)(char *, void *, uint64_t))(v44 + 16))(v73, v75, v74);
  uint64_t v79 = v51;
  uint64_t v80 = v53;
  char v81 = v27 & 1;
  uint64_t v82 = v56;
  uint64_t v83 = KeyPath;
  uint64_t v84 = 1;
  char v85 = 0;
  v86[0] = v58;
  v86[1] = (uint64_t)&v79;
  sub_100010924(v51, v53, v27 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  v78[0] = v59;
  v78[1] = sub_100006560(&qword_100199E18);
  uint64_t v76 = v68;
  unint64_t v77 = sub_100049FE0();
  sub_100050970(v86, 2uLL, (uint64_t)v78);
  sub_1000065A4(v51, v53, v27 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  char v61 = (uint64_t (*)(uint64_t, uint64_t))v71;
  ((void (*)(void *, uint64_t))v71)(v60, v59);
  sub_1000065A4(v79, v80, v81);
  swift_release();
  swift_bridgeObjectRelease();
  return v61(v58, v59);
}

uint64_t sub_1000DC544()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t sub_1000DC5C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeaturedVideosView();
  sub_1000D8CE4();
  id v3 = [self defaultCenter];
  if (qword_100198140 != -1) {
    swift_once();
  }
  [v3 postNotificationName:qword_1001AA420 object:0 userInfo:0];
  swift_release();

  uint64_t v4 = sub_1000D8CE4();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v5 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v7 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v7)
  {
    swift_retain();
    sub_1000AC4E4(v6, v5, 8, 13, 25, 0, 3u, v7);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000DF648((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DC75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v25 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = type metadata accessor for FeaturedVideosView();
  uint64_t v27 = a1;
  sub_1000B4AD4(v15, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v17 = v16(v14, 1, a2);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v26(v14, v6);
  if (v17 == 1)
  {
    uint64_t v23 = v4;
    sub_1000D8CE4();
    uint64_t v19 = sub_10008C2DC();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v28 = v19;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v16(v11, 1, a2) == 1)
    {
      return v26(v11, v6);
    }
    else
    {
      uint64_t v20 = v23;
      __n128 v21 = v25;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v11, a2);
      uint64_t v22 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v24, v21, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, a2);
      sub_1000DF10C(v22);
      v26((char *)v22, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, a2);
    }
  }
  return result;
}

void sub_1000DCAC8()
{
  type metadata accessor for FeaturedVideosViewModel();
  type metadata accessor for Bindable();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    if (v1 <= 0x3F)
    {
      type metadata accessor for State();
      if (v2 <= 0x3F)
      {
        sub_10001B760();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *sub_1000DCC3C(void *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v20 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for FeaturedVideosViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v43 = a2;
    uint64_t v44 = a1;
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *uint64_t v10 = *(void *)v11;
    v10[1] = v12;
    uint64_t v13 = type metadata accessor for Optional();
    uint64_t v14 = *(int *)(type metadata accessor for Binding() + 32);
    uint64_t v15 = (char *)v10 + v14;
    uint64_t v16 = &v11[v14];
    uint64_t v17 = *(void *)(v7 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_retain();
    swift_retain();
    if (v18(v16, 1, v7))
    {
      memcpy(v15, v16, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v16, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v7);
    }
    uint64_t v20 = v44;
    uint64_t v21 = *(int *)(a3 + 40);
    uint64_t v22 = (char *)v44 + v21;
    uint64_t v23 = &v43[v21];
    if (v18(&v43[v21], 1, v7))
    {
      memcpy(v22, v23, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, v23, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v7);
    }
    uint64_t v24 = type metadata accessor for State();
    *(void *)&v22[*(int *)(v24 + 28)] = *(void *)&v23[*(int *)(v24 + 28)];
    uint64_t v25 = *(int *)(a3 + 44);
    uint64_t v26 = *(int *)(a3 + 48);
    uint64_t v27 = (void *)((char *)v44 + v25);
    uint64_t v28 = (uint64_t *)&v43[v25];
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    *uint64_t v27 = v30;
    v27[1] = v29;
    uint64_t v31 = (void *)((char *)v44 + v26);
    uint64_t v32 = &v43[v26];
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v33 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = sub_100006560(&qword_100198948);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    else
    {
      *uint64_t v31 = *(void *)v32;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = *(int *)(a3 + 52);
    uint64_t v37 = (void *)((char *)v44 + v36);
    uint64_t v38 = &v43[v36];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = sub_100006560(&qword_100198948);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
    }
    else
    {
      void *v37 = *(void *)v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v20;
}

uint64_t sub_1000DD16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v8 = *(void *)(v4 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v4);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 40);
  if (!v9(v10, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v4);
  }
  type metadata accessor for State();
  swift_release();
  swift_release();
  uint64_t v11 = a1 + *(int *)(a2 + 48);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = a1 + *(int *)(a2 + 52);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v18 = *(void *)(v15 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v15);
    if (!result)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
      return v17(v14, v15);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000DD4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = (char *)v10 + v13;
  uint64_t v16 = *(void *)(v6 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  swift_retain();
  if (v17(v15, 1, v6))
  {
    memcpy(v14, v15, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v6);
  }
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = (char *)(v41 + v18);
  uint64_t v20 = (char *)(v40 + v18);
  if (v17((char *)(v40 + v18), 1, v6))
  {
    memcpy(v19, v20, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v6);
  }
  uint64_t v21 = type metadata accessor for State();
  *(void *)&v19[*(int *)(v21 + 28)] = *(void *)&v20[*(int *)(v21 + 28)];
  uint64_t v22 = *(int *)(a3 + 44);
  uint64_t v23 = *(int *)(a3 + 48);
  uint64_t v24 = (void *)(v41 + v22);
  uint64_t v25 = (uint64_t *)(v40 + v22);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  uint64_t v28 = (void *)(v41 + v23);
  uint64_t v29 = (void *)(v40 + v23);
  swift_retain();
  swift_retain();
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = sub_100006560(&qword_100198948);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
  }
  else
  {
    void *v28 = *v29;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = *(int *)(a3 + 52);
  uint64_t v34 = (void *)(v41 + v33);
  uint64_t v35 = (void *)(v40 + v33);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v36 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = sub_100006560(&qword_100198948);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
  }
  else
  {
    *uint64_t v34 = *v35;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v41;
}

uint64_t sub_1000DD9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v41 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  swift_retain();
  swift_release();
  v9[1] = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = (char *)(v10 + v12);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v13, 1, v6);
  int v18 = v16(v14, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v6);
LABEL_6:
    memcpy(v13, v14, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v13, v14, v6);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = (char *)(v41 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  int v22 = v16((char *)(v41 + v19), 1, v6);
  int v23 = v16(v21, 1, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v6);
LABEL_12:
    memcpy(v20, v21, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v20, v21, v6);
LABEL_13:
  uint64_t v24 = type metadata accessor for State();
  *(void *)&v20[*(int *)(v24 + 28)] = *(void *)&v21[*(int *)(v24 + 28)];
  swift_retain();
  swift_release();
  uint64_t v25 = *(int *)(a3 + 44);
  uint64_t v26 = v41 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(v41 + v25) = *(void *)(a2 + v25);
  swift_retain();
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  if (v41 != a2)
  {
    uint64_t v28 = *(int *)(a3 + 48);
    uint64_t v29 = (void *)(v41 + v28);
    uint64_t v30 = (void *)(a2 + v28);
    sub_1000067DC(v41 + v28, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = sub_100006560(&qword_100198948);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    else
    {
      *uint64_t v29 = *v30;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = *(int *)(a3 + 52);
    uint64_t v35 = (void *)(v41 + v34);
    uint64_t v36 = (void *)(a2 + v34);
    sub_1000067DC(v41 + v34, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v37 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
      {
        uint64_t v39 = sub_100006560(&qword_100198948);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v38 + 16))(v35, v36, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      }
    }
    else
    {
      *uint64_t v35 = *v36;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v41;
}

uint64_t sub_1000DDFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v14 = (char *)v9 + v13;
  uint64_t v15 = (const void *)(v10 + v13);
  uint64_t v16 = *(void *)(v6 - 8);
  int v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v15, 1, v6))
  {
    memcpy(v14, v15, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v16 + 32))(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v6);
  }
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  if (v17((const void *)(a2 + v18), 1, v6))
  {
    memcpy(v19, v20, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v6);
  }
  uint64_t v21 = type metadata accessor for State();
  *(void *)&v19[*(int *)(v21 + 28)] = *(void *)&v20[*(int *)(v21 + 28)];
  uint64_t v22 = *(int *)(a3 + 48);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  int v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
    {
      uint64_t v28 = sub_100006560(&qword_100198948);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v23, v24, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  uint64_t v29 = *(int *)(a3 + 52);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100006560(&qword_100198948);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v30, v31, *(void *)(*(void *)(v25 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000DE474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v43 = a1;
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  swift_release();
  v9[1] = *(void *)(v10 + 8);
  swift_release();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = (char *)(v10 + v12);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v13, 1, v6);
  int v18 = v16(v14, 1, v6);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v13, v14, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v6);
LABEL_6:
    memcpy(v13, v14, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v13, v14, v6);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = (char *)(v43 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  int v22 = v16((char *)(v43 + v19), 1, v6);
  int v23 = v16(v21, 1, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v21, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v6);
LABEL_12:
    memcpy(v20, v21, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v20, v21, v6);
LABEL_13:
  uint64_t v24 = type metadata accessor for State();
  *(void *)&v20[*(int *)(v24 + 28)] = *(void *)&v21[*(int *)(v24 + 28)];
  swift_release();
  uint64_t v25 = *(int *)(a3 + 44);
  uint64_t v26 = v43 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)(v43 + v25) = *(void *)(a2 + v25);
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  if (v43 != a2)
  {
    uint64_t v28 = *(int *)(a3 + 48);
    uint64_t v29 = (void *)(v43 + v28);
    uint64_t v30 = (const void *)(a2 + v28);
    sub_1000067DC(v43 + v28, &qword_100198940);
    uint64_t v31 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32))
      {
        uint64_t v34 = sub_100006560(&qword_100198948);
        memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v29, v30, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    uint64_t v35 = *(int *)(a3 + 52);
    uint64_t v36 = (void *)(v43 + v35);
    uint64_t v37 = (const void *)(a2 + v35);
    sub_1000067DC(v43 + v35, &qword_100198940);
    uint64_t v38 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        uint64_t v41 = sub_100006560(&qword_100198948);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v36, v37, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_1000DEA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DEA88);
}

uint64_t sub_1000DEA88(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for Binding();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[9];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for State();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_7;
  }
  if (a2 == 2147483646)
  {
    unint64_t v16 = *(void *)(a1 + a3[11]);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    int v17 = v16 - 1;
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  else
  {
    uint64_t v18 = sub_100006560(&qword_100198950);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a3[12];
    return v19(v21, a2, v20);
  }
}

uint64_t sub_1000DEC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DECA4);
}

uint64_t sub_1000DECA4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Binding();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[9];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t result = type metadata accessor for State();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[10];
    goto LABEL_7;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[11]) = a2;
  }
  else
  {
    uint64_t v17 = sub_100006560(&qword_100198950);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v19 = v17;
    uint64_t v20 = a1 + a4[12];
    return v18(v20, a2, a2, v19);
  }
  return result;
}

uint64_t sub_1000DEEB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DEEF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9470(*(void *)(v1 + 32), *(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000DEF14@<X0>(void *a1@<X8>)
{
  return sub_1000DA77C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000DEF24()
{
  return sub_1000DEF58((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000DC5C4);
}

uint64_t sub_1000DEF40()
{
  return sub_1000DEF58((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000DC75C);
}

uint64_t sub_1000DEF58(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for FeaturedVideosView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

unint64_t sub_1000DEFF0()
{
  unint64_t result = qword_10019DC30;
  if (!qword_10019DC30)
  {
    sub_10000650C(&qword_10019DC28);
    sub_1000DF06C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DC30);
  }
  return result;
}

unint64_t sub_1000DF06C()
{
  unint64_t result = qword_10019DC38;
  if (!qword_10019DC38)
  {
    sub_10000650C(&qword_10019DC40);
    sub_100049FE0();
    sub_100010484(&qword_10019C330, qword_10019C338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DC38);
  }
  return result;
}

uint64_t sub_1000DF10C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v7 - v4, a1, v2, v3);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000DF1F8@<X0>(void *a1@<X8>)
{
  return sub_1000DABFC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000DF208()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for FeaturedVideosView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  type metadata accessor for FeaturedVideosViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + v2[9];
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v7 = *(void *)(v1 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v6, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v1);
  }
  uint64_t v9 = v3 + v2[10];
  if (!v8(v9, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v1);
  }
  type metadata accessor for State();
  swift_release();
  swift_release();
  uint64_t v10 = v3 + v2[12];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v3 + v2[13];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000DF5A0@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for FeaturedVideosView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000DB034(a1, v8, v5, v6, a2);
}

uint64_t sub_1000DF63C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DBD60(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000DF648(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000DF690()
{
  return swift_getWitnessTable();
}

unint64_t sub_1000DFB6C(uint64_t a1)
{
  unint64_t result = sub_1000DFB94();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000DFB94()
{
  unint64_t result = qword_10019DC50;
  if (!qword_10019DC50)
  {
    type metadata accessor for Playlist();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DC50);
  }
  return result;
}

void *sub_1000DFBEC(void *a1, void *a2)
{
  uint64_t v4 = sub_100006560(&qword_10019DC58);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = v19;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v22 = v4;
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = (int *)type metadata accessor for EventRowViewModel();
    uint64_t v9 = v8[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = v8[7];
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    *(void *)((char *)a1 + *(int *)(v22 + 28)) = *(void *)((char *)a2 + *(int *)(v22 + 28));
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000DFD9C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for EventRowViewModel();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  if (*(void *)(v5 + 24)) {
    sub_100029A08(v5);
  }
  swift_release();
  sub_100006560(&qword_10019DC58);

  return swift_release();
}

void *sub_1000DFE64(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v6[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)((char *)a2 + v12 + 24);
  if (v15)
  {
    uint64_t v16 = *((void *)v14 + 4);
    *((void *)v13 + 3) = v15;
    *((void *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((void *)v13 + 4) = *((void *)v14 + 4);
  }
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_retain();
  uint64_t v18 = sub_100006560(&qword_10019DC58);
  *(void *)((char *)a1 + *(int *)(v18 + 28)) = *(void *)((char *)a2 + *(int *)(v18 + 28));
  swift_retain();
  return a1;
}

void *sub_1000DFFB4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = v4[7];
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 24);
  if (!*(void *)((char *)a1 + v9 + 24))
  {
    if (v12)
    {
      *(void *)(v10 + 24) = v12;
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      (**(void (***)(uint64_t, char *))(v12 - 8))(v10, v11);
      goto LABEL_8;
    }
LABEL_7:
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v10 + 32) = *((void *)v11 + 4);
    *(_OWORD *)uint64_t v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
    goto LABEL_8;
  }
  if (!v12)
  {
    sub_100029A08(v10);
    goto LABEL_7;
  }
  sub_1000A579C((uint64_t *)v10, (uint64_t *)v11);
LABEL_8:
  *((unsigned char *)a1 + v4[8]) = *((unsigned char *)a2 + v4[8]);
  *(void *)((char *)a1 + v4[9]) = *(void *)((char *)a2 + v4[9]);
  swift_retain();
  swift_release();
  uint64_t v15 = sub_100006560(&qword_10019DC58);
  *(void *)((char *)a1 + *(int *)(v15 + 28)) = *(void *)((char *)a2 + *(int *)(v15 + 28));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000E0158(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = v5[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((unsigned char *)a1 + v5[8]) = *((unsigned char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  uint64_t v14 = sub_100006560(&qword_10019DC58);
  *(void *)((char *)a1 + *(int *)(v14 + 28)) = *(void *)((char *)a2 + *(int *)(v14 + 28));
  return a1;
}

void *sub_1000E0238(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[7];
  uint64_t v12 = (char *)a1 + v11;
  if (*(void *)((char *)a1 + v11 + 24)) {
    sub_100029A08((uint64_t)a1 + v11);
  }
  long long v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((void *)v12 + 4) = *(void *)((char *)a2 + v11 + 32);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_release();
  uint64_t v14 = sub_100006560(&qword_10019DC58);
  *(void *)((char *)a1 + *(int *)(v14 + 28)) = *(void *)((char *)a2 + *(int *)(v14 + 28));
  swift_release();
  return a1;
}

uint64_t sub_1000E0350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E0364);
}

uint64_t sub_1000E0364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019DC58);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000E03D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E03E8);
}

uint64_t sub_1000E03E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019DC58);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for EventRow(uint64_t a1)
{
  return sub_10002DE00(a1, (uint64_t *)&unk_10019DCB8);
}

uint64_t sub_1000E047C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3FD0(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000E0494);
}

void sub_1000E0494()
{
  if (!qword_10019DCC8)
  {
    type metadata accessor for EventRowViewModel();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019DCC8);
    }
  }
}

uint64_t sub_1000E04EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E0508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v70 = type metadata accessor for TaskPriority();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for EventRow(0);
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v65 = *(void *)(v66 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v64 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EventRowViewModel();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v8 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019DCF8);
  __chkstk_darwin(v11 - 8);
  long long v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019DD00);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_10019DD08);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v60 = v17;
  uint64_t v61 = v18;
  __chkstk_darwin(v17);
  uint64_t v56 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006560(&qword_10019DD10);
  __chkstk_darwin(v63);
  uint64_t v58 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v62 = (char *)&v56 - v22;
  *(void *)long long v13 = static VerticalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4026000000000000;
  v13[16] = 0;
  uint64_t v23 = (uint64_t)&v13[*(int *)(sub_100006560(&qword_10019DD18) + 44)];
  uint64_t v57 = v1;
  sub_1000E0C20(v23);
  char v24 = static Edge.Set.top.getter();
  sub_1000066D4((uint64_t)v13, (uint64_t)v16, &qword_10019DCF8);
  uint64_t v25 = &v16[*(int *)(v14 + 36)];
  *uint64_t v25 = v24;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  v25[40] = 1;
  sub_1000067DC((uint64_t)v13, &qword_10019DCF8);
  static AccessibilityChildBehavior.ignore.getter();
  uint64_t v26 = sub_10003E90C(&qword_10019DD20, &qword_10019DD00, &qword_10019DD28, &qword_10019DCF8);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v59);
  sub_1000067DC((uint64_t)v16, &qword_10019DD00);
  uint64_t v59 = sub_100006560(&qword_10019DC58);
  State.wrappedValue.getter();
  uint64_t v27 = sub_1000A997C();
  uint64_t v29 = v28;
  sub_1000E1EFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v71 = v27;
  uint64_t v72 = v29;
  sub_10002374C();
  uint64_t v30 = Text.init<A>(_:)();
  uint64_t v32 = v31;
  LOBYTE(v10) = v33 & 1;
  uint64_t v71 = v14;
  uint64_t v72 = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v34 = (uint64_t)v58;
  uint64_t v35 = v60;
  uint64_t v36 = v56;
  View.accessibility(label:)();
  sub_1000065A4(v30, v32, (char)v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v35);
  sub_100006560(&qword_10019C230);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_10014D4D0;
  uint64_t v38 = v57;
  State.wrappedValue.getter();
  uint64_t v40 = *((void *)v7 + 2);
  uint64_t v39 = *((void *)v7 + 3);
  swift_bridgeObjectRetain();
  sub_1000E1EFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v71 = v40;
  uint64_t v72 = v39;
  *(void *)(v37 + 32) = Text.init<A>(_:)();
  *(void *)(v37 + 40) = v41;
  *(unsigned char *)(v37 + 48) = v42 & 1;
  *(void *)(v37 + 56) = v43;
  uint64_t v44 = (uint64_t)v62;
  ModifiedContent<>.accessibility(inputLabels:)();
  swift_bridgeObjectRelease();
  sub_1000067DC(v34, &qword_10019DD10);
  uint64_t v45 = v64;
  sub_1000E1E94(v38, v64, type metadata accessor for EventRow);
  unint64_t v46 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  uint64_t v47 = swift_allocObject();
  sub_1000E1D44(v45, v47 + v46);
  uint64_t v48 = v67;
  static TaskPriority.userInitiated.getter();
  uint64_t v49 = sub_100006560(&qword_10019DD40);
  uint64_t v50 = v69;
  uint64_t v51 = (char *)(v69 + *(int *)(v49 + 36));
  uint64_t v52 = type metadata accessor for _TaskModifier();
  uint64_t v53 = v68;
  uint64_t v54 = v70;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v51[*(int *)(v52 + 20)], v48, v70);
  *(void *)uint64_t v51 = &unk_10019DD38;
  *((void *)v51 + 1) = v47;
  sub_1000066D4(v44, v50, &qword_10019DD10);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v54);
  return sub_1000067DC(v44, &qword_10019DD10);
}

uint64_t sub_1000E0C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v1 = type metadata accessor for Divider();
  uint64_t v53 = *(void *)(v1 - 8);
  uint64_t v54 = v1;
  __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v58 = (char *)&v49 - v4;
  uint64_t v5 = sub_100006560(&qword_10019DD48);
  __chkstk_darwin(v5 - 8);
  uint64_t v55 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v57 = (uint64_t *)((char *)&v49 - v8);
  uint64_t v9 = type metadata accessor for EventRowImage(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019DD50);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019DD58);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v49 - v21;
  uint64_t v51 = (uint64_t)&v49 - v21;
  sub_100006560(&qword_10019DC58);
  State.wrappedValue.getter();
  sub_1000E1E94((uint64_t)v11, (uint64_t)v15, type metadata accessor for EventRowImage);
  v15[*(int *)(v13 + 44)] = 1;
  sub_1000E1EFC((uint64_t)v11, type metadata accessor for EventRowImage);
  LOBYTE(v13) = static Edge.Set.bottom.getter();
  sub_1000066D4((uint64_t)v15, (uint64_t)v19, &qword_10019DD50);
  uint64_t v23 = &v19[*(int *)(v17 + 44)];
  uint64_t v50 = v19;
  *uint64_t v23 = v13;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  v23[40] = 1;
  sub_1000067DC((uint64_t)v15, &qword_10019DD50);
  sub_10001D6D8((uint64_t)v19, (uint64_t)v22, &qword_10019DD58);
  uint64_t v24 = static HorizontalAlignment.leading.getter();
  uint64_t v25 = v57;
  *uint64_t v57 = v24;
  v25[1] = 0x4030000000000000;
  *((unsigned char *)v25 + 16) = 0;
  uint64_t v26 = (char *)v25 + *(int *)(sub_100006560(&qword_10019DD60) + 44);
  uint64_t v27 = static HorizontalAlignment.leading.getter();
  sub_1000E121C((uint64_t)v70);
  *(_OWORD *)((char *)&v72[4] + 7) = v70[4];
  *(_OWORD *)((char *)&v72[3] + 7) = v70[3];
  *(_OWORD *)((char *)&v72[7] + 7) = v70[7];
  *(_OWORD *)((char *)&v72[8] + 7) = v70[8];
  *(_OWORD *)((char *)&v72[9] + 7) = v71[0];
  v72[10] = *(_OWORD *)((char *)v71 + 9);
  *(_OWORD *)((char *)&v72[5] + 7) = v70[5];
  *(_OWORD *)((char *)&v72[6] + 7) = v70[6];
  *(_OWORD *)((char *)v72 + 7) = v70[0];
  char v73 = 0;
  *(_OWORD *)((char *)&v72[1] + 7) = v70[1];
  *(_OWORD *)((char *)&v72[2] + 7) = v70[2];
  long long v67 = v72[8];
  long long v68 = v72[9];
  long long v69 = *(_OWORD *)((char *)v71 + 9);
  long long v63 = v72[4];
  long long v64 = v72[5];
  long long v65 = v72[6];
  long long v66 = v72[7];
  long long v59 = v72[0];
  long long v60 = v72[1];
  long long v61 = v72[2];
  long long v62 = v72[3];
  uint64_t v28 = v58;
  Divider.init()();
  uint64_t v30 = v52;
  uint64_t v29 = v53;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  uint64_t v32 = v28;
  uint64_t v33 = v54;
  v31(v52, v32, v54);
  *(_OWORD *)&v75[113] = v66;
  *(_OWORD *)&v75[129] = v67;
  *(_OWORD *)&v75[145] = v68;
  *(_OWORD *)&v75[161] = v69;
  *(_OWORD *)&v75[49] = v62;
  *(_OWORD *)&v75[65] = v63;
  *(_OWORD *)&v75[81] = v64;
  *(_OWORD *)&v75[97] = v65;
  *(_OWORD *)&v75[1] = v59;
  *(void *)&long long v74 = v27;
  *((void *)&v74 + 1) = 0x4014000000000000;
  v75[0] = 0;
  *(_OWORD *)&v75[17] = v60;
  *(_OWORD *)&v75[33] = v61;
  long long v34 = *(_OWORD *)&v75[160];
  *((_OWORD *)v26 + 10) = *(_OWORD *)&v75[144];
  *((_OWORD *)v26 + 11) = v34;
  v26[192] = v75[176];
  long long v35 = *(_OWORD *)&v75[96];
  *((_OWORD *)v26 + 6) = *(_OWORD *)&v75[80];
  *((_OWORD *)v26 + 7) = v35;
  long long v36 = *(_OWORD *)&v75[128];
  *((_OWORD *)v26 + 8) = *(_OWORD *)&v75[112];
  *((_OWORD *)v26 + 9) = v36;
  long long v37 = *(_OWORD *)&v75[32];
  *((_OWORD *)v26 + 2) = *(_OWORD *)&v75[16];
  *((_OWORD *)v26 + 3) = v37;
  long long v38 = *(_OWORD *)&v75[64];
  *((_OWORD *)v26 + 4) = *(_OWORD *)&v75[48];
  *((_OWORD *)v26 + 5) = v38;
  long long v39 = *(_OWORD *)v75;
  *(_OWORD *)uint64_t v26 = v74;
  *((_OWORD *)v26 + 1) = v39;
  uint64_t v40 = sub_100006560(&qword_10019DD68);
  v31(&v26[*(int *)(v40 + 48)], v30, v33);
  sub_1000E1F5C((uint64_t)&v74);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v29 + 8);
  v41(v58, v33);
  v41(v30, v33);
  long long v85 = v66;
  long long v86 = v67;
  long long v87 = v68;
  long long v88 = v69;
  long long v81 = v62;
  long long v82 = v63;
  long long v83 = v64;
  long long v84 = v65;
  long long v78 = v59;
  long long v79 = v60;
  v76[0] = v27;
  v76[1] = 0x4014000000000000;
  char v77 = 0;
  long long v80 = v61;
  sub_1000E2084((uint64_t)v76);
  uint64_t v43 = (uint64_t)v50;
  uint64_t v42 = v51;
  sub_1000066D4(v51, (uint64_t)v50, &qword_10019DD58);
  uint64_t v44 = v57;
  uint64_t v45 = v55;
  sub_1000066D4((uint64_t)v57, v55, &qword_10019DD48);
  uint64_t v46 = v56;
  sub_1000066D4(v43, v56, &qword_10019DD58);
  uint64_t v47 = sub_100006560(&qword_10019DD70);
  sub_1000066D4(v45, v46 + *(int *)(v47 + 48), &qword_10019DD48);
  sub_1000067DC((uint64_t)v44, &qword_10019DD48);
  sub_1000067DC(v42, &qword_10019DD58);
  sub_1000067DC(v45, &qword_10019DD48);
  return sub_1000067DC(v43, &qword_10019DD58);
}

uint64_t sub_1000E121C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v2 - 8);
  uint64_t v77 = (uint64_t)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for EventRowViewModel() - 8;
  __chkstk_darwin(v76);
  uint64_t v75 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v74 - v6);
  uint64_t v79 = sub_100006560(&qword_10019DC58);
  State.wrappedValue.getter();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  swift_bridgeObjectRetain();
  sub_1000E1EFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v87 = v8;
  uint64_t v88 = v9;
  sub_10002374C();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.subheadline.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v82 = v16;
  uint64_t v83 = v15;
  int v78 = v17;
  uint64_t v84 = v18;
  swift_release();
  sub_1000065A4(v10, v12, v14);
  swift_bridgeObjectRelease();
  State.wrappedValue.getter();
  uint64_t v20 = v7[2];
  uint64_t v19 = v7[3];
  swift_bridgeObjectRetain();
  sub_1000E1EFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v87 = v20;
  uint64_t v88 = v19;
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  LOBYTE(v12) = v24 & 1;
  static Font.Weight.medium.getter();
  uint64_t v25 = Text.fontWeight(_:)();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_1000065A4(v21, v23, v12);
  uint64_t v30 = (uint64_t)v75;
  swift_bridgeObjectRelease();
  static Font.body.getter();
  uint64_t v81 = Text.font(_:)();
  uint64_t v85 = v31;
  uint64_t v86 = v32;
  char v34 = v33;
  swift_release();
  sub_1000065A4(v25, v27, v29);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  State.wrappedValue.getter();
  uint64_t v35 = *(void *)(v30 + *(int *)(v76 + 44));
  if (!v35)
  {
    uint64_t v61 = type metadata accessor for ArtistPromotionalAssets();
    uint64_t v38 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v77, 1, 1, v61);
    goto LABEL_5;
  }
  swift_getKeyPath();
  uint64_t v87 = v35;
  sub_1000E4218((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v36 = v35 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v37 = v36;
  uint64_t v38 = v77;
  sub_1000066D4(v37, v77, &qword_10019A540);
  uint64_t v39 = type metadata accessor for ArtistPromotionalAssets();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
LABEL_5:
    sub_1000067DC(v38, &qword_10019A540);
    sub_1000E1EFC(v30, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
    uint64_t v50 = 0;
    uint64_t v49 = 0;
    uint64_t v59 = 0;
    uint64_t v48 = 0;
    uint64_t v60 = 0;
    uint64_t v52 = 0;
    uint64_t v54 = 0;
    uint64_t v56 = 0;
    uint64_t v58 = 0;
    goto LABEL_6;
  }
  sub_1000067DC(v38, &qword_10019A540);
  sub_1000E1EFC(v30, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v40 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v42 = v41;
  char v44 = v43;
  uint64_t v46 = v45;
  unsigned __int8 v47 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v48 = v46;
  uint64_t v49 = v42;
  uint64_t v50 = v40;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v59 = v44 & 1;
  uint64_t v60 = v47;
LABEL_6:
  uint64_t v76 = v52;
  uint64_t v77 = v54;
  uint64_t v79 = v56;
  char v62 = v78 & 1;
  char v89 = v78 & 1;
  char v63 = v34 & 1;
  char v92 = v78 & 1;
  char v91 = v34 & 1;
  char v90 = 0;
  uint64_t v64 = v83;
  uint64_t v65 = v84;
  *(void *)a1 = v83;
  uint64_t v66 = v64;
  uint64_t v68 = v81;
  uint64_t v67 = v82;
  *(void *)(a1 + 8) = v82;
  uint64_t v69 = v67;
  *(unsigned char *)(a1 + 16) = v62;
  *(void *)(a1 + 24) = v65;
  *(void *)(a1 + 32) = 0x3FE3333333333333;
  uint64_t v70 = v85;
  *(void *)(a1 + 40) = v68;
  *(void *)(a1 + 48) = v70;
  *(unsigned char *)(a1 + 56) = v63;
  uint64_t v71 = KeyPath;
  *(void *)(a1 + 64) = v86;
  *(void *)(a1 + 72) = v71;
  *(void *)(a1 + 80) = 1;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v50;
  *(void *)(a1 + 104) = v49;
  *(void *)(a1 + 112) = v59;
  *(void *)(a1 + 120) = v48;
  *(void *)(a1 + 128) = v60;
  *(void *)(a1 + 136) = v52;
  *(void *)(a1 + 144) = v54;
  *(void *)(a1 + 152) = v56;
  *(void *)(a1 + 160) = v58;
  *(unsigned char *)(a1 + 168) = 0;
  uint64_t v72 = v50;
  sub_100010924(v66, v69, v62);
  swift_bridgeObjectRetain();
  sub_100010924(v68, v85, v63);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000E2040(v72, v49);
  sub_10000C1BC(v72, v49);
  sub_1000065A4(v81, v85, v63);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v83, v82, v89);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E1860(uint64_t a1)
{
  v1[2] = a1;
  v1[3] = type metadata accessor for EventRowViewModel();
  v1[4] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return _swift_task_switch(sub_1000E1928, v3, v2);
}

uint64_t sub_1000E1928()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  sub_100006560(&qword_10019DC58);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 36));
  v0[8] = v3;
  swift_retain();
  sub_1000E1EFC(v1, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  if (v3)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000E1A50;
    return sub_100124684();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1000E1A50()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000E1B94, v3, v2);
}

uint64_t sub_1000E1B94()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E1C00()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventRow(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for EventRowViewModel();
  uint64_t v4 = v2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v2 + *(int *)(v3 + 28);
  if (*(void *)(v6 + 24)) {
    sub_100029A08(v6);
  }
  swift_release();
  sub_100006560(&qword_10019DC58);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000E1D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E1DA8()
{
  uint64_t v2 = *(void *)(type metadata accessor for EventRow(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100010CB0;
  return sub_1000E1860(v3);
}

uint64_t type metadata accessor for EventRowImage(uint64_t a1)
{
  return sub_10002DE00(a1, qword_10019DDD0);
}

uint64_t sub_1000E1E94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E1EFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000E1F5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  char v4 = *(unsigned char *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 120);
  sub_100010924(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000E2040(v7, v6);
  return a1;
}

uint64_t sub_1000E2040(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000E2084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  char v4 = *(unsigned char *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 120);
  sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1000065A4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000C1BC(v7, v6);
  return a1;
}

uint64_t sub_1000E2168@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  char v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Calendar.Component();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100006560(&qword_10019DE40);
  __chkstk_darwin(v38);
  uint64_t v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100006560(&qword_10019DE48);
  uint64_t v13 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100006560(&qword_10019DE50);
  __chkstk_darwin(v37);
  int v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v32 - v19;
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for EventRowViewModel() + 32)) == 1)
  {
    sub_1000A97F8((uint64_t)v12);
    static Animation.easeInOut.getter();
    Transaction.init(animation:)();
    sub_100006560(&qword_10019DE70);
    sub_1000E438C();
    AsyncImage.init(url:scale:transaction:content:)();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v21 = v33;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v15, v33);
    uint64_t v22 = &v17[*(int *)(v37 + 36)];
    long long v23 = v41;
    *(_OWORD *)uint64_t v22 = v40;
    *((_OWORD *)v22 + 1) = v23;
    *((_OWORD *)v22 + 2) = v42;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
    sub_10001D6D8((uint64_t)v17, (uint64_t)v20, &qword_10019DE50);
    sub_1000066D4((uint64_t)v20, (uint64_t)v9, &qword_10019DE50);
    swift_storeEnumTagMultiPayload();
    sub_1000E4298();
    sub_1000E4338();
    _ConditionalContent<>.init(storage:)();
    return sub_1000067DC((uint64_t)v20, &qword_10019DE50);
  }
  else
  {
    uint64_t v25 = sub_100019AA8();
    uint64_t v27 = v26;
    uint64_t v28 = v34;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.day(_:), v34);
    static Calendar.current.getter();
    uint64_t v29 = Calendar.component(_:from:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v28);
    *(void *)&long long v40 = v29;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *uint64_t v9 = v25;
    v9[1] = v27;
    v9[2] = v30;
    v9[3] = v31;
    swift_storeEnumTagMultiPayload();
    sub_1000E4298();
    sub_1000E4338();
    return _ConditionalContent<>.init(storage:)();
  }
}

double sub_1000E2670@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncImagePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v14 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    static Color.black.getter();
    uint64_t v15 = Color.opacity(_:)();
    swift_release();
    *(void *)&long long v35 = v14;
    *((void *)&v35 + 1) = v15;
    long long v36 = xmmword_10014CCA0;
    *(void *)&long long v37 = 0x4010000000000000;
    sub_1000E4570((uint64_t)&v35);
    sub_10001D6D8((uint64_t)&v35, (uint64_t)&v60, &qword_10019DEA8);
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100199448);
    sub_100006560(&qword_10019DE98);
    sub_1000E44D4(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_100010484(&qword_10019DE90, &qword_10019DE98);
    _ConditionalContent<>.init(storage:)();
    long long v46 = v32;
    long long v47 = v33;
    v48[0] = v34[0];
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v34 + 9);
    long long v42 = v28;
    long long v43 = v29;
    long long v44 = v30;
    long long v45 = v31;
    *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v34 + 9);
    long long v58 = v33;
    v59[0] = v34[0];
    long long v56 = v31;
    long long v57 = v32;
    long long v54 = v29;
    long long v55 = v30;
    long long v53 = v28;
    sub_1000E4568((uint64_t)&v53);
    sub_10001D6D8((uint64_t)&v53, (uint64_t)&v60, &qword_10019DEA0);
    sub_1000E45F8((uint64_t)&v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000E4578);
    sub_100006560(&qword_10019DE88);
    sub_1000E4408();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000E45F8((uint64_t)&v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000E4664);
    swift_release();
    swift_release();
    long long v64 = v50;
    *(_OWORD *)uint64_t v65 = v51;
    *(_OWORD *)&v65[16] = v52[0];
    long long v16 = *(_OWORD *)((char *)v52 + 10);
  }
  else
  {
    if (v13 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      swift_errorRelease();
    }
    else if (v13 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000E4550((uint64_t)v49);
      sub_10001D6D8((uint64_t)v49, (uint64_t)&v60, &qword_10019DEA0);
      sub_100006560(&qword_10019DE88);
      sub_1000E4408();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      long long v64 = v57;
      *(_OWORD *)uint64_t v65 = v58;
      *(_OWORD *)&v65[16] = v59[0];
      *(_OWORD *)&v65[26] = *(_OWORD *)((char *)v59 + 10);
      long long v60 = v53;
      long long v61 = v54;
      long long v20 = v55;
      long long v21 = v56;
      goto LABEL_8;
    }
    uint64_t v17 = static Alignment.center.getter();
    uint64_t v19 = v18;
    sub_1000E2DD0((uint64_t)&v60);
    long long v26 = v63;
    *(void *)&long long v42 = v17;
    *((void *)&v42 + 1) = v19;
    long long v43 = v60;
    uint64_t v27 = v60;
    long long v44 = v61;
    LOWORD(v45) = v62;
    *((void *)&v45 + 1) = *((void *)&v62 + 1);
    long long v46 = v63;
    LOBYTE(v47) = v64;
    *((void *)&v47 + 1) = *((void *)&v64 + 1);
    LOBYTE(v48[0]) = v65[0];
    *(_OWORD *)((char *)v48 + 8) = *(_OWORD *)&v65[8];
    sub_1000E455C((uint64_t)&v42);
    sub_10001D6D8((uint64_t)&v42, (uint64_t)&v60, &qword_10019DEA8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100199448);
    sub_100006560(&qword_10019DE98);
    sub_1000E44D4(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_100010484(&qword_10019DE90, &qword_10019DE98);
    _ConditionalContent<>.init(storage:)();
    long long v57 = v39;
    long long v58 = v40;
    v59[0] = v41[0];
    *(_OWORD *)((char *)v59 + 9) = *(_OWORD *)((char *)v41 + 9);
    long long v53 = v35;
    long long v54 = v36;
    long long v55 = v37;
    long long v56 = v38;
    sub_1000E4568((uint64_t)&v53);
    sub_10001D6D8((uint64_t)&v53, (uint64_t)&v60, &qword_10019DEA0);
    sub_100006560(&qword_10019DE88);
    sub_1000E4408();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    long long v64 = v50;
    *(_OWORD *)uint64_t v65 = v51;
    *(_OWORD *)&v65[16] = v52[0];
    long long v16 = *(_OWORD *)((char *)v52 + 10);
  }
  *(_OWORD *)&v65[26] = v16;
  long long v60 = v49[0];
  long long v61 = v49[1];
  long long v20 = v49[2];
  long long v21 = v49[3];
LABEL_8:
  long long v62 = v20;
  long long v63 = v21;
  long long v22 = *(_OWORD *)v65;
  a2[4] = v64;
  a2[5] = v22;
  a2[6] = *(_OWORD *)&v65[16];
  *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)&v65[26];
  long long v23 = v61;
  *a2 = v60;
  a2[1] = v23;
  double result = *(double *)&v62;
  long long v25 = v63;
  a2[2] = v62;
  a2[3] = v25;
  return result;
}

uint64_t sub_1000E2DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001980A8 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_1001AA350;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v8 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = static Color.white.getter();
  uint64_t v10 = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v11 = v16;
  char v12 = v17;
  uint64_t v13 = v18;
  char v14 = v19;
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 88) = v20;
  swift_retain();
  return swift_release();
}

uint64_t sub_1000E2FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v71 = a2;
  uint64_t v75 = a3;
  uint64_t v74 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v74);
  char v73 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019D428);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019DE18);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019DE20);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_10019DE28);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_10019DE30);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v72 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4010000000000000;
  v6[16] = 0;
  uint64_t v22 = sub_100006560(&qword_10019D440);
  sub_1000E34BC((uint64_t)&v6[*(int *)(v22 + 44)]);
  char v23 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_1000066D4((uint64_t)v6, (uint64_t)v10, &qword_10019D428);
  long long v32 = &v10[*(int *)(v8 + 44)];
  *long long v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_1000067DC((uint64_t)v6, &qword_10019D428);
  char v33 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_1000066D4((uint64_t)v10, (uint64_t)v14, &qword_10019DE18);
  long long v42 = &v14[*(int *)(v12 + 44)];
  *long long v42 = v33;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  sub_1000067DC((uint64_t)v10, &qword_10019DE18);
  LOBYTE(v12) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  sub_1000066D4((uint64_t)v14, (uint64_t)v18, &qword_10019DE20);
  long long v51 = &v18[*(int *)(v16 + 44)];
  *long long v51 = v12;
  *((void *)v51 + 1) = v44;
  *((void *)v51 + 2) = v46;
  *((void *)v51 + 3) = v48;
  *((void *)v51 + 4) = v50;
  v51[40] = 0;
  sub_1000067DC((uint64_t)v14, &qword_10019DE20);
  id v52 = [self secondarySystemBackgroundColor:v70, v71];
  uint64_t v53 = Color.init(_:)();
  char v54 = static Edge.Set.all.getter();
  uint64_t v55 = v72;
  sub_1000066D4((uint64_t)v18, v72, &qword_10019DE28);
  uint64_t v56 = v55 + *(int *)(v20 + 44);
  *(void *)uint64_t v56 = v53;
  *(unsigned char *)(v56 + 8) = v54;
  sub_1000067DC((uint64_t)v18, &qword_10019DE28);
  long long v57 = v73;
  long long v58 = &v73[*(int *)(v74 + 28)];
  uint64_t v59 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v60 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 104))(v58, v59, v60);
  __asm { FMOV            V0.2D, #6.0 }
  *long long v57 = _Q0;
  uint64_t v66 = sub_100006560(&qword_10019DE38);
  uint64_t v67 = v75;
  uint64_t v68 = v75 + *(int *)(v66 + 36);
  sub_1000E1E94((uint64_t)v57, v68, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v68 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4(v55, v67, &qword_10019DE30);
  sub_1000E1EFC((uint64_t)v57, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_1000067DC(v55, &qword_10019DE30);
}

uint64_t sub_1000E34BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v1 = sub_100006560(&qword_10019D458);
  __chkstk_darwin(v1 - 8);
  uint64_t v29 = (uint64_t)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - v4;
  uint64_t v6 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v31 = v6;
  uint64_t v32 = v37;
  char v33 = v38;
  uint64_t v34 = v39;
  char v35 = v40;
  long long v36 = v41;
  sub_100006560(&qword_10019D460);
  sub_1000C4388();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  swift_release();
  sub_1000065A4(v7, v9, v11);
  swift_bridgeObjectRelease();
  uint64_t v31 = static Color.blue.getter();
  uint64_t v17 = Text.foregroundStyle<A>(_:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  sub_1000065A4(v12, v14, v16 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v24 = v29;
  sub_1000066D4((uint64_t)v5, v29, &qword_10019D458);
  uint64_t v25 = v30;
  sub_1000066D4(v24, v30, &qword_10019D458);
  uint64_t v26 = v25 + *(int *)(sub_100006560(&qword_10019D470) + 48);
  *(void *)uint64_t v26 = v17;
  *(void *)(v26 + 8) = v19;
  *(unsigned char *)(v26 + 16) = v23;
  *(void *)(v26 + 24) = v21;
  sub_100010924(v17, v19, v23);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v5, &qword_10019D458);
  sub_1000065A4(v17, v19, v23);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v24, &qword_10019D458);
}

uint64_t sub_1000E37E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E2FF4(*v1, v1[1], a1);
}

ValueMetadata *type metadata accessor for PromotionalAssetsTagView()
{
  return &type metadata for PromotionalAssetsTagView;
}

void *sub_1000E3814(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(v4 + 24);
    char v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = v6[7];
    char v15 = (char *)a1 + v14;
    char v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)char v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000E3994(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for EventRowViewModel();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  if (*(void *)(v5 + 24)) {
    sub_100029A08(v5);
  }

  return swift_release();
}

void *sub_1000E3A44(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  char v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v6[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)((char *)a2 + v12 + 24);
  if (v15)
  {
    uint64_t v16 = *((void *)v14 + 4);
    *((void *)v13 + 3) = v15;
    *((void *)v13 + 4) = v16;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    long long v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
    *((void *)v13 + 4) = *((void *)v14 + 4);
  }
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_retain();
  return a1;
}

void *sub_1000E3B78(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v5 = v4[6];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = v4[7];
  uint64_t v10 = (uint64_t)a1 + v9;
  char v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)((char *)a2 + v9 + 24);
  if (!*(void *)((char *)a1 + v9 + 24))
  {
    if (v12)
    {
      *(void *)(v10 + 24) = v12;
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      (**(void (***)(uint64_t, char *))(v12 - 8))(v10, v11);
      goto LABEL_8;
    }
LABEL_7:
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v10 + 32) = *((void *)v11 + 4);
    *(_OWORD *)uint64_t v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
    goto LABEL_8;
  }
  if (!v12)
  {
    sub_100029A08(v10);
    goto LABEL_7;
  }
  sub_1000A579C((uint64_t *)v10, (uint64_t *)v11);
LABEL_8:
  *((unsigned char *)a1 + v4[8]) = *((unsigned char *)a2 + v4[8]);
  *(void *)((char *)a1 + v4[9]) = *(void *)((char *)a2 + v4[9]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000E3CF4(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = v5[7];
  char v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)char v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((unsigned char *)a1 + v5[8]) = *((unsigned char *)a2 + v5[8]);
  *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
  return a1;
}

void *sub_1000E3DBC(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for EventRowViewModel();
  uint64_t v7 = v6[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[7];
  uint64_t v12 = (char *)a1 + v11;
  if (*(void *)((char *)a1 + v11 + 24)) {
    sub_100029A08((uint64_t)a1 + v11);
  }
  long long v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((void *)v12 + 4) = *(void *)((char *)a2 + v11 + 32);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
  swift_release();
  return a1;
}

uint64_t sub_1000E3EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E3EC8);
}

uint64_t sub_1000E3EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000E3F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E3F48);
}

uint64_t sub_1000E3F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRowViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000E3FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E3FD0(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for EventRowViewModel);
}

uint64_t sub_1000E3FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000E4064()
{
  unint64_t result = qword_10019DE08;
  if (!qword_10019DE08)
  {
    sub_10000650C(&qword_10019DD40);
    sub_1000E4110();
    sub_1000E4218(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE08);
  }
  return result;
}

unint64_t sub_1000E4110()
{
  unint64_t result = qword_10019DE10;
  if (!qword_10019DE10)
  {
    sub_10000650C(&qword_10019DD10);
    sub_10000650C(&qword_10019DD00);
    sub_10003E90C(&qword_10019DD20, &qword_10019DD00, &qword_10019DD28, &qword_10019DCF8);
    swift_getOpaqueTypeConformance2();
    sub_1000E4218((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE10);
  }
  return result;
}

uint64_t sub_1000E4218(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E4260()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E427C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000E4298()
{
  unint64_t result = qword_10019DE58;
  if (!qword_10019DE58)
  {
    sub_10000650C(&qword_10019DE50);
    sub_100010484(&qword_10019DE60, &qword_10019DE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE58);
  }
  return result;
}

unint64_t sub_1000E4338()
{
  unint64_t result = qword_10019DE68;
  if (!qword_10019DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE68);
  }
  return result;
}

unint64_t sub_1000E438C()
{
  unint64_t result = qword_10019DE78;
  if (!qword_10019DE78)
  {
    sub_10000650C(&qword_10019DE70);
    sub_1000E4408();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE78);
  }
  return result;
}

unint64_t sub_1000E4408()
{
  unint64_t result = qword_10019DE80;
  if (!qword_10019DE80)
  {
    sub_10000650C(&qword_10019DE88);
    sub_1000E44D4(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_100010484(&qword_10019DE90, &qword_10019DE98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DE80);
  }
  return result;
}

uint64_t sub_1000E44D4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E4550(uint64_t result)
{
  *(unsigned char *)(result + 121) = 1;
  return result;
}

uint64_t sub_1000E455C(uint64_t result)
{
  *(unsigned char *)(result + 120) = 1;
  return result;
}

uint64_t sub_1000E4568(uint64_t result)
{
  *(unsigned char *)(result + 121) = 0;
  return result;
}

uint64_t sub_1000E4570(uint64_t result)
{
  *(unsigned char *)(result + 120) = 0;
  return result;
}

uint64_t sub_1000E4578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();

  return swift_retain();
}

uint64_t sub_1000E45F8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_1000E4664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();

  return swift_release();
}

unint64_t sub_1000E46E4()
{
  unint64_t result = qword_10019DEB0;
  if (!qword_10019DEB0)
  {
    sub_10000650C(&qword_10019DE38);
    sub_1000E4784();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DEB0);
  }
  return result;
}

unint64_t sub_1000E4784()
{
  unint64_t result = qword_10019DEB8;
  if (!qword_10019DEB8)
  {
    sub_10000650C(&qword_10019DE30);
    sub_1000E44D4(&qword_10019DEC0, &qword_10019DE28, (void (*)(void))sub_1000E4850);
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DEB8);
  }
  return result;
}

unint64_t sub_1000E4850()
{
  unint64_t result = qword_10019DEC8;
  if (!qword_10019DEC8)
  {
    sub_10000650C(&qword_10019DE20);
    sub_10003E90C(&qword_10019DED0, &qword_10019DE18, &qword_10019DED8, &qword_10019D428);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DEC8);
  }
  return result;
}

unint64_t sub_1000E48F0()
{
  unint64_t result = qword_10019DEE0;
  if (!qword_10019DEE0)
  {
    sub_10000650C(&qword_10019DEE8);
    sub_1000E4298();
    sub_1000E4338();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DEE0);
  }
  return result;
}

uint64_t sub_1000E496C()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000E4990(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v2 - 8);
  sub_1000066D4(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100198948);
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_1000E4A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019DF10);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E4B50((uint64_t)v6);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  sub_1000E5234();
  swift_retain();
  View.onContinueUserActivity(_:perform:)();
  swift_release();
  return sub_1000067DC((uint64_t)v6, &qword_10019DF10);
}

uint64_t sub_1000E4B50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v1 = type metadata accessor for EventRootView();
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t *)((char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v22 = sub_100006560(&qword_10019DF38);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = sub_100006560(&qword_10019DF60);
  __chkstk_darwin(v12);
  long long v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v15 = v24;
  if (v24)
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000E5420((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v3 = EnvironmentObject.init()();
    v3[1] = v16;
    long long v17 = (uint64_t *)((char *)v3 + *(int *)(v1 + 20));
    *long long v17 = swift_getKeyPath();
    sub_100006560(&qword_100198940);
    swift_storeEnumTagMultiPayload();
    sub_1000E5490((uint64_t)v3, (uint64_t)v6);
    uint64_t v18 = static ObservableObject.environmentStore.getter();
    sub_1000E54F4((uint64_t)v6, (uint64_t)v8);
    uint64_t v19 = (uint64_t *)&v8[*(int *)(v22 + 36)];
    *uint64_t v19 = v18;
    v19[1] = v15;
    swift_retain();
    sub_1000E5558((uint64_t)v6);
    sub_1000E55B4((uint64_t)v8, (uint64_t)v11);
    sub_1000066D4((uint64_t)v11, (uint64_t)v14, &qword_10019DF38);
    swift_storeEnumTagMultiPayload();
    sub_1000E5324();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    return sub_1000067DC((uint64_t)v11, &qword_10019DF38);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    sub_1000E5324();
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_1000E4E90()
{
  uint64_t v1 = sub_100006560(&qword_10019DF00);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  uint64_t v5 = v0[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_retain();
  sub_100006560(&qword_10019DF08);
  uint64_t v8 = sub_10000650C(&qword_10019DF10);
  unint64_t v9 = sub_1000E5234();
  v11[0] = v8;
  v11[1] = v9;
  swift_getOpaqueTypeConformance2();
  WindowGroup.init(id:title:lazyContent:)();
  sub_100010484(&qword_10019DF58, &qword_10019DF00);
  static SceneBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000E5050@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ShazamEventsAppModel();
  uint64_t v2 = swift_allocObject();
  sub_100006560((uint64_t *)&unk_10019C728);
  Published.init(initialValue:)();
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC15ShazamEventsApp20ShazamEventsAppModel_userActivityType);
  *uint64_t v3 = 0xD000000000000021;
  v3[1] = 0x8000000100158F20;
  sub_1000E5420(&qword_10019DEF8, (void (*)(uint64_t))type metadata accessor for ShazamEventsAppModel);
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *a1 = result;
  a1[1] = v5;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

unint64_t sub_1000E5174()
{
  unint64_t result = qword_10019DEF0;
  if (!qword_10019DEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DEF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShazamEventsApp()
{
  return &type metadata for ShazamEventsApp;
}

uint64_t sub_1000E51D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E51F4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000E522C()
{
  return sub_1000E4A24(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1000E5234()
{
  unint64_t result = qword_10019DF18;
  if (!qword_10019DF18)
  {
    sub_10000650C(&qword_10019DF10);
    sub_1000E52A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DF18);
  }
  return result;
}

unint64_t sub_1000E52A8()
{
  unint64_t result = qword_10019DF20;
  if (!qword_10019DF20)
  {
    sub_10000650C(&qword_10019DF28);
    sub_1000E5324();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DF20);
  }
  return result;
}

unint64_t sub_1000E5324()
{
  unint64_t result = qword_10019DF30;
  if (!qword_10019DF30)
  {
    sub_10000650C(&qword_10019DF38);
    sub_1000E5420(&qword_10019DF40, (void (*)(uint64_t))type metadata accessor for EventRootView);
    sub_100010484(&qword_10019DF48, &qword_10019DF50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DF30);
  }
  return result;
}

void sub_1000E53F4(void *a1)
{
}

uint64_t sub_1000E5420(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E5468()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000E5490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E54F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5558(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventRootView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E55B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019DF38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E561C()
{
  return sub_100010484(&qword_10019DF58, &qword_10019DF00);
}

void sub_1000E565C()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  uint64_t v2 = 750;
  if (v1 == (id)1) {
    uint64_t v2 = 1410;
  }
  qword_1001AA428 = v2;
}

uint64_t value<A>(iOS:iPadOS:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  id v5 = [self currentDevice];
  id v6 = [v5 userInterfaceIdiom];

  if (v6 == (id)1) {
    return a3();
  }
  else {
    return a1();
  }
}

uint64_t sub_1000E5774(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000E57DC(&qword_10019DF68);
  uint64_t result = sub_1000E57DC(&qword_10019DF70);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000E57DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Ticket();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E5820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v46 = type metadata accessor for Calendar();
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for TimeZone();
  uint64_t v50 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  id v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v33 - v15;
  __chkstk_darwin(v17);
  long long v42 = (char *)&v33 - v18;
  sub_100006560(&qword_10019DFD0);
  Event.Time.dateInterval.getter();
  DateInterval.start.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v39 = v10 + 8;
  uint64_t v40 = v9;
  char v38 = v19;
  v19(v12, v9);
  uint64_t v41 = v1;
  Event.Time.timeZone.getter();
  uint64_t v45 = v8;
  uint64_t v20 = TimeZone.secondsFromGMT(for:)();
  static Calendar.current.getter();
  Calendar.timeZone.getter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v22 = v3;
  v49 += 8;
  v21(v3, v46);
  uint64_t v23 = TimeZone.secondsFromGMT(for:)();
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v50 + 8);
  v50 += 8;
  uint64_t result = v24(v5, v48);
  if (__OFSUB__(v20, v23))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)();
    uint64_t v26 = v47;
    uint64_t v27 = v48;
    char v35 = v21;
    v24(v45, v48);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v47 = v26 + 8;
    uint64_t v34 = v28;
    v28(v16, v44);
    Event.Time.dateInterval.getter();
    long long v36 = v24;
    DateInterval.end.getter();
    v38(v12, v40);
    Event.Time.timeZone.getter();
    uint64_t v29 = TimeZone.secondsFromGMT(for:)();
    static Calendar.current.getter();
    Calendar.timeZone.getter();
    v35(v22, v46);
    uint64_t v30 = v36;
    uint64_t v31 = TimeZone.secondsFromGMT(for:)();
    uint64_t result = v30(v5, v27);
    if (!__OFSUB__(v29, v31))
    {
      uint64_t v32 = v43;
      Date.addingTimeInterval(_:)();
      v30(v45, v48);
      v34(v32, v44);
      return DateInterval.init(start:end:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E5D14(uint64_t a1, uint64_t a2)
{
  uint64_t v151 = a2;
  uint64_t v149 = a1;
  uint64_t v122 = sub_100006560(&qword_10019DFC8);
  __chkstk_darwin(v122);
  uint64_t v121 = (uint64_t)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v120 = (char *)&v114 - v5;
  uint64_t v6 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v6 - 8);
  char v148 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v141 = *(void *)(v8 - 8);
  uint64_t v142 = v8;
  __chkstk_darwin(v8);
  uint64_t v140 = (uint64_t)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019DFD0);
  uint64_t v143 = *(void *)(v10 - 8);
  uint64_t v144 = v10;
  __chkstk_darwin(v10);
  uint64_t v139 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019A5D0);
  uint64_t v126 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v116 = (char *)&v114 - v16;
  __chkstk_darwin(v17);
  uint64_t v115 = (char *)&v114 - v18;
  uint64_t v19 = sub_100006560(&qword_10019D1D8);
  __chkstk_darwin(v19 - 8);
  uint64_t v117 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v145 = (char *)&v114 - v22;
  uint64_t v146 = type metadata accessor for Date();
  uint64_t v150 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v119 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v118 = (char *)&v114 - v25;
  __chkstk_darwin(v26);
  uint64_t v147 = (char *)&v114 - v27;
  __chkstk_darwin(v28);
  uint64_t v152 = (char *)&v114 - v29;
  uint64_t v30 = type metadata accessor for Locale();
  __chkstk_darwin(v30 - 8);
  uint64_t v138 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v32 - 8);
  int v137 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_100006560(&qword_100199230);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v134 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_100006560(&qword_100199228);
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)&v114 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100006560(&qword_10019AD08);
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v128 = (char *)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100006560(&qword_10019AD10);
  __chkstk_darwin(v127);
  char v38 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v114 - v40;
  uint64_t v42 = sub_100006560(&qword_100199220);
  uint64_t v124 = v42;
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v114 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = &v2[*(void *)(*(void *)v2 + 128)];
  LOBYTE(v154[0]) = 0;
  Published.init(initialValue:)();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  uint64_t v125 = v43 + 32;
  v47(v46, v45, v42);
  uint64_t v48 = v126;
  uint64_t v123 = &v2[*(void *)(*(void *)v2 + 136)];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v41, 1, 1, v12);
  sub_1000066D4((uint64_t)v41, (uint64_t)v38, &qword_10019AD10);
  uint64_t v49 = v128;
  Published.init(initialValue:)();
  sub_1000067DC((uint64_t)v41, &qword_10019AD10);
  (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v123, v49, v130);
  uint64_t v50 = &v2[*(void *)(*(void *)v2 + 144)];
  v154[0] = 0;
  v154[1] = (void *)0xE000000000000000;
  long long v51 = v131;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v50, v51, v133);
  id v52 = &v2[*(void *)(*(void *)v2 + 152)];
  LOBYTE(v154[0]) = 0;
  Published.init(initialValue:)();
  v47(v52, v45, v124);
  uint64_t v53 = &v2[*(void *)(*(void *)v2 + 160)];
  v154[0] = 0;
  char v54 = v134;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v53, v54, v136);
  uint64_t v55 = &v2[*(void *)(*(void *)v2 + 184)];
  *(void *)uint64_t v55 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v55 + 1) = v56;
  v55[16] = v57 & 1;
  *((void *)v55 + 3) = v58;
  uint64_t v59 = &v2[*(void *)(*(void *)v2 + 192)];
  *(void *)uint64_t v59 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v59 + 1) = v60;
  v59[16] = v61 & 1;
  *((void *)v59 + 3) = v62;
  long long v63 = &v2[*(void *)(*(void *)v2 + 200)];
  *(void *)long long v63 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v63 + 1) = v64;
  v63[16] = v65 & 1;
  *((void *)v63 + 3) = v66;
  uint64_t v67 = (uint64_t *)&v2[*(void *)(*(void *)v2 + 208)];
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  *uint64_t v67 = String.init(localized:table:bundle:locale:comment:)();
  v67[1] = v68;
  uint64_t v69 = &v2[*(void *)(*(void *)v2 + 112)];
  uint64_t v70 = type metadata accessor for Venue();
  uint64_t v136 = *(void *)(v70 - 8);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v136 + 16);
  uint64_t v72 = v69;
  uint64_t v73 = v151;
  int v137 = (char *)v70;
  v71(v72, v149);
  *(void *)&v2[*(void *)(*(void *)v2 + 120)] = v73;
  uint64_t v138 = v2;
  swift_beginAccess();
  uint64_t v153 = v73;
  swift_bridgeObjectRetain_n();
  sub_100006560(&qword_10019AD18);
  Published.init(initialValue:)();
  swift_endAccess();
  unint64_t v74 = *(void *)(v73 + 16);
  if (v74)
  {
    uint64_t v75 = v115;
    (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v115, v73 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), v12);
    uint64_t v76 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
    uint64_t v77 = v139;
    (*(void (**)(uint64_t, uint64_t))(v76 + 200))(v12, v76);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v75, v12);
    uint64_t v78 = v140;
    sub_1000E5820(v140);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v77, v144);
    uint64_t v79 = v145;
    DateInterval.start.getter();
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v78, v142);
    uint64_t v80 = v150;
    uint64_t v81 = v146;
    uint64_t v135 = *(void *)(v150 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v135)(v79, 0, 1, v146);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v79, 1, v81) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v152, v145, v81);
      goto LABEL_8;
    }
    uint64_t v82 = (uint64_t)v145;
  }
  else
  {
    uint64_t v82 = (uint64_t)v145;
    uint64_t v81 = v146;
    uint64_t v135 = *(void *)(v150 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v135)(v145, 1, 1, v146);
    uint64_t v77 = v139;
    uint64_t v78 = v140;
  }
  Date.init()();
  sub_1000067DC(v82, &qword_10019D1D8);
  if (!v74)
  {
    uint64_t v83 = v150;
    uint64_t v84 = (uint64_t)v117;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v135)(v117, 1, 1, v81);
    uint64_t v85 = v151;
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v85 = v151;
  if (v74 <= *(void *)(v151 + 16))
  {
    uint64_t v145 = (char *)((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v86 = v116;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v116, &v145[v151 + *(void *)(v48 + 72) * (v74 - 1)], v12);
    uint64_t v87 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
    uint64_t v88 = v77;
    uint64_t v89 = v141;
    (*(void (**)(uint64_t, uint64_t))(v87 + 200))(v12, v87);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v86, v12);
    sub_1000E5820(v78);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v88, v144);
    uint64_t v84 = (uint64_t)v117;
    DateInterval.start.getter();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v78, v142);
    uint64_t v83 = v150;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v135)(v84, 0, 1, v81);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v81) != 1)
    {
      uint64_t v92 = (uint64_t)v147;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v147, v84, v81);
      sub_1000BD888((uint64_t)v152, v92, v148);
      v154[0] = _swiftEmptyArrayStorage;
      unint64_t v91 = (unint64_t)v145;
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v90 = (uint64_t)v147;
    Date.init()();
    sub_1000067DC(v84, &qword_10019D1D8);
    sub_1000BD888((uint64_t)v152, v90, v148);
    v154[0] = _swiftEmptyArrayStorage;
    if (!v74)
    {
      uint64_t v99 = _swiftEmptyArrayStorage;
LABEL_17:
      uint64_t v100 = v85;
      sub_1000713A0((uint64_t)v99);
      swift_bridgeObjectRelease();
      uint64_t v101 = swift_bridgeObjectRetain();
      uint64_t v102 = sub_1000E8C2C(v101);
      swift_bridgeObjectRelease();
      v154[0] = v102;
      sub_1000E9880(v154);
      swift_bridgeObjectRelease();
      int v103 = v154[0];
      uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
      v104(v118, (uint64_t)v152, v81);
      uint64_t v105 = v147;
      v104(v119, (uint64_t)v147, v81);
      uint64_t v106 = v81;
      uint64_t v107 = (int *)v122;
      uint64_t v108 = v83;
      uint64_t v109 = v120;
      DateInterval.init(start:end:)();
      *uint64_t v109 = 0;
      v109[1] = v100;
      v109[2] = _swiftEmptyArrayStorage;
      uint64_t v110 = v148;
      sub_1000066D4((uint64_t)v148, (uint64_t)v109 + v107[12], &qword_10019D1D0);
      *(void *)((char *)v109 + v107[13]) = v103;
      *(void *)((char *)v109 + v107[14]) = &_swiftEmptySetSingleton;
      uint64_t v111 = v138;
      swift_beginAccess();
      sub_1000066D4((uint64_t)v109, v121, &qword_10019DFC8);
      Published.init(initialValue:)();
      sub_1000067DC((uint64_t)v109, &qword_10019DFC8);
      swift_endAccess();
      (*(void (**)(uint64_t, char *))(v136 + 8))(v149, v137);
      sub_1000067DC((uint64_t)v110, &qword_10019D1D0);
      uint64_t v112 = *(void (**)(char *, uint64_t))(v108 + 8);
      v112(v105, v106);
      v112(v152, v106);
      return (uint64_t)v111;
    }
    unint64_t v91 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
LABEL_13:
    uint64_t v93 = v85 + v91;
    uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    uint64_t v95 = v48 + 16;
    uint64_t v94 = v96;
    uint64_t v97 = *(void *)(v95 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v94(v14, v93, v12);
      uint64_t v98 = Event<>.genres.getter();
      (*(void (**)(char *, uint64_t))(v95 - 8))(v14, v12);
      sub_1000E8E68(v98);
      v93 += v97;
      --v74;
    }
    while (v74);
    uint64_t v85 = v151;
    swift_bridgeObjectRelease();
    uint64_t v99 = v154[0];
    uint64_t v81 = v146;
    uint64_t v83 = v150;
    goto LABEL_17;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000E6F54()
{
  return sub_10008329C();
}

ValueMetadata *type metadata accessor for VenueEventContentView()
{
  return &type metadata for VenueEventContentView;
}

uint64_t sub_1000E6F9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000E6FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v127 = a1;
  uint64_t v106 = type metadata accessor for TaskPriority();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v104 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100006560(&qword_100198E90);
  uint64_t v101 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v100 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100006560(&qword_10019AC38);
  __chkstk_darwin(v126);
  uint64_t v99 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v102 = (uint64_t)&v89 - v6;
  uint64_t v107 = type metadata accessor for ErrorView();
  __chkstk_darwin(v107);
  uint64_t v108 = (uint64_t *)((char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v110 = (uint64_t)&v89 - v9;
  uint64_t v118 = sub_100006560(&qword_10019AC50);
  __chkstk_darwin(v118);
  uint64_t v109 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t)&v89 - v12;
  uint64_t v123 = sub_100006560(&qword_10019DF78);
  __chkstk_darwin(v123);
  uint64_t v125 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100006560(&qword_10019DF80);
  __chkstk_darwin(v114);
  uint64_t v116 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100006560(&qword_10019DF88);
  __chkstk_darwin(v124);
  uint64_t v117 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100006560(&qword_10019DF90);
  __chkstk_darwin(v115);
  uint64_t v97 = (uint64_t (**)())((char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v98 = (uint64_t)&v89 - v18;
  uint64_t v19 = sub_100006560(&qword_10019ACF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v121 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for Venue();
  uint64_t v122 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v96 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = v21;
  __chkstk_darwin(v22);
  uint64_t v112 = (char *)&v89 - v23;
  uint64_t v24 = sub_100006560(&qword_10019B6C0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100006560(&qword_10019B768);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v94 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = v29;
  __chkstk_darwin(v30);
  uint64_t v128 = (char *)&v89 - v31;
  uint64_t v32 = *(void *)(v1 + 16);
  uint64_t v119 = (_OWORD *)v1;
  type metadata accessor for VenueController();
  sub_1000E8794(&qword_10019DF98, (void (*)(uint64_t))type metadata accessor for VenueController);
  uint64_t v120 = v32;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = v28;
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v35 = v27;
  if (v34(v26, 1, v27) == 1)
  {
    sub_1000067DC((uint64_t)v26, &qword_10019B6C0);
  }
  else
  {
    uint64_t v36 = *(void (**)(unint64_t, char *, uint64_t))(v33 + 32);
    uint64_t v92 = v33 + 32;
    unint64_t v91 = v36;
    v36((unint64_t)v128, v26, v27);
    StateObject.wrappedValue.getter();
    uint64_t v37 = v121;
    sub_10008285C(v121);
    swift_release();
    uint64_t v38 = v113;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v37, 1, v113) != 1)
    {
      uint64_t v70 = v122;
      uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 32);
      uint64_t v72 = v112;
      v71(v112, v121, v38);
      uint64_t v73 = v96;
      uint64_t v74 = v38;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v96, v72, v38);
      uint64_t v90 = v33;
      uint64_t v75 = v94;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v94, v128, v35);
      unint64_t v76 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      unint64_t v77 = (v95 + *(unsigned __int8 *)(v33 + 80) + v76) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v78 = swift_allocObject();
      v71((char *)(v78 + v76), (uint64_t)v73, v38);
      v91(v78 + v77, v75, v35);
      uint64_t v79 = (uint64_t)v97;
      *uint64_t v97 = sub_1000E893C;
      *(void *)(v79 + 8) = v78;
      *(unsigned char *)(v79 + 16) = 0;
      sub_100006560(&qword_1001999F0);
      *(unsigned char *)(swift_allocObject() + 16) = 0;
      sub_100010484(&qword_1001999F8, &qword_1001999F0);
      *(void *)(v79 + 24) = ObservedObject.init(wrappedValue:)();
      *(void *)(v79 + 32) = v80;
      *(unsigned char *)(v79 + 40) = FocusState.init<>()() & 1;
      *(void *)(v79 + 48) = v81;
      *(unsigned char *)(v79 + 56) = v82 & 1;
      uint64_t v83 = v115;
      uint64_t v84 = (uint64_t *)(v79 + *(int *)(v115 + 60));
      *uint64_t v84 = swift_getKeyPath();
      sub_100006560(qword_100198AA0);
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = (uint64_t *)(v79 + *(int *)(v83 + 64));
      type metadata accessor for RemoteViewConfiguration();
      sub_1000E8794((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *uint64_t v85 = EnvironmentObject.init()();
      v85[1] = v86;
      uint64_t v87 = v98;
      sub_10001D6D8(v79, v98, &qword_10019DF90);
      sub_1000066D4(v87, v116, &qword_10019DF90);
      swift_storeEnumTagMultiPayload();
      sub_100010484(&qword_10019DFB8, &qword_10019DF90);
      sub_10006DEC4();
      uint64_t v88 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)();
      sub_1000066D4(v88, v125, &qword_10019DF88);
      swift_storeEnumTagMultiPayload();
      sub_1000E86F0();
      sub_10006DF70();
      _ConditionalContent<>.init(storage:)();
      sub_1000067DC(v88, &qword_10019DF88);
      sub_1000067DC(v87, &qword_10019DF90);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v112, v74);
      return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v128, v35);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v128, v27);
    sub_1000067DC(v121, &qword_10019ACF8);
  }
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v39 = v130;
  swift_errorRelease();
  if (v39)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v41 = (uint64_t)v108;
    *uint64_t v108 = KeyPath;
    sub_100006560(qword_100198AA0);
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = (uint64_t *)(v41 + *(int *)(v107 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000E8794((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v42 = EnvironmentObject.init()();
    v42[1] = v43;
    uint64_t v44 = v110;
    sub_10006E1C8(v41, v110);
    uint64_t v45 = v119;
    long long v46 = *v119;
    long long v129 = *(_OWORD *)((char *)v119 + 40);
    long long v130 = v46;
    uint64_t v47 = swift_allocObject();
    long long v48 = v45[1];
    *(_OWORD *)(v47 + 16) = *v45;
    *(_OWORD *)(v47 + 32) = v48;
    *(_OWORD *)(v47 + 48) = v45[2];
    *(void *)(v47 + 64) = *((void *)v45 + 6);
    uint64_t v49 = v109;
    sub_1000AF460(v44, v109);
    uint64_t v50 = (uint64_t (**)())(v49 + *(int *)(v118 + 36));
    *uint64_t v50 = sub_1000E87E0;
    v50[1] = (uint64_t (*)())v47;
    v50[2] = 0;
    v50[3] = 0;
    sub_10002FE0C((uint64_t)&v130);
    sub_100035D50();
    sub_1000636C8((uint64_t)&v129);
    sub_1000AF4C4(v44);
    long long v51 = &qword_10019AC50;
    uint64_t v52 = v111;
    sub_10001D6D8(v49, v111, &qword_10019AC50);
    sub_1000066D4(v52, v116, &qword_10019AC50);
    swift_storeEnumTagMultiPayload();
    sub_100010484(&qword_10019DFB8, &qword_10019DF90);
    sub_10006DEC4();
    uint64_t v53 = (uint64_t)v117;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v53, v125, &qword_10019DF88);
    swift_storeEnumTagMultiPayload();
    sub_1000E86F0();
    sub_10006DF70();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v53, &qword_10019DF88);
    uint64_t v54 = v52;
  }
  else
  {
    uint64_t v55 = v100;
    ProgressView<>.init<>()();
    uint64_t v56 = v119;
    long long v57 = *v119;
    long long v129 = *(_OWORD *)((char *)v119 + 40);
    long long v130 = v57;
    uint64_t v58 = swift_allocObject();
    long long v59 = v56[1];
    *(_OWORD *)(v58 + 16) = *v56;
    *(_OWORD *)(v58 + 32) = v59;
    *(_OWORD *)(v58 + 48) = v56[2];
    *(void *)(v58 + 64) = *((void *)v56 + 6);
    sub_100035D50();
    sub_10002FE0C((uint64_t)&v130);
    sub_1000636C8((uint64_t)&v129);
    uint64_t v60 = v104;
    static TaskPriority.userInitiated.getter();
    uint64_t v61 = (uint64_t)v99;
    uint64_t v62 = &v99[*(int *)(v126 + 36)];
    uint64_t v63 = type metadata accessor for _TaskModifier();
    uint64_t v64 = v105;
    uint64_t v65 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(&v62[*(int *)(v63 + 20)], v60, v106);
    *(void *)uint64_t v62 = &unk_10019DFA8;
    *((void *)v62 + 1) = v58;
    uint64_t v66 = v101;
    uint64_t v67 = v103;
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 16))(v61, v55, v103);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v65);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v55, v67);
    long long v51 = &qword_10019AC38;
    uint64_t v68 = v102;
    sub_10001D6D8(v61, v102, &qword_10019AC38);
    sub_1000066D4(v68, v125, &qword_10019AC38);
    swift_storeEnumTagMultiPayload();
    sub_1000E86F0();
    sub_10006DF70();
    _ConditionalContent<>.init(storage:)();
    uint64_t v54 = v68;
  }
  return sub_1000067DC(v54, v51);
}

uint64_t sub_1000E7FD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Venue();
  __n128 v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  sub_100006560(&qword_10019B768);
  uint64_t v7 = VenueSchedule.events.getter();
  sub_100006560(&qword_10019DFC0);
  swift_allocObject();
  return sub_1000E5D14((uint64_t)v5, v7);
}

uint64_t sub_1000E80CC(uint64_t *a1)
{
  type metadata accessor for VenueController();
  sub_1000E8794(&qword_10019DF98, (void (*)(uint64_t))type metadata accessor for VenueController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000AC7F8(v4, v3, 5, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000E8794((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8210(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_1000E82A8, v3, v2);
}

uint64_t sub_1000E82A8()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for VenueController();
  sub_1000E8794(&qword_10019DF98, (void (*)(uint64_t))type metadata accessor for VenueController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006D658;
  return sub_100082A90(v2, v3);
}

uint64_t sub_1000E83C0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000E8440(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019B6C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1000066D4(a1, (uint64_t)&v9 - v6, &qword_10019B6C0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000066D4((uint64_t)v7, (uint64_t)v4, &qword_10019B6C0);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000067DC((uint64_t)v7, &qword_10019B6C0);
}

uint64_t sub_1000E8554@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000E85D8()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000E865C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100010CB0;
  return sub_1000E8210(v0 + 16);
}

unint64_t sub_1000E86F0()
{
  unint64_t result = qword_10019DFB0;
  if (!qword_10019DFB0)
  {
    sub_10000650C(&qword_10019DF88);
    sub_100010484(&qword_10019DFB8, &qword_10019DF90);
    sub_10006DEC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DFB0);
  }
  return result;
}

uint64_t sub_1000E8794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E87E0()
{
  return sub_1000E80CC((uint64_t *)(v0 + 16));
}

uint64_t sub_1000E87E8()
{
  uint64_t v1 = type metadata accessor for Venue();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_100006560(&qword_10019B768);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1000E893C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Venue() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100006560(&qword_10019B768);

  return sub_1000E7FD0(v0 + v2);
}

char *sub_1000E8A0C(uint64_t *a1)
{
  uint64_t v2 = sub_100006560(&qword_10019DFF8);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(qword_10019E000);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  if (!*a1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  if (v8 <= 0)
  {
    uint64_t v12 = &_swiftEmptyArrayStorage;
LABEL_11:
    uint64_t v15 = *(void *)(type metadata accessor for GridItem() - 8);
    uint64_t v16 = (uint64_t)v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    sub_1000066D4((uint64_t)a1, (uint64_t)v4, &qword_10019DFF8);
    uint64_t v17 = sub_1000EB35C((uint64_t)v7, v16, v8);
    uint64_t result = (char *)sub_1000067DC((uint64_t)v7, qword_10019E000);
    if (v17 == v8) {
      return (char *)v12;
    }
    __break(1u);
    goto LABEL_14;
  }
  sub_100006560(&qword_100199A00);
  uint64_t v9 = *(void *)(type metadata accessor for GridItem() - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t result = (char *)j__malloc_size(v12);
  if (v10)
  {
    if (&result[-v11] == (char *)0x8000000000000000 && v10 == -1) {
      goto LABEL_15;
    }
    v12[2] = v8;
    v12[3] = 2 * ((uint64_t)&result[-v11] / v10);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

void *sub_1000E8C2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100006560(&qword_10019C9E0);
  uint64_t v3 = *(void *)(type metadata accessor for Genre() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_1000EB57C(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_1000EBAEC();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000E8D80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100006560(&qword_10019C9D8);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000EB8C4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000EBAEC();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1000E8E68(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Genre();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019DFE0);
  __chkstk_darwin(v7 - 8);
  uint64_t v88 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  __n128 v15 = __chkstk_darwin(v10);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  int64_t v19 = *v1;
  int64_t v20 = *(void *)(*v1 + 16);
  int64_t v21 = v20 + v18;
  if (__OFADD__(v20, v18))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v86 = v11;
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v1 = v19;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v23 = *(void *)(v19 + 24) >> 1, v23 < v21))
  {
    if (v20 <= v21) {
      int64_t v24 = v20 + v18;
    }
    else {
      int64_t v24 = v20;
    }
    int64_t v19 = sub_1000ABAEC(isUniquelyReferenced_nonNull_native, v24, 1, v19);
    unint64_t *v1 = v19;
    int64_t v23 = *(void *)(v19 + 24) >> 1;
  }
  uint64_t v25 = *(void *)(v19 + 16);
  int64_t v20 = *(void *)(v5 + 72);
  int64_t v26 = v23 - v25;
  unint64_t v85 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1000EB57C(&v89, (char *)(v19 + v85 + v20 * v25), v23 - v25, a1);
  if (v27 < v18) {
    goto LABEL_17;
  }
  if (v27)
  {
    uint64_t v30 = *(void *)(v19 + 16);
    BOOL v31 = __OFADD__(v30, v27);
    uint64_t v32 = v30 + v27;
    if (v31)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v19 + 16) = v32;
  }
  if (v27 == v26)
  {
LABEL_18:
    int64_t v19 = *(void *)(v19 + 16);
    uint64_t v18 = v89;
    uint64_t v29 = v90;
    int64_t v28 = v91;
    int64_t v26 = v92;
    int64_t v80 = v91;
    int64_t v84 = v90;
    if (v93)
    {
      unint64_t v34 = (v93 - 1) & v93;
      unint64_t v35 = __clz(__rbit64(v93)) | (v92 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16))(v17, *(void *)(v18 + 48) + v35 * v20, v4, v15);
      uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v75(v17, 0, 1, v4);
      unint64_t v36 = v34;
LABEL_43:
      unint64_t v82 = v36;
      int64_t v83 = v26;
      unint64_t v89 = v18;
      int64_t v90 = v84;
      int64_t v91 = v80;
      int64_t v92 = v26;
      unint64_t v93 = v36;
      uint64_t v42 = v86;
      sub_1000066D4((uint64_t)v17, v86, &qword_10019DFE0);
      uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      int v43 = v81(v42, 1, v4);
      uint64_t v44 = v88;
      if (v43 == 1)
      {
LABEL_81:
        sub_1000067DC((uint64_t)v17, &qword_10019DFE0);
        sub_1000EBAEC();
        return sub_1000067DC(v86, &qword_10019DFE0);
      }
      uint64_t v79 = (void (**)(void, void, void))(v5 + 32);
      uint64_t v73 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v74 = v5 + 56;
      uint64_t v72 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v45 = v86;
      long long v46 = v87;
      unint64_t v76 = v17;
      while (1)
      {
        sub_1000067DC(v45, &qword_10019DFE0);
        uint64_t v48 = *v1;
        unint64_t v49 = *(void *)(*v1 + 24);
        int64_t v50 = v49 >> 1;
        if ((uint64_t)(v49 >> 1) < v19 + 1)
        {
          uint64_t v48 = sub_1000ABAEC(v49 > 1, v19 + 1, 1, *v1);
          unint64_t *v1 = v48;
          int64_t v50 = *(void *)(v48 + 24) >> 1;
        }
        sub_1000066D4((uint64_t)v17, v44, &qword_10019DFE0);
        if (v81(v44, 1, v4) != 1) {
          break;
        }
LABEL_50:
        sub_1000067DC(v44, &qword_10019DFE0);
        int64_t v47 = v19;
LABEL_46:
        *(void *)(*v1 + 16) = v47;
        uint64_t v45 = v86;
        sub_1000066D4((uint64_t)v17, v86, &qword_10019DFE0);
        if (v81(v45, 1, v4) == 1)
        {
          int64_t v83 = v92;
          int64_t v84 = v90;
          unint64_t v82 = v93;
          goto LABEL_81;
        }
      }
      unint64_t v78 = v48 + v85;
      long long v51 = *v79;
      if (v19 <= v50) {
        int64_t v52 = v50;
      }
      else {
        int64_t v52 = v19;
      }
      int64_t v80 = v52;
      unint64_t v77 = v51;
      while (1)
      {
        uint64_t v56 = v46;
        uint64_t v57 = v44;
        uint64_t v58 = v44;
        long long v59 = v46;
        uint64_t v60 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
        v51(v56, v57, v4);
        if (v19 == v80)
        {
          (*v72)(v59, v4);
          int64_t v47 = v80;
          int64_t v19 = v80;
          long long v46 = v59;
          uint64_t v44 = v58;
          uint64_t v17 = v76;
          goto LABEL_46;
        }
        uint64_t v17 = v76;
        sub_1000067DC((uint64_t)v76, &qword_10019DFE0);
        int64_t v61 = v19;
        uint64_t result = v60(v78 + v19 * v20, v59, v4);
        uint64_t v62 = v90;
        int64_t v63 = v92;
        int64_t v84 = v61;
        unint64_t v82 = v89;
        int64_t v83 = v91;
        if (v93) {
          break;
        }
        int64_t v66 = v92 + 1;
        if (__OFADD__(v92, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v67 = (unint64_t)(v91 + 64) >> 6;
        int64_t v65 = v92;
        if (v66 < v67)
        {
          unint64_t v68 = *(void *)(v90 + 8 * v66);
          if (v68) {
            goto LABEL_65;
          }
          int64_t v69 = v92 + 2;
          int64_t v65 = v92 + 1;
          if (v92 + 2 < v67)
          {
            unint64_t v68 = *(void *)(v90 + 8 * v69);
            if (v68) {
              goto LABEL_68;
            }
            int64_t v65 = v92 + 2;
            if (v92 + 3 < v67)
            {
              unint64_t v68 = *(void *)(v90 + 8 * (v92 + 3));
              if (v68)
              {
                int64_t v66 = v92 + 3;
                goto LABEL_65;
              }
              int64_t v69 = v92 + 4;
              int64_t v65 = v92 + 3;
              if (v92 + 4 < v67)
              {
                unint64_t v68 = *(void *)(v90 + 8 * v69);
                if (v68)
                {
LABEL_68:
                  int64_t v66 = v69;
                  goto LABEL_65;
                }
                int64_t v66 = v92 + 5;
                int64_t v65 = v92 + 4;
                if (v92 + 5 < v67)
                {
                  unint64_t v68 = *(void *)(v90 + 8 * v66);
                  if (!v68)
                  {
                    int64_t v65 = v67 - 1;
                    int64_t v70 = v92 + 6;
                    do
                    {
                      if (v67 == v70)
                      {
                        uint64_t v17 = v76;
                        goto LABEL_56;
                      }
                      unint64_t v68 = *(void *)(v90 + 8 * v70++);
                    }
                    while (!v68);
                    int64_t v66 = v70 - 1;
                    uint64_t v17 = v76;
                  }
LABEL_65:
                  unint64_t v53 = (v68 - 1) & v68;
                  unint64_t v64 = __clz(__rbit64(v68)) + (v66 << 6);
                  int64_t v63 = v66;
LABEL_61:
                  unint64_t v54 = v82;
                  (*v73)(v17, *(void *)(v82 + 48) + v64 * v20, v4);
                  v75(v17, 0, 1, v4);
                  int64_t v65 = v63;
                  goto LABEL_57;
                }
              }
            }
          }
        }
LABEL_56:
        v75(v17, 1, 1, v4);
        unint64_t v53 = 0;
        unint64_t v54 = v82;
LABEL_57:
        unint64_t v89 = v54;
        int64_t v90 = v62;
        int64_t v19 = v84 + 1;
        int64_t v91 = v83;
        int64_t v92 = v65;
        unint64_t v93 = v53;
        uint64_t v44 = v88;
        sub_1000066D4((uint64_t)v17, v88, &qword_10019DFE0);
        int v55 = v81(v44, 1, v4);
        long long v46 = v87;
        long long v51 = v77;
        if (v55 == 1) {
          goto LABEL_50;
        }
      }
      unint64_t v53 = (v93 - 1) & v93;
      unint64_t v64 = __clz(__rbit64(v93)) | (v92 << 6);
      goto LABEL_61;
    }
LABEL_22:
    int64_t v37 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v18 = v11;
      int64_t v19 = v12;
      uint64_t v4 = v13;
      uint64_t v17 = v14;
    }
    else
    {
      int64_t v38 = (unint64_t)(v28 + 64) >> 6;
      int64_t v83 = v26;
      if (v37 < v38)
      {
        unint64_t v39 = *(void *)(v29 + 8 * v37);
        if (v39)
        {
LABEL_25:
          unint64_t v34 = (v39 - 1) & v39;
          unint64_t v35 = __clz(__rbit64(v39)) + (v37 << 6);
          int64_t v26 = v37;
          goto LABEL_20;
        }
        int64_t v40 = v26 + 2;
        int64_t v83 = v26 + 1;
        if (v26 + 2 < v38)
        {
          uint64_t v14 = v17;
          uint64_t v13 = v4;
          int64_t v12 = v19;
          uint64_t v11 = v18;
          unint64_t v39 = *(void *)(v29 + 8 * v40);
          if (v39)
          {
LABEL_28:
            int64_t v37 = v40;
            goto LABEL_25;
          }
          int64_t v83 = v26 + 2;
          if (v26 + 3 < v38)
          {
            unint64_t v39 = *(void *)(v84 + 8 * (v26 + 3));
            if (v39)
            {
              int64_t v37 = v26 + 3;
              goto LABEL_25;
            }
            int64_t v40 = v26 + 4;
            int64_t v83 = v26 + 3;
            if (v26 + 4 < v38)
            {
              unint64_t v39 = *(void *)(v84 + 8 * v40);
              if (v39) {
                goto LABEL_28;
              }
              int64_t v37 = v26 + 5;
              int64_t v83 = v26 + 4;
              if (v26 + 5 < v38)
              {
                unint64_t v39 = *(void *)(v84 + 8 * v37);
                if (!v39)
                {
                  int64_t v83 = v38 - 1;
                  int64_t v41 = v26 + 6;
                  do
                  {
                    if (v38 == v41) {
                      goto LABEL_41;
                    }
                    unint64_t v39 = *(void *)(v84 + 8 * v41++);
                  }
                  while (!v39);
                  int64_t v37 = v41 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v75)(v17, 1, 1, v4, v15);
    unint64_t v36 = 0;
    int64_t v26 = v83;
    goto LABEL_43;
  }

  return sub_1000EBAEC();
}

uint64_t sub_1000E9728(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1000ABDA0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000E9880(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Genre() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1000EBAC4(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1000E9928(v5);
  *a1 = v3;
}

void sub_1000E9928(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Genre();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v153 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v165 = (char *)&v145 - v8;
  __chkstk_darwin(v9);
  uint64_t v168 = (char *)&v145 - v10;
  __chkstk_darwin(v11);
  uint64_t v167 = (char *)&v145 - v12;
  __chkstk_darwin(v13);
  char v148 = (char *)&v145 - v14;
  __chkstk_darwin(v15);
  uint64_t v155 = (char *)&v145 - v16;
  __chkstk_darwin(v17);
  uint64_t v151 = (char *)&v145 - v18;
  __chkstk_darwin(v19);
  uint64_t v150 = (char *)&v145 - v20;
  uint64_t v170 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int v22 = _minimumMergeRunLength(_:)(v21);
  if (v22 >= v21)
  {
    if (v21 < 0) {
      goto LABEL_151;
    }
    if (v21) {
      sub_1000EA63C(0, v21, 1, v170);
    }
    return;
  }
  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_159;
  }
  Swift::Int v146 = v22;
  if (v21 < 2)
  {
    uint64_t v26 = v5;
    int64_t v28 = (char *)_swiftEmptyArrayStorage;
    unint64_t v156 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v145 = _swiftEmptyArrayStorage;
    if (v21 != 1)
    {
      unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v30 >= 2)
      {
        uint64_t v136 = *v170;
        do
        {
          unint64_t v137 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_146;
          }
          if (!v136) {
            goto LABEL_158;
          }
          uint64_t v138 = v28;
          uint64_t v139 = v28 + 32;
          uint64_t v140 = *(void *)&v28[16 * v137 + 32];
          uint64_t v141 = *(void *)&v28[16 * v30 + 24];
          uint64_t v142 = v26;
          sub_1000EA988(v136 + *(void *)(v26 + 72) * v140, v136 + *(void *)(v26 + 72) * *(void *)&v139[16 * v30 - 16], v136 + *(void *)(v26 + 72) * v141, v156);
          if (v2) {
            break;
          }
          if (v141 < v140) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v138 = sub_1000EB348((uint64_t)v138);
          }
          if (v137 >= *((void *)v138 + 2)) {
            goto LABEL_148;
          }
          uint64_t v143 = &v138[16 * v137 + 32];
          *(void *)uint64_t v143 = v140;
          *((void *)v143 + 1) = v141;
          unint64_t v144 = *((void *)v138 + 2);
          if (v30 > v144) {
            goto LABEL_149;
          }
          int64_t v28 = v138;
          memmove(&v138[16 * v30 + 16], &v138[16 * v30 + 32], 16 * (v144 - v30));
          *((void *)v138 + 2) = v144 - 1;
          unint64_t v30 = v144 - 1;
          uint64_t v26 = v142;
        }
        while (v144 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      v145[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v25 + 16) = v24;
    uint64_t v26 = v5;
    unint64_t v27 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v145 = (void *)v25;
    unint64_t v156 = v25 + v27;
  }
  Swift::Int v29 = 0;
  uint64_t v161 = v26 + 16;
  uint64_t v162 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v166 = (char **)(v26 + 32);
  int64_t v28 = (char *)_swiftEmptyArrayStorage;
  uint64_t v157 = v26;
  uint64_t v164 = v4;
  while (1)
  {
    Swift::Int v31 = v29;
    Swift::Int v32 = v29 + 1;
    Swift::Int v154 = v29;
    if (v29 + 1 >= v21)
    {
      Swift::Int v40 = v29 + 1;
      goto LABEL_69;
    }
    Swift::Int v163 = v21;
    uint64_t v149 = v28;
    uint64_t v33 = *v170;
    uint64_t v34 = *(void *)(v26 + 72);
    unint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v35(v150, *v170 + v34 * v32, v4);
    uint64_t v158 = (char *)v33;
    uint64_t v169 = v34;
    v35(v151, v33 + v34 * v31, v4);
    uint64_t v36 = Genre.name.getter();
    uint64_t v38 = v37;
    if (v36 != Genre.name.getter()) {
      goto LABEL_20;
    }
    if (v38 == v39) {
      LODWORD(v160) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v160) = _stringCompareWithSmolCheck(_:_:expecting:)();
    int64_t v41 = v148;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = *v162;
    uint64_t v43 = v164;
    (*v162)(v151, v164);
    v42(v150, v43);
    Swift::Int v40 = v154 + 2;
    if (v154 + 2 >= v163)
    {
      uint64_t v55 = v157;
    }
    else
    {
      uint64_t v147 = v2;
      uint64_t v159 = v169 * v32;
      uint64_t v44 = v158;
      uint64_t v45 = v169 * v40;
      while (1)
      {
        Swift::Int v46 = v40;
        uint64_t v47 = v164;
        v35(v155, (uint64_t)&v44[v45], v164);
        v35(v41, (uint64_t)&v44[v159], v47);
        uint64_t v48 = Genre.name.getter();
        uint64_t v50 = v49;
        if (v48 == Genre.name.getter() && v50 == v51) {
          int v52 = 0;
        }
        else {
          int v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v164;
        v42(v41, v164);
        v42(v155, v53);
        if ((v160 ^ v52)) {
          break;
        }
        Swift::Int v40 = v46 + 1;
        v44 += v169;
        if (v163 == v46 + 1)
        {
          Swift::Int v54 = v163;
          Swift::Int v40 = v163;
          uint64_t v2 = v147;
          uint64_t v55 = v157;
          goto LABEL_33;
        }
      }
      uint64_t v2 = v147;
      uint64_t v55 = v157;
      Swift::Int v40 = v46;
    }
    Swift::Int v54 = v163;
LABEL_33:
    int64_t v28 = v149;
    Swift::Int v31 = v154;
    uint64_t v56 = v158;
    if ((v160 & 1) == 0) {
      break;
    }
    if (v40 < v154) {
      goto LABEL_152;
    }
    if (v154 >= v40) {
      break;
    }
    uint64_t v147 = v2;
    uint64_t v57 = 0;
    uint64_t v58 = v169 * (v40 - 1);
    uint64_t v59 = v40 * v169;
    Swift::Int v60 = v154;
    uint64_t v61 = v154 * v169;
    do
    {
      if (v60 != v40 + v57 - 1)
      {
        if (!v56) {
          goto LABEL_157;
        }
        int64_t v63 = &v56[v58];
        uint64_t v160 = *v166;
        ((void (*)(char *, char *, uint64_t))v160)(v153, &v56[v61], v164);
        if (v61 < v58 || &v56[v61] >= &v56[v59])
        {
          uint64_t v62 = v164;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v62 = v164;
          if (v61 != v58) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        ((void (*)(char *, char *, uint64_t))v160)(v63, v153, v62);
        uint64_t v55 = v157;
        uint64_t v56 = v158;
      }
      ++v60;
      --v57;
      v58 -= v169;
      v59 -= v169;
      v61 += v169;
    }
    while (v60 < v40 + v57);
    uint64_t v2 = v147;
    Swift::Int v54 = v163;
    uint64_t v64 = v164;
    int64_t v28 = v149;
    Swift::Int v31 = v154;
    if (v40 < v163) {
      goto LABEL_49;
    }
LABEL_69:
    if (v40 < v31) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v28 = sub_1000EB050(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v85 = *((void *)v28 + 2);
    unint64_t v84 = *((void *)v28 + 3);
    unint64_t v30 = v85 + 1;
    uint64_t v26 = v157;
    Swift::Int v163 = v40;
    if (v85 >= v84 >> 1)
    {
      uint64_t v135 = sub_1000EB050((char *)(v84 > 1), v85 + 1, 1, v28);
      uint64_t v26 = v157;
      int64_t v28 = v135;
    }
    *((void *)v28 + 2) = v30;
    uint64_t v86 = v28 + 32;
    uint64_t v87 = &v28[16 * v85 + 32];
    Swift::Int v88 = v163;
    *(void *)uint64_t v87 = v31;
    *((void *)v87 + 1) = v88;
    if (v85)
    {
      while (1)
      {
        unint64_t v89 = v30 - 1;
        if (v30 >= 4)
        {
          uint64_t v94 = &v86[16 * v30];
          uint64_t v95 = *((void *)v94 - 8);
          uint64_t v96 = *((void *)v94 - 7);
          BOOL v100 = __OFSUB__(v96, v95);
          uint64_t v97 = v96 - v95;
          if (v100) {
            goto LABEL_134;
          }
          uint64_t v99 = *((void *)v94 - 6);
          uint64_t v98 = *((void *)v94 - 5);
          BOOL v100 = __OFSUB__(v98, v99);
          uint64_t v92 = v98 - v99;
          char v93 = v100;
          if (v100) {
            goto LABEL_135;
          }
          unint64_t v101 = v30 - 2;
          uint64_t v102 = &v86[16 * v30 - 32];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v100 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v100) {
            goto LABEL_137;
          }
          BOOL v100 = __OFADD__(v92, v105);
          uint64_t v106 = v92 + v105;
          if (v100) {
            goto LABEL_140;
          }
          if (v106 >= v97)
          {
            uint64_t v124 = &v86[16 * v89];
            uint64_t v126 = *(void *)v124;
            uint64_t v125 = *((void *)v124 + 1);
            BOOL v100 = __OFSUB__(v125, v126);
            uint64_t v127 = v125 - v126;
            if (v100) {
              goto LABEL_144;
            }
            BOOL v117 = v92 < v127;
            goto LABEL_106;
          }
        }
        else
        {
          if (v30 != 3)
          {
            uint64_t v118 = *((void *)v28 + 4);
            uint64_t v119 = *((void *)v28 + 5);
            BOOL v100 = __OFSUB__(v119, v118);
            uint64_t v111 = v119 - v118;
            char v112 = v100;
            goto LABEL_100;
          }
          uint64_t v91 = *((void *)v28 + 4);
          uint64_t v90 = *((void *)v28 + 5);
          BOOL v100 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          char v93 = v100;
        }
        if (v93) {
          goto LABEL_136;
        }
        unint64_t v101 = v30 - 2;
        uint64_t v107 = &v86[16 * v30 - 32];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v110 = __OFSUB__(v108, v109);
        uint64_t v111 = v108 - v109;
        char v112 = v110;
        if (v110) {
          goto LABEL_139;
        }
        uint64_t v113 = &v86[16 * v89];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v100 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v100) {
          goto LABEL_142;
        }
        if (__OFADD__(v111, v116)) {
          goto LABEL_143;
        }
        if (v111 + v116 >= v92)
        {
          BOOL v117 = v92 < v116;
LABEL_106:
          if (v117) {
            unint64_t v89 = v101;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v112) {
          goto LABEL_138;
        }
        uint64_t v120 = &v86[16 * v89];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v100 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v100) {
          goto LABEL_141;
        }
        if (v123 < v111) {
          goto LABEL_14;
        }
LABEL_108:
        unint64_t v128 = v89 - 1;
        if (v89 - 1 >= v30)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v170) {
          goto LABEL_156;
        }
        long long v129 = v28;
        long long v130 = &v86[16 * v128];
        uint64_t v131 = *(void *)v130;
        uint64_t v132 = &v86[16 * v89];
        uint64_t v133 = *((void *)v132 + 1);
        sub_1000EA988(*v170 + *(void *)(v26 + 72) * *(void *)v130, *v170 + *(void *)(v26 + 72) * *(void *)v132, *v170 + *(void *)(v26 + 72) * v133, v156);
        if (v2) {
          goto LABEL_128;
        }
        if (v133 < v131) {
          goto LABEL_131;
        }
        if (v89 > *((void *)v129 + 2)) {
          goto LABEL_132;
        }
        *(void *)long long v130 = v131;
        *(void *)&v86[16 * v128 + 8] = v133;
        unint64_t v134 = *((void *)v129 + 2);
        if (v89 >= v134) {
          goto LABEL_133;
        }
        int64_t v28 = v129;
        unint64_t v30 = v134 - 1;
        memmove(&v86[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
        *((void *)v129 + 2) = v134 - 1;
        uint64_t v26 = v157;
        if (v134 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v30 = 1;
LABEL_14:
    Swift::Int v21 = v170[1];
    Swift::Int v29 = v163;
    uint64_t v4 = v164;
    if (v163 >= v21) {
      goto LABEL_117;
    }
  }
  uint64_t v64 = v164;
  if (v40 >= v54) {
    goto LABEL_69;
  }
LABEL_49:
  if (__OFSUB__(v40, v31)) {
    goto LABEL_150;
  }
  if (v40 - v31 >= v146) {
    goto LABEL_69;
  }
  if (__OFADD__(v31, v146)) {
    goto LABEL_153;
  }
  if (v31 + v146 >= v54) {
    Swift::Int v65 = v54;
  }
  else {
    Swift::Int v65 = v31 + v146;
  }
  if (v65 >= v31)
  {
    if (v40 != v65)
    {
      uint64_t v149 = v28;
      uint64_t v147 = v2;
      uint64_t v66 = *(void *)(v55 + 72);
      uint64_t v158 = *(char **)(v55 + 16);
      uint64_t v159 = v66;
      uint64_t v169 = v66 * (v40 - 1);
      Swift::Int v67 = v40 * v66;
      Swift::Int v152 = v65;
      do
      {
        uint64_t v70 = 0;
        Swift::Int v71 = v31;
        Swift::Int v163 = v40;
        uint64_t v160 = (char *)v67;
        while (1)
        {
          uint64_t v72 = *v170;
          uint64_t v73 = v67 + v70 + *v170;
          uint64_t v74 = v158;
          ((void (*)(char *, uint64_t, uint64_t))v158)(v167, v73, v64);
          ((void (*)(char *, uint64_t, uint64_t))v74)(v168, v169 + v70 + v72, v64);
          uint64_t v75 = Genre.name.getter();
          uint64_t v77 = v76;
          if (v75 == Genre.name.getter() && v77 == v78) {
            break;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v80 = *v162;
          uint64_t v64 = v164;
          (*v162)(v168, v164);
          v80(v167, v64);
          if ((v79 & 1) == 0) {
            goto LABEL_59;
          }
          uint64_t v81 = *v170;
          Swift::Int v67 = (Swift::Int)v160;
          if (!*v170) {
            goto LABEL_155;
          }
          uint64_t v82 = v81 + v169 + v70;
          int64_t v83 = *v166;
          ((void (*)(char *, char *, uint64_t))*v166)(v165, &v160[v81 + v70], v64);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v83)(v82, v165, v64);
          v70 -= v159;
          ++v71;
          Swift::Int v69 = v163;
          if (v163 == v71) {
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        unint64_t v68 = *v162;
        uint64_t v64 = v164;
        (*v162)(v168, v164);
        v68(v167, v64);
LABEL_59:
        Swift::Int v69 = v163;
        Swift::Int v67 = (Swift::Int)v160;
LABEL_60:
        Swift::Int v40 = v69 + 1;
        v169 += v159;
        v67 += v159;
        Swift::Int v31 = v154;
      }
      while (v40 != v152);
      Swift::Int v40 = v152;
      uint64_t v2 = v147;
      int64_t v28 = v149;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000EA63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::Int v46 = a4;
  uint64_t v34 = a1;
  uint64_t v6 = type metadata accessor for Genre();
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v32 - v9;
  __n128 v12 = __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v32 - v13;
  uint64_t v42 = a3;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v38 = v11 + 16;
    uint64_t v14 = *(void *)(v11 + 72);
    unint64_t v35 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v36 = v6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v15 = v14 * (v42 - 1);
    uint64_t v39 = v14;
    uint64_t v16 = v14 * v42;
LABEL_6:
    uint64_t v18 = 0;
    uint64_t v19 = v34;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v20 = *v46;
      uint64_t v45 = v16 + v18;
      uint64_t v21 = v16 + v18 + v20;
      Swift::Int v22 = v37;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v37)(v47, v21, v6, v12);
      v22(v48, v15 + v18 + v20, v6);
      uint64_t v23 = Genre.name.getter();
      uint64_t v25 = v24;
      if (v23 == Genre.name.getter() && v25 == v26)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v36;
        uint64_t v17 = *v35;
        (*v35)(v48, v36);
        v17(v47, v6);
        uint64_t v16 = v40;
        uint64_t v15 = v41;
LABEL_5:
        v15 += v39;
        v16 += v39;
        if (++v42 == v33) {
          return;
        }
        goto LABEL_6;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v36;
      int64_t v28 = *v35;
      (*v35)(v48, v36);
      v28(v47, v6);
      uint64_t v16 = v40;
      uint64_t v15 = v41;
      if ((v27 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v46;
      if (!*v46) {
        break;
      }
      unint64_t v30 = (char *)(v29 + v41 + v18);
      Swift::Int v31 = *v43;
      (*v43)(v44, v29 + v40 + v18, v6);
      swift_arrayInitWithTakeFrontToBack();
      v31(v30, (uint64_t)v44, v6);
      v18 -= v39;
      if (v42 == ++v19) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1000EA988(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v66 = type metadata accessor for Genre();
  uint64_t v8 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int64_t v63 = (char *)&v58 - v11;
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)&v58 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v65 = *(void *)(v17 + 72);
  if (!v65)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_69;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_70;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v65;
  unint64_t v69 = a1;
  unint64_t v68 = a4;
  uint64_t v20 = v18 / v65;
  if (v19 >= v18 / v65)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v65;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v40 = a4 + v22;
      unint64_t v67 = a4 + v22;
      unint64_t v69 = a2;
      uint64_t v62 = (char *)a1;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v65;
        uint64_t v65 = *(void *)(v8 + 16);
        unint64_t v60 = a4;
        uint64_t v61 = v8 + 16;
        uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v43 = a3;
          uint64_t v44 = (void (*)(char *, unint64_t, uint64_t))v65;
          uint64_t v45 = v66;
          ((void (*)(char *, unint64_t, uint64_t))v65)(v63, v40 + v42, v66);
          unint64_t v46 = a2 + v42;
          v44(v64, a2 + v42, v45);
          uint64_t v47 = Genre.name.getter();
          uint64_t v49 = v48;
          if (v47 == Genre.name.getter() && v49 == v50) {
            char v51 = 0;
          }
          else {
            char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v52 = v43 + v42;
          uint64_t v53 = *v59;
          uint64_t v54 = v66;
          (*v59)(v64, v66);
          v53(v63, v54);
          unint64_t v55 = v60;
          if (v51)
          {
            if (v43 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v69 += v42;
          }
          else
          {
            unint64_t v56 = v67;
            v67 += v42;
            if (v43 < v56 || v52 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != v56)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v46 = a2;
          }
          unint64_t v40 = v67;
          if (v67 <= v55) {
            break;
          }
          a2 = v46;
          a3 = v43 + v42;
        }
        while (v46 > (unint64_t)v62);
      }
LABEL_67:
      sub_1000EB14C(&v69, &v68, (uint64_t *)&v67);
      return 1;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v65;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v64 = (char *)(a4 + v21);
    unint64_t v67 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      int64_t v63 = *(char **)(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v24 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        unint64_t v25 = a3;
        uint64_t v26 = v66;
        char v27 = (void (*)(char *, unint64_t, uint64_t))v63;
        ((void (*)(char *, unint64_t, uint64_t))v63)(v16, a2, v66);
        v27(v62, a4, v26);
        uint64_t v28 = Genre.name.getter();
        uint64_t v30 = v29;
        if (v28 == Genre.name.getter() && v30 == v31) {
          break;
        }
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v35 = *v24;
        uint64_t v36 = v66;
        (*v24)(v62, v66);
        v35(v16, v36);
        if ((v34 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v37 = v69;
        unint64_t v38 = a2 + v65;
        if (v69 < a2 || v69 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
          a3 = v25;
        }
        else
        {
          a3 = v25;
          if (v69 == a2) {
            unint64_t v37 = a2;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v69 = v37 + v65;
        a4 = v68;
        if (v68 < (unint64_t)v64)
        {
          a2 = v38;
          if (v38 < a3) {
            continue;
          }
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v32 = *v24;
      uint64_t v33 = v66;
      (*v24)(v62, v66);
      v32(v16, v33);
LABEL_31:
      unint64_t v37 = v69;
      unint64_t v39 = v68 + v65;
      if (v69 < v68 || v69 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack();
        a3 = v25;
      }
      else
      {
        a3 = v25;
        if (v69 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v68 = v39;
      unint64_t v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000EB050(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006560(&qword_10019DFD8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000EB14C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1000EB28C(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1000EB348(uint64_t a1)
{
  return sub_1000EB050(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EB35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100006560(&qword_10019DFF8);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100006560(qword_10019E000);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_10001D6D8(v4, (uint64_t)v14, &qword_10019DFF8);
  uint64_t v16 = *(int *)(v12 + 44);
  *(void *)((char *)v14 + v16) = 0;
  if (!a2)
  {
LABEL_13:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    sub_10001D6D8((uint64_t)v14, a1, qword_10019E000);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*v14)
    {
      uint64_t v25 = a1;
      uint64_t v17 = 1;
      while (1)
      {
        sub_1000066D4((uint64_t)v14, (uint64_t)v10, &qword_10019DFF8);
        uint64_t v18 = *v10;
        uint64_t result = sub_1000067DC((uint64_t)v10, &qword_10019DFF8);
        if (v17 - 1 >= v18) {
          break;
        }
        if (v17 - 1 >= *v14) {
          goto LABEL_16;
        }
        uint64_t v19 = (char *)v14 + *(int *)(v8 + 28);
        *(void *)((char *)v14 + v16) = v17;
        uint64_t v20 = type metadata accessor for GridItem();
        uint64_t v21 = *(void *)(v20 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(a2, v19, v20);
        if (a3 == v17) {
          goto LABEL_12;
        }
        a2 += *(void *)(v21 + 72);
        uint64_t v22 = v17 + 1;
        if (v17++ == *v14)
        {
          a3 = v22 - 1;
LABEL_12:
          a1 = v25;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_1000EB57C(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Genre();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 56);
  uint64_t v15 = a4 + 56;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 24);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
LABEL_37:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 24);
  unint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v42, *(void *)(v43 + 48) + v29 * v24, v8, v12);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    v30(a2, v22, v8);
    if (v21 == v40) {
      goto LABEL_36;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_37;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1000EB8C4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000EBAC4(void *a1)
{
  return sub_10012F7D4(0, a1[2], 0, a1);
}

uint64_t sub_1000EBAD8(uint64_t a1)
{
  return sub_10012FBA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EBAEC()
{
  return swift_release();
}

unint64_t sub_1000EBAF8()
{
  unint64_t result = qword_10019DFE8;
  if (!qword_10019DFE8)
  {
    sub_10000650C(&qword_10019DFF0);
    sub_1000E86F0();
    sub_10006DF70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019DFE8);
  }
  return result;
}

uint64_t sub_1000EBB74@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, double a8@<D0>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  unint64_t v16 = (int *)type metadata accessor for TourPhotosView();
  uint64_t v17 = a7 + v16[9];
  *(void *)uint64_t v17 = a1;
  *(void *)(v17 + 8) = a2;
  *(void *)(v17 + 16) = a3;
  *(unsigned char *)(v17 + 24) = a4 & 1;
  uint64_t v18 = a7 + v16[10];
  *(void *)uint64_t v18 = a5;
  *(void *)(v18 + 8) = a6;
  *(double *)(v18 + 16) = a8;
  int64_t v19 = (uint64_t *)(a7 + v16[11]);
  type metadata accessor for RemoteViewConfiguration();
  sub_100025BB4();
  uint64_t result = EnvironmentObject.init()();
  *int64_t v19 = result;
  v19[1] = v21;
  return result;
}

uint64_t type metadata accessor for TourPhotosView()
{
  return sub_1000068A4();
}

uint64_t sub_1000EBCD0()
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000EBD88(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for TourPhotosViewModel();
    uint64_t v7 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[9];
    uint64_t v9 = a3[10];
    uint64_t v10 = (char *)v4 + v8;
    uint64_t v11 = (char *)a2 + v8;
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    *((void *)v10 + 2) = *((void *)v11 + 2);
    v10[24] = v11[24];
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    int64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    v13[2] = v14[2];
    uint64_t v16 = a3[11];
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    *uint64_t v17 = v20;
    v17[1] = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000EBED0(uint64_t a1)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v2 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000EBF90(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  v12[2] = v13[2];
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000EC08C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(v9 + 16);
  *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
  *(void *)(v8 + 16) = v10;
  uint64_t v11 = a3[10];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_retain();
  swift_release();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  return a1;
}

uint64_t sub_1000EC1D0(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  *uint64_t v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000EC290(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(unsigned char *)(v8 + 24) = *(unsigned char *)(v9 + 24);
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[11];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *v15;
  swift_release();
  *(void *)(v14 + 8) = v15[1];
  return a1;
}

uint64_t sub_1000EC3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EC3C0);
}

uint64_t sub_1000EC3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000EC494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EC4A8);
}

uint64_t sub_1000EC4A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TourPhotosViewModel();
  uint64_t result = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000EC578()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000EC5BC()
{
  type metadata accessor for TourPhotosViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000EC5FC()
{
  sub_100006560(&qword_10019E118);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000EC660()
{
  sub_100006560(&qword_10019E118);
  Binding.projectedValue.getter();
  return v1;
}

double sub_1000EC6C8()
{
  sub_100006560(&qword_10019C3C0);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1000EC720()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000EC77C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v143 = a2;
  uint64_t v124 = a1;
  uint64_t v141 = *(void *)(a1 - 8);
  uint64_t v142 = *(void *)(v141 + 64);
  __chkstk_darwin(a1);
  uint64_t v140 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PagingScrollTargetBehavior();
  uint64_t v138 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v120 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = sub_10000650C(&qword_10019E088);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v164 = v6;
  uint64_t v165 = &type metadata for Int;
  uint64_t v166 = v7;
  uint64_t v167 = (void *)WitnessTable;
  uint64_t v168 = &protocol witness table for Int;
  type metadata accessor for ForEach();
  uint64_t v139 = &protocol conformance descriptor for AsyncImage<A>;
  uint64_t v163 = sub_100010484(&qword_10019E090, &qword_10019E088);
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for HStack();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v164 = v9;
  uint64_t v165 = (void *)v10;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v164 = v9;
  uint64_t v165 = (void *)v10;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v11 = type metadata accessor for ScrollView();
  uint64_t v130 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v121 = (char *)&v86 - v12;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v164 = v11;
  uint64_t v165 = (void *)v4;
  uint64_t v110 = v4;
  uint64_t v111 = v11;
  uint64_t v166 = v13;
  uint64_t v167 = &protocol witness table for PagingScrollTargetBehavior;
  uint64_t v14 = v13;
  uint64_t v112 = v13;
  uint64_t v15 = swift_getOpaqueTypeMetadata2();
  uint64_t v132 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v109 = (char *)&v86 - v16;
  uint64_t v164 = v11;
  uint64_t v165 = (void *)v4;
  uint64_t v166 = v14;
  uint64_t v167 = &protocol witness table for PagingScrollTargetBehavior;
  uint64_t v17 = swift_getOpaqueTypeConformance2();
  uint64_t v106 = v15;
  uint64_t v164 = v15;
  uint64_t v165 = &type metadata for Int;
  uint64_t v166 = v17;
  uint64_t v167 = &protocol witness table for Int;
  uint64_t v18 = v17;
  uint64_t v108 = v17;
  uint64_t v19 = swift_getOpaqueTypeMetadata2();
  uint64_t v127 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v105 = (char *)&v86 - v20;
  uint64_t v164 = v15;
  uint64_t v165 = &type metadata for Int;
  uint64_t v166 = v18;
  uint64_t v167 = &protocol witness table for Int;
  uint64_t v21 = swift_getOpaqueTypeConformance2();
  uint64_t v164 = v19;
  uint64_t v165 = (void *)v21;
  uint64_t v88 = v19;
  uint64_t v89 = v21;
  uint64_t v123 = swift_getOpaqueTypeMetadata2();
  uint64_t v129 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v107 = (char *)&v86 - v22;
  sub_10000650C(&qword_10019E098);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v131 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v116 = (char *)&v86 - v24;
  uint64_t v93 = v23;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v128 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v118 = (char *)&v86 - v26;
  sub_10000650C(&qword_10019A970);
  uint64_t v94 = v25;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v133 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v114 = (char *)&v86 - v28;
  sub_10000650C(&qword_10019E0A0);
  uint64_t v96 = v27;
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v135 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v119 = (char *)&v86 - v30;
  uint64_t v98 = v29;
  uint64_t v31 = type metadata accessor for ModifiedContent();
  uint64_t v136 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v122 = (char *)&v86 - v32;
  uint64_t v33 = sub_10000650C(&qword_10019E0A8);
  uint64_t v104 = v33;
  uint64_t v164 = v19;
  uint64_t v165 = (void *)v21;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  uint64_t v90 = v34;
  uint64_t v35 = sub_100010484(&qword_10019E0B0, &qword_10019E098);
  uint64_t v161 = v34;
  uint64_t v162 = v35;
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v159 = v92;
  uint64_t v160 = &protocol witness table for _FrameLayout;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v91 = v36;
  uint64_t v37 = sub_100010484(&qword_10019A968, &qword_10019A970);
  uint64_t v157 = v36;
  uint64_t v158 = v37;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v95 = v38;
  uint64_t v39 = sub_100010484(&qword_10019E0B8, &qword_10019E0A0);
  uint64_t v155 = v38;
  uint64_t v156 = v39;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v153 = v97;
  Swift::Int v154 = &protocol witness table for _PaddingLayout;
  uint64_t v101 = v31;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v103 = v40;
  unint64_t v102 = sub_1000F1458();
  uint64_t v164 = v31;
  uint64_t v165 = (void *)v33;
  uint64_t v166 = v40;
  uint64_t v167 = (void *)v102;
  uint64_t v113 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v115 = swift_getOpaqueTypeMetadata2();
  uint64_t v117 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v99 = (char *)&v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  BOOL v100 = (uint64_t *)((char *)&v86 - v43);
  static Axis.Set.horizontal.getter();
  uint64_t v44 = v124;
  uint64_t v87 = *(void *)(v124 + 24);
  uint64_t v45 = v137;
  uint64_t v150 = v137;
  uint64_t v151 = v87;
  uint64_t v46 = v134;
  uint64_t v152 = v134;
  uint64_t v47 = v121;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v48 = v120;
  PagingScrollTargetBehavior.init()();
  uint64_t v50 = v109;
  uint64_t v49 = v110;
  uint64_t v51 = v111;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v47, v51);
  uint64_t v164 = sub_1000EC660();
  uint64_t v165 = v52;
  uint64_t v166 = v53;
  LOBYTE(v167) = v54 & 1;
  unint64_t v55 = v105;
  uint64_t v56 = v106;
  View.scrollPosition<A>(id:anchor:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v50, v56);
  sub_1000EC5BC();
  sub_1000647C8();
  swift_release();
  uint64_t v57 = v107;
  uint64_t v58 = v88;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v127 + 8))(v55, v58);
  uint64_t v147 = v45;
  uint64_t v59 = v87;
  uint64_t v148 = v87;
  uint64_t v149 = v46;
  static Alignment.center.getter();
  sub_100006560(&qword_10019E0C8);
  sub_100010484(&qword_10019E0D0, &qword_10019E0C8);
  unint64_t v60 = v116;
  uint64_t v61 = v123;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v57, v61);
  sub_1000EC5BC();
  swift_release();
  static Alignment.center.getter();
  uint64_t v62 = v118;
  uint64_t v63 = v93;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v60, v63);
  uint64_t v64 = v114;
  uint64_t v65 = v94;
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v128 + 8))(v62, v65);
  uint64_t v144 = v45;
  uint64_t v145 = v59;
  uint64_t v146 = v46;
  static Alignment.center.getter();
  sub_100006560(&qword_10019E0D8);
  sub_1000F14E8();
  uint64_t v66 = v119;
  uint64_t v67 = v96;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v64, v67);
  static Edge.Set.bottom.getter();
  uint64_t v68 = v44;
  sub_1000EC5BC();
  swift_release();
  unint64_t v69 = v122;
  uint64_t v70 = v98;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v66, v70);
  uint64_t v164 = sub_1000EC5FC();
  LOBYTE(v165) = v71 & 1;
  uint64_t v73 = v140;
  uint64_t v72 = v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v140, v46, v68);
  uint64_t v74 = v72;
  unint64_t v75 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = v45;
  *(void *)(v76 + 24) = v59;
  (*(void (**)(unint64_t, char *, uint64_t))(v74 + 32))(v76 + v75, v73, v68);
  uint64_t v77 = v99;
  uint64_t v79 = v101;
  uint64_t v78 = (void *)v102;
  uint64_t v81 = v103;
  int64_t v80 = (void *)v104;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v136 + 8))(v69, v79);
  uint64_t v164 = v79;
  uint64_t v165 = v80;
  uint64_t v166 = v81;
  uint64_t v167 = v78;
  swift_getOpaqueTypeConformance2();
  uint64_t v82 = v100;
  uint64_t v83 = v115;
  sub_1000508C8(v100, v77, v115);
  unint64_t v84 = *(void (**)(char *, uint64_t))(v117 + 8);
  v84(v77, v83);
  sub_1000508C8(v143, v82, v83);
  return ((uint64_t (*)(void *, uint64_t))v84)(v82, v83);
}

uint64_t sub_1000ED724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t v19 = a2;
  uint64_t v22 = a4;
  swift_getTupleTypeMetadata2();
  uint64_t v27 = type metadata accessor for Array();
  uint64_t v28 = &type metadata for Int;
  uint64_t v29 = sub_10000650C(&qword_10019E088);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = &protocol witness table for Int;
  type metadata accessor for ForEach();
  uint64_t v26 = sub_100010484(&qword_10019E090, &qword_10019E088);
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for HStack();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = swift_getWitnessTable();
  uint64_t v27 = v4;
  uint64_t v28 = (void *)v8;
  v18[1] = &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v10 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v18 - v14);
  uint64_t v23 = v19;
  uint64_t v24 = v21;
  uint64_t v25 = v20;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v27 = v4;
  uint64_t v28 = (void *)v8;
  swift_getOpaqueTypeConformance2();
  sub_1000508C8(v15, v12, OpaqueTypeMetadata2);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, OpaqueTypeMetadata2);
  sub_1000508C8(v22, v15, OpaqueTypeMetadata2);
  return ((uint64_t (*)(void *, uint64_t))v16)(v15, OpaqueTypeMetadata2);
}

uint64_t sub_1000EDA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v25 = a1;
  uint64_t v34 = a4;
  uint64_t v5 = type metadata accessor for TourPhotosView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v29 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v27 = (char *)&v25 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Array();
  uint64_t v32 = v8;
  uint64_t v9 = sub_10000650C(&qword_10019E088);
  uint64_t v31 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v8;
  uint64_t v40 = &type metadata for Int;
  uint64_t v41 = v9;
  uint64_t v42 = WitnessTable;
  uint64_t v43 = &protocol witness table for Int;
  uint64_t v10 = type metadata accessor for ForEach();
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v25 - v14);
  uint64_t v16 = *(void *)(sub_1000EC5BC() + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v38 = v16;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.enumerated()();
  swift_bridgeObjectRelease();
  uint64_t v38 = v39;
  type metadata accessor for EnumeratedSequence();
  swift_getWitnessTable();
  uint64_t v39 = Array.init<A>(_:)();
  uint64_t v17 = v28;
  uint64_t v35 = a2;
  uint64_t v36 = v28;
  TupleTypeMetadata2 = swift_getKeyPath();
  uint64_t v18 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v27, v25, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v18, v5);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a2;
  void v21[3] = v17;
  v21[4] = sub_1000F21BC;
  v21[5] = v20;
  uint64_t v24 = sub_100010484(&qword_10019E090, &qword_10019E088);
  ForEach<>.init(_:id:content:)();
  uint64_t v37 = v24;
  swift_getWitnessTable();
  sub_1000508C8(v15, v12, v10);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v33 + 8);
  v22(v12, v10);
  sub_1000508C8(v34, v15, v10);
  return ((uint64_t (*)(void *, uint64_t))v22)(v15, v10);
}

uint64_t sub_1000EDEE0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v19[1] = a4;
  uint64_t v7 = type metadata accessor for TourPhotosView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - v9;
  uint64_t v11 = sub_100006560(&qword_100198630);
  __n128 v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v12);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, v10, v7);
  sub_100006560(&qword_10019E1E8);
  sub_1000F1E58(&qword_10019E1F0, &qword_10019E1E8, (void (*)(void))sub_1000F24F4);
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t sub_1000EE13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v148 = a4;
  uint64_t v147 = a3;
  uint64_t v142 = a2;
  uint64_t v146 = a5;
  uint64_t v115 = sub_100006560(&qword_10019E1A0);
  uint64_t v114 = *(void (**)(void))(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v113 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100006560(&qword_10019E2B0);
  __chkstk_darwin(v134);
  uint64_t v112 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v119 = (uint64_t)&v104 - v9;
  uint64_t v144 = sub_100006560(&qword_10019E2B8);
  __chkstk_darwin(v144);
  uint64_t v143 = (uint64_t)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_100006560(&qword_10019E2C0);
  __chkstk_darwin(v135);
  uint64_t v136 = (uint64_t)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100006560(&qword_10019E200);
  __chkstk_darwin(v145);
  uint64_t v137 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100006560(&qword_10019E2C8);
  __chkstk_darwin(v129);
  uint64_t v131 = (uint64_t)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_100006560(&qword_10019E2D0);
  __chkstk_darwin(v128);
  uint64_t v132 = (uint64_t)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Image.ResizingMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100006560(&qword_10019E1B8);
  uint64_t v122 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100006560(&qword_10019E270);
  __chkstk_darwin(v139);
  uint64_t v117 = (char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_100006560(&qword_10019E260);
  __chkstk_darwin(v138);
  uint64_t v120 = (uint64_t)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100006560(&qword_10019E250);
  __chkstk_darwin(v118);
  uint64_t v141 = (uint64_t)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_100006560(&qword_10019E240);
  __chkstk_darwin(v121);
  uint64_t v124 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_100006560(&qword_10019E230);
  __chkstk_darwin(v116);
  uint64_t v127 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_100006560(&qword_10019E220);
  __chkstk_darwin(v125);
  uint64_t v126 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_100006560(&qword_10019E210);
  __chkstk_darwin(v133);
  uint64_t v123 = (uint64_t)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v130 = (uint64_t)&v104 - v29;
  uint64_t v30 = type metadata accessor for AsyncImagePhase();
  uint64_t v31 = *(void *)(v30 - 8);
  __n128 v32 = __chkstk_darwin(v30);
  uint64_t v34 = (uint64_t *)((char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v31 + 16))(v34, a1, v30, v32);
  int v35 = (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 88))(v34, v30);
  if (v35 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v34, v30);
    uint64_t v119 = *v34;
    LODWORD(v115) = enum case for Image.ResizingMode.stretch(_:);
    uint64_t v36 = *(void (**)(void))(v16 + 104);
    uint64_t v113 = (char *)(v16 + 104);
    uint64_t v114 = v36;
    uint64_t v108 = v15;
    v36(v18);
    uint64_t v37 = Image.resizable(capInsets:resizingMode:)();
    uint64_t v38 = *(char **)(v16 + 8);
    uint64_t v111 = v16 + 8;
    uint64_t v112 = v38;
    ((void (*)(char *, uint64_t))v38)(v18, v15);
    *(_OWORD *)uint64_t v156 = (unint64_t)v37;
    *(_WORD *)&v156[16] = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    uint64_t v110 = sub_100006560(&qword_1001990A8);
    unint64_t v109 = sub_100026D44();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v107 = type metadata accessor for TourPhotosView();
    sub_1000EC5BC();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v39 = v122;
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 16);
    uint64_t v105 = v122 + 16;
    uint64_t v106 = v40;
    uint64_t v41 = (uint64_t)v117;
    uint64_t v42 = v140;
    v40((uint64_t)v117, v20, v140);
    uint64_t v43 = (_OWORD *)(v41 + *(int *)(v139 + 36));
    long long v44 = v154;
    *uint64_t v43 = v153;
    v43[1] = v44;
    v43[2] = v155;
    uint64_t v122 = *(void *)(v39 + 8);
    ((void (*)(char *, uint64_t))v122)(v20, v42);
    uint64_t v45 = v120;
    sub_1000066D4(v41, v120, &qword_10019E270);
    *(_WORD *)(v45 + *(int *)(v138 + 36)) = 0;
    sub_1000067DC(v41, &qword_10019E270);
    uint64_t v46 = static Alignment.center.getter();
    uint64_t v48 = v47;
    sub_1000F0DC8((uint64_t (*)(void))&static Color.black.getter, (uint64_t (*)(void))&static Color.clear.getter, (uint64_t)v156);
    uint64_t v49 = *(void *)v156;
    long long v104 = *(_OWORD *)&v156[8];
    uint64_t v50 = *(void *)&v156[24];
    uint64_t v51 = v157;
    uint64_t v52 = v141;
    sub_1000066D4(v45, v141, &qword_10019E260);
    uint64_t v53 = v52 + *(int *)(v118 + 36);
    *(void *)uint64_t v53 = v46;
    *(void *)(v53 + 8) = v48;
    *(void *)(v53 + 16) = v49;
    *(_OWORD *)(v53 + 24) = v104;
    *(void *)(v53 + 40) = v50;
    *(void *)(v53 + 48) = v51;
    sub_1000067DC(v45, &qword_10019E260);
    uint64_t v54 = v108;
    ((void (*)(char *, void, uint64_t))v114)(v18, v115, v108);
    uint64_t v55 = Image.resizable(capInsets:resizingMode:)();
    ((void (*)(char *, uint64_t))v112)(v18, v54);
    *(_OWORD *)uint64_t v156 = (unint64_t)v55;
    *(_WORD *)&v156[16] = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v56 = v142;
    sub_1000EC5BC();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v57 = v140;
    v106(v41, v20, v140);
    uint64_t v58 = (_OWORD *)(v41 + *(int *)(v139 + 36));
    long long v59 = *(_OWORD *)&v156[16];
    *uint64_t v58 = *(_OWORD *)v156;
    v58[1] = v59;
    v58[2] = v157;
    ((void (*)(char *, uint64_t))v122)(v20, v57);
    sub_1000066D4(v41, v45, &qword_10019E270);
    *(_WORD *)(v45 + *(int *)(v138 + 36)) = 0;
    sub_1000067DC(v41, &qword_10019E270);
    uint64_t v60 = v131;
    sub_1000066D4(v45, v131, &qword_10019E260);
    uint64_t v61 = v60 + *(int *)(v129 + 36);
    *(void *)uint64_t v61 = 0x4049000000000000;
    *(unsigned char *)(v61 + 8) = 1;
    sub_1000067DC(v45, &qword_10019E260);
    uint64_t v62 = v132;
    sub_1000066D4(v60, v132, &qword_10019E2C8);
    *(_WORD *)(v62 + *(int *)(v128 + 36)) = 0;
    sub_1000067DC(v60, &qword_10019E2C8);
    uint64_t v63 = static Alignment.center.getter();
    uint64_t v65 = v64;
    uint64_t v66 = (uint64_t)v124;
    uint64_t v67 = (uint64_t)&v124[*(int *)(v121 + 36)];
    sub_1000066D4(v62, v67, &qword_10019E2D0);
    uint64_t v68 = (uint64_t *)(v67 + *(int *)(sub_100006560(&qword_10019E290) + 36));
    *uint64_t v68 = v63;
    v68[1] = v65;
    uint64_t v69 = v141;
    sub_1000066D4(v141, v66, &qword_10019E250);
    sub_1000067DC(v62, &qword_10019E2D0);
    sub_1000067DC(v69, &qword_10019E250);
    uint64_t v70 = static Alignment.center.getter();
    uint64_t v72 = v71;
    uint64_t v73 = (uint64_t)v127;
    uint64_t v74 = (uint64_t)&v127[*(int *)(v116 + 36)];
    sub_1000EF414(v56, v147, v148, v74);
    unint64_t v75 = (uint64_t *)(v74 + *(int *)(sub_100006560(&qword_10019E2A0) + 36));
    *unint64_t v75 = v70;
    v75[1] = v72;
    sub_10001D6D8(v66, v73, &qword_10019E240);
    uint64_t v76 = static Alignment.center.getter();
    uint64_t v78 = v77;
    sub_1000F0E90((uint64_t)&v149);
    uint64_t v79 = v149;
    long long v148 = v150;
    uint64_t v80 = v151;
    uint64_t v81 = v152;
    uint64_t v82 = v126;
    sub_1000066D4(v73, v126, &qword_10019E230);
    uint64_t v83 = v82 + *(int *)(v125 + 36);
    *(void *)uint64_t v83 = v79;
    *(_OWORD *)(v83 + 8) = v148;
    *(void *)(v83 + 24) = v80;
    *(void *)(v83 + 32) = v81;
    *(void *)(v83 + 40) = v76;
    *(void *)(v83 + 48) = v78;
    sub_1000067DC(v73, &qword_10019E230);
    uint64_t v84 = v123;
    sub_1000066D4(v82, v123, &qword_10019E220);
    *(unsigned char *)(v84 + *(int *)(v133 + 36)) = 1;
    sub_1000067DC(v82, &qword_10019E220);
    unint64_t v85 = &qword_10019E210;
    uint64_t v86 = v130;
    sub_10001D6D8(v84, v130, &qword_10019E210);
    sub_1000066D4(v86, v136, &qword_10019E210);
    swift_storeEnumTagMultiPayload();
    sub_1000F2570();
    sub_1000F29CC();
    uint64_t v87 = (uint64_t)v137;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v87, v143, &qword_10019E200);
    swift_storeEnumTagMultiPayload();
    sub_1000F24F4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000067DC(v87, &qword_10019E200);
    uint64_t v88 = v86;
    return sub_1000067DC(v88, v85);
  }
  uint64_t v89 = v143;
  if (v35 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v31 + 96))(v34, v30);
    swift_errorRelease();
LABEL_6:
    if (qword_1001980A8 != -1) {
      swift_once();
    }
    *(void *)uint64_t v156 = qword_1001AA350;
    *(_WORD *)&v156[8] = 256;
    swift_retain();
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    sub_100006560(&qword_100198D20);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    uint64_t v90 = v113;
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v91 = static Alignment.center.getter();
    uint64_t v93 = v92;
    sub_1000F0E90((uint64_t)v156);
    uint64_t v94 = *(void *)v156;
    long long v148 = *(_OWORD *)&v156[8];
    uint64_t v95 = *(void *)&v156[24];
    uint64_t v96 = v157;
    uint64_t v97 = (void (**)(char *, uint64_t))v114;
    uint64_t v98 = (uint64_t)v112;
    uint64_t v99 = v115;
    (*((void (**)(char *, char *, uint64_t))v114 + 2))(v112, v90, v115);
    uint64_t v100 = v98 + *(int *)(v134 + 36);
    *(void *)uint64_t v100 = v94;
    *(_OWORD *)(v100 + 8) = v148;
    *(void *)(v100 + 24) = v95;
    *(void *)(v100 + 32) = v96;
    *(void *)(v100 + 40) = v91;
    *(void *)(v100 + 48) = v93;
    v97[1](v90, v99);
    unint64_t v85 = &qword_10019E2B0;
    uint64_t v101 = v119;
    sub_10001D6D8(v98, v119, &qword_10019E2B0);
    sub_1000066D4(v101, v136, &qword_10019E2B0);
    swift_storeEnumTagMultiPayload();
    sub_1000F2570();
    sub_1000F29CC();
    uint64_t v102 = (uint64_t)v137;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v102, v89, &qword_10019E200);
    swift_storeEnumTagMultiPayload();
    sub_1000F24F4();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v102, &qword_10019E200);
    uint64_t v88 = v101;
    return sub_1000067DC(v88, v85);
  }
  if (v35 == enum case for AsyncImagePhase.empty(_:)) {
    goto LABEL_6;
  }
  swift_storeEnumTagMultiPayload();
  sub_1000F24F4();
  _ConditionalContent<>.init(storage:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v31 + 8))(v34, v30);
}

uint64_t sub_1000EF414@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  *(void *)&long long v48 = a1;
  uint64_t v49 = a4;
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100006560(&qword_10019E1B8);
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100006560(&qword_10019E270) - 8;
  __chkstk_darwin(v42);
  uint64_t v38 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100006560(&qword_10019E260) - 8;
  __chkstk_darwin(v43);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100006560(&qword_10019E2D8) - 8;
  __chkstk_darwin(v41);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100006560(&qword_10019E2E0) - 8;
  __chkstk_darwin(v40);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100006560(&qword_10019E2E8) - 8;
  __n128 v17 = __chkstk_darwin(v39);
  uint64_t v37 = (uint64_t)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4, v17);
  uint64_t v19 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  long long v54 = (unint64_t)v19;
  LOWORD(v55) = 257;
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_100006560(&qword_1001990A8);
  sub_100026D44();
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  type metadata accessor for TourPhotosView();
  sub_1000EC5BC();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v20 = v44;
  uint64_t v21 = (uint64_t)v38;
  uint64_t v22 = v47;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v38, v9, v47);
  uint64_t v23 = (_OWORD *)(v21 + *(int *)(v42 + 44));
  long long v24 = v55;
  *uint64_t v23 = v54;
  v23[1] = v24;
  v23[2] = v56;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v22);
  sub_1000066D4(v21, (uint64_t)v12, &qword_10019E270);
  *(_WORD *)&v12[*(int *)(v43 + 44)] = 0;
  sub_1000067DC(v21, &qword_10019E270);
  sub_1000066D4((uint64_t)v12, (uint64_t)v14, &qword_10019E260);
  *(void *)&v14[*(int *)(v41 + 44)] = 0x3FF0000000000000;
  sub_1000067DC((uint64_t)v12, &qword_10019E260);
  sub_1000066D4((uint64_t)v14, (uint64_t)v16, &qword_10019E2D8);
  uint64_t v25 = &v16[*(int *)(v40 + 44)];
  *(void *)uint64_t v25 = 0x4038000000000000;
  v25[8] = 1;
  sub_1000067DC((uint64_t)v14, &qword_10019E2D8);
  uint64_t v26 = v37;
  sub_1000066D4((uint64_t)v16, v37, &qword_10019E2E0);
  *(_WORD *)(v26 + *(int *)(v39 + 44)) = 0;
  sub_1000067DC((uint64_t)v16, &qword_10019E2E0);
  uint64_t v27 = static Alignment.center.getter();
  uint64_t v29 = v28;
  sub_1000F0DC8((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v50);
  uint64_t v31 = v49;
  uint64_t v30 = v50;
  long long v48 = v51;
  uint64_t v32 = v52;
  uint64_t v33 = v53;
  sub_1000066D4(v26, v49, &qword_10019E2E8);
  uint64_t v34 = v31 + *(int *)(sub_100006560(&qword_10019E2F0) + 36);
  *(void *)uint64_t v34 = v27;
  *(void *)(v34 + 8) = v29;
  *(void *)(v34 + 16) = v30;
  *(_OWORD *)(v34 + 24) = v48;
  *(void *)(v34 + 40) = v32;
  *(void *)(v34 + 48) = v33;
  return sub_1000067DC(v26, &qword_10019E2E8);
}

uint64_t sub_1000EFA10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100006560(&qword_10019E0C8);
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TourPhotosView();
  uint64_t v14 = *(void *)(sub_1000EC5BC() + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v23 = v14;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, a1);
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 0, 1, v17);
  }
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  sub_100006560(&qword_10019E120);
  sub_1000F1E58(&qword_10019E128, &qword_10019E120, (void (*)(void))sub_1000F1ED8);
  AsyncImage.init(url:scale:transaction:content:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v22, v13, v21);
}

uint64_t sub_1000EFDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = a2;
  *(void *)&long long v67 = a3;
  uint64_t v73 = a1;
  uint64_t v74 = a4;
  uint64_t v72 = sub_100006560(&qword_10019E1A0);
  uint64_t v58 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v57 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100006560(&qword_10019E1A8);
  __chkstk_darwin(v76);
  uint64_t v77 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100006560(&qword_10019E1B0);
  __chkstk_darwin(v69);
  uint64_t v70 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100006560(&qword_10019E138);
  __chkstk_darwin(v75);
  uint64_t v71 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Image.ResizingMode();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100006560(&qword_10019E1B8);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100006560(&qword_10019E178);
  __chkstk_darwin(v60);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100006560(&qword_10019E168);
  __chkstk_darwin(v61);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100006560(&qword_10019E158);
  __chkstk_darwin(v59);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100006560(&qword_10019E148);
  __chkstk_darwin(v68);
  uint64_t v62 = (uint64_t)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v65 = (uint64_t)&v57 - v22;
  uint64_t v23 = type metadata accessor for AsyncImagePhase();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v25 = __chkstk_darwin(v23);
  uint64_t v27 = (uint64_t *)((char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v24 + 16))(v27, v73, v23, v25);
  int v28 = (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 88))(v27, v23);
  if (v28 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    uint64_t v73 = *v27;
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    uint64_t v29 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v78 = v29;
    *(void *)&long long v79 = 0;
    WORD4(v79) = 257;
    static Axis.Set.horizontal.getter();
    static Alignment.center.getter();
    sub_100006560(&qword_1001990A8);
    sub_100026D44();
    View.containerRelativeFrame(_:alignment:)();
    swift_release();
    uint64_t v30 = v63;
    uint64_t v31 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v13, v64);
    uint64_t v32 = &v15[*(int *)(v60 + 36)];
    *(void *)uint64_t v32 = 0x4059000000000000;
    v32[8] = 1;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
    sub_1000066D4((uint64_t)v15, (uint64_t)v17, &qword_10019E178);
    *(_WORD *)&v17[*(int *)(v61 + 36)] = 0;
    sub_1000067DC((uint64_t)v15, &qword_10019E178);
    uint64_t v33 = static Alignment.center.getter();
    uint64_t v35 = v34;
    uint64_t v36 = (uint64_t)&v19[*(int *)(v59 + 36)];
    sub_1000F08F0(v66, v67, v36);
    uint64_t v37 = (uint64_t *)(v36 + *(int *)(sub_100006560(&qword_10019E188) + 36));
    uint64_t *v37 = v33;
    v37[1] = v35;
    sub_10001D6D8((uint64_t)v17, (uint64_t)v19, &qword_10019E168);
    uint64_t v38 = static Alignment.center.getter();
    uint64_t v40 = v39;
    sub_1000F0E90((uint64_t)&v78);
    uint64_t v41 = v78;
    long long v67 = v79;
    uint64_t v42 = v80;
    uint64_t v43 = v81;
    uint64_t v44 = v62;
    sub_1000066D4((uint64_t)v19, v62, &qword_10019E158);
    uint64_t v45 = v44 + *(int *)(v68 + 36);
    *(void *)uint64_t v45 = v41;
    *(_OWORD *)(v45 + 8) = v67;
    *(void *)(v45 + 24) = v42;
    *(void *)(v45 + 32) = v43;
    *(void *)(v45 + 40) = v38;
    *(void *)(v45 + 48) = v40;
    sub_1000067DC((uint64_t)v19, &qword_10019E158);
    uint64_t v46 = v65;
    sub_10001D6D8(v44, v65, &qword_10019E148);
    sub_1000066D4(v46, v70, &qword_10019E148);
    swift_storeEnumTagMultiPayload();
    sub_1000F1FB4();
    uint64_t v47 = sub_10000650C(&qword_100198D20);
    uint64_t v48 = sub_100010484(&qword_100198D18, &qword_100198D20);
    uint64_t v78 = v47;
    *(void *)&long long v79 = v48;
    swift_getOpaqueTypeConformance2();
    uint64_t v49 = (uint64_t)v71;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v49, v77, &qword_10019E138);
    swift_storeEnumTagMultiPayload();
    sub_1000F1ED8();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000067DC(v49, &qword_10019E138);
    return sub_1000067DC(v46, &qword_10019E148);
  }
  if (v28 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    swift_errorRelease();
  }
  else if (v28 != enum case for AsyncImagePhase.empty(_:))
  {
    swift_storeEnumTagMultiPayload();
    sub_1000F1ED8();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v27, v23);
  }
  if (qword_1001980A8 != -1) {
    swift_once();
  }
  uint64_t v78 = qword_1001AA350;
  LOWORD(v79) = 256;
  swift_retain();
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  uint64_t v51 = sub_100006560(&qword_100198D20);
  uint64_t v52 = sub_100010484(&qword_100198D18, &qword_100198D20);
  uint64_t v53 = v57;
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  uint64_t v54 = v58;
  uint64_t v55 = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v70, v53, v72);
  swift_storeEnumTagMultiPayload();
  sub_1000F1FB4();
  uint64_t v78 = v51;
  *(void *)&long long v79 = v52;
  swift_getOpaqueTypeConformance2();
  uint64_t v56 = (uint64_t)v71;
  _ConditionalContent<>.init(storage:)();
  sub_1000066D4(v56, v77, &qword_10019E138);
  swift_storeEnumTagMultiPayload();
  sub_1000F1ED8();
  _ConditionalContent<>.init(storage:)();
  sub_1000067DC(v56, &qword_10019E138);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v53, v55);
}

uint64_t sub_1000F08F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v41 = a1;
  *(void *)&long long v42 = a2;
  uint64_t v43 = a3;
  uint64_t v3 = type metadata accessor for Image.ResizingMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019E1B8);
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100006560(&qword_10019E1C0) - 8;
  __chkstk_darwin(v38);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100006560(&qword_10019E1C8) - 8;
  __chkstk_darwin(v37);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100006560(&qword_10019E1D0) - 8;
  __chkstk_darwin(v35);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100006560(&qword_10019E1D8) - 8;
  __n128 v15 = __chkstk_darwin(v34);
  uint64_t v33 = (uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3, v15);
  uint64_t v17 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v44 = v17;
  *(void *)&long long v45 = 0;
  WORD4(v45) = 257;
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_100006560(&qword_1001990A8);
  sub_100026D44();
  uint64_t v18 = v36;
  View.containerRelativeFrame(_:alignment:)();
  swift_release();
  uint64_t v20 = v39;
  uint64_t v19 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v10, v18, v40);
  *(_WORD *)&v10[*(int *)(v38 + 44)] = 0;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  sub_1000066D4((uint64_t)v10, (uint64_t)v12, &qword_10019E1C0);
  *(void *)&v12[*(int *)(v37 + 44)] = 0x3FF0000000000000;
  sub_1000067DC((uint64_t)v10, &qword_10019E1C0);
  sub_1000066D4((uint64_t)v12, (uint64_t)v14, &qword_10019E1C8);
  uint64_t v21 = &v14[*(int *)(v35 + 44)];
  *(void *)uint64_t v21 = 0x4038000000000000;
  v21[8] = 1;
  sub_1000067DC((uint64_t)v12, &qword_10019E1C8);
  uint64_t v22 = v33;
  sub_1000066D4((uint64_t)v14, v33, &qword_10019E1D0);
  *(_WORD *)(v22 + *(int *)(v34 + 44)) = 0;
  sub_1000067DC((uint64_t)v14, &qword_10019E1D0);
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v25 = v24;
  sub_1000F0DC8((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v44);
  uint64_t v27 = v43;
  uint64_t v26 = v44;
  long long v42 = v45;
  uint64_t v28 = v46;
  uint64_t v29 = v47;
  sub_1000066D4(v22, v43, &qword_10019E1D8);
  uint64_t v30 = v27 + *(int *)(sub_100006560(&qword_10019E1E0) + 36);
  *(void *)uint64_t v30 = v23;
  *(void *)(v30 + 8) = v25;
  *(void *)(v30 + 16) = v26;
  *(_OWORD *)(v30 + 24) = v42;
  *(void *)(v30 + 40) = v28;
  *(void *)(v30 + 48) = v29;
  return sub_1000067DC(v22, &qword_10019E1D8);
}

double sub_1000F0DC8@<D0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  sub_100006560(&qword_100199118);
  double v6 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v6 + 16) = xmmword_10014CCD0;
  *(void *)(*(void *)&v6 + 32) = a1();
  *(void *)(*(void *)&v6 + 40) = a2();
  *(double *)&long long v8 = v6;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v6;
  *(_OWORD *)a3 = v8;
  *(_OWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 32) = v10;
  return result;
}

double sub_1000F0E90@<D0>(uint64_t a1@<X8>)
{
  sub_100006560(&qword_100199118);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_10014CCD0;
  *(void *)(*(void *)&v2 + 32) = static Color.clear.getter();
  static Color.black.getter();
  uint64_t v3 = Color.opacity(_:)();
  swift_release();
  *(void *)(*(void *)&v2 + 40) = v3;
  *(double *)&long long v5 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

void *sub_1000F0F54@<X0>(unsigned char *a1@<X8>)
{
  static HorizontalAlignment.center.getter();
  sub_1000F10FC((uint64_t)__src);
  static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  static Alignment.bottom.getter();
  sub_10005253C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)__src, 0.0, 1, INFINITY, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double result = memcpy(a1, __src, 0x128uLL);
  a1[296] = 0;
  return result;
}

void sub_1000F10FC(uint64_t a1@<X8>)
{
  type metadata accessor for TourPhotosView();
  uint64_t v2 = sub_1000EC5BC();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v23 = *(void *)(v2 + 40);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = v5;
  uint64_t v22 = v4;
  char v19 = v6;
  uint64_t v20 = v7;
  uint64_t v8 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v14 = v13;
  sub_1000EC5BC();
  BOOL v15 = sub_1000647C8();
  swift_release();
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  if (v15)
  {
    sub_1000EC5BC();
    double v16 = sub_10006475C();
    swift_release();
    sub_1000EC5BC();
    double v17 = sub_100064774();
    swift_release();
    double v18 = sub_1000EC6C8();
  }
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v19 & 1;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v12 & 1;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v23;
  *(void *)(a1 + 72) = v3;
  *(double *)(a1 + 80) = v16;
  *(double *)(a1 + 88) = v17;
  *(double *)(a1 + 96) = v18;
  *(unsigned char *)(a1 + 104) = !v15;
}

uint64_t sub_1000F12A0(uint64_t a1)
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v2 = type metadata accessor for TourPhotosView();
  uint64_t v3 = sub_1000EC5BC();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v5, v4, 8, 1, 23, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F13D0()
{
  type metadata accessor for TourPhotosView();
  uint64_t result = sub_1000EC5FC();
  if ((v1 & 1) == 0)
  {
    sub_1000EC5BC();
    sub_100064774();
    swift_release();
    return sub_1000EC720();
  }
  return result;
}

unint64_t sub_1000F1458()
{
  unint64_t result = qword_10019E0C0;
  if (!qword_10019E0C0)
  {
    sub_10000650C(&qword_10019E0A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E0C0);
  }
  return result;
}

uint64_t sub_1000F14C4@<X0>(void *a1@<X8>)
{
  return sub_1000ED724(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000F14D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EFA10(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *sub_1000F14DC@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000F0F54(a1);
}

unint64_t sub_1000F14E8()
{
  unint64_t result = qword_10019E0E0;
  if (!qword_10019E0E0)
  {
    sub_10000650C(&qword_10019E0D8);
    sub_1000F1564();
    sub_10000EC40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E0E0);
  }
  return result;
}

unint64_t sub_1000F1564()
{
  unint64_t result = qword_10019E0E8;
  if (!qword_10019E0E8)
  {
    sub_10000650C(&qword_10019E0F0);
    sub_1000F15E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E0E8);
  }
  return result;
}

unint64_t sub_1000F15E0()
{
  unint64_t result = qword_10019E0F8;
  if (!qword_10019E0F8)
  {
    sub_10000650C(&qword_10019E100);
    sub_100010484(&qword_10019E108, &qword_10019E110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E0F8);
  }
  return result;
}

uint64_t sub_1000F1684()
{
  uint64_t v1 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000F12A0(v2);
}

uint64_t sub_1000F1708()
{
  return sub_1000F13D0();
}

uint64_t sub_1000F1728@<X0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v50 = a1;
  uint64_t v49 = sub_100006560(&qword_10019E318) - 8;
  __chkstk_darwin(v49);
  uint64_t v47 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v48 = (uint64_t)&v42 - v5;
  uint64_t v6 = type metadata accessor for RoundedRectangle();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_100199E40);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100006560(&qword_10019E320) - 8;
  __chkstk_darwin(v45);
  BOOL v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v46 = (uint64_t)&v42 - v17;
  double v18 = &v9[*(int *)(v7 + 28)];
  uint64_t v19 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v43 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v20 = type metadata accessor for RoundedCornerStyle();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 104);
  uint64_t v44 = v21 + 104;
  v22(v18, v19, v20);
  __asm { FMOV            V0.2D, #1.0 }
  long long v42 = _Q0;
  *(_OWORD *)uint64_t v9 = _Q0;
  static Color.white.getter();
  uint64_t v28 = Color.opacity(_:)();
  swift_release();
  sub_10001081C((uint64_t)v9, (uint64_t)v13);
  *(void *)&v13[*(int *)(v11 + 44)] = v28;
  sub_100010934((uint64_t)v9);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000066D4((uint64_t)v13, (uint64_t)v15, &qword_100199E40);
  uint64_t v29 = v45;
  uint64_t v30 = &v15[*(int *)(v45 + 44)];
  long long v31 = v52;
  *(_OWORD *)uint64_t v30 = v51;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v53;
  sub_1000067DC((uint64_t)v13, &qword_100199E40);
  uint64_t v32 = v46;
  sub_10001D6D8((uint64_t)v15, v46, &qword_10019E320);
  v22(&v9[*(int *)(v7 + 28)], v43, v20);
  *(_OWORD *)uint64_t v9 = v42;
  static Color.white.getter();
  uint64_t v33 = Color.opacity(_:)();
  swift_release();
  sub_10001081C((uint64_t)v9, (uint64_t)v13);
  *(void *)&v13[*(int *)(v11 + 44)] = v33;
  sub_100010934((uint64_t)v9);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000066D4((uint64_t)v13, (uint64_t)v15, &qword_100199E40);
  uint64_t v34 = &v15[*(int *)(v29 + 44)];
  long long v35 = v55;
  *(_OWORD *)uint64_t v34 = v54;
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v56;
  sub_1000067DC((uint64_t)v13, &qword_100199E40);
  uint64_t v36 = v47;
  sub_1000066D4((uint64_t)v15, v47, &qword_10019E320);
  uint64_t v37 = v36 + *(int *)(v49 + 44);
  *(double *)uint64_t v37 = a2;
  *(void *)(v37 + 8) = 0;
  sub_1000067DC((uint64_t)v15, &qword_10019E320);
  uint64_t v38 = v48;
  sub_10001D6D8(v36, v48, &qword_10019E318);
  sub_1000066D4(v32, (uint64_t)v15, &qword_10019E320);
  sub_1000066D4(v38, v36, &qword_10019E318);
  uint64_t v39 = v50;
  sub_1000066D4((uint64_t)v15, v50, &qword_10019E320);
  uint64_t v40 = sub_100006560(&qword_10019E328);
  sub_1000066D4(v36, v39 + *(int *)(v40 + 48), &qword_10019E318);
  sub_1000067DC(v38, &qword_10019E318);
  sub_1000067DC(v32, &qword_10019E320);
  sub_1000067DC(v36, &qword_10019E318);
  return sub_1000067DC((uint64_t)v15, &qword_10019E320);
}

uint64_t sub_1000F1BF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BlendMode();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019E2F8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100006560(&qword_10019E300);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = *(double *)(v1 + 16);
  *uint64_t v9 = static Alignment.leading.getter();
  v9[1] = v15;
  uint64_t v16 = sub_100006560(&qword_10019E308);
  sub_1000F1728((uint64_t)v9 + *(int *)(v16 + 44), v14);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for BlendMode.plusLighter(_:), v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v13[*(int *)(v11 + 44)], v6, v3);
  sub_1000066D4((uint64_t)v9, (uint64_t)v13, &qword_10019E2F8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1000067DC((uint64_t)v9, &qword_10019E2F8);
  sub_1000066D4((uint64_t)v13, a1, &qword_10019E300);
  *(unsigned char *)(a1 + *(int *)(sub_100006560(&qword_10019E310) + 36)) = 1;
  return sub_1000067DC((uint64_t)v13, &qword_10019E300);
}

uint64_t sub_1000F1E40()
{
  return swift_deallocObject();
}

uint64_t sub_1000F1E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EFDDC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000F1E58(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F1ED8()
{
  unint64_t result = qword_10019E130;
  if (!qword_10019E130)
  {
    sub_10000650C(&qword_10019E138);
    sub_1000F1FB4();
    sub_10000650C(&qword_100198D20);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E130);
  }
  return result;
}

unint64_t sub_1000F1FB4()
{
  unint64_t result = qword_10019E140;
  if (!qword_10019E140)
  {
    sub_10000650C(&qword_10019E148);
    sub_1000F2054();
    sub_100010484(&qword_10019E190, &qword_10019E198);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E140);
  }
  return result;
}

unint64_t sub_1000F2054()
{
  unint64_t result = qword_10019E150;
  if (!qword_10019E150)
  {
    sub_10000650C(&qword_10019E158);
    sub_1000F20F4();
    sub_100010484(&qword_10019E180, &qword_10019E188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E150);
  }
  return result;
}

unint64_t sub_1000F20F4()
{
  unint64_t result = qword_10019E160;
  if (!qword_10019E160)
  {
    sub_10000650C(&qword_10019E168);
    sub_1000F2924(&qword_10019E170, &qword_10019E178);
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E160);
  }
  return result;
}

uint64_t sub_1000F21AC@<X0>(void *a1@<X8>)
{
  return sub_1000EDA84(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000F21BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000EDEE0(v6, v3, v4, a1);
}

uint64_t sub_1000F2260()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000F2298(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  uint64_t v4 = *(void *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1000F2310()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TourPhotosView() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 32) & ~v1);
  type metadata accessor for TourPhotosViewModel();
  uint64_t v3 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000F2458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TourPhotosView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000EE13C(a1, v8, v5, v6, a2);
}

unint64_t sub_1000F24F4()
{
  unint64_t result = qword_10019E1F8;
  if (!qword_10019E1F8)
  {
    sub_10000650C(&qword_10019E200);
    sub_1000F2570();
    sub_1000F29CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E1F8);
  }
  return result;
}

unint64_t sub_1000F2570()
{
  unint64_t result = qword_10019E208;
  if (!qword_10019E208)
  {
    sub_10000650C(&qword_10019E210);
    sub_1000F25EC();
    sub_100021350();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E208);
  }
  return result;
}

unint64_t sub_1000F25EC()
{
  unint64_t result = qword_10019E218;
  if (!qword_10019E218)
  {
    sub_10000650C(&qword_10019E220);
    sub_1000F268C();
    sub_100010484(&qword_10019E190, &qword_10019E198);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E218);
  }
  return result;
}

unint64_t sub_1000F268C()
{
  unint64_t result = qword_10019E228;
  if (!qword_10019E228)
  {
    sub_10000650C(&qword_10019E230);
    sub_1000F272C();
    sub_100010484(&qword_10019E298, &qword_10019E2A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E228);
  }
  return result;
}

unint64_t sub_1000F272C()
{
  unint64_t result = qword_10019E238;
  if (!qword_10019E238)
  {
    sub_10000650C(&qword_10019E240);
    sub_1000F27CC();
    sub_100010484(&qword_10019E288, &qword_10019E290);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E238);
  }
  return result;
}

unint64_t sub_1000F27CC()
{
  unint64_t result = qword_10019E248;
  if (!qword_10019E248)
  {
    sub_10000650C(&qword_10019E250);
    sub_1000F286C();
    sub_100010484(&qword_10019E278, &qword_10019E280);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E248);
  }
  return result;
}

unint64_t sub_1000F286C()
{
  unint64_t result = qword_10019E258;
  if (!qword_10019E258)
  {
    sub_10000650C(&qword_10019E260);
    sub_1000F2924(&qword_10019E268, &qword_10019E270);
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E258);
  }
  return result;
}

uint64_t sub_1000F2924(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    sub_10000650C(&qword_1001990A8);
    sub_100026D44();
    swift_getOpaqueTypeConformance2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F29CC()
{
  unint64_t result = qword_10019E2A8;
  if (!qword_10019E2A8)
  {
    sub_10000650C(&qword_10019E2B0);
    sub_10000650C(&qword_100198D20);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    swift_getOpaqueTypeConformance2();
    sub_100010484(&qword_10019E190, &qword_10019E198);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E2A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosScrollBar()
{
  return &type metadata for TourPhotosScrollBar;
}

uint64_t sub_1000F2ADC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F2F70()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000F2F90()
{
  unint64_t result = qword_10019E330;
  if (!qword_10019E330)
  {
    sub_10000650C(&qword_10019E310);
    sub_1000F300C();
    sub_100021350();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E330);
  }
  return result;
}

unint64_t sub_1000F300C()
{
  unint64_t result = qword_10019E338;
  if (!qword_10019E338)
  {
    sub_10000650C(&qword_10019E300);
    sub_100010484(qword_10019E340, &qword_10019E2F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E338);
  }
  return result;
}

uint64_t sub_1000F30AC@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_100006560(qword_100198AA0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000F3104@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  State.init(wrappedValue:)();
  *a2 = v8;
  a2[1] = v9;
  a2[2] = sub_100054ABC(0);
  a2[3] = v4;
  uint64_t v5 = type metadata accessor for SavedWallpaperView();
  sub_10001D6D8(a1, (uint64_t)a2 + *(int *)(v5 + 40), &qword_100198648);
  uint64_t v6 = (void *)((char *)a2 + *(int *)(v5 + 44));
  *uint64_t v6 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000F321C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(long long *__return_ptr)@<X3>, uint64_t a5@<X4>, void (*a6)(long long *__return_ptr, uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(long long *__return_ptr)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  void (*v45)(long long *__return_ptr, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned char *v49;
  unsigned char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned char *v58;
  uint64_t *v59;
  void *v60;
  uint64_t v61;
  unsigned char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned char *v73;
  unsigned char v75[4];
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned char *v85;
  uint64_t v86;
  unsigned char *v87;
  uint64_t v88;
  unsigned char *v89;
  unsigned char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  void (*v129)(long long *__return_ptr, uint64_t);
  uint64_t v130;
  uint64_t v131;
  void (*v132)(long long *__return_ptr);
  void (*v133)(long long *__return_ptr);
  int v134;
  __int16 v135;
  _DWORD v136[2];
  _DWORD v137[2];
  _DWORD v138[2];
  _DWORD v139[2];
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  unsigned char v144[7];
  unsigned char v145[7];
  unsigned char v146[7];
  unsigned char v147[11];
  __int16 v148;
  unsigned char v149[7];
  unsigned char v150[7];
  unsigned char v151[7];
  long long v152;
  long long v153;
  long long v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  long long v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  int v167;
  __int16 v168;
  char v169;
  unsigned char v170[7];
  unsigned char v171[7];
  unsigned char v172[7];
  unsigned char v173[7];
  int v174;
  __int16 v175;
  _OWORD v176[34];
  long long v177;
  long long v178;
  long long v179;
  long long v180;
  long long v181;
  long long v182;
  long long v183;
  long long v184;
  long long v185;
  char v186;
  unsigned char v187[7];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  unsigned char v193[7];
  uint64_t v194;
  char v195;
  unsigned char v196[7];
  char v197;
  char v198;
  int v199;
  __int16 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  unsigned char v206[7];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  unsigned char v212[7];
  char v213;
  unsigned char v214[7];
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  unsigned char v220[7];
  uint64_t v221;
  uint64_t v222;
  char v223;
  char v224;
  int v225;
  __int16 v226;
  uint64_t v227;
  char v228;
  char v229;
  int v230;
  __int16 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  unsigned char v237[7];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  unsigned char v243[7];
  char v244;
  unsigned char v245[7];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(long long *__return_ptr, uint64_t);
  char v250;
  unsigned char v251[7];
  uint64_t v252;
  uint64_t v253;
  char v254;
  char v255;
  int v256;
  __int16 v257;
  void (*v258)(long long *__return_ptr);

  uint64_t v132 = a8;
  uint64_t v133 = a4;
  uint64_t v128 = a7;
  uint64_t v129 = a6;
  uint64_t v130 = a5;
  uint64_t v84 = a3;
  uint64_t v82 = a1;
  uint64_t v83 = a2;
  uint64_t v93 = a9;
  uint64_t v131 = a10;
  uint64_t v88 = sub_100006560(&qword_10019ABF8) - 8;
  __chkstk_darwin(v88);
  uint64_t v87 = &v75[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100006560(&qword_10019ABE8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v75[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100006560(&qword_10019ABF0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v81 = &v75[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v86 = sub_100006560(&qword_10019A678) - 8;
  __chkstk_darwin(v86);
  unint64_t v85 = &v75[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_100006560(&qword_10019A680);
  __chkstk_darwin(v18 - 8);
  uint64_t v90 = &v75[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = sub_100006560(&qword_10019E3F0);
  uint64_t v91 = *(void *)(v20 - 8);
  uint64_t v92 = v20;
  __chkstk_darwin(v20);
  uint64_t v89 = &v75[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006560(&qword_10019AC00);
  type metadata accessor for ToolbarPlacement();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014D4D0;
  static ToolbarPlacement.navigationBar.getter();
  sub_100006560(&qword_10019E3D8);
  sub_1000F897C(&qword_10019E3F8, &qword_10019E3D8, (void (*)(void))sub_1000F81C8);
  View.toolbar(_:for:)();
  uint64_t v22 = swift_bridgeObjectRelease();
  v129(&v152, v22);
  uint64_t v80 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  long long v79 = static Edge.Set.all.getter();
  uint64_t v94 = static SafeAreaRegions.all.getter();
  uint64_t v161 = 0;
  uint64_t v125 = static VerticalAlignment.center.getter();
  unsigned __int8 v31 = v161;
  uint64_t v76 = v161;
  v133(&v177);
  LODWORD(v128) = static Edge.Set.vertical.getter();
  uint64_t v105 = BYTE1(v177);
  uint64_t v106 = v177;
  uint64_t v103 = v178;
  long long v104 = *((void *)&v177 + 1);
  uint64_t v100 = v179;
  uint64_t v101 = *((void *)&v178 + 1);
  uint64_t v98 = BYTE8(v179);
  uint64_t v95 = *((void *)&v180 + 1);
  uint64_t v97 = v180;
  uint64_t v124 = *((void *)&v181 + 1);
  uint64_t v119 = v181;
  unsigned __int8 v32 = v182;
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v77 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v163 = v32;
  uint64_t v162 = 0;
  HorizontalEdge.rawValue.getter();
  uint64_t v126 = Edge.init(rawValue:)();
  uint64_t v118 = static SafeAreaRegions.container.getter();
  uint64_t v102 = v163;
  uint64_t v110 = v162;
  uint64_t v164 = 1;
  uint64_t v133 = (void (*)(long long *__return_ptr))static VerticalAlignment.center.getter();
  uint64_t v111 = v164;
  v132(&v177);
  LODWORD(v132) = static Edge.Set.vertical.getter();
  uint64_t v108 = BYTE1(v177);
  unint64_t v109 = v177;
  uint64_t v115 = v178;
  uint64_t v116 = *((void *)&v177 + 1);
  uint64_t v113 = v179;
  uint64_t v114 = *((void *)&v178 + 1);
  uint64_t v112 = BYTE8(v179);
  uint64_t v122 = *((void *)&v180 + 1);
  uint64_t v123 = v180;
  uint64_t v120 = *((void *)&v181 + 1);
  uint64_t v121 = v181;
  unsigned __int8 v41 = v182;
  EdgeInsets.init(_all:)();
  uint64_t v78 = v42;
  uint64_t v130 = v44;
  uint64_t v131 = v43;
  uint64_t v129 = v45;
  uint64_t v166 = v41;
  uint64_t v165 = 0;
  HorizontalEdge.rawValue.getter();
  uint64_t v127 = Edge.init(rawValue:)();
  uint64_t v117 = static SafeAreaRegions.container.getter();
  uint64_t v96 = v166;
  uint64_t v107 = v165;
  uint64_t v169 = 1;
  uint64_t v140 = v174;
  uint64_t v141 = v175;
  v139[0] = *(_DWORD *)v173;
  *(_DWORD *)((char *)v139 + 3) = *(_DWORD *)&v173[3];
  v138[0] = *(_DWORD *)v172;
  *(_DWORD *)((char *)v138 + 3) = *(_DWORD *)&v172[3];
  *(_DWORD *)((char *)v137 + 3) = *(_DWORD *)&v171[3];
  v137[0] = *(_DWORD *)v171;
  v136[0] = *(_DWORD *)v170;
  *(_DWORD *)((char *)v136 + 3) = *(_DWORD *)&v170[3];
  uint64_t v99 = 1;
  uint64_t v134 = v167;
  uint64_t v135 = v168;
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 0;
  uint64_t v46 = sub_100006560(&qword_10019AC08);
  sub_10006B818(v82, v83, v84, (double *)&v13[*(int *)(v46 + 44)]);
  uint64_t v47 = static Edge.Set.all.getter();
  uint64_t v48 = static SafeAreaRegions.all.getter();
  uint64_t v49 = v81;
  sub_1000066D4((uint64_t)v13, (uint64_t)v81, &qword_10019ABE8);
  uint64_t v50 = &v49[*(int *)(v15 + 44)];
  long long v51 = (uint64_t)v49;
  *(void *)uint64_t v50 = v48;
  v50[8] = v47;
  sub_1000067DC((uint64_t)v13, &qword_10019ABE8);
  long long v52 = static Alignment.center.getter();
  long long v54 = v53;
  *(_DWORD *)((char *)&v176[23] + 10) = v174;
  *(_DWORD *)((char *)&v176[26] + 1) = *(_DWORD *)v173;
  *(_DWORD *)((char *)&v176[28] + 9) = *(_DWORD *)v172;
  *(_DWORD *)((char *)&v176[29] + 1) = *(_DWORD *)v171;
  *(_DWORD *)((char *)&v176[31] + 9) = *(_DWORD *)v170;
  *(_DWORD *)((char *)&v176[33] + 2) = v167;
  HIWORD(v176[23]) = v175;
  DWORD1(v176[26]) = *(_DWORD *)&v173[3];
  HIDWORD(v176[28]) = *(_DWORD *)&v172[3];
  DWORD1(v176[29]) = *(_DWORD *)&v171[3];
  HIDWORD(v176[31]) = *(_DWORD *)&v170[3];
  WORD3(v176[33]) = v168;
  v176[6] = v158;
  v176[7] = v159;
  v176[8] = v160;
  v176[2] = v154;
  v176[3] = v155;
  v176[4] = v156;
  v176[5] = v157;
  v176[0] = v152;
  v176[1] = v153;
  LOBYTE(v49) = v80;
  LOBYTE(v176[9]) = v80;
  *((void *)&v176[9] + 1) = v24;
  *(void *)&v176[10] = v26;
  *((void *)&v176[10] + 1) = v28;
  *(void *)&v176[11] = v30;
  BYTE8(v176[11]) = v31;
  *(void *)&v176[12] = v94;
  long long v55 = v79;
  BYTE8(v176[12]) = v79;
  LOBYTE(v176[13]) = v106;
  BYTE1(v176[13]) = v105;
  *((void *)&v176[13] + 1) = v104;
  *(void *)&v176[14] = v103;
  *((void *)&v176[14] + 1) = v101;
  *(void *)&v176[15] = v100;
  BYTE8(v176[15]) = v98;
  *(void *)&v176[16] = v97;
  *((void *)&v176[16] + 1) = v95;
  *(void *)&v176[17] = v119;
  *((void *)&v176[17] + 1) = v124;
  LOBYTE(v176[18]) = v102;
  BYTE8(v176[18]) = v128;
  *(void *)&v176[19] = v34;
  *((void *)&v176[19] + 1) = v36;
  long long v56 = v36;
  *(void *)&v176[20] = v38;
  *((void *)&v176[20] + 1) = v40;
  LOBYTE(v176[21]) = v110;
  *((void *)&v176[21] + 1) = v118;
  *(void *)&v176[22] = 0;
  BYTE8(v176[22]) = v111;
  BYTE9(v176[22]) = v126;
  *(void *)&v176[23] = v125;
  BYTE8(v176[23]) = v109;
  BYTE9(v176[23]) = v108;
  *(void *)&v176[24] = v116;
  *((void *)&v176[24] + 1) = v115;
  *(void *)&v176[25] = v114;
  *((void *)&v176[25] + 1) = v113;
  LOBYTE(v176[26]) = v112;
  *((void *)&v176[26] + 1) = v123;
  *(void *)&v176[27] = v122;
  *((void *)&v176[27] + 1) = v121;
  *(void *)&v176[28] = v120;
  BYTE8(v176[28]) = v96;
  LOBYTE(v176[29]) = (_BYTE)v132;
  uint64_t v57 = v78;
  *((void *)&v176[29] + 1) = v78;
  *(void *)&v176[30] = v131;
  *((void *)&v176[30] + 1) = v130;
  *(void *)&v176[31] = v129;
  BYTE8(v176[31]) = v107;
  v176[32] = (unint64_t)v117;
  LOBYTE(v176[33]) = v99;
  BYTE1(v176[33]) = v127;
  *((void *)&v176[33] + 1) = v133;
  uint64_t v58 = v87;
  sub_1000066D4(v51, (uint64_t)v87, &qword_10019ABF0);
  uint64_t v59 = (uint64_t *)&v58[*(int *)(v88 + 44)];
  *uint64_t v59 = v52;
  v59[1] = v54;
  uint64_t v60 = v85;
  sub_1000066D4((uint64_t)v58, (uint64_t)&v85[*(int *)(v86 + 44)], &qword_10019ABF8);
  memcpy(v60, v176, 0x220uLL);
  sub_1000F8268((uint64_t)v176);
  sub_1000067DC((uint64_t)v58, &qword_10019ABF8);
  sub_1000067DC(v51, &qword_10019ABF0);
  uint64_t v186 = (char)v49;
  uint64_t v192 = v76;
  uint64_t v194 = v94;
  char v195 = v55;
  uint64_t v197 = v106;
  char v198 = v105;
  char v201 = v104;
  uint64_t v202 = v103;
  uint64_t v203 = v101;
  uint64_t v204 = v100;
  uint64_t v205 = v98;
  long long v207 = v97;
  long long v208 = v95;
  long long v183 = v158;
  long long v184 = v159;
  long long v185 = v160;
  uint64_t v179 = v154;
  uint64_t v180 = v155;
  uint64_t v181 = v156;
  uint64_t v182 = v157;
  uint64_t v177 = v152;
  uint64_t v178 = v153;
  *(_DWORD *)long long v187 = *(_DWORD *)v151;
  *(_DWORD *)&v187[3] = *(_DWORD *)&v151[3];
  uint64_t v188 = v24;
  unint64_t v189 = v26;
  char v190 = v28;
  uint64_t v191 = v30;
  *(_DWORD *)uint64_t v193 = *(_DWORD *)v150;
  *(_DWORD *)&v193[3] = *(_DWORD *)&v150[3];
  *(_DWORD *)&v196[3] = *(_DWORD *)&v149[3];
  *(_DWORD *)uint64_t v196 = *(_DWORD *)v149;
  char v200 = v148;
  uint64_t v199 = *(_DWORD *)&v147[7];
  *(_DWORD *)char v206 = *(_DWORD *)v147;
  *(_DWORD *)&v206[3] = *(_DWORD *)&v147[3];
  long long v209 = v119;
  long long v210 = v124;
  long long v211 = v102;
  *(_DWORD *)long long v212 = *(_DWORD *)v146;
  *(_DWORD *)&v212[3] = *(_DWORD *)&v146[3];
  long long v213 = v128;
  *(_DWORD *)uint64_t v214 = *(_DWORD *)v145;
  *(_DWORD *)&_OWORD v214[3] = *(_DWORD *)&v145[3];
  uint64_t v215 = v77;
  uint64_t v216 = v56;
  uint64_t v217 = v38;
  uint64_t v218 = v40;
  char v219 = v110;
  *(_DWORD *)uint64_t v220 = *(_DWORD *)v144;
  *(_DWORD *)&v220[3] = *(_DWORD *)&v144[3];
  char v221 = v118;
  uint64_t v222 = 0;
  uint64_t v223 = v111;
  uint64_t v224 = v126;
  char v225 = v142;
  uint64_t v226 = v143;
  char v227 = v125;
  uint64_t v228 = v109;
  uint64_t v229 = v108;
  char v230 = v140;
  v231 = v141;
  v232 = v116;
  char v233 = v115;
  v234 = v114;
  char v235 = v113;
  v236 = v112;
  *(_DWORD *)char v237 = v139[0];
  *(_DWORD *)&v237[3] = *(_DWORD *)((char *)v139 + 3);
  char v238 = v123;
  v239 = v122;
  v240 = v121;
  long long v241 = v120;
  long long v242 = v96;
  *(_DWORD *)long long v243 = v138[0];
  *(_DWORD *)&v243[3] = *(_DWORD *)((char *)v138 + 3);
  long long v244 = (char)v132;
  *(_DWORD *)long long v245 = v137[0];
  *(_DWORD *)&v245[3] = *(_DWORD *)((char *)v137 + 3);
  long long v246 = v57;
  long long v247 = v131;
  long long v248 = v130;
  long long v249 = v129;
  v250 = v107;
  *(_DWORD *)v251 = v136[0];
  *(_DWORD *)&v251[3] = *(_DWORD *)((char *)v136 + 3);
  v252 = v117;
  v253 = 0;
  v254 = v99;
  v255 = v127;
  v256 = v134;
  v257 = v135;
  v258 = v133;
  sub_1000F8300((uint64_t)&v177);
  uint64_t v61 = static Alignment.top.getter();
  uint64_t v62 = v90;
  sub_100052728(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v90, 0.0, 1, INFINITY, 0, v61, v63);
  sub_1000067DC((uint64_t)v60, &qword_10019A678);
  uint64_t v64 = static Alignment.center.getter();
  uint64_t v66 = v65;
  long long v67 = sub_100006560(&qword_10019E410);
  uint64_t v68 = v93;
  uint64_t v69 = v93 + *(int *)(v67 + 36);
  sub_1000066D4((uint64_t)v62, v69, &qword_10019A680);
  uint64_t v70 = (uint64_t *)(v69 + *(int *)(sub_100006560(&qword_10019E418) + 36));
  *uint64_t v70 = v64;
  v70[1] = v66;
  uint64_t v72 = v91;
  uint64_t v71 = v92;
  uint64_t v73 = v89;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v91 + 16))(v68, v89, v92);
  sub_1000067DC((uint64_t)v62, &qword_10019A680);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v72 + 8))(v73, v71);
}

uint64_t sub_1000F3EE8()
{
  uint64_t v0 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v1._countAndFlagsBits = 0xD00000000000003CLL;
  v1._object = (void *)0x80000001001590A0;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v1);
  Image.init(systemName:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v2);
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_1000F3FC0()
{
  type metadata accessor for SavedWallpaperViewModel();
  type metadata accessor for State();
  State.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for SavedWallpaperView()
{
  return sub_1000068A4();
}

void sub_1000F4038()
{
  sub_10007A794(319, (unint64_t *)&qword_100199860, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_10007A794(319, (unint64_t *)&qword_100198BC0, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000F4144(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    a1[3] = a2[3];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000F4324(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000F4464(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000F45EC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 40);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000067DC((uint64_t)a1 + v6, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 44);
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    sub_1000067DC((uint64_t)a1 + v10, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000F47C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for OpenURLAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

void *sub_1000F4944(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    sub_1000067DC((uint64_t)a1 + v7, qword_100198AA0);
    uint64_t v10 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = *(int *)(a3 + 44);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    sub_1000067DC((uint64_t)a1 + v12, &qword_1001982C0);
    uint64_t v15 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for OpenURLAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000F4B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F4B2C);
}

uint64_t sub_1000F4B2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198B50);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000F4C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F4C74);
}

void *sub_1000F4C74(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198B50);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 44);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1000F4DA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000F4DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v47 = a2;
  uint64_t v5 = sub_100006560(&qword_10019E3C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019E3D0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_10019E3D8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(a1 + 16);
  uint64_t v46 = *(void *)(a1 + 24);
  uint64_t v52 = v45;
  uint64_t v53 = v46;
  uint64_t v54 = v3;
  sub_100006560(&qword_10019E3E0);
  sub_100010484(&qword_10019E3E8, &qword_10019E3E0);
  NavigationStack.init<>(root:)();
  char v17 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v8, v5);
  uint64_t v26 = &v12[*(int *)(v10 + 44)];
  *uint64_t v26 = v17;
  *((void *)v26 + 1) = v19;
  *((void *)v26 + 2) = v21;
  *((void *)v26 + 3) = v23;
  *((void *)v26 + 4) = v25;
  v26[40] = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v27 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_1000066D4((uint64_t)v12, (uint64_t)v16, &qword_10019E3D0);
  uint64_t v36 = &v16[*(int *)(v14 + 44)];
  *uint64_t v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  v36[40] = 0;
  sub_1000067DC((uint64_t)v12, &qword_10019E3D0);
  uint64_t v38 = *(void *)(v3 + 16);
  uint64_t v37 = *(void *)(v3 + 24);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v39 = static MainActor.shared.getter();
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v39;
  v40[3] = &protocol witness table for MainActor;
  v40[4] = v38;
  v40[5] = v37;
  swift_retain();
  uint64_t v41 = static MainActor.shared.getter();
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = v41;
  v42[3] = &protocol witness table for MainActor;
  v42[4] = v38;
  v42[5] = v37;
  Binding.init(get:set:)();
  uint64_t v49 = v45;
  uint64_t v50 = v46;
  uint64_t v51 = v3;
  sub_1000F321C(v55, v56, v57, (void (*)(long long *__return_ptr))sub_1000F7D98, 0, (void (*)(long long *__return_ptr, uint64_t))sub_1000F7E24, 0, (void (*)(long long *__return_ptr))sub_1000F81BC, v47, (uint64_t)v48);
  swift_release();
  swift_release();
  return sub_1000067DC((uint64_t)v16, &qword_10019E3D8);
}

uint64_t sub_1000F5200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = static HorizontalAlignment.center.getter();
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v8 = sub_100006560(&qword_10019E420);
  return sub_1000F5264(a1, a2, a3, a4 + *(int *)(v8 + 44));
}

uint64_t sub_1000F5264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v195 = a1;
  uint64_t v189 = a4;
  uint64_t v6 = sub_100006560(&qword_10019E428);
  uint64_t v171 = *(void *)(v6 - 8);
  uint64_t v172 = v6;
  __chkstk_darwin(v6);
  uint64_t v170 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019E430);
  uint64_t v181 = *(void *)(v8 - 8);
  uint64_t v182 = v8;
  __chkstk_darwin(v8);
  uint64_t v169 = (char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v10 - 8);
  long long v187 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v192 = *(void *)(v12 - 8);
  uint64_t v193 = v12;
  __chkstk_darwin(v12);
  uint64_t v167 = v13;
  uint64_t v168 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v180 = (char *)&v165 - v15;
  uint64_t v16 = sub_100006560(&qword_10019E438);
  __chkstk_darwin(v16 - 8);
  uint64_t v188 = (uint64_t)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v196 = (uint64_t)&v165 - v19;
  uint64_t v198 = a2;
  uint64_t v191 = a3;
  uint64_t v199 = type metadata accessor for SavedWallpaperView();
  uint64_t v190 = *(void *)(v199 - 8);
  uint64_t v20 = *(void *)(v190 + 64);
  __chkstk_darwin(v199);
  uint64_t v194 = (char *)&v165 - v21;
  uint64_t v174 = sub_100006560(&qword_10019E440);
  __chkstk_darwin(v174);
  uint64_t v23 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = type metadata accessor for CoordinateSpace();
  uint64_t v24 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v175 = (char *)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Image.ResizingMode();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = sub_100006560(&qword_10019E448);
  __chkstk_darwin(v173);
  uint64_t v31 = (char *)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_100006560(&qword_10019E450);
  __chkstk_darwin(v176);
  uint64_t v179 = (id *)((char *)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v177 = sub_100006560(&qword_10019E458);
  __chkstk_darwin(v177);
  long long v184 = (char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100006560(&qword_10019E460);
  uint64_t v185 = *(void *)(v34 - 8);
  uint64_t v186 = v34;
  __chkstk_darwin(v34);
  uint64_t v183 = (uint64_t)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100006560(&qword_10019E468);
  __chkstk_darwin(v36 - 8);
  uint64_t v197 = (uint64_t)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v200 = (uint64_t)&v165 - v39;
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v41 = [self imageNamed:v40];

  uint64_t v166 = v20;
  if (v41)
  {
    id v165 = v41;
    Image.init(uiImage:)();
    (*(void (**)(char *, void, uint64_t))(v27 + 104))(v29, enum case for Image.ResizingMode.stretch(_:), v26);
    uint64_t v42 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    sub_1000F3FC0();
    sub_10001A74C();
    swift_release();
    char v43 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    long long v202 = (unint64_t)v42;
    *(_WORD *)uint64_t v203 = 1;
    v203[8] = v43;
    *(void *)&v203[16] = v45;
    *(void *)&v203[24] = v47;
    *(void *)&v203[32] = v49;
    *(void *)&v203[40] = v51;
    v203[48] = 0;
    *(_WORD *)&v203[49] = 0;
    *(void *)&v203[56] = v235;
    v203[64] = v236;
    *(void *)&v203[72] = v237;
    v203[80] = v238;
    *(void *)&v203[88] = v239;
    v203[96] = v240;
    *(void *)&v203[104] = v241;
    v203[112] = v242;
    *(void *)&v203[120] = v243;
    v203[128] = v244;
    *(void *)&v203[136] = v245;
    v203[144] = v246;
    *(_OWORD *)&v203[152] = v247;
    uint64_t v52 = v175;
    uint64_t v53 = v178;
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v175, enum case for CoordinateSpace.local(_:), v178);
    uint64_t v54 = v174;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v23[*(int *)(v174 + 36)], v52, v53);
    *(void *)uint64_t v23 = &type metadata for BezelSizePreferenceKey;
    uint64_t v55 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v23[*(int *)(v54 + 40)];
    *uint64_t v55 = sub_100025A40;
    v55[1] = 0;
    sub_1000066D4((uint64_t)v23, (uint64_t)&v31[*(int *)(v173 + 36)], &qword_10019E440);
    long long v56 = *(_OWORD *)&v203[128];
    *((_OWORD *)v31 + 8) = *(_OWORD *)&v203[112];
    *((_OWORD *)v31 + 9) = v56;
    *((_OWORD *)v31 + 10) = *(_OWORD *)&v203[144];
    *((void *)v31 + 22) = *(void *)&v203[160];
    long long v57 = *(_OWORD *)&v203[64];
    *((_OWORD *)v31 + 4) = *(_OWORD *)&v203[48];
    *((_OWORD *)v31 + 5) = v57;
    long long v58 = *(_OWORD *)&v203[96];
    *((_OWORD *)v31 + 6) = *(_OWORD *)&v203[80];
    *((_OWORD *)v31 + 7) = v58;
    long long v59 = *(_OWORD *)v203;
    *(_OWORD *)uint64_t v31 = v202;
    *((_OWORD *)v31 + 1) = v59;
    long long v60 = *(_OWORD *)&v203[32];
    *((_OWORD *)v31 + 2) = *(_OWORD *)&v203[16];
    *((_OWORD *)v31 + 3) = v60;
    sub_1000636C8((uint64_t)&v202);
    sub_1000067DC((uint64_t)v23, &qword_10019E440);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v52, v53);
    swift_release();
    uint64_t v61 = v190;
    uint64_t v62 = v194;
    uint64_t v63 = v195;
    uint64_t v64 = v20;
    uint64_t v65 = v199;
    (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v194, v195, v199);
    unint64_t v66 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    unint64_t v67 = (v64 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v68 = swift_allocObject();
    uint64_t v69 = v191;
    *(void *)(v68 + 16) = v198;
    *(void *)(v68 + 24) = v69;
    (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v68 + v66, v62, v65);
    uint64_t v70 = v165;
    *(void *)(v68 + v67) = v165;
    uint64_t v71 = (char *)v179;
    sub_1000066D4((uint64_t)v31, (uint64_t)v179, &qword_10019E448);
    uint64_t v72 = (uint64_t (**)(uint64_t))&v71[*(int *)(v176 + 36)];
    *uint64_t v72 = sub_1000F8BE8;
    v72[1] = (uint64_t (*)(uint64_t))v68;
    id v73 = v70;
    sub_1000067DC((uint64_t)v31, &qword_10019E448);
    uint64_t v74 = static Alignment.center.getter();
    uint64_t v76 = v75;
    uint64_t v77 = (uint64_t)v184;
    uint64_t v78 = (uint64_t)&v184[*(int *)(v177 + 36)];
    sub_1000F65CC(v63, v198, v69, v78);
    long long v79 = (uint64_t *)(v78 + *(int *)(sub_100006560(&qword_10019E4B8) + 36));
    *long long v79 = v74;
    v79[1] = v76;
    sub_10001D6D8((uint64_t)v71, v77, &qword_10019E450);
    LOBYTE(v74) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    uint64_t v88 = v183;
    sub_1000066D4(v77, v183, &qword_10019E458);

    uint64_t v89 = v186;
    uint64_t v90 = v88 + *(int *)(v186 + 36);
    *(unsigned char *)uint64_t v90 = v74;
    *(void *)(v90 + 8) = v81;
    *(void *)(v90 + 16) = v83;
    *(void *)(v90 + 24) = v85;
    *(void *)(v90 + 32) = v87;
    *(unsigned char *)(v90 + 40) = 0;
    sub_1000067DC(v77, &qword_10019E458);
    uint64_t v91 = v88;
    uint64_t v92 = v200;
    sub_10001D6D8(v91, v200, &qword_10019E460);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v185 + 56))(v92, 0, 1, v89);
    uint64_t v93 = v63;
  }
  else
  {
    uint64_t v92 = v200;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v185 + 56))(v200, 1, 1, v186);
    uint64_t v93 = v195;
  }
  uint64_t v94 = static HorizontalAlignment.center.getter();
  sub_1000F7424((uint64_t)v216);
  *(_OWORD *)((char *)&v218[6] + 7) = v216[6];
  *(_OWORD *)((char *)&v218[5] + 7) = v216[5];
  *(_OWORD *)((char *)&v218[2] + 7) = v216[2];
  *(_OWORD *)((char *)&v218[1] + 7) = v216[1];
  *(_OWORD *)((char *)&v218[7] + 7) = v217[0];
  v218[8] = *(_OWORD *)((char *)v217 + 9);
  *(_OWORD *)((char *)&v218[3] + 7) = v216[3];
  char v219 = 0;
  *(_OWORD *)((char *)&v218[4] + 7) = v216[4];
  *(_OWORD *)((char *)v218 + 7) = v216[0];
  char v95 = 0;
  long long v232 = v218[6];
  long long v233 = v218[7];
  long long v234 = *(_OWORD *)((char *)v217 + 9);
  long long v228 = v218[2];
  long long v229 = v218[3];
  long long v231 = v218[5];
  long long v230 = v218[4];
  long long v227 = v218[1];
  long long v226 = v218[0];
  int v96 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v98 = v97;
  uint64_t v100 = v99;
  uint64_t v102 = v101;
  uint64_t v104 = v103;
  unsigned __int8 v220 = 0;
  LODWORD(v184) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v106 = v105;
  uint64_t v108 = v107;
  uint64_t v110 = v109;
  uint64_t v112 = v111;
  LODWORD(v183) = v220;
  char v221 = 0;
  uint64_t v113 = (uint64_t)v187;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v114 = v192;
  uint64_t v115 = v193;
  int v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v113, 1, v193);
  uint64_t v186 = v94;
  LODWORD(v195) = 0;
  LODWORD(v185) = v96;
  if (v116 == 1)
  {
    sub_1000067DC(v113, &qword_100198630);
    uint64_t v117 = 1;
    uint64_t v118 = v196;
    uint64_t v119 = v182;
  }
  else
  {
    uint64_t v179 = *(id **)(v114 + 32);
    uint64_t v120 = v180;
    ((void (*)(char *, uint64_t, uint64_t))v179)(v180, v113, v115);
    uint64_t v121 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v194, v93, v199);
    uint64_t v122 = v114;
    uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
    uint64_t v124 = v168;
    v123(v168, v120, v115);
    unint64_t v125 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
    unint64_t v126 = (v166 + *(unsigned __int8 *)(v122 + 80) + v125) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    uint64_t v127 = v115;
    uint64_t v128 = swift_allocObject();
    uint64_t v129 = v199;
    uint64_t v130 = v191;
    *(void *)(v128 + 16) = v198;
    *(void *)(v128 + 24) = v130;
    (*(void (**)(unint64_t, char *, uint64_t))(v121 + 32))(v128 + v125, v194, v129);
    uint64_t v131 = ((uint64_t (*)(unint64_t, char *, uint64_t))v179)(v128 + v126, v124, v127);
    __chkstk_darwin(v131);
    sub_100006560(&qword_10019E478);
    sub_1000F8FB0(&qword_10019E480, &qword_10019E478, (void (*)(void))sub_1000F88B0);
    uint64_t v132 = v170;
    Button.init(action:label:)();
    LOBYTE(v128) = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v191 = v112;
    uint64_t v133 = v106;
    uint64_t v134 = v98;
    uint64_t v136 = v135;
    uint64_t v198 = v108;
    uint64_t v199 = v104;
    uint64_t v137 = v100;
    uint64_t v139 = v138;
    uint64_t v194 = v110;
    uint64_t v140 = v102;
    uint64_t v142 = v141;
    uint64_t v144 = v143;
    uint64_t v146 = v171;
    uint64_t v145 = v172;
    uint64_t v147 = v169;
    (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v169, v132, v172);
    uint64_t v119 = v182;
    long long v148 = &v147[*(int *)(v182 + 36)];
    *long long v148 = v128;
    *((void *)v148 + 1) = v136;
    *((void *)v148 + 2) = v139;
    uint64_t v98 = v134;
    uint64_t v106 = v133;
    uint64_t v112 = v191;
    uint64_t v100 = v137;
    *((void *)v148 + 3) = v142;
    *((void *)v148 + 4) = v144;
    uint64_t v102 = v140;
    uint64_t v110 = v194;
    uint64_t v108 = v198;
    uint64_t v104 = v199;
    v148[40] = 0;
    uint64_t v149 = v145;
    char v95 = v195;
    (*(void (**)(char *, uint64_t))(v146 + 8))(v132, v149);
    (*(void (**)(char *, uint64_t))(v192 + 8))(v180, v193);
    uint64_t v150 = (uint64_t)v147;
    uint64_t v92 = v200;
    uint64_t v118 = v196;
    sub_10001D6D8(v150, v196, &qword_10019E430);
    uint64_t v117 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56))(v118, v117, 1, v119);
  uint64_t v151 = v118;
  uint64_t v152 = v197;
  sub_1000066D4(v92, v197, &qword_10019E468);
  char v153 = v221;
  uint64_t v154 = v151;
  uint64_t v155 = v188;
  sub_1000066D4(v154, v188, &qword_10019E438);
  uint64_t v156 = v152;
  uint64_t v157 = v189;
  sub_1000066D4(v156, v189, &qword_10019E468);
  uint64_t v158 = sub_100006560(&qword_10019E470);
  uint64_t v159 = *(int *)(v158 + 48);
  *(_OWORD *)((char *)&v201[12] + 1) = v231;
  *(_OWORD *)((char *)&v201[14] + 1) = v232;
  *(_OWORD *)((char *)&v201[16] + 1) = v233;
  *(_OWORD *)((char *)&v201[18] + 1) = v234;
  *(_OWORD *)((char *)&v201[4] + 1) = v227;
  *(_OWORD *)((char *)&v201[6] + 1) = v228;
  *(_OWORD *)((char *)&v201[8] + 1) = v229;
  *(_OWORD *)((char *)&v201[10] + 1) = v230;
  uint64_t v160 = v186;
  v201[0] = v186;
  v201[1] = 0x4020000000000000;
  LOBYTE(v201[2]) = v95;
  *(_OWORD *)((char *)&v201[2] + 1) = v226;
  *(_DWORD *)((char *)&v201[20] + 1) = *(_DWORD *)v225;
  HIDWORD(v201[20]) = *(_DWORD *)&v225[3];
  char v161 = v185;
  LOBYTE(v201[21]) = v185;
  *(_DWORD *)((char *)&v201[21] + 1) = *(_DWORD *)v224;
  HIDWORD(v201[21]) = *(_DWORD *)&v224[3];
  v201[22] = v98;
  v201[23] = v100;
  v201[24] = v102;
  v201[25] = v104;
  char v162 = v183;
  LOBYTE(v201[26]) = v183;
  *(_DWORD *)((char *)&v201[26] + 1) = *(_DWORD *)v223;
  HIDWORD(v201[26]) = *(_DWORD *)&v223[3];
  char v163 = (char)v184;
  LOBYTE(v201[27]) = (_BYTE)v184;
  HIDWORD(v201[27]) = *(_DWORD *)&v222[3];
  *(_DWORD *)((char *)&v201[27] + 1) = *(_DWORD *)v222;
  v201[28] = v106;
  v201[29] = v108;
  v201[30] = v110;
  v201[31] = v112;
  LOBYTE(v201[32]) = v153;
  memcpy((void *)(v157 + v159), v201, 0x101uLL);
  sub_1000066D4(v155, v157 + *(int *)(v158 + 64), &qword_10019E438);
  sub_1000F8428((uint64_t)v201);
  sub_1000067DC(v196, &qword_10019E438);
  sub_1000067DC(v200, &qword_10019E468);
  sub_1000067DC(v155, &qword_10019E438);
  *(_OWORD *)&v203[81] = v231;
  *(_OWORD *)&v203[97] = v232;
  *(_OWORD *)&v203[113] = v233;
  *(_OWORD *)&v203[129] = v234;
  *(_OWORD *)&v203[17] = v227;
  *(_OWORD *)&v203[33] = v228;
  *(_OWORD *)&v203[49] = v229;
  *(_OWORD *)&v203[65] = v230;
  *(void *)&long long v202 = v160;
  *((void *)&v202 + 1) = 0x4020000000000000;
  v203[0] = v195;
  *(_OWORD *)&v203[1] = v226;
  *(_DWORD *)&v203[145] = *(_DWORD *)v225;
  *(_DWORD *)&v203[148] = *(_DWORD *)&v225[3];
  v203[152] = v161;
  *(_DWORD *)&v203[153] = *(_DWORD *)v224;
  *(_DWORD *)&v203[156] = *(_DWORD *)&v224[3];
  *(void *)&v203[160] = v98;
  uint64_t v204 = v100;
  uint64_t v205 = v102;
  uint64_t v206 = v104;
  char v207 = v162;
  *(_DWORD *)long long v208 = *(_DWORD *)v223;
  *(_DWORD *)&v208[3] = *(_DWORD *)&v223[3];
  char v209 = v163;
  *(_DWORD *)&v210[3] = *(_DWORD *)&v222[3];
  *(_DWORD *)long long v210 = *(_DWORD *)v222;
  uint64_t v211 = v106;
  uint64_t v212 = v108;
  long long v213 = v110;
  uint64_t v214 = v112;
  char v215 = v153;
  sub_1000F84D4((uint64_t)&v202);
  return sub_1000067DC(v197, &qword_10019E468);
}

uint64_t sub_1000F64C4(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for SavedWallpaperView();
  sub_1000F3FC0();
  sub_10001A344();
  swift_release();
  sub_1000F3FC0();
  sub_10001A2BC();
  swift_release();
  [a3 size];
  sub_1000F3FC0();
  [a3 size];
  sub_10001A56C();
  swift_release();
  sub_1000F3FC0();
  [a3 size];
  sub_10001A614();

  return swift_release();
}

uint64_t sub_1000F65CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[0] = a1;
  v22[1] = a4;
  uint64_t v6 = type metadata accessor for SavedWallpaperView();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v22 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000F3FC0();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v17 + *(void *)(*(void *)v17 + 96), a2);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 0, 1, v18);
  (*(void (**)(char *, void, uint64_t))(v7 + 16))(v9, v22[0], v6);
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v20 + v19, v9, v6);
  sub_100006560(&qword_10019E4C0);
  sub_1000F8EE4();
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t sub_1000F68BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v70 = (char *)a4;
  uint64_t v72 = a2;
  uint64_t v68 = a1;
  uint64_t v77 = a5;
  uint64_t v60 = sub_100006560(&qword_100199E40);
  __chkstk_darwin(v60);
  uint64_t v62 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100006560(&qword_10019E528);
  __chkstk_darwin(v61);
  unint64_t v65 = (unint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100006560(&qword_10019E518);
  __chkstk_darwin(v76);
  uint64_t v63 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t v74 = sub_100006560(&qword_10019E540);
  __chkstk_darwin(v74);
  uint64_t v75 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v64);
  uint64_t v67 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v71);
  uint64_t v14 = (double *)((char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Image.ResizingMode();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100006560(&qword_10019E4D8);
  __chkstk_darwin(v73);
  uint64_t v20 = (_OWORD *)((char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v66 = (uint64_t)&v58 - v22;
  uint64_t v23 = type metadata accessor for AsyncImagePhase();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v25 = __chkstk_darwin(v23);
  uint64_t v27 = (uint64_t *)((char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v24 + 16))(v27, v68, v23, v25);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v24 + 88))(v27, v23) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    uint64_t v68 = *v27;
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
    unint64_t v65 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v28 = v98;
    uint64_t v63 = v99;
    uint64_t v29 = v100;
    uint64_t v62 = v101;
    uint64_t v60 = v105;
    uint64_t v61 = v103;
    uint64_t v58 = v108;
    uint64_t v59 = v107;
    char v84 = 1;
    char v83 = BYTE8(v98);
    char v82 = BYTE8(v99);
    char v81 = BYTE8(v100);
    char v80 = v102;
    char v79 = v104;
    char v78 = v106;
    type metadata accessor for SavedWallpaperView();
    sub_1000F3FC0();
    sub_10001A6D4();
    swift_release();
    sub_1000F3FC0();
    sub_10001A6F8();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    char v86 = v110;
    char v85 = v112;
    long long v87 = v65;
    LOBYTE(v88) = v84;
    BYTE1(v88) = 1;
    *((void *)&v88 + 1) = v28;
    LOBYTE(v89) = v83;
    *((void *)&v89 + 1) = v63;
    LOBYTE(v90) = v82;
    *((void *)&v90 + 1) = v29;
    LOBYTE(v91) = v81;
    *((void *)&v91 + 1) = v62;
    LOBYTE(v92) = v80;
    *((void *)&v92 + 1) = v61;
    LOBYTE(v93) = v79;
    *((void *)&v93 + 1) = v60;
    LOBYTE(v94) = v78;
    *((void *)&v94 + 1) = v59;
    *(void *)&long long v95 = v58;
    *((void *)&v95 + 1) = v109;
    LOBYTE(v96) = v110;
    *((void *)&v96 + 1) = v111;
    LOBYTE(v97[0]) = v112;
    *(_OWORD *)((char *)v97 + 8) = v113;
    WORD4(v97[1]) = 0;
    sub_1000F3FC0();
    double v30 = sub_10001A71C();
    swift_release();
    uint64_t v31 = (char *)v14 + *(int *)(v71 + 20);
    uint64_t v32 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v33 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
    *uint64_t v14 = v30;
    v14[1] = v30;
    uint64_t v34 = v67;
    sub_10001081C((uint64_t)v14, v67);
    *(_WORD *)(v34 + *(int *)(v64 + 36)) = 256;
    sub_1000066D4(v34, (uint64_t)v20 + *(int *)(v73 + 36), &qword_100198618);
    long long v35 = v96;
    v20[8] = v95;
    v20[9] = v35;
    v20[10] = v97[0];
    *(_OWORD *)((char *)v20 + 170) = *(_OWORD *)((char *)v97 + 10);
    long long v36 = v92;
    v20[4] = v91;
    v20[5] = v36;
    long long v37 = v94;
    v20[6] = v93;
    v20[7] = v37;
    long long v38 = v88;
    *uint64_t v20 = v87;
    v20[1] = v38;
    long long v39 = v90;
    void v20[2] = v89;
    v20[3] = v39;
    sub_1000636C8((uint64_t)&v87);
    sub_1000067DC(v34, &qword_100198618);
    sub_100010934((uint64_t)v14);
    swift_release();
    uint64_t v40 = (uint64_t)v20;
    uint64_t v41 = v66;
    sub_10001D6D8(v40, v66, &qword_10019E4D8);
    sub_1000066D4(v41, v75, &qword_10019E4D8);
    swift_storeEnumTagMultiPayload();
    sub_1000F8FB0(&qword_10019E4D0, &qword_10019E4D8, (void (*)(void))sub_1000F9054);
    sub_1000F897C(&qword_10019E510, &qword_10019E518, (void (*)(void))sub_1000F9150);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    return sub_1000067DC(v41, &qword_10019E4D8);
  }
  else
  {
    type metadata accessor for SavedWallpaperView();
    uint64_t v70 = v10;
    sub_1000F3FC0();
    double v43 = sub_10001A71C();
    swift_release();
    uint64_t v44 = (char *)v14 + *(int *)(v71 + 20);
    uint64_t v45 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v46 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104))(v44, v45, v46);
    *uint64_t v14 = v43;
    v14[1] = v43;
    uint64_t v47 = static Color.black.getter();
    uint64_t v48 = v62;
    sub_10001081C((uint64_t)v14, v62);
    *(void *)(v48 + *(int *)(v60 + 36)) = v47;
    sub_100010934((uint64_t)v14);
    static Alignment.center.getter();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v49 = v65;
    sub_1000066D4(v48, v65, &qword_100199E40);
    uint64_t v50 = (_OWORD *)(v49 + *(int *)(v61 + 36));
    long long v51 = v92;
    v50[4] = v91;
    v50[5] = v51;
    v50[6] = v93;
    long long v52 = v88;
    *uint64_t v50 = v87;
    v50[1] = v52;
    long long v53 = v90;
    v50[2] = v89;
    v50[3] = v53;
    sub_1000067DC(v48, &qword_100199E40);
    sub_1000F3FC0();
    sub_10001A6D4();
    swift_release();
    sub_1000F3FC0();
    sub_10001A6F8();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v54 = v63;
    sub_1000066D4(v49, v63, &qword_10019E528);
    uint64_t v55 = (_OWORD *)(v54 + *(int *)(v76 + 36));
    long long v56 = v99;
    *uint64_t v55 = v98;
    v55[1] = v56;
    v55[2] = v100;
    sub_1000067DC(v49, &qword_10019E528);
    uint64_t v57 = (uint64_t)v70;
    sub_10001D6D8(v54, (uint64_t)v70, &qword_10019E518);
    sub_1000066D4(v57, v75, &qword_10019E518);
    swift_storeEnumTagMultiPayload();
    sub_1000F8FB0(&qword_10019E4D0, &qword_10019E4D8, (void (*)(void))sub_1000F9054);
    sub_1000F897C(&qword_10019E510, &qword_10019E518, (void (*)(void))sub_1000F9150);
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v57, &qword_10019E518);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v27, v23);
  }
}

uint64_t sub_1000F7424@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v36 = v8;
  uint64_t v37 = v7;
  char v32 = v9;
  uint64_t v38 = v10;
  swift_release();
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = swift_getKeyPath();
  sub_1000F3EE8();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_1000065A4(v11, v13, v15);
  swift_bridgeObjectRelease();
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  char v21 = v32 & 1;
  uint64_t v39 = qword_1001AA348;
  swift_retain();
  uint64_t v30 = Text.foregroundStyle<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v33 = v24;
  char v26 = v25 & 1;
  char v31 = v25 & 1;
  sub_1000065A4(v16, v18, v20 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = swift_getKeyPath();
  uint64_t v28 = swift_getKeyPath();
  *(_DWORD *)(a1 + 17) = v39;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v39 + 3);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v43;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v43[3];
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a1 + 65) = *(_DWORD *)v42;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v41;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v40;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v40[3];
  *(void *)a1 = v37;
  *(void *)(a1 + 8) = v36;
  *(unsigned char *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v38;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 2;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v34;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v30;
  *(void *)(a1 + 80) = v23;
  *(unsigned char *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v33;
  *(void *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = 2;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v28;
  *(unsigned char *)(a1 + 136) = 1;
  sub_100010924(v37, v36, v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100010924(v30, v23, v31);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000065A4(v30, v23, v31);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v37, v36, v21);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F7824()
{
  uint64_t v0 = type metadata accessor for OpenURLAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView();
  sub_10001D160((uint64_t)v3);
  OpenURLAction.callAsFunction(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000F7928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v52 = sub_100006560(&qword_100198618) - 8;
  __chkstk_darwin(v52);
  uint64_t v51 = (uint64_t)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v8 = Text.font(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v47 = v13;
  swift_release();
  sub_1000065A4(v3, v5, v7);
  swift_bridgeObjectRelease();
  *(void *)&long long v81 = static Color.white.getter();
  uint64_t v48 = Text.foregroundStyle<A>(_:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  LOBYTE(v5) = v18 & 1;
  sub_1000065A4(v8, v10, v12 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v3) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v20 = v48;
  uint64_t v54 = v48;
  uint64_t v55 = v15;
  char v56 = v5;
  uint64_t v57 = v17;
  uint64_t v58 = KeyPath;
  uint64_t v59 = 1;
  char v60 = 0;
  char v61 = v3;
  uint64_t v62 = v21;
  uint64_t v63 = v22;
  uint64_t v64 = v23;
  uint64_t v65 = v24;
  char v66 = 0;
  static Alignment.center.getter();
  sub_100052784(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v81, 0.0, 1, 0.0, 1);
  sub_1000065A4(v20, v15, v5);
  swift_release();
  swift_bridgeObjectRelease();
  long long v78 = v92;
  long long v79 = v93;
  long long v74 = v88;
  long long v75 = v89;
  long long v76 = v90;
  long long v77 = v91;
  long long v70 = v84;
  long long v71 = v85;
  long long v72 = v86;
  long long v73 = v87;
  long long v67 = v81;
  uint64_t v80 = v94;
  long long v68 = v82;
  long long v69 = v83;
  uint64_t v25 = static Color.blue.getter();
  char v26 = static Edge.Set.all.getter();
  long long v91 = v77;
  long long v92 = v78;
  long long v93 = v79;
  long long v87 = v73;
  long long v88 = v74;
  long long v89 = v75;
  long long v90 = v76;
  long long v83 = v69;
  long long v84 = v70;
  long long v85 = v71;
  long long v86 = v72;
  long long v81 = v67;
  long long v82 = v68;
  *(void *)&long long v94 = v80;
  *((void *)&v94 + 1) = v25;
  char v95 = v26;
  uint64_t v27 = v49;
  uint64_t v28 = &v49[*(int *)(v50 + 28)];
  uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v27 = _Q0;
  uint64_t v36 = v51;
  sub_10001081C((uint64_t)v27, v51);
  *(_WORD *)(v36 + *(int *)(v52 + 44)) = 256;
  uint64_t v37 = sub_100006560(&qword_10019E478);
  uint64_t v38 = v53;
  sub_1000066D4(v36, v53 + *(int *)(v37 + 36), &qword_100198618);
  long long v39 = v94;
  *(_OWORD *)(v38 + 192) = v93;
  *(_OWORD *)(v38 + 208) = v39;
  *(unsigned char *)(v38 + 224) = v95;
  long long v40 = v90;
  *(_OWORD *)(v38 + 128) = v89;
  *(_OWORD *)(v38 + 144) = v40;
  long long v41 = v92;
  *(_OWORD *)(v38 + 160) = v91;
  *(_OWORD *)(v38 + 176) = v41;
  long long v42 = v86;
  *(_OWORD *)(v38 + 64) = v85;
  *(_OWORD *)(v38 + 80) = v42;
  long long v43 = v88;
  *(_OWORD *)(v38 + 96) = v87;
  *(_OWORD *)(v38 + 112) = v43;
  long long v44 = v82;
  *(_OWORD *)uint64_t v38 = v81;
  *(_OWORD *)(v38 + 16) = v44;
  long long v45 = v84;
  *(_OWORD *)(v38 + 32) = v83;
  *(_OWORD *)(v38 + 48) = v45;
  sub_1000F9280((uint64_t)&v81);
  sub_1000067DC(v36, &qword_100198618);
  sub_100010934((uint64_t)v27);
  return sub_1000F92DC((uint64_t)&v81);
}

double sub_1000F7D98@<D0>(uint64_t a1@<X8>)
{
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v2 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v4 = static Edge.Set.horizontal.getter();
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 8) = nullsub_1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = KeyPath;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

__n128 sub_1000F7E24@<Q0>(uint64_t a1@<X8>)
{
  static Font.Weight.semibold.getter();
  uint64_t v2 = Text.fontWeight(_:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = static Alignment.center.getter();
  sub_100051068(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v9, v10, v2, v4, v8, v6);
  sub_1000065A4(v2, v4, v8);
  swift_bridgeObjectRelease();
  long long v11 = v15[7];
  *(_OWORD *)(a1 + 96) = v15[6];
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v15[8];
  long long v12 = v15[3];
  *(_OWORD *)(a1 + 32) = v15[2];
  *(_OWORD *)(a1 + 48) = v12;
  long long v13 = v15[5];
  *(_OWORD *)(a1 + 64) = v15[4];
  *(_OWORD *)(a1 + 80) = v13;
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a1 = v15[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_1000F7F20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SavedWallpaperView();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  long long v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v19 - v11, a1, v8, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, v12, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v15 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v17 = static Edge.Set.horizontal.getter();
  *(_WORD *)a4 = 1;
  *(void *)(a4 + 8) = sub_1000F839C;
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v15;
  *(unsigned char *)(a4 + 40) = v17;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_1000F80B0()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView();
  sub_10001D698((uint64_t)v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000F81A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F5200(v1[4], v1[2], v1[3], a1);
}

double sub_1000F81BC@<D0>(uint64_t a1@<X8>)
{
  return sub_1000F7F20(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000F81C8()
{
  unint64_t result = qword_10019E400;
  if (!qword_10019E400)
  {
    sub_10000650C(&qword_10019E3D0);
    sub_100010484(&qword_10019E408, &qword_10019E3C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E400);
  }
  return result;
}

uint64_t sub_1000F8268(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F8300(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F839C()
{
  type metadata accessor for SavedWallpaperView();

  return sub_1000F80B0();
}

uint64_t sub_1000F8428(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_100010924(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000F84D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F8580()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_1000F87C0()
{
  type metadata accessor for SavedWallpaperView();
  type metadata accessor for URL();

  return sub_1000F7824();
}

uint64_t sub_1000F88A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7928(a1);
}

unint64_t sub_1000F88B0()
{
  unint64_t result = qword_10019E488;
  if (!qword_10019E488)
  {
    sub_10000650C(&qword_10019E490);
    sub_1000F897C(&qword_10019E498, &qword_10019E4A0, (void (*)(void))sub_1000F89F8);
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E488);
  }
  return result;
}

uint64_t sub_1000F897C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F89F8()
{
  return sub_1000F897C(&qword_10019E4A8, &qword_10019E4B0, (void (*)(void))sub_100049FE0);
}

uint64_t sub_1000F8A28()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000F8BE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SavedWallpaperView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000F64C4(a1, v1 + v4, v5);
}

uint64_t sub_1000F8CA4()
{
  uint64_t v1 = type metadata accessor for SavedWallpaperView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000F8E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for SavedWallpaperView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000F68BC(a1, v8, v5, v6, a2);
}

unint64_t sub_1000F8EE4()
{
  unint64_t result = qword_10019E4C8;
  if (!qword_10019E4C8)
  {
    sub_10000650C(&qword_10019E4C0);
    sub_1000F8FB0(&qword_10019E4D0, &qword_10019E4D8, (void (*)(void))sub_1000F9054);
    sub_1000F897C(&qword_10019E510, &qword_10019E518, (void (*)(void))sub_1000F9150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E4C8);
  }
  return result;
}

uint64_t sub_1000F8FB0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    sub_100010484(&qword_100198610, &qword_100198618);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F9054()
{
  unint64_t result = qword_10019E4E0;
  if (!qword_10019E4E0)
  {
    sub_10000650C(&qword_10019E4E8);
    sub_1000F897C(&qword_10019E4F0, &qword_10019E4F8, (void (*)(void))sub_1000F9120);
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E4E0);
  }
  return result;
}

uint64_t sub_1000F9120()
{
  return sub_1000F897C(&qword_10019E500, &qword_10019E508, (void (*)(void))sub_100026D44);
}

uint64_t sub_1000F9150()
{
  return sub_1000F897C(&qword_10019E520, &qword_10019E528, (void (*)(void))sub_1000F9180);
}

unint64_t sub_1000F9180()
{
  unint64_t result = qword_10019E530;
  if (!qword_10019E530)
  {
    sub_10000650C(&qword_100199E40);
    sub_1000F9220();
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E530);
  }
  return result;
}

unint64_t sub_1000F9220()
{
  unint64_t result = qword_10019E538;
  if (!qword_10019E538)
  {
    type metadata accessor for RoundedRectangle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E538);
  }
  return result;
}

uint64_t sub_1000F9280(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F92DC(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for BezelSizePreferenceKey()
{
  return &type metadata for BezelSizePreferenceKey;
}

unint64_t sub_1000F9354()
{
  unint64_t result = qword_10019E548;
  if (!qword_10019E548)
  {
    sub_10000650C(&qword_10019E410);
    sub_10000650C(&qword_10019E3D8);
    sub_1000F897C(&qword_10019E3F8, &qword_10019E3D8, (void (*)(void))sub_1000F81C8);
    swift_getOpaqueTypeConformance2();
    sub_100010484(&qword_10019E550, &qword_10019E418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E548);
  }
  return result;
}

unint64_t sub_1000F945C(uint64_t a1)
{
  unint64_t result = sub_1000F9484();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F9484()
{
  unint64_t result = qword_10019E558;
  if (!qword_10019E558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E558);
  }
  return result;
}

void *initializeWithCopy for EventCampaignHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EventCampaignHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EventCampaignHandler(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for EventCampaignHandler(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCampaignHandler(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCampaignHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCampaignHandler()
{
  return &type metadata for EventCampaignHandler;
}

void sub_1000F96F8()
{
  qword_10019E560 = 0x6763737469;
  *(void *)algn_10019E568 = 0xE500000000000000;
}

void sub_1000F9718()
{
  qword_10019E570 = 0x7463737469;
  *(void *)algn_10019E578 = 0xE500000000000000;
}

void sub_1000F9738()
{
  qword_10019E580 = 29795;
  *(void *)algn_10019E588 = 0xE200000000000000;
}

void sub_1000F9750()
{
  qword_10019E590 = 29808;
  *(void *)algn_10019E598 = 0xE200000000000000;
}

uint64_t sub_1000F976C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100006560(&qword_100199670);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_1000F982C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[39] = a2;
  v3[40] = a3;
  v3[38] = a1;
  return _swift_task_switch(sub_1000F9850, 0, 0);
}

uint64_t sub_1000F9850()
{
  id v1 = [self sharedInstance];
  v0[41] = v1;
  v0[10] = v0;
  v0[15] = v0 + 36;
  v0[11] = sub_1000F9974;
  uint64_t v2 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_1000F9768;
  v0[29] = &unk_100192288;
  v0[30] = v2;
  [v1 defaultValuesWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_1000F9974()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000FA080;
  }
  else
  {
    uint64_t v2 = sub_1000F9A8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F9A8C()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[36];
  id v3 = [v2 campaignGroup];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v0[43] = v4;
  v0[44] = v6;
  v0[18] = v0;
  v0[23] = v0 + 36;
  v0[19] = sub_1000F9BD8;
  uint64_t v7 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_1000F9768;
  v0[29] = &unk_1001922A0;
  v0[30] = v7;
  [v1 campaignTokenWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 18);
}

uint64_t sub_1000F9BD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 360) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000FA2BC;
  }
  else
  {
    uint64_t v2 = sub_1000F9CFC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F9CFC()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[36];
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 tokenForClientIdentifier:v3];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v0[34] = v5;
  v0[35] = v6;

  v0[46] = v7;
  v0[2] = v0;
  v0[7] = v0 + 36;
  v0[3] = sub_1000F9E8C;
  uint64_t v8 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_1000F9768;
  v0[29] = &unk_1001922B8;
  v0[30] = v8;
  [v1 defaultValuesWithCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F9E8C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 376) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v3 = sub_1000FA4FC;
  }
  else
  {
    *(void *)(v1 + 384) = *(void *)(v1 + 272);
    NSString v3 = sub_1000F9FB8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F9FB8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[44];
  NSString v3 = (void *)v0[41];
  id v4 = (void *)v0[36];
  id v5 = [v4 providerToken];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v9 = v0[48];
  uint64_t v10 = (void *)v0[38];
  *uint64_t v10 = v0[43];
  v10[1] = v2;
  v10[2] = v9;
  v10[3] = v1;
  v10[4] = v6;
  v10[5] = v8;
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000FA080()
{
  long long v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003345C(v2, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_10004D828(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  *uint64_t v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000FA2BC()
{
  long long v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003345C(v2, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_10004D828(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  *uint64_t v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000FA4FC()
{
  long long v12 = v0;
  uint64_t v1 = (void *)v0[41];
  swift_willThrow();

  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003345C(v2, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[26] = sub_10004D828(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not fetch event campaign values due to Error: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (_OWORD *)v0[38];
  v8[1] = 0u;
  v8[2] = 0u;
  *uint64_t v8 = 0u;
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000FA73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000067DC(a1, &qword_10019D390);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000FA8E8()
{
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000FA988@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000FAA30()
{
  return swift_release();
}

uint64_t sub_1000FAB00@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100040C30(v1 + 24, a1);
}

uint64_t sub_1000FABC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100040C30(v3 + 24, a2);
}

uint64_t sub_1000FAC88(uint64_t a1)
{
  sub_100040C30(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v2, &qword_1001997B8);
}

uint64_t sub_1000FAD70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 24;
  swift_beginAccess();
  sub_1000FD704(a2, v3);
  return swift_endAccess();
}

uint64_t sub_1000FADD4()
{
  return swift_retain();
}

uint64_t sub_1000FAE78@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 64);
  return swift_retain();
}

uint64_t sub_1000FAF24()
{
  return swift_release();
}

uint64_t sub_1000FB004()
{
  return swift_retain();
}

uint64_t sub_1000FB0A8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 72);
  return swift_retain();
}

uint64_t sub_1000FB154()
{
  return swift_release();
}

uint64_t sub_1000FB234()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.Queue.Entry();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019E6C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v18[0] = v0;
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_100040C30(v0 + 24, (uint64_t)v19);
  uint64_t v8 = v20;
  if (v20)
  {
    uint64_t v9 = v21;
    uint64_t v10 = sub_100023118(v19, v20);
    uint64_t v11 = *(void *)(v8 - 8);
    __n128 v12 = __chkstk_darwin(v10);
    uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v11 + 16))(v14, v12);
    sub_1000067DC((uint64_t)v19, &qword_1001997B8);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 96))(v8, v9);
    LOBYTE(v9) = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v8);
    if ((v9 & 1) == 0) {
      return v15;
    }
  }
  else
  {
    sub_1000067DC((uint64_t)v19, &qword_1001997B8);
  }
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    sub_1000067DC((uint64_t)v7, &qword_10019E6C0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    sub_1000067DC((uint64_t)v7, &qword_10019E6C0);
    uint64_t v15 = MusicPlayer.Queue.Entry.endTime.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v15;
}

double sub_1000FB5BC()
{
  double v0 = COERCE_DOUBLE(sub_1000FB234());
  double v1 = 0.0;
  if ((v2 & 1) == 0)
  {
    double v3 = v0;
    if (v0 > 0.0
      && ((~*(void *)&v0 & 0x7FF0000000000000) != 0 || (*(void *)&v0 & 0xFFFFFFFFFFFFFLL) == 0)
      && (sub_1000FB678() & 1) != 0)
    {
      type metadata accessor for SystemMusicPlayer();
      static SystemMusicPlayer.shared.getter();
      dispatch thunk of MusicPlayer.playbackTime.getter();
      double v5 = v4;
      swift_release();
      double v6 = v5 / v3;
      BOOL v7 = (COERCE_UNSIGNED_INT64(v5 / v3) & 0xFFFFFFFFFFFFFLL) != 0
        && (~COERCE__INT64(v5 / v3) & 0x7FF0000000000000) == 0;
      if (v6 >= 0.0 && !v7)
      {
        if (v6 <= 1.0) {
          return v5 / v3;
        }
        else {
          return 1.0;
        }
      }
    }
  }
  return v1;
}

uint64_t sub_1000FB678()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.Queue.Entry();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  double v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019E6C0);
  __chkstk_darwin(v5 - 8);
  BOOL v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019E6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    uint64_t v11 = &qword_10019E6C0;
    uint64_t v12 = (uint64_t)v7;
LABEL_5:
    sub_1000067DC(v12, v11);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  sub_1000067DC((uint64_t)v7, &qword_10019E6C0);
  MusicPlayer.Queue.Entry.item.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v13 = type metadata accessor for MusicPlayer.Queue.Entry.Item();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    uint64_t v11 = &qword_10019E6C8;
    uint64_t v12 = (uint64_t)v10;
    goto LABEL_5;
  }
  uint64_t v15 = MusicPlayer.Queue.Entry.Item.id.getter();
  uint64_t v16 = v28;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
LABEL_6:
  swift_getKeyPath();
  v30[0] = v0;
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_100040C30(v0 + 24, (uint64_t)v31);
  uint64_t v17 = v32;
  if (!v32)
  {
    sub_1000067DC((uint64_t)v31, &qword_1001997B8);
    if (!v16) {
      goto LABEL_15;
    }
LABEL_13:
    char v27 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v27 & 1;
  }
  uint64_t v18 = v33;
  uint64_t v19 = sub_100023118(v31, v32);
  uint64_t v20 = *(void *)(v17 - 8);
  __n128 v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v20 + 16))(v23, v21);
  sub_1000067DC((uint64_t)v31, &qword_1001997B8);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v18);
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v17);
  if (v26)
  {
    if (v16)
    {
      if (v24 == v15 && v16 == v26)
      {
        swift_bridgeObjectRelease();
        char v27 = 1;
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v27 = 0;
    }
    goto LABEL_19;
  }
  if (v16) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 1;
  return v27 & 1;
}

uint64_t sub_1000FBB44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006560(&qword_10019E680);
  __chkstk_darwin(v2 - 8);
  double v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019E688);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FCB60();
  swift_getKeyPath();
  uint64_t v9 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16AppleMusicPlayer___observationRegistrar;
  uint64_t v40 = v0;
  uint64_t v10 = sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_getKeyPath();
  uint64_t v40 = v0;
  uint64_t v37 = v10;
  uint64_t v38 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 72))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t v36 = type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  MusicPlayer.state.getter();
  swift_release();
  uint64_t v11 = dispatch thunk of MusicPlayer.State.objectWillChange.getter();
  swift_release();
  uint64_t v40 = v11;
  id v35 = self;
  id v39 = [v35 mainRunLoop];
  uint64_t v12 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v34 = v13 + 56;
  v33(v4, 1, 1, v12);
  uint64_t v32 = sub_100006560(&qword_10019E698);
  unint64_t v31 = sub_1000FD568();
  uint64_t v30 = sub_100010484(&qword_10019E6A8, &qword_10019E698);
  uint64_t v29 = sub_1000FD5A8(&qword_10019E6B0, (void (*)(uint64_t))sub_1000FD568);
  Publisher.receive<A>(on:options:)();
  sub_1000067DC((uint64_t)v4, &qword_10019E680);

  swift_release();
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1000FD628;
  *(void *)(v15 + 24) = v14;
  uint64_t v28 = sub_100010484(&qword_10019E6B8, &qword_10019E688);
  uint64_t v16 = Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26[1] = v6 + 8;
  char v27 = v17;
  v17(v8, v5);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = v5;
  __chkstk_darwin(KeyPath);
  v26[-2] = v1;
  v26[-1] = v16;
  uint64_t v40 = v1;
  v26[2] = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  static SystemMusicPlayer.shared.getter();
  dispatch thunk of SystemMusicPlayer.queue.getter();
  swift_release();
  uint64_t v20 = dispatch thunk of MusicPlayer.Queue.objectWillChange.getter();
  swift_release();
  uint64_t v40 = v20;
  id v39 = [v35 mainRunLoop];
  v33(v4, 1, 1, v12);
  Publisher.receive<A>(on:options:)();
  sub_1000067DC((uint64_t)v4, &qword_10019E680);

  swift_release();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1000FD670;
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = Publisher<>.sink(receiveValue:)();
  swift_release();
  v27(v8, v19);
  uint64_t v24 = swift_getKeyPath();
  __chkstk_darwin(v24);
  v26[-2] = v1;
  v26[-1] = v23;
  uint64_t v40 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000FC1D4(void *a1)
{
  sub_1000487B4((uint64_t)a1, (uint64_t)v9);
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1000067DC((uint64_t)v9, &qword_1001997B8);
  swift_getKeyPath();
  v9[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  sub_100006560(&qword_10019E6F8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014D4D0;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_100023118(a1, v4);
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v5 + 8);
  uint64_t v7 = sub_100035868((uint64_t *)(v3 + 32));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
  type metadata accessor for MusicPlayer.Queue();
  dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)();
  dispatch thunk of SystemMusicPlayer.queue.setter();
  swift_release();
  return sub_1000FD9B8();
}

void sub_1000FC3EC()
{
  if (sub_1000FB678())
  {
    sub_1000FD9B8();
  }
  else
  {
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_10003345C(v0, (uint64_t)qword_1001AA440);
    oslog = Logger.logObject.getter();
    os_log_type_t v1 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v1))
    {
      uint64_t v2 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Player asked to resume song but current song not in system player queue.", v2, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1000FC4FC()
{
  if (sub_1000FB678())
  {
    type metadata accessor for SystemMusicPlayer();
    static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.pause()();
    swift_release();
  }
  else
  {
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_10003345C(v0, (uint64_t)qword_1001AA440);
    oslog = Logger.logObject.getter();
    os_log_type_t v1 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v1))
    {
      uint64_t v2 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Failed to pause song. Current song not in System player..", v2, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000FC628()
{
  return _swift_task_switch(sub_1000FC644, 0, 0);
}

uint64_t sub_1000FC644()
{
  type metadata accessor for SystemMusicPlayer();
  *(void *)(v0 + 56) = static SystemMusicPlayer.shared.getter();
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of MusicPlayer.play()
                         + async function pointer to dispatch thunk of MusicPlayer.play());
  os_log_type_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = sub_1000FC6FC;
  return v3();
}

uint64_t sub_1000FC6FC()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000FC92C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1000FC818;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FC818()
{
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Song playback started.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000FC92C()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_10004D828(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to play song with error %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_1000FCB60()
{
  uint64_t v1 = type metadata accessor for MusicPlayer.PlaybackStatus();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000FB678() & 1) == 0)
  {
LABEL_4:
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v14 - 2) = v0;
    *((unsigned char *)&v14 - 8) = 0;
    uint64_t v15 = v0;
    sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
LABEL_5:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return;
  }
  type metadata accessor for SystemMusicPlayer();
  static SystemMusicPlayer.shared.getter();
  MusicPlayer.state.getter();
  swift_release();
  dispatch thunk of MusicPlayer.State.playbackStatus.getter();
  swift_release();
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for MusicPlayer.PlaybackStatus.stopped(_:))
  {
    if (sub_1000FB5BC() <= 0.0) {
      return;
    }
    goto LABEL_4;
  }
  if (v5 == enum case for MusicPlayer.PlaybackStatus.playing(_:))
  {
    uint64_t v7 = swift_getKeyPath();
    __chkstk_darwin(v7);
    *(&v14 - 2) = v0;
    *((unsigned char *)&v14 - 8) = 2;
    uint64_t v15 = v0;
    sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
    goto LABEL_5;
  }
  if (v5 == enum case for MusicPlayer.PlaybackStatus.paused(_:)
    || v5 == enum case for MusicPlayer.PlaybackStatus.interrupted(_:))
  {
    uint64_t v9 = swift_getKeyPath();
    __chkstk_darwin(v9);
    *(&v14 - 2) = v0;
    *((unsigned char *)&v14 - 8) = 3;
    uint64_t v15 = v0;
    sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.playbackTime.getter();
    double v11 = v10;
    swift_release();
    if (v11 == 0.0)
    {
      uint64_t v12 = swift_getKeyPath();
      __chkstk_darwin(v12);
      *(&v14 - 2) = v0;
      *((unsigned char *)&v14 - 8) = 0;
      uint64_t v15 = v0;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
  else if (v5 != enum case for MusicPlayer.PlaybackStatus.seekingForward(_:) {
         && v5 != enum case for MusicPlayer.PlaybackStatus.seekingBackward(_:))
  }
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t sub_1000FD0A8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000FCB60();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FD100()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ((sub_1000FB678() & 1) == 0)
    {
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FD240()
{
  sub_1000067DC(v0 + 24, &qword_1001997B8);
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16AppleMusicPlayer___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000FD300()
{
  return type metadata accessor for AppleMusicPlayer();
}

uint64_t type metadata accessor for AppleMusicPlayer()
{
  uint64_t result = qword_10019E5D8;
  if (!qword_10019E5D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FD354()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1000FD404()
{
  return sub_1000FB5BC();
}

uint64_t sub_1000FD428()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_1000FD5A8(&qword_10019E690, (void (*)(uint64_t))type metadata accessor for AppleMusicPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_1000FD4C8(void *a1)
{
  return sub_1000FC1D4(a1);
}

void sub_1000FD4EC()
{
}

void sub_1000FD510()
{
}

uint64_t sub_1000FD534()
{
  return sub_1000FBB44();
}

unint64_t sub_1000FD568()
{
  unint64_t result = qword_10019E6A0;
  if (!qword_10019E6A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10019E6A0);
  }
  return result;
}

uint64_t sub_1000FD5A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FD5F0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000FD628()
{
  return sub_1000FD0A8();
}

uint64_t sub_1000FD630()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000FD658()
{
  return sub_1000FD7A8();
}

uint64_t sub_1000FD670()
{
  return sub_1000FD100();
}

uint64_t sub_1000FD678()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000FD6B0()
{
  return sub_1000FD76C();
}

void sub_1000FD6D0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1000FD6E8()
{
  return sub_1000FAD70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000FD704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_1001997B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FD76C()
{
  *(void *)(*(void *)(v0 + 16) + 72) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1000FD7A8()
{
  *(void *)(*(void *)(v0 + 16) + 64) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1000FD7E4(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000FD8C0;
  return v6(a1);
}

uint64_t sub_1000FD8C0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000FD9B8()
{
  uint64_t v0 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1000067DC((uint64_t)v2, &qword_10019D390);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (*(void *)(v5 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v7 = v8;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = &unk_10019E6D8;
  *(void *)(v9 + 24) = v5;
  if (v7 | v6)
  {
    v11[0] = 0;
    v11[1] = 0;
    void v11[2] = v6;
    v11[3] = v7;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000FDBE4()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000FDC1C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100010CB0;
  return _swift_task_switch(sub_1000FC644, 0, 0);
}

uint64_t sub_1000FDCC0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A678;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10019E6E0 + dword_10019E6E0);
  return v6(a1, v4);
}

uint64_t sub_1000FDD78(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100010CB0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10019E6E0 + dword_10019E6E0);
  return v6(a1, v4);
}

uint64_t sub_1000FDE3C()
{
  return sub_1000FD6E8();
}

void sub_1000FDE54()
{
}

void *assignWithCopy for PromotionalAssetsEntryView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsEntryView()
{
  return &type metadata for PromotionalAssetsEntryView;
}

uint64_t sub_1000FDEE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000FDEFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v67 = a3;
  uint64_t v4 = type metadata accessor for CoordinateSpace();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  __chkstk_darwin(v4);
  char v56 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PhotoEntryView(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v57 = sub_100006560(&qword_10019E718);
  __chkstk_darwin(v57);
  uint64_t v55 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100006560(&qword_10019E720);
  __chkstk_darwin(v66);
  uint64_t v58 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (uint64_t)&v53 - v12;
  uint64_t v63 = sub_100006560(&qword_10019E728);
  __chkstk_darwin(v63);
  uint64_t v65 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DefaultEntryView(0);
  __chkstk_darwin(v64);
  uint64_t v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a1;
  uint64_t v69 = v62;
  sub_100006560(&qword_10019E730);
  State.wrappedValue.getter();
  sub_100078D84((uint64_t)v24);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_1000067DC((uint64_t)v24, &qword_100198630);
    *uint64_t v15 = swift_getKeyPath();
    sub_100006560(&qword_100198A98);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = v64;
    uint64_t v30 = (char *)v15 + *(int *)(v64 + 20);
    *(void *)uint64_t v30 = LocalizedStringKey.init(stringLiteral:)();
    *((void *)v30 + 1) = v31;
    v30[16] = v32 & 1;
    *((void *)v30 + 3) = v33;
    uint64_t v34 = (char *)v15 + *(int *)(v29 + 24);
    *(void *)uint64_t v34 = LocalizedStringKey.init(stringLiteral:)();
    *((void *)v34 + 1) = v35;
    v34[16] = v36 & 1;
    *((void *)v34 + 3) = v37;
    sub_100104158((uint64_t)v15, (uint64_t)v18, type metadata accessor for DefaultEntryView);
    sub_1000FEA40((uint64_t)v18, v65, type metadata accessor for DefaultEntryView);
    swift_storeEnumTagMultiPayload();
    sub_1000FEAA8();
    sub_1000FEC18(&qword_10019E770, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    _ConditionalContent<>.init(storage:)();
    return sub_1000FEC60((uint64_t)v18, type metadata accessor for DefaultEntryView);
  }
  else
  {
    id v39 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v54 = v28;
    v39(v28, v24, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v28, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v21, 0, 1, v25);
    type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
    swift_allocObject();
    uint64_t v40 = sub_10012A294((uint64_t)v21);
    uint64_t v70 = v40;
    swift_retain();
    State.init(wrappedValue:)();
    uint64_t v41 = v69;
    *uint64_t v8 = v68;
    v8[1] = v41;
    long long v42 = (void *)((char *)v8 + *(int *)(v6 + 20));
    *long long v42 = swift_getKeyPath();
    sub_100006560(&qword_100198A98);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = v59;
    uint64_t v43 = v60;
    long long v45 = v56;
    (*(void (**)(char *, void, uint64_t))(v59 + 104))(v56, enum case for CoordinateSpace.local(_:), v60);
    uint64_t v46 = (uint64_t)v55;
    uint64_t v47 = &v55[*(int *)(v57 + 36)];
    uint64_t v48 = sub_100006560(&qword_10019E758);
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(&v47[*(int *)(v48 + 36)], v45, v43);
    *(void *)uint64_t v47 = &type metadata for PhotoEntryViewSizePreferenceKey;
    uint64_t v49 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v47[*(int *)(v48 + 40)];
    *uint64_t v49 = sub_100025A40;
    v49[1] = 0;
    sub_1000FEA40((uint64_t)v8, v46, type metadata accessor for PhotoEntryView);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
    sub_1000FEC60((uint64_t)v8, type metadata accessor for PhotoEntryView);
    uint64_t v50 = v58;
    sub_1000066D4(v46, v58, &qword_10019E718);
    uint64_t v51 = (uint64_t (**)())(v50 + *(int *)(v66 + 36));
    *uint64_t v51 = sub_100102D54;
    v51[1] = (uint64_t (*)())v40;
    swift_retain();
    sub_1000067DC(v46, &qword_10019E718);
    uint64_t v52 = v61;
    sub_10001D6D8(v50, v61, &qword_10019E720);
    sub_1000066D4(v52, v65, &qword_10019E720);
    swift_storeEnumTagMultiPayload();
    sub_1000FEAA8();
    sub_1000FEC18(&qword_10019E770, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000067DC(v52, &qword_10019E720);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v54, v25);
  }
}

uint64_t sub_1000FE720()
{
  return swift_release();
}

uint64_t sub_1000FE858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (_OWORD *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100006560(&qword_10019E700);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FDEFC(*v1, v1[1], (uint64_t)v9);
  uint64_t v10 = (char *)v6 + *(int *)(v4 + 28);
  uint64_t v11 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v12 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
  __asm { FMOV            V0.2D, #16.0 }
  *uint64_t v6 = _Q0;
  uint64_t v18 = a1 + *(int *)(sub_100006560(&qword_10019E708) + 36);
  sub_1000FEA40((uint64_t)v6, v18, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(unsigned char *)(v18 + *(int *)(sub_100006560(&qword_10019E710) + 36)) = 0;
  sub_1000066D4((uint64_t)v9, a1, &qword_10019E700);
  sub_1000FEC60((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_1000067DC((uint64_t)v9, &qword_10019E700);
}

uint64_t type metadata accessor for PhotoEntryView(uint64_t a1)
{
  return sub_10002DE00(a1, qword_10019E870);
}

uint64_t type metadata accessor for DefaultEntryView(uint64_t a1)
{
  return sub_10002DE00(a1, qword_10019E7D8);
}

uint64_t sub_1000FEA40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000FEAA8()
{
  unint64_t result = qword_10019E738;
  if (!qword_10019E738)
  {
    sub_10000650C(&qword_10019E720);
    sub_1000FEB48();
    sub_100010484(&qword_10019E760, &qword_10019E768);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E738);
  }
  return result;
}

unint64_t sub_1000FEB48()
{
  unint64_t result = qword_10019E740;
  if (!qword_10019E740)
  {
    sub_10000650C(&qword_10019E718);
    sub_1000FEC18(&qword_10019E748, (void (*)(uint64_t))type metadata accessor for PhotoEntryView);
    sub_100010484(&qword_10019E750, &qword_10019E758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E740);
  }
  return result;
}

uint64_t sub_1000FEC18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FEC60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000FECC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v60 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PhotoEntryView(0);
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v53 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019E8D8);
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019E8E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_10019E8E8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_10019E8F0);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v54 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100006560(&qword_10019E8F8) - 8;
  __chkstk_darwin(v58);
  uint64_t v57 = (uint64_t)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = static VerticalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  v12[16] = 0;
  uint64_t v21 = sub_100006560(&qword_10019E900);
  sub_1000FF33C(v1, (uint64_t)&v12[*(int *)(v21 + 44)]);
  uint64_t v22 = v1[1];
  uint64_t v62 = *v1;
  uint64_t v63 = v22;
  sub_100006560(&qword_10019E908);
  State.wrappedValue.getter();
  sub_1000066D4(v64 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL, (uint64_t)v7, &qword_100198630);
  swift_release();
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_1000FEA40((uint64_t)v1, (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PhotoEntryView);
  unint64_t v23 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v24 = swift_allocObject();
  sub_100104158((uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for PhotoEntryView);
  sub_100006560(&qword_10019E910);
  sub_100104240();
  uint64_t v25 = v52;
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v26 = static Alignment.center.getter();
  uint64_t v28 = v27;
  uint64_t v29 = &v16[*(int *)(v14 + 44)];
  uint64_t v31 = v55;
  uint64_t v30 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v29, v25, v56);
  char v32 = (uint64_t *)&v29[*(int *)(sub_100006560(&qword_10019E990) + 36)];
  *char v32 = v26;
  v32[1] = v28;
  sub_1000066D4((uint64_t)v12, (uint64_t)v16, &qword_10019E8E0);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v30);
  sub_1000067DC((uint64_t)v12, &qword_10019E8E0);
  uint64_t v33 = v59;
  uint64_t v34 = &v59[*(int *)(v60 + 28)];
  uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v36 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #14.0 }
  *uint64_t v33 = _Q0;
  uint64_t v42 = (uint64_t)v54;
  uint64_t v43 = (uint64_t)&v54[*(int *)(v18 + 44)];
  sub_1000FEA40((uint64_t)v33, v43, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v43 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v16, v42, &qword_10019E8E8);
  sub_1000FEC60((uint64_t)v33, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC((uint64_t)v16, &qword_10019E8E8);
  static Color.black.getter();
  uint64_t v44 = Color.opacity(_:)();
  swift_release();
  uint64_t v45 = v57;
  sub_1000066D4(v42, v57, &qword_10019E8F0);
  uint64_t v46 = v45 + *(int *)(v58 + 44);
  *(void *)uint64_t v46 = v44;
  *(_OWORD *)(v46 + 8) = xmmword_1001544F0;
  *(void *)(v46 + 24) = 0x4010000000000000;
  sub_1000067DC(v42, &qword_10019E8F0);
  static Color.black.getter();
  uint64_t v47 = Color.opacity(_:)();
  swift_release();
  uint64_t v48 = v61;
  sub_1000066D4(v45, v61, &qword_10019E8F8);
  uint64_t v49 = v48 + *(int *)(sub_100006560(&qword_10019E998) + 36);
  *(void *)uint64_t v49 = v47;
  *(_OWORD *)(v49 + 8) = xmmword_100154500;
  *(void *)(v49 + 24) = 0x4000000000000000;
  return sub_1000067DC(v45, &qword_10019E8F8);
}

uint64_t sub_1000FF33C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  long long v82 = a1;
  uint64_t v2 = type metadata accessor for PhotoEntryView(0);
  uint64_t v77 = *(void *)(v2 - 8);
  uint64_t v76 = *(void *)(v77 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v75 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v4 - 8);
  uint64_t v73 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019E9B0);
  uint64_t v79 = *(void *)(v6 - 8);
  uint64_t v80 = v6;
  __chkstk_darwin(v6);
  long long v78 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v74 = (char *)&v71 - v9;
  uint64_t v10 = type metadata accessor for BlendMode();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019E9B8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_10019A638);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100006560(&qword_10019A640);
  __chkstk_darwin(v21 - 8);
  unint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100006560(&qword_10019E9C0);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100006560(&qword_10019E9C8);
  uint64_t v29 = v28 - 8;
  __chkstk_darwin(v28);
  uint64_t v71 = (uint64_t)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v72 = (uint64_t)&v71 - v32;
  *(void *)uint64_t v16 = static HorizontalAlignment.leading.getter();
  *((void *)v16 + 1) = 0;
  v16[16] = 0;
  uint64_t v33 = sub_100006560(&qword_10019E9D0);
  sub_1000FFACC(v82, (uint64_t)&v16[*(int *)(v33 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for BlendMode.plusLighter(_:), v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v20[*(int *)(v18 + 44)], v13, v10);
  sub_1000066D4((uint64_t)v16, (uint64_t)v20, &qword_10019E9B8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1000067DC((uint64_t)v16, &qword_10019E9B8);
  uint64_t v34 = static Alignment.leading.getter();
  sub_100052958(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v23, 0.0, 1, 0.0, 1, v34, v35);
  sub_1000067DC((uint64_t)v20, &qword_10019A638);
  LOBYTE(v20) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  sub_1000066D4((uint64_t)v23, (uint64_t)v27, &qword_10019A640);
  uint64_t v44 = &v27[*(int *)(v25 + 44)];
  *uint64_t v44 = (char)v20;
  *((void *)v44 + 1) = v37;
  *((void *)v44 + 2) = v39;
  *((void *)v44 + 3) = v41;
  *((void *)v44 + 4) = v43;
  v44[40] = 0;
  sub_1000067DC((uint64_t)v23, &qword_10019A640);
  LOBYTE(v20) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v53 = v71;
  sub_1000066D4((uint64_t)v27, v71, &qword_10019E9C0);
  uint64_t v54 = v53 + *(int *)(v29 + 44);
  uint64_t v55 = v53;
  *(unsigned char *)uint64_t v54 = (_BYTE)v20;
  *(void *)(v54 + 8) = v46;
  *(void *)(v54 + 16) = v48;
  *(void *)(v54 + 24) = v50;
  *(void *)(v54 + 32) = v52;
  *(unsigned char *)(v54 + 40) = 0;
  sub_1000067DC((uint64_t)v27, &qword_10019E9C0);
  uint64_t v56 = v72;
  sub_10001D6D8(v53, v72, &qword_10019E9C8);
  uint64_t v57 = v82;
  uint64_t v58 = v82[1];
  uint64_t v83 = *v82;
  uint64_t v84 = v58;
  sub_100006560(&qword_10019E908);
  State.wrappedValue.getter();
  sub_1000066D4(v85 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL, v73, &qword_100198630);
  swift_release();
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  uint64_t v59 = v75;
  sub_1000FEA40((uint64_t)v57, v75, type metadata accessor for PhotoEntryView);
  unint64_t v60 = (*(unsigned __int8 *)(v77 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  uint64_t v61 = swift_allocObject();
  sub_100104158(v59, v61 + v60, type metadata accessor for PhotoEntryView);
  sub_100006560(&qword_10019E9D8);
  sub_1001048CC();
  uint64_t v62 = v74;
  AsyncImage.init(url:scale:transaction:content:)();
  sub_1000066D4(v56, v55, &qword_10019E9C8);
  uint64_t v63 = v78;
  uint64_t v64 = v79;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v66 = v80;
  v65(v78, v62, v80);
  uint64_t v67 = v81;
  sub_1000066D4(v55, v81, &qword_10019E9C8);
  uint64_t v68 = sub_100006560(&qword_10019EA18);
  v65((char *)(v67 + *(int *)(v68 + 48)), v63, v66);
  uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
  v69(v62, v66);
  sub_1000067DC(v56, &qword_10019E9C8);
  v69(v63, v66);
  return sub_1000067DC(v55, &qword_10019E9C8);
}

uint64_t sub_1000FFACC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v126 = sub_100006560(&qword_100198618) - 8;
  __chkstk_darwin(v126);
  uint64_t v124 = (uint64_t)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v122);
  uint64_t v121 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100006560(&qword_10019EA28) - 8;
  __chkstk_darwin(v123);
  uint64_t v6 = (_OWORD *)((char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v125 = (uint64_t)&v107 - v8;
  uint64_t v9 = sub_100006560(&qword_10019D428);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019DE18);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v107 - v17;
  uint64_t v119 = (uint64_t)&v107 - v17;
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0x4010000000000000;
  v11[16] = 0;
  uint64_t v19 = sub_100006560(&qword_10019D440);
  sub_100100524(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  char v20 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_1000066D4((uint64_t)v11, (uint64_t)v15, &qword_10019D428);
  uint64_t v29 = &v15[*(int *)(v13 + 44)];
  uint64_t v120 = v15;
  *uint64_t v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_1000067DC((uint64_t)v11, &qword_10019D428);
  sub_10001D6D8((uint64_t)v15, (uint64_t)v18, &qword_10019DE18);
  uint64_t v109 = *a1;
  uint64_t v108 = a1[1];
  *(void *)&long long v135 = v109;
  *((void *)&v135 + 1) = v108;
  uint64_t v107 = sub_100006560(&qword_10019E908);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v35 = Text.font(_:)();
  uint64_t v37 = v36;
  char v39 = v38;
  swift_release();
  sub_1000065A4(v30, v32, v34);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v40 = Color.opacity(_:)();
  swift_release();
  *(void *)&long long v135 = v40;
  uint64_t v118 = Text.foregroundStyle<A>(_:)();
  uint64_t v116 = v41;
  uint64_t v117 = v42;
  int v115 = v43 & 1;
  sub_1000065A4(v35, v37, v39 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  int v114 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v113 = v44;
  uint64_t v112 = v45;
  uint64_t v111 = v46;
  uint64_t v110 = v47;
  *(void *)&long long v135 = v109;
  *((void *)&v135 + 1) = v108;
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v48 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v50 = v49;
  LOBYTE(v35) = v51 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v52 = Text.font(_:)();
  uint64_t v54 = v53;
  char v56 = v55;
  swift_release();
  LOBYTE(v18) = v56 & 1;
  sub_1000065A4(v48, v50, v35);
  swift_bridgeObjectRelease();
  *(void *)&long long v135 = static Color.white.getter();
  uint64_t v57 = Text.foregroundStyle<A>(_:)();
  uint64_t v59 = v58;
  char v61 = v60;
  uint64_t v63 = v62;
  sub_1000065A4(v52, v54, (char)v18);
  swift_release();
  swift_bridgeObjectRelease();
  LOBYTE(v54) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  LOBYTE(v32) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v79 = v78;
  char v134 = v61 & 1;
  char v132 = 0;
  char v129 = 0;
  static Color.white.getter();
  uint64_t v80 = Color.opacity(_:)();
  swift_release();
  char v81 = static Edge.Set.all.getter();
  *(void *)&long long v135 = v57;
  *((void *)&v135 + 1) = v59;
  LOBYTE(v136) = v134;
  *(_DWORD *)((char *)&v136 + 1) = v128[0];
  DWORD1(v136) = *(_DWORD *)((char *)v128 + 3);
  *((void *)&v136 + 1) = v63;
  LOBYTE(v137) = v54;
  *(_DWORD *)((char *)&v137 + 1) = *(_DWORD *)v133;
  DWORD1(v137) = *(_DWORD *)&v133[3];
  *((void *)&v137 + 1) = v65;
  *(void *)&long long v138 = v67;
  *((void *)&v138 + 1) = v69;
  *(void *)&long long v139 = v71;
  BYTE8(v139) = v132;
  HIDWORD(v139) = *(_DWORD *)&v131[3];
  *(_DWORD *)((char *)&v139 + 9) = *(_DWORD *)v131;
  LOBYTE(v140) = v32;
  DWORD1(v140) = *(_DWORD *)&v130[3];
  *(_DWORD *)((char *)&v140 + 1) = *(_DWORD *)v130;
  *((void *)&v140 + 1) = v73;
  *(void *)&long long v141 = v75;
  *((void *)&v141 + 1) = v77;
  *(void *)uint64_t v142 = v79;
  v142[8] = v129;
  *(void *)&v142[16] = v80;
  v142[24] = v81;
  long long v82 = v121;
  uint64_t v83 = &v121[*(int *)(v122 + 28)];
  uint64_t v84 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v85 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v85 - 8) + 104))(v83, v84, v85);
  __asm { FMOV            V0.2D, #16.0 }
  *long long v82 = _Q0;
  uint64_t v91 = v124;
  sub_1000FEA40((uint64_t)v82, v124, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v91 + *(int *)(v126 + 44)) = 256;
  sub_1000066D4(v91, (uint64_t)v6 + *(int *)(v123 + 44), &qword_100198618);
  long long v92 = *(_OWORD *)v142;
  v6[6] = v141;
  v6[7] = v92;
  *(_OWORD *)((char *)v6 + 121) = *(_OWORD *)&v142[9];
  long long v93 = v138;
  v6[2] = v137;
  v6[3] = v93;
  long long v94 = v140;
  v6[4] = v139;
  v6[5] = v94;
  long long v95 = v136;
  *uint64_t v6 = v135;
  v6[1] = v95;
  sub_100104AF8((uint64_t)&v135);
  sub_1000067DC(v91, &qword_100198618);
  sub_1000FEC60((uint64_t)v82, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_100104B4C((uint64_t)&v135);
  uint64_t v96 = v125;
  sub_10001D6D8((uint64_t)v6, v125, &qword_10019EA28);
  uint64_t v97 = v119;
  uint64_t v98 = (uint64_t)v120;
  sub_1000066D4(v119, (uint64_t)v120, &qword_10019DE18);
  sub_1000066D4(v96, (uint64_t)v6, &qword_10019EA28);
  uint64_t v99 = v127;
  sub_1000066D4(v98, v127, &qword_10019DE18);
  uint64_t v100 = sub_100006560(&qword_10019EA30);
  uint64_t v101 = v99 + *(int *)(v100 + 48);
  uint64_t v102 = v118;
  uint64_t v103 = v116;
  *(void *)uint64_t v101 = v118;
  *(void *)(v101 + 8) = v103;
  LOBYTE(v91) = v115;
  *(unsigned char *)(v101 + 16) = v115;
  *(void *)(v101 + 24) = v117;
  *(unsigned char *)(v101 + 32) = v114;
  uint64_t v104 = v112;
  *(void *)(v101 + 40) = v113;
  *(void *)(v101 + 48) = v104;
  uint64_t v105 = v110;
  *(void *)(v101 + 56) = v111;
  *(void *)(v101 + 64) = v105;
  *(unsigned char *)(v101 + 72) = 0;
  sub_1000066D4((uint64_t)v6, v99 + *(int *)(v100 + 64), &qword_10019EA28);
  sub_100010924(v102, v103, v91);
  swift_bridgeObjectRetain();
  sub_1000067DC(v96, &qword_10019EA28);
  sub_1000067DC(v97, &qword_10019DE18);
  sub_1000067DC((uint64_t)v6, &qword_10019EA28);
  sub_1000065A4(v102, v103, v91);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v98, &qword_10019DE18);
}

uint64_t sub_100100524@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = sub_100006560(&qword_10019D458);
  __chkstk_darwin(v3 - 8);
  uint64_t v31 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v33 = v8;
  uint64_t v34 = v39;
  char v35 = v40;
  uint64_t v36 = v41;
  char v37 = v42;
  long long v38 = v43;
  sub_100006560(&qword_10019D460);
  sub_100104BA0((unint64_t *)&qword_10019D468, &qword_10019D460);
  View.accessibilityHidden(_:)();
  swift_release();
  uint64_t v9 = a1[1];
  uint64_t v33 = *a1;
  uint64_t v34 = v9;
  sub_100006560(&qword_10019E908);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  swift_release();
  sub_1000065A4(v10, v12, v14);
  swift_bridgeObjectRelease();
  uint64_t v33 = static Color.white.getter();
  uint64_t v20 = Text.foregroundStyle<A>(_:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  sub_1000065A4(v15, v17, v19 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = v31;
  sub_1000066D4((uint64_t)v7, v31, &qword_10019D458);
  uint64_t v28 = v32;
  sub_1000066D4(v27, v32, &qword_10019D458);
  uint64_t v29 = v28 + *(int *)(sub_100006560(&qword_10019D470) + 48);
  *(void *)uint64_t v29 = v20;
  *(void *)(v29 + 8) = v22;
  *(unsigned char *)(v29 + 16) = v26;
  *(void *)(v29 + 24) = v24;
  sub_100010924(v20, v22, v26);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v7, &qword_10019D458);
  sub_1000065A4(v20, v22, v26);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v27, &qword_10019D458);
}

double sub_10010088C@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  char v42 = a3;
  uint64_t v5 = type metadata accessor for Image.ResizingMode();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AsyncImagePhase();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  char v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v11);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v10 + 88))(v13, v9) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    uint64_t v41 = *v13;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
    uint64_t v40 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = a2[1];
    *(void *)&long long v90 = *a2;
    *((void *)&v90 + 1) = v14;
    uint64_t v15 = v90;
    uint64_t v33 = v90;
    sub_100006560(&qword_10019E908);
    State.wrappedValue.getter();
    uint64_t v16 = v65;
    swift_getKeyPath();
    *(void *)&long long v90 = v16;
    sub_1000FEC18((unint64_t *)&qword_10019E778, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v90 = v15;
    *((void *)&v90 + 1) = v14;
    State.wrappedValue.getter();
    uint64_t v17 = v65;
    swift_getKeyPath();
    *(void *)&long long v90 = v17;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v36 = v75;
    uint64_t v37 = v77;
    int v34 = v78;
    int v35 = v76;
    uint64_t v38 = v80;
    uint64_t v39 = v79;
    uint64_t v18 = v33;
    *(void *)&long long v90 = v33;
    *((void *)&v90 + 1) = v14;
    State.wrappedValue.getter();
    uint64_t v19 = v65;
    swift_getKeyPath();
    *(void *)&long long v90 = v19;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v90 = v18;
    *((void *)&v90 + 1) = v14;
    State.wrappedValue.getter();
    uint64_t v20 = v65;
    swift_getKeyPath();
    *(void *)&long long v90 = v20;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v21 = v81;
    uint64_t v22 = v83;
    uint64_t v24 = v85;
    uint64_t v23 = v86;
    char v53 = 1;
    char v50 = v35;
    char v48 = v34;
    char v46 = v82;
    char v44 = v84;
    sub_100006560(&qword_100199118);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10014CCD0;
    *(void *)(v25 + 32) = static Color.clear.getter();
    *(void *)(v25 + 40) = static Color.black.getter();
    *(void *)&long long v90 = v25;
    specialized Array._endMutation()();
    Gradient.init(colors:)();
    LinearGradient.init(gradient:startPoint:endPoint:)();
    v54[0] = v40;
    v54[1] = 0;
    LOBYTE(v55) = v53;
    BYTE1(v55) = 1;
    *(_DWORD *)((char *)&v55 + 2) = v51;
    WORD3(v55) = v52;
    *((void *)&v55 + 1) = v36;
    LOBYTE(v56) = v50;
    *(_DWORD *)((char *)&v56 + 1) = *(_DWORD *)v49;
    DWORD1(v56) = *(_DWORD *)&v49[3];
    *((void *)&v56 + 1) = v37;
    LOBYTE(v57) = v48;
    *(_DWORD *)((char *)&v57 + 1) = *(_DWORD *)v47;
    DWORD1(v57) = *(_DWORD *)&v47[3];
    *((void *)&v57 + 1) = v39;
    *(void *)&long long v58 = v38;
    *((void *)&v58 + 1) = v21;
    LOBYTE(v59) = v46;
    *(_DWORD *)((char *)&v59 + 1) = *(_DWORD *)v45;
    DWORD1(v59) = *(_DWORD *)&v45[3];
    *((void *)&v59 + 1) = v22;
    LOBYTE(v60) = v44;
    DWORD1(v60) = *(_DWORD *)&v43[3];
    *(_DWORD *)((char *)&v60 + 1) = *(_DWORD *)v43;
    *((void *)&v60 + 1) = v24;
    *(void *)&long long v61 = v23;
    WORD4(v61) = 0;
    *(void *)uint64_t v62 = v87;
    *(_OWORD *)&v62[8] = v88;
    *(_OWORD *)&v62[24] = v89;
    long long v65 = (unint64_t)v40;
    long long v66 = v55;
    long long v69 = v58;
    long long v70 = v59;
    long long v67 = v56;
    long long v68 = v57;
    *(void *)&v74[1] = *((void *)&v89 + 1);
    long long v73 = *(_OWORD *)v62;
    v74[0] = *(_OWORD *)&v62[16];
    long long v71 = v60;
    long long v72 = v61;
    sub_1000756D0((uint64_t)&v65);
    sub_10001D6D8((uint64_t)&v65, (uint64_t)&v90, &qword_10019EA20);
    sub_100104A88((uint64_t)v54);
    sub_100104A88((uint64_t)v54);
    sub_100006560(&qword_10019E9F0);
    sub_100104948();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_100104AC0((uint64_t)v54);
    sub_100104AC0((uint64_t)v54);
    long long v97 = v63[7];
    long long v98 = v63[8];
    v99[0] = v64[0];
    *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)((char *)v64 + 9);
    long long v93 = v63[3];
    long long v94 = v63[4];
    long long v95 = v63[5];
    long long v96 = v63[6];
    long long v90 = v63[0];
    long long v91 = v63[1];
    long long v92 = v63[2];
  }
  else
  {
    sub_1000754A8((uint64_t)v63);
    sub_10001D6D8((uint64_t)v63, (uint64_t)&v90, &qword_10019EA20);
    sub_100006560(&qword_10019E9F0);
    sub_100104948();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v13, v9);
    long long v97 = v72;
    long long v98 = v73;
    v99[0] = v74[0];
    *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)((char *)v74 + 9);
    long long v93 = v68;
    long long v94 = v69;
    long long v95 = v70;
    long long v96 = v71;
    long long v90 = v65;
    long long v91 = v66;
    long long v92 = v67;
  }
  long long v26 = v97;
  long long v27 = v99[0];
  uint64_t v28 = v42;
  v42[8] = v98;
  v28[9] = v27;
  *(_OWORD *)((char *)v28 + 153) = *(_OWORD *)((char *)v99 + 9);
  long long v29 = v93;
  long long v30 = v95;
  v28[4] = v94;
  v28[5] = v30;
  v28[6] = v96;
  v28[7] = v26;
  long long v31 = v91;
  _OWORD *v28 = v90;
  v28[1] = v31;
  double result = *(double *)&v92;
  v28[2] = v92;
  v28[3] = v29;
  return result;
}

double sub_10010106C@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Image.ResizingMode();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AsyncImagePhase();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  int v15 = (*(uint64_t (**)(void *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 != enum case for AsyncImagePhase.success(_:))
  {
    if (v15 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(void *, uint64_t))(v11 + 96))(v14, v10);
      swift_errorRelease();
    }
    else if (v15 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_100104638((uint64_t)&v82);
      sub_10001D6D8((uint64_t)&v82, (uint64_t)&v137, &qword_10019E9A0);
      sub_100006560(&qword_10019E928);
      sub_1001042BC();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
      long long v149 = v109;
      long long v150 = v110;
      v151[0] = v111[0];
      *(_OWORD *)((char *)v151 + 11) = *(_OWORD *)((char *)v111 + 11);
      long long v145 = v105;
      long long v146 = v106;
      long long v147 = v107;
      long long v148 = v108;
      long long v141 = v101;
      long long v142 = v102;
      long long v143 = v103;
      long long v144 = v104;
      long long v137 = v97;
      long long v138 = v98;
      long long v29 = v99;
      long long v30 = v100;
      goto LABEL_8;
    }
    id v24 = [self systemGray2Color];
    *(void *)char v46 = Color.init(uiColor:)();
    uint64_t v26 = a2[1];
    *(void *)&long long v137 = *a2;
    uint64_t v25 = v137;
    *((void *)&v137 + 1) = v26;
    sub_100006560(&qword_10019E908);
    State.wrappedValue.getter();
    uint64_t v27 = v97;
    swift_getKeyPath();
    *(void *)&long long v137 = v27;
    sub_1000FEC18((unint64_t *)&qword_10019E778, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    *(void *)&long long v137 = v25;
    *((void *)&v137 + 1) = v26;
    State.wrappedValue.getter();
    uint64_t v28 = v97;
    swift_getKeyPath();
    *(void *)&long long v137 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    long long v78 = *(_OWORD *)v46;
    LOBYTE(v79) = v46[16];
    *((void *)&v79 + 1) = v47;
    LOBYTE(v80[0]) = BYTE8(v47);
    *(_OWORD *)((char *)v80 + 8) = v48;
    sub_100104644((uint64_t)&v78);
    sub_10001D6D8((uint64_t)&v78, (uint64_t)&v137, &qword_10019E9A8);
    swift_retain();
    sub_100006560(&qword_10019E938);
    sub_100006560(&qword_10019E988);
    sub_100104338();
    sub_1001045BC();
    _ConditionalContent<>.init(storage:)();
    long long v109 = v75;
    long long v110 = v76;
    v111[0] = v77[0];
    *(_OWORD *)((char *)v111 + 10) = *(_OWORD *)((char *)v77 + 10);
    long long v105 = v71;
    long long v106 = v72;
    long long v107 = v73;
    long long v108 = v74;
    long long v101 = v67;
    long long v102 = v68;
    long long v103 = v69;
    long long v104 = v70;
    long long v97 = v63;
    long long v98 = v64;
    long long v99 = v65;
    long long v100 = v66;
    sub_100104650((uint64_t)&v97);
    sub_10001D6D8((uint64_t)&v97, (uint64_t)&v137, &qword_10019E9A0);
    sub_100006560(&qword_10019E928);
    sub_1001042BC();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    long long v149 = v94;
    long long v150 = v95;
    v151[0] = v96[0];
    *(_OWORD *)((char *)v151 + 11) = *(_OWORD *)((char *)v96 + 11);
    long long v145 = v90;
    long long v146 = v91;
    long long v147 = v92;
    long long v148 = v93;
    long long v141 = v86;
    long long v142 = v87;
    long long v143 = v88;
    long long v144 = v89;
    long long v137 = v82;
    long long v138 = v83;
    long long v29 = v84;
    long long v30 = v85;
LABEL_8:
    long long v139 = v29;
    long long v140 = v30;
    goto LABEL_9;
  }
  (*(void (**)(void *, uint64_t))(v11 + 96))(v14, v10);
  *(void *)char v46 = *v14;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
  uint64_t v45 = Image.resizable(capInsets:resizingMode:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = a2[1];
  *(void *)&long long v137 = *a2;
  uint64_t v17 = v137;
  *((void *)&v137 + 1) = v16;
  uint64_t v18 = v16;
  sub_100006560(&qword_10019E908);
  State.wrappedValue.getter();
  uint64_t v19 = v97;
  swift_getKeyPath();
  *(void *)&long long v137 = v19;
  sub_1000FEC18((unint64_t *)&qword_10019E778, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  *(void *)&long long v137 = v17;
  *((void *)&v137 + 1) = v18;
  uint64_t v20 = v18;
  State.wrappedValue.getter();
  uint64_t v21 = v97;
  swift_getKeyPath();
  *(void *)&long long v137 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v44 = v112;
  int v43 = v113;
  uint64_t v42 = v114;
  int v41 = v115;
  uint64_t v39 = v117;
  uint64_t v40 = v116;
  *(void *)&long long v137 = v17;
  *((void *)&v137 + 1) = v20;
  State.wrappedValue.getter();
  uint64_t v22 = v97;
  swift_getKeyPath();
  *(void *)&long long v137 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  *(void *)&long long v137 = v17;
  *((void *)&v137 + 1) = v20;
  State.wrappedValue.getter();
  uint64_t v23 = v97;
  swift_getKeyPath();
  *(void *)&long long v137 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v123 = v45;
  uint64_t v124 = 0;
  __int16 v125 = 257;
  uint64_t v126 = v44;
  char v127 = v43;
  uint64_t v128 = v42;
  char v129 = v41;
  uint64_t v130 = v40;
  uint64_t v131 = v39;
  uint64_t v132 = v118;
  char v133 = v119;
  uint64_t v134 = v120;
  char v135 = v121;
  long long v136 = v122;
  static Alignment.leading.getter();
  sub_1000529B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v137, 0.0, 1, 0.0, 1);
  swift_release();
  v61[12] = v149;
  v61[13] = v150;
  uint64_t v62 = *(void *)&v151[0];
  v61[8] = v145;
  v61[9] = v146;
  v61[10] = v147;
  v61[11] = v148;
  v61[4] = v141;
  v61[5] = v142;
  v61[6] = v143;
  v61[7] = v144;
  v61[0] = v137;
  v61[1] = v138;
  v61[2] = v139;
  v61[3] = v140;
  long long v75 = v149;
  long long v76 = v150;
  *(void *)&v77[0] = *(void *)&v151[0];
  long long v71 = v145;
  long long v72 = v146;
  long long v73 = v147;
  long long v74 = v148;
  long long v67 = v141;
  long long v68 = v142;
  long long v69 = v143;
  long long v70 = v144;
  long long v63 = v137;
  long long v64 = v138;
  long long v65 = v139;
  long long v66 = v140;
  *(_OWORD *)((char *)v77 + 8) = xmmword_100154510;
  BYTE8(v77[1]) = 1;
  sub_100104658((uint64_t)&v63);
  sub_10001D6D8((uint64_t)&v63, (uint64_t)&v137, &qword_10019E9A8);
  sub_1000636C8((uint64_t)v61);
  sub_100006560(&qword_10019E938);
  sub_100006560(&qword_10019E988);
  sub_100104338();
  sub_1001045BC();
  _ConditionalContent<>.init(storage:)();
  v80[10] = v58;
  v80[11] = v59;
  v81[0] = v60[0];
  *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)((char *)v60 + 10);
  v80[6] = v54;
  v80[7] = v55;
  v80[8] = v56;
  v80[9] = v57;
  v80[2] = v50;
  v80[3] = v51;
  v80[4] = v52;
  v80[5] = v53;
  long long v78 = *(_OWORD *)&v46[8];
  long long v79 = v47;
  v80[0] = v48;
  v80[1] = v49;
  long long v109 = v58;
  long long v110 = v59;
  v111[0] = v60[0];
  *(_OWORD *)((char *)v111 + 10) = *(_OWORD *)((char *)v60 + 10);
  long long v105 = v54;
  long long v106 = v55;
  long long v107 = v56;
  long long v108 = v57;
  long long v101 = v50;
  long long v102 = v51;
  long long v103 = v52;
  long long v104 = v53;
  long long v97 = *(_OWORD *)&v46[8];
  long long v98 = v47;
  long long v99 = v48;
  long long v100 = v49;
  sub_100104650((uint64_t)&v97);
  sub_10001D6D8((uint64_t)&v97, (uint64_t)&v137, &qword_10019E9A0);
  sub_100104664((uint64_t)&v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))j__swift_retain_0);
  sub_100006560(&qword_10019E928);
  sub_1001042BC();
  _ConditionalContent<>.init(storage:)();
  swift_release();
  sub_100104664((uint64_t)&v78, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))j__swift_release_0);
  sub_1001046FC((uint64_t)v61);
  long long v149 = v94;
  long long v150 = v95;
  v151[0] = v96[0];
  *(_OWORD *)((char *)v151 + 11) = *(_OWORD *)((char *)v96 + 11);
  long long v145 = v90;
  long long v146 = v91;
  long long v147 = v92;
  long long v148 = v93;
  long long v141 = v86;
  long long v142 = v87;
  long long v143 = v88;
  long long v144 = v89;
  long long v137 = v82;
  long long v138 = v83;
  long long v139 = v84;
  long long v140 = v85;
LABEL_9:
  long long v31 = v150;
  a3[12] = v149;
  a3[13] = v31;
  a3[14] = v151[0];
  *(_OWORD *)((char *)a3 + 235) = *(_OWORD *)((char *)v151 + 11);
  long long v32 = v146;
  a3[8] = v145;
  a3[9] = v32;
  long long v33 = v148;
  a3[10] = v147;
  a3[11] = v33;
  long long v34 = v142;
  a3[4] = v141;
  a3[5] = v34;
  long long v35 = v144;
  a3[6] = v143;
  a3[7] = v35;
  long long v36 = v138;
  *a3 = v137;
  a3[1] = v36;
  double result = *(double *)&v139;
  long long v38 = v140;
  a3[2] = v139;
  a3[3] = v38;
  return result;
}

uint64_t sub_100101D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v55 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v55);
  long long v56 = &v45[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v51 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v51);
  uint64_t v3 = &v45[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v45[-v9];
  uint64_t v50 = sub_100006560(&qword_10019EA38);
  __chkstk_darwin(v50);
  __n128 v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = sub_100006560(&qword_10019EA40);
  __chkstk_darwin(v52);
  uint64_t v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v53 = sub_100006560(&qword_10019EA48);
  __chkstk_darwin(v53);
  long long v54 = &v45[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v49 = static VerticalAlignment.center.getter();
  sub_1001023C4((uint64_t)v60);
  v61[296] = 0;
  memcpy(&v61[7], v60, 0x11CuLL);
  int v48 = 0;
  memcpy(v64, v61, sizeof(v64));
  int v47 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  char v62 = 0;
  int v46 = static Edge.Set.horizontal.getter();
  sub_10001D3A4((uint64_t)v10);
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  char v24 = static ColorScheme.== infix(_:_:)();
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  v25(v10, v4);
  if (v24)
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v26 = &qword_1001AA340;
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v26 = &qword_1001AA338;
  }
  uint64_t v27 = *v26;
  swift_retain();
  char v28 = v62;
  char v58 = 1;
  char v29 = static Edge.Set.all.getter();
  v59[0] = v49;
  v59[1] = 0x4028000000000000;
  LOBYTE(v59[2]) = v48;
  memcpy((char *)&v59[2] + 1, v64, 0x123uLL);
  LOBYTE(v59[39]) = v47;
  *(_DWORD *)((char *)&v59[39] + 1) = *(_DWORD *)v63;
  HIDWORD(v59[39]) = *(_DWORD *)&v63[3];
  v59[40] = v17;
  v59[41] = v19;
  v59[42] = v21;
  v59[43] = v23;
  LOBYTE(v59[44]) = v28;
  LOBYTE(v59[45]) = v46;
  memset(&v59[46], 0, 32);
  LOBYTE(v59[50]) = v58;
  v59[51] = v27;
  LOBYTE(v59[52]) = v29;
  long long v30 = (char *)v3 + *(int *)(v51 + 20);
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #16.0 }
  *uint64_t v3 = _Q0;
  long long v38 = v56;
  sub_1000FEA40((uint64_t)v3, (uint64_t)v56, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v38[*(int *)(v55 + 36)] = 256;
  sub_1000066D4((uint64_t)v38, (uint64_t)&v12[*(int *)(v50 + 36)], &qword_100198618);
  memcpy(v12, v59, 0x1A1uLL);
  sub_100104C0C((uint64_t)v59);
  sub_1000067DC((uint64_t)v38, &qword_100198618);
  sub_1000FEC60((uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_100104CDC((uint64_t)v59);
  static Color.black.getter();
  uint64_t v39 = Color.opacity(_:)();
  swift_release();
  sub_1000066D4((uint64_t)v12, (uint64_t)v14, &qword_10019EA38);
  uint64_t v40 = &v14[*(int *)(v52 + 36)];
  *(void *)uint64_t v40 = v39;
  *(_OWORD *)(v40 + 8) = xmmword_1001544F0;
  *((void *)v40 + 3) = 0x4010000000000000;
  sub_1000067DC((uint64_t)v12, &qword_10019EA38);
  static Color.black.getter();
  uint64_t v41 = Color.opacity(_:)();
  swift_release();
  uint64_t v42 = v54;
  sub_1000066D4((uint64_t)v14, (uint64_t)v54, &qword_10019EA40);
  int v43 = &v42[*(int *)(v53 + 36)];
  *(void *)int v43 = v41;
  *(_OWORD *)(v43 + 8) = xmmword_100154500;
  *((void *)v43 + 3) = 0x4000000000000000;
  sub_1000067DC((uint64_t)v14, &qword_10019EA40);
  return sub_10001D6D8((uint64_t)v42, v57, &qword_10019EA48);
}

uint64_t sub_1001023C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = Image.init(_:bundle:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v31 = v66;
  uint64_t v32 = v64;
  char v27 = v67;
  char v28 = v65;
  uint64_t v29 = v69;
  uint64_t v30 = v68;
  uint64_t v2 = static HorizontalAlignment.leading.getter();
  sub_100102734((uint64_t)&v51);
  long long v3 = v51;
  char v4 = v52;
  uint64_t v5 = *((void *)&v53 + 1);
  char v6 = v54;
  uint64_t v70 = v2;
  uint64_t v71 = 0;
  char v72 = 0;
  long long v73 = v51;
  char v74 = v52;
  uint64_t v75 = *((void *)&v52 + 1);
  long long v76 = v53;
  uint64_t v7 = v53;
  char v77 = v54;
  uint64_t v78 = *((void *)&v54 + 1);
  static Alignment.leading.getter();
  sub_100052094(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v34, 0.0, 1, 0.0, 1);
  sub_1000065A4(v3, *((uint64_t *)&v3 + 1), v4);
  swift_bridgeObjectRelease();
  sub_1000065A4(v7, v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = Image.init(systemName:)();
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  uint64_t v9 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  int v11 = static HierarchicalShapeStyle.tertiary.getter();
  long long v12 = v44;
  long long v13 = v45;
  v47[10] = v44;
  v47[11] = v45;
  long long v14 = v40;
  long long v15 = v41;
  v47[6] = v40;
  unsigned char v47[7] = v41;
  long long v16 = v42;
  v47[8] = v42;
  v47[9] = v43;
  long long v17 = v36;
  long long v18 = v37;
  v47[2] = v36;
  v47[3] = v37;
  long long v19 = v39;
  long long v20 = v38;
  v47[4] = v38;
  v47[5] = v39;
  long long v21 = v35;
  long long v22 = v34;
  v47[0] = v34;
  v47[1] = v35;
  *(_OWORD *)(a1 + 200) = v43;
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 136) = v19;
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 72) = v21;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v20;
  uint64_t v23 = v46;
  uint64_t v48 = v46;
  char v50 = v28;
  char v49 = v27;
  *(_OWORD *)(a1 + 56) = v22;
  char v24 = v50;
  char v25 = v49;
  *(void *)a1 = v33;
  *(void *)(a1 + 8) = v32;
  *(unsigned char *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v31;
  *(unsigned char *)(a1 + 32) = v25;
  *(void *)(a1 + 40) = v30;
  *(void *)(a1 + 48) = v29;
  *(void *)(a1 + 248) = v23;
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 264) = KeyPath;
  *(void *)(a1 + 272) = v9;
  *(_DWORD *)(a1 + 280) = v11;
  swift_retain();
  sub_1000636F4((uint64_t)v47);
  long long v61 = v44;
  long long v62 = v45;
  uint64_t v63 = v46;
  long long v57 = v40;
  long long v58 = v41;
  long long v59 = v42;
  long long v60 = v43;
  long long v53 = v36;
  long long v54 = v37;
  long long v55 = v38;
  long long v56 = v39;
  long long v51 = v34;
  long long v52 = v35;
  sub_100104DB4((uint64_t)&v51);
  return swift_release();
}

uint64_t sub_100102734@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for DefaultEntryView(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  char v30 = v9;
  uint64_t v33 = v10;
  swift_release();
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  sub_1000065A4(v11, v13, v15);
  swift_bridgeObjectRelease();
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  char v21 = v20 & 1;
  swift_retain();
  uint64_t v22 = Text.foregroundStyle<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  sub_1000065A4(v16, v18, v21);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a1 = v32;
  *(void *)(a1 + 8) = v31;
  *(unsigned char *)(a1 + 16) = v30 & 1;
  *(void *)(a1 + 24) = v33;
  *(void *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v24;
  *(unsigned char *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = v26;
  sub_100010924(v32, v31, v30 & 1);
  swift_bridgeObjectRetain();
  sub_100010924(v22, v24, v28);
  swift_bridgeObjectRetain();
  sub_1000065A4(v22, v24, v28);
  swift_bridgeObjectRelease();
  sub_1000065A4(v32, v31, v30 & 1);
  return swift_bridgeObjectRelease();
}

double sub_100102A54@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEC18((unint64_t *)&qword_10019E778, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 112);
  *a2 = result;
  return result;
}

uint64_t sub_100102AFC()
{
  return swift_release();
}

double sub_100102BD4@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000FEC18((unint64_t *)&qword_10019E778, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsPhotoEntryViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 120);
  *a2 = result;
  return result;
}

uint64_t sub_100102C7C()
{
  return swift_release();
}

uint64_t sub_100102D54()
{
  return sub_1000FE720();
}

uint64_t sub_100102D64()
{
  return sub_10012A284(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100102D8C()
{
  return sub_10012A28C(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t *sub_100102DAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    v11[16] = v12[16];
    *((void *)v11 + 3) = *((void *)v12 + 3);
    char v14 = (char *)a1 + v10;
    char v15 = (char *)a2 + v10;
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)char v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    v14[16] = v15[16];
    *((void *)v14 + 3) = *((void *)v15 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100102F1C(uint64_t a1)
{
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100102FE8(void *a1, void *a2, uint64_t a3)
{
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  v9[16] = v10[16];
  *((void *)v9 + 3) = *((void *)v10 + 3);
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a2 + v8;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = v14;
  v12[16] = v13[16];
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100103108(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000067DC((uint64_t)a1, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
  *((void *)v8 + 1) = *(void *)((char *)a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[16] = v9[16];
  *((void *)v8 + 3) = *((void *)v9 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)a2 + v10);
  *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[16] = v12[16];
  *((void *)v11 + 3) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100103280(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  return a1;
}

char *sub_10010336C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000067DC((uint64_t)a1, &qword_100198A98);
    uint64_t v6 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v9[16] = v10[16];
  *((void *)v9 + 3) = *((void *)v10 + 3);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  *((void *)v13 + 3) = *((void *)v14 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001034BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001034D0);
}

uint64_t sub_1001034D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006560(qword_100198F38);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100103598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001035AC);
}

uint64_t sub_1001035AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100006560(qword_100198F38);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void sub_100103670()
{
  sub_100026608();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for PhotoEntryViewSizePreferenceKey()
{
  return &type metadata for PhotoEntryViewSizePreferenceKey;
}

uint64_t *sub_100103718(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100103840(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_100103900(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_retain();
  swift_retain();
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1001039D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_100103ADC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_100103BB0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198A98);
    uint64_t v9 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100103CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100103CD0);
}

uint64_t sub_100103CD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(qword_100198F38);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100103D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100103D98);
}

void *sub_100103D98(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(qword_100198F38);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100103E44()
{
  sub_100026608();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_100103EE0()
{
  unint64_t result = qword_10019E8A8;
  if (!qword_10019E8A8)
  {
    sub_10000650C(&qword_10019E708);
    sub_100103F80();
    sub_100010484(&qword_10019E8C8, &qword_10019E710);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E8A8);
  }
  return result;
}

unint64_t sub_100103F80()
{
  unint64_t result = qword_10019E8B0;
  if (!qword_10019E8B0)
  {
    sub_10000650C(&qword_10019E700);
    sub_100103FF4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E8B0);
  }
  return result;
}

unint64_t sub_100103FF4()
{
  unint64_t result = qword_10019E8B8;
  if (!qword_10019E8B8)
  {
    sub_10000650C(&qword_10019E8C0);
    sub_1000FEAA8();
    sub_1000FEC18(&qword_10019E770, (void (*)(uint64_t))type metadata accessor for DefaultEntryView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E8B8);
  }
  return result;
}

unint64_t sub_1001040A0(uint64_t a1)
{
  unint64_t result = sub_1001040C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001040C8()
{
  unint64_t result = qword_10019E8D0;
  if (!qword_10019E8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E8D0);
  }
  return result;
}

uint64_t sub_10010411C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104138()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100104158(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_1001041C0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PhotoEntryView(0) - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_10010106C(a1, v6, a2);
}

unint64_t sub_100104240()
{
  unint64_t result = qword_10019E918;
  if (!qword_10019E918)
  {
    sub_10000650C(&qword_10019E910);
    sub_1001042BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E918);
  }
  return result;
}

unint64_t sub_1001042BC()
{
  unint64_t result = qword_10019E920;
  if (!qword_10019E920)
  {
    sub_10000650C(&qword_10019E928);
    sub_100104338();
    sub_1001045BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E920);
  }
  return result;
}

unint64_t sub_100104338()
{
  unint64_t result = qword_10019E930;
  if (!qword_10019E930)
  {
    sub_10000650C(&qword_10019E938);
    sub_1001043B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E930);
  }
  return result;
}

unint64_t sub_1001043B4()
{
  unint64_t result = qword_10019E940;
  if (!qword_10019E940)
  {
    sub_10000650C(&qword_10019E948);
    sub_100104430();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E940);
  }
  return result;
}

unint64_t sub_100104430()
{
  unint64_t result = qword_10019E950;
  if (!qword_10019E950)
  {
    sub_10000650C(&qword_10019E958);
    sub_1001044AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E950);
  }
  return result;
}

unint64_t sub_1001044AC()
{
  unint64_t result = qword_10019E960;
  if (!qword_10019E960)
  {
    sub_10000650C(&qword_10019E968);
    sub_100104528();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E960);
  }
  return result;
}

unint64_t sub_100104528()
{
  unint64_t result = qword_10019E970;
  if (!qword_10019E970)
  {
    sub_10000650C(&qword_10019E978);
    sub_100104BA0((unint64_t *)&qword_1001990A0, &qword_1001990A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E970);
  }
  return result;
}

unint64_t sub_1001045BC()
{
  unint64_t result = qword_10019E980;
  if (!qword_10019E980)
  {
    sub_10000650C(&qword_10019E988);
    sub_10004A12C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E980);
  }
  return result;
}

uint64_t sub_100104638(uint64_t result)
{
  *(unsigned char *)(result + 250) = 1;
  return result;
}

uint64_t sub_100104644(uint64_t result)
{
  *(unsigned char *)(result + 249) = 1;
  return result;
}

uint64_t sub_100104650(uint64_t result)
{
  *(unsigned char *)(result + 250) = 0;
  return result;
}

uint64_t sub_100104658(uint64_t result)
{
  *(unsigned char *)(result + 249) = 0;
  return result;
}

uint64_t sub_100104664(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _WORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(_WORD *)(a1 + 248));
  return a1;
}

uint64_t sub_1001046FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010472C()
{
  uint64_t v1 = (int *)(type metadata accessor for PhotoEntryView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[7];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

double sub_10010484C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PhotoEntryView(0) - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_10010088C(a1, v6, a2);
}

unint64_t sub_1001048CC()
{
  unint64_t result = qword_10019E9E0;
  if (!qword_10019E9E0)
  {
    sub_10000650C(&qword_10019E9D8);
    sub_100104948();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E9E0);
  }
  return result;
}

unint64_t sub_100104948()
{
  unint64_t result = qword_10019E9E8;
  if (!qword_10019E9E8)
  {
    sub_10000650C(&qword_10019E9F0);
    sub_1001049E8();
    sub_100010484(&qword_10019EA08, &qword_10019EA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E9E8);
  }
  return result;
}

unint64_t sub_1001049E8()
{
  unint64_t result = qword_10019E9F8;
  if (!qword_10019E9F8)
  {
    sub_10000650C(&qword_10019EA00);
    sub_1001044AC();
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E9F8);
  }
  return result;
}

uint64_t sub_100104A88(uint64_t a1)
{
  return a1;
}

uint64_t sub_100104AC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100104AF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100104B4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100104BA0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100104C0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v7 = *(unsigned char *)(a1 + 152);
  swift_retain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_100010924(v5, v6, v7);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100104CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v7 = *(unsigned char *)(a1 + 152);
  swift_release();
  sub_1000065A4(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_1000065A4(v5, v6, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100104DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1000065A4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100104E2C()
{
  unint64_t result = qword_10019EA50;
  if (!qword_10019EA50)
  {
    sub_10000650C(&qword_10019E998);
    sub_100104EA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA50);
  }
  return result;
}

unint64_t sub_100104EA8()
{
  unint64_t result = qword_10019EA58;
  if (!qword_10019EA58)
  {
    sub_10000650C(&qword_10019E8F8);
    sub_100104F24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA58);
  }
  return result;
}

unint64_t sub_100104F24()
{
  unint64_t result = qword_10019EA60;
  if (!qword_10019EA60)
  {
    sub_10000650C(&qword_10019E8F0);
    sub_100104FC4();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA60);
  }
  return result;
}

unint64_t sub_100104FC4()
{
  unint64_t result = qword_10019EA68;
  if (!qword_10019EA68)
  {
    sub_10000650C(&qword_10019E8E8);
    sub_100010484(&qword_10019EA70, &qword_10019E8E0);
    sub_100010484(&qword_10019EA78, &qword_10019E990);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA68);
  }
  return result;
}

unint64_t sub_10010508C()
{
  unint64_t result = qword_10019EA80;
  if (!qword_10019EA80)
  {
    sub_10000650C(&qword_10019EA48);
    sub_100105108();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA80);
  }
  return result;
}

unint64_t sub_100105108()
{
  unint64_t result = qword_10019EA88;
  if (!qword_10019EA88)
  {
    sub_10000650C(&qword_10019EA40);
    sub_100105184();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA88);
  }
  return result;
}

unint64_t sub_100105184()
{
  unint64_t result = qword_10019EA90;
  if (!qword_10019EA90)
  {
    sub_10000650C(&qword_10019EA38);
    sub_100105224();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA90);
  }
  return result;
}

unint64_t sub_100105224()
{
  unint64_t result = qword_10019EA98;
  if (!qword_10019EA98)
  {
    sub_10000650C(&qword_10019EAA0);
    sub_1001052C4();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EA98);
  }
  return result;
}

unint64_t sub_1001052C4()
{
  unint64_t result = qword_10019EAA8;
  if (!qword_10019EAA8)
  {
    sub_10000650C(&qword_10019EAB0);
    sub_100105340();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EAA8);
  }
  return result;
}

unint64_t sub_100105340()
{
  unint64_t result = qword_10019EAB8;
  if (!qword_10019EAB8)
  {
    sub_10000650C(&qword_10019EAC0);
    sub_100010484(&qword_10019EAC8, &qword_10019EAD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EAB8);
  }
  return result;
}

uint64_t sub_1001053E0()
{
  return sub_100102D8C();
}

uint64_t sub_1001053F8()
{
  return sub_100102D64();
}

void *initializeWithCopy for CalendarIcon(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CalendarIcon(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CalendarIcon(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CalendarIcon()
{
  return &type metadata for CalendarIcon;
}

uint64_t sub_100105518()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100105534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v68 = a2;
  uint64_t v67 = a1;
  uint64_t v74 = a5;
  uint64_t v7 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v7 - 8);
  uint64_t v73 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100006560(&qword_100198618) - 8;
  __chkstk_darwin(v69);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RoundedRectangle() - 8;
  uint64_t v66 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019BB30);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v75 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = sub_100006560(&qword_10019BB38) - 8;
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006560(&qword_10019EAD8);
  __chkstk_darwin(v18 - 8);
  char v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100006560(&qword_10019EAE0);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)char v20 = static HorizontalAlignment.center.getter();
  *((void *)v20 + 1) = 0;
  v20[16] = 0;
  uint64_t v25 = sub_100006560(&qword_10019EAE8);
  sub_100105B24(v67, v68, a3, a4, (uint64_t)&v20[*(int *)(v25 + 44)]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v70 = v24;
  sub_1000066D4((uint64_t)v20, (uint64_t)v24, &qword_10019EAD8);
  uint64_t v26 = &v24[*(int *)(v22 + 44)];
  long long v27 = v77;
  *(_OWORD *)uint64_t v26 = v76;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v78;
  sub_1000067DC((uint64_t)v20, &qword_10019EAD8);
  uint64_t v28 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  char v30 = &v13[*(int *)(v11 + 28)];
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104);
  v33(v30, v31, v32);
  __asm { FMOV            V0.2D, #9.0 }
  long long v68 = _Q0;
  *(_OWORD *)uint64_t v13 = _Q0;
  sub_10001081C((uint64_t)v13, (uint64_t)v10);
  *(_WORD *)&v10[*(int *)(v69 + 44)] = 256;
  uint64_t v39 = *(int *)(v15 + 44);
  long long v40 = v75;
  sub_1000066D4((uint64_t)v10, (uint64_t)v75 + v39, &qword_100198618);
  *long long v40 = KeyPath;
  v40[1] = v28;
  swift_retain();
  swift_retain();
  sub_1000067DC((uint64_t)v10, &qword_100198618);
  sub_100010934((uint64_t)v13);
  swift_release();
  swift_release();
  v33(&v13[*(int *)(v66 + 28)], v31, v32);
  *(_OWORD *)uint64_t v13 = v68;
  static Color.primary.getter();
  uint64_t v41 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v42 = v73;
  sub_10001081C((uint64_t)v13, v73);
  uint64_t v43 = v42 + *(int *)(sub_100006560(&qword_10019A188) + 36);
  long long v44 = v80;
  *(_OWORD *)uint64_t v43 = v79;
  *(_OWORD *)(v43 + 16) = v44;
  *(void *)(v43 + 32) = v81;
  uint64_t v45 = sub_100006560(&qword_10019A190);
  *(void *)(v42 + *(int *)(v45 + 52)) = v41;
  *(_WORD *)(v42 + *(int *)(v45 + 56)) = 256;
  uint64_t v46 = static Alignment.center.getter();
  uint64_t v48 = v47;
  char v49 = (uint64_t *)(v42 + *(int *)(sub_100006560(&qword_10019A198) + 36));
  *char v49 = v46;
  v49[1] = v48;
  sub_100010934((uint64_t)v13);
  uint64_t v50 = static Alignment.center.getter();
  uint64_t v52 = v51;
  uint64_t v53 = (uint64_t)v71;
  uint64_t v54 = (uint64_t)&v71[*(int *)(v72 + 44)];
  sub_1000066D4(v42, v54, &qword_10019A180);
  long long v55 = (uint64_t *)(v54 + *(int *)(sub_100006560(&qword_10019A178) + 36));
  *long long v55 = v50;
  v55[1] = v52;
  uint64_t v56 = (uint64_t)v75;
  sub_1000066D4((uint64_t)v75, v53, &qword_10019BB30);
  sub_1000067DC(v42, &qword_10019A180);
  sub_1000067DC(v56, &qword_10019BB30);
  uint64_t v57 = static Alignment.center.getter();
  uint64_t v59 = v58;
  uint64_t v60 = sub_100006560(&qword_10019EAF0);
  uint64_t v61 = v74;
  uint64_t v62 = v74 + *(int *)(v60 + 36);
  sub_1000066D4(v53, v62, &qword_10019BB38);
  uint64_t v63 = (uint64_t *)(v62 + *(int *)(sub_100006560(&qword_10019BB60) + 36));
  *uint64_t v63 = v57;
  v63[1] = v59;
  uint64_t v64 = (uint64_t)v70;
  sub_1000066D4((uint64_t)v70, v61, &qword_10019EAE0);
  sub_1000067DC(v53, &qword_10019BB38);
  return sub_1000067DC(v64, &qword_10019EAE0);
}

uint64_t sub_100105B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v83 = a3;
  uint64_t v84 = a4;
  uint64_t v86 = a5;
  uint64_t v76 = sub_100006560(&qword_100199610) - 8;
  __chkstk_darwin(v76);
  uint64_t v75 = (uint64_t *)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_100199620);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100006560(&qword_10019BBE8);
  __chkstk_darwin(v78);
  uint64_t v77 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100006560(&qword_10019C248);
  __chkstk_darwin(v79);
  uint64_t v82 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100006560(&qword_10019EAF8);
  __chkstk_darwin(v80);
  uint64_t v85 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v87 = (uint64_t)&v75 - v19;
  uint64_t v88 = a1;
  uint64_t v89 = a2;
  unint64_t v20 = sub_10002374C();
  swift_bridgeObjectRetain();
  unint64_t v81 = v20;
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  uint64_t v28 = enum case for Text.Case.uppercase(_:);
  uint64_t v29 = type metadata accessor for Text.Case();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v10, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v10, 0, 1, v29);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v75;
  sub_1000066D4((uint64_t)v10, (uint64_t)v75 + *(int *)(v76 + 36), &qword_100199618);
  *uint64_t v32 = KeyPath;
  sub_1000066D4((uint64_t)v32, (uint64_t)&v14[*(int *)(v12 + 44)], &qword_100199610);
  *(void *)uint64_t v14 = v21;
  *((void *)v14 + 1) = v23;
  v14[16] = v27;
  *((void *)v14 + 3) = v25;
  sub_100010924(v21, v23, v27);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v32, &qword_100199610);
  sub_1000067DC((uint64_t)v10, &qword_100199618);
  sub_1000065A4(v21, v23, v27);
  swift_bridgeObjectRelease();
  if (qword_100198050 != -1) {
    swift_once();
  }
  static Font.Weight.bold.getter();
  uint64_t v33 = Font.weight(_:)();
  uint64_t v34 = swift_getKeyPath();
  uint64_t v35 = v77;
  sub_1000066D4((uint64_t)v14, v77, &qword_100199620);
  long long v36 = (uint64_t *)(v35 + *(int *)(v78 + 36));
  *long long v36 = v34;
  v36[1] = v33;
  sub_1000067DC((uint64_t)v14, &qword_100199620);
  uint64_t v37 = v35;
  if (qword_100198088 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_1001AA330;
  uint64_t v39 = swift_getKeyPath();
  uint64_t v40 = v35;
  uint64_t v41 = v82;
  sub_1000066D4(v40, v82, &qword_10019BBE8);
  uint64_t v42 = (uint64_t *)(v41 + *(int *)(v79 + 36));
  *uint64_t v42 = v39;
  v42[1] = v38;
  swift_retain();
  sub_1000067DC(v37, &qword_10019BBE8);
  LOBYTE(v38) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v51 = v85;
  sub_1000066D4(v41, v85, &qword_10019C248);
  uint64_t v52 = v51 + *(int *)(v80 + 36);
  *(unsigned char *)uint64_t v52 = v38;
  *(void *)(v52 + 8) = v44;
  *(void *)(v52 + 16) = v46;
  *(void *)(v52 + 24) = v48;
  *(void *)(v52 + 32) = v50;
  *(unsigned char *)(v52 + 40) = 0;
  sub_1000067DC(v41, &qword_10019C248);
  sub_100106250(v51, v87);
  uint64_t v88 = v83;
  uint64_t v89 = v84;
  swift_bridgeObjectRetain();
  uint64_t v53 = Text.init<A>(_:)();
  uint64_t v55 = v54;
  char v57 = v56;
  if (qword_100198058 != -1) {
    swift_once();
  }
  static Font.Weight.light.getter();
  Font.weight(_:)();
  uint64_t v58 = Text.font(_:)();
  uint64_t v60 = v59;
  char v62 = v61;
  swift_release();
  char v63 = v62 & 1;
  sub_1000065A4(v53, v55, v57 & 1);
  swift_bridgeObjectRelease();
  static Color.black.getter();
  uint64_t v64 = Text.foregroundColor(_:)();
  uint64_t v66 = v65;
  char v68 = v67;
  uint64_t v70 = v69;
  swift_release();
  sub_1000065A4(v58, v60, v63);
  swift_bridgeObjectRelease();
  uint64_t v71 = v87;
  sub_1000066D4(v87, v51, &qword_10019EAF8);
  uint64_t v72 = v86;
  sub_1000066D4(v51, v86, &qword_10019EAF8);
  uint64_t v73 = v72 + *(int *)(sub_100006560(&qword_10019EB00) + 48);
  *(void *)uint64_t v73 = v64;
  *(void *)(v73 + 8) = v66;
  *(unsigned char *)(v73 + 16) = v68 & 1;
  *(void *)(v73 + 24) = v70;
  sub_100010924(v64, v66, v68 & 1);
  swift_bridgeObjectRetain();
  sub_1000067DC(v71, &qword_10019EAF8);
  sub_1000065A4(v64, v66, v68 & 1);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v51, &qword_10019EAF8);
}

uint64_t sub_10010622C@<X0>(uint64_t a1@<X8>)
{
  return sub_100105534(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_100106250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019EAF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001062BC()
{
  unint64_t result = qword_10019EB08;
  if (!qword_10019EB08)
  {
    sub_10000650C(&qword_10019EAF0);
    sub_10010635C();
    sub_100010484(&qword_10019BC50, &qword_10019BB60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EB08);
  }
  return result;
}

unint64_t sub_10010635C()
{
  unint64_t result = qword_10019EB10;
  if (!qword_10019EB10)
  {
    sub_10000650C(&qword_10019EAE0);
    sub_100010484(qword_10019EB18, &qword_10019EAD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EB10);
  }
  return result;
}

uint64_t sub_1001063FC()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001064AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, (uint64_t)v1 + *(void *)(v3 + 120), v6);
  uint64_t v10 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    if (qword_100198148 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 88) + 40))(qword_1001AA428, qword_1001AA428, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
}

double sub_1001066FC()
{
  double v0 = sub_100106B38();
  double result = 0.0;
  if (v0 <= 0.0) {
    return sub_100106B38() * 0.125;
  }
  return result;
}

id sub_100106730()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - v6, (uint64_t)v0 + *(void *)(v1 + 120), v4);
  uint64_t v8 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_4:
    id v10 = [self blackColor];
    id v9 = [v10 CGColor];

    return v9;
  }
  id v9 = (id)(*(uint64_t (**)(uint64_t))(*(void *)(v2 + 88) + 16))(v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v3);
  if (!v9) {
    goto LABEL_4;
  }
  return v9;
}

double sub_100106948()
{
  if (sub_100106B38() > 0.0) {
    return 0.0;
  }

  return sub_100106B38();
}

double sub_100106984()
{
  sub_100006560(&qword_10019C3C0);
  Binding.wrappedValue.getter();
  return v1;
}

double sub_1001069D4()
{
  double v0 = sub_100106B38();
  double result = 1.0;
  if (v0 > 0.0) {
    return sub_100106B38() * 0.002 + 1.0;
  }
  return result;
}

BOOL sub_100106A14()
{
  double v0 = -sub_100106B38();
  return sub_100106984() >= v0;
}

uint64_t sub_100106A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = *(void *)v16;
  *(void *)(v16 + 64) = a1;
  uint64_t v18 = v16 + *(void *)(v17 + 120);
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a2, v19);
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(double *)(v16 + 32) = a7;
  *(void *)(v16 + 40) = a5;
  *(void *)(v16 + 48) = a6;
  *(double *)(v16 + 56) = a8;
  return v16;
}

double sub_100106B38()
{
  sub_100006560(&qword_10019C3C0);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_100106B88()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100106C38()
{
  sub_100106B88();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HeroImageModel()
{
  return sub_1000068A4();
}

uint64_t sub_100106CA8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100106D20()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100106D94(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_100006560(&qword_10019AD10);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100106E7C, v5, v4);
}

uint64_t sub_100106E7C()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = sub_100006560(&qword_10019A5D0);
  v0[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[14] = v5;
  v0[15] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1001077E4(v1, v2);
  swift_retain();
  static Published.subscript.setter();
  sub_10010784C(v1);
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0;
  swift_retain();
  static Published.subscript.setter();
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100107024;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  return Event<>.init(id:)(v7, v8, v9);
}

uint64_t sub_100107024()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_10010725C;
  }
  else {
    uint64_t v5 = sub_100107160;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100107160()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  swift_release();
  v1(v4, 0, 1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1001077E4(v4, v3);
  swift_retain();
  static Published.subscript.setter();
  sub_10010784C(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10010725C()
{
  uint64_t v1 = v0[17];
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v0[3] = v1;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100107334()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__event;
  uint64_t v2 = sub_100006560(&qword_10019AD08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__error;
  uint64_t v4 = sub_100006560(&qword_10019B760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100107420()
{
  return type metadata accessor for EventController();
}

uint64_t type metadata accessor for EventController()
{
  uint64_t result = qword_10019EBD8;
  if (!qword_10019EBD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100107474()
{
  sub_10008324C(319, (unint64_t *)&unk_10019EBE8, &qword_10019AD10);
  if (v0 <= 0x3F)
  {
    sub_10008324C(319, &qword_10019B6C8, (uint64_t *)&unk_10019B6D0);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10010755C()
{
  v18[0] = sub_100006560(&qword_10019B760);
  uint64_t v1 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019AD08);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019AD10);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__event;
  uint64_t v15 = sub_100006560(&qword_10019A5D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_1001077E4((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)();
  sub_10010784C((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  uint64_t v16 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__error;
  v18[1] = 0;
  sub_100006560((uint64_t *)&unk_10019B6D0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, void))(v1 + 32))(v16, v3, v18[0]);
  return v0;
}

uint64_t sub_1001077E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019AD10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010784C(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019AD10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001078BC@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100107ED4();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100040C30(v1 + 56, a1);
}

uint64_t sub_100107950(uint64_t a1)
{
  sub_1000487B4(a1, (uint64_t)v6);
  swift_getKeyPath();
  sub_100107ED4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1000067DC((uint64_t)v6, &qword_1001997B8);
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_100023118(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
}

uint64_t sub_100107A44()
{
  type metadata accessor for SetlistSongPlaybackController();
  swift_allocObject();
  uint64_t result = sub_100107AE8();
  qword_1001AA430 = result;
  return result;
}

uint64_t sub_100107A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 56;
  swift_beginAccess();
  sub_1000FD704(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100107AE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006560(&qword_10019ABA8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  ObservationRegistrar.init()();
  if (qword_1001980C8 != -1) {
    swift_once();
  }
  uint64_t v5 = *(os_unfair_lock_s **)(qword_1001AA368 + 16);
  uint64_t v6 = (uint64_t *)&v5[4];
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_100068E90(v6, (uint64_t)v4);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = type metadata accessor for MusicSubscription();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_1000067DC((uint64_t)v4, &qword_10019ABA8);
  }
  else
  {
    char v10 = MusicSubscription.canBecomeSubscriber.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = (objc_class *)type metadata accessor for AppleMusicPlayer();
      uint64_t v12 = (char *)swift_allocObject();
      v12[16] = 0;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((void *)v12 + 9) = 0;
      ObservationRegistrar.init()();
      uint64_t v13 = &off_1001922D0;
      goto LABEL_8;
    }
  }
  uint64_t v11 = (objc_class *)type metadata accessor for MusicPreviewPlayer(0);
  uint64_t v12 = (char *)[objc_allocWithZone(v11) init];
  uint64_t v13 = &off_10018E190;
LABEL_8:
  uint64_t v17 = v11;
  uint64_t v18 = v13;
  *(void *)&long long v16 = v12;
  sub_1000358CC(&v16, v1 + 16);
  return v1;
}

uint64_t sub_100107D1C()
{
  sub_100029A08(v0 + 16);
  sub_1000067DC(v0 + 56, &qword_1001997B8);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp29SetlistSongPlaybackController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100107DD4()
{
  return type metadata accessor for SetlistSongPlaybackController();
}

uint64_t type metadata accessor for SetlistSongPlaybackController()
{
  uint64_t result = qword_10019ECA8;
  if (!qword_10019ECA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100107E28()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100107ED4()
{
  unint64_t result = qword_1001997B0;
  if (!qword_1001997B0)
  {
    type metadata accessor for SetlistSongPlaybackController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001997B0);
  }
  return result;
}

__n128 sub_100107F2C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[2].n128_u64[0];
  unsigned __int8 v5 = a1[1].n128_u8[8] & 1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v5;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t type metadata accessor for LineupModule()
{
  return sub_1000068A4();
}

uint64_t sub_100107F6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100107FB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v20 = a2;
  sub_10000650C(&qword_10019EDC0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v29 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = &type metadata for ArtistItem;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  unint64_t v28 = sub_1001090D0();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  uint64_t v26 = swift_getWitnessTable();
  char v27 = &protocol witness table for _PaddingLayout;
  v19[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for VStack();
  v19[0] = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v19 - v14);
  static HorizontalAlignment.leading.getter();
  uint64_t v21 = v3;
  uint64_t v22 = v5;
  uint64_t v23 = v19[2];
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.vertical.getter();
  uint64_t v16 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v19[0] + 8))(v8, v6);
  uint64_t v24 = v16;
  uint64_t v25 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v15, v12, v9);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  sub_1000508C8(v20, v15, v9);
  return ((uint64_t (*)(void *, uint64_t))v17)(v15, v9);
}

uint64_t sub_1001083E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v58 = a2;
  uint64_t v67 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = &type metadata for ArtistItem;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  unint64_t v77 = sub_1001090D0();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v76 = &protocol witness table for _PaddingLayout;
  uint64_t v56 = v5;
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ScrollView();
  uint64_t v57 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v45 - v9;
  uint64_t v52 = type metadata accessor for AccessibilityTraits();
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v50 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100006560(&qword_10019EDC0);
  __chkstk_darwin(v49);
  uint64_t v45 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v46 = (char *)&v45 - v13;
  __chkstk_darwin(v14);
  uint64_t v47 = (uint64_t)&v45 - v15;
  uint64_t v48 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  static Font.Weight.bold.getter();
  uint64_t v21 = Text.fontWeight(_:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  sub_1000065A4(v16, v18, v20);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v26 = Text.font(_:)();
  uint64_t v28 = v27;
  char v30 = v29;
  uint64_t v32 = v31;
  swift_release();
  v30 &= 1u;
  sub_1000065A4(v21, v23, v25);
  swift_bridgeObjectRelease();
  char v33 = static Edge.Set.leading.getter();
  uint64_t v67 = v26;
  uint64_t AssociatedTypeWitness = v28;
  LOBYTE(v69) = v30;
  uint64_t WitnessTable = v32;
  LOBYTE(AssociatedConformanceWitness) = v33;
  long long v72 = 0u;
  long long v73 = 0u;
  char v74 = 1;
  sub_100006560(&qword_10019CBD0);
  sub_1000B289C();
  uint64_t v34 = (uint64_t)v45;
  View.accessibilityHeading(_:)();
  sub_1000065A4(v26, v28, v30);
  swift_bridgeObjectRelease();
  uint64_t v35 = v50;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v36 = (uint64_t)v46;
  uint64_t v37 = v49;
  ModifiedContent<>.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
  sub_100109130(v34);
  uint64_t v38 = v47;
  sub_100109190(v36, v47);
  static Axis.Set.horizontal.getter();
  uint64_t v61 = v58;
  uint64_t v62 = v59;
  uint64_t v63 = v48;
  uint64_t v39 = v53;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = v54;
  sub_1000508C8(v54, v39, v6);
  uint64_t v42 = v57;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v57 + 8);
  v43(v39, v6);
  sub_100109204(v38, v36);
  uint64_t v67 = v36;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v41, v6);
  uint64_t AssociatedTypeWitness = (uint64_t)v39;
  v66[0] = v37;
  v66[1] = v6;
  unint64_t v64 = sub_10010926C();
  uint64_t v65 = v40;
  sub_100050970(&v67, 2uLL, (uint64_t)v66);
  v43(v41, v6);
  sub_100109130(v38);
  v43(v39, v6);
  return sub_100109130(v36);
}

uint64_t sub_100108AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v22 = a4;
  uint64_t v29 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = &type metadata for ArtistItem;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  unint64_t v28 = sub_1001090D0();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for HStack();
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v19 - v14);
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = v21;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v16 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  uint64_t v26 = v16;
  uint64_t v27 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v15, v12, v9);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  sub_1000508C8(v22, v15, v9);
  return ((uint64_t (*)(void *, uint64_t))v17)(v15, v9);
}

uint64_t sub_100108E20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = v6;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = &type metadata for ArtistItem;
  uint64_t v28 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for ForEach();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v20 - v13);
  uint64_t v25 = *a1;
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v22;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = v16;
  unint64_t v17 = sub_1001090D0();
  swift_bridgeObjectRetain();
  ForEach<>.init(_:content:)();
  unint64_t v24 = v17;
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  sub_1000508C8(v23, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v18)(v14, v8);
}

uint64_t sub_100109094@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100107FB0(a1, a2);
}

unint64_t sub_1001090D0()
{
  unint64_t result = qword_10019EDC8;
  if (!qword_10019EDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EDC8);
  }
  return result;
}

uint64_t sub_100109124@<X0>(uint64_t a1@<X8>)
{
  return sub_1001083E4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100109130(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019EDC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100109190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019EDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001091F8@<X0>(void *a1@<X8>)
{
  return sub_100108AC4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100109204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019EDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10010926C()
{
  unint64_t result = qword_10019EDD0;
  if (!qword_10019EDD0)
  {
    sub_10000650C(&qword_10019EDC0);
    sub_1000B289C();
    sub_1001092E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EDD0);
  }
  return result;
}

unint64_t sub_1001092E8()
{
  unint64_t result = qword_1001982A0;
  if (!qword_1001982A0)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001982A0);
  }
  return result;
}

uint64_t sub_100109340@<X0>(void *a1@<X8>)
{
  return sub_100108E20(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10010934C()
{
  return swift_deallocObject();
}

uint64_t sub_10010935C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 48))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

ValueMetadata *type metadata accessor for ArtistItem()
{
  return &type metadata for ArtistItem;
}

uint64_t sub_1001093B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001095EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100109608@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001980B8 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1001AA360;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10002374C();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.Weight.medium.getter();
  uint64_t v7 = Text.fontWeight(_:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.subheadline.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  swift_release();
  v16 &= 1u;
  sub_1000065A4(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v22;
  *(unsigned char *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v24;
  *(unsigned char *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v18;
  swift_retain();
  swift_retain();
  sub_100010924(v12, v14, v16);
  swift_bridgeObjectRetain();
  sub_1000065A4(v12, v14, v16);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

__n128 sub_10010985C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  sub_100109608((uint64_t)&v12);
  uint64_t v3 = v12;
  char v4 = v14;
  uint64_t v5 = v15;
  char v6 = v16;
  char v7 = v19;
  uint64_t v8 = v20;
  __n128 result = v13;
  long long v10 = v17;
  long long v11 = v18;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v3;
  *(__n128 *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v8;
  return result;
}

unint64_t sub_100109904()
{
  unint64_t result = qword_10019EDD8;
  if (!qword_10019EDD8)
  {
    sub_10000650C(qword_10019EDE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019EDD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRowViewModel()
{
  return &type metadata for SongRowViewModel;
}

void sub_100109970()
{
  type metadata accessor for FilterViewModel.FilterState();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Array();
    type metadata accessor for Published();
    if (v1 <= 0x3F)
    {
      sub_10010E550();
      if (v2 <= 0x3F)
      {
        sub_10010E5A8();
        if (v3 <= 0x3F)
        {
          swift_getAssociatedTypeWitness();
          type metadata accessor for Array();
          type metadata accessor for Published();
          if (v4 <= 0x3F)
          {
            swift_getAssociatedConformanceWitness();
            type metadata accessor for Set();
            type metadata accessor for Published();
            if (v5 <= 0x3F)
            {
              sub_100029828(319, &qword_10019C130);
              if (v6 <= 0x3F)
              {
                sub_100029828(319, &qword_100199218);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for FilterViewModel.FilterConfiguration();
                  type metadata accessor for Binding();
                  if (v8 <= 0x3F) {
                    swift_initClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100109CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  __n128 v13 = (int *)type metadata accessor for FilterViewModel.FilterConfiguration();
  char v14 = (char *)a8 + v13[11];
  uint64_t v15 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a4, v15);
  uint64_t result = sub_100110CA4(a5, (uint64_t)a8 + v13[12]);
  *(void *)((char *)a8 + v13[13]) = a6;
  *(void *)((char *)a8 + v13[14]) = a7;
  return result;
}

double sub_100109DAC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100109E64()
{
  return sub_100109EC4();
}

uint64_t sub_100109E78()
{
  return sub_100109E64();
}

uint64_t sub_100109E9C(uint64_t a1)
{
  return sub_100109FB0(a1);
}

uint64_t sub_100109EB0()
{
  return sub_100109EC4();
}

uint64_t sub_100109EC4()
{
  return swift_release();
}

uint64_t sub_100109F78()
{
  return sub_100109EB0();
}

uint64_t sub_100109F9C(uint64_t a1)
{
  return sub_100109FB0(a1);
}

uint64_t sub_100109FB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100110324(a1, (uint64_t)v4);
  return sub_10010A054((uint64_t)v4);
}

uint64_t sub_10010A054(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v7 = v11;
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v12 = v8;
  swift_getKeyPath();
  v10[0] = v7;
  v10[1] = v8;
  swift_getKeyPath();
  sub_100110324(a1, (uint64_t)v6);
  swift_retain();
  static Published.subscript.setter();
  return sub_100110388(a1);
}

double sub_10010A168()
{
  return sub_10008E57C();
}

uint64_t sub_10010A17C()
{
  return sub_10008E644();
}

uint64_t sub_10010A190@<X0>(char *a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v2 = *v1;
  uint64_t v20 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v20);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v2 + 80);
  uint64_t v15 = v24;
  uint64_t v25 = *(void *)(v2 + 88);
  uint64_t v16 = v25;
  swift_getKeyPath();
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  long long v17 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v17(v11, v14, v5);
  sub_1000067DC((uint64_t)v14, &qword_10019D1D0);
  sub_100109EB0();
  v17(v8, &v4[*(int *)(v20 + 28)], v5);
  sub_100110388((uint64_t)v4);
  sub_1000BD888((uint64_t)v11, (uint64_t)v8, v21);
  long long v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, v5);
}

double sub_10010A420()
{
  uint64_t v0 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100109E64();
  LOBYTE(v1) = v3[*(int *)(v1 + 32)];
  sub_100110388((uint64_t)v3);
  double result = 0.0;
  if ((v1 & 1) == 0) {
    return sub_10010A168() * -0.5;
  }
  return result;
}

BOOL sub_10010A4BC()
{
  return sub_10010A87C((void (*)(uint64_t))&DateInterval.start.getter);
}

double sub_10010A4D4()
{
  return sub_10008E57C();
}

uint64_t sub_10010A4E8()
{
  return sub_10008E644();
}

uint64_t sub_10010A4FC@<X0>(char *a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = *v1;
  uint64_t v23 = sub_100006560(&qword_10019D1D0) - 8;
  __chkstk_darwin(v23);
  uint64_t v22 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100109E64();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v15(v10, &v14[*(int *)(v12 + 28)], v4);
  sub_100110388((uint64_t)v14);
  uint64_t v27 = *(void *)(v2 + 80);
  uint64_t v16 = v27;
  uint64_t v17 = *(void *)(v2 + 88);
  uint64_t v28 = v17;
  swift_getKeyPath();
  uint64_t v25 = v16;
  uint64_t v26 = v17;
  swift_getKeyPath();
  uint64_t v18 = (uint64_t)v22;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v15(v7, (char *)(v18 + *(int *)(v23 + 44)), v4);
  sub_1000067DC(v18, &qword_10019D1D0);
  sub_1000BD888((uint64_t)v10, (uint64_t)v7, v24);
  char v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  return ((uint64_t (*)(char *, uint64_t))v19)(v10, v4);
}

void sub_10010A79C()
{
  uint64_t v0 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v1 = v0 - 8;
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100109E64();
  sub_100110388((uint64_t)v3);
  sub_100109EB0();
  LOBYTE(v1) = v3[*(int *)(v1 + 32)];
  sub_100110388((uint64_t)v3);
  if ((v1 & 1) == 0) {
    sub_10010A4D4();
  }
}

BOOL sub_10010A864()
{
  return sub_10010A87C((void (*)(uint64_t))&DateInterval.end.getter);
}

BOOL sub_10010A87C(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v21 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = sub_10010D160();
  a1(v14);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v13, v7);
  uint64_t v16 = sub_10010CEC0((uint64_t)v10);
  uint64_t v17 = v21;
  a1(v16);
  v15(v10, v7);
  sub_100110C5C(&qword_10019EF90, (void (*)(uint64_t))&type metadata accessor for Date);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v17, v2);
  v19(v6, v2);
  return (v18 & 1) == 0;
}

BOOL sub_10010AAE8()
{
  sub_10010ABB4();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10010ABB4()
{
  return sub_10010C84C();
}

uint64_t sub_10010ABC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v12 - 8);
  uint64_t v25 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = sub_10010B2CC();
  if (v15)
  {
    __chkstk_darwin(v15);
    *(&v23 - 2) = v4;
    *(&v23 - 1) = v3;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v23 - 2) = v4;
    *(&v23 - 1) = v3;
    swift_getKeyPath();
    uint64_t v26 = KeyPath;
    uint64_t v17 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.remove(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
    v17(v27, 0);
  }
  else
  {
    uint64_t v18 = v6;
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    __chkstk_darwin(v19);
    *(&v23 - 2) = v4;
    *(&v23 - 1) = v3;
    uint64_t v20 = swift_getKeyPath();
    __chkstk_darwin(v20);
    *(&v23 - 2) = v4;
    *(&v23 - 1) = v3;
    swift_getKeyPath();
    uint64_t v26 = v20;
    uint64_t v21 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, AssociatedTypeWitness);
    v21(v27, 0);
  }
  swift_release();
  swift_release();
  return sub_10010B928();
}

void sub_10010AFC4(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  sub_100006560(&qword_100199238);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10014D8E0;
  uint64_t v11 = sub_10010C20C();
  *(void *)(v10 + 56) = &type metadata for AnalyticsString;
  *(void *)(v10 + 64) = &off_10019BA08;
  *(unsigned char *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = v12;
  *(void *)(v10 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v10 + 104) = &off_10019B9E0;
  *(unsigned char *)(v10 + 72) = 7;
  *(void *)(v10 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v10 + 144) = &off_10019BA68;
  *(unsigned char *)(v10 + 112) = a1;
  *(void *)(v10 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v10 + 184) = &off_10019BA40;
  *(void *)(v10 + 152) = a2;
  *(void *)(v10 + 160) = a3;
  *(unsigned char *)(v10 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v13 = *(void *)(a5 + 64);
    unint64_t v14 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  char v30 = &type metadata for AnalyticsString;
  uint64_t v31 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v28 = v13;
  uint64_t v29 = (Class (*)(uint64_t))v14;
  sub_1000298CC(a2, a3, a4);
  char v33 = (char *)v10;
  unint64_t v15 = *(void *)(v10 + 16);
  unint64_t v16 = *(void *)(v10 + 24);
  swift_bridgeObjectRetain();
  if (v15 >= v16 >> 1) {
    char v33 = sub_1000AB884((char *)(v16 > 1), v15 + 1, 1, (char *)v10);
  }
  uint64_t v17 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v21 + 16))(v20, v18);
  sub_1000AC33C(v15, (uint64_t)v20, (uint64_t *)&v33, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v22 = v33;
  NSString v23 = String._bridgeToObjectiveC()();
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = 0xD00000000000001ELL;
  v24[3] = 0x8000000100157480;
  v24[4] = v22;
  uint64_t v31 = sub_100029A98;
  uint64_t v32 = v24;
  aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  uint64_t v29 = sub_1000AB7F8;
  char v30 = (ValueMetadata *)&unk_100192960;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v25);
  swift_bridgeObjectRelease();
}

uint64_t sub_10010B2CC()
{
  sub_10010B398();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v0 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10010B398()
{
  return sub_10010C84C();
}

uint64_t sub_10010B3AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v42 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  uint64_t v6 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v14);
  uint64_t v40 = (char *)&v34 - v15;
  uint64_t v45 = type metadata accessor for DateInterval();
  uint64_t v37 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v34 - v19;
  if (sub_10010D310())
  {
    sub_10010D160();
    if (!sub_10010D310()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v36 = sub_10010D5F0();
    if (!sub_10010D310()) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_10010CEC0((uint64_t)v20);
  if (sub_10010D310()) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v36 = 0;
  if (!sub_10010D310())
  {
LABEL_4:
    uint64_t v21 = static Array._allocateUninitialized(_:)();
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v21 = sub_10010C838();
LABEL_8:
  uint64_t v35 = v21;
  uint64_t v44 = v20;
  BOOL v22 = sub_10010D310();
  uint64_t v43 = v4;
  uint64_t v41 = v5;
  if (v22)
  {
    uint64_t v34 = (void *)sub_10010B398();
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v24 = static Array._allocateUninitialized(_:)();
    if (Array._getCount()())
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v34 = (void *)sub_10011068C(v24, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = &_swiftEmptySetSingleton;
    }
  }
  sub_10010C648();
  uint64_t v26 = *((void *)v13 + 1);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v38 + 8);
  swift_bridgeObjectRetain();
  v27(v13, v6);
  uint64_t v28 = v37;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v17, v44, v45);
  sub_10010C648();
  uint64_t v29 = v42;
  sub_1001102BC((uint64_t)&v10[*(int *)(v6 + 48)], v42);
  v27(v10, v6);
  char v30 = v39;
  sub_10010C648();
  uint64_t v31 = *(void *)&v30[*(int *)(v6 + 52)];
  swift_bridgeObjectRetain();
  v27(v30, v6);
  uint64_t v32 = v40;
  sub_100109CE0(v36, v26, v35, (uint64_t)v17, v29, v31, (uint64_t)v34, v40);
  sub_100110A88((uint64_t)v32);
  v27(v32, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v44, v45);
}

uint64_t sub_10010B80C()
{
  if (sub_10010CCDC())
  {
    sub_100006560(qword_100199240);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_10014D4D0;
    sub_10010C838();
    uint64_t v2 = Array.count.getter();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 56) = &type metadata for Int;
    *(void *)(v1 + 64) = &protocol witness table for Int;
    *(void *)(v1 + 32) = v2;
    return String.init(format:_:)();
  }
  else
  {
    if (sub_10010CD78()) {
      uint64_t v3 = *(void *)(v0 + 32);
    }
    else {
      uint64_t v3 = *(void *)(v0 + 16);
    }
    swift_bridgeObjectRetain();
  }
  return v3;
}

BOOL sub_10010B908()
{
  return (sub_10010CD78() & 1) == 0;
}

uint64_t sub_10010B928()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v10 - v5;
  void v10[2] = v1;
  v10[3] = v2;
  swift_getKeyPath();
  v10[0] = v1;
  v10[1] = v2;
  swift_getKeyPath();
  LOBYTE(v11) = 0;
  swift_retain();
  static Published.subscript.setter();
  static Array._allocateUninitialized(_:)();
  sub_10010CC24();
  sub_10010C648();
  uint64_t v7 = *((void *)v6 + 1);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v8(v6, v3);
  uint64_t v11 = v7;
  type metadata accessor for Array();
  swift_getWitnessTable();
  _ArrayProtocol.filter(_:)();
  return sub_10010CC24();
}

uint64_t sub_10010BB2C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v3 = v28;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100006560(&qword_10019D1D0) - 8;
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *(void *)(v1 + 80);
  uint64_t v8 = v43;
  uint64_t v9 = *(void *)(v1 + 88);
  uint64_t v44 = v9;
  swift_getKeyPath();
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v25 = v3 + 16;
  uint64_t v26 = v10;
  uint64_t v11 = v2;
  v10(v5, v7, v2);
  sub_1000067DC((uint64_t)v7, &qword_10019D1D0);
  uint64_t v39 = v8;
  uint64_t v40 = v9;
  swift_getKeyPath();
  uint64_t v37 = v8;
  uint64_t v38 = v9;
  swift_getKeyPath();
  uint64_t v12 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  uint64_t v14 = v13;
  uint64_t v24 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v15 = v14 + *(int *)(v24 + 20);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 40);
  v28 += 40;
  NSString v23 = v16;
  v16(v15, v5, v11);
  v12(v45, 0);
  swift_release();
  swift_release();
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  swift_getKeyPath();
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v26(v5, &v7[*(int *)(v27 + 44)], v11);
  sub_1000067DC((uint64_t)v7, &qword_10019D1D0);
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  swift_getKeyPath();
  uint64_t v29 = v8;
  uint64_t v30 = v9;
  swift_getKeyPath();
  uint64_t v17 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  v23(v18 + *(int *)(v24 + 20), v5, v11);
  v17(v45, 0);
  swift_release();
  swift_release();
  static Array._allocateUninitialized(_:)();
  sub_10010CC24();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = static Array._allocateUninitialized(_:)();
  if (Array._getCount()())
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_10011068C(v20, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  }
  swift_bridgeObjectRelease();
  return sub_10010CC24();
}

uint64_t sub_10010BFC0()
{
  if (sub_10010CCDC()) {
    return 1;
  }

  return sub_10010CD78();
}

uint64_t sub_10010BFF8()
{
  return static Published.subscript.setter();
}

uint64_t sub_10010C0C8(uint64_t a1)
{
  uint64_t v2 = sub_10010C20C();
  sub_1000AC7F8(v2, v3, 7, a1);

  return swift_bridgeObjectRelease();
}

BOOL sub_10010C110(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10010C120(uint64_t a1, char a2)
{
}

Swift::Int sub_10010C148(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10010C190(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10010C110(*a1, *a2);
}

Swift::Int sub_10010C1A4()
{
  return sub_10010C148(*v0);
}

void sub_10010C1B4(uint64_t a1)
{
  sub_10010C120(a1, *v1);
}

Swift::Int sub_10010C1C4()
{
  Hasher.init(_seed:)();
  sub_10010C120((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10010C20C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  sub_10010C648();
  uint64_t v14 = *((void *)v6 + 1);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v15(v6, v3);
  uint64_t v27 = v14;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  }
  else
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v1, v2);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v1);
    uint64_t v27 = v17;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v13, AssociatedTypeWitness);
      return v19;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  }
  return 0;
}

uint64_t sub_10010C648()
{
  uint64_t v1 = *(void *)v0;
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, char *, uint64_t, __n128))(v3 + 16))((char *)&v8 - v5, &v0[*(void *)(v1 + 200)], v2, v4);
  Binding.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10010C784()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10010C838()
{
  return sub_10010C84C();
}

uint64_t sub_10010C84C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10010C900(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  __chkstk_darwin(v2);
  sub_100110324(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return sub_100110388(a1);
}

uint64_t sub_10010C9A0(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v2);
  sub_1001102BC(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return sub_1000067DC(a1, &qword_10019D1D0);
}

uint64_t sub_10010CA54()
{
  return swift_release();
}

uint64_t sub_10010CB10(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Array();
  return sub_10010F278((uint64_t)&v3, v1);
}

uint64_t sub_10010CB7C(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = type metadata accessor for Set();
  return sub_10010F278((uint64_t)&v3, v1);
}

uint64_t sub_10010CC24()
{
  return static Published.subscript.setter();
}

BOOL sub_10010CCDC()
{
  sub_10010C838();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10010CD78()
{
  if (sub_10010D3CC()
    && (sub_10010C838(),
        type metadata accessor for Array(),
        swift_getWitnessTable(),
        char v0 = Collection.isEmpty.getter(),
        swift_bridgeObjectRelease(),
        (v0 & 1) != 0))
  {
    char v1 = 1;
  }
  else if (sub_10010D3CC() && sub_10010D528())
  {
    sub_10010C838();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v1 = Collection.isEmpty.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

uint64_t sub_10010CEC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = *v1;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v23 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v21 = (char *)&v21 - v6;
  uint64_t v8 = sub_100006560(&qword_10019D1D0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v31 = *(void *)(v2 + 80);
  uint64_t v15 = v31;
  uint64_t v32 = *(void *)(v2 + 88);
  uint64_t v16 = v32;
  swift_getKeyPath();
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v18 = v7;
  uint64_t v19 = v22;
  v17(v18, v14, v22);
  sub_1000067DC((uint64_t)v14, &qword_10019D1D0);
  uint64_t v27 = v15;
  uint64_t v28 = v16;
  swift_getKeyPath();
  uint64_t v25 = v15;
  uint64_t v26 = v16;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v17(v23, &v11[*(int *)(v9 + 44)], v19);
  sub_1000067DC((uint64_t)v11, &qword_10019D1D0);
  return DateInterval.init(start:end:)();
}

uint64_t sub_10010D160()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for CompactDatePickerConfiguration();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v16 - v12;
  sub_100109E64();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v14(v6, &v13[*(int *)(v8 + 28)], v0);
  sub_100110388((uint64_t)v13);
  sub_100109EB0();
  v14(v3, &v10[*(int *)(v8 + 28)], v0);
  sub_100110388((uint64_t)v10);
  return DateInterval.init(start:end:)();
}

BOOL sub_10010D310()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return (v1 & 1) == 0;
}

BOOL sub_10010D3CC()
{
  uint64_t v0 = type metadata accessor for DateInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - v5;
  sub_10010D160();
  sub_10010CEC0((uint64_t)v3);
  sub_100110C5C(&qword_10019EF88, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v8(v6, v0);
  return (v7 & 1) == 0;
}

BOOL sub_10010D528()
{
  sub_10010B398();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v0 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10010D5F0()
{
  BOOL v0 = sub_10010A87C((void (*)(uint64_t))&DateInterval.start.getter);
  BOOL v1 = sub_10010A87C((void (*)(uint64_t))&DateInterval.end.getter);
  uint64_t v2 = 1;
  if (v0) {
    uint64_t v2 = 2;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = v0;
  }
  sub_10010B398();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = Set.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v4 + v3;
  if (__OFADD__(v4, v3)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010D708(uint64_t a1, void *a2)
{
  uint64_t v81 = a1;
  uint64_t v3 = *a2;
  uint64_t v83 = type metadata accessor for Calendar.Component();
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v80 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v84);
  uint64_t v76 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Date();
  uint64_t v87 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  long long v73 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v72 = (char *)&v54 - v8;
  uint64_t v77 = type metadata accessor for DateInterval();
  uint64_t v85 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 88);
  uint64_t v12 = *(void *)(v3 + 80);
  uint64_t v65 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v16 = (char *)&v54 - v15;
  uint64_t v82 = type metadata accessor for Calendar();
  uint64_t v86 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v75 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
  uint64_t v70 = v11 + 200;
  uint64_t v71 = v18;
  uint64_t v78 = v11;
  uint64_t v79 = v12;
  v18(v12, v11);
  uint64_t v61 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v54 = v10;
  uint64_t v56 = v16;
  sub_1000B7044(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v10);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v67 = v14 + 8;
  char v68 = v19;
  v19(v16, AssociatedTypeWitness);
  uint64_t v20 = v72;
  DateInterval.start.getter();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
  v85 += 8;
  uint64_t v66 = v21;
  v21((uint64_t)v10, v77);
  uint64_t v22 = (uint64_t)v76;
  sub_100109E64();
  uint64_t v23 = v22 + *(int *)(v84 + 28);
  uint64_t v24 = v87;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  uint64_t v63 = v87 + 16;
  unint64_t v64 = v25;
  uint64_t v26 = v73;
  uint64_t v27 = v74;
  v25(v73, v23, v74);
  sub_100110388(v22);
  unsigned int v60 = enum case for Calendar.Component.day(_:);
  uint64_t v28 = v88;
  uint64_t v29 = *(void (**)(void))(v88 + 104);
  uint64_t v58 = v88 + 104;
  uint64_t v59 = (void (*)(char *, void, uint64_t))v29;
  uint64_t v30 = v80;
  uint64_t v31 = v83;
  v29(v80);
  uint64_t v32 = v20;
  uint64_t v33 = v75;
  unint64_t v62 = Calendar.compare(_:to:toGranularity:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v88 = v28 + 8;
  uint64_t v57 = v34;
  v34(v30, v31);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v87 = v24 + 8;
  uint64_t v36 = v26;
  uint64_t v37 = v26;
  uint64_t v38 = v27;
  v35(v36, v27);
  uint64_t v39 = v32;
  v35(v32, v38);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v86 + 8);
  v86 += 8;
  v55(v33, v82);
  static Calendar.current.getter();
  uint64_t v40 = v56;
  v71(v79, v78);
  uint64_t v41 = (uint64_t)v54;
  uint64_t v42 = v61;
  sub_1000B7044(v61, AssociatedConformanceWitness, (uint64_t)v54);
  v68(v40, v42);
  DateInterval.start.getter();
  v66(v41, v77);
  uint64_t v43 = (uint64_t)v76;
  sub_100109EB0();
  v64(v37, v43 + *(int *)(v84 + 28), v38);
  sub_100110388(v43);
  uint64_t v44 = v80;
  uint64_t v45 = v83;
  v59(v80, v60, v83);
  uint64_t v46 = v37;
  uint64_t v47 = v75;
  uint64_t v48 = Calendar.compare(_:to:toGranularity:)();
  v57(v44, v45);
  v35(v46, v38);
  v35(v39, v38);
  v55(v47, v82);
  BOOL v50 = v62 < 2 && (unint64_t)(v48 + 1) < 2;
  (*(void (**)(uint64_t, uint64_t))(v78 + 248))(v79, v78);
  sub_10010B398();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  Set.intersection(_:)();
  swift_bridgeObjectRelease();
  char v51 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (!sub_10010D3CC() || (char v52 = v50, sub_10010D528()))
  {
    char v52 = v51 ^ 1;
    if (sub_10010D3CC() || !sub_10010D528()) {
      v52 &= v50;
    }
  }
  return v52 & 1;
}

uint64_t sub_10010DF5C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  type metadata accessor for FilterViewModel.FilterState();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 128);
  type metadata accessor for Array();
  uint64_t v4 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v6 = sub_100006560(&qword_10019EF78);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + *(void *)(*(void *)v0 + 144), v6);
  uint64_t v8 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v9 = sub_100006560(&qword_10019EF80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 160);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  uint64_t v11 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 168);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  uint64_t v13 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v0 + *(void *)(*(void *)v0 + 176);
  uint64_t v15 = sub_100006560(&qword_10019C140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = v0 + *(void *)(*(void *)v0 + 184);
  uint64_t v17 = sub_100006560(&qword_100199230);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  v18(v0 + *(void *)(*(void *)v0 + 192), v17);
  uint64_t v19 = v0 + *(void *)(*(void *)v0 + 200);
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v20 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10010E4C8()
{
  sub_10010DF5C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FilterViewModel()
{
  return sub_1000068A4();
}

uint64_t type metadata accessor for FilterViewModel.FilterState()
{
  return sub_1000068A4();
}

void sub_10010E550()
{
  if (!qword_10019EE68)
  {
    type metadata accessor for CompactDatePickerConfiguration();
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019EE68);
    }
  }
}

void sub_10010E5A8()
{
  if (!qword_10019EE70[0])
  {
    sub_10000650C(&qword_10019D1D0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, qword_10019EE70);
    }
  }
}

uint64_t type metadata accessor for FilterViewModel.FilterConfiguration()
{
  return sub_1000068A4();
}

unsigned char *sub_10010E61C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010E6E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void sub_10010E710()
{
  type metadata accessor for DateInterval();
  if (v0 <= 0x3F)
  {
    sub_1000D6408();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_10010E800(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[11];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[12];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    uint64_t v18 = sub_100006560(&qword_10019D1D0);
    v17(&v14[*(int *)(v18 + 36)], &v15[*(int *)(v18 + 36)], v16);
    uint64_t v19 = a3[14];
    *(uint64_t *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10010E99C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = sub_100006560(&qword_10019D1D0);
  v8(v6 + *(int *)(v9 + 36), v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10010EAAC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[11];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[12];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = sub_100006560(&qword_10019D1D0);
  v16(&v13[*(int *)(v17 + 36)], &v14[*(int *)(v17 + 36)], v15);
  uint64_t v18 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10010EBF8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  uint64_t v15 = sub_100006560(&qword_10019D1D0);
  v14(&v11[*(int *)(v15 + 36)], &v12[*(int *)(v15 + 36)], v13);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010ED68(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[11];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = sub_100006560(&qword_10019D1D0);
  v14(v11 + *(int *)(v15 + 36), v12 + *(int *)(v15 + 36), v13);
  uint64_t v16 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

void *sub_10010EE8C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[11];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[12];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  uint64_t v16 = sub_100006560(&qword_10019D1D0);
  v15(&v12[*(int *)(v16 + 36)], &v13[*(int *)(v16 + 36)], v14);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010EFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010EFE8);
}

uint64_t sub_10010EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_10019D1D0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10010F118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010F12C);
}

uint64_t sub_10010F12C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_10019D1D0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10010F25C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10010F278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __n128 v5 = __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t sub_10010F368()
{
  return swift_release();
}

uint64_t sub_10010F400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v14 - v11;
  sub_1001102BC(a1, (uint64_t)v14 - v11);
  v14[2] = v5;
  v14[3] = v6;
  swift_getKeyPath();
  v14[0] = v5;
  v14[1] = v6;
  swift_getKeyPath();
  sub_1001102BC((uint64_t)v12, (uint64_t)v9);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000067DC((uint64_t)v12, &qword_10019D1D0);
}

uint64_t sub_10010F52C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10010F5CC()
{
  return static Published.subscript.setter();
}

Swift::String *sub_10010F660(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v98 = a1;
  uint64_t countAndFlagsBits = v1->_countAndFlagsBits;
  uint64_t v4 = sub_100006560(&qword_10019D1D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v101 = (uint64_t)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for CompactDatePickerConfiguration() - 8;
  __chkstk_darwin(v100);
  long long v99 = (Swift::String *)((char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = *(void *)(countAndFlagsBits + 80);
  uint64_t v104 = *(void *)(countAndFlagsBits + 88);
  uint64_t v96 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v102 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  long long v97 = (char *)&v87 - v7;
  uint64_t v8 = type metadata accessor for GridItem.Size();
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  long long v92 = (_OWORD *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v93 = sub_100006560(&qword_10019DFF8) - 8;
  __chkstk_darwin(v93);
  long long v91 = (uint64_t *)((char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v89 = sub_100006560(&qword_100199230);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100006560(&qword_10019C140);
  uint64_t v13 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = self;
  id v17 = [v16 mainBundle];
  v18._uint64_t countAndFlagsBits = 0xD000000000000024;
  unint64_t v90 = 0xD000000000000024;
  v108._object = (void *)0xE000000000000000;
  v18._object = (void *)0x8000000100159530;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v108._uint64_t countAndFlagsBits = 0;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v108);

  v2[1] = v20;
  id v21 = [v16 mainBundle];
  v109._object = (void *)0xE000000000000000;
  v22._object = (void *)0x8000000100159560;
  v22._uint64_t countAndFlagsBits = 0xD000000000000025;
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v109._uint64_t countAndFlagsBits = 0;
  Swift::String v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v109);

  v2[2] = v24;
  id v25 = [v16 mainBundle];
  v26._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v110._object = (void *)0xE000000000000000;
  v26._object = (void *)0x8000000100159590;
  v27._uint64_t countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v110._uint64_t countAndFlagsBits = 0;
  Swift::String v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v110);

  v2[3] = v28;
  uint64_t v29 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 176);
  Swift::String v105 = (Swift::String)0;
  long long v106 = 0u;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v29, v15, v87);
  uint64_t v30 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 184);
  v105._uint64_t countAndFlagsBits = 0;
  Published.init(initialValue:)();
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  uint64_t v32 = v89;
  v31(v30, v12, v89);
  uint64_t v33 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 192);
  v105._uint64_t countAndFlagsBits = 0;
  Published.init(initialValue:)();
  v31(v33, v12, v32);
  uint64_t v34 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 208);
  *(void *)uint64_t v34 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v34 + 1) = v35;
  v34[16] = v36 & 1;
  *((void *)v34 + 3) = v37;
  uint64_t v38 = (uint64_t *)((char *)&v2->_countAndFlagsBits + *(void *)(v2->_countAndFlagsBits + 216));
  id v39 = [v16 mainBundle];
  v40._uint64_t countAndFlagsBits = 0xD000000000000030;
  v111._object = (void *)0xE000000000000000;
  v40._object = (void *)0x80000001001595F0;
  v41._uint64_t countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  v111._uint64_t countAndFlagsBits = 0;
  Swift::String v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v111);

  Swift::String v105 = v42;
  sub_10002374C();
  uint64_t v43 = StringProtocol.localizedUppercase.getter();
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  *uint64_t v38 = v43;
  v38[1] = v45;
  uint64_t v46 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 224);
  *(void *)uint64_t v46 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v46 + 1) = v47;
  v46[16] = v48 & 1;
  *((void *)v46 + 3) = v49;
  BOOL v50 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 232);
  *(void *)BOOL v50 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v50 + 1) = v51;
  v50[16] = v52 & 1;
  *((void *)v50 + 3) = v53;
  uint64_t v54 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 240);
  *(void *)uint64_t v54 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v54 + 1) = v55;
  v54[16] = v56 & 1;
  *((void *)v54 + 3) = v57;
  uint64_t v58 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 248);
  *(void *)uint64_t v58 = LocalizedStringKey.init(stringLiteral:)();
  *((void *)v58 + 1) = v59;
  v58[16] = v60 & 1;
  *((void *)v58 + 3) = v61;
  uint64_t v62 = *(void *)(v2->_countAndFlagsBits + 256);
  uint64_t v63 = v92;
  *long long v92 = xmmword_10014E1F0;
  (*(void (**)(_OWORD *, void, uint64_t))(v94 + 104))(v63, enum case for GridItem.Size.flexible(_:), v95);
  unint64_t v64 = v91;
  GridItem.init(_:spacing:alignment:)();
  *unint64_t v64 = 2;
  uint64_t v65 = sub_1000E8A0C(v64);
  sub_1000067DC((uint64_t)v64, &qword_10019DFF8);
  *(uint64_t *)((char *)&v2->_countAndFlagsBits + v62) = (uint64_t)v65;
  uint64_t v66 = (char *)v2 + *(void *)(v2->_countAndFlagsBits + 200);
  uint64_t v67 = v96;
  uint64_t v68 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v98, v68);
  uint64_t v69 = v97;
  Binding.wrappedValue.getter();
  LOBYTE(v62) = *v69 < 1;
  swift_beginAccess();
  LOBYTE(v107[0]) = v62;
  uint64_t v70 = type metadata accessor for FilterViewModel.FilterState();
  sub_10010F278((uint64_t)v107, v70);
  swift_endAccess();
  uint64_t v71 = v69[2];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v107[0] = v71;
  uint64_t v72 = type metadata accessor for Array();
  sub_10010F278((uint64_t)v107, v72);
  swift_endAccess();
  id v73 = [v16 mainBundle];
  v112._object = (void *)0xE000000000000000;
  v74._object = (void *)0x8000000100159690;
  v74._uint64_t countAndFlagsBits = 0xD000000000000025;
  v75._uint64_t countAndFlagsBits = 0;
  v75._object = (void *)0xE000000000000000;
  v112._uint64_t countAndFlagsBits = 0;
  Swift::String v76 = NSLocalizedString(_:tableName:bundle:value:comment:)(v74, (Swift::String_optional)0, (NSBundle)v73, v75, v112);

  uint64_t v77 = v99;
  uint64_t v78 = v100;
  DateInterval.start.getter();
  *uint64_t v77 = v76;
  *((unsigned char *)&v77->_countAndFlagsBits + *(int *)(v78 + 32)) = 0;
  swift_beginAccess();
  sub_10010C900((uint64_t)v77);
  swift_endAccess();
  id v79 = [v16 mainBundle];
  v80._uint64_t countAndFlagsBits = 0xD000000000000023;
  v113._object = (void *)0xE000000000000000;
  v80._object = (void *)0x80000001001596C0;
  v81._uint64_t countAndFlagsBits = 0;
  v81._object = (void *)0xE000000000000000;
  v113._uint64_t countAndFlagsBits = 0;
  Swift::String v82 = NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v113);

  DateInterval.end.getter();
  *uint64_t v77 = v82;
  *((unsigned char *)&v77->_countAndFlagsBits + *(int *)(v78 + 32)) = 0;
  swift_beginAccess();
  sub_10010C900((uint64_t)v77);
  swift_endAccess();
  uint64_t v83 = v101;
  sub_1001102BC((uint64_t)v69 + *(int *)(v67 + 48), v101);
  swift_beginAccess();
  sub_10010C9A0(v83);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v84 = swift_bridgeObjectRetain();
  sub_10010CB10(v84);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v85 = swift_bridgeObjectRetain();
  sub_10010CB7C(v85);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v102 + 8))(v69, v67);
  return v2;
}

Swift::String *sub_100110280(uint64_t a1)
{
  return sub_10010F660(a1);
}

uint64_t sub_1001102BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019D1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100110324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CompactDatePickerConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100110388(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CompactDatePickerConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001103E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100110424(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100110434()
{
  return swift_release();
}

void sub_10011043C(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_100109DAC();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_10011046C()
{
  return sub_10010BFF8();
}

uint64_t sub_100110498()
{
  return 16;
}

__n128 sub_1001104A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001104B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010C838();
  *a1 = result;
  return result;
}

uint64_t sub_1001104DC()
{
  return sub_100110548();
}

uint64_t sub_1001104F0()
{
  return 16;
}

__n128 sub_1001104FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110508@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010B398();
  *a1 = result;
  return result;
}

uint64_t sub_100110534()
{
  return sub_100110548();
}

uint64_t sub_100110548()
{
  return sub_10010CC24();
}

uint64_t sub_10011058C()
{
  return 16;
}

__n128 sub_100110598(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001105AC()
{
  return 16;
}

__n128 sub_1001105B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1001105C4()
{
  return sub_100109E64();
}

uint64_t sub_1001105E8(uint64_t a1)
{
  return sub_100109FB0(a1);
}

uint64_t sub_100110610()
{
  return 16;
}

__n128 sub_10011061C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110628()
{
  return sub_100109EB0();
}

uint64_t sub_10011064C(uint64_t a1)
{
  return sub_100109FB0(a1);
}

uint64_t sub_100110674()
{
  return 16;
}

__n128 sub_100110680(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10011068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  BOOL v50 = (char *)&v38 - v10;
  uint64_t v39 = v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - v13;
  if (Array.count.getter())
  {
    type metadata accessor for _SetStorage();
    uint64_t v15 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = &_swiftEmptySetSingleton;
  }
  Swift::Int v43 = Array._getCount()();
  if (!v43) {
    return (uint64_t)v15;
  }
  uint64_t v16 = 0;
  char v48 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v49 = v15 + 56;
  uint64_t v45 = v6 + 32;
  uint64_t v47 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  Swift::String v42 = v14;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      Swift::String v18 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v18(v14, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16), a2);
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v39 != 8) {
        goto LABEL_23;
      }
      uint64_t v51 = result;
      Swift::String v18 = *v48;
      (*v48)(v14, &v51, a2);
      swift_unknownObjectRelease();
      BOOL v19 = __OFADD__(v16, 1);
      uint64_t v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v15;
      }
    }
    uint64_t v46 = v20;
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v44(v50, v14, a2);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    Swift::String v22 = v15;
    uint64_t v23 = -1 << v15[32];
    unint64_t v24 = v21 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
    uint64_t v27 = 1 << v24;
    uint64_t v28 = *(void *)(v6 + 72);
    if (((1 << v24) & v26) != 0)
    {
      uint64_t v29 = ~v23;
      do
      {
        v18(v8, (uint64_t *)(v22[6] + v28 * v24), a2);
        uint64_t v30 = a3;
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v32 = *v47;
        (*v47)(v8, a2);
        if (v31)
        {
          v32(v50, a2);
          a3 = v30;
          uint64_t v6 = v40;
          uint64_t v5 = v41;
          uint64_t v15 = v22;
          goto LABEL_7;
        }
        unint64_t v24 = (v24 + 1) & v29;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = *(void *)&v49[8 * (v24 >> 6)];
        uint64_t v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      uint64_t v6 = v40;
      uint64_t v5 = v41;
    }
    uint64_t v33 = v50;
    *(void *)&v49[8 * v25] = v27 | v26;
    unint64_t v34 = v22[6] + v28 * v24;
    uint64_t v15 = v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v34, v33, a2);
    uint64_t v36 = v22[2];
    BOOL v19 = __OFADD__(v36, 1);
    uint64_t v37 = v36 + 1;
    if (v19) {
      break;
    }
    void v22[2] = v37;
LABEL_7:
    uint64_t v14 = v42;
    uint64_t v16 = v46;
    if (v46 == v43) {
      return (uint64_t)v15;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100110A50()
{
  return 16;
}

__n128 sub_100110A5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110A68(uint64_t a1)
{
  return sub_10010D708(a1, v1) & 1;
}

uint64_t sub_100110A88(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, char *, uint64_t, __n128))(v9 + 16))((char *)&v14 - v11, &v1[*(void *)(v3 + 200)], v8, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_100110C5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100110CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019D1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100110D0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010ABB4();
  *a1 = result;
  return result;
}

uint64_t sub_100110D38()
{
  return sub_100110548();
}

uint64_t sub_100110D4C()
{
  return 16;
}

__n128 sub_100110D58(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110D6C()
{
  return 16;
}

__n128 sub_100110D78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110D8C()
{
  return 16;
}

__n128 sub_100110D98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100110DA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100035D50();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain();
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100110EF4(uint64_t a1, uint64_t a2)
{
  sub_10001D0DC();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100110FBC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  swift_retain();
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1001110B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001D0DC();
  *(void *)(a1 + 24) = a2[3];
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = a2[4];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000067DC(a1 + v9, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1001111E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001112C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001D0DC();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_1000067DC(a1 + v7, &qword_1001982C0);
    uint64_t v10 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001113EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100111400);
}

uint64_t sub_100111400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100006560(&qword_100198B50);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1001114C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001114D4);
}

uint64_t sub_1001114D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24) = a2;
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198B50);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AppModule()
{
  uint64_t result = qword_10019EFF0;
  if (!qword_10019EFF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001115CC()
{
  sub_10001E48C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10011166C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100111688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v76 = a1;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  __chkstk_darwin(v3);
  id v73 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AppModule();
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v71 = *(void *)(v72 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v70 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019F030);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006560(&qword_10019F038) - 8;
  __chkstk_darwin(v62);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006560(&qword_10019F040) - 8;
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100006560(&qword_10019F048) - 8;
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100006560(&qword_10019F050) - 8;
  __chkstk_darwin(v67);
  uint64_t v66 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100006560(&qword_10019F058) - 8;
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = static HorizontalAlignment.leading.getter();
  type metadata accessor for AppViewModel();
  sub_100113F78(&qword_10019F060, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  int v17 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                           + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v18 = 0x4028000000000000;
  if (v17) {
    uint64_t v18 = 0;
  }
  *(void *)uint64_t v9 = v16;
  *((void *)v9 + 1) = v18;
  v9[16] = 0;
  uint64_t v19 = sub_100006560(&qword_10019F068);
  sub_100111D44(v1, (uint64_t)&v9[*(int *)(v19 + 44)]);
  char v20 = static Edge.Set.top.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_1000066D4((uint64_t)v9, (uint64_t)v11, &qword_10019F030);
  uint64_t v29 = &v11[*(int *)(v62 + 44)];
  *uint64_t v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_1000067DC((uint64_t)v9, &qword_10019F030);
  char v30 = static Edge.Set.horizontal.getter();
  uint64_t v31 = v61;
  sub_1000066D4((uint64_t)v11, v61, &qword_10019F038);
  uint64_t v32 = v31 + *(int *)(v63 + 44);
  *(unsigned char *)uint64_t v32 = v30;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(unsigned char *)(v32 + 40) = 1;
  sub_1000067DC((uint64_t)v11, &qword_10019F038);
  char v33 = static Edge.Set.bottom.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v42 = v64;
  sub_1000066D4(v31, v64, &qword_10019F040);
  uint64_t v43 = v42 + *(int *)(v65 + 44);
  *(unsigned char *)uint64_t v43 = v33;
  *(void *)(v43 + 8) = v35;
  *(void *)(v43 + 16) = v37;
  *(void *)(v43 + 24) = v39;
  *(void *)(v43 + 32) = v41;
  *(unsigned char *)(v43 + 40) = 0;
  sub_1000067DC(v31, &qword_10019F040);
  char v44 = *(unsigned char *)(StateObject.wrappedValue.getter()
                 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v45 = static Alignment.center.getter();
  uint64_t v47 = v46;
  uint64_t v48 = v66;
  sub_1000066D4(v42, v66, &qword_10019F048);
  uint64_t v49 = v48 + *(int *)(v67 + 44);
  *(unsigned char *)uint64_t v49 = (v44 & 1) == 0;
  *(void *)(v49 + 8) = v45;
  *(void *)(v49 + 16) = v47;
  sub_1000067DC(v42, &qword_10019F048);
  uint64_t v50 = v70;
  sub_1001137C4(v2, v70);
  unint64_t v51 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  uint64_t v52 = swift_allocObject();
  sub_1000A3ADC(v50, v52 + v51);
  uint64_t v53 = v73;
  static TaskPriority.userInitiated.getter();
  uint64_t v54 = (uint64_t)v68;
  uint64_t v55 = &v68[*(int *)(v69 + 44)];
  uint64_t v56 = type metadata accessor for _TaskModifier();
  uint64_t v58 = v74;
  uint64_t v57 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v55[*(int *)(v56 + 20)], v53, v75);
  *(void *)uint64_t v55 = &unk_10019F078;
  *((void *)v55 + 1) = v52;
  sub_1000066D4(v48, v54, &qword_10019F050);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v57);
  sub_1000067DC(v48, &qword_10019F050);
  return sub_10001D6D8(v54, v76, &qword_10019F058);
}

uint64_t sub_100111D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppModule();
  uint64_t v146 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v157 = (char *)&v139 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = v5;
  __chkstk_darwin(v6);
  uint64_t v155 = (uint64_t)&v139 - v7;
  uint64_t v143 = type metadata accessor for Divider();
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  long long v141 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100006560(&qword_100198C58);
  __chkstk_darwin(v140);
  long long v145 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v144 = (uint64_t)&v139 - v11;
  uint64_t v12 = sub_100006560(&qword_10019F080);
  __chkstk_darwin(v12 - 8);
  id v165 = (uint64_t *)((char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v175 = (uint64_t)&v139 - v15;
  uint64_t v153 = type metadata accessor for AccessibilityTraits();
  uint64_t v151 = *(uint64_t (**)())(v153 - 8);
  __chkstk_darwin(v153);
  long long v150 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_100006560(&qword_10019F088);
  __chkstk_darwin(v148);
  long long v149 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v158 = (char *)&v139 - v19;
  uint64_t v154 = sub_100006560(&qword_10019F090);
  __chkstk_darwin(v154);
  uint64_t v162 = (uint64_t)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v152 = (uint64_t)&v139 - v22;
  __chkstk_darwin(v23);
  uint64_t v174 = (uint64_t)&v139 - v24;
  uint64_t v25 = type metadata accessor for AppViewModel();
  uint64_t v26 = sub_100113F78(&qword_10019F060, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  int v27 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                           + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  uint64_t v147 = a2;
  uint64_t v164 = v25;
  uint64_t v163 = v26;
  if (v27 == 1)
  {
    StateObject.wrappedValue.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v28 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v30 = v29;
    char v32 = v31 & 1;
    static Font.footnote.getter();
    static Font.Weight.semibold.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v33 = Text.font(_:)();
    uint64_t v35 = v34;
    char v37 = v36;
    swift_release();
    sub_1000065A4(v28, v30, v32);
    swift_bridgeObjectRelease();
    if (qword_1001980A0 != -1) {
      swift_once();
    }
    uint64_t v176 = qword_1001AA348;
    swift_retain();
    uint64_t v173 = Text.foregroundStyle<A>(_:)();
    uint64_t v161 = v38;
    uint64_t v171 = v39 & 1;
    uint64_t v172 = v40;
    sub_1000065A4(v33, v35, v37 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    unsigned __int8 v41 = static Edge.Set.bottom.getter();
    StateObject.wrappedValue.getter();
    swift_release();
    EdgeInsets.init(_all:)();
    uint64_t v170 = v42;
    uint64_t v168 = v43;
    uint64_t v167 = v44;
    uint64_t v166 = v45;
    uint64_t v159 = v41;
    uint64_t v46 = 1;
    uint64_t v47 = &v184;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v161 = 0;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    uint64_t KeyPath = 0;
    uint64_t v169 = 0;
    uint64_t v159 = 0;
    uint64_t v170 = 0;
    uint64_t v168 = 0;
    uint64_t v167 = 0;
    uint64_t v173 = 0;
    uint64_t v47 = &v183;
  }
  *(v47 - 32) = v46;
  StateObject.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  swift_release();
  uint64_t v48 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v50 = v49;
  char v52 = v51 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v53 = Text.font(_:)();
  uint64_t v55 = v54;
  char v57 = v56;
  uint64_t v59 = v58;
  swift_release();
  sub_1000065A4(v48, v50, v52);
  swift_bridgeObjectRelease();
  uint64_t v60 = swift_getKeyPath();
  uint64_t v176 = v53;
  uint64_t v177 = v55;
  char v178 = v57 & 1;
  uint64_t v179 = v59;
  uint64_t v180 = v60;
  uint64_t v181 = 2;
  char v182 = 0;
  sub_100006560(&qword_100199E18);
  sub_100049FE0();
  uint64_t v61 = (uint64_t)v149;
  View.accessibilityHeading(_:)();
  sub_1000065A4(v53, v55, v57 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v62 = v150;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v63 = (uint64_t)v158;
  ModifiedContent<>.accessibility(addTraits:)();
  (*((void (**)(char *, uint64_t))v151 + 1))(v62, v153);
  sub_1000067DC(v61, &qword_10019F088);
  LOBYTE(v50) = static Edge.Set.bottom.getter();
  StateObject.wrappedValue.getter();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v72 = v152;
  sub_1000066D4(v63, v152, &qword_10019F088);
  uint64_t v73 = v72 + *(int *)(v154 + 36);
  *(unsigned char *)uint64_t v73 = v50;
  *(void *)(v73 + 8) = v65;
  *(void *)(v73 + 16) = v67;
  *(void *)(v73 + 24) = v69;
  *(void *)(v73 + 32) = v71;
  *(unsigned char *)(v73 + 40) = 0;
  sub_1000067DC(v63, &qword_10019F088);
  sub_10001D6D8(v72, v174, &qword_10019F090);
  LODWORD(v62) = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                                    + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release();
  if (v62 == 1)
  {
    StateObject.wrappedValue.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v76 = v75;
    char v78 = v77 & 1;
    static Font.subheadline.getter();
    static Font.Weight.regular.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v79 = Text.font(_:)();
    uint64_t v81 = v80;
    char v83 = v82;
    swift_release();
    sub_1000065A4(v74, v76, v78);
    swift_bridgeObjectRelease();
    if (qword_1001980A0 != -1) {
      swift_once();
    }
    uint64_t v176 = qword_1001AA348;
    swift_retain();
    uint64_t v84 = Text.foregroundStyle<A>(_:)();
    uint64_t v86 = v85;
    uint64_t v158 = v87;
    char v89 = v88 & 1;
    sub_1000065A4(v79, v81, v83 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v153 = swift_getKeyPath();
    LODWORD(v154) = static Edge.Set.bottom.getter();
    int v90 = *(unsigned __int8 *)(StateObject.wrappedValue.getter()
                             + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
    swift_release();
    if (v90) {
      double v91 = 1.0;
    }
    else {
      double v91 = 0.0;
    }
    long long v92 = v141;
    Divider.init()();
    char v93 = static Edge.Set.bottom.getter();
    uint64_t v94 = v142;
    uint64_t v95 = (uint64_t)v145;
    uint64_t v96 = v143;
    (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v145, v92, v143);
    uint64_t v97 = v95 + *(int *)(v140 + 36);
    *(unsigned char *)uint64_t v97 = v93;
    *(_OWORD *)(v97 + 8) = 0u;
    *(_OWORD *)(v97 + 24) = 0u;
    *(unsigned char *)(v97 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v96);
    uint64_t v98 = v144;
    sub_10001D6D8(v95, v144, &qword_100198C58);
    sub_1000066D4(v98, v95, &qword_100198C58);
    long long v99 = v165;
    uint64_t *v165 = v84;
    v99[1] = v86;
    *((unsigned char *)v99 + 16) = v89;
    uint64_t v100 = v153;
    _OWORD v99[3] = (uint64_t)v158;
    v99[4] = v100;
    v99[5] = 4;
    *((unsigned char *)v99 + 48) = 0;
    *((unsigned char *)v99 + 56) = v154;
    *((_OWORD *)v99 + 4) = 0u;
    *((_OWORD *)v99 + 5) = 0u;
    *((unsigned char *)v99 + 96) = 1;
    *((double *)v99 + 13) = v91;
    uint64_t v101 = sub_100006560(&qword_10019F0A8);
    sub_1000066D4(v95, (uint64_t)v99 + *(int *)(v101 + 48), &qword_100198C58);
    sub_100010924(v84, v86, v89);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000067DC(v98, &qword_100198C58);
    sub_1000067DC(v95, &qword_100198C58);
    sub_1000065A4(v84, v86, v89);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v102 = sub_100006560(&qword_10019F098);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v99, 0, 1, v102);
    sub_10001D6D8((uint64_t)v99, v175, &qword_10019F080);
  }
  else
  {
    uint64_t v103 = sub_100006560(&qword_10019F098);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v175, 1, 1, v103);
  }
  uint64_t v104 = StateObject.wrappedValue.getter();
  uint64_t v106 = *(void *)(v104 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID);
  Swift::String v105 = *(char **)(v104 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID + 8);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v107 = v155;
  sub_1001137C4(a1, v155);
  uint64_t v158 = v105;
  if (v105)
  {
    uint64_t v154 = v106;
    sub_1001139C0(v107);
  }
  else
  {
    uint64_t v108 = StateObject.wrappedValue.getter();
    sub_1001139C0(v107);
    Swift::String v109 = *(char **)(v108 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID + 8);
    uint64_t v154 = *(void *)(v108 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID);
    uint64_t v158 = v109;
    swift_bridgeObjectRetain();
    swift_release();
  }
  uint64_t v110 = StateObject.wrappedValue.getter();
  uint64_t v112 = *(void *)(v110 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID);
  uint64_t v111 = *(void *)(v110 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID + 8);
  uint64_t v153 = v112;
  uint64_t v155 = v111;
  swift_bridgeObjectRetain();
  swift_release();
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v113 = v177;
  uint64_t v152 = v176;
  uint64_t v114 = StateObject.wrappedValue.getter();
  uint64_t v115 = *(void *)(v114 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID + 8);
  if (!v115
    || *(void *)(v114 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID) == *(void *)(v114 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID)
    && v115 == *(void *)(v114 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID + 8))
  {
    swift_release();
    uint64_t v116 = (uint64_t)v157;
  }
  else
  {
    char v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    uint64_t v116 = (uint64_t)v157;
    if ((v138 & 1) == 0)
    {
      uint64_t v151 = 0;
      uint64_t v163 = 0;
      uint64_t v119 = v147;
      uint64_t v117 = v146;
      goto LABEL_22;
    }
  }
  sub_1001137C4(a1, v116);
  uint64_t v117 = v146;
  unint64_t v118 = (*(unsigned __int8 *)(v146 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
  uint64_t v163 = swift_allocObject();
  sub_1000A3ADC(v116, v163 + v118);
  uint64_t v151 = sub_100113C60;
  uint64_t v119 = v147;
LABEL_22:
  sub_1001137C4(a1, v116);
  unint64_t v120 = (*(unsigned __int8 *)(v117 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
  uint64_t v164 = swift_allocObject();
  sub_1000A3ADC(v116, v164 + v120);
  uint64_t v121 = v162;
  sub_1000066D4(v174, v162, &qword_10019F090);
  long long v122 = v165;
  sub_1000066D4(v175, (uint64_t)v165, &qword_10019F080);
  uint64_t v123 = v161;
  *(void *)uint64_t v119 = v173;
  *(void *)(v119 + 8) = v123;
  uint64_t v124 = v172;
  *(void *)(v119 + 16) = v171;
  *(void *)(v119 + 24) = v124;
  uint64_t v125 = v169;
  *(void *)(v119 + 32) = KeyPath;
  *(void *)(v119 + 40) = v125;
  uint64_t v126 = v159;
  *(void *)(v119 + 48) = 0;
  *(void *)(v119 + 56) = v126;
  uint64_t v127 = v168;
  *(void *)(v119 + 64) = v170;
  *(void *)(v119 + 72) = v127;
  uint64_t v168 = v127;
  uint64_t v128 = v166;
  *(void *)(v119 + 80) = v167;
  *(void *)(v119 + 88) = v128;
  uint64_t v166 = v128;
  *(unsigned char *)(v119 + 96) = 0;
  char v129 = (int *)sub_100006560(&qword_10019F0A0);
  sub_1000066D4(v121, v119 + v129[12], &qword_10019F090);
  sub_1000066D4((uint64_t)v122, v119 + v129[16], &qword_10019F080);
  uint64_t v130 = (uint64_t *)(v119 + v129[20]);
  uint64_t v131 = v158;
  *uint64_t v130 = v154;
  v130[1] = (uint64_t)v131;
  uint64_t v132 = v155;
  v130[2] = v153;
  v130[3] = v132;
  v130[4] = v152;
  v130[5] = v113;
  uint64_t v133 = (uint64_t)v151;
  uint64_t v134 = v163;
  v130[6] = (uint64_t)v151;
  unsigned char v130[7] = v134;
  uint64_t v135 = v164;
  v130[8] = (uint64_t)sub_100113A28;
  v130[9] = v135;
  uint64_t v136 = v161;
  sub_100113A98(v173, v161, v171, v172);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100027280(v133);
  sub_100027280((uint64_t)sub_100113A28);
  sub_1000067DC(v175, &qword_10019F080);
  sub_1000067DC(v174, &qword_10019F090);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000271A0(v133);
  sub_1000271A0((uint64_t)sub_100113A28);
  sub_1000067DC((uint64_t)v165, &qword_10019F080);
  sub_1000067DC(v162, &qword_10019F090);
  return sub_100113AE8(v173, v136, v171, v172);
}

uint64_t sub_1001131A4()
{
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OpenURLAction();
  uint64_t v4 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppModule();
  sub_10001D160((uint64_t)v6);
  type metadata accessor for AppViewModel();
  sub_100113F78(&qword_10019F060, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  uint64_t v7 = StateObject.wrappedValue.getter();
  uint64_t v8 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL, v11);
  swift_release();
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v12);
  StateObject.wrappedValue.getter();
  uint64_t v9 = *(void *)(v0 + 24);
  if (v9)
  {
    swift_retain();
    sub_10007FF2C(8, 0, 3u, v9);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100113F78((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100113478(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return result;
    }
  }
  type metadata accessor for AppViewModel();
  sub_100113F78(&qword_10019F060, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  StateObject.wrappedValue.getter();
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    swift_retain();
    sub_10007FF2C(6, 0, 3u, v10);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100113F78((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100113628(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_1001136C0, v3, v2);
}

uint64_t sub_1001136C0()
{
  type metadata accessor for AppViewModel();
  sub_100113F78(&qword_10019F060, (void (*)(uint64_t))type metadata accessor for AppViewModel);
  *(void *)(v0 + 48) = StateObject.wrappedValue.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_10006D658;
  return sub_10007F75C();
}

uint64_t sub_1001137C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011382C()
{
  uint64_t v2 = *(void *)(type metadata accessor for AppModule() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100010CB0;
  return sub_100113628(v3);
}

uint64_t sub_1001138F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10011392C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100113960()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_100113990()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1001139C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100113A28(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AppModule() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100113478(a1, v4);
}

uint64_t sub_100113A98(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100010924(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100113AE8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000065A4(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100113B3C()
{
  uint64_t v1 = (int *)(type metadata accessor for AppModule() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_10001D0DC();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100113C60()
{
  return sub_1001131A4();
}

unint64_t sub_100113CC0()
{
  unint64_t result = qword_10019F0B0;
  if (!qword_10019F0B0)
  {
    sub_10000650C(&qword_10019F058);
    sub_100113D6C();
    sub_100113F78(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F0B0);
  }
  return result;
}

unint64_t sub_100113D6C()
{
  unint64_t result = qword_10019F0B8;
  if (!qword_10019F0B8)
  {
    sub_10000650C(&qword_10019F050);
    sub_100113E58(&qword_10019F0C0, &qword_10019F048, (void (*)(void))sub_100113E30);
    sub_100010484(&qword_100198430, &qword_100198410);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F0B8);
  }
  return result;
}

uint64_t sub_100113E30()
{
  return sub_100113E58(&qword_10019F0C8, &qword_10019F040, (void (*)(void))sub_100113ED8);
}

uint64_t sub_100113E58(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100113ED8()
{
  unint64_t result = qword_10019F0D0;
  if (!qword_10019F0D0)
  {
    sub_10000650C(&qword_10019F038);
    sub_100010484(&qword_10019F0D8, &qword_10019F030);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F0D0);
  }
  return result;
}

uint64_t sub_100113F78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100113FC0@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100115D3C(v1 + 72, a1);
}

uint64_t sub_100114084@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_100115D3C(v3 + 72, a2);
}

uint64_t sub_100114148(uint64_t a1)
{
  sub_100115D3C(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v2, &qword_10019C5D0);
}

uint64_t sub_100114230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  swift_beginAccess();
  sub_100115CD4(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100114294()
{
  swift_getKeyPath();
  sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_100114334@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 112);
  return result;
}

uint64_t sub_1001143DC()
{
  return swift_release();
}

uint64_t sub_1001144AC()
{
  v1[27] = v0;
  sub_100006560(&qword_10019F1D0);
  v1[28] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for AppleMusicSetlist();
  v1[29] = v2;
  v1[30] = *(void *)(v2 - 8);
  v1[31] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[32] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[33] = v4;
  v1[34] = v3;
  return _swift_task_switch(sub_1001145D0, v4, v3);
}

uint64_t sub_1001145D0()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void **)(v0 + 216);
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  *(void *)(v0 + 200) = v1;
  *(void *)(v0 + 280) = OBJC_IVAR____TtC15ShazamEventsApp17SetlistController___observationRegistrar;
  *(void *)(v0 + 288) = sub_100115B44(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  *(void *)(v0 + 296) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_100023118(v1 + 2, v3);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 240))(v3, v4))
  {
    uint64_t v5 = (void *)(v0 + 56);
    swift_getAssociatedTypeWitness();
    sub_100006560(&qword_10019F1F0);
    uint64_t v6 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16))
    {
      sub_1000487B4(v6 + 32, v0 + 56);
    }
    else
    {
      *(void *)(v0 + 88) = 0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 80);
    if (v7)
    {
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 88);
      sub_100023118(v5, *(void *)(v0 + 80));
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v7, v9);
      uint64_t v12 = v11;
      *(void *)(v0 + 304) = v11;
      sub_100029A08((uint64_t)v5);
      uint64_t v13 = *(void *)(v8 + 56);
      uint64_t v14 = *(void *)(v8 + 64);
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100114D98;
      uint64_t v16 = *(void *)(v0 + 224);
      return sub_10012B300(v16, v10, v12, v13, v14);
    }
    sub_1000067DC(v0 + 56, &qword_10019F1F8);
  }
  uint64_t v18 = *(void **)(v0 + 216);
  uint64_t v19 = v18[5];
  uint64_t v20 = v18[6];
  sub_100023118(v18 + 2, v19);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v20 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = swift_task_alloc();
  v45(v19, v20);
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
    swift_release();
    swift_task_dealloc();
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10003345C(v26, (uint64_t)qword_1001AA440);
    swift_retain_n();
    int v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void **)(v0 + 216);
    if (v29)
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      uint64_t v32 = v30[5];
      uint64_t v33 = v30[6];
      sub_100023118(v30 + 2, v32);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 152))(v32, v33);
      *(void *)(v0 + 176) = sub_10004D828(v34, v35, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No set list items with eventID: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v42 = *(void *)(v0 + 216);
    swift_getKeyPath();
    uint64_t v43 = swift_task_alloc();
    *(void *)(v43 + 16) = v42;
    *(unsigned char *)(v43 + 24) = 0;
    *(void *)(v0 + 184) = v42;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  else
  {
    *(void *)(v0 + 120) = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(void *)(v0 + 128) = AssociatedConformanceWitness;
    char v37 = sub_100035868((uint64_t *)(v0 + 96));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v25 + 32))(v37, v24, AssociatedTypeWitness);
    swift_task_dealloc();
    uint64_t v38 = *(void *)(v0 + 120);
    uint64_t v39 = *(void *)(v0 + 128);
    sub_100023118((void *)(v0 + 96), v38);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v38, v39);
    swift_getAssociatedTypeWitness();
    sub_100006560(&qword_10019F1E0);
    uint64_t v40 = _arrayForceCast<A, B>(_:)();
    *(void *)(v0 + 320) = v40;
    swift_bridgeObjectRelease();
    sub_100029A08(v0 + 96);
    uint64_t v46 = (uint64_t (*)(uint64_t))((char *)&dword_10019FBD0 + dword_10019FBD0);
    unsigned __int8 v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v41;
    *unsigned __int8 v41 = v0;
    v41[1] = sub_100115568;
    return v46(v40);
  }
}

uint64_t sub_100114D98()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 272);
  uint64_t v3 = *(void *)(v1 + 264);
  return _swift_task_switch(sub_100114EDC, v3, v2);
}

uint64_t sub_100114EDC()
{
  uint64_t v38 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[28];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[30] + 48))(v2, 1, v1) != 1)
  {
    uint64_t v22 = v0[31];
    uint64_t v23 = v0[27];
    swift_release();
    sub_100115BB0(v2, v22);
    v0[5] = v1;
    v0[6] = sub_100115B44(&qword_10019F1E8, (void (*)(uint64_t))type metadata accessor for AppleMusicSetlist);
    uint64_t v24 = sub_100035868(v0 + 2);
    sub_100115C14(v22, (uint64_t)v24);
    swift_getKeyPath();
    uint64_t v25 = swift_task_alloc();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = v0 + 2;
    v0[26] = v23;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_1000067DC((uint64_t)(v0 + 2), &qword_10019C5D0);
    sub_100115C78(v22);
LABEL_13:
    uint64_t v33 = v0[27];
    swift_getKeyPath();
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v33;
    *(unsigned char *)(v34 + 24) = 0;
    v0[23] = v33;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  sub_1000067DC(v2, &qword_10019F1D0);
  uint64_t v3 = (void *)v0[27];
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  sub_100023118(v3 + 2, v4);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 232);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  v6(v4, v5);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_release();
    swift_task_dealloc();
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10003345C(v12, (uint64_t)qword_1001AA440);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = (void *)v0[27];
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v18 = v16[5];
      uint64_t v19 = v16[6];
      sub_100023118(v16 + 2, v18);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 152))(v18, v19);
      v0[22] = sub_10004D828(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No set list items with eventID: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_13;
  }
  v0[15] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  int v27 = sub_100035868(v0 + 12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 32))(v27, v10, AssociatedTypeWitness);
  swift_task_dealloc();
  uint64_t v28 = v0[15];
  uint64_t v29 = v0[16];
  sub_100023118(v0 + 12, v28);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v28, v29);
  swift_getAssociatedTypeWitness();
  sub_100006560(&qword_10019F1E0);
  uint64_t v30 = _arrayForceCast<A, B>(_:)();
  v0[40] = v30;
  swift_bridgeObjectRelease();
  sub_100029A08((uint64_t)(v0 + 12));
  char v36 = (uint64_t (*)(uint64_t))((char *)&dword_10019FBD0 + dword_10019FBD0);
  char v31 = (void *)swift_task_alloc();
  v0[41] = v31;
  *char v31 = v0;
  v31[1] = sub_100115568;
  return v36(v30);
}

uint64_t sub_100115568(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264);
  return _swift_task_switch(sub_1001156B4, v4, v3);
}

uint64_t sub_1001156B4()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = (int *)v0[29];
  uint64_t v3 = v0[27];
  swift_release();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 64);
  v0[20] = v2;
  v0[21] = sub_100115B44(&qword_10019F1E8, (void (*)(uint64_t))type metadata accessor for AppleMusicSetlist);
  uint64_t v6 = sub_100035868(v0 + 17);
  uint64_t v7 = (char *)v6 + v2[6];
  uint64_t v8 = type metadata accessor for Artwork();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (char *)v6 + v2[7];
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *uint64_t v6 = v4;
  v6[1] = v5;
  v6[2] = v1;
  uint64_t v11 = (uint64_t *)((char *)v6 + v2[8]);
  *uint64_t v11 = 0;
  v11[1] = 0;
  swift_getKeyPath();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v0 + 17;
  v0[24] = v3;
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1000067DC((uint64_t)(v0 + 17), &qword_10019C5D0);
  uint64_t v13 = v0[27];
  swift_getKeyPath();
  uint64_t v14 = swift_task_alloc();
  *(void *)(v14 + 16) = v13;
  *(unsigned char *)(v14 + 24) = 0;
  v0[23] = v13;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100115950()
{
  sub_100029A08(v0 + 16);
  swift_bridgeObjectRelease();
  sub_1000067DC(v0 + 72, &qword_10019C5D0);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp17SetlistController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100115A10()
{
  return type metadata accessor for SetlistController();
}

uint64_t type metadata accessor for SetlistController()
{
  uint64_t result = qword_10019F110;
  if (!qword_10019F110) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100115A64()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100115B34()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 112) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100115B44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100115B94()
{
  return sub_100114230(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100115BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115C78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100115CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019C5D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019C5D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100115DA4()
{
}

uint64_t sub_100115DBC()
{
  return sub_100115B94();
}

uint64_t destroy for ShareSheet(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ShareSheet(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v6 = a2 + 3;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = a2[4];
    a1[3] = v5;
    a1[4] = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *v6;
  }
  return a1;
}

void *assignWithCopy for ShareSheet(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  if (!a1[3])
  {
    if (v4)
    {
      uint64_t v6 = a2[4];
      a1[3] = v4;
      a1[4] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[4];
  a1[3] = v4;
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ShareSheet(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ShareSheet()
{
  return &type metadata for ShareSheet;
}

id sub_100116040()
{
  sub_10001D6D8(v0 + 8, (uint64_t)v10, &qword_10019F208);
  swift_bridgeObjectRetain();
  sub_10002FE38((uint64_t)v10);
  v1.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10001D6D8((uint64_t)v10, (uint64_t)&v11, &qword_10019F208);
  if (v11)
  {
    sub_100116478();
    v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100062470((uint64_t)v10);
  }
  else
  {
    v2.super.Class isa = 0;
  }
  id v3 = [objc_allocWithZone((Class)UIActivityViewController) initWithActivityItems:v1.super.isa applicationActivities:v2.super.isa];

  sub_10001D6D8(v0 + 16, (uint64_t)v9, &qword_10019F210);
  sub_10001D6D8((uint64_t)v9, (uint64_t)&v12, &qword_10019F210);
  Class isa = v12;
  if (v12)
  {
    type metadata accessor for ActivityType(0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  [v3 setExcludedActivityTypes:isa];

  if (*(void *)(v0 + 24))
  {
    uint64_t v5 = *(void *)(v0 + 32);
    v8[4] = *(void *)(v0 + 24);
    v8[5] = v5;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_100116220;
    v8[3] = &unk_100192A88;
    uint64_t v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  [v3 setCompletionWithItemsHandler:v6];
  _Block_release(v6);
  return v3;
}

uint64_t sub_100116220(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  if (a4) {
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  swift_retain();
  id v10 = a2;
  id v11 = a5;
  v8(a2, a3, v9, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1001162DC()
{
  return sub_100116040();
}

uint64_t sub_10011631C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011640C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100116380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011640C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001163E4()
{
}

unint64_t sub_10011640C()
{
  unint64_t result = qword_10019F200;
  if (!qword_10019F200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F200);
  }
  return result;
}

uint64_t sub_100116460(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100116470()
{
  return swift_release();
}

unint64_t sub_100116478()
{
  unint64_t result = qword_10019F218;
  if (!qword_10019F218)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10019F218);
  }
  return result;
}

unint64_t sub_1001164B8(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x747369747261;
      break;
    case 2:
      unint64_t result = 0x65756E6576;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      unint64_t result = 0x746E657665;
      break;
  }
  return result;
}

uint64_t sub_100116560(char a1)
{
  if (a1) {
    return 1701667182;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100116584(char a1)
{
  if (a1) {
    return 0x6449707061;
  }
  else {
    return 0x7972746E756F63;
  }
}

uint64_t sub_1001165B8(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x6574656D61726170;
  }
}

uint64_t sub_1001165F0(unsigned __int8 *a1, char *a2)
{
  return sub_100075DB4(*a1, *a2);
}

Swift::Int sub_1001165FC()
{
  return sub_100076058();
}

uint64_t sub_100116604()
{
  return sub_10007658C();
}

Swift::Int sub_10011660C()
{
  return sub_100076724();
}

unint64_t sub_100116614@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100117918(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100116644@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001164B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_100116670(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100116688()
{
  return sub_100116560(*v0);
}

uint64_t sub_100116690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100117964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001166B8(uint64_t a1)
{
  unint64_t v2 = sub_100117ED4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001166F4(uint64_t a1)
{
  unint64_t v2 = sub_100117ED4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100116730(char *a1, char *a2)
{
  return sub_100075D14(*a1, *a2);
}

Swift::Int sub_10011673C()
{
  return sub_100076154();
}

uint64_t sub_100116744()
{
  return sub_100076524();
}

Swift::Int sub_10011674C()
{
  return sub_10007681C();
}

uint64_t sub_100116754@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018CDB0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_1001167B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100116584(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001167E0()
{
  return sub_1001165B8(*v0);
}

uint64_t sub_1001167E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100117A28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100116810(uint64_t a1)
{
  unint64_t v2 = sub_1001181E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011684C(uint64_t a1)
{
  unint64_t v2 = sub_1001181E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100116888()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v4 = v0[8];
    unint64_t v5 = v0[9];
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_100077690(v4, v5);
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    v0[10] = v3;
    v0[11] = v7;
    swift_bridgeObjectRetain();
    sub_100117744(v8, v9);
  }
  sub_100118A2C(v1, v2);
  return v3;
}

unint64_t sub_100116928(char a1)
{
  unint64_t result = 0xD000000000000019;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574497972657571;
      break;
    case 2:
      unint64_t result = 0x7470697263736564;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x65636976726573;
      break;
  }
  return result;
}

unint64_t sub_1001169CC()
{
  return sub_100116928(*v0);
}

uint64_t sub_1001169D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100117B14(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001169FC(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100116A08(uint64_t a1)
{
  unint64_t v2 = sub_1001176F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100116A44(uint64_t a1)
{
  unint64_t v2 = sub_1001176F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100116A80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100117744(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RemoteViewConfiguration()
{
  return self;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem()
{
  return &type metadata for RemoteViewConfiguration.QueryItem;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service()
{
  return &type metadata for RemoteViewConfiguration.Service;
}

uint64_t sub_100116BA4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100006560(&qword_10019F310);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023118(a1, a1[3]);
  sub_1001176F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = *(void *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 32);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = v9;
  char v15 = v10;
  HIBYTE(v12) = 0;
  sub_100117800();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v13 = *(void *)(v3 + 40);
  HIBYTE(v12) = 1;
  sub_100006560(&qword_10019F2F8);
  sub_100117854(&qword_10019F320, (void (*)(void))sub_1001178C4);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v13) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v13) = 3;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100116DFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v16 = *v1;
  uint64_t v5 = sub_100006560(&qword_10019F2E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[11] = 1;
  sub_100023118(a1, a1[3]);
  sub_1001176F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_100117744(v1[10], v1[11]);
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v20 = 0;
    sub_100117758();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v18;
    char v10 = v19;
    v1[2] = v17;
    v1[3] = v9;
    *((unsigned char *)v1 + 32) = v10;
    sub_100006560(&qword_10019F2F8);
    char v20 = 1;
    sub_100117854(&qword_10019F300, (void (*)(void))sub_1001177AC);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v1[5] = v17;
    LOBYTE(v17) = 2;
    v1[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v1[7] = v12;
    LOBYTE(v17) = 3;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[8] = v13;
    v3[9] = v15;
    swift_bridgeObjectRelease();
  }
  sub_100029A08((uint64_t)a1);
  return v3;
}

uint64_t sub_100117144(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v6 = sub_100006560(&qword_10019F348);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023118(a1, a1[3]);
  sub_100117ED4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v14 = v12;
    char v13 = 1;
    sub_100117F7C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001172CC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  char v6 = a2 & 1;
  uint64_t v7 = sub_100006560(&qword_10019F378);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023118(a1, a1[3]);
  sub_1001181E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v6;
  char v14 = 0;
  sub_10011828C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t *sub_100117454@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100116DFC(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1001174AC(void *a1)
{
  return sub_100116BA4(a1);
}

uint64_t sub_1001174D0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001174E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100117CCC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100117510(void *a1)
{
  return sub_100117144(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100117530()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100117590()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001175E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100118024(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100117614(void *a1)
{
  return sub_1001172CC(a1, *(unsigned char *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_100117634()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100117694()
{
  return RawRepresentable<>.encode(to:)();
}

void *sub_1001176E4()
{
  return &protocol witness table for String;
}

unint64_t sub_1001176F0()
{
  unint64_t result = qword_10019F2E8;
  if (!qword_10019F2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F2E8);
  }
  return result;
}

uint64_t sub_100117744(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100117758()
{
  unint64_t result = qword_10019F2F0;
  if (!qword_10019F2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F2F0);
  }
  return result;
}

unint64_t sub_1001177AC()
{
  unint64_t result = qword_10019F308;
  if (!qword_10019F308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F308);
  }
  return result;
}

unint64_t sub_100117800()
{
  unint64_t result = qword_10019F318;
  if (!qword_10019F318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F318);
  }
  return result;
}

uint64_t sub_100117854(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(&qword_10019F2F8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001178C4()
{
  unint64_t result = qword_10019F328;
  if (!qword_10019F328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F328);
  }
  return result;
}

unint64_t sub_100117918(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018CD18, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_100117964(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100117A28(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6574656D61726170 && a2 == 0xE900000000000072;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100117B14(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574497972657571 && a2 == 0xEA0000000000736DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100159850)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100117CCC(void *a1)
{
  uint64_t v3 = sub_100006560(&qword_10019F330);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_100023118(a1, a1[3]);
  sub_100117ED4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100029A08((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[13] = 1;
    sub_100117F28();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100029A08((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100117ED4()
{
  unint64_t result = qword_10019F338;
  if (!qword_10019F338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F338);
  }
  return result;
}

unint64_t sub_100117F28()
{
  unint64_t result = qword_10019F340;
  if (!qword_10019F340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F340);
  }
  return result;
}

unint64_t sub_100117F7C()
{
  unint64_t result = qword_10019F350;
  if (!qword_10019F350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F350);
  }
  return result;
}

unint64_t sub_100117FD0()
{
  unint64_t result = qword_10019F358;
  if (!qword_10019F358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F358);
  }
  return result;
}

uint64_t sub_100118024(void *a1)
{
  uint64_t v3 = sub_100006560(&qword_10019F360);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_100023118(a1, v7);
  sub_1001181E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[14] = 0;
    sub_100118238();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v9[15];
    v9[13] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100029A08((uint64_t)a1);
  return v7;
}

unint64_t sub_1001181E4()
{
  unint64_t result = qword_10019F368;
  if (!qword_10019F368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F368);
  }
  return result;
}

unint64_t sub_100118238()
{
  unint64_t result = qword_10019F370;
  if (!qword_10019F370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F370);
  }
  return result;
}

unint64_t sub_10011828C()
{
  unint64_t result = qword_10019F380;
  if (!qword_10019F380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F380);
  }
  return result;
}

unint64_t sub_1001182E0()
{
  unint64_t result = qword_10019F388;
  if (!qword_10019F388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F388);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.Service.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RemoteViewConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100118424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.CodingKeys;
}

unsigned char *_s15ShazamEventsApp23RemoteViewConfigurationC9QueryItemV9ParameterOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100118528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.Parameter()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.Parameter;
}

unsigned char *storeEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011862CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.Name()
{
  return &type metadata for RemoteViewConfiguration.Service.Name;
}

unint64_t sub_100118668()
{
  unint64_t result = qword_10019F390;
  if (!qword_10019F390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F390);
  }
  return result;
}

unint64_t sub_1001186C0()
{
  unint64_t result = qword_10019F398;
  if (!qword_10019F398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F398);
  }
  return result;
}

unint64_t sub_100118718()
{
  unint64_t result = qword_10019F3A0;
  if (!qword_10019F3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3A0);
  }
  return result;
}

unint64_t sub_100118770()
{
  unint64_t result = qword_10019F3A8;
  if (!qword_10019F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3A8);
  }
  return result;
}

unint64_t sub_1001187C8()
{
  unint64_t result = qword_10019F3B0;
  if (!qword_10019F3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3B0);
  }
  return result;
}

unint64_t sub_100118820()
{
  unint64_t result = qword_10019F3B8;
  if (!qword_10019F3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3B8);
  }
  return result;
}

unint64_t sub_100118878()
{
  unint64_t result = qword_10019F3C0;
  if (!qword_10019F3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3C0);
  }
  return result;
}

unint64_t sub_1001188D0()
{
  unint64_t result = qword_10019F3C8;
  if (!qword_10019F3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3C8);
  }
  return result;
}

unint64_t sub_100118928()
{
  unint64_t result = qword_10019F3D0;
  if (!qword_10019F3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3D0);
  }
  return result;
}

unint64_t sub_100118980()
{
  unint64_t result = qword_10019F3D8;
  if (!qword_10019F3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F3D8);
  }
  return result;
}

unint64_t sub_1001189D8()
{
  unint64_t result = qword_10019F3E0[0];
  if (!qword_10019F3E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10019F3E0);
  }
  return result;
}

uint64_t sub_100118A2C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100118A44()
{
  sub_1000364F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100118AF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100035D50();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    uint64_t v11 = a2[6];
    uint64_t v12 = *(int *)(a3 + 60);
    char v13 = (void *)(a1 + v12);
    char v14 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v11;
    swift_retain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *char v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100118C50(uint64_t a1, uint64_t a2)
{
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100118D20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = a2[6];
  uint64_t v11 = *(int *)(a3 + 60);
  uint64_t v12 = (void *)(a1 + v11);
  char v13 = (uint64_t *)((char *)a2 + v11);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v10;
  swift_retain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100118E28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001D0DC();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = a2[6];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000067DC(a1 + v9, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100118F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 60);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100119064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001D0DC();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 60);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_1000067DC(a1 + v8, qword_100198AA0);
    uint64_t v11 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100119198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001191AC);
}

uint64_t sub_1001191AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100119260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100119274);
}

uint64_t sub_100119274(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198648);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100119338()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10011937C()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t sub_1001193FC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = *((unsigned __int8 *)v2 + 16);
  uint64_t v7 = type metadata accessor for ArtistEventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a2(v4, v5, v6, v7, WitnessTable);
}

uint64_t sub_10011948C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v118 = a2;
  uint64_t v117 = type metadata accessor for TaskPriority();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = *(void *)(a1 - 8);
  uint64_t v125 = *(void *)(v137 + 64);
  __chkstk_darwin(v4);
  uint64_t v132 = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(ValueMetadata **)(a1 + 24);
  uint64_t v134 = a1;
  type metadata accessor for Optional();
  long long v122 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for Binding();
  uint64_t v121 = *((void *)v122 - 1);
  __chkstk_darwin(v122);
  unint64_t v120 = (char *)v96 - v7;
  uint64_t v133 = type metadata accessor for NavigationPath();
  sub_10000650C(&qword_10019F468);
  sub_10000650C(&qword_100199870);
  uint64_t v8 = type metadata accessor for Array();
  unint64_t v135 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(v135 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v159 = v8;
  uint64_t v160 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v161 = v11;
  unint64_t v162 = WitnessTable;
  uint64_t v163 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for ObservableScrollView();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v159 = v14;
  uint64_t v160 = (ValueMetadata *)v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v17 = sub_10000650C(&qword_10019F478);
  uint64_t v159 = v14;
  uint64_t v160 = (ValueMetadata *)v15;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v19 = sub_100010484(&qword_10019F480, &qword_10019F478);
  uint64_t v159 = OpaqueTypeMetadata2;
  uint64_t v160 = (ValueMetadata *)v17;
  uint64_t v161 = OpaqueTypeConformance2;
  unint64_t v162 = v19;
  v96[3] = swift_getOpaqueTypeMetadata2();
  uint64_t v159 = OpaqueTypeMetadata2;
  uint64_t v160 = (ValueMetadata *)v17;
  uint64_t v161 = OpaqueTypeConformance2;
  unint64_t v162 = v19;
  _OWORD v96[2] = swift_getOpaqueTypeConformance2();
  uint64_t v20 = type metadata accessor for NavigationStack();
  uint64_t v119 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  v96[0] = (char *)v96 - v21;
  unint64_t v22 = v135;
  uint64_t v23 = type metadata accessor for EventView();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v159 = v20;
  uint64_t v160 = v6;
  uint64_t v161 = v23;
  unint64_t v162 = v24;
  v96[1] = v23;
  uint64_t v26 = v24;
  uint64_t v98 = (void (*)(char *, char *, uint64_t))v24;
  uint64_t v97 = v9;
  uint64_t v163 = v9;
  uint64_t v164 = v25;
  v96[4] = v25;
  uint64_t v27 = swift_getOpaqueTypeMetadata2();
  uint64_t v99 = v27;
  uint64_t v103 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v128 = (char *)v96 - v28;
  uint64_t v159 = v20;
  uint64_t v160 = v6;
  uint64_t v161 = v23;
  unint64_t v162 = v26;
  uint64_t v163 = v9;
  uint64_t v164 = v25;
  uint64_t v29 = swift_getOpaqueTypeConformance2();
  uint64_t v127 = v29;
  unint64_t v126 = sub_10001CFA8();
  uint64_t v159 = v27;
  uint64_t v160 = &type metadata for PromotionalAssetsContentView;
  uint64_t v161 = v29;
  unint64_t v162 = v126;
  uint64_t v102 = &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>;
  uint64_t v101 = swift_getOpaqueTypeMetadata2();
  uint64_t v104 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  char v129 = (char *)v96 - v30;
  uint64_t v105 = type metadata accessor for ModifiedContent();
  uint64_t v107 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v130 = (char *)v96 - v31;
  uint64_t v106 = type metadata accessor for ModifiedContent();
  uint64_t v108 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v131 = (char *)v96 - v32;
  type metadata accessor for _TaskModifier();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v111 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v100 = (char *)v96 - v34;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v112 = v33;
  uint64_t v114 = type metadata accessor for ModifiedContent();
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  Swift::String v109 = (char *)v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v110 = (void *)((char *)v96 - v37);
  uint64_t v38 = v134;
  uint64_t v146 = *(void *)(v134 + 16);
  uint64_t v39 = v146;
  uint64_t v147 = v6;
  uint64_t v148 = *(void *)(v134 + 32);
  uint64_t v40 = v148;
  unint64_t v149 = v22;
  uint64_t v150 = v136;
  NavigationStack.init<>(root:)();
  sub_1001193FC(v38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v142 = v39;
  uint64_t v143 = v6;
  uint64_t v41 = v40;
  uint64_t v144 = v40;
  unint64_t v145 = v22;
  swift_getKeyPath();
  uint64_t v159 = v39;
  uint64_t v160 = v6;
  uint64_t v161 = v40;
  unint64_t v162 = v22;
  unint64_t v42 = v22;
  type metadata accessor for ArtistEventViewModel();
  swift_getWitnessTable();
  uint64_t v43 = v120;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v44 = (void *)swift_allocObject();
  v44[2] = v39;
  v44[3] = v6;
  v44[4] = v41;
  v44[5] = v22;
  swift_checkMetadataState();
  uint64_t v45 = v96[0];
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v121 + 8))(v43, v122);
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v45, v20);
  uint64_t v46 = v134;
  uint64_t v47 = v136;
  sub_1001193FC(v134, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v124 = v39;
  uint64_t v138 = v39;
  uint64_t v139 = v6;
  uint64_t v48 = v6;
  uint64_t v133 = v41;
  uint64_t v140 = v41;
  unint64_t v141 = v42;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  LODWORD(v97) = v161;
  uint64_t v49 = v137;
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
  uint64_t v121 = v137 + 16;
  long long v122 = v50;
  char v51 = v132;
  v50(v132, v47, v46);
  uint64_t v52 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v53 = (v52 + 48) & ~v52;
  uint64_t v119 = v53 + v125;
  unint64_t v120 = (char *)v53;
  uint64_t v125 = v52 | 7;
  uint64_t v54 = (char *)swift_allocObject();
  *((void *)v54 + 2) = v39;
  *((void *)v54 + 3) = v48;
  uint64_t v123 = v48;
  *((void *)v54 + 4) = v41;
  unint64_t v55 = v135;
  *((void *)v54 + 5) = v135;
  uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v137 = v49 + 32;
  v98(&v54[v53], v51, v46);
  uint64_t v56 = v99;
  char v57 = v128;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v57, v56);
  uint64_t v58 = v136;
  uint64_t v59 = v46;
  uint64_t v60 = v46;
  uint64_t v61 = v122;
  v122(v51, v136, v60);
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = v124;
  *(void *)(v62 + 24) = v48;
  *(void *)(v62 + 32) = v133;
  *(void *)(v62 + 40) = v55;
  uint64_t v63 = v120;
  uint64_t v64 = v51;
  uint64_t v65 = v98;
  v98(&v120[v62], v64, v59);
  uint64_t v159 = v56;
  uint64_t v160 = &type metadata for PromotionalAssetsContentView;
  uint64_t v161 = v127;
  unint64_t v162 = v126;
  uint64_t v128 = (char *)swift_getOpaqueTypeConformance2();
  uint64_t v66 = v101;
  uint64_t v67 = v129;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v67, v66);
  uint64_t v68 = v132;
  uint64_t v69 = v58;
  uint64_t v70 = v134;
  v61(v132, v69, v134);
  uint64_t v71 = swift_allocObject();
  uint64_t v72 = v124;
  uint64_t v73 = v123;
  *(void *)(v71 + 16) = v124;
  *(void *)(v71 + 24) = v73;
  unint64_t v74 = v135;
  *(void *)(v71 + 32) = v133;
  *(void *)(v71 + 40) = v74;
  v65(&v63[v71], v68, v70);
  uint64_t v157 = v128;
  uint64_t v158 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v75 = v105;
  uint64_t v76 = swift_getWitnessTable();
  char v77 = v130;
  View.onDisappear(perform:)();
  char v78 = v100;
  swift_release();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v77, v75);
  v122(v68, v136, v70);
  uint64_t v79 = swift_allocObject();
  uint64_t v80 = v123;
  *(void *)(v79 + 16) = v72;
  *(void *)(v79 + 24) = v80;
  unint64_t v81 = v135;
  *(void *)(v79 + 32) = v133;
  *(void *)(v79 + 40) = v81;
  v65(&v120[v79], v68, v70);
  uint64_t v155 = v76;
  uint64_t v156 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v82 = v106;
  uint64_t v83 = swift_getWitnessTable();
  uint64_t v84 = v115;
  j___sScP13userInitiatedScPvgZ();
  uint64_t v85 = v84;
  uint64_t v86 = v131;
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v85, v117);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v86, v82);
  if (qword_1001980E8 != -1) {
    swift_once();
  }
  uint64_t v87 = sub_100120CF0(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v153 = v83;
  uint64_t v154 = v87;
  uint64_t v88 = v112;
  uint64_t v89 = swift_getWitnessTable();
  int v90 = v109;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v111 + 8))(v78, v88);
  uint64_t v91 = sub_100120CF0((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v151 = v89;
  uint64_t v152 = v91;
  uint64_t v92 = v114;
  swift_getWitnessTable();
  char v93 = v110;
  sub_1000508C8(v110, v90, v92);
  uint64_t v94 = *(void (**)(char *, uint64_t))(v113 + 8);
  v94(v90, v92);
  sub_1000508C8(v118, v93, v92);
  return ((uint64_t (*)(void *, uint64_t))v94)(v93, v92);
}

uint64_t sub_10011A828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v75 = a4;
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  uint64_t v79 = a6;
  uint64_t v78 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v76 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = a2;
  uint64_t v93 = a3;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v70 = a5;
  uint64_t v74 = type metadata accessor for ArtistEventView();
  uint64_t v72 = *(void *)(v74 - 8);
  uint64_t v73 = *(void *)(v72 + 64);
  __chkstk_darwin(v74);
  uint64_t v71 = (char *)&v52 - v11;
  sub_10000650C(&qword_10019F468);
  sub_10000650C(&qword_100199870);
  uint64_t v12 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v92 = v12;
  uint64_t v93 = AssociatedTypeWitness;
  uint64_t v94 = v14;
  uint64_t v95 = WitnessTable;
  uint64_t v96 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  uint64_t v67 = type metadata accessor for LazyVGrid();
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for ObservableScrollView();
  uint64_t v69 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v65 = (uint64_t)&v52 - v18;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v92 = v17;
  uint64_t v93 = v19;
  uint64_t v20 = v19;
  uint64_t v56 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v61 = OpaqueTypeMetadata2;
  uint64_t v68 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  char v57 = (char *)&v52 - v22;
  uint64_t v23 = sub_10000650C(&qword_10019F478);
  uint64_t v60 = v23;
  uint64_t v92 = v17;
  uint64_t v93 = v20;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = OpaqueTypeConformance2;
  uint64_t v58 = sub_100010484(&qword_10019F480, &qword_10019F478);
  uint64_t v92 = OpaqueTypeMetadata2;
  uint64_t v93 = v23;
  uint64_t v94 = OpaqueTypeConformance2;
  uint64_t v95 = v58;
  uint64_t v62 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v63 = swift_getOpaqueTypeMetadata2();
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v54 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v27 = __chkstk_darwin(v26);
  unint64_t v55 = (uint64_t *)((char *)&v52 - v28);
  uint64_t v29 = v80;
  uint64_t v87 = v80;
  uint64_t v88 = a3;
  uint64_t v53 = a3;
  uint64_t v30 = v75;
  uint64_t v31 = v70;
  uint64_t v89 = v75;
  uint64_t v90 = v70;
  uint64_t v91 = v81;
  uint64_t v32 = v72;
  uint64_t v33 = v71;
  uint64_t v34 = v74;
  (*(void (**)(char *, __n128))(v72 + 16))(v71, v27);
  unint64_t v35 = (*(unsigned __int8 *)(v32 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v36 = (char *)swift_allocObject();
  *((void *)v36 + 2) = v29;
  *((void *)v36 + 3) = a3;
  *((void *)v36 + 4) = v30;
  *((void *)v36 + 5) = v31;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v36[v35], v33, v34);
  char v37 = static Axis.Set.vertical.getter();
  uint64_t v38 = v65;
  sub_1000C44B0(v37, 0, (void (*)(uint64_t))sub_1001204D4, (uint64_t)sub_1001204F0, (uint64_t)v36, v65);
  uint64_t v39 = v77;
  uint64_t v40 = v76;
  uint64_t v41 = v78;
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v78);
  unint64_t v42 = v57;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v38, v17);
  uint64_t v82 = v80;
  uint64_t v83 = v53;
  uint64_t v84 = v30;
  uint64_t v85 = v31;
  uint64_t v86 = v81;
  uint64_t v43 = v54;
  uint64_t v44 = v61;
  uint64_t v45 = v60;
  uint64_t v46 = v59;
  uint64_t v47 = v58;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v44);
  uint64_t v92 = v44;
  uint64_t v93 = v45;
  uint64_t v94 = v46;
  uint64_t v95 = v47;
  swift_getOpaqueTypeConformance2();
  uint64_t v48 = v55;
  uint64_t v49 = v63;
  sub_1000508C8(v55, v43, v63);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v64 + 8);
  v50(v43, v49);
  sub_1000508C8(v79, v48, v49);
  return ((uint64_t (*)(void *, uint64_t))v50)(v48, v49);
}

uint64_t sub_10011B104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a4;
  uint64_t v32 = a2;
  unint64_t v35 = a6;
  uint64_t v7 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v7 - 8);
  uint64_t v31 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GridItem.Size();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (_OWORD *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000650C(&qword_10019F468);
  sub_10000650C(&qword_100199870);
  uint64_t v12 = type metadata accessor for Array();
  uint64_t v27 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v41 = v12;
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v43 = v14;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for LazyVGrid();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v26 - v22);
  sub_100006560(&qword_100199A00);
  type metadata accessor for GridItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014D4D0;
  *uint64_t v11 = xmmword_10014E1F0;
  (*(void (**)(_OWORD *, void, uint64_t))(v29 + 104))(v11, enum case for GridItem.Size.flexible(_:), v30);
  GridItem.init(_:spacing:alignment:)();
  uint64_t v36 = v32;
  uint64_t v37 = v27;
  uint64_t v38 = v34;
  uint64_t v39 = v28;
  uint64_t v40 = v33;
  static HorizontalAlignment.center.getter();
  sub_10011937C();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v23, v20, v17);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v18 + 8);
  v24(v20, v17);
  sub_1000508C8(v35, v23, v17);
  return ((uint64_t (*)(void *, uint64_t))v24)(v23, v17);
}

uint64_t sub_10011B60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a4;
  uint64_t v17 = a2;
  uint64_t v20 = a6;
  sub_10000650C(&qword_10019F468);
  sub_10000650C(&qword_100199870);
  uint64_t v26 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for VStack();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v17 - v13);
  uint64_t v21 = v17;
  uint64_t v22 = a3;
  uint64_t v23 = v19;
  uint64_t v24 = a5;
  uint64_t v25 = v18;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  sub_1000508C8(v20, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v15)(v14, v8);
}

uint64_t sub_10011B910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v47 = a4;
  uint64_t v45 = a2;
  uint64_t v51 = a6;
  sub_10000650C(&qword_100199870);
  uint64_t v60 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v40 = type metadata accessor for ForEach();
  uint64_t v41 = type metadata accessor for _ConditionalContent();
  uint64_t v8 = type metadata accessor for Group();
  uint64_t v46 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v38 - v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v38 = (char *)&v38 - v11;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v44 = (char *)&v38 - v16;
  uint64_t v48 = sub_100006560(&qword_10019F468);
  __chkstk_darwin(v48);
  uint64_t v43 = (uint64_t)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v38 - v19;
  *(void *)uint64_t v20 = static HorizontalAlignment.center.getter();
  *((void *)v20 + 1) = 0;
  v20[16] = 0;
  uint64_t v21 = sub_100006560(&qword_10019F4E0);
  uint64_t v22 = v45;
  uint64_t v23 = v47;
  uint64_t v24 = v42;
  sub_10011BFC8(a1, v45, a3, v47, v42, (uint64_t)&v20[*(int *)(v21 + 44)]);
  uint64_t v52 = v22;
  uint64_t v53 = a3;
  uint64_t v54 = v23;
  uint64_t v55 = v24;
  uint64_t v56 = a1;
  uint64_t v25 = sub_100120790(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  v59[9] = sub_100120810();
  uint64_t v26 = swift_getWitnessTable();
  v59[7] = v25;
  v59[8] = v26;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v28 = v39;
  Group<A>.init(content:)();
  static Edge.Set.leading.getter();
  v59[6] = v27;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = v38;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v8);
  static Edge.Set.trailing.getter();
  v59[4] = v29;
  v59[5] = &protocol witness table for _PaddingLayout;
  uint64_t v31 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v10);
  _OWORD v59[2] = v31;
  v59[3] = &protocol witness table for _PaddingLayout;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v44;
  sub_1000508C8(v44, v14, v12);
  uint64_t v34 = v50;
  unint64_t v35 = *(void (**)(char *, uint64_t))(v50 + 8);
  v35(v14, v12);
  uint64_t v36 = v43;
  sub_1000066D4((uint64_t)v20, v43, &qword_10019F468);
  uint64_t v60 = v36;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v14, v33, v12);
  uint64_t AssociatedTypeWitness = (uint64_t)v14;
  v59[0] = v48;
  v59[1] = v12;
  uint64_t v57 = sub_100010484(&qword_10019F4F0, &qword_10019F468);
  uint64_t v58 = v32;
  sub_100050970(&v60, 2uLL, (uint64_t)v59);
  v35(v33, v12);
  sub_1000067DC((uint64_t)v20, &qword_10019F468);
  v35(v14, v12);
  return sub_1000067DC(v36, &qword_10019F468);
}

uint64_t sub_10011BFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v129 = a6;
  uint64_t v124 = a2;
  uint64_t v125 = a3;
  uint64_t v154 = a2;
  uint64_t v155 = a3;
  uint64_t v126 = a4;
  uint64_t v127 = a5;
  uint64_t v156 = a4;
  *(void *)&long long v157 = a5;
  uint64_t v7 = type metadata accessor for ArtistEventView();
  uint64_t v123 = *(void *)(v7 - 8);
  uint64_t v121 = *(void *)(v123 + 64);
  __chkstk_darwin(v7);
  long long v122 = (char *)&v109 - v8;
  uint64_t v9 = sub_100006560(&qword_10019A538);
  uint64_t v119 = *(void *)(v9 - 8);
  uint64_t v120 = v9;
  __chkstk_darwin(v9);
  uint64_t v111 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v11 - 8);
  uint64_t v117 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v109 = v13;
  uint64_t v110 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v130 = (char *)&v109 - v15;
  uint64_t v16 = sub_100006560(&qword_10019A3A0);
  __chkstk_darwin(v16 - 8);
  uint64_t v128 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v131 = (char *)&v109 - v19;
  uint64_t v20 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v21 = (int *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v115 = sub_100006560(&qword_10019F4F8) - 8;
  __chkstk_darwin(v115);
  uint64_t v134 = (uint64_t)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v133 = (uint64_t)&v109 - v26;
  sub_1001193FC(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v27 = sub_1001446CC();
  uint64_t v112 = v28;
  uint64_t v113 = v27;
  swift_release();
  uint64_t v114 = v7;
  sub_1001193FC(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100144744((uint64_t)v23 + v21[7]);
  swift_release();
  uint64_t v29 = sub_1001193FC(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 184);
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  char v33 = *(unsigned char *)(v30 + 16);
  uint64_t v34 = *(void *)(v30 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v35 = v112;
  *uint64_t v23 = v113;
  v23[1] = v35;
  uint64_t v36 = (char *)v23 + v21[8];
  *(void *)uint64_t v36 = v31;
  *((void *)v36 + 1) = v32;
  uint64_t v37 = a1;
  uint64_t v38 = v134;
  v36[16] = v33;
  *((void *)v36 + 3) = v34;
  *((unsigned char *)v23 + v21[9]) = 0;
  uint64_t v39 = (uint64_t *)((char *)v23 + v21[10]);
  *uint64_t v39 = swift_getKeyPath();
  sub_100006560(&qword_100198940);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v39) = static Edge.Set.horizontal.getter();
  sub_100120944((uint64_t)v23, v38, type metadata accessor for ArtistEventListHeader);
  uint64_t v40 = v114;
  uint64_t v41 = v38 + *(int *)(v115 + 44);
  *(unsigned char *)uint64_t v41 = (_BYTE)v39;
  *(_OWORD *)(v41 + 8) = 0u;
  *(_OWORD *)(v41 + 24) = 0u;
  *(unsigned char *)(v41 + 40) = 1;
  sub_1001209AC((uint64_t)v23, type metadata accessor for ArtistEventListHeader);
  sub_10001D6D8(v38, v133, &qword_10019F4F8);
  uint64_t v42 = sub_1001193FC(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v43 = *(void *)(v42 + *(void *)(*(void *)v42 + 168));
  swift_retain();
  swift_release();
  swift_getKeyPath();
  uint64_t v154 = v43;
  sub_100120CF0((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v44 = v43 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v45 = v44;
  uint64_t v46 = v117;
  sub_1000066D4(v45, v117, &qword_10019A540);
  swift_release();
  uint64_t v47 = v116;
  uint64_t v48 = v118;
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 48))(v46, 1);
  uint64_t v132 = v37;
  if (v49 == 1)
  {
    sub_1000067DC(v46, &qword_10019A540);
    uint64_t v50 = 1;
    uint64_t v51 = v40;
    uint64_t v52 = (uint64_t)v131;
    uint64_t v54 = v119;
    uint64_t v53 = v120;
  }
  else
  {
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
    uint64_t v113 = v47 + 32;
    uint64_t v115 = (uint64_t)v55;
    v55(v130, v46, v48);
    uint64_t v56 = sub_1001193FC(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v57 = *(void *)(v56 + *(void *)(*(void *)v56 + 168));
    swift_retain();
    swift_release();
    type metadata accessor for PromotionalAssetsEntryViewModel();
    uint64_t v58 = swift_allocObject();
    ObservationRegistrar.init()();
    *(void *)(v58 + 16) = v57;
    v140[0] = v58;
    State.init(wrappedValue:)();
    uint64_t v59 = v154;
    uint64_t v51 = v40;
    uint64_t v60 = v155;
    char v61 = static Edge.Set.horizontal.getter();
    LOBYTE(v57) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v154 = v59;
    uint64_t v155 = v60;
    LOBYTE(v156) = v61;
    long long v157 = 0u;
    long long v158 = 0u;
    char v159 = 1;
    char v160 = v57;
    uint64_t v161 = v62;
    uint64_t v162 = v63;
    uint64_t v163 = v64;
    uint64_t v164 = v65;
    char v165 = 0;
    uint64_t v66 = v122;
    uint64_t v67 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v132, v51);
    uint64_t v68 = v110;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v110, v130, v48);
    unint64_t v69 = (*(unsigned __int8 *)(v67 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    unint64_t v70 = (v121 + *(unsigned __int8 *)(v47 + 80) + v69) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v71 = (char *)swift_allocObject();
    uint64_t v72 = v125;
    *((void *)v71 + 2) = v124;
    *((void *)v71 + 3) = v72;
    uint64_t v73 = v127;
    *((void *)v71 + 4) = v126;
    *((void *)v71 + 5) = v73;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v71[v69], v66, v51);
    uint64_t v74 = v48;
    ((void (*)(char *, char *, uint64_t))v115)(&v71[v70], v68, v48);
    uint64_t v37 = v132;
    sub_100006560(&qword_10019A570);
    sub_100120790(&qword_10019A578, &qword_10019A570, (void (*)(void))sub_1000620E4);
    uint64_t v75 = v111;
    View.onTapGesture(count:perform:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v130, v74);
    uint64_t v77 = v119;
    uint64_t v76 = v120;
    uint64_t v52 = (uint64_t)v131;
    (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v131, v75, v120);
    uint64_t v50 = 0;
    uint64_t v53 = v76;
    uint64_t v54 = v77;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v52, v50, 1, v53);
  sub_1001193FC(v51, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  BOOL v78 = sub_100144A04();
  swift_release();
  if (!v78)
  {
    sub_100120D38((uint64_t)v140);
    sub_10001D6D8((uint64_t)v140, (uint64_t)&v154, &qword_10019F500);
LABEL_13:
    uint64_t v103 = v133;
    uint64_t v102 = v134;
    sub_1000066D4(v133, v134, &qword_10019F4F8);
    uint64_t v104 = v128;
    sub_1000066D4(v52, v128, &qword_10019A3A0);
    sub_10001D6D8((uint64_t)&v154, (uint64_t)v138, &qword_10019F500);
    uint64_t v105 = v129;
    sub_1000066D4(v102, v129, &qword_10019F4F8);
    uint64_t v106 = sub_100006560(&qword_10019F508);
    sub_1000066D4(v104, v105 + *(int *)(v106 + 48), &qword_10019A3A0);
    uint64_t v107 = v105 + *(int *)(v106 + 64);
    sub_10001D6D8((uint64_t)v138, (uint64_t)v139, &qword_10019F500);
    sub_10001D6D8((uint64_t)v139, v107, &qword_10019F500);
    sub_100120DC0((uint64_t)v139, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100120D58);
    sub_1000067DC(v52, &qword_10019A3A0);
    sub_1000067DC(v103, &qword_10019F4F8);
    sub_10001D6D8((uint64_t)v138, (uint64_t)v140, &qword_10019F500);
    sub_100120DC0((uint64_t)v140, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100120E2C);
    sub_1000067DC(v104, &qword_10019A3A0);
    return sub_1000067DC(v102, &qword_10019F4F8);
  }
  sub_1001193FC(v51, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(v37 + 40))
  {
    swift_retain();
    char v79 = sub_100116888();
    uint64_t v81 = v80;
    swift_release();
    uint64_t v82 = v127;
    if (v81)
    {
      swift_bridgeObjectRelease();
      if (v79) {
        char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      else {
        char v83 = 1;
      }
    }
    else
    {
      char v83 = 1;
    }
    swift_bridgeObjectRelease();
    uint64_t v84 = sub_100144A9C(v83 & 1);
    swift_release();
    uint64_t v85 = v132;
    sub_1001193FC(v51, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v86 = sub_100144CD0();
    uint64_t v88 = v87;
    swift_release();
    uint64_t v90 = v122;
    uint64_t v89 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v85, v51);
    uint64_t v91 = v51;
    unint64_t v92 = (*(unsigned __int8 *)(v89 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    uint64_t v93 = (char *)swift_allocObject();
    uint64_t v94 = v125;
    *((void *)v93 + 2) = v124;
    *((void *)v93 + 3) = v94;
    *((void *)v93 + 4) = v126;
    *((void *)v93 + 5) = v82;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v93[v92], v90, v91);
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t v95 = EnvironmentObject.init()();
    uint64_t v97 = v96;
    LOBYTE(v91) = static Edge.Set.bottom.getter();
    LOBYTE(v89) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    char v137 = 1;
    char v135 = 0;
    v140[0] = v84;
    v140[1] = v86;
    v140[2] = v88;
    v140[3] = sub_100120FCC;
    v140[4] = v93;
    v140[5] = v95;
    v140[6] = v97;
    char v141 = v91;
    *(_DWORD *)uint64_t v142 = *(_DWORD *)v139;
    *(_DWORD *)&v142[3] = *(_DWORD *)&v139[3];
    long long v143 = 0u;
    long long v144 = 0u;
    char v145 = 1;
    *(_DWORD *)uint64_t v146 = *(_DWORD *)v138;
    *(_DWORD *)&v146[3] = *(_DWORD *)&v138[3];
    char v147 = v89;
    *(_DWORD *)uint64_t v148 = *(_DWORD *)v136;
    *(_DWORD *)&v148[3] = *(_DWORD *)&v136[3];
    uint64_t v149 = v98;
    uint64_t v150 = v99;
    uint64_t v151 = v100;
    uint64_t v152 = v101;
    char v153 = 0;
    nullsub_1(v140);
    sub_10001D6D8((uint64_t)v140, (uint64_t)&v154, &qword_10019F500);
    uint64_t v52 = (uint64_t)v131;
    goto LABEL_13;
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10011CD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100006560(&qword_10019A5D0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = a3;
  v22[1] = a4;
  void v22[2] = a5;
  v22[3] = a6;
  uint64_t v15 = type metadata accessor for ArtistEventView();
  sub_1001193FC(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1001449FC();
  swift_release();
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v16 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 152))(v11, v16);
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v20 = *(void *)(a1 + 40);
  if (v20)
  {
    swift_retain();
    sub_1000AC4E4(v17, v19, 2, 3, 9, 0, 3u, v20);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011CFB0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v10 = type metadata accessor for ArtistEventView();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3, v10);
  type metadata accessor for MainActor();
  sub_1000B069C(a1, a2);
  uint64_t v19 = static MainActor.shared.getter();
  unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = v19;
  *((void *)v22 + 3) = &protocol witness table for MainActor;
  uint64_t v23 = v28;
  *((void *)v22 + 4) = v27;
  *((void *)v22 + 5) = v23;
  uint64_t v24 = v30;
  *((void *)v22 + 6) = v29;
  *((void *)v22 + 7) = v24;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[v20], v14, v10);
  uint64_t v25 = (uint64_t *)&v22[v21];
  *uint64_t v25 = a1;
  v25[1] = a2;
  sub_1000FA73C((uint64_t)v17, (uint64_t)&unk_10019F518, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_10011D1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = v13;
  v8[12] = v14;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  _OWORD v8[8] = a6;
  void v8[6] = a4;
  type metadata accessor for MainActor();
  v8[13] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[14] = v10;
  v8[15] = v9;
  return _swift_task_switch(sub_10011D29C, v10, v9);
}

uint64_t sub_10011D29C()
{
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  uint64_t v1 = type metadata accessor for ArtistEventView();
  *(void *)(v0 + 128) = v1;
  *(void *)(v0 + 136) = sub_1001193FC(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  Swift::String v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  *Swift::String v2 = v0;
  v2[1] = sub_10011D374;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  return sub_100144DC0(v4, v3);
}

uint64_t sub_10011D374()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_10011D4B8, v3, v2);
}

uint64_t sub_10011D4B8()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[8];
  swift_release();
  sub_1001193FC(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = 0xEF6E6F697461636FLL;
      uint64_t v4 = 0x4C746E6572727563;
    }
    else
    {
      uint64_t v4 = v0[7];
      uint64_t v3 = v0[8];
    }
  }
  else
  {
    uint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 7105633;
  }
  uint64_t v5 = v0[7];
  uint64_t v6 = *(void *)(v0[6] + 40);
  unint64_t v7 = v0[8];
  if (v6)
  {
    sub_1000B069C(v5, v7);
    swift_retain();
    sub_1001452DC(7, v4, v3, 2u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    sub_1000B069C(v5, v7);
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_10011D658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v58 = a6;
  uint64_t v50 = a2;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  uint64_t v52 = a4;
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v9 = type metadata accessor for ArtistEventView();
  uint64_t v49 = *(void *)(v9 - 8);
  v46[2] = *(void *)(v49 + 64);
  __chkstk_darwin(v9);
  uint64_t v47 = (char *)v46 - v10;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t v53 = a5;
  uint64_t v12 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_10000650C(&qword_10019F470);
  uint64_t WitnessTable = swift_getWitnessTable();
  v46[5] = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v60 = v11;
  uint64_t v61 = AssociatedTypeWitness;
  v46[4] = AssociatedTypeWitness;
  v46[3] = v14;
  uint64_t v62 = v14;
  uint64_t v63 = WitnessTable;
  v46[1] = WitnessTable;
  uint64_t v64 = AssociatedConformanceWitness;
  uint64_t v17 = type metadata accessor for ForEach();
  uint64_t v51 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v48 = (void *)((char *)v46 - v21);
  uint64_t v54 = sub_10000650C(&qword_100199870);
  uint64_t v22 = type metadata accessor for _ConditionalContent();
  uint64_t v56 = *(void *)(v22 - 8);
  uint64_t v57 = v22;
  __chkstk_darwin(v22);
  uint64_t v55 = (char *)v46 - v23;
  sub_1001193FC(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v24 = sub_100145634();
  swift_release();
  uint64_t v60 = v24;
  swift_getWitnessTable();
  LOBYTE(WitnessTable) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1001193FC(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (WitnessTable)
  {
    uint64_t v26 = v25 + *(void *)(*(void *)v25 + 200);
    uint64_t v28 = *(void *)v26;
    uint64_t v27 = *(void *)(v26 + 8);
    char v29 = *(unsigned char *)(v26 + 16);
    uint64_t v30 = *(void *)(v26 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    char v31 = static Edge.Set.top.getter();
    uint64_t v60 = v28;
    uint64_t v61 = v27;
    LOBYTE(v62) = v29;
    uint64_t v63 = v30;
    LOBYTE(v64) = v31;
    long long v65 = 0u;
    long long v66 = 0u;
    char v67 = 1;
    sub_100120790(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
    unint64_t v59 = sub_100120810();
    swift_getWitnessTable();
    uint64_t v32 = v55;
    sub_100050B34((uint64_t)&v60, v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = sub_100145634();
    swift_release();
    uint64_t v60 = v33;
    uint64_t v34 = v49;
    uint64_t v35 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, a1, v9);
    unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v37 = (char *)swift_allocObject();
    *((void *)v37 + 2) = v50;
    *((void *)v37 + 3) = a3;
    uint64_t v38 = v53;
    *((void *)v37 + 4) = v52;
    *((void *)v37 + 5) = v38;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v37[v36], v35, v9);
    unint64_t v39 = sub_100120810();
    ForEach<>.init(_:content:)();
    unint64_t v71 = v39;
    swift_getWitnessTable();
    uint64_t v40 = v48;
    sub_1000508C8(v48, v19, v17);
    uint64_t v41 = *(void (**)(void *, uint64_t))(v51 + 8);
    v41(v19, v17);
    sub_1000508C8(v19, v40, v17);
    sub_100120790(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
    uint64_t v32 = v55;
    sub_100050C2C((uint64_t)v19, v54, v17);
    v41(v19, v17);
    v41(v40, v17);
  }
  uint64_t v42 = sub_100120790(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v70 = sub_100120810();
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v68 = v42;
  uint64_t v69 = v43;
  uint64_t v44 = v57;
  swift_getWitnessTable();
  sub_1000508C8(v58, v32, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v32, v44);
}

uint64_t sub_10011DD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v105 = a2;
  uint64_t v118 = a5;
  uint64_t v113 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v109 = v9;
  uint64_t v110 = v8;
  uint64_t v111 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = v10;
  uint64_t v120 = v8;
  uint64_t v121 = v11;
  uint64_t v122 = v10;
  uint64_t v123 = v12;
  uint64_t v13 = type metadata accessor for ArtistEventView();
  uint64_t v107 = *(void *)(v13 - 8);
  uint64_t v108 = v13;
  uint64_t v103 = *(void *)(v107 + 64);
  __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v83 - v14;
  uint64_t v99 = type metadata accessor for Date();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v96 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DateInterval();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v92 = (uint64_t)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v86 = (char *)&v83 - v17;
  uint64_t v93 = type metadata accessor for EventRowViewModel();
  __chkstk_darwin(v93);
  uint64_t v91 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v90 = (uint64_t *)((char *)&v83 - v20);
  uint64_t v21 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v21 - 8);
  uint64_t v89 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100006560(&qword_1001998B8);
  __chkstk_darwin(v115);
  uint64_t v114 = (uint64_t)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100006560(&qword_100199A08);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v100 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100006560(&qword_100199878);
  uint64_t v116 = *(void *)(v25 - 8);
  uint64_t v117 = v25;
  __chkstk_darwin(v25);
  uint64_t v97 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  char v31 = (char *)&v83 - v30;
  uint64_t v32 = *(void *)(v27 - 8);
  __n128 v34 = __chkstk_darwin(v33);
  unint64_t v36 = (char *)&v83 - v35;
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 216);
  uint64_t v106 = a1;
  uint64_t v119 = a4;
  uint64_t v120 = v37(a3, a4, v34);
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v38 = v32;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
LABEL_6:
    uint64_t v81 = 1;
    uint64_t v78 = v117;
    uint64_t v80 = v118;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v80, v81, 1, v78);
  }
  unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v40 = v36;
  v39(v36, v31, v27);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v27, AssociatedConformanceWitness);
  if (!v42)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v27);
    goto LABEL_6;
  }
  uint64_t v43 = v42;
  id v44 = [v42 city];
  uint64_t v85 = v38;
  id v45 = v44;

  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v83 = v46;

  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v27, AssociatedConformanceWitness);
  uint64_t v49 = v48;
  uint64_t v50 = v86;
  uint64_t v51 = v106;
  (*(void (**)(uint64_t, uint64_t))(v119 + 200))(a3, v119);
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = swift_getAssociatedConformanceWitness();
  uint64_t v54 = v92;
  sub_1000B7044(v52, v53, v92);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v50, v52);
  uint64_t AssociatedTypeWitness = (uint64_t)v40;
  uint64_t v55 = v96;
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v54, v95);
  uint64_t v56 = (int *)v93;
  uint64_t v57 = v90;
  uint64_t v58 = (char *)v90 + *(int *)(v93 + 28);
  *((void *)v58 + 4) = 0;
  *(_OWORD *)uint64_t v58 = 0u;
  *((_OWORD *)v58 + 1) = 0u;
  uint64_t v59 = v83;
  *uint64_t v57 = v84;
  v57[1] = v59;
  v57[2] = v47;
  v57[3] = v49;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))((char *)v57 + v56[6], v55, v99);
  *((unsigned char *)v57 + v56[8]) = 0;
  *(uint64_t *)((char *)v57 + v56[9]) = 0;
  sub_100120944((uint64_t)v57, v91, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v60 = (uint64_t)v89;
  State.init(wrappedValue:)();
  sub_1001209AC((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v61 = v114;
  sub_100120944(v60, v114, type metadata accessor for EventRow);
  *(unsigned char *)(v61 + *(int *)(v115 + 36)) = 0;
  sub_1001209AC(v60, type metadata accessor for EventRow);
  uint64_t v63 = v107;
  uint64_t v62 = v108;
  uint64_t v64 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v104, v105, v108);
  uint64_t v65 = v113;
  long long v66 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v111, v51, a3);
  unint64_t v67 = (*(unsigned __int8 *)(v63 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  unint64_t v68 = (v103 + *(unsigned __int8 *)(v65 + 80) + v67) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  uint64_t v69 = (char *)swift_allocObject();
  *((void *)v69 + 2) = v110;
  *((void *)v69 + 3) = a3;
  uint64_t v70 = v119;
  *((void *)v69 + 4) = v112;
  *((void *)v69 + 5) = v70;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v69[v67], v64, v62);
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v69[v68], v66, a3);
  sub_10003E014();
  unint64_t v71 = v100;
  uint64_t v72 = v114;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_1000067DC(v72, &qword_1001998B8);
  uint64_t v73 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v75 = v101;
  uint64_t v76 = (uint64_t)v97;
  uint64_t v77 = v102;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v97, v71, v102);
  uint64_t v78 = v117;
  char v79 = (uint64_t *)(v76 + *(int *)(v117 + 36));
  *char v79 = KeyPath;
  v79[1] = v73;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v77);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(AssociatedTypeWitness, v27);
  uint64_t v80 = v118;
  sub_10001D6D8(v76, v118, &qword_100199878);
  uint64_t v81 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v80, v81, 1, v78);
}

uint64_t sub_10011E90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - v14;
  v20[0] = a3;
  v20[1] = a4;
  void v20[2] = a5;
  v20[3] = a6;
  uint64_t v16 = type metadata accessor for ArtistEventView();
  sub_1001193FC(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v17 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a2, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, a4);
  sub_100147600((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release();
  sub_1001193FC(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = *(void *)(a1 + 40);
  if (v18)
  {
    swift_retain();
    sub_1001452DC(8, 10, 0, 3u, v18);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011EB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v57 = a6;
  uint64_t v56 = sub_100006560(&qword_10019F498);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100006560(&qword_10019F4A0);
  uint64_t v50 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v46 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019F4A8);
  __chkstk_darwin(v12 - 8);
  uint64_t v52 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v54 = (char *)&v44 - v15;
  uint64_t v16 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v16 - 8);
  __chkstk_darwin(v17);
  uint64_t v18 = sub_100006560(&qword_10019F4B0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v44 - v23;
  static ToolbarItemPlacement.navigationBarLeading.getter();
  uint64_t v45 = a2;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v25 = v51;
  uint64_t v49 = a5;
  uint64_t v62 = v51;
  sub_100006560(&qword_10019F4B8);
  sub_1001205D4();
  ToolbarItem<>.init(placement:content:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v21, v18);
  if (*(void *)(v25 + 40))
  {
    swift_retain();
    char v26 = sub_100116888();
    uint64_t v28 = v27;
    swift_release();
    if (v28 && (swift_bridgeObjectRelease(), (v26 & 1) != 0))
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v40 & 1) == 0)
      {
        uint64_t v41 = sub_100006560(&qword_10019F4D0);
        uint64_t v42 = (uint64_t)v52;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v52, 1, 1, v41);
        uint64_t v43 = sub_100010484(&qword_10019F4D8, &qword_10019F4A0);
        uint64_t v63 = v53;
        uint64_t v64 = v43;
        swift_getOpaqueTypeConformance2();
        uint64_t v37 = (uint64_t)v54;
        static ToolbarContentBuilder.buildIf<A>(_:)();
        sub_1000067DC(v42, &qword_10019F4A8);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v29 = static ToolbarItemPlacement.navigationBarTrailing.getter();
    __chkstk_darwin(v29);
    uint64_t v30 = v47;
    *(&v44 - 6) = v45;
    *(&v44 - 5) = v30;
    uint64_t v31 = v49;
    *(&v44 - 4) = v48;
    *(&v44 - 3) = v31;
    *(&v44 - 2) = v25;
    sub_100006560(&qword_10019A4C0);
    sub_100061550();
    uint64_t v32 = v46;
    ToolbarItem<>.init(placement:content:)();
    uint64_t v33 = sub_100010484(&qword_10019F4D8, &qword_10019F4A0);
    uint64_t v35 = (uint64_t)v52;
    uint64_t v34 = v53;
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    uint64_t v36 = sub_100006560(&qword_10019F4D0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
    uint64_t v63 = v34;
    uint64_t v64 = v33;
    swift_getOpaqueTypeConformance2();
    uint64_t v37 = (uint64_t)v54;
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_1000067DC(v35, &qword_10019F4A8);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v34);
LABEL_6:
    uint64_t v38 = (uint64_t)&v55[*(int *)(v56 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v55, v24, v18);
    sub_1000066D4(v37, v38, &qword_10019F4A8);
    TupleToolbarContent.init(_:)();
    sub_1000067DC(v37, &qword_10019F4A8);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10011F218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v11 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_100006560(&qword_10019F4B8);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v19 = type metadata accessor for ArtistEventView();
  sub_1001193FC(v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v20 = sub_1001446CC();
  uint64_t v33 = v21;
  uint64_t v34 = v20;
  swift_release();
  sub_1001193FC(v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100144744((uint64_t)v14 + v12[7]);
  swift_release();
  uint64_t v22 = sub_1001193FC(v19, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v23 = v22 + *(void *)(*(void *)v22 + 184);
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *(void *)(v23 + 8);
  LOBYTE(a3) = *(unsigned char *)(v23 + 16);
  uint64_t v26 = *(void *)(v23 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v27 = v33;
  *uint64_t v14 = v34;
  v14[1] = v27;
  uint64_t v28 = (char *)v14 + v12[8];
  *(void *)uint64_t v28 = v24;
  *((void *)v28 + 1) = v25;
  v28[16] = a3;
  *((void *)v28 + 3) = v26;
  *((unsigned char *)v14 + v12[9]) = 1;
  uint64_t v29 = (uint64_t *)((char *)v14 + v12[10]);
  *uint64_t v29 = swift_getKeyPath();
  sub_100006560(&qword_100198940);
  swift_storeEnumTagMultiPayload();
  if (*(unsigned char *)(*(void *)(a1 + 32) + 16)) {
    double v30 = 1.0;
  }
  else {
    double v30 = 0.0;
  }
  sub_100120944((uint64_t)v14, (uint64_t)v18, type metadata accessor for ArtistEventListHeader);
  *(double *)&v18[*(int *)(v16 + 44)] = v30;
  sub_1001209AC((uint64_t)v14, type metadata accessor for ArtistEventListHeader);
  return sub_10001D6D8((uint64_t)v18, v35, &qword_10019F4B8);
}

uint64_t sub_10011F498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v22[1] = a1;
  uint64_t v11 = type metadata accessor for DismissAction();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v22 - v16;
  void v22[2] = a2;
  v22[3] = a3;
  void v22[4] = a4;
  v22[5] = a5;
  type metadata accessor for ArtistEventView();
  sub_10001D698((uint64_t)v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v18, v14, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  uint64_t v20 = static Font.title2.getter();
  uint64_t result = swift_getKeyPath();
  *(_WORD *)a6 = 1;
  *(void *)(a6 + 8) = sub_10003EE6C;
  *(void *)(a6 + 16) = v19;
  *(void *)(a6 + 24) = result;
  *(void *)(a6 + 32) = v20;
  return result;
}

uint64_t sub_10011F664()
{
  return sub_100145724();
}

uint64_t sub_10011F688(uint64_t a1)
{
  return sub_100147600(a1);
}

uint64_t sub_10011F6AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EventView();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)((char *)&v24 - v17);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, a1, a3, v16);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  uint64_t v21 = v24;
  *((void *)v20 + 2) = v25;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = v26;
  *((void *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v10, a3);
  sub_100052E1C((uint64_t)sub_100053138, 0, (uint64_t)v14);
  swift_getWitnessTable();
  sub_1000508C8(v18, v14, v11);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v14, v11);
  sub_1000508C8(v27, v18, v11);
  return ((uint64_t (*)(void *, uint64_t))v22)(v18, v11);
}

uint64_t sub_10011F930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_10008DEAC((uint64_t)v7);
}

uint64_t sub_10011FA10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014581C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10011FA40()
{
  return sub_10014590C();
}

uint64_t sub_10011FA68@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  uint64_t v3 = sub_1001193FC(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 168));
  swift_retain();
  swift_release();
  type metadata accessor for RemoteViewConfiguration();
  sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *a1 = v4;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t sub_10011FB48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  sub_1001193FC(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = swift_retain();
    sub_100145A00(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011FC2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArtistEventView();
  sub_1001193FC(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    swift_retain();
    sub_1001452DC(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100120CF0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[12] = v7;
  v5[13] = v6;
  return _swift_task_switch(sub_10011FDC4, v7, v6);
}

uint64_t sub_10011FDC4()
{
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  uint64_t v1 = type metadata accessor for ArtistEventView();
  uint64_t v2 = sub_1001193FC(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v0 + 112) = *(void *)(v2 + *(void *)(*(void *)v2 + 168));
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10011FEBC;
  return sub_100124684();
}

uint64_t sub_10011FEBC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_100120000, v3, v2);
}

uint64_t sub_100120000()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100120064()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011A828);
}

uint64_t sub_10012007C()
{
  return sub_100145724();
}

uint64_t sub_1001200A0(uint64_t a1)
{
  return sub_100147600(a1);
}

uint64_t sub_1001200C4()
{
  return 32;
}

__n128 sub_1001200D0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001200DC()
{
  return swift_deallocObject();
}

uint64_t sub_1001200EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10011F6AC(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1001200F8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014581C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100120128()
{
  return sub_10014590C();
}

uint64_t sub_100120150()
{
  return 32;
}

__n128 sub_10012015C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10012016C@<X0>(void *a1@<X8>)
{
  type metadata accessor for ArtistEventView();

  return sub_10011FA68(a1);
}

uint64_t sub_10012021C()
{
  return sub_100120250((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10011FB48);
}

uint64_t sub_100120238()
{
  return sub_100120250((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10011FC2C);
}

uint64_t sub_100120250(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_100120304()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  v1[2] = v2;
  v1[3] = v3;
  v1[4] = v4;
  v1[5] = v5;
  uint64_t v6 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v7 = (uint64_t)v0 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  v1[6] = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_100121C74;
  return sub_10011FD24(v7, v2, v3, v4, v5);
}

uint64_t sub_100120408()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_100120490()
{
  return sub_10011F930(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001204D4()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011B104);
}

uint64_t sub_1001204F0()
{
  type metadata accessor for ArtistEventView();

  return sub_10003B178();
}

uint64_t sub_1001205A4()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011EB58);
}

uint64_t sub_1001205BC()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011F218);
}

unint64_t sub_1001205D4()
{
  unint64_t result = qword_10019F4C0;
  if (!qword_10019F4C0)
  {
    sub_10000650C(&qword_10019F4B8);
    sub_100120CF0(&qword_10019F4C8, (void (*)(uint64_t))type metadata accessor for ArtistEventListHeader);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F4C0);
  }
  return result;
}

uint64_t sub_100120680@<X0>(uint64_t a1@<X8>)
{
  return sub_10011F498(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100120690()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100120730()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011B60C);
}

uint64_t sub_100120748()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011B910);
}

uint64_t sub_100120760()
{
  return sub_100120778((uint64_t (*)(void, void, void, void, void))sub_10011D658);
}

uint64_t sub_100120778(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100120790(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100120810()
{
  unint64_t result = qword_10019F4E8;
  if (!qword_10019F4E8)
  {
    sub_10000650C(&qword_10019F470);
    sub_10003DF40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F4E8);
  }
  return result;
}

uint64_t sub_100120888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v7 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10011DD40(a1, v8, v5, v6, a2);
}

uint64_t sub_100120944(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001209AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100120A0C()
{
  long long v9 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(v9 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + v1[17];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, void))(v4 + 8))(v0 + ((v2 + v3 + v5) & ~v5), v9);
  return swift_deallocObject();
}

uint64_t sub_100120BE4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t)v0
     + ((v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return sub_10011E90C((uint64_t)v0 + v6, v7, v1, v2, v3, v4);
}

uint64_t sub_100120CF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_100120D38(uint64_t a1)
{
  *(unsigned char *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100120D58(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_1000B069C(a2, a3);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_100120DC0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

uint64_t sub_100120E2C(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_1000BCF9C(a2, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100120E98()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[17];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_100120FCC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_10011CFB0(a1, a2, v10, v5, v6, v7, v8);
}

uint64_t sub_100121088()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[17];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t sub_100121250()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for ArtistPromotionalAssets() - 8);
  uint64_t v9 = (uint64_t)v0 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_10011CD84((uint64_t)v0 + v6, v9, v1, v2, v3, v4);
}

uint64_t sub_100121358()
{
  uint64_t v1 = (int *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = (*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[17];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v0 + v3 + 8) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1001214B4(uint64_t a1)
{
  unint64_t v3 = v2;
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  v3[2] = v5;
  v3[3] = v4;
  v3[4] = v7;
  v3[5] = v6;
  uint64_t v8 = *(void *)(type metadata accessor for ArtistEventView() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = (uint64_t)v1 + v9;
  uint64_t v13 = (void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  __n128 v16 = (void *)swift_task_alloc();
  v3[6] = v16;
  *__n128 v16 = v3;
  v16[1] = sub_10012161C;
  return sub_10011D1F0(a1, v10, v11, v12, v14, v15, v5, v4);
}

uint64_t sub_10012161C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100121710()
{
  return swift_getWitnessTable();
}

void *sub_100121C7C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PromotionalAssetsContentView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for PromotionalAssetsContentView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsContentView()
{
  return &type metadata for PromotionalAssetsContentView;
}

uint64_t sub_100121D7C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100121D98()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100121DBC(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v2 - 8);
  sub_1000066D4(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100198948);
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t sub_100121E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v87 = a3;
  uint64_t v89 = a2;
  uint64_t v99 = a4;
  uint64_t v86 = type metadata accessor for _TaskModifier();
  __chkstk_darwin(v86);
  uint64_t v80 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for TaskPriority();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100006560(&qword_10019F520);
  __chkstk_darwin(v98);
  uint64_t v81 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v84 = (uint64_t)&v79 - v9;
  uint64_t v95 = sub_100006560(&qword_10019F528);
  __chkstk_darwin(v95);
  uint64_t v97 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100006560(&qword_10019F530);
  __chkstk_darwin(v90);
  uint64_t v94 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_100006560(&qword_10019F538);
  __chkstk_darwin(v96);
  uint64_t v92 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100006560(&qword_10019F540);
  __chkstk_darwin(v91);
  uint64_t v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v88 = (uint64_t)&v79 - v16;
  uint64_t v17 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v93 = (char *)&v79 - v25;
  swift_getKeyPath();
  uint64_t v101 = a1;
  sub_100123D6C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v26 = a1;
  uint64_t v27 = a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  uint64_t v28 = v27;
  uint64_t v29 = v20;
  sub_1000066D4(v28, (uint64_t)v19, &qword_10019A540);
  uint64_t v30 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t v31 = v85;
    uint64_t v32 = v86;
    uint64_t v33 = v94;
    sub_1000067DC((uint64_t)v19, &qword_10019A540);
    swift_getKeyPath();
    uint64_t v34 = v26;
    uint64_t v100 = v26;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(void *)(v26 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error)
      || (swift_getKeyPath(),
          uint64_t v100 = v26,
          ObservationRegistrar.access<A, B>(_:keyPath:)(),
          swift_release(),
          *(void *)(v26 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel)))
    {
      uint64_t v35 = LocalizedStringKey.init(stringLiteral:)();
      uint64_t v37 = v36;
      char v39 = v38;
      uint64_t v88 = v40;
      uint64_t v41 = LocalizedStringKey.init(stringLiteral:)();
      uint64_t v42 = v26;
      uint64_t v79 = v26;
      uint64_t v44 = v43;
      char v46 = v45;
      uint64_t v48 = v47;
      uint64_t v49 = (void *)swift_allocObject();
      v49[2] = v42;
      uint64_t v50 = v87;
      v49[3] = v89;
      _OWORD v49[4] = v50;
      *(void *)uint64_t v33 = v35;
      *(void *)(v33 + 8) = v37;
      uint64_t v93 = v37;
      *(unsigned char *)(v33 + 16) = v39 & 1;
      *(void *)(v33 + 24) = v88;
      *(void *)(v33 + 32) = v41;
      *(void *)(v33 + 40) = v44;
      *(unsigned char *)(v33 + 48) = v46 & 1;
      *(void *)(v33 + 56) = v48;
      *(void *)(v33 + 64) = sub_10012373C;
      *(void *)(v33 + 72) = v49;
      *(void *)(v33 + 80) = 0;
      *(void *)(v33 + 88) = 0;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100027280((uint64_t)sub_10012373C);
      sub_100027280(0);
      sub_100006560(&qword_10019F570);
      sub_100010484(&qword_10019F560, &qword_10019F540);
      sub_100123528();
      uint64_t v51 = (uint64_t)v92;
      _ConditionalContent<>.init(storage:)();
      sub_1000066D4(v51, v97, &qword_10019F538);
      swift_storeEnumTagMultiPayload();
      sub_100123488();
      sub_1001235F8();
      _ConditionalContent<>.init(storage:)();
      sub_1000067DC(v51, &qword_10019F538);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000271A0((uint64_t)sub_10012373C);
      return sub_1000271A0(0);
    }
    else
    {
      uint64_t v94 = LocalizedStringKey.init(stringLiteral:)();
      uint64_t v66 = v65;
      char v68 = v67;
      uint64_t v70 = v69;
      unint64_t v71 = (void *)swift_allocObject();
      _OWORD v71[2] = v34;
      uint64_t v72 = v87;
      v71[3] = v89;
      v71[4] = v72;
      swift_retain();
      swift_retain();
      uint64_t v73 = v31;
      static TaskPriority.userInitiated.getter();
      uint64_t v74 = v80;
      uint64_t v75 = v82;
      uint64_t v76 = v83;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(&v80[*(int *)(v32 + 20)], v31, v83);
      *uint64_t v74 = &unk_10019F550;
      v74[1] = v71;
      uint64_t v77 = (uint64_t)v81;
      sub_1001233C8((uint64_t)v74, (uint64_t)&v81[*(int *)(v98 + 36)]);
      *(void *)uint64_t v77 = v94;
      *(void *)(v77 + 8) = v66;
      *(unsigned char *)(v77 + 16) = v68 & 1;
      *(void *)(v77 + 24) = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10012342C((uint64_t)v74);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v73, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v78 = v84;
      sub_10001D6D8(v77, v84, &qword_10019F520);
      sub_1000066D4(v78, v97, &qword_10019F520);
      swift_storeEnumTagMultiPayload();
      sub_100123488();
      sub_1001235F8();
      _ConditionalContent<>.init(storage:)();
      return sub_1000067DC(v78, &qword_10019F520);
    }
  }
  else
  {
    uint64_t v53 = v93;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v93, v19, v20);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v23, v53, v20);
    sub_100006560(&qword_10019F590);
    swift_allocObject();
    sub_100123748((uint64_t)v23);
    sub_100010484(&qword_10019F598, &qword_10019F590);
    Bindable<A>.init(wrappedValue:)();
    uint64_t v54 = (int *)v91;
    uint64_t v55 = (uint64_t *)&v14[*(int *)(v91 + 36)];
    sub_100006560(&qword_1001999F0);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    *uint64_t v55 = ObservedObject.init(wrappedValue:)();
    v55[1] = v56;
    uint64_t v57 = (uint64_t *)&v14[v54[10]];
    type metadata accessor for RemoteViewConfiguration();
    sub_100123D6C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v57 = EnvironmentObject.init()();
    v57[1] = v58;
    uint64_t v59 = (uint64_t *)&v14[v54[11]];
    *uint64_t v59 = swift_getKeyPath();
    sub_100006560(qword_100198AA0);
    swift_storeEnumTagMultiPayload();
    uint64_t v60 = (uint64_t *)&v14[v54[12]];
    *uint64_t v60 = swift_getKeyPath();
    sub_100006560(&qword_100198A98);
    swift_storeEnumTagMultiPayload();
    uint64_t v61 = (uint64_t *)&v14[v54[13]];
    *uint64_t v61 = swift_getKeyPath();
    sub_100006560(&qword_100198940);
    swift_storeEnumTagMultiPayload();
    uint64_t v62 = (uint64_t *)&v14[v54[14]];
    *uint64_t v62 = swift_getKeyPath();
    swift_storeEnumTagMultiPayload();
    uint64_t v63 = v88;
    sub_10001D6D8((uint64_t)v14, v88, &qword_10019F540);
    sub_1000066D4(v63, v94, &qword_10019F540);
    swift_storeEnumTagMultiPayload();
    sub_100006560(&qword_10019F570);
    sub_100010484(&qword_10019F560, &qword_10019F540);
    sub_100123528();
    uint64_t v64 = (uint64_t)v92;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v64, v97, &qword_10019F538);
    swift_storeEnumTagMultiPayload();
    sub_100123488();
    sub_1001235F8();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v64, &qword_10019F538);
    sub_1000067DC(v63, &qword_10019F540);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v93, v29);
  }
}

uint64_t sub_100122AD0(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 32) == 1)
  {
    uint64_t v3 = *(void *)(result + 24);
    if (a2)
    {
      uint64_t v4 = *(void *)(result + 16);
      sub_1001244D4();
      swift_retain();
      sub_1000AC7F8(v4, v3, 9, a2);
      swift_release();
      return sub_1001244DC();
    }
    else
    {
      type metadata accessor for RemoteViewConfiguration();
      sub_100123D6C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      double result = EnvironmentObject.error()();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100122BD8()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = sub_100122C84;
  return sub_100124684();
}

uint64_t sub_100122C84()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006D79C, v1, v0);
}

uint64_t sub_100122DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100121E50(*v1, v1[1], v1[2], a1);
}

uint64_t sub_100122DCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100123D6C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  return sub_1000066D4(v4, a2, &qword_10019A540);
}

uint64_t sub_100122EA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000066D4(a1, (uint64_t)v6, &qword_10019A540);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100123D6C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v6, &qword_10019A540);
}

uint64_t sub_100122FE0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100123D6C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  return swift_errorRetain();
}

uint64_t sub_100123094()
{
  return swift_release();
}

uint64_t sub_100123180@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100123D6C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel);
  return swift_retain();
}

uint64_t sub_100123238()
{
  return swift_release();
}

uint64_t sub_100123320()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100010CB0;
  return sub_100122BD8();
}

uint64_t sub_1001233C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _TaskModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012342C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _TaskModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100123488()
{
  unint64_t result = qword_10019F558;
  if (!qword_10019F558)
  {
    sub_10000650C(&qword_10019F538);
    sub_100010484(&qword_10019F560, &qword_10019F540);
    sub_100123528();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F558);
  }
  return result;
}

unint64_t sub_100123528()
{
  unint64_t result = qword_10019F568;
  if (!qword_10019F568)
  {
    sub_10000650C(&qword_10019F570);
    sub_1001235A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F568);
  }
  return result;
}

unint64_t sub_1001235A4()
{
  unint64_t result = qword_10019F578;
  if (!qword_10019F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F578);
  }
  return result;
}

unint64_t sub_1001235F8()
{
  unint64_t result = qword_10019F580;
  if (!qword_10019F580)
  {
    sub_10000650C(&qword_10019F520);
    sub_1001236A4();
    sub_100123D6C(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F580);
  }
  return result;
}

unint64_t sub_1001236A4()
{
  unint64_t result = qword_10019F588;
  if (!qword_10019F588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F588);
  }
  return result;
}

uint64_t sub_1001236FC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012373C()
{
  return sub_100122AD0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_100123748(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_10019B8C0);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019AC80);
  __chkstk_darwin(v7 - 8);
  uint64_t v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019A5D0);
  uint64_t v40 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - v13;
  *((unsigned char *)v1 + *(void *)(*v1 + 112)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 128)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 136)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 144)) = 0;
  *(void *)((char *)v1 + *(void *)(*v1 + 152)) = 0;
  uint64_t v15 = (_OWORD *)((char *)v1 + *(void *)(*v1 + 160));
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  uint64_t v16 = (char *)v1 + *(void *)(*v1 + 168);
  uint64_t v17 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(void *)((char *)v2 + *(void *)(*v2 + 176)) = 0;
  *(void *)((char *)v2 + *(void *)(*v2 + 184)) = 0;
  uint64_t v18 = (char *)v2 + *(void *)(*v2 + 192);
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  *(void *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v19 = (char *)v2 + *(void *)(*v2 + 208);
  uint64_t v20 = type metadata accessor for PromotionalAssets.Video();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  ObservationRegistrar.init()();
  uint64_t v21 = (char *)v2 + *(void *)(*v2 + 104);
  uint64_t v22 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a1, v22);
  char v39 = v14;
  uint64_t v24 = (uint64_t)v36;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v41 = a1;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  sub_100123D6C(&qword_10019B8C8, (void (*)(uint64_t))&type metadata accessor for LiveMusic);
  Event<>.participants.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v40 = v9;
  v25(v11, v9);
  uint64_t v26 = Participants<>.headliners.getter();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v38);
  sub_1000AD38C(v26, v24);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for Artist();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v24, 1, v27) == 1)
  {
    sub_1000067DC(v24, &qword_10019AC80);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v29 = Artist.name.getter();
    uint64_t v30 = v31;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v27);
  }
  swift_beginAccess();
  uint64_t v32 = (uint64_t)v39;
  uint64_t v33 = sub_100123DB4((uint64_t)v39, v29, v30, &qword_1001AA3A8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v41, v22);
  v25((char *)v32, v40);
  v2[2] = v33;
  return v2;
}

uint64_t sub_100123D44()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100123D6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100123DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = sub_100006560(&qword_10019A5D0);
  v33[3] = v8;
  uint64_t v9 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  v33[4] = v9;
  uint64_t v10 = sub_100035868(v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, a1, v8);
  uint64_t v11 = (void *)*a4;
  if (!*a4) {
    goto LABEL_8;
  }
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v13 = v11[5];
  uint64_t v12 = v11[6];
  sub_100023118(v11 + 2, v13);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 152);
  swift_retain();
  uint64_t v15 = v14(v13, v12);
  uint64_t v17 = v16;
  if (v15 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 152))(v8, v9) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    swift_release();
    a2 = v29;
    a3 = v30;
LABEL_8:
    sub_1000487B4((uint64_t)v33, (uint64_t)v31);
    type metadata accessor for SetlistController();
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = sub_1000299B8((uint64_t)v31, v32);
    __n128 v23 = __chkstk_darwin(v22);
    uint64_t v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v26 + 16))(v25, v23);
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100124060((uint64_t)v25, a2, a3, v21);
    sub_100029A08((uint64_t)v31);
    swift_retain();
    swift_release();
    *a4 = v27;
    uint64_t v11 = (void *)v27;
  }
LABEL_10:
  sub_100029A08((uint64_t)v33);
  return v11;
}

uint64_t sub_100124060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100006560(&qword_10019A5D0);
  uint64_t v34 = v8;
  uint64_t v9 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  uint64_t v35 = v9;
  uint64_t v10 = sub_100035868(v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v10, a1, v8);
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(void *)(a4 + 104) = 0;
  ObservationRegistrar.init()();
  sub_1000487B4((uint64_t)v33, a4 + 16);
  *(void *)(a4 + 56) = a2;
  *(void *)(a4 + 64) = a3;
  sub_100023118(v33, v34);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - v14;
  Event<>.setlist.getter();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
    goto LABEL_8;
  }
  *((void *)&v28 + 1) = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v29 = AssociatedConformanceWitness;
  uint64_t v18 = sub_100035868((uint64_t *)&v27);
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(v18, v15, AssociatedTypeWitness);
  uint64_t v19 = *((void *)&v28 + 1);
  uint64_t v20 = v29;
  sub_100023118(&v27, *((uint64_t *)&v28 + 1));
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v19, v20);
  swift_getAssociatedTypeWitness();
  sub_100006560(&qword_10019F1E0);
  uint64_t v21 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v21 + 16))
  {
    sub_1000487B4(v21 + 32, (uint64_t)&v30);
  }
  else
  {
    uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100029A08((uint64_t)&v27);
  if (!*((void *)&v31 + 1))
  {
LABEL_8:
    sub_1000067DC((uint64_t)&v30, &qword_10019F5A0);
    sub_1000487B4((uint64_t)v33, (uint64_t)&v30);
    uint64_t v23 = *((void *)&v31 + 1);
    uint64_t v24 = v32;
    sub_100023118(&v30, *((uint64_t *)&v31 + 1));
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 240))(v23, v24))
    {
      swift_getAssociatedTypeWitness();
      sub_100006560(&qword_10019F1F0);
      uint64_t v25 = _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      if (*(void *)(v25 + 16))
      {
        sub_1000487B4(v25 + 32, (uint64_t)&v27);
      }
      else
      {
        uint64_t v29 = 0;
        long long v27 = 0u;
        long long v28 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v28 + 1))
      {
        char v22 = 1;
LABEL_16:
        sub_1000067DC((uint64_t)&v27, &qword_10019F1F8);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v29 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
    }
    char v22 = 0;
    goto LABEL_16;
  }
  sub_1000067DC((uint64_t)&v30, &qword_10019F5A0);
  sub_1000487B4((uint64_t)v33, (uint64_t)&v30);
  char v22 = 1;
LABEL_17:
  sub_100029A08((uint64_t)&v30);
  *(unsigned char *)(a4 + 113) = v22;
  *(unsigned char *)(a4 + 112) = v22;
  sub_100029A08((uint64_t)v33);
  return a4;
}

uint64_t sub_1001244D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001244DC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001244E4()
{
  return sub_100124E80(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100124500()
{
  return sub_100124D90(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10012451C()
{
  return sub_100124C70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_10012453C()
{
  unint64_t result = qword_10019F5A8;
  if (!qword_10019F5A8)
  {
    sub_10000650C(&qword_10019F5B0);
    sub_100123488();
    sub_1001235F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F5A8);
  }
  return result;
}

uint64_t sub_1001245B8@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  return sub_100079444(v3, a1);
}

uint64_t sub_100124684()
{
  v1[6] = v0;
  sub_100006560(&qword_10019A540);
  v1[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[8] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[9] = v3;
  v1[10] = v2;
  return _swift_task_switch(sub_10012474C, v3, v2);
}

uint64_t sub_10012474C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  swift_getKeyPath();
  v0[5] = v2;
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_100079444(v3, v1);
  uint64_t v4 = type metadata accessor for ArtistPromotionalAssets();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v1, 1, v4) == 1)
  {
    uint64_t v5 = v0[6];
    sub_1000067DC(v0[7], &qword_10019A540);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v6 = *(void *)(v5 + 24);
    if (*(unsigned char *)(v5 + 32))
    {
      uint64_t v8 = (void *)swift_task_alloc();
      v0[12] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_100124B50;
      return sub_1001254BC(v7, v6);
    }
    else
    {
      uint64_t v12 = (void *)swift_task_alloc();
      v0[11] = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_1001249C8;
      return sub_100124EC4(v7, v6);
    }
  }
  else
  {
    uint64_t v10 = v0[7];
    swift_release();
    sub_1000067DC(v10, &qword_10019A540);
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1001249C8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_100124AE8, v3, v2);
}

uint64_t sub_100124AE8()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100124B50()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_100126B34, v3, v2);
}

uint64_t sub_100124C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_1001269C4(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100124CDC()
{
  swift_getKeyPath();
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  swift_errorRetain();
  return v1;
}

uint64_t sub_100124D90(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = a2;
  swift_errorRetain();
  return swift_errorRelease();
}

uint64_t sub_100124DD4()
{
  return swift_retain();
}

uint64_t sub_100124E80(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_100124EC4(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_100006560(&qword_10019A540);
  v3[7] = swift_task_alloc();
  uint64_t v4 = sub_100006560(&qword_10019A5D0);
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[12] = v6;
  v3[13] = v5;
  return _swift_task_switch(sub_100124FF0, v6, v5);
}

uint64_t sub_100124FF0()
{
  sub_1001263F4();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  void *v1 = v0;
  v1[1] = sub_1001250A0;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  return Event<>.init(id:)(v2, v3, v4);
}

uint64_t sub_1001250A0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v5 = sub_100125360;
  }
  else {
    uint64_t v5 = sub_1001251DC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1001251DC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v8 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  swift_release();
  Event<>.artistPromotionalAssets.getter();
  swift_getKeyPath();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  v0[3] = v3;
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1000067DC(v4, &qword_10019A540);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100125360()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[6];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  swift_errorRetain();
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001254BC(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  sub_100006560(&qword_10019A2F8);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for EventsError();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  sub_100006560(&qword_10019A540);
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for MainActor();
  v3[20] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[21] = v7;
  v3[22] = v6;
  return _swift_task_switch(sub_100125684, v7, v6);
}

uint64_t sub_100125684()
{
  sub_1001263F4();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  void *v1 = v0;
  v1[1] = sub_100125734;
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  return ArtistPromotionalAssets.init(artistID:)(v2, v3, v4);
}

uint64_t sub_100125734()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v5 = sub_1001259E0;
  }
  else {
    uint64_t v5 = sub_100125870;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100125870()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[9];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[6] = v2;
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1000067DC(v1, &qword_10019A540);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001259E0()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 192);
  swift_errorRetain();
  sub_100006560(&qword_100199670);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 128) + 88))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    *(_DWORD *)(v0 + 224) = v1;
    if (v1 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease();
      *(void *)(v0 + 200) = static MainActor.shared.getter();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100125C8C;
      uint64_t v3 = *(void *)(v0 + 80);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v5 = *(void *)(v0 + 64);
      return sub_10012A6B0(v3, v4, v5);
    }
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 120);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 72);
  swift_errorRelease();
  swift_getKeyPath();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  *(void *)(v0 + 24) = v11;
  swift_errorRetain();
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100125C8C()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_100126174;
  }
  else {
    uint64_t v4 = sub_100125DE4;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_100125DE4()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_100125E48, v1, v2);
}

uint64_t sub_100125E48()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(unsigned int *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 72);
    sub_1000067DC(*(void *)(v0 + 80), &qword_10019A2F8);
    sub_100126A4C((unint64_t *)&qword_10019C060, (void (*)(uint64_t))&type metadata accessor for EventsError);
    uint64_t v8 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v9, v4, v5);
    swift_getKeyPath();
    uint64_t v10 = swift_task_alloc();
    *(void *)(v10 + 16) = v7;
    *(void *)(v10 + 24) = v8;
    *(void *)(v0 + 32) = v7;
    sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 72);
    sub_10008DB10(*(void *)(v0 + 80), v11);
    sub_10008DB74(v11, v12);
    sub_100006560(&qword_10019C068);
    swift_allocObject();
    uint64_t v14 = sub_10006E4B0(v12, (uint64_t)&_swiftEmptyArrayStorage);
    swift_getKeyPath();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = v14;
    *(void *)(v0 + 40) = v13;
    sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
    sub_10008DBE0(v11);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100126174()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_1001261E4, v1, v2);
}

uint64_t sub_1001261E4()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = *(unsigned int *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 72);
  sub_1000067DC(*(void *)(v0 + 80), &qword_10019A2F8);
  sub_100126A4C((unint64_t *)&qword_10019C060, (void (*)(uint64_t))&type metadata accessor for EventsError);
  uint64_t v8 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v9, v4, v5);
  swift_getKeyPath();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  *(void *)(v0 + 32) = v7;
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1001263F4()
{
  uint64_t v1 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_getKeyPath();
  uint64_t v11 = v0;
  uint64_t v12 = v3;
  uint64_t v13 = v0;
  sub_100126A4C((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1000067DC((uint64_t)v3, &qword_10019A540);
  swift_getKeyPath();
  uint64_t v9 = v0;
  uint64_t v10 = 0;
  uint64_t v13 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v7 = v0;
  uint64_t v8 = 0;
  uint64_t v13 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_100126604()
{
  sub_1001244DC();
  sub_1000067DC(v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, &qword_10019A540);
  swift_errorRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001266E8()
{
  return type metadata accessor for PromotionalAssetsController();
}

uint64_t type metadata accessor for PromotionalAssetsController()
{
  uint64_t result = qword_10019F600;
  if (!qword_10019F600) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10012673C()
{
  sub_100126820();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100126820()
{
  if (!qword_10019F610)
  {
    type metadata accessor for ArtistPromotionalAssets();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019F610);
    }
  }
}

uint64_t destroy for PromotionalAssetsController.PromotionalAssetsType()
{
  return sub_1001244DC();
}

uint64_t _s15ShazamEventsApp27PromotionalAssetsControllerC21PromotionalAssetsTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001244D4();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001244D4();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001244DC();
  return a1;
}

uint64_t assignWithTake for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001244DC();
  return a1;
}

uint64_t sub_100126978(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100126980(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsController.PromotionalAssetsType()
{
  return &type metadata for PromotionalAssetsController.PromotionalAssetsType;
}

uint64_t sub_1001269AC()
{
  return sub_100126A94();
}

uint64_t sub_1001269C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019A540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100126A34()
{
  return sub_100126AD8();
}

uint64_t sub_100126A4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100126A94()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = *(void *)(v0 + 24);
  swift_errorRetain();
  return swift_errorRelease();
}

uint64_t sub_100126AD8()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_100126B1C()
{
  return sub_10012451C();
}

void sub_100126B38()
{
  sub_100127C38();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t sub_100126C20(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1001278E4(a1);
  return v2;
}

uint64_t sub_100126C60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 200))(v2, v1, v5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = sub_1000B792C(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_100126DE0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v6 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 200);
  uint64_t v21 = (uint64_t)v0 + *(void *)(v1 + 104);
  char v22 = v9;
  ((void (*)(uint64_t, uint64_t, __n128))v9)(v3, v2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = sub_1000B81F0(AssociatedTypeWitness, AssociatedConformanceWitness);
  unint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  uint64_t v23 = v11;
  unint64_t v24 = v13;
  v15._uint64_t countAndFlagsBits = 0x20A280E220;
  v15._object = (void *)0xA500000000000000;
  String.append(_:)(v15);
  v22(v3, v2);
  uint64_t v16 = sub_1000B8598(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v17;
  v14(v8, AssociatedTypeWitness);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100126FFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  __n128 v6 = (char *)&v22 - v5;
  uint64_t v26 = sub_100126C60();
  uint64_t v27 = v7;
  v8._uint64_t countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v0 + *(void *)(*(void *)v0 + 104);
  unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
  uint64_t v25 = v9;
  uint64_t v23 = v2;
  v24(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = sub_1000B81F0(AssociatedTypeWitness, AssociatedConformanceWitness);
  unint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v6, AssociatedTypeWitness);
  v15._uint64_t countAndFlagsBits = v11;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v24(v23, v1);
  uint64_t v17 = sub_1000B8598(AssociatedTypeWitness, AssociatedConformanceWitness);
  Swift::String v19 = v18;
  v14(v6, AssociatedTypeWitness);
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return v26;
}

BOOL sub_100127230()
{
  return (sub_100083988(*(void *)(*(void *)v0 + 80), *(void *)(*(void *)v0 + 88)) & 1) == 0;
}

uint64_t sub_1001272A0()
{
  *(void *)(v1 + 16) = v0;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100127338, v3, v2);
}

uint64_t sub_100127338()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  if ((sub_100083988(*(void *)(*(void *)v1 + 80), *(void *)(*(void *)v1 + 88)) & 1) == 0) {
    sub_1001277C4();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1001273F4(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_100006560(&qword_100199238);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10014D8E0;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(v3 + 88) + 152))(*(void *)(v3 + 80));
  *(void *)(v4 + 56) = &type metadata for AnalyticsString;
  *(void *)(v4 + 64) = &off_10019BA08;
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 32) = 0;
  *(void *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v4 + 104) = &off_10019B9E0;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v4 + 144) = &off_10019BA68;
  *(unsigned char *)(v4 + 112) = 2;
  *(void *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v4 + 184) = &off_10019BA40;
  *(_OWORD *)(v4 + 152) = xmmword_100155F50;
  *(unsigned char *)(v4 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t v22 = &type metadata for AnalyticsString;
  uint64_t v23 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v20 = v7;
  uint64_t v21 = (Class (*)(uint64_t))v8;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000AB884((char *)1, 5, 1, (char *)v4);
  uint64_t v9 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  sub_1000AC33C(4, (uint64_t)v12, (uint64_t *)&v25, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v14 = v25;
  NSString v15 = String._bridgeToObjectiveC()();
  Swift::String v16 = (void *)swift_allocObject();
  v16[2] = 0xD00000000000001ELL;
  v16[3] = 0x8000000100157480;
  v16[4] = v14;
  uint64_t v23 = sub_100029A98;
  unint64_t v24 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint64_t v21 = sub_1000AB7F8;
  uint64_t v22 = (ValueMetadata *)&unk_100193320;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v17);
  swift_bridgeObjectRelease();
}

uint64_t sub_100127710()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001277C4()
{
  return static Published.subscript.setter();
}

id sub_10012787C()
{
  return sub_1000B3474(v0 + *(void *)(*(void *)v0 + 104), *(void **)(v0 + *(void *)(*(void *)v0 + 112)), *(void *)(*(void *)v0 + 80), *(char **)(*(void *)v0 + 88));
}

uint64_t sub_1001278DC()
{
  return sub_1001277C4();
}

uint64_t *sub_1001278E4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = sub_100006560(&qword_100199220);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (uint64_t)v1 + qword_10019F6C8;
  uint64_t v9 = *(void *)(v3 + 80);
  v16[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v8, v7, v4);
  uint64_t v10 = *(void *)(*v1 + 112);
  *(uint64_t *)((char *)v1 + v10) = (uint64_t)[objc_allocWithZone((Class)EKEventStore) init];
  uint64_t v11 = (uint64_t)v1 + *(void *)(*v1 + 120);
  *(void *)uint64_t v11 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v11 + 8) = v12;
  *(unsigned char *)(v11 + 16) = v13 & 1;
  *(void *)(v11 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 104), a1, v9);
  return v1;
}

uint64_t *sub_100127AB8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + qword_10019F6C8;
  uint64_t v3 = sub_100006560(&qword_100199220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100127BC8()
{
  sub_100127AB8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CalendarViewModel()
{
  return sub_1000068A4();
}

void sub_100127C38()
{
  if (!qword_100199208)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100199208);
    }
  }
}

uint64_t sub_100127C98()
{
  return 16;
}

__n128 sub_100127CA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100127CB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100127CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100127D00()
{
  return swift_release();
}

uint64_t sub_100127D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  *(void *)a7 = a1;
  char v13 = (int *)type metadata accessor for EventDetailViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(&a7[v13[9]], a2, a6);
  uint64_t v14 = &a7[v13[10]];
  *(void *)uint64_t v14 = a3;
  *((void *)v14 + 1) = a4;
  v14[16] = a5;
  NSString v15 = &a7[v13[11]];
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)NSString v15 = result;
  *((void *)v15 + 1) = v17;
  v15[16] = v18 & 1;
  *((void *)v15 + 3) = v19;
  return result;
}

uint64_t type metadata accessor for EventDetailViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_100127E00()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100127EB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    unint64_t v12 = (v10 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v11 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    unint64_t v14 = (v10 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v11 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = *(void *)(v15 + 8);
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
    *(void *)(v14 + 24) = *(void *)(v15 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_100128038(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1001280D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001281D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v9 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100128304(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v14 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = v14;
  unint64_t v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v16 = (_OWORD *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  return a1;
}

void *sub_1001283C8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001284D4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v9 = ((v7 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100128640);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 8) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void sub_100128654(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v11 = ((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v21 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x100128860);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_100128888(uint64_t a1)
{
  char v1 = sub_100083988(*(void *)(a1 + 16), *(void *)(a1 + 24));
  id v2 = [self mainBundle];
  if (v1)
  {
    unint64_t v9 = 0xE000000000000000;
    unint64_t v3 = 0x8000000100159A80;
    unint64_t v4 = 0xD00000000000001FLL;
  }
  else
  {
    unint64_t v4 = 0xD000000000000023;
    unint64_t v9 = 0xE000000000000000;
    unint64_t v3 = 0x8000000100159A50;
  }
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  uint64_t v6 = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10012896C(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  uint64_t v34 = *(void *)(a1 - 8);
  uint64_t v35 = a1;
  __chkstk_darwin(a1);
  uint64_t v33 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v9 = (char *)&v29 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  __n128 v13 = __chkstk_darwin(v12);
  int v15 = (char *)&v29 - v14;
  uint64_t v32 = v1;
  int v16 = *(void (**)(uint64_t, uint64_t, __n128))(v4 + 208);
  uint64_t v29 = v5;
  uint64_t v17 = v5;
  uint64_t v18 = v4;
  v16(v17, v4, v13);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  uint64_t v36 = v19;
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(v11, v20);
    uint64_t v23 = v24;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v11);
  }
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  uint64_t v27 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
  if (!v23) {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 160))(v29, v18);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
  return v22;
}

uint64_t sub_100128D7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v36 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v36 - v8;
  sub_100006560(&qword_10019F7E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CCD0;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_1000B7CEC(v6, AssociatedConformanceWitness);
  uint64_t v14 = v13;
  uint64_t v15 = v6;
  int v16 = (void *)inited;
  uint64_t v17 = v38;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  v16[4] = v12;
  v16[5] = v14;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(v2, v1);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v37);
  }
  else
  {
    uint64_t v19 = swift_getAssociatedConformanceWitness();
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(AssociatedTypeWitness, v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v17, AssociatedTypeWitness);
    if (v20)
    {
      id v21 = [v20 city];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      v16[6] = v22;
      v16[7] = v24;
      uint64_t v25 = v16[5];
      if (v25) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v26 = (char *)&_swiftEmptyArrayStorage;
      if (!v24) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  v16[6] = 0;
  v16[7] = 0;
  uint64_t v25 = v16[5];
  if (!v25) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v27 = v16[4];
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1000AB9A8(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v29 = *((void *)v26 + 2);
  unint64_t v28 = *((void *)v26 + 3);
  if (v29 >= v28 >> 1) {
    uint64_t v26 = sub_1000AB9A8((char *)(v28 > 1), v29 + 1, 1, v26);
  }
  *((void *)v26 + 2) = v29 + 1;
  uint64_t v30 = &v26[16 * v29];
  *((void *)v30 + 4) = v27;
  *((void *)v30 + 5) = v25;
  uint64_t v22 = v16[6];
  uint64_t v24 = v16[7];
  if (v24)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = sub_1000AB9A8(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v32 = *((void *)v26 + 2);
    unint64_t v31 = *((void *)v26 + 3);
    if (v32 >= v31 >> 1) {
      uint64_t v26 = sub_1000AB9A8((char *)(v31 > 1), v32 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v32 + 1;
    uint64_t v33 = &v26[16 * v32];
    *((void *)v33 + 4) = v22;
    *((void *)v33 + 5) = v24;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v39 = (uint64_t)v26;
  sub_100006560(&qword_10019F7D8);
  sub_10012A140();
  uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_100129274(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v48 - v6;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - v10;
  long long v52 = xmmword_10014D8E0;
  uint64_t v53 = sub_100128888(a1);
  uint64_t v54 = v12;
  uint64_t v55 = sub_10012896C(a1);
  uint64_t v56 = v13;
  (*(void (**)(uint64_t, uint64_t))(v2 + 200))(v3, v2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = sub_1000B81F0(v8, AssociatedConformanceWitness);
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v57 = v15;
  uint64_t v58 = v17;
  uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v3, v2);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v50);
  }
  else
  {
    uint64_t v19 = swift_getAssociatedConformanceWitness();
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(AssociatedTypeWitness, v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, AssociatedTypeWitness);
    if (v20)
    {
      id v21 = [v20 city];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      uint64_t v59 = v22;
      uint64_t v60 = v24;
      uint64_t v25 = v54;
      if (v54) {
        goto LABEL_8;
      }
LABEL_5:
      uint64_t v26 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v27 = v56;
      if (!v56) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v25 = v54;
  if (!v54) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v28 = v53;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1000AB9A8(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v30 = *((void *)v26 + 2);
  unint64_t v29 = *((void *)v26 + 3);
  if (v30 >= v29 >> 1) {
    uint64_t v26 = sub_1000AB9A8((char *)(v29 > 1), v30 + 1, 1, v26);
  }
  *((void *)v26 + 2) = v30 + 1;
  unint64_t v31 = &v26[16 * v30];
  *((void *)v31 + 4) = v28;
  *((void *)v31 + 5) = v25;
  uint64_t v27 = v56;
  if (v56)
  {
LABEL_11:
    uint64_t v32 = v55;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = sub_1000AB9A8(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v34 = *((void *)v26 + 2);
    unint64_t v33 = *((void *)v26 + 3);
    if (v34 >= v33 >> 1) {
      uint64_t v26 = sub_1000AB9A8((char *)(v33 > 1), v34 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v34 + 1;
    uint64_t v35 = &v26[16 * v34];
    *((void *)v35 + 4) = v32;
    *((void *)v35 + 5) = v27;
  }
LABEL_16:
  uint64_t v36 = v58;
  if (v58)
  {
    uint64_t v37 = v57;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = sub_1000AB9A8(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v39 = *((void *)v26 + 2);
    unint64_t v38 = *((void *)v26 + 3);
    if (v39 >= v38 >> 1) {
      uint64_t v26 = sub_1000AB9A8((char *)(v38 > 1), v39 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v39 + 1;
    uint64_t v40 = &v26[16 * v39];
    *((void *)v40 + 4) = v37;
    *((void *)v40 + 5) = v36;
  }
  uint64_t v41 = v60;
  if (v60)
  {
    uint64_t v42 = v59;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = sub_1000AB9A8(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v44 = *((void *)v26 + 2);
    unint64_t v43 = *((void *)v26 + 3);
    if (v44 >= v43 >> 1) {
      uint64_t v26 = sub_1000AB9A8((char *)(v43 > 1), v44 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v44 + 1;
    char v45 = &v26[16 * v44];
    *((void *)v45 + 4) = v42;
    *((void *)v45 + 5) = v41;
  }
  sub_100006560((uint64_t *)&unk_10019CD40);
  swift_arrayDestroy();
  uint64_t v51 = (uint64_t)v26;
  sub_100006560(&qword_10019F7D8);
  sub_10012A140();
  uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v46;
}

BOOL sub_100129874(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 24) + 192))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v1 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

BOOL sub_100129940(uint64_t a1)
{
  (*(void (**)(void, void))(*(void *)(a1 + 24) + 192))(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_getAssociatedTypeWitness();
  uint64_t v1 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v1 == 1;
}

uint64_t sub_1001299D0(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void sub_100129AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100006560(&qword_100199238);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014D8E0;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a4 + 24) + 152))(*(void *)(a4 + 16));
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_10019BA08;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v9;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_10019B9E0;
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v8 + 144) = &off_10019BA68;
  *(unsigned char *)(v8 + 112) = 1;
  *(void *)(v8 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v8 + 184) = &off_10019BA40;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  *(unsigned char *)(v8 + 168) = 1;
  if (*(void *)(a3 + 72))
  {
    uint64_t v11 = *(void *)(a3 + 64);
    unint64_t v12 = *(void *)(a3 + 72);
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  uint64_t v26 = &type metadata for AnalyticsString;
  uint64_t v27 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v24 = v11;
  uint64_t v25 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_1000AB884((char *)1, 5, 1, (char *)v8);
  uint64_t v13 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v17 + 16))(v16, v14);
  sub_1000AC33C(4, (uint64_t)v16, (uint64_t *)&v29, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v18 = v29;
  NSString v19 = String._bridgeToObjectiveC()();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0xD00000000000001ELL;
  v20[3] = 0x8000000100157480;
  void v20[4] = v18;
  uint64_t v27 = sub_100029A98;
  uint64_t v28 = v20;
  aBlock = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  uint64_t v25 = sub_1000AB7F8;
  uint64_t v26 = (ValueMetadata *)&unk_1001933C8;
  id v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
  swift_bridgeObjectRelease();
}

uint64_t sub_100129D8C()
{
  return swift_release();
}

void sub_100129E3C(uint64_t a1, uint64_t a2)
{
  sub_100006560(&qword_100199238);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10014D8E0;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a2 + 24) + 152))(*(void *)(a2 + 16));
  *(void *)(v4 + 56) = &type metadata for AnalyticsString;
  *(void *)(v4 + 64) = &off_10019BA08;
  *(void *)(v4 + 40) = v5;
  *(void *)(v4 + 48) = v6;
  *(unsigned char *)(v4 + 32) = 0;
  *(void *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v4 + 104) = &off_10019B9E0;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v4 + 144) = &off_10019BA68;
  *(unsigned char *)(v4 + 112) = 1;
  *(void *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v4 + 184) = &off_10019BA40;
  *(_OWORD *)(v4 + 152) = xmmword_100156050;
  *(unsigned char *)(v4 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t v22 = &type metadata for AnalyticsString;
  uint64_t v23 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v20 = v7;
  id v21 = (Class (*)(uint64_t))v8;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000AB884((char *)1, 5, 1, (char *)v4);
  uint64_t v9 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  sub_1000AC33C(4, (uint64_t)v12, (uint64_t *)&v25, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  __n128 v14 = v25;
  NSString v15 = String._bridgeToObjectiveC()();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0xD00000000000001ELL;
  v16[3] = 0x8000000100157480;
  v16[4] = v14;
  uint64_t v23 = sub_10007F494;
  uint64_t v24 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  id v21 = sub_1000AB7F8;
  uint64_t v22 = (ValueMetadata *)&unk_100193418;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v17);
  swift_bridgeObjectRelease();
}

uint64_t sub_10012A124(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012A134()
{
  return swift_release();
}

unint64_t sub_10012A140()
{
  unint64_t result = qword_10019F7E0;
  if (!qword_10019F7E0)
  {
    sub_10000650C(&qword_10019F7D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019F7E0);
  }
  return result;
}

double sub_10012A1A4()
{
  swift_getKeyPath();
  sub_10012A5A0();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 120);
}

double sub_10012A214()
{
  swift_getKeyPath();
  sub_10012A5A0();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 112);
}

uint64_t sub_10012A284(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

uint64_t sub_10012A28C(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t sub_10012A294(uint64_t a1)
{
  *(void *)(v1 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4 & 1;
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7 & 1;
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 80) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v1 + 88) = v9;
  *(unsigned char *)(v1 + 96) = v10 & 1;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 104) = v11;
  ObservationRegistrar.init()();
  sub_10012A600(a1, v1 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL);
  return v1;
}

uint64_t sub_10012A36C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000BA1D0(v0 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10012A458()
{
  return type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
}

uint64_t type metadata accessor for PromotionalAssetsPhotoEntryViewModel()
{
  uint64_t result = qword_10019F820;
  if (!qword_10019F820) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10012A4AC()
{
  sub_10002BB28();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_10012A5A0()
{
  unint64_t result = qword_10019E778;
  if (!qword_10019E778)
  {
    type metadata accessor for PromotionalAssetsPhotoEntryViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019E778);
  }
  return result;
}

uint64_t sub_10012A600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012A668()
{
  return sub_1001313B0(&qword_10019B980, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_10012A6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = sub_100006560(&qword_10019CA48);
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  sub_100006560(&qword_10019FB18);
  v3[14] = swift_task_alloc();
  uint64_t v5 = sub_100006560(&qword_10019FB20);
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  uint64_t v6 = sub_100006560(&qword_10019FB28);
  v3[18] = v6;
  v3[19] = *(void *)(v6 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v3[21] = v7;
  v3[22] = *(void *)(v7 - 8);
  v3[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MusicAuthorization.Status();
  v3[24] = v8;
  v3[25] = *(void *)(v8 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  return _swift_task_switch(sub_10012A930, 0, 0);
}

uint64_t sub_10012A930()
{
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  unint64_t v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  void *v1 = v0;
  v1[1] = sub_10012A9F8;
  uint64_t v2 = v0[27];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_10012A9F8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10012AAF4, 0, 0);
}

uint64_t sub_10012AAF4()
{
  (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for MusicAuthorization.Status.authorized(_:), v0[24]);
  sub_1001313B0(&qword_10019FB30, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  if (v0[2] == v0[4] && v0[3] == v0[5])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
LABEL_5:
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    v0[6] = MusicItemID.init(_:)();
    v0[7] = v8;
    v0[29] = type metadata accessor for Artist();
    sub_1001313B0(&qword_10019FB38, (void (*)(uint64_t))&type metadata accessor for Artist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
    sub_100006560(&qword_10019FB40);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001561A0;
    sub_100006560(&qword_10019FB48);
    *(void *)(v9 + 32) = static PartialMusicProperty<A>.topSongs.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[30] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10012AEC0;
    uint64_t v11 = v0[17];
    uint64_t v12 = v0[18];
    return MusicCatalogResourceRequest.response()(v11, v12);
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6) {
    goto LABEL_5;
  }
  uint64_t v13 = v0[8];
  uint64_t v14 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10012AEC0()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10012B22C;
  }
  else {
    uint64_t v2 = sub_10012AFD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012AFD4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  MusicCatalogResourceResponse.items.getter();
  sub_1000AD124(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 112);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_1000067DC(v10, &qword_10019FB18);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 112);
    sub_10012D39C(*(uint64_t **)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v12);
    uint64_t v11 = 0;
  }
  uint64_t v20 = *(void *)(v0 + 64);
  uint64_t v21 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, v11, 1, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10012B22C()
{
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10012B300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  sub_100006560(&qword_100198630);
  v5[20] = swift_task_alloc();
  sub_100006560(&qword_10019B8D0);
  v5[21] = swift_task_alloc();
  sub_100006560(&qword_10019FB78);
  v5[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Song();
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Track();
  v5[28] = v7;
  v5[29] = *(void *)(v7 - 8);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v8 = sub_100006560(&qword_10019FB80);
  v5[33] = v8;
  v5[34] = *(void *)(v8 - 8);
  v5[35] = swift_task_alloc();
  v5[36] = sub_100006560(&qword_10019FB88);
  v5[37] = swift_task_alloc();
  sub_100006560(&qword_10019FB90);
  v5[38] = swift_task_alloc();
  sub_100006560(&qword_10019FB98);
  v5[39] = swift_task_alloc();
  uint64_t v9 = sub_100006560(&qword_10019CA68);
  v5[40] = v9;
  v5[41] = *(void *)(v9 - 8);
  v5[42] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Playlist();
  v5[43] = v10;
  v5[44] = *(void *)(v10 - 8);
  v5[45] = swift_task_alloc();
  uint64_t v11 = sub_100006560(&qword_10019FBA0);
  v5[46] = v11;
  v5[47] = *(void *)(v11 - 8);
  v5[48] = swift_task_alloc();
  uint64_t v12 = sub_100006560(&qword_10019FBA8);
  v5[49] = v12;
  v5[50] = *(void *)(v12 - 8);
  v5[51] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v5[52] = v13;
  v5[53] = *(void *)(v13 - 8);
  v5[54] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for MusicAuthorization.Status();
  v5[55] = v14;
  v5[56] = *(void *)(v14 - 8);
  v5[57] = swift_task_alloc();
  v5[58] = swift_task_alloc();
  return _swift_task_switch(sub_10012B824, 0, 0);
}

uint64_t sub_10012B824()
{
  (*(void (**)(void, void, void))(v0[53] + 104))(v0[54], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[52]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  void *v1 = v0;
  v1[1] = sub_10012B8EC;
  uint64_t v2 = v0[58];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_10012B8EC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10012B9E8, 0, 0);
}

uint64_t sub_10012B9E8()
{
  (*(void (**)(void, void, void))(v0[56] + 104))(v0[57], enum case for MusicAuthorization.Status.authorized(_:), v0[55]);
  sub_1001313B0(&qword_10019FB30, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[57];
  uint64_t v1 = v0[58];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[56];
  if (v0[10] == v0[6] && v0[11] == v0[7])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
LABEL_5:
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    v0[8] = MusicItemID.init(_:)();
    v0[9] = v8;
    sub_1001313B0(&qword_10019FBB0, (void (*)(uint64_t))&type metadata accessor for Playlist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
    sub_100006560(&qword_10019FB40);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001561A0;
    sub_100006560(&qword_10019FBB8);
    *(void *)(v9 + 32) = static PartialMusicProperty<A>.tracks.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[60] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10012BF04;
    uint64_t v11 = v0[48];
    uint64_t v12 = v0[49];
    return MusicCatalogResourceRequest.response()(v11, v12);
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6) {
    goto LABEL_5;
  }
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10003345C(v13, (uint64_t)qword_1001AA440);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Authorization Error fetching playlist.", v16, 2u);
    swift_slowDealloc();
  }
  uint64_t v17 = v0[15];

  uint64_t v18 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10012BF04()
{
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10012CA7C;
  }
  else {
    uint64_t v2 = sub_10012C018;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012C018()
{
  uint64_t v103 = v0;
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v4 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  MusicCatalogResourceResponse.items.getter();
  sub_1000AD1CC(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1, v2) == 1)
  {
    sub_1000067DC(v0[39], &qword_10019FB98);
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10003345C(v7, (uint64_t)qword_1001AA440);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[50];
    uint64_t v12 = v0[51];
    uint64_t v14 = v0[48];
    uint64_t v13 = v0[49];
    uint64_t v16 = v0[46];
    uint64_t v15 = v0[47];
    unint64_t v17 = v0[17];
    if (v10)
    {
      uint64_t v90 = v0[16];
      uint64_t v100 = v0[49];
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      v0[12] = sub_10004D828(v90, v17, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not find playlist for id %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v100);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    }
    uint64_t v22 = v0[15];
    uint64_t v23 = type metadata accessor for AppleMusicSetlist();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  }
  else
  {
    uint64_t v19 = v0[38];
    uint64_t v21 = v0[33];
    uint64_t v20 = v0[34];
    (*(void (**)(void, void, void))(v0[44] + 32))(v0[45], v0[39], v0[43]);
    Playlist.tracks.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v19, 1, v21) == 1)
    {
      sub_1000067DC(v0[38], &qword_10019FB90);
      uint64_t v93 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v24 = v0[36];
      uint64_t v25 = v0[37];
      uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 16);
      v87(v0[35], v0[38], v0[33]);
      sub_100010484(&qword_10019FBC0, &qword_10019FB80);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v98 = (uint64_t *)(v25 + *(int *)(v24 + 36));
      uint64_t v26 = *v98;
      sub_100010484(&qword_10019FBC8, &qword_10019FB80);
      dispatch thunk of Collection.endIndex.getter();
      if (v26 == v0[13])
      {
        uint64_t v93 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v45 = v0[29];
        uint64_t v46 = v0[24];
        uint64_t v85 = (void (**)(uint64_t, uint64_t))(v0[34] + 8);
        uint64_t v86 = (void (**)(uint64_t))(v45 + 16);
        uint64_t v83 = (uint64_t (**)(uint64_t, uint64_t))(v45 + 88);
        uint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
        int v82 = enum case for Track.song(_:);
        uint64_t v77 = (void (**)(void, uint64_t))(v45 + 96);
        uint64_t v78 = v46;
        uint64_t v92 = (void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32);
        uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
        uint64_t v80 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
        uint64_t v93 = _swiftEmptyArrayStorage;
        uint64_t v81 = (void (**)(void, uint64_t))(v45 + 8);
        do
        {
          uint64_t v49 = v0[37];
          uint64_t v50 = v0[35];
          uint64_t v52 = v0[32];
          uint64_t v51 = v0[33];
          uint64_t v95 = v0[31];
          uint64_t v97 = v0[30];
          uint64_t v53 = v0[28];
          uint64_t v54 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v55 = *v86;
          (*v86)(v52);
          v54(v0 + 2, 0);
          v87(v50, v49, v51);
          dispatch thunk of Collection.formIndex(after:)();
          (*v85)(v50, v51);
          (*v84)(v95, v52, v53);
          ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v97, v95, v53);
          int v56 = (*v83)(v97, v53);
          uint64_t v57 = v0[30];
          uint64_t v58 = v0[28];
          if (v56 == v82)
          {
            uint64_t v59 = v0[26];
            uint64_t v61 = v0[22];
            uint64_t v60 = v0[23];
            (*v77)(v0[30], v58);
            uint64_t v62 = *v92;
            (*v92)(v59, v57, v60);
            v62(v61, v59, v60);
            (*v80)(v61, 0, 1, v60);
            uint64_t v63 = *v81;
          }
          else
          {
            uint64_t v65 = v0[22];
            uint64_t v64 = v0[23];
            uint64_t v63 = *v81;
            (*v81)(v0[30], v58);
            (*v80)(v65, 1, 1, v64);
          }
          uint64_t v66 = v0[22];
          uint64_t v67 = v0[23];
          v63(v0[31], v0[28]);
          if ((*v79)(v66, 1, v67) == 1)
          {
            sub_1000067DC(v0[22], &qword_10019FB78);
            uint64_t v47 = v98;
          }
          else
          {
            uint64_t v68 = v0[27];
            uint64_t v69 = v0[25];
            uint64_t v70 = v0[23];
            unint64_t v71 = *v92;
            (*v92)(v68, v0[22], v70);
            v71(v69, v68, v70);
            uint64_t v47 = v98;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v72 = (unint64_t)v93;
            }
            else {
              unint64_t v72 = sub_1000ABAB8(0, v93[2] + 1, 1, (unint64_t)v93);
            }
            unint64_t v74 = *(void *)(v72 + 16);
            unint64_t v73 = *(void *)(v72 + 24);
            if (v74 >= v73 >> 1) {
              unint64_t v72 = sub_1000ABAB8(v73 > 1, v74 + 1, 1, v72);
            }
            uint64_t v75 = v0[25];
            uint64_t v76 = v0[23];
            *(void *)(v72 + 16) = v74 + 1;
            uint64_t v93 = (void *)v72;
            v71(v72+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v74, v75, v76);
          }
          uint64_t v48 = *v47;
          dispatch thunk of Collection.endIndex.getter();
        }
        while (v48 != v0[13]);
      }
      uint64_t v27 = v0[38];
      uint64_t v28 = v0[33];
      uint64_t v29 = v0[34];
      sub_1000067DC(v0[37], &qword_10019FB88);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }
    uint64_t v30 = v0[50];
    uint64_t v94 = v0[49];
    uint64_t v96 = v0[51];
    uint64_t v31 = v0[47];
    uint64_t v32 = v0[45];
    uint64_t v33 = v0[46];
    uint64_t v35 = v0[43];
    uint64_t v34 = v0[44];
    uint64_t v37 = v0[20];
    uint64_t v36 = v0[21];
    uint64_t v91 = v0[19];
    uint64_t v88 = v0[48];
    uint64_t v89 = v0[18];
    unint64_t v38 = (void *)v0[15];
    Playlist.artwork.getter();
    Playlist.url.getter();
    uint64_t v39 = Playlist.standardDescription.getter();
    uint64_t v99 = v40;
    uint64_t v101 = v39;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v35);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v88, v33);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v96, v94);
    *unint64_t v38 = v89;
    v38[1] = v91;
    v38[2] = v93;
    uint64_t v41 = (int *)type metadata accessor for AppleMusicSetlist();
    sub_10001D6D8(v36, (uint64_t)v38 + v41[6], &qword_10019B8D0);
    sub_10001D6D8(v37, (uint64_t)v38 + v41[7], &qword_100198630);
    uint64_t v42 = (void *)((char *)v38 + v41[8]);
    *uint64_t v42 = v101;
    v42[1] = v99;
    (*(void (**)(void *, void, uint64_t, int *))(*((void *)v41 - 1) + 56))(v38, 0, 1, v41);
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

uint64_t sub_10012CA7C()
{
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[14] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching apple music setlist. Error: %@", v4, 0xCu);
    sub_100006560(&qword_10019ABB8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[50];
  uint64_t v7 = v0[51];
  uint64_t v9 = v0[49];
  uint64_t v10 = v0[15];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v11 = type metadata accessor for AppleMusicSetlist();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_10012CDD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v5 - 8);
  uint64_t v27 = (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Artwork();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v24 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019B8D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v0 + 32);
  Swift::UInt v13 = *(void *)(v12 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v22 = v3;
    uint64_t v23 = v2;
    uint64_t v14 = *(void *)(type metadata accessor for Song() - 8);
    uint64_t v15 = v12 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(v14 + 72);
    sub_1001313B0(&qword_10019F950, (void (*)(uint64_t))&type metadata accessor for Song);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v3 = v22;
    uint64_t v2 = v23;
  }
  uint64_t v17 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  sub_1000066D4(v1 + *(int *)(v17 + 28), (uint64_t)v11, &qword_10019B8D0);
  uint64_t v18 = v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v11, v7);
    Hasher._combine(_:)(1u);
    sub_1001313B0(&qword_10019F960, (void (*)(uint64_t))&type metadata accessor for Artwork);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v7);
  }
  uint64_t v20 = v27;
  sub_1000066D4(v1 + *(int *)(v17 + 32), v27, &qword_100198630);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v20, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v21 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v25, v20, v2);
    Hasher._combine(_:)(1u);
    sub_1001313B0(&qword_10019FAC0, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v21, v2);
  }
}

uint64_t sub_10012D2B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10012D2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000066D4(v2 + *(int *)(a1 + 28), a2, &qword_10019B8D0);
}

Swift::Int sub_10012D30C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10012D350()
{
  return Hasher._finalize()();
}

uint64_t sub_10012D38C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10012D39C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_10019B8D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Song();
  uint64_t v46 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019FB50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Artist.id.getter();
  uint64_t v14 = v13;
  uint64_t v15 = Artist.name.getter();
  uint64_t v40 = v16;
  Artist.topSongs.getter();
  uint64_t v17 = sub_100006560(&qword_10019FB58);
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v17);
  uint64_t v42 = v14;
  uint64_t v43 = v12;
  uint64_t v41 = v15;
  if (v19 == 1)
  {
    sub_1000067DC((uint64_t)v11, &qword_10019FB50);
    uint64_t v20 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_11:
    uint64_t v29 = v40;
    sub_100006560(&qword_10019FB60);
    swift_allocObject();
    MusicAttributeProperty.init(_:)();
    Artist.subscript.getter();
    swift_release();
    uint64_t v30 = type metadata accessor for AppleMusicFetcher.MusicArtist();
    Artist.url.getter();
    uint64_t v31 = v42;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = v41;
    a1[3] = v29;
    a1[4] = (uint64_t)v20;
    return sub_10001D6D8((uint64_t)v6, (uint64_t)a1 + *(int *)(v30 + 28), &qword_10019B8D0);
  }
  uint64_t v35 = v18;
  uint64_t v36 = v6;
  uint64_t v21 = sub_100010484(&qword_10019FB68, &qword_10019FB58);
  uint64_t v22 = dispatch thunk of Collection.count.getter();
  uint64_t v20 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v37 = v17;
  unint64_t v38 = v11;
  if (!v22)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v37);
    uint64_t v6 = v36;
    goto LABEL_11;
  }
  uint64_t v23 = v22;
  uint64_t v48 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_10012F5EC(0, v22 & ~(v22 >> 63), 0);
  uint64_t v20 = v48;
  uint64_t v34 = v21;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v23 & 0x8000000000000000) == 0)
  {
    v32[1] = v2;
    uint64_t v33 = a1;
    uint64_t v44 = v46 + 32;
    uint64_t v45 = (void (**)(char *))(v46 + 16);
    uint64_t v25 = v39;
    do
    {
      uint64_t v26 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v45)(v8);
      v26(v47, 0);
      uint64_t v48 = v20;
      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1)
      {
        sub_10012F5EC(v27 > 1, v28 + 1, 1);
        uint64_t v20 = v48;
      }
      void v20[2] = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v28, v8, v25);
      dispatch thunk of Collection.formIndex(after:)();
      --v23;
    }
    while (v23);
    a1 = v33;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012D854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100006560(&qword_10019FB08);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Song.previewAssets.getter();
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = type metadata accessor for PreviewAsset();
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v4, v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for PreviewAsset();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_1000067DC((uint64_t)v4, &qword_10019FB08);
LABEL_7:
    uint64_t v10 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  PreviewAsset.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v4, v8);
}

uint64_t sub_10012DA6C()
{
  uint64_t v0 = type metadata accessor for ContentRating();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v25 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100006560(&qword_10019FAF0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019FAF8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v24 - v14;
  Song.contentRating.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v12, enum case for ContentRating.explicit(_:), v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v0);
  uint64_t v16 = (uint64_t)&v6[*(int *)(v4 + 56)];
  sub_1000066D4((uint64_t)v15, (uint64_t)v6, &qword_10019FAF8);
  sub_1000066D4((uint64_t)v12, v16, &qword_10019FAF8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) == 1)
  {
    sub_1000067DC((uint64_t)v12, &qword_10019FAF8);
    sub_1000067DC((uint64_t)v15, &qword_10019FAF8);
    int v18 = v17(v16, 1, v0);
    if (v18 == 1) {
      int v19 = &qword_10019FAF8;
    }
    else {
      int v19 = &qword_10019FAF0;
    }
    if (v18 == 1) {
      char v20 = -1;
    }
    else {
      char v20 = 0;
    }
  }
  else
  {
    sub_1000066D4((uint64_t)v6, (uint64_t)v9, &qword_10019FAF8);
    if (v17(v16, 1, v0) == 1)
    {
      sub_1000067DC((uint64_t)v12, &qword_10019FAF8);
      sub_1000067DC((uint64_t)v15, &qword_10019FAF8);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
      char v20 = 0;
      int v19 = &qword_10019FAF0;
    }
    else
    {
      uint64_t v21 = v25;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v25, v16, v0);
      sub_1001313B0(&qword_10019FB00, (void (*)(uint64_t))&type metadata accessor for ContentRating);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v1 + 8);
      v22(v21, v0);
      int v19 = &qword_10019FAF8;
      sub_1000067DC((uint64_t)v12, &qword_10019FAF8);
      sub_1000067DC((uint64_t)v15, &qword_10019FAF8);
      v22(v9, v0);
    }
  }
  sub_1000067DC((uint64_t)v6, v19);
  return v20 & 1;
}

uint64_t sub_10012DE54()
{
  return Song.duration.getter();
}

uint64_t sub_10012DE78(uint64_t a1)
{
  *(void *)(a1 + 16) = sub_1001313B0(&qword_10019F950, (void (*)(uint64_t))&type metadata accessor for Song);
  uint64_t result = sub_1001313B0(&qword_10019F958, (void (*)(uint64_t))&type metadata accessor for Song);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10012DF04(uint64_t a1)
{
  uint64_t result = sub_1001313B0(&qword_10019F960, (void (*)(uint64_t))&type metadata accessor for Artwork);
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleMusicFetcher()
{
  return &type metadata for AppleMusicFetcher;
}

uint64_t *sub_10012DF6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    a1[4] = a2[4];
    uint64_t v11 = type metadata accessor for Artwork();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22(v10, 1, v11))
    {
      uint64_t v13 = sub_100006560(&qword_10019B8D0);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100006560(&qword_100198630);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t sub_10012E218(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Artwork();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *sub_10012E3A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  uint64_t v7 = *(int *)(a3 + 28);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100006560(&qword_10019B8D0);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100006560(&qword_100198630);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10012E5F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_10019B8D0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_100006560(&qword_100198630);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_10012E910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Artwork();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100006560(&qword_10019B8D0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100006560(&qword_100198630);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10012EB28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Artwork();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100006560(&qword_10019B8D0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 32);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  int v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_100006560(&qword_100198630);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_10012EE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012EE34);
}

uint64_t sub_10012EE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_10019B8D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198630);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10012EF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012EF7C);
}

uint64_t sub_10012EF7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_10019B8D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198630);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicFetcher.MusicArtist()
{
  uint64_t result = qword_10019F9C0;
  if (!qword_10019F9C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10012F0FC()
{
  sub_100084EFC(319, (unint64_t *)&unk_10019B940, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v0 <= 0x3F)
  {
    sub_100084EFC(319, (unint64_t *)&qword_1001993B0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10012F218()
{
  return sub_1001313B0(&qword_10019FA08, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
}

uint64_t sub_10012F260(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001313B0(&qword_10019FA50, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  uint64_t result = sub_1001313B0(&qword_10019FA58, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10012F2E4()
{
  return sub_1001313B0(&qword_10019B988, (void (*)(uint64_t))&type metadata accessor for Song);
}

uint64_t sub_10012F32C(uint64_t a1)
{
  uint64_t result = sub_1001313B0(&qword_10019FA90, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10012F384()
{
  return sub_1001313B0(&qword_10019FA98, (void (*)(uint64_t))type metadata accessor for AppleMusicFetcher.MusicArtist);
}

uint64_t sub_10012F3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Song();
  __chkstk_darwin(v4);
  __n128 v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v24 = 1;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
      int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v13 = v6 + 16;
      uint64_t v32 = v7;
      uint64_t v33 = v14;
      uint64_t v15 = (v12 + 32) & ~v12;
      uint64_t v16 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v30 = v16;
      uint64_t v31 = (void (**)(uint64_t, uint64_t))(v13 - 8);
      uint64_t v17 = v11 - 1;
      uint64_t v18 = v7;
      do
      {
        uint64_t v19 = a1;
        uint64_t v20 = v10;
        uint64_t v21 = v10;
        int v22 = v33;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v20, a1 + v15, v4, v8);
        uint64_t v23 = a2;
        v22(v18, a2 + v15, v4);
        uint64_t v10 = v21;
        sub_1001313B0(&qword_10019FAE8, (void (*)(uint64_t))&type metadata accessor for Song);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v31;
        (*v31)(v18, v4);
        v25((uint64_t)v21, v4);
        BOOL v27 = v17-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v15 += v30;
        a2 = v23;
        a1 = v19;
      }
      while (v27);
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t sub_10012F5EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10012F7F4(a1, a2, a3, (void *)*v3, &qword_10019C9F0, (uint64_t (*)(void))&type metadata accessor for Song);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10012F628(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10012F668(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10012F648(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10012FA3C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10012F668(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006560(qword_10019FBF8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012F7D4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_10012F7F4(a1, a2, a3, a4, &qword_10019C9E0, (uint64_t (*)(void))&type metadata accessor for Genre);
}

uint64_t sub_10012F7F4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006560(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  int v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012FA3C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006560(&qword_10019C9E8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012FBA8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006560(&qword_10019C9D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_10012FD14(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v63 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v57 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v60 = sub_100006560(&qword_10019FAC8);
  __chkstk_darwin(v60);
  int64_t v7 = &v52[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v8 - 8);
  uint64_t v58 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v61 = &v52[-v11];
  __chkstk_darwin(v12);
  uint64_t v62 = &v52[-v13];
  uint64_t v14 = type metadata accessor for Artwork();
  uint64_t v64 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v59 = &v52[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_100006560(&qword_10019FAD0);
  __chkstk_darwin(v16);
  uint64_t v18 = &v52[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = sub_100006560(&qword_10019B8D0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = &v52[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  char v24 = &v52[-v23];
  __chkstk_darwin(v25);
  BOOL v27 = &v52[-v26];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v28 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]
      || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v30 & 1) != 0))
    {
      if (sub_10012F3CC(a1[4], a2[4]))
      {
        uint64_t v55 = v7;
        uint64_t v56 = v4;
        uint64_t v31 = type metadata accessor for AppleMusicFetcher.MusicArtist();
        sub_1000066D4((uint64_t)a1 + *(int *)(v31 + 28), (uint64_t)v27, &qword_10019B8D0);
        uint64_t v54 = v31;
        sub_1000066D4((uint64_t)a2 + *(int *)(v31 + 28), (uint64_t)v24, &qword_10019B8D0);
        uint64_t v32 = (uint64_t)&v18[*(int *)(v16 + 48)];
        sub_1000066D4((uint64_t)v27, (uint64_t)v18, &qword_10019B8D0);
        sub_1000066D4((uint64_t)v24, v32, &qword_10019B8D0);
        uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
        if (v33((uint64_t)v18, 1, v14) == 1)
        {
          sub_1000067DC((uint64_t)v24, &qword_10019B8D0);
          sub_1000067DC((uint64_t)v27, &qword_10019B8D0);
          if (v33(v32, 1, v14) == 1)
          {
            sub_1000067DC((uint64_t)v18, &qword_10019B8D0);
LABEL_15:
            uint64_t v39 = v54;
            uint64_t v40 = (uint64_t)a1 + *(int *)(v54 + 32);
            uint64_t v41 = v62;
            sub_1000066D4(v40, (uint64_t)v62, &qword_100198630);
            uint64_t v42 = v61;
            sub_1000066D4((uint64_t)a2 + *(int *)(v39 + 32), (uint64_t)v61, &qword_100198630);
            uint64_t v43 = (uint64_t)v55;
            uint64_t v44 = (uint64_t)&v55[*(int *)(v60 + 48)];
            sub_1000066D4((uint64_t)v41, (uint64_t)v55, &qword_100198630);
            sub_1000066D4((uint64_t)v42, v44, &qword_100198630);
            uint64_t v45 = v63;
            uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
            uint64_t v47 = v56;
            if (v46(v43, 1, v56) == 1)
            {
              sub_1000067DC((uint64_t)v42, &qword_100198630);
              sub_1000067DC((uint64_t)v41, &qword_100198630);
              if (v46(v44, 1, v47) == 1)
              {
                sub_1000067DC(v43, &qword_100198630);
                return 1;
              }
            }
            else
            {
              uint64_t v48 = v58;
              sub_1000066D4(v43, (uint64_t)v58, &qword_100198630);
              if (v46(v44, 1, v47) != 1)
              {
                uint64_t v49 = v57;
                (*(void (**)(unsigned char *, uint64_t, uint64_t))(v45 + 32))(v57, v44, v47);
                sub_1001313B0(&qword_10019FAD8, (void (*)(uint64_t))&type metadata accessor for URL);
                char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v51 = *(void (**)(unsigned char *, uint64_t))(v45 + 8);
                v51(v49, v47);
                sub_1000067DC((uint64_t)v42, &qword_100198630);
                sub_1000067DC((uint64_t)v41, &qword_100198630);
                v51(v48, v47);
                sub_1000067DC(v43, &qword_100198630);
                return (v50 & 1) != 0;
              }
              sub_1000067DC((uint64_t)v42, &qword_100198630);
              sub_1000067DC((uint64_t)v41, &qword_100198630);
              (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v48, v47);
            }
            uint64_t v34 = &qword_10019FAC8;
            uint64_t v35 = v43;
            goto LABEL_21;
          }
LABEL_13:
          uint64_t v34 = &qword_10019FAD0;
          uint64_t v35 = (uint64_t)v18;
LABEL_21:
          sub_1000067DC(v35, v34);
          return 0;
        }
        sub_1000066D4((uint64_t)v18, (uint64_t)v21, &qword_10019B8D0);
        if (v33(v32, 1, v14) == 1)
        {
          sub_1000067DC((uint64_t)v24, &qword_10019B8D0);
          sub_1000067DC((uint64_t)v27, &qword_10019B8D0);
          (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v21, v14);
          goto LABEL_13;
        }
        uint64_t v36 = v64;
        uint64_t v37 = v59;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v64 + 32))(v59, v32, v14);
        sub_1001313B0(&qword_10019FAE0, (void (*)(uint64_t))&type metadata accessor for Artwork);
        int v53 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v36 + 8);
        v38(v37, v14);
        sub_1000067DC((uint64_t)v24, &qword_10019B8D0);
        sub_1000067DC((uint64_t)v27, &qword_10019B8D0);
        v38(v21, v14);
        sub_1000067DC((uint64_t)v18, &qword_10019B8D0);
        if (v53) {
          goto LABEL_15;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001304FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100131358(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of ArtistFilter.id.getter, a2);
}

uint64_t sub_100130514@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100131358(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of PlaylistFilter.id.getter, a2);
}

uint64_t sub_10013052C(uint64_t a1)
{
  v1[12] = a1;
  v1[13] = sub_100006560(&qword_10019FB58);
  v1[14] = swift_task_alloc();
  uint64_t v2 = sub_100006560(&qword_10019FBD8);
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v3 = sub_100006560(&qword_10019FBE0);
  v1[18] = v3;
  v1[19] = *(void *)(v3 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MusicDataRequest.ExecutionMethod();
  v1[21] = v4;
  v1[22] = *(void *)(v4 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MusicAuthorization.Status();
  v1[24] = v5;
  v1[25] = *(void *)(v5 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10013074C, 0, 0);
}

uint64_t sub_10013074C()
{
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter();
  unint64_t v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  void *v1 = v0;
  v1[1] = sub_100130814;
  uint64_t v2 = v0[27];
  return static MusicAuthorization.request()(v2);
}

uint64_t sub_100130814()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100130910, 0, 0);
}

uint64_t sub_100130910()
{
  (*(void (**)(void, void, void))(v0[25] + 104))(v0[26], enum case for MusicAuthorization.Status.authorized(_:), v0[24]);
  sub_1001313B0(&qword_10019FB30, (void (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  if (v0[7] == v0[9] && v0[8] == v0[10])
  {
    swift_bridgeObjectRelease_n();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v5(v2, v3);
    v5(v1, v3);
    goto LABEL_5;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6)
  {
LABEL_5:
    uint64_t v8 = v0[12];
    swift_getKeyPath();
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = v0[12] + 32;
      swift_bridgeObjectRetain();
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      do
      {
        sub_1000487B4(v10, (uint64_t)(v0 + 2));
        uint64_t v13 = v0[5];
        uint64_t v14 = v0[6];
        sub_100023118(v0 + 2, v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
        uint64_t v17 = v16;
        sub_100029A08((uint64_t)(v0 + 2));
        if (v17)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = sub_1000AB9A8(0, *((void *)v11 + 2) + 1, 1, v11);
          }
          unint64_t v19 = *((void *)v11 + 2);
          unint64_t v18 = *((void *)v11 + 3);
          if (v19 >= v18 >> 1) {
            uint64_t v11 = sub_1000AB9A8((char *)(v18 > 1), v19 + 1, 1, v11);
          }
          *((void *)v11 + 2) = v19 + 1;
          uint64_t v12 = &v11[16 * v19];
          *((void *)v12 + 4) = v15;
          *((void *)v12 + 5) = v17;
        }
        v10 += 40;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      int64_t v20 = *((void *)v11 + 2);
      if (!v20) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      int64_t v20 = _swiftEmptyArrayStorage[2];
      if (!v20)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        type metadata accessor for Song();
        sub_1001313B0(&qword_10019FBE8, (void (*)(uint64_t))&type metadata accessor for Song);
        MusicCatalogResourceRequest.init<A>(matching:memberOf:)();
        char v28 = (void *)swift_task_alloc();
        v0[29] = v28;
        void *v28 = v0;
        v28[1] = sub_100130E80;
        uint64_t v29 = v0[17];
        uint64_t v30 = v0[18];
        return MusicCatalogResourceRequest.response()(v29, v30);
      }
    }
    sub_10012F628(0, v20, 0);
    uint64_t v21 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = MusicItemID.init(_:)();
      uint64_t v24 = v23;
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        sub_10012F628(v25 > 1, v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      BOOL v27 = (char *)&_swiftEmptyArrayStorage[2 * v26];
      *((void *)v27 + 4) = v22;
      *((void *)v27 + 5) = v24;
      v21 += 16;
      --v20;
    }
    while (v20);
    goto LABEL_21;
  }
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10003345C(v31, (uint64_t)qword_1001AA440);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Authorization Error fetching songs.", v34, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(void *))v0[1];
  return v35(_swiftEmptyArrayStorage);
}

uint64_t sub_100130E80()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001310DC;
  }
  else {
    uint64_t v2 = sub_100130F94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100130F94()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];
  MusicCatalogResourceResponse.items.getter();
  sub_100010484(&qword_10019FBF0, &qword_10019FB58);
  uint64_t v7 = dispatch thunk of Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_1001310DC()
{
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching songs for setlists. Error: %@", v4, 0xCu);
    sub_100006560(&qword_10019ABB8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[19];
  uint64_t v7 = v0[20];
  uint64_t v9 = v0[18];

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(&_swiftEmptyArrayStorage);
}

uint64_t sub_100131340@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100131358(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_100131358@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100023118(a1, v5);
  uint64_t result = a2(v5, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_1001313B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001313F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  State.init(wrappedValue:)();
  *(unsigned char *)(a5 + 32) = v7;
  *(void *)(a5 + 40) = v8;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  swift_getWitnessTable();
  return Bindable<A>.init(wrappedValue:)();
}

uint64_t type metadata accessor for PhoneWallpapersWatchFacesView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001315B8()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

unsigned char *storeEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001316D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesConfiguration()
{
  return &type metadata for PhoneWallpapersWatchFacesConfiguration;
}

uint64_t sub_100131710()
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for WatchFacesViewModel();
    uint64_t result = type metadata accessor for Bindable();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_100131818(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v19 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v11 = type metadata accessor for Bindable();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v12(v19, v10, v11);
    uint64_t v13 = *(int *)(a3 + 64);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    type metadata accessor for WatchFacesViewModel();
    uint64_t v16 = type metadata accessor for Bindable();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_1001319B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 64);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_100131AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 60);
  uint64_t v17 = a1 + v8;
  uint64_t v9 = a2 + v8;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v10 = type metadata accessor for Bindable();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v11(v17, v9, v10);
  uint64_t v12 = *(int *)(a3 + 64);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_100131BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 64);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v13 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100131D4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 60);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v10 = type metadata accessor for Bindable();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 64);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v14 = type metadata accessor for Bindable();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t sub_100131E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  uint64_t v8 = *(int *)(a3 + 60);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v11 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 64);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for WatchFacesViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_100131F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100131F90);
}

uint64_t sub_100131F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 60);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      type metadata accessor for WatchFacesViewModel();
      uint64_t v13 = type metadata accessor for Bindable();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 64);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1001320E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001320F8);
}

uint64_t sub_1001320F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 60);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      type metadata accessor for WatchFacesViewModel();
      uint64_t v13 = type metadata accessor for Bindable();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 64);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

unint64_t sub_100132250()
{
  unint64_t result = qword_10019FC80;
  if (!qword_10019FC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FC80);
  }
  return result;
}

uint64_t sub_1001322A4()
{
  type metadata accessor for WatchFacesViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_1001322F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v25 = a2;
  uint64_t v3 = a1[4];
  uint64_t v22 = a1[2];
  uint64_t v23 = v3;
  type metadata accessor for PhoneWallpaperView();
  uint64_t v4 = a1[3];
  uint64_t v21 = a1[5];
  type metadata accessor for WatchFacesView();
  type metadata accessor for _ConditionalContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - v7;
  sub_10000650C(&qword_10019FC88);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v20 - v14);
  uint64_t v26 = v22;
  uint64_t v27 = v4;
  uint64_t v28 = v23;
  uint64_t v29 = v21;
  uint64_t v30 = v24;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10000C060();
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = sub_100010484(&qword_10019FC90, &qword_10019FC88);
  uint64_t v31 = WitnessTable;
  uint64_t v32 = v17;
  swift_getWitnessTable();
  sub_1000508C8(v15, v12, v9);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  sub_1000508C8(v25, v15, v9);
  return ((uint64_t (*)(void *, uint64_t))v18)(v15, v9);
}

uint64_t sub_100132658@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v72 = a6;
  uint64_t v11 = type metadata accessor for Optional();
  __chkstk_darwin(v11 - 8);
  int v53 = (char *)&v50 - v12;
  uint64_t v58 = a5;
  uint64_t v13 = type metadata accessor for WatchFacesView();
  uint64_t v56 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v55 = (char **)((char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v54 = (char **)((char *)&v50 - v16);
  uint64_t v17 = type metadata accessor for Optional();
  __chkstk_darwin(v17 - 8);
  char v50 = (char *)&v50 - v18;
  uint64_t v19 = a4;
  uint64_t v20 = type metadata accessor for PhoneWallpaperView();
  uint64_t v52 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char **)((char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  uint64_t v51 = (char **)((char *)&v50 - v24);
  uint64_t v73 = v13;
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  uint64_t v70 = *(void *)(v25 - 8);
  uint64_t v71 = v25;
  __chkstk_darwin(v25);
  uint64_t v69 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v66 = (char *)&v50 - v28;
  uint64_t v29 = (char *)a1[1];
  uint64_t v62 = *a1;
  uint64_t v30 = a1[3];
  uint64_t v61 = a1[2];
  uint64_t v32 = (char *)a1[5];
  LOBYTE(v88) = *((unsigned char *)a1 + 32);
  char v31 = (char)v88;
  uint64_t v89 = v32;
  uint64_t v67 = v30;
  swift_bridgeObjectRetain();
  uint64_t v68 = v29;
  swift_bridgeObjectRetain();
  sub_100006560(&qword_10019FC98);
  State.projectedValue.getter();
  uint64_t v65 = v79;
  uint64_t v59 = v80;
  int v60 = v81;
  type metadata accessor for RemoteViewConfiguration();
  sub_100135550((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t v64 = EnvironmentObject.init()();
  uint64_t v57 = v33;
  LOBYTE(v79) = v31;
  uint64_t v80 = v32;
  State.wrappedValue.getter();
  uint64_t v63 = v20;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v81 = v19;
  uint64_t v82 = v58;
  if (v88)
  {
    type metadata accessor for PhoneWallpapersWatchFacesView();
    sub_1001322A4();
    uint64_t v34 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, char *))(*((void *)a3 - 1) + 56))(v53, 1, 1, a3);
    uint64_t v35 = v55;
    sub_100015134(v34, (uint64_t)v55);
    uint64_t v36 = v73;
    swift_getWitnessTable();
    uint64_t v37 = v54;
    sub_1000508C8(v54, v35, v36);
    unint64_t v38 = *(void (**)(void *, uint64_t))(v56 + 8);
    v38(v35, v36);
    sub_1000508C8(v35, v37, v36);
    swift_getWitnessTable();
    uint64_t v39 = v66;
    sub_100050C2C((uint64_t)v35, v20, v36);
    v38(v35, v36);
    v38(v37, v36);
  }
  else
  {
    type metadata accessor for PhoneWallpapersWatchFacesView();
    sub_1001315B8();
    uint64_t v40 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v50, 1, 1, a2);
    sub_10000AF88(v40, (uint64_t)v22);
    swift_getWitnessTable();
    uint64_t v41 = v51;
    sub_1000508C8(v51, v22, v20);
    uint64_t v42 = *(void (**)(void *, uint64_t))(v52 + 8);
    v42(v22, v20);
    sub_1000508C8(v22, v41, v20);
    swift_getWitnessTable();
    uint64_t v39 = v66;
    sub_100050B34((uint64_t)v22, v20);
    v42(v22, v20);
    v42(v41, v20);
  }
  uint64_t v79 = v62;
  uint64_t v80 = v68;
  uint64_t v81 = v61;
  uint64_t v82 = v67;
  uint64_t v83 = v65;
  uint64_t v84 = v59;
  char v85 = v60;
  uint64_t v86 = v64;
  uint64_t v87 = v57;
  uint64_t v88 = &v79;
  uint64_t v44 = v70;
  uint64_t v43 = v71;
  uint64_t v45 = v69;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v69, v39, v71);
  uint64_t v89 = v45;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v78[0] = &type metadata for PhoneWallpapersWatchFacesHeader;
  v78[1] = v43;
  unint64_t v76 = sub_100134ECC();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v74 = WitnessTable;
  uint64_t v75 = v47;
  uint64_t v77 = swift_getWitnessTable();
  sub_100050970((uint64_t *)&v88, 2uLL, (uint64_t)v78);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  v48(v39, v43);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48(v45, v43);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_100132EFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_10019A648);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019A650);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019FCA8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019FCB0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static HorizontalAlignment.leading.getter();
  *((void *)v6 + 1) = 0;
  unsigned char v6[16] = 0;
  uint64_t v18 = sub_100006560(&qword_10019FCB8);
  sub_100133220(v2, (uint64_t)&v6[*(int *)(v18 + 44)]);
  uint64_t v19 = static Alignment.leading.getter();
  sub_100052B90(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v19, v20);
  sub_1000067DC((uint64_t)v6, &qword_10019A648);
  LOBYTE(v6) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_1000066D4((uint64_t)v9, (uint64_t)v13, &qword_10019A650);
  uint64_t v29 = &v13[*(int *)(v11 + 44)];
  *uint64_t v29 = (char)v6;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_1000067DC((uint64_t)v9, &qword_10019A650);
  LOBYTE(v6) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_1000066D4((uint64_t)v13, (uint64_t)v17, &qword_10019FCA8);
  unint64_t v38 = &v17[*(int *)(v15 + 44)];
  *unint64_t v38 = (char)v6;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_1000067DC((uint64_t)v13, &qword_10019FCA8);
  LOBYTE(v6) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_1000066D4((uint64_t)v17, a1, &qword_10019FCB0);
  uint64_t v47 = a1 + *(int *)(sub_100006560(&qword_10019FCC0) + 36);
  *(unsigned char *)uint64_t v47 = (_BYTE)v6;
  *(void *)(v47 + 8) = v40;
  *(void *)(v47 + 16) = v42;
  *(void *)(v47 + 24) = v44;
  *(void *)(v47 + 32) = v46;
  *(unsigned char *)(v47 + 40) = 0;
  return sub_1000067DC((uint64_t)v17, &qword_10019FCB0);
}

uint64_t sub_100133220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100006560(&qword_10019FCC8);
  __chkstk_darwin(v4 - 8);
  uint64_t v75 = (uint64_t *)((char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = sub_100006560(&qword_10019FCD0);
  __chkstk_darwin(v74);
  uint64_t v76 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v88 = (uint64_t)&v70 - v8;
  long long v97 = *(_OWORD *)(a1 + 32);
  char v98 = *(unsigned char *)(a1 + 48);
  long long v94 = *(_OWORD *)(a1 + 32);
  char v95 = *(unsigned char *)(a1 + 48);
  sub_100006560(&qword_10019FCD8);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v86 = Text.font(_:)();
  uint64_t v92 = v14;
  int v16 = v15;
  uint64_t v87 = v17;
  swift_release();
  sub_1000065A4(v9, v11, v13);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v85 = swift_getKeyPath();
  sub_10001D6D8(a1 + 16, (uint64_t)v96, (uint64_t *)&unk_10019CD40);
  sub_10001D6D8((uint64_t)v96, (uint64_t)&v99, (uint64_t *)&unk_10019CD40);
  uint64_t v18 = v100;
  if (v100)
  {
    LODWORD(v71) = v16;
    uint64_t v77 = a1;
    uint64_t v19 = v99;
    long long v94 = v97;
    char v95 = v98;
    Binding.wrappedValue.getter();
    sub_100133A4C(v19, v18, v93);
    uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v22 = v21;
    char v24 = v23 & 1;
    static Font.subheadline.getter();
    static Font.Weight.regular.getter();
    Font.weight(_:)();
    swift_release();
    uint64_t v25 = Text.font(_:)();
    uint64_t v27 = v26;
    char v29 = v28;
    swift_release();
    sub_1000065A4(v20, v22, v24);
    swift_bridgeObjectRelease();
    if (qword_1001980A0 != -1) {
      swift_once();
    }
    *(void *)&long long v94 = qword_1001AA348;
    swift_retain();
    uint64_t v84 = Text.foregroundStyle<A>(_:)();
    uint64_t v83 = v30;
    uint64_t v82 = v31;
    uint64_t v78 = v32 & 1;
    sub_1000065A4(v25, v27, v29 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v81 = swift_getKeyPath();
    uint64_t v80 = swift_getKeyPath();
    unsigned __int8 v33 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v79 = v34;
    uint64_t v90 = v35;
    uint64_t v73 = v36;
    uint64_t v72 = v37;
    uint64_t v89 = v33;
    uint64_t v38 = 2;
    a1 = v77;
    LOBYTE(v16) = v71;
  }
  else
  {
    uint64_t v84 = 0;
    uint64_t v83 = 0;
    uint64_t v78 = 0;
    uint64_t v82 = 0;
    uint64_t v81 = 0;
    uint64_t v38 = 0;
    uint64_t v80 = 0;
    uint64_t v89 = 0;
    uint64_t v79 = 0;
    uint64_t v90 = 0;
    uint64_t v73 = 0;
    uint64_t v72 = 0;
  }
  char v39 = v16 & 1;
  LODWORD(v77) = v16 & 1;
  uint64_t v40 = static VerticalAlignment.center.getter();
  uint64_t v41 = (uint64_t)v75;
  *uint64_t v75 = v40;
  *(void *)(v41 + 8) = 0x4020000000000000;
  *(unsigned char *)(v41 + 16) = 0;
  uint64_t v42 = sub_100006560(&qword_10019FCE0);
  sub_100133B4C(a1, (char *)(v41 + *(int *)(v42 + 44)));
  char v43 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = v76;
  sub_1000066D4(v41, v76, &qword_10019FCC8);
  uint64_t v53 = v52 + *(int *)(v74 + 36);
  *(unsigned char *)uint64_t v53 = v43;
  *(void *)(v53 + 8) = v45;
  *(void *)(v53 + 16) = v47;
  *(void *)(v53 + 24) = v49;
  *(void *)(v53 + 32) = v51;
  *(unsigned char *)(v53 + 40) = 0;
  sub_1000067DC(v41, &qword_10019FCC8);
  uint64_t v54 = v88;
  sub_10001D6D8(v52, v88, &qword_10019FCD0);
  sub_1000066D4(v54, v52, &qword_10019FCD0);
  uint64_t v55 = v86;
  uint64_t v56 = v92;
  *(void *)a2 = v86;
  *(void *)(a2 + 8) = v56;
  *(unsigned char *)(a2 + 16) = v39;
  uint64_t v57 = KeyPath;
  *(void *)(a2 + 24) = v87;
  *(void *)(a2 + 32) = v57;
  *(void *)(a2 + 40) = 2;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v85;
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t v58 = v83;
  *(void *)(a2 + 72) = v84;
  *(void *)(a2 + 80) = v58;
  uint64_t v59 = v82;
  *(void *)(a2 + 88) = v78;
  *(void *)(a2 + 96) = v59;
  *(void *)(a2 + 104) = v81;
  *(void *)(a2 + 112) = v38;
  uint64_t v60 = v80;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = v60;
  uint64_t v61 = v89;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = v61;
  uint64_t v89 = v61;
  uint64_t v71 = v38;
  uint64_t v62 = v90;
  *(void *)(a2 + 152) = v79;
  *(void *)(a2 + 160) = v62;
  uint64_t v90 = v62;
  uint64_t v63 = v72;
  *(void *)(a2 + 168) = v73;
  *(void *)(a2 + 176) = v63;
  *(unsigned char *)(a2 + 184) = 0;
  uint64_t v64 = sub_100006560(&qword_10019FCE8);
  sub_1000066D4(v52, a2 + *(int *)(v64 + 64), &qword_10019FCD0);
  sub_100010924(v55, v92, v77);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v65 = v84;
  uint64_t v66 = v83;
  char v67 = v78;
  uint64_t v68 = v82;
  sub_1000C42C0(v84, v83, v78, v82);
  sub_1000067DC(v88, &qword_10019FCD0);
  sub_1000067DC(v52, &qword_10019FCD0);
  sub_1000C4324(v65, v66, v67, v68);
  sub_1000065A4(v86, v92, v77);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100133A4C(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  if (a3)
  {
    unint64_t v8 = 0x8000000100159B50;
    unint64_t v7 = 0xD000000000000029;
  }
  else
  {
    unint64_t v7 = 0xD00000000000002DLL;
    unint64_t v8 = 0x8000000100159B80;
  }
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v7);
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_100133B4C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v49 = type metadata accessor for PlainButtonStyle();
  uint64_t v54 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019FCF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019FCF8);
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v39 - v12;
  __chkstk_darwin(v13);
  int v15 = (char *)&v39 - v14;
  __chkstk_darwin(v16);
  uint64_t v53 = (char *)&v39 - v17;
  uint64_t v18 = swift_allocObject();
  long long v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v18 + 64) = v19;
  *(void *)(v18 + 80) = *(void *)(a1 + 64);
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v18 + 32) = v20;
  uint64_t v56 = a1;
  sub_1001352DC(a1);
  uint64_t v48 = sub_100006560(&qword_10019FD00);
  unint64_t v47 = sub_100135344();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v45 = sub_100010484(&qword_10019FD40, &qword_10019FCF0);
  uint64_t v44 = sub_100135550(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v21 = v15;
  char v39 = v15;
  uint64_t v22 = v49;
  View.buttonStyle<A>(_:)();
  char v23 = *(void (**)(char *, uint64_t))(v54 + 8);
  v54 += 8;
  char v43 = v23;
  v23(v4, v22);
  char v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6 + 8;
  uint64_t v42 = v24;
  v24(v8, v5);
  uint64_t v25 = v46;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v40(v53, v21, v9);
  uint64_t v26 = swift_allocObject();
  long long v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v26 + 64) = v27;
  *(void *)(v26 + 80) = *(void *)(a1 + 64);
  long long v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v26 + 32) = v28;
  uint64_t v55 = a1;
  sub_1001352DC(a1);
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  char v29 = v50;
  View.buttonStyle<A>(_:)();
  v43(v4, v22);
  v42(v8, v5);
  uint64_t v30 = v39;
  v40(v39, v29, v9);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  char v32 = v29;
  unsigned __int8 v33 = v53;
  v31(v29, v53, v9);
  uint64_t v34 = v51;
  v31(v51, v30, v9);
  uint64_t v35 = v52;
  v31(v52, v32, v9);
  uint64_t v36 = sub_100006560(&qword_10019FD48);
  v31(&v35[*(int *)(v36 + 48)], v34, v9);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v25 + 8);
  v37(v30, v9);
  v37(v33, v9);
  v37(v34, v9);
  return ((uint64_t (*)(char *, uint64_t))v37)(v32, v9);
}

uint64_t sub_1001340F8(uint64_t *a1)
{
  sub_100006560(&qword_10019FCD8);
  Binding.wrappedValue.setter();
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    swift_retain();
    sub_1000AC4E4(v3, v4, 8, 10, 19, 0, 3u, v2);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100135550((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001341F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v77 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v77);
  uint64_t v79 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v75);
  uint64_t v78 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100006560(&qword_10019FD00);
  __chkstk_darwin(v76);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  LODWORD(v74) = v15;
  uint64_t v71 = v16;
  swift_release();
  sub_1000065A4(v7, v9, v11);
  swift_bridgeObjectRelease();
  long long v100 = *(_OWORD *)(a1 + 32);
  char v101 = *(unsigned char *)(a1 + 48);
  long long v85 = *(_OWORD *)(a1 + 32);
  LOBYTE(v86) = *(unsigned char *)(a1 + 48);
  sub_100006560(&qword_10019FCD8);
  Binding.wrappedValue.getter();
  if (v99)
  {
    uint64_t v17 = static Color.primary.getter();
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1001AA338;
    swift_retain();
  }
  *(void *)&long long v85 = v17;
  char v18 = v74 & 1;
  uint64_t v19 = Text.foregroundStyle<A>(_:)();
  uint64_t v73 = v20;
  uint64_t v74 = v19;
  char v22 = v21;
  uint64_t v72 = v23;
  sub_1000065A4(v12, v14, v18);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v25 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v70 = v27;
  uint64_t v71 = v26;
  uint64_t v68 = v29;
  uint64_t v69 = v28;
  char v30 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  char v39 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  long long v85 = v100;
  LOBYTE(v86) = v101;
  Binding.wrappedValue.getter();
  if (v99)
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v48 = qword_1001AA338;
    swift_retain();
  }
  else
  {
    uint64_t v48 = static Color.primary.getter();
  }
  char v84 = v22 & 1;
  char v83 = 0;
  char v82 = 0;
  char v81 = 0;
  char v99 = 0;
  char v49 = static Edge.Set.all.getter();
  *(void *)&long long v85 = v74;
  *((void *)&v85 + 1) = v73;
  LOBYTE(v86) = v22 & 1;
  *((void *)&v86 + 1) = v72;
  *(void *)&long long v87 = KeyPath;
  *((void *)&v87 + 1) = 1;
  LOBYTE(v88) = 0;
  BYTE8(v88) = v25;
  *(void *)&long long v89 = v71;
  *((void *)&v89 + 1) = v70;
  *(void *)&long long v90 = v69;
  *((void *)&v90 + 1) = v68;
  LOBYTE(v91) = 0;
  BYTE8(v91) = v30;
  *(void *)&long long v92 = v32;
  *((void *)&v92 + 1) = v34;
  *(void *)&long long v93 = v36;
  *((void *)&v93 + 1) = v38;
  LOBYTE(v94) = 0;
  BYTE8(v94) = v39;
  *(void *)&long long v95 = v41;
  *((void *)&v95 + 1) = v43;
  *(void *)&long long v96 = v45;
  *((void *)&v96 + 1) = v47;
  LOBYTE(v97) = v99;
  *((void *)&v97 + 1) = v48;
  char v98 = v49;
  uint64_t v50 = v78;
  uint64_t v51 = &v78[*(int *)(v75 + 20)];
  uint64_t v52 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v53 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v51, v52, v53);
  __asm { FMOV            V0.2D, #16.0 }
  *uint64_t v50 = _Q0;
  uint64_t v59 = v79;
  sub_10001081C((uint64_t)v50, v79);
  *(_WORD *)(v59 + *(int *)(v77 + 36)) = 256;
  sub_1000066D4(v59, (uint64_t)&v6[*(int *)(v76 + 36)], &qword_100198618);
  long long v60 = v96;
  *((_OWORD *)v6 + 10) = v95;
  *((_OWORD *)v6 + 11) = v60;
  *((_OWORD *)v6 + 12) = v97;
  v6[208] = v98;
  long long v61 = v92;
  *((_OWORD *)v6 + 6) = v91;
  *((_OWORD *)v6 + 7) = v61;
  long long v62 = v94;
  *((_OWORD *)v6 + 8) = v93;
  *((_OWORD *)v6 + 9) = v62;
  long long v63 = v88;
  *((_OWORD *)v6 + 2) = v87;
  *((_OWORD *)v6 + 3) = v63;
  long long v64 = v90;
  *((_OWORD *)v6 + 4) = v89;
  *((_OWORD *)v6 + 5) = v64;
  long long v65 = v86;
  *(_OWORD *)uint64_t v6 = v85;
  *((_OWORD *)v6 + 1) = v65;
  sub_100135604((uint64_t)&v85);
  sub_1000067DC(v59, &qword_100198618);
  sub_100010934((uint64_t)v50);
  sub_100135660((uint64_t)&v85);
  return sub_10001D6D8((uint64_t)v6, v80, &qword_10019FD00);
}

uint64_t sub_100134790(uint64_t *a1)
{
  sub_100006560(&qword_10019FCD8);
  Binding.wrappedValue.setter();
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    swift_retain();
    sub_1000AC4E4(v3, v4, 8, 10, 20, 0, 3u, v2);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100135550((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100134890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v77 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v77);
  uint64_t v79 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v75);
  uint64_t v78 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100006560(&qword_10019FD00);
  __chkstk_darwin(v76);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v12 = Text.font(_:)();
  uint64_t v14 = v13;
  LODWORD(v74) = v15;
  uint64_t v71 = v16;
  swift_release();
  sub_1000065A4(v7, v9, v11);
  swift_bridgeObjectRelease();
  long long v100 = *(_OWORD *)(a1 + 32);
  char v101 = *(unsigned char *)(a1 + 48);
  long long v85 = *(_OWORD *)(a1 + 32);
  LOBYTE(v86) = *(unsigned char *)(a1 + 48);
  sub_100006560(&qword_10019FCD8);
  Binding.wrappedValue.getter();
  if (v99 == 1)
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1001AA338;
    swift_retain();
  }
  else
  {
    uint64_t v17 = static Color.primary.getter();
  }
  *(void *)&long long v85 = v17;
  char v18 = v74 & 1;
  uint64_t v19 = Text.foregroundStyle<A>(_:)();
  uint64_t v73 = v20;
  uint64_t v74 = v19;
  char v22 = v21;
  uint64_t v72 = v23;
  sub_1000065A4(v12, v14, v18);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v25 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v70 = v27;
  uint64_t v71 = v26;
  uint64_t v68 = v29;
  uint64_t v69 = v28;
  char v30 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  char v39 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  long long v85 = v100;
  LOBYTE(v86) = v101;
  Binding.wrappedValue.getter();
  if (v99 == 1)
  {
    uint64_t v48 = static Color.primary.getter();
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v48 = qword_1001AA338;
    swift_retain();
  }
  char v84 = v22 & 1;
  char v83 = 0;
  char v82 = 0;
  char v81 = 0;
  char v99 = 0;
  char v49 = static Edge.Set.all.getter();
  *(void *)&long long v85 = v74;
  *((void *)&v85 + 1) = v73;
  LOBYTE(v86) = v22 & 1;
  *((void *)&v86 + 1) = v72;
  *(void *)&long long v87 = KeyPath;
  *((void *)&v87 + 1) = 1;
  LOBYTE(v88) = 0;
  BYTE8(v88) = v25;
  *(void *)&long long v89 = v71;
  *((void *)&v89 + 1) = v70;
  *(void *)&long long v90 = v69;
  *((void *)&v90 + 1) = v68;
  LOBYTE(v91) = 0;
  BYTE8(v91) = v30;
  *(void *)&long long v92 = v32;
  *((void *)&v92 + 1) = v34;
  *(void *)&long long v93 = v36;
  *((void *)&v93 + 1) = v38;
  LOBYTE(v94) = 0;
  BYTE8(v94) = v39;
  *(void *)&long long v95 = v41;
  *((void *)&v95 + 1) = v43;
  *(void *)&long long v96 = v45;
  *((void *)&v96 + 1) = v47;
  LOBYTE(v97) = v99;
  *((void *)&v97 + 1) = v48;
  char v98 = v49;
  uint64_t v50 = v78;
  uint64_t v51 = &v78[*(int *)(v75 + 20)];
  uint64_t v52 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v53 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v51, v52, v53);
  __asm { FMOV            V0.2D, #16.0 }
  *uint64_t v50 = _Q0;
  uint64_t v59 = v79;
  sub_10001081C((uint64_t)v50, v79);
  *(_WORD *)(v59 + *(int *)(v77 + 36)) = 256;
  sub_1000066D4(v59, (uint64_t)&v6[*(int *)(v76 + 36)], &qword_100198618);
  long long v60 = v96;
  *((_OWORD *)v6 + 10) = v95;
  *((_OWORD *)v6 + 11) = v60;
  *((_OWORD *)v6 + 12) = v97;
  v6[208] = v98;
  long long v61 = v92;
  *((_OWORD *)v6 + 6) = v91;
  *((_OWORD *)v6 + 7) = v61;
  long long v62 = v94;
  *((_OWORD *)v6 + 8) = v93;
  *((_OWORD *)v6 + 9) = v62;
  long long v63 = v88;
  *((_OWORD *)v6 + 2) = v87;
  *((_OWORD *)v6 + 3) = v63;
  long long v64 = v90;
  *((_OWORD *)v6 + 4) = v89;
  *((_OWORD *)v6 + 5) = v64;
  long long v65 = v86;
  *(_OWORD *)uint64_t v6 = v85;
  *((_OWORD *)v6 + 1) = v65;
  sub_100135604((uint64_t)&v85);
  sub_1000067DC(v59, &qword_100198618);
  sub_100010934((uint64_t)v50);
  sub_100135660((uint64_t)&v85);
  return sub_10001D6D8((uint64_t)v6, v80, &qword_10019FD00);
}

uint64_t sub_100134E34@<X0>(uint64_t a1@<X8>)
{
  return sub_100132EFC(a1);
}

uint64_t sub_100134E78()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100134EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100132658(*(uint64_t **)(v1 + 48), *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

unint64_t sub_100134ECC()
{
  unint64_t result = qword_10019FCA0;
  if (!qword_10019FCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FCA0);
  }
  return result;
}

uint64_t destroy for PhoneWallpapersWatchFacesHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesHeader()
{
  return &type metadata for PhoneWallpapersWatchFacesHeader;
}

uint64_t sub_100135154()
{
  return swift_getWitnessTable();
}

uint64_t sub_10013529C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001352CC()
{
  return sub_1001340F8((uint64_t *)(v0 + 16));
}

uint64_t sub_1001352D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001341F4(*(void *)(v1 + 16), a1);
}

uint64_t sub_1001352DC(uint64_t a1)
{
  return a1;
}

unint64_t sub_100135344()
{
  unint64_t result = qword_10019FD08;
  if (!qword_10019FD08)
  {
    sub_10000650C(&qword_10019FD00);
    sub_1001353E4();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FD08);
  }
  return result;
}

unint64_t sub_1001353E4()
{
  unint64_t result = qword_10019FD10;
  if (!qword_10019FD10)
  {
    sub_10000650C(&qword_10019FD18);
    sub_1001354D0(&qword_10019FD20, &qword_10019FD28, (void (*)(void))sub_1001354A8);
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FD10);
  }
  return result;
}

uint64_t sub_1001354A8()
{
  return sub_1001354D0(&qword_10019FD30, &qword_10019FD38, (void (*)(void))sub_1000F89F8);
}

uint64_t sub_1001354D0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100135550(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013559C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001355F4()
{
  return sub_100134790((uint64_t *)(v0 + 16));
}

uint64_t sub_1001355FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100134890(*(void *)(v1 + 16), a1);
}

uint64_t sub_100135604(uint64_t a1)
{
  return a1;
}

uint64_t sub_100135660(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001356BC()
{
  return sub_1001354D0(&qword_10019FD50, &qword_10019FCC0, (void (*)(void))sub_1001356F8);
}

uint64_t sub_1001356F8()
{
  return sub_1001354D0(&qword_10019FD58, &qword_10019FCB0, (void (*)(void))sub_100135720);
}

uint64_t sub_100135720()
{
  return sub_1001354D0(&qword_10019FD60, &qword_10019FCA8, (void (*)(void))sub_100135748);
}

unint64_t sub_100135748()
{
  unint64_t result = qword_10019FD68;
  if (!qword_10019FD68)
  {
    sub_10000650C(&qword_10019A650);
    sub_100010484(&qword_10019FD70, &qword_10019A648);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FD68);
  }
  return result;
}

uint64_t *sub_1001357E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    char v10 = (uint64_t *)((char *)a1 + v9);
    char v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    *char v10 = v12;
    v10[1] = v13;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10013590C(uint64_t a1)
{
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

void *sub_1001359AC(void *a1, void *a2, uint64_t a3)
{
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  swift_retain();
  return a1;
}

void *sub_100135A84(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000067DC((uint64_t)a1, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  return a1;
}

char *sub_100135B88(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100135C5C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000067DC((uint64_t)a1, qword_100198AA0);
    uint64_t v6 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DismissAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)&a1[v8] = *(void *)v10;
  swift_release();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  return a1;
}

uint64_t sub_100135D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100135D74);
}

uint64_t sub_100135D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100006560(&qword_100198648);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100135E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100135E58);
}

uint64_t sub_100135E58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100006560(&qword_100198648);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for ErrorView()
{
  uint64_t result = qword_10019FDD0;
  if (!qword_10019FDD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100135F64()
{
  sub_1000364F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100135FF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100136014()
{
  uint64_t v0 = static HorizontalAlignment.center.getter();
  sub_1001361D0((uint64_t)&v10);
  *(void *)&long long v4 = v0;
  *((void *)&v4 + 1) = 0x4034000000000000;
  v5[0] = 0;
  *(_OWORD *)&v5[8] = v10;
  v5[24] = v11;
  *(void *)&long long v6 = *((void *)&v11 + 1);
  BYTE8(v6) = v12[0];
  long long v7 = *(_OWORD *)&v12[8];
  *(void *)uint64_t v8 = *(void *)&v12[24];
  *(_OWORD *)&_OWORD v8[8] = v13;
  *(void *)&v8[24] = v14;
  v9[0] = BYTE8(v14);
  *(_OWORD *)&unsigned char v9[8] = v15;
  v9[24] = v16[0];
  sub_100006560(&qword_10019FE10);
  sub_100006560(&qword_10019FE18);
  sub_100010484(&qword_10019FE20, &qword_10019FE10);
  uint64_t v1 = sub_10000650C(&qword_10019FE28);
  unint64_t v2 = sub_100136D38();
  *(void *)&long long v10 = v1;
  *((void *)&v10 + 1) = v2;
  swift_getOpaqueTypeConformance2();
  View.toolbar<A>(content:)();
  long long v15 = *(_OWORD *)&v8[16];
  v16[0] = *(_OWORD *)v9;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v9[9];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v5[16];
  *(_OWORD *)&v12[16] = v6;
  long long v13 = v7;
  long long v14 = *(_OWORD *)v8;
  long long v10 = v4;
  long long v11 = *(_OWORD *)v5;
  return sub_100136E14((uint64_t)&v10);
}

uint64_t sub_1001361D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v39 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v36 = v40;
  int v35 = v41;
  uint64_t v34 = v42;
  int v33 = v43;
  uint64_t v31 = v45;
  uint64_t v32 = v44;
  uint64_t v38 = static Color.secondary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  LocalizedStringKey.init(_:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  uint64_t v11 = Text.foregroundColor(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  sub_1000065A4(v6, v8, v10 & 1);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v16 = Text.font(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  uint64_t v22 = v21;
  swift_release();
  char v23 = v20 & 1;
  sub_1000065A4(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = v38;
  uint64_t v26 = v36;
  uint64_t v27 = KeyPath;
  *(void *)a1 = v39;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v35;
  *(void *)(a1 + 24) = v34;
  *(unsigned char *)(a1 + 32) = v33;
  uint64_t v28 = v31;
  *(void *)(a1 + 40) = v32;
  *(void *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 88) = v23;
  *(void *)(a1 + 96) = v22;
  *(void *)(a1 + 104) = v24;
  *(unsigned char *)(a1 + 112) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100010924(v16, v18, v23);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v16, v18, v23);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013656C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[1] = a2;
  uint64_t v3 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_100006560(&qword_10019B278);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = sub_100006560(&qword_10019FE28);
  __chkstk_darwin(v23[0]);
  char v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - v11;
  if (*(void *)(a1 + *(int *)(type metadata accessor for ErrorView() + 20)))
  {
    swift_retain();
    char v13 = sub_100116888();
    uint64_t v15 = v14;
    swift_release();
    if (v15 && (swift_bridgeObjectRelease(), (v13 & 1) != 0))
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = sub_100006560(&qword_10019B270);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
        uint64_t v22 = sub_100010484(&qword_10019B280, &qword_10019B278);
        uint64_t v24 = v4;
        uint64_t v25 = v22;
        swift_getOpaqueTypeConformance2();
        static ToolbarContentBuilder.buildIf<A>(_:)();
        sub_1000067DC((uint64_t)v9, &qword_10019FE28);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = static ToolbarItemPlacement.navigationBarTrailing.getter();
    __chkstk_darwin(v16);
    v23[-2] = a1;
    sub_100006560(&qword_100198620);
    sub_100010484(&qword_10019B288, &qword_100198620);
    ToolbarItem<>.init(placement:content:)();
    uint64_t v17 = sub_100010484(&qword_10019B280, &qword_10019B278);
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    uint64_t v18 = sub_100006560(&qword_10019B270);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 0, 1, v18);
    uint64_t v24 = v4;
    uint64_t v25 = v17;
    swift_getOpaqueTypeConformance2();
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_1000067DC((uint64_t)v9, &qword_10019FE28);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_6:
    sub_100136D38();
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    return sub_1000067DC((uint64_t)v12, &qword_10019FE28);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100025BB4();
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1001369F4()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - v5;
  sub_10001D698((uint64_t)&v10 - v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  unint64_t v7 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v8 + v7, v3, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return Button.init(action:label:)();
}

uint64_t sub_100136B98@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(_:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100136C10()
{
  return NavigationStack.init<>(root:)();
}

uint64_t sub_100136D30()
{
  return sub_100136014();
}

unint64_t sub_100136D38()
{
  unint64_t result = qword_10019FE30;
  if (!qword_10019FE30)
  {
    sub_10000650C(&qword_10019FE28);
    sub_10000650C(&qword_10019B278);
    sub_100010484(&qword_10019B280, &qword_10019B278);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FE30);
  }
  return result;
}

uint64_t sub_100136E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10013656C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100136E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);
  swift_release();
  swift_release();
  swift_release();
  sub_1000065A4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100136E9C()
{
  return sub_1001369F4();
}

uint64_t sub_100136EA4()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100136F34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100136F60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100136F8C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100136FB8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100136FE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100137010@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10013703C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_100137064()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_10013708C()
{
  return sub_100010484(&qword_10019FE38, qword_10019FE40);
}

uint64_t sub_1001370C8()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    sub_10013B070();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v4 <= 0x3F)
      {
        uint64_t v0 = type metadata accessor for ObservationRegistrar();
        if (v5 <= 0x3F) {
          return swift_initClassMetadata2();
        }
      }
    }
  }
  return v0;
}

BOOL sub_1001372F4()
{
  sub_1001375EC();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_10013745C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v5 = __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 64))(v2, v1, v5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_1001375EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v9 - 8);
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - v11;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v10);
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  }
  else
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, AssociatedTypeWitness);
    if (v14)
    {
      uint64_t v23 = v14;
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t v15 = v12;
      Collection.first.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v8) != 1)
      {
        uint64_t v19 = swift_getAssociatedConformanceWitness();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v8, v19);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v8);
        return v17;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v9);
    }
  }
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_100137A04()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - v3;
  sub_10013A784((uint64_t)&v9 - v3);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v4, AssociatedTypeWitness);
  }
  return v6;
}

double sub_100137C7C()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 144));
}

uint64_t sub_100137D04()
{
  uint64_t v0 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_10013A240();
  sub_10013A2C8();
  sub_10013A358((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_1000067DC((uint64_t)v2, &qword_100198948);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v3);
  sub_10013B82C((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, v3);
}

uint64_t sub_100137F64()
{
  if (sub_1001372F4() || (sub_10013950C() & 1) != 0)
  {
    char v1 = 1;
    if (sub_1001381D8()) {
      goto LABEL_8;
    }
  }
  else
  {
    char v1 = sub_100139798();
    if (sub_1001381D8())
    {
LABEL_8:
      char v2 = 0;
      return v2 & 1;
    }
  }
  if ((v1 & 1) == 0) {
    goto LABEL_8;
  }
  char v2 = *(unsigned char *)(*(void *)(v0 + 16) + 113) ^ 1;
  return v2 & 1;
}

uint64_t sub_100137FCC()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(void *)(v0 + *(void *)(*(void *)v0 + 192));
}

uint64_t sub_10013805C()
{
  return swift_release();
}

double sub_100138110()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 200));
}

uint64_t sub_100138198()
{
  return sub_10013A1A0();
}

uint64_t sub_1001381B8()
{
  return sub_10013A1A0();
}

BOOL sub_1001381D8()
{
  sub_1001382F8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v0 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_1001382F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v6);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

BOOL sub_100138564()
{
  double v0 = -sub_100139F10();
  double v1 = sub_10013A524();
  return v1 + sub_10013A5AC() <= v0;
}

uint64_t sub_1001385A0@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 208);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001386FC()
{
  return sub_10013A1A0();
}

BOOL sub_10013871C()
{
  sub_10013881C((uint64_t)&v6);
  if (v7)
  {
    sub_1000358CC(&v6, (uint64_t)v8);
    uint64_t v0 = v9;
    uint64_t v1 = v10;
    sub_100023118(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
    swift_getAssociatedTypeWitness();
    sub_100006560(&qword_1001997C0);
    uint64_t v2 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    BOOL v4 = v3 != 0;
    sub_100029A08((uint64_t)v8);
  }
  else
  {
    sub_1000067DC((uint64_t)&v6, &qword_10019C5D0);
    return 0;
  }
  return v4;
}

uint64_t sub_10013881C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_getKeyPath();
  sub_10013B82C(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_1000066D4(v3 + 72, a1, &qword_10019C5D0);
}

uint64_t sub_1001388E8()
{
  if (sub_1001372F4() || sub_1001381D8() || (sub_10013950C() & 1) != 0) {
    int v0 = 0;
  }
  else {
    int v0 = sub_100139798() ^ 1;
  }
  return sub_10013871C() & v0 & 1;
}

uint64_t sub_100138938()
{
  uint64_t v1 = v0;
  sub_100116888();
  if (!v2) {
    return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
  }
  uint64_t v3 = v2;
  if (!*(void *)(v2 + 16) || (unint64_t v4 = sub_1000A8164(2), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
  }
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v4);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 3:
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      break;
    default:
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v8 & 1) == 0) {
        return *(unsigned __int8 *)(*(void *)(v1 + 16) + 113);
      }
      break;
  }
  return result;
}

uint64_t sub_100138A58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_getKeyPath();
  sub_10013B82C(&qword_10019F1D8, (void (*)(uint64_t))type metadata accessor for SetlistController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + 112);
}

uint64_t sub_100138AF8()
{
  v1[2] = v0;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_100138B90, v3, v2);
}

uint64_t sub_100138B90()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  void *v1 = v0;
  v1[1] = sub_100138C24;
  return sub_1001144AC();
}

uint64_t sub_100138C24()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  return _swift_task_switch(sub_10006D79C, v3, v2);
}

uint64_t sub_100138D44()
{
  if (sub_10013950C())
  {
    int v0 = sub_100139798();
    if (sub_1001372F4()) {
      goto LABEL_6;
    }
  }
  else
  {
    int v0 = 0;
    if (sub_1001372F4()) {
      goto LABEL_6;
    }
  }
  if (!sub_1001381D8())
  {
    BOOL v1 = sub_10013871C();
    return v0 & v1 & 1;
  }
LABEL_6:
  BOOL v1 = 1;
  return v0 & v1 & 1;
}

uint64_t sub_100138DA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v6);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

uint64_t sub_100139010()
{
  uint64_t v0 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __n128 v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_10013A240();
  sub_10013A2C8();
  sub_10013A2C8();
  sub_10013A358((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_1000067DC((uint64_t)v2, &qword_100198948);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v3);
  sub_10013B82C((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, v3);
}

BOOL sub_100139280()
{
  return (sub_100138D44() & 1) == 0;
}

uint64_t sub_1001392A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v6);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_getAssociatedConformanceWitness();
LABEL_4:
    swift_getAssociatedTypeWitness();
    uint64_t v11 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_4;
  }
  return v11;
}

uint64_t sub_10013950C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v6);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_5;
  }
  v15[1] = v11;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v12 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  char v13 = v12 ^ 1;
  return v13 & 1;
}

uint64_t sub_100139798()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 56))(v2, v1, v6);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_5;
  }
  v15[1] = v11;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v12 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  char v13 = v12 ^ 1;
  return v13 & 1;
}

uint64_t sub_100139A24()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 64))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_100139A9C()
{
  return sub_100139CF0();
}

uint64_t sub_100139AA4()
{
  return sub_10013A1A0();
}

uint64_t sub_100139AC4()
{
  return sub_10013A1A0();
}

uint64_t sub_100139AE4(uint64_t a1)
{
  return sub_1000067DC(a1, &qword_100198948);
}

uint64_t sub_100139B9C()
{
  return swift_release();
}

uint64_t sub_100139C68()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t sub_100139CF0()
{
  return swift_release();
}

uint64_t sub_100139D9C()
{
  return sub_100139CF0();
}

uint64_t sub_100139DA4()
{
  uint64_t v1 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(*(void *)(v0 + 16) + 113) & 1) != 0 || (uint64_t result = sub_1001381D8(), (result))
  {
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    type metadata accessor for MainActor();
    uint64_t v6 = static MainActor.shared.getter();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = &protocol witness table for MainActor;
    sub_1000FA73C((uint64_t)v3, (uint64_t)&unk_10019FED0, v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_100139EB8()
{
  return sub_10013A1A0();
}

BOOL sub_100139ED8()
{
  double v0 = -sub_100139F10();
  return sub_10013A118() * 0.75 < v0;
}

double sub_100139F10()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_100139F98()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10013A03C()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_10013A118()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 136));
}

uint64_t sub_10013A1A0()
{
  return swift_release();
}

double sub_10013A240()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 152));
}

double sub_10013A2C8()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 160));
}

uint64_t sub_10013A358@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  return sub_1000066D4(v3, a1, &qword_100198948);
}

uint64_t sub_10013A414(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000066D4(a1, (uint64_t)v4, &qword_100198948);
  return sub_100139AE4((uint64_t)v4);
}

uint64_t sub_10013A4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 168);
  swift_beginAccess();
  sub_10013B2EC(a2, v3);
  return swift_endAccess();
}

double sub_10013A524()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 176));
}

double sub_10013A5AC()
{
  swift_getKeyPath();
  sub_100139F98();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 184));
}

uint64_t sub_10013A634(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 208);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

uint64_t sub_10013A784@<X0>(uint64_t a1@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  char v12 = (char *)&v16 - v11;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 64))(v3, v2, v10);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208))(v8, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(AssociatedTypeWitness, v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, AssociatedTypeWitness);
  uint64_t v19 = v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013AAB0()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10013AB78, v2, v1);
}

uint64_t sub_10013AB78()
{
  swift_release();
  id v1 = [self sharedInstance];
  *(void *)(v0 + 16) = 0;
  unsigned int v2 = [v1 setCategory:AVAudioSessionCategoryPlayback withOptions:1 error:v0 + 16];

  uint64_t v3 = *(void **)(v0 + 16);
  if (v2)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10003345C(v6, (uint64_t)qword_1001AA440);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received error setting playback category %@", v9, 0xCu);
      sub_100006560(&qword_10019ABB8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t *sub_10013AE2C()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104), *(void *)(v1 + 80));
  sub_1000067DC((uint64_t)v0 + *(void *)(*v0 + 168), &qword_100198948);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 208);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 216);
  uint64_t v5 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_10013B000()
{
  sub_10013AE2C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PromotionalAssetsViewModel()
{
  return sub_1000068A4();
}

void sub_10013B070()
{
  if (!qword_10019C138)
  {
    type metadata accessor for UserInterfaceSizeClass();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019C138);
    }
  }
}

uint64_t sub_10013B0C8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10013B100()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100010CB0;
  return sub_10013AAB0();
}

uint64_t sub_10013B1B4()
{
  return 16;
}

__n128 sub_10013B1C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10013B1CC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 128)) = *(unsigned char *)(v0 + 24);
}

void sub_10013B1F0(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10013A2C8();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_10013B220()
{
  return sub_100139B9C();
}

uint64_t sub_10013B24C()
{
  return 16;
}

__n128 sub_10013B258(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_10013B264()
{
  uint64_t v1 = *(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 160);
  __n128 result = *(__n128 *)(v0 + 24);
  long long v3 = *(_OWORD *)(v0 + 40);
  *(__n128 *)uint64_t v1 = result;
  *(_OWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_10013B290@<X0>(uint64_t a1@<X8>)
{
  return sub_10013A358(a1);
}

uint64_t sub_10013B2B8()
{
  return 16;
}

__n128 sub_10013B2C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10013B2D0()
{
  return sub_10013A4AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10013B2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_10013B354(double *a1@<X8>)
{
  *a1 = sub_10013A240();
}

uint64_t sub_10013B380()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B3C4()
{
  return 16;
}

__n128 sub_10013B3D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B3DC()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 152)) = result;
  return result;
}

void sub_10013B400(double *a1@<X8>)
{
  *a1 = sub_100137C7C();
}

uint64_t sub_10013B42C()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B470()
{
  return 16;
}

__n128 sub_10013B47C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B488()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 144)) = result;
  return result;
}

void sub_10013B4AC(double *a1@<X8>)
{
  *a1 = sub_10013A118();
}

uint64_t sub_10013B4D8()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B51C()
{
  return 16;
}

__n128 sub_10013B528(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B534()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 136)) = result;
  return result;
}

void sub_10013B558(double *a1@<X8>)
{
  *a1 = sub_100139F10();
}

uint64_t sub_10013B584()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B5C8()
{
  return 16;
}

__n128 sub_10013B5D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10013B5E0(double *a1@<X8>)
{
  *a1 = sub_10013A5AC();
}

uint64_t sub_10013B60C()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B650()
{
  return 16;
}

__n128 sub_10013B65C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B668()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 184)) = result;
  return result;
}

uint64_t sub_10013B68C()
{
  return swift_release();
}

uint64_t sub_10013B73C()
{
  return 16;
}

__n128 sub_10013B748(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10013B754()
{
  return sub_10013A634(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10013B770(double *a1@<X8>)
{
  *a1 = sub_10013A524();
}

uint64_t sub_10013B79C()
{
  return sub_10013A1A0();
}

uint64_t sub_10013B7E0()
{
  return 16;
}

__n128 sub_10013B7EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B7F8()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 176)) = result;
  return result;
}

uint64_t sub_10013B82C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013B87C()
{
  return 16;
}

__n128 sub_10013B888(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10013B894()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 200)) = result;
  return result;
}

uint64_t sub_10013B8C0()
{
  return 16;
}

__n128 sub_10013B8CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10013B8D8()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 192);
  *(void *)uint64_t v2 = *(void *)(v0 + 24);
  *(unsigned char *)(v2 + 8) = v1;
}

uint64_t sub_10013B904(uint64_t a1)
{
  char v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

unint64_t sub_10013B948(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006560(&qword_10019FFB0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000066D4(v6, (uint64_t)&v15, &qword_10019FFB8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000A80EC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10004E228(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10013BA80(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006560(&qword_10019FFE0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000066D4(v6, (uint64_t)&v13, &qword_10019FFE8);
    uint64_t v7 = v13;
    unint64_t result = sub_1000A81F4(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10004E228(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10013BBB0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006560(&qword_10019FFA0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  long long v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000066D4(v6, (uint64_t)v15, &qword_10019FFA8);
    unint64_t result = sub_1000A8288((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10004E228(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10013BCF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006560(&qword_10019FF88);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000A80EC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_10013BE18()
{
  id v0 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithStringValue:v1];

  uint64_t v3 = (void *)ASCLockupContextStandard;
  id v4 = ASCLockupKindApp;
  id v5 = v3;
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self _requestWithID:v2 kind:v4 context:v5 productVariantID:v6];

  return v7;
}

id sub_10013BF28()
{
  sub_100080660((uint64_t)(v0 + 4), (uint64_t)v14);
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  id v5 = (objc_class *)type metadata accessor for AppStoreComponent.AppStoreCoordinator();
  NSString v6 = (char *)objc_allocWithZone(v5);
  id v7 = &v6[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(void *)id v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100080660((uint64_t)v14, (uint64_t)v7);
  sub_10002FE0C((uint64_t)v14);
  sub_100027280(v1);
  sub_100027280(v3);
  uint64_t v8 = v6;
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)&v8[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen];
  *uint64_t v9 = v1;
  v9[1] = v2;
  char v10 = (uint64_t *)&v8[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onStateChange];
  *char v10 = v3;
  v10[1] = v4;
  sub_100027280(v1);
  sub_100027280(v3);

  v13.receiver = v8;
  v13.super_class = v5;
  id v11 = [super init];
  sub_1000271A0(v3);
  sub_1000271A0(v1);
  return v11;
}

id sub_10013C038()
{
  id v0 = [objc_allocWithZone((Class)ASCLockupView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v1 = self;
  id v2 = v0;
  id v3 = [v1 clearColor];
  [v2 setBackgroundColor:v3];

  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_100006560(&qword_10019FFD0);
  UIViewRepresentableContext.coordinator.getter();
  [v2 setDelegate:v6];

  id v4 = sub_10013BE18();
  [v2 setRequest:v4];

  return v2;
}

void sub_10013C19C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100006560(&qword_10019D390);
  __n128 v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *(void (**)(uint64_t, __n128))(v2
                                               + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onStateChange);
  if (v10) {
    v10(a2, v7);
  }
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  if (v11 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v13 != v14)
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_15;
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    if (v17 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v19 != v20)
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        return;
      }
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_15:
  uint64_t v23 = v3 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen;
  uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen);
  if (v24)
  {
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v26 = self;
    swift_retain();
    id v27 = [v26 mainBundle];
    v48._object = (void *)0xE000000000000000;
    v28._object = (void *)0x8000000100159E50;
    v28._uint64_t countAndFlagsBits = 0xD000000000000026;
    v29._uint64_t countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v48._uint64_t countAndFlagsBits = 0;
    Swift::String v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v48);

    Swift::String aBlock = v30;
    sub_10002374C();
    StringProtocol.localizedUppercase.getter();
    swift_bridgeObjectRelease();
    uint64_t v31 = self;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v33 = [v31 textMetadataWithTitle:v32 subtitle:0];

    id v34 = objc_allocWithZone((Class)ASCLocalOffer);
    uint64_t v46 = v24;
    uint64_t v47 = v25;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    uint64_t v44 = sub_10013B904;
    uint64_t v45 = &unk_100193758;
    int v35 = _Block_copy(&aBlock);
    sub_100027280(v24);
    id v36 = v33;
    swift_release();
    id v37 = [v34 initWithMetadata:v36 action:v35];

    _Block_release(v35);
    uint64_t v38 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v9, 1, 1, v38);
    type metadata accessor for MainActor();
    id v39 = a1;
    id v40 = v37;
    uint64_t v41 = static MainActor.shared.getter();
    uint64_t v42 = (void *)swift_allocObject();
    v42[2] = v41;
    v42[3] = &protocol witness table for MainActor;
    v42[4] = v39;
    v42[5] = v40;
    sub_1000FA73C((uint64_t)v9, (uint64_t)&unk_10019FF98, (uint64_t)v42);

    sub_1000271A0(v24);
    swift_release();
  }
}

uint64_t sub_10013C5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10013C64C, v7, v6);
}

uint64_t sub_10013C64C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  id v2 = [v1 lockup];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 lockupWithOffer:*(void *)(v0 + 24)];
  }
  else
  {
    id v4 = 0;
  }
  [*(id *)(v0 + 16) setLockup:v4];

  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t type metadata accessor for AppStoreComponent.AppStoreCoordinator()
{
  return self;
}

id sub_10013C8B8()
{
  return sub_10013C038();
}

uint64_t sub_10013C8FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100006560(&qword_10019FFD0);
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v3 = &v5[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(void *)uint64_t v3 = v2;
  *((void *)v3 + 1) = v1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

id sub_10013C974@<X0>(void *a1@<X8>)
{
  id result = sub_10013BF28();
  *a1 = result;
  return result;
}

uint64_t sub_10013C9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013D0B8();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10013CA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013D0B8();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10013CA88()
{
}

id sub_10013CAB0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery);
    sub_100006560(&qword_10019FF80);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014D4D0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 48) = v2;
    *(void *)(inited + 56) = v1;
    swift_bridgeObjectRetain();
    sub_10013BCF4(inited);
    id v5 = objc_allocWithZone((Class)ASCMetricsActivity);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v5 initWithFields:isa];

    return v7;
  }
  else
  {
    id v9 = objc_allocWithZone((Class)ASCMetricsActivity);
    return [v9 init];
  }
}

uint64_t sub_10013CBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013CBE4()
{
  return swift_release();
}

uint64_t sub_10013CBEC()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10013CC34(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100010CB0;
  return sub_10013C5B4(a1, v4, v5, v7, v6);
}

uint64_t destroy for AppStoreComponent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for AppStoreComponent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v8 = a2 + 6;
  uint64_t v7 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  uint64_t v10 = a2[8];
  if (v10)
  {
    uint64_t v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

void *assignWithCopy for AppStoreComponent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  if (a1[6])
  {
    if (v4)
    {
      uint64_t v5 = a2[7];
      a1[6] = v4;
      a1[7] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[7];
    a1[6] = v4;
    a1[7] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  uint64_t v7 = a2[8];
  if (!a1[8])
  {
    if (v7)
    {
      uint64_t v9 = a2[9];
      a1[8] = v7;
      a1[9] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[9];
  a1[8] = v7;
  a1[9] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AppStoreComponent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  if (a1[6])
  {
    if (v7)
    {
      uint64_t v8 = a2[7];
      a1[6] = v7;
      a1[7] = v8;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  uint64_t v10 = a2[8];
  if (!a1[8])
  {
    if (v10)
    {
      uint64_t v12 = a2[9];
      a1[8] = v10;
      a1[9] = v12;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v11 = a2[9];
  a1[8] = v10;
  a1[9] = v11;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreComponent()
{
  return &type metadata for AppStoreComponent;
}

unint64_t sub_10013D064()
{
  unint64_t result = qword_10019FFC0;
  if (!qword_10019FFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FFC0);
  }
  return result;
}

unint64_t sub_10013D0B8()
{
  unint64_t result = qword_10019FFD8;
  if (!qword_10019FFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019FFD8);
  }
  return result;
}

uint64_t *sub_10013D10C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    *uint64_t v15 = v17;
    v15[1] = v18;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10013D230(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_release();
}

void *sub_10013D2CC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *uint64_t v14 = v16;
  v14[1] = v17;
  swift_retain();
  return a1;
}

void *sub_10013D3A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = *v12;
  swift_retain();
  swift_release();
  *((void *)v11 + 1) = v12[1];
  return a1;
}

_OWORD *sub_10013D49C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10013D53C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (void *)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = *v14;
  swift_release();
  *((void *)v13 + 1) = v14[1];
  return a1;
}

uint64_t sub_10013D60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013D620);
}

uint64_t sub_10013D620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributionViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10013D6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013D700);
}

uint64_t sub_10013D700(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AttributionViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AttributionModule()
{
  uint64_t result = qword_1001A00A8;
  if (!qword_1001A00A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013D808()
{
  uint64_t result = type metadata accessor for AttributionViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10013D89C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10013D8B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v52 = sub_100006560(&qword_1001A00E0);
  __chkstk_darwin(v52);
  uint64_t v55 = (uint64_t *)&v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for AttributionModule();
  uint64_t v47 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = v5;
  char v49 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for OpenURLAction();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin(v6);
  uint64_t v51 = &v45[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for AttributedString();
  __chkstk_darwin(v8 - 8);
  uint64_t v50 = v1;
  sub_1000AABA8((uint64_t)&v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v10 = Text.init(_:)();
  uint64_t v12 = v11;
  char v14 = v13;
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  uint64_t v15 = Text.foregroundColor(_:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_1000065A4(v10, v12, v14 & 1);
  swift_bridgeObjectRelease();
  static Font.footnote.getter();
  uint64_t v20 = Text.font(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  uint64_t v26 = v25;
  swift_release();
  v24 &= 1u;
  sub_1000065A4(v15, v17, v19);
  swift_bridgeObjectRelease();
  int v46 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t KeyPath = swift_getKeyPath();
  id v36 = v49;
  sub_10013DD7C(v50, (uint64_t)v49);
  unint64_t v37 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v38 = swift_allocObject();
  sub_10013DEF0((uint64_t)v36, v38 + v37);
  id v39 = v51;
  OpenURLAction.init(handler:)();
  uint64_t v40 = v53;
  uint64_t v42 = v54;
  uint64_t v41 = v55;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))((unsigned char *)v55 + *(int *)(v52 + 28), v39, v54);
  *uint64_t v41 = KeyPath;
  uint64_t v43 = sub_100006560(&qword_1001A00E8);
  sub_10013DFD4((uint64_t)v41, a1 + *(int *)(v43 + 36));
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v22;
  *(unsigned char *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v26;
  *(unsigned char *)(a1 + 32) = v46;
  *(void *)(a1 + 40) = v28;
  *(void *)(a1 + 48) = v30;
  *(void *)(a1 + 56) = v32;
  *(void *)(a1 + 64) = v34;
  *(unsigned char *)(a1 + 72) = 0;
  sub_100010924(v20, v22, v24);
  swift_bridgeObjectRetain();
  sub_10013E03C((uint64_t)v41);
  (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v39, v42);
  sub_1000065A4(v20, v22, v24);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013DCD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + *(int *)(type metadata accessor for AttributionModule() + 20)))
  {
    uint64_t v2 = swift_retain();
    sub_1000AB22C(v2);
    uint64_t v3 = swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    uint64_t v3 = EnvironmentObject.error()();
    __break(1u);
  }
  return static OpenURLAction.Result.systemAction.getter(v3);
}

uint64_t sub_10013DD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013DDE0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AttributionModule() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for AttributionViewModel() + 24);
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10013DEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013DF54(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AttributionModule() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10013DCD8(a1, v4);
}

uint64_t sub_10013DFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_1001A00E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013E03C(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_1001A00E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10013E0A0()
{
  unint64_t result = qword_1001A00F0;
  if (!qword_1001A00F0)
  {
    sub_10000650C(&qword_1001A00E8);
    sub_1000B289C();
    sub_10013E11C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A00F0);
  }
  return result;
}

unint64_t sub_10013E11C()
{
  unint64_t result = qword_1001A00F8[0];
  if (!qword_1001A00F8[0])
  {
    sub_10000650C(&qword_1001A00E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1001A00F8);
  }
  return result;
}

void sub_10013E178()
{
  type metadata accessor for MusicViewModel();
  if (v0 <= 0x3F)
  {
    sub_10013F7FC(319, (unint64_t *)&qword_100198FC0, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F)
    {
      sub_10013F7FC(319, (unint64_t *)&qword_100198BC0, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_10013E2C0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = type metadata accessor for MusicViewModel();
    uint64_t v10 = *(int *)(v9 + 44);
    __dst = (char *)v4 + v10;
    uint64_t v32 = v9;
    uint64_t v30 = (char *)a2 + v10;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v30, 1, v11))
    {
      uint64_t v13 = sub_100006560(&qword_100198630);
      memcpy(__dst, v30, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v30, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(v32 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v32 + 48));
    uint64_t v15 = a3[9];
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[10];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = a3[11];
    char v24 = (void *)((char *)v4 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    *char v24 = v26;
    v24[1] = v27;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10013E600(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 40);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10013E7E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  __dst = (void *)(a1 + v9);
  uint64_t v30 = v8;
  uint64_t v28 = (const void *)(a2 + v9);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27(v28, 1, v10))
  {
    uint64_t v12 = sub_100006560(&qword_100198630);
    memcpy(__dst, v28, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v28, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(v30 + 48)) = *(void *)(a2 + *(int *)(v30 + 48));
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  swift_bridgeObjectRetain();
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *uint64_t v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  void *v22 = v24;
  v22[1] = v25;
  swift_retain();
  return a1;
}

uint64_t sub_10013EAD8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for MusicViewModel();
  uint64_t v7 = *(int *)(v6 + 44);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100006560(&qword_100198630);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  *(void *)(a1 + *(int *)(v6 + 48)) = *(void *)(a2 + *(int *)(v6 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v16 = v28[9];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (void *)(a2 + v16);
    sub_1000067DC(a1 + v16, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = v28[10];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    sub_1000067DC(a1 + v20, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v24 = v28[11];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  swift_retain();
  swift_release();
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  return a1;
}

uint64_t sub_10013EEA0(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_100006560(&qword_100198630);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10013F13C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v32 = a3;
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100006560(&qword_100198630);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(void *)(a1 + *(int *)(v8 + 48)) = *(void *)(a2 + *(int *)(v8 + 48));
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v18 = v32[9];
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (const void *)(a2 + v18);
    sub_1000067DC(a1 + v18, &qword_100198A98);
    uint64_t v21 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    uint64_t v23 = v32[10];
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (const void *)(a2 + v23);
    sub_1000067DC(a1 + v23, &qword_1001982C0);
    uint64_t v26 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
  }
  uint64_t v28 = v32[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (void *)(a2 + v28);
  *(void *)(a1 + v28) = *v30;
  swift_release();
  *(void *)(v29 + 8) = v30[1];
  return a1;
}

uint64_t sub_10013F4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013F4F0);
}

uint64_t sub_10013F4F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MusicViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[9];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100006560(&qword_100198B50);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[11]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t sub_10013F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013F67C);
}

uint64_t sub_10013F67C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MusicViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_100006560(qword_100198F38);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[9];
    }
    else
    {
      uint64_t result = sub_100006560(&qword_100198B50);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[11]) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[10];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MusicModule()
{
  return sub_1000068A4();
}

void sub_10013F7FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10013F850()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10013F894@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v26 = a2;
  sub_10000650C(&qword_100198288);
  sub_10000650C(&qword_1001A0180);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v34 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = sub_10000650C(&qword_1001A0188);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019BB60);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v23 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v16 = (uint64_t *)((char *)&v21 - v15);
  static HorizontalAlignment.leading.getter();
  uint64_t v27 = v3;
  uint64_t v28 = v24;
  uint64_t v29 = v25;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v17 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  static Edge.Set.bottom.getter();
  uint64_t v32 = v17;
  uint64_t v33 = &protocol witness table for _PaddingLayout;
  uint64_t v18 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  uint64_t v30 = v18;
  uint64_t v31 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v16, v13, v11);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v23 + 8);
  v19(v13, v11);
  sub_1000508C8(v26, v16, v11);
  return ((uint64_t (*)(void *, uint64_t))v19)(v16, v11);
}

uint64_t sub_10013FDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v111 = a3;
  uint64_t v128 = a4;
  uint64_t v6 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v6 - 8);
  uint64_t v127 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v117);
  uint64_t v119 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v121);
  uint64_t v124 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100006560(&qword_10019BB30);
  __chkstk_darwin(v112);
  uint64_t v131 = (uint64_t *)((char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = sub_100006560(&qword_10019BB38);
  __chkstk_darwin(v126);
  uint64_t v125 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000650C(&qword_1001A0180);
  uint64_t v12 = type metadata accessor for Array();
  *(void *)&long long v109 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_10000650C(&qword_1001A0188);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v139 = v12;
  *((void *)&v139 + 1) = AssociatedTypeWitness;
  *(void *)&long long v140 = v14;
  *((void *)&v140 + 1) = WitnessTable;
  uint64_t v141 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  swift_getTupleTypeMetadata2();
  uint64_t v106 = type metadata accessor for TupleView();
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v104 = type metadata accessor for VStack();
  uint64_t v108 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v99 - v17;
  uint64_t v105 = type metadata accessor for ModifiedContent();
  uint64_t v110 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v102 = (char *)&v99 - v18;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v115 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v130 = (char *)&v99 - v20;
  sub_10000650C(&qword_10019BB60);
  uint64_t v116 = v19;
  uint64_t v123 = type metadata accessor for ModifiedContent();
  uint64_t v118 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v122 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v120 = (char **)((char *)&v99 - v23);
  uint64_t v114 = (char *)type metadata accessor for AccessibilityTraits();
  uint64_t v101 = *((void *)v114 - 1);
  __chkstk_darwin(v114);
  char v99 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_100006560(&qword_100198288);
  __chkstk_darwin(v113);
  uint64_t v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v129 = (uint64_t)&v99 - v28;
  uint64_t v100 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  static Font.Weight.bold.getter();
  uint64_t v34 = Text.fontWeight(_:)();
  uint64_t v36 = v35;
  LOBYTE(v14) = v37 & 1;
  sub_1000065A4(v29, v31, v33);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v38 = Text.font(_:)();
  uint64_t v40 = v39;
  char v42 = v41;
  swift_release();
  sub_1000065A4(v34, v36, v14);
  swift_bridgeObjectRelease();
  uint64_t v43 = Text.accessibilityHeading(_:)();
  uint64_t v45 = v44;
  LOBYTE(v14) = v46;
  uint64_t v48 = v47;
  sub_1000065A4(v38, v40, v42 & 1);
  swift_bridgeObjectRelease();
  *(void *)&long long v139 = v43;
  *((void *)&v139 + 1) = v45;
  LOBYTE(v140) = v14 & 1;
  *((void *)&v140 + 1) = v48;
  char v49 = v99;
  static AccessibilityTraits.isHeader.getter();
  View.accessibility(addTraits:)();
  (*(void (**)(char *, char *))(v101 + 8))(v49, v114);
  sub_1000065A4(v139, *((uint64_t *)&v139 + 1), v140);
  swift_bridgeObjectRelease();
  uint64_t v114 = v26;
  sub_10001D6D8((uint64_t)v26, v129, &qword_100198288);
  uint64_t v132 = v109;
  uint64_t v133 = v111;
  uint64_t v134 = v100;
  static HorizontalAlignment.center.getter();
  uint64_t v50 = v103;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v51 = v104;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = v102;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v50, v51);
  static Edge.Set.top.getter();
  v138[6] = v52;
  v138[7] = (uint64_t)&protocol witness table for _PaddingLayout;
  uint64_t v54 = v105;
  uint64_t v111 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v53, v54);
  if (qword_1001980B0 != -1) {
    swift_once();
  }
  uint64_t v55 = qword_1001AA358;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v57 = v121;
  uint64_t v58 = v124;
  uint64_t v59 = &v124[*(int *)(v121 + 20)];
  uint64_t v60 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v110) = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v61 = type metadata accessor for RoundedCornerStyle();
  long long v62 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104);
  v62(v59, v60, v61);
  __asm { FMOV            V0.2D, #12.0 }
  long long v109 = _Q0;
  *(_OWORD *)uint64_t v58 = _Q0;
  uint64_t v68 = v119;
  sub_10001081C((uint64_t)v58, v119);
  *(_WORD *)(v68 + *(int *)(v117 + 36)) = 256;
  uint64_t v69 = v131;
  sub_1000066D4(v68, (uint64_t)v131 + *(int *)(v112 + 36), &qword_100198618);
  *uint64_t v69 = KeyPath;
  v69[1] = v55;
  swift_retain_n();
  swift_retain();
  sub_1000067DC(v68, &qword_100198618);
  sub_100010934((uint64_t)v58);
  swift_release();
  swift_release();
  v62(&v58[*(int *)(v57 + 20)], v110, v61);
  *(_OWORD *)uint64_t v58 = v109;
  static Color.black.getter();
  uint64_t v70 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v71 = v127;
  sub_10001081C((uint64_t)v58, v127);
  uint64_t v72 = v71 + *(int *)(sub_100006560(&qword_10019A188) + 36);
  long long v73 = v140;
  *(_OWORD *)uint64_t v72 = v139;
  *(_OWORD *)(v72 + 16) = v73;
  *(void *)(v72 + 32) = v141;
  uint64_t v74 = sub_100006560(&qword_10019A190);
  *(void *)(v71 + *(int *)(v74 + 52)) = v70;
  *(_WORD *)(v71 + *(int *)(v74 + 56)) = 256;
  uint64_t v75 = static Alignment.center.getter();
  uint64_t v77 = v76;
  uint64_t v78 = (uint64_t *)(v71 + *(int *)(sub_100006560(&qword_10019A198) + 36));
  *uint64_t v78 = v75;
  v78[1] = v77;
  sub_100010934((uint64_t)v58);
  uint64_t v79 = static Alignment.center.getter();
  uint64_t v81 = v80;
  uint64_t v82 = (uint64_t)v125;
  uint64_t v83 = (uint64_t)&v125[*(int *)(v126 + 36)];
  sub_1000066D4(v71, v83, &qword_10019A180);
  char v84 = (uint64_t *)(v83 + *(int *)(sub_100006560(&qword_10019A178) + 36));
  *char v84 = v79;
  v84[1] = v81;
  uint64_t v85 = (uint64_t)v131;
  sub_1000066D4((uint64_t)v131, v82, &qword_10019BB30);
  sub_1000067DC(v71, &qword_10019A180);
  sub_1000067DC(v85, &qword_10019BB30);
  static Alignment.center.getter();
  v138[4] = v111;
  v138[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  uint64_t v86 = v116;
  uint64_t v87 = swift_getWitnessTable();
  sub_100142540();
  uint64_t v88 = (uint64_t)v122;
  long long v89 = v130;
  View.background<A>(_:alignment:)();
  sub_1000067DC(v82, &qword_10019BB38);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v89, v86);
  uint64_t v90 = sub_100010484(&qword_10019BC50, &qword_10019BB60);
  v138[2] = v87;
  v138[3] = v90;
  uint64_t v91 = v123;
  uint64_t v92 = swift_getWitnessTable();
  long long v93 = v120;
  sub_1000508C8(v120, v88, v91);
  uint64_t v94 = v118;
  long long v95 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
  v95(v88, v91);
  uint64_t v96 = v129;
  uint64_t v97 = (uint64_t)v114;
  sub_1000066D4(v129, (uint64_t)v114, &qword_100198288);
  v138[0] = v97;
  (*(void (**)(uint64_t, void *, uint64_t))(v94 + 16))(v88, v93, v91);
  v138[1] = v88;
  v137[0] = v113;
  v137[1] = v91;
  unint64_t v135 = sub_100006628();
  uint64_t v136 = v92;
  sub_100050970(v138, 2uLL, (uint64_t)v137);
  v95((uint64_t)v93, v91);
  sub_1000067DC(v96, &qword_100198288);
  v95(v88, v91);
  return sub_1000067DC(v97, &qword_100198288);
}

uint64_t sub_100140C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v46 = type metadata accessor for MusicModule();
  uint64_t v7 = *(void *)(v46 - 8);
  uint64_t v45 = *(void *)(v7 + 64);
  __chkstk_darwin(v46);
  char v42 = (char *)&v35 - v8;
  uint64_t v9 = type metadata accessor for Array();
  uint64_t v41 = v9;
  uint64_t v39 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v11 = sub_10000650C(&qword_1001A0188);
  uint64_t v38 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v37 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v9;
  uint64_t v52 = (char *)AssociatedTypeWitness;
  uint64_t v53 = v11;
  uint64_t v54 = WitnessTable;
  uint64_t v55 = AssociatedConformanceWitness;
  uint64_t v14 = type metadata accessor for ForEach();
  uint64_t v44 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v36 = (char *)&v35 - v18;
  uint64_t v43 = sub_100006560(&qword_1001A0180);
  __chkstk_darwin(v43);
  uint64_t v35 = (uint64_t)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v35 - v21;
  *(void *)uint64_t v22 = static VerticalAlignment.center.getter();
  *((void *)v22 + 1) = 0;
  v22[16] = 1;
  uint64_t v23 = sub_100006560(&qword_1001A01A0);
  sub_10014113C(a1, a2, a3, (uint64_t)&v22[*(int *)(v23 + 44)]);
  type metadata accessor for MusicViewModel();
  uint64_t v51 = sub_1000B9710();
  uint64_t v24 = v42;
  uint64_t v25 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v42, a1, v46);
  unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a2;
  *(void *)(v27 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v27 + v26, v24, v25);
  unint64_t v28 = sub_100142990();
  ForEach<>.init(_:content:)();
  v50[2] = v28;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = v36;
  sub_1000508C8(v36, v16, v14);
  uint64_t v31 = v44;
  char v32 = *(void (**)(char *, uint64_t))(v44 + 8);
  v32(v16, v14);
  uint64_t v33 = v35;
  sub_1000066D4((uint64_t)v22, v35, &qword_1001A0180);
  uint64_t v51 = v33;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v16, v30, v14);
  uint64_t v52 = v16;
  v50[0] = v43;
  v50[1] = v14;
  uint64_t v48 = sub_100010484(&qword_1001A01C8, &qword_1001A0180);
  uint64_t v49 = v29;
  sub_100050970(&v51, 2uLL, (uint64_t)v50);
  v32(v30, v14);
  sub_1000067DC((uint64_t)v22, &qword_1001A0180);
  v32(v16, v14);
  return sub_1000067DC(v33, &qword_1001A0180);
}

uint64_t sub_10014113C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v85 = a3;
  uint64_t v93 = a2;
  uint64_t v6 = type metadata accessor for MusicModule();
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v67 = *(void *)(v68 + 64);
  __chkstk_darwin(v6);
  long long v89 = (char *)&v62 - v7;
  uint64_t v8 = sub_100006560(&qword_100198620);
  uint64_t v91 = *(void *)(v8 - 8);
  uint64_t v92 = v8;
  __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v71 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v14;
  __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v62 - v16;
  uint64_t v17 = sub_100006560(&qword_100199EA0);
  __chkstk_darwin(v17 - 8);
  uint64_t v90 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v87 = (char *)&v62 - v20;
  uint64_t v21 = type metadata accessor for ColorScheme();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v69 = v6;
  sub_10001D3A4((uint64_t)&v62 - v26);
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, enum case for ColorScheme.light(_:), v21);
  static ColorScheme.== infix(_:_:)();
  unint64_t v28 = *(void (**)(char *, uint64_t))(v22 + 8);
  v28(v24, v21);
  v28(v27, v21);
  uint64_t v29 = Image.init(_:bundle:)();
  uint64_t v30 = static Alignment.leading.getter();
  sub_100052BEC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v94, 0.0, 1, 0.0, 1, v30, v31, v29);
  swift_release();
  uint64_t v32 = v94[0];
  uint64_t v33 = v94[1];
  int v84 = v95;
  uint64_t v83 = v96;
  int v82 = v97;
  uint64_t v81 = v98;
  int v80 = v99;
  uint64_t v79 = v100;
  int v78 = v101;
  uint64_t v77 = v102;
  int v76 = v103;
  uint64_t v75 = v104;
  int v74 = v105;
  uint64_t v73 = v106;
  uint64_t v72 = v107;
  uint64_t v34 = v85;
  uint64_t v35 = type metadata accessor for MusicViewModel();
  sub_1000B9584(v35, (uint64_t)v12);
  uint64_t v36 = v71;
  uint64_t v37 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v12, 1, v13) == 1)
  {
    sub_1000067DC((uint64_t)v12, &qword_100198630);
    uint64_t v38 = 1;
    uint64_t v40 = v91;
    uint64_t v39 = v92;
    uint64_t v41 = (uint64_t)v87;
  }
  else
  {
    uint64_t v65 = v32;
    long long v63 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    char v42 = v88;
    uint64_t v62 = v37;
    v63(v88, v12, v37);
    uint64_t v43 = v68;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    uint64_t v45 = a1;
    uint64_t v64 = a1;
    uint64_t v46 = v69;
    v44(v89, v45, v69);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v86, v42, v37);
    unint64_t v47 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v48 = *(unsigned __int8 *)(v36 + 80);
    unint64_t v49 = v67 + v48 + v47;
    uint64_t v67 = v33;
    unint64_t v50 = v49 & ~v48;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v93;
    *(void *)(v51 + 24) = v34;
    (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v51 + v47, v89, v46);
    unint64_t v52 = v51 + v50;
    uint64_t v33 = v67;
    uint64_t v53 = v62;
    uint64_t v54 = ((uint64_t (*)(unint64_t, char *, uint64_t))v63)(v52, v86, v62);
    uint64_t v32 = v65;
    __chkstk_darwin(v54);
    uint64_t v55 = v70;
    Button.init(action:label:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v88, v53);
    uint64_t v57 = v91;
    uint64_t v56 = v92;
    uint64_t v41 = (uint64_t)v87;
    (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v87, v55, v92);
    uint64_t v38 = 0;
    uint64_t v39 = v56;
    uint64_t v40 = v57;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v38, 1, v39);
  uint64_t v58 = v90;
  sub_1000066D4(v41, v90, &qword_100199EA0);
  *(void *)a4 = v32;
  *(void *)(a4 + 8) = v33;
  *(unsigned char *)(a4 + 16) = v84;
  *(void *)(a4 + 24) = v83;
  *(unsigned char *)(a4 + 32) = v82;
  *(void *)(a4 + 40) = v81;
  *(unsigned char *)(a4 + 48) = v80;
  *(void *)(a4 + 56) = v79;
  *(unsigned char *)(a4 + 64) = v78;
  *(void *)(a4 + 72) = v77;
  *(unsigned char *)(a4 + 80) = v76;
  *(void *)(a4 + 88) = v75;
  *(unsigned char *)(a4 + 96) = v74;
  uint64_t v59 = v72;
  *(void *)(a4 + 104) = v73;
  *(void *)(a4 + 112) = v59;
  uint64_t v60 = sub_100006560(&qword_1001A01D8);
  sub_1000066D4(v58, a4 + *(int *)(v60 + 48), &qword_100199EA0);
  swift_retain();
  sub_1000067DC(v41, &qword_100199EA0);
  sub_1000067DC(v58, &qword_100199EA0);
  return swift_release();
}

uint64_t sub_1001419F4@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100141A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v90 = a5;
  uint64_t v87 = type metadata accessor for MusicModule();
  uint64_t v86 = *(void *)(v87 - 8);
  uint64_t v85 = *(void *)(v86 + 64);
  __chkstk_darwin(v87);
  int v84 = (char *)&v65 - v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v77 = (char *)&v65 - v10;
  uint64_t v11 = *(void *)(a3 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_100006560(&qword_1001A01D0);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v83 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  int v82 = (char *)&v65 - v17;
  uint64_t v18 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int v80 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v65 - v25;
  uint64_t v76 = type metadata accessor for MusicViewModel();
  uint64_t v81 = a2;
  sub_1000B9CE8(v76, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_1000067DC((uint64_t)v20, &qword_100198630);
    uint64_t v27 = 1;
    unint64_t v28 = v90;
    uint64_t v29 = v89;
    uint64_t v30 = v88;
  }
  else
  {
    uint64_t v73 = v22;
    uint64_t v31 = *(void (**)(unint64_t, char *, uint64_t))(v22 + 32);
    uint64_t v70 = v21;
    uint64_t v72 = v22 + 32;
    uint64_t v71 = v31;
    v31((unint64_t)v26, v20, v21);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
    uint64_t v34 = v33;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    uint64_t v37 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, a3);
    if (v37)
    {
      uint64_t v66 = v37;
      uint64_t v67 = v35;
    }
    else
    {
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
      uint64_t v66 = v38;
    }
    uint64_t v39 = v77;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
    uint64_t v40 = AssociatedTypeWitness;
    uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
    int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, AssociatedTypeWitness);
    uint64_t v69 = a4;
    uint64_t v43 = v32;
    uint64_t v44 = v26;
    if (v42 == 1)
    {
      (*(void (**)(char *, uint64_t))(v74 + 8))(v39, v75);
      *(void *)&long long v93 = 0;
      long long v91 = 0u;
      long long v92 = 0u;
    }
    else
    {
      *((void *)&v92 + 1) = v40;
      *(void *)&long long v93 = swift_getAssociatedConformanceWitness();
      uint64_t v45 = sub_100035868((uint64_t *)&v91);
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 32))(v45, v39, v40);
    }
    uint64_t v46 = v67;
    uint64_t v47 = v66;
    uint64_t v48 = v81;
    char v49 = sub_1000B97DC(a1, v76);
    *(void *)&long long v95 = v43;
    *((void *)&v95 + 1) = v34;
    *(void *)&long long v96 = v46;
    *((void *)&v96 + 1) = v47;
    sub_10001D6D8((uint64_t)&v91, (uint64_t)&v97, &qword_100199A10);
    v98[24] = v49 & 1;
    long long v93 = v97;
    *(_OWORD *)uint64_t v94 = *(_OWORD *)v98;
    long long v91 = v95;
    long long v92 = v96;
    *(_OWORD *)&v94[9] = *(_OWORD *)&v98[9];
    sub_100142B2C((uint64_t)&v91, (uint64_t)&v95);
    char v99 = 0;
    sub_100142B88((uint64_t)&v91);
    uint64_t v50 = v86;
    uint64_t v51 = v84;
    uint64_t v52 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v84, v48, v87);
    uint64_t v53 = v73;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v55 = v80;
    uint64_t v68 = v44;
    uint64_t v56 = v70;
    v54(v80, v44, v70);
    unint64_t v57 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    unint64_t v58 = (v85 + *(unsigned __int8 *)(v53 + 80) + v57) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v69;
    *(void *)(v59 + 16) = a3;
    *(void *)(v59 + 24) = v60;
    (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v59 + v57, v51, v52);
    v71(v59 + v58, v55, v56);
    sub_100006560(&qword_1001A01B0);
    sub_100142A38();
    uint64_t v61 = v83;
    View.onTapGesture(count:perform:)();
    swift_release();
    sub_1000067DC((uint64_t)&v95, &qword_1001A01B0);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v68, v56);
    uint64_t v30 = v88;
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
    long long v63 = v82;
    uint64_t v29 = v89;
    v62(v82, v61, v89);
    unint64_t v28 = v90;
    v62(v90, v63, v29);
    uint64_t v27 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v28, v27, 1, v29);
}

uint64_t sub_100142370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for OpenURLAction();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MusicModule();
  sub_10001D160((uint64_t)v10);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = *(void **)(a1 + *(int *)(v11 + 44));
  if (v12)
  {
    swift_retain();
    sub_1000B9E78(a5, 0, 3u, v12);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100142BE8((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100142520@<X0>(uint64_t a1@<X8>)
{
  return sub_10013FDAC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10014252C@<X0>(uint64_t a1@<X8>)
{
  return sub_100140C78(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100142540()
{
  unint64_t result = qword_1001A0190;
  if (!qword_1001A0190)
  {
    sub_10000650C(&qword_10019BB38);
    sub_1001425E0();
    sub_100010484(qword_10019A1E0, &qword_10019A178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A0190);
  }
  return result;
}

unint64_t sub_1001425E0()
{
  unint64_t result = qword_1001A0198;
  if (!qword_1001A0198)
  {
    sub_10000650C(&qword_10019BB30);
    sub_100019638();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A0198);
  }
  return result;
}

uint64_t sub_100142680()
{
  uint64_t v1 = type metadata accessor for MusicModule();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = v2 + *(int *)(v1 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 + *(int *)(v1 + 40);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1001428F4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for MusicModule() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100141A88(a1, v8, v5, v6, a2);
}

unint64_t sub_100142990()
{
  unint64_t result = qword_1001A01A8;
  if (!qword_1001A01A8)
  {
    sub_10000650C(&qword_1001A0188);
    sub_10000650C(&qword_1001A01B0);
    sub_100142A38();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A01A8);
  }
  return result;
}

unint64_t sub_100142A38()
{
  unint64_t result = qword_1001A01B8;
  if (!qword_1001A01B8)
  {
    sub_10000650C(&qword_1001A01B0);
    sub_100142AD8();
    sub_100010484(&qword_100198D68, &qword_100198D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A01B8);
  }
  return result;
}

unint64_t sub_100142AD8()
{
  unint64_t result = qword_1001A01C0;
  if (!qword_1001A01C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A01C0);
  }
  return result;
}

uint64_t sub_100142B2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100142B88(uint64_t a1)
{
  return a1;
}

uint64_t sub_100142BE0()
{
  return sub_100142F0C(14);
}

uint64_t sub_100142BE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100142C34()
{
  uint64_t v1 = type metadata accessor for MusicModule();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v3 + *(int *)(type metadata accessor for MusicViewModel() + 44);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v7 + *(int *)(v1 + 36);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v7 + *(int *)(v1 + 40);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v14 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_100142F04()
{
  return sub_100142F0C(12);
}

uint64_t sub_100142F0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for MusicModule() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  return sub_100142370(v1 + v6, v1 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v3, v4, a1);
}

uint64_t sub_100142FF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001419F4(a1);
}

uint64_t sub_100142FFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100143278(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SetlistLoadingView()
{
  return &type metadata for SetlistLoadingView;
}

uint64_t sub_100143340()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10014335C()
{
  uint64_t result = static Color.secondary.getter();
  qword_1001A01E0 = result;
  return result;
}

uint64_t sub_10014337C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  int v54 = a1;
  uint64_t v55 = a4;
  uint64_t v4 = sub_100006560(&qword_1001A0200);
  __chkstk_darwin(v4 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = sub_100006560(&qword_1001A0208);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for Divider();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_100198C58);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v51 - v24;
  Divider.init()();
  char v26 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v18, v15);
  uint64_t v35 = &v22[*(int *)(v20 + 44)];
  *uint64_t v35 = v26;
  *((void *)v35 + 1) = v28;
  *((void *)v35 + 2) = v30;
  *((void *)v35 + 3) = v32;
  *((void *)v35 + 4) = v34;
  v35[40] = 0;
  uint64_t v36 = v18;
  uint64_t v37 = v52;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v36, v15);
  uint64_t v38 = v53;
  sub_10001D6D8((uint64_t)v22, (uint64_t)v25, &qword_100198C58);
  *(void *)uint64_t v14 = static VerticalAlignment.center.getter();
  *((void *)v14 + 1) = 0x4018000000000000;
  unsigned char v14[16] = 0;
  uint64_t v39 = sub_100006560(&qword_1001A0210);
  char v40 = v54;
  sub_100143854(v54, (uint64_t)&v14[*(int *)(v39 + 44)]);
  if (v40)
  {
    uint64_t v41 = sub_100006560(&qword_1001A0248);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v8, 1, 1, v41);
  }
  else
  {
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + 16) = 0;
    *(void *)(v42 + 24) = v37;
    *(void *)(v42 + 32) = v38;
    swift_retain();
    sub_100006560(&qword_1001A0218);
    sub_100144294();
    Button.init(action:label:)();
    uint64_t v43 = sub_100006560(&qword_1001A0248);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v8, 0, 1, v43);
  }
  sub_1000066D4((uint64_t)v25, (uint64_t)v22, &qword_100198C58);
  sub_1000066D4((uint64_t)v14, (uint64_t)v11, &qword_1001A0208);
  uint64_t v44 = v56;
  sub_1000066D4((uint64_t)v8, v56, &qword_1001A0200);
  uint64_t v45 = (uint64_t)v25;
  uint64_t v46 = (uint64_t)v8;
  uint64_t v47 = (uint64_t)v11;
  uint64_t v48 = v55;
  sub_1000066D4((uint64_t)v22, v55, &qword_100198C58);
  uint64_t v49 = sub_100006560(&qword_1001A0250);
  sub_1000066D4(v47, v48 + *(int *)(v49 + 48), &qword_1001A0208);
  sub_1000066D4(v44, v48 + *(int *)(v49 + 64), &qword_1001A0200);
  sub_1000067DC(v46, &qword_1001A0200);
  sub_1000067DC((uint64_t)v14, &qword_1001A0208);
  sub_1000067DC(v45, &qword_100198C58);
  sub_1000067DC(v44, &qword_1001A0200);
  sub_1000067DC(v47, &qword_1001A0208);
  return sub_1000067DC((uint64_t)v22, &qword_100198C58);
}

uint64_t sub_100143854@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_100006560(&qword_100198E90);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_1001A0258);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_1001A0260);
  __chkstk_darwin(v11 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - v14;
  if (a1)
  {
    ProgressView<>.init<>()();
    if (qword_100198178 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1001A01E0;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v41 = v17;
    swift_retain_n();
    uint64_t v19 = AnyShapeStyle.init<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v6, v3);
    swift_release();
    uint64_t v20 = (uint64_t *)&v10[*(int *)(v7 + 36)];
    *uint64_t v20 = KeyPath;
    v20[1] = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10001D6D8((uint64_t)v10, (uint64_t)v16, &qword_1001A0258);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))((char *)&v38 - v14, 1, 1, v7, v15);
  }
  LocalizedStringKey.init(_:)();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  char v25 = v24;
  if (qword_100198178 != -1) {
    swift_once();
  }
  char v26 = v25 & 1;
  uint64_t v41 = qword_1001A01E0;
  swift_retain();
  uint64_t v27 = Text.foregroundStyle<A>(_:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  sub_1000065A4(v21, v23, v26);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = v39;
  sub_1000066D4((uint64_t)v16, v39, &qword_1001A0260);
  uint64_t v35 = v40;
  sub_1000066D4(v34, v40, &qword_1001A0260);
  uint64_t v36 = v35 + *(int *)(sub_100006560(&qword_1001A0268) + 48);
  *(void *)uint64_t v36 = v27;
  *(void *)(v36 + 8) = v29;
  *(unsigned char *)(v36 + 16) = v33;
  *(void *)(v36 + 24) = v31;
  sub_100010924(v27, v29, v33);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v16, &qword_1001A0260);
  sub_1000065A4(v27, v29, v33);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v34, &qword_1001A0260);
}

uint64_t sub_100143CD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v53 = sub_100006560(&qword_1001A0240);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v51);
  uint64_t v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(_:)();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v48 = v8;
  uint64_t v49 = v7;
  char v10 = v9;
  uint64_t v50 = v11;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v55;
  char v13 = v56;
  uint64_t v14 = v57;
  char v15 = v58;
  uint64_t v16 = v59;
  uint64_t v47 = v60;
  char v17 = static Edge.Set.horizontal.getter();
  char v67 = v10 & 1;
  char v66 = v13;
  char v65 = v15;
  char v64 = 1;
  if (qword_100198178 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_1001A01E0;
  *(void *)&long long v68 = v49;
  *((void *)&v68 + 1) = v48;
  LOBYTE(v69) = v67;
  *((void *)&v69 + 1) = v50;
  *(void *)&long long v70 = v12;
  BYTE8(v70) = v66;
  *(void *)&long long v71 = v14;
  BYTE8(v71) = v65;
  *(void *)&long long v72 = v16;
  *((void *)&v72 + 1) = v47;
  LOBYTE(v73[0]) = v17;
  *(_OWORD *)((char *)v73 + 8) = 0u;
  *(_OWORD *)((char *)&v73[1] + 8) = 0u;
  BYTE8(v73[2]) = v64;
  uint64_t v74 = qword_1001A01E0;
  uint64_t v19 = v52;
  uint64_t v20 = &v52[*(int *)(v51 + 20)];
  uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v22 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
  __asm { FMOV            V0.2D, #3.0 }
  *uint64_t v19 = _Q0;
  swift_retain_n();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_10001081C((uint64_t)v19, (uint64_t)v6);
  uint64_t v28 = &v6[*(int *)(sub_100006560(&qword_10019A188) + 36)];
  long long v29 = v62;
  *(_OWORD *)uint64_t v28 = v61;
  *((_OWORD *)v28 + 1) = v29;
  *((void *)v28 + 4) = v63;
  uint64_t v30 = sub_100006560(&qword_10019A190);
  *(void *)&v6[*(int *)(v30 + 52)] = v18;
  *(_WORD *)&v6[*(int *)(v30 + 56)] = 256;
  uint64_t v31 = static Alignment.center.getter();
  uint64_t v33 = v32;
  uint64_t v34 = (uint64_t *)&v6[*(int *)(sub_100006560(&qword_10019A198) + 36)];
  *uint64_t v34 = v31;
  v34[1] = v33;
  sub_100010934((uint64_t)v19);
  uint64_t v35 = static Alignment.center.getter();
  uint64_t v37 = v36;
  uint64_t v38 = v54;
  sub_1000066D4((uint64_t)v6, v54, &qword_10019A180);
  uint64_t v39 = (uint64_t *)(v38 + *(int *)(v53 + 36));
  *uint64_t v39 = v35;
  v39[1] = v37;
  uint64_t v40 = sub_100006560(&qword_1001A0218);
  sub_1000066D4(v38, a1 + *(int *)(v40 + 36), &qword_1001A0240);
  long long v41 = v73[0];
  long long v42 = v73[2];
  *(_OWORD *)(a1 + 96) = v73[1];
  *(_OWORD *)(a1 + 112) = v42;
  long long v43 = v69;
  long long v44 = v71;
  long long v45 = v72;
  *(_OWORD *)(a1 + 32) = v70;
  *(_OWORD *)(a1 + 48) = v44;
  *(void *)(a1 + 128) = v74;
  *(_OWORD *)(a1 + 64) = v45;
  *(_OWORD *)(a1 + 80) = v41;
  *(_OWORD *)a1 = v68;
  *(_OWORD *)(a1 + 16) = v43;
  sub_100104AF8((uint64_t)&v68);
  sub_1000067DC(v38, &qword_1001A0240);
  sub_1000067DC((uint64_t)v6, &qword_10019A180);
  return sub_100104B4C((uint64_t)&v68);
}

uint64_t sub_100144110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100006560(&qword_1001A01E8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *v1;
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v7 = *((void *)v1 + 2);
  *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4035000000000000;
  v5[16] = 0;
  uint64_t v9 = sub_100006560(&qword_1001A01F0);
  sub_10014337C(v6, v8, v7, (uint64_t)&v5[*(int *)(v9 + 44)]);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000066D4((uint64_t)v5, a1, &qword_1001A01E8);
  char v10 = (_OWORD *)(a1 + *(int *)(sub_100006560(&qword_1001A01F8) + 36));
  long long v11 = v13[1];
  *char v10 = v13[0];
  v10[1] = v11;
  void v10[2] = v13[2];
  return sub_1000067DC((uint64_t)v5, &qword_1001A01E8);
}

uint64_t sub_100144234()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10014426C()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

unint64_t sub_100144294()
{
  unint64_t result = qword_1001A0220;
  if (!qword_1001A0220)
  {
    sub_10000650C(&qword_1001A0218);
    sub_100144334();
    sub_100010484(&qword_1001A0238, &qword_1001A0240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A0220);
  }
  return result;
}

unint64_t sub_100144334()
{
  unint64_t result = qword_1001A0228;
  if (!qword_1001A0228)
  {
    sub_10000650C(&qword_1001A0230);
    sub_1000D4448();
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A0228);
  }
  return result;
}

uint64_t sub_1001443D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100144400()
{
  return EnvironmentValues.tint.setter();
}

unint64_t sub_100144430()
{
  unint64_t result = qword_1001A0270;
  if (!qword_1001A0270)
  {
    sub_10000650C(&qword_1001A01F8);
    sub_100010484(qword_1001A0278, &qword_1001A01E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A0270);
  }
  return result;
}

void sub_1001444D0()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Optional();
    type metadata accessor for Published();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Array();
      type metadata accessor for Published();
      if (v2 <= 0x3F)
      {
        sub_100029828(319, &qword_1001A0300);
        if (v3 <= 0x3F)
        {
          sub_100029828(319, (unint64_t *)&qword_100199208);
          if (v4 <= 0x3F) {
            swift_initClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t sub_1001446CC()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 48))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_100144744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v17 - v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 56))(v4, v3, v8);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    uint64_t v14 = sub_100145AA0();
    uint64_t v15 = sub_100145AA0();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v10, AssociatedTypeWitness);
  }
}

uint64_t sub_1001449FC()
{
  return sub_10014590C();
}

BOOL sub_100144A04()
{
  return (Collection.isEmpty.getter() & 1) == 0;
}

void *sub_100144A9C(char a1)
{
  uint64_t v3 = *(void *)(v1 + *(void *)(*(void *)v1 + 128));
  swift_bridgeObjectRetain_n();
  uint64_t v4 = sub_1000E8D80(v3);
  swift_bridgeObjectRelease();
  uint64_t v18 = v4;
  sub_100146A1C((uint64_t *)&v18);
  swift_bridgeObjectRelease();
  uint64_t v5 = v18;
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (*(void *)(v3 + 16) == 1)
  {
    if ((a1 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_1000ABDA0(0, v6[2] + 1, 1, v6);
    }
    unint64_t v16 = v6[2];
    unint64_t v15 = v6[3];
    if (v16 >= v15 >> 1) {
      uint64_t v6 = sub_1000ABDA0((void *)(v15 > 1), v16 + 1, 1, v6);
    }
    v6[2] = v16 + 1;
    *(_OWORD *)&v6[2 * v16 + 4] = xmmword_100156D80;
    int64_t v7 = v5[2];
    if (v7) {
      goto LABEL_4;
    }
LABEL_15:
    swift_release();
    __n128 v8 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  sub_100006560(&qword_10019C9E8);
  uint64_t v6 = (void *)swift_allocObject();
  *((_OWORD *)v6 + 1) = xmmword_10014D4D0;
  v6[4] = 0;
  v6[5] = 0;
  if (a1) {
    goto LABEL_10;
  }
LABEL_3:
  int64_t v7 = v5[2];
  if (!v7) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v18 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_10012F648(0, v7, 0);
  __n128 v8 = v18;
  uint64_t v9 = v5 + 5;
  do
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    uint64_t v18 = v8;
    unint64_t v13 = v8[2];
    unint64_t v12 = v8[3];
    swift_bridgeObjectRetain();
    if (v13 >= v12 >> 1)
    {
      sub_10012F648(v12 > 1, v13 + 1, 1);
      __n128 v8 = v18;
    }
    v9 += 2;
    v8[2] = v13 + 1;
    uint64_t v14 = &v8[2 * v13];
    void v14[4] = v11;
    v14[5] = v10;
    --v7;
  }
  while (v7);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v18 = v6;
  sub_1000E9728((uint64_t)v8);
  return v18;
}

uint64_t sub_100144CD0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100144DC0(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  type metadata accessor for MainActor();
  v3[7] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[8] = v5;
  v3[9] = v4;
  return _swift_task_switch(sub_100144E84, v5, v4);
}

uint64_t sub_100144E84()
{
  uint64_t v1 = v0[4];
  sub_10004EAA4();
  if (v1)
  {
    if (v1 == 1)
    {
      unint64_t v2 = (void *)swift_task_alloc();
      v0[10] = v2;
      *unint64_t v2 = v0;
      v2[1] = sub_1001450B0;
      return sub_100145CF0();
    }
    uint64_t v4 = (void *)v0[6];
    uint64_t v6 = v0[4];
    uint64_t v5 = v0[5];
    uint64_t v7 = v0[3];
    swift_release();
    v0[2] = *(void *)(v5 + *(void *)(*(void *)v5 + 120));
    __n128 v8 = (void *)swift_task_alloc();
    v8[2] = v4[10];
    void v8[3] = v4[11];
    v8[4] = v4[12];
    v8[5] = v4[13];
    void v8[6] = v7;
    v8[7] = v6;
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRetain();
  }
  sub_100145B04();
  sub_1000B069C(v0[3], v0[4]);
  sub_100145BF8();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001450B0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = sub_100145270;
  }
  else
  {
    v4[12] = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = sub_1001451D8;
  }
  return _swift_task_switch(v7, v5, v6);
}

uint64_t sub_1001451D8()
{
  swift_release();
  sub_100145B04();
  sub_1000B069C(v0[3], v0[4]);
  sub_100145BF8();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100145270()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001452DC(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  sub_100006560(&qword_100199238);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014D8E0;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 96) + 40))(*(void *)(v11 + 80));
  *(void *)(v12 + 56) = &type metadata for AnalyticsString;
  *(void *)(v12 + 64) = &off_10019BA08;
  *(unsigned char *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v12 + 104) = &off_10019B9E0;
  *(unsigned char *)(v12 + 72) = 2;
  *(void *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v12 + 144) = &off_10019BA68;
  *(unsigned char *)(v12 + 112) = a1;
  *(void *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v12 + 184) = &off_10019BA40;
  *(void *)(v12 + 152) = a2;
  *(void *)(v12 + 160) = a3;
  *(unsigned char *)(v12 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v15 = *(void *)(a5 + 64);
    unint64_t v16 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v32 = &type metadata for AnalyticsString;
  uint64_t v33 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v30 = v15;
  uint64_t v31 = (Class (*)(uint64_t))v16;
  sub_1000298CC(a2, a3, a4);
  uint64_t v35 = (char *)v12;
  unint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  if (v17 >= v18 >> 1) {
    uint64_t v35 = sub_1000AB884((char *)(v18 > 1), v17 + 1, 1, (char *)v12);
  }
  uint64_t v19 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v23 + 16))(v22, v20);
  sub_1000AC33C(v17, (uint64_t)v22, (uint64_t *)&v35, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  char v24 = v35;
  NSString v25 = String._bridgeToObjectiveC()();
  char v26 = (void *)swift_allocObject();
  v26[2] = 0xD00000000000001ELL;
  void v26[3] = 0x8000000100157480;
  v26[4] = v24;
  uint64_t v33 = sub_100029A98;
  uint64_t v34 = v26;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1000AB7F8;
  uint64_t v32 = (ValueMetadata *)&unk_100193AB8;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v27);
  swift_bridgeObjectRelease();
}

uint64_t sub_100145634()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100145724()
{
  return swift_release();
}

uint64_t sub_10014581C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10014590C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100145A00(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 96) + 40))(*(void *)(*(void *)v1 + 80));
  sub_1000AC7F8(v3, v4, 2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100145AA0()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  if (v1 == (id)1) {
    return 200;
  }
  else {
    return 100;
  }
}

uint64_t sub_100145B04()
{
  return static Published.subscript.setter();
}

uint64_t sub_100145BF8()
{
  return static Published.subscript.setter();
}

uint64_t sub_100145CF0()
{
  v1[3] = v0;
  v1[4] = *v0;
  type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6] = v3;
  v1[7] = v2;
  return _swift_task_switch(sub_100145DB0, v3, v2);
}

uint64_t sub_100145DB0()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = sub_100145E58;
  return sub_10004E670();
}

uint64_t sub_100145E58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 80) = a2;
  *(void *)(v6 + 88) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v9 = sub_1001460E4;
  }
  else
  {
    *(unsigned char *)(v6 + 96) = a3;
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v9 = sub_100145F84;
  }
  return _swift_task_switch(v9, v7, v8);
}

uint64_t sub_100145F84()
{
  char v1 = *(unsigned char *)(v0 + 96);
  swift_release();
  if (v1)
  {
    uint64_t v6 = static Array._allocateUninitialized(_:)();
  }
  else
  {
    *(void *)(v0 + 16) = *(void *)(*(void *)(v0 + 24) + *(void *)(**(void **)(v0 + 24) + 120));
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = (void *)swift_task_alloc();
    uint64_t v5[2] = v4[10];
    v5[3] = v4[11];
    v5[4] = v4[12];
    v5[5] = v4[13];
    v5[6] = v3;
    v5[7] = v2;
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v6 = _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

uint64_t sub_1001460E4()
{
  swift_release();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100146148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a3;
  uint64_t v28 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a7 + 216))(a5, a7, v12);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    char v16 = 0;
  }
  else
  {
    uint64_t v18 = v28;
    uint64_t v17 = v29;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    __n128 v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v14, AssociatedTypeWitness);
    if (v20)
    {
      id v21 = [v20 country];

      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      if (v22 == v18 && v24 == v17)
      {
        swift_bridgeObjectRelease();
        char v16 = 1;
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v16 = 0;
    }
  }
  return v16 & 1;
}

BOOL sub_100146404(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  char v16 = (char *)v27 - v15;
  v27[7] = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a7 + 216))(a5, a7, v14);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    double v20 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    double v22 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v16, AssociatedTypeWitness);
    id v23 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v20 longitude:v22];
    id v24 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:a1 longitude:a2];
    [v24 distanceFromLocation:v23];
    double v26 = v25;

    return v26 <= 161000.0;
  }
}

uint64_t sub_1001466BC()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 144);
  type metadata accessor for Array();
  uint64_t v4 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v6 = sub_100006560(&qword_10019AD00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v8 = sub_100006560(&qword_100199220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001469AC()
{
  sub_1001466BC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ArtistEventViewModel()
{
  return swift_getGenericMetadata();
}

Swift::Int sub_100146A1C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000EBAD8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100146A88(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100146A88(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      return sub_1001471B0(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_141;
  }
  Swift::Int v90 = result;
  uint64_t v87 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    long long v92 = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v89 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
LABEL_99:
      if (v11 >= 2)
      {
        uint64_t v81 = *v87;
        do
        {
          unint64_t v82 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_128;
          }
          if (!v81) {
            goto LABEL_140;
          }
          uint64_t v83 = *(void *)&v8[16 * v82 + 32];
          uint64_t v84 = *(void *)&v8[16 * v11 + 24];
          sub_1001472A8((char *)(v81 + 16 * v83), (char *)(v81 + 16 * *(void *)&v8[16 * v11 + 16]), v81 + 16 * v84, v92);
          if (v1) {
            break;
          }
          if (v84 < v83) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_1000EB348((uint64_t)v8);
          }
          if (v82 >= *((void *)v8 + 2)) {
            goto LABEL_130;
          }
          uint64_t v85 = &v8[16 * v82 + 32];
          *(void *)uint64_t v85 = v83;
          *((void *)v85 + 1) = v84;
          unint64_t v86 = *((void *)v8 + 2);
          if (v11 > v86) {
            goto LABEL_131;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v86 - v11));
          *((void *)v8 + 2) = v86 - 1;
          unint64_t v11 = v86 - 1;
        }
        while (v86 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      v89[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v89 = (void *)v7;
    long long v92 = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v88 = *a1 + 24;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v91 = v3;
LABEL_15:
  Swift::Int v12 = v9++;
  if (v9 >= v3) {
    goto LABEL_32;
  }
  sub_10002374C();
  uint64_t v13 = StringProtocol.localizedStandardCompare<A>(_:)();
  Swift::Int v9 = v12 + 2;
  if (v12 + 2 >= v3) {
    goto LABEL_21;
  }
  uint64_t v14 = v88 + 16 * v12;
  do
  {
    v14 += 16;
    if ((v13 == -1) == (StringProtocol.localizedStandardCompare<A>(_:)() != -1))
    {
      Swift::Int v3 = v91;
      if (v13 == -1) {
        goto LABEL_24;
      }
LABEL_32:
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v12)) {
          goto LABEL_132;
        }
        if (v9 - v12 < v90)
        {
          if (__OFADD__(v12, v90)) {
            goto LABEL_134;
          }
          if (v12 + v90 >= v3) {
            Swift::Int v22 = v3;
          }
          else {
            Swift::Int v22 = v12 + v90;
          }
          if (v22 < v12)
          {
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if (v9 != v22)
          {
            sub_10002374C();
            id v23 = (void *)(v10 + 16 * v9);
            do
            {
              Swift::Int v24 = v12;
              double v25 = v23;
              do
              {
                if (StringProtocol.localizedStandardCompare<A>(_:)() != -1) {
                  break;
                }
                if (!v10) {
                  goto LABEL_137;
                }
                uint64_t v26 = *v25;
                uint64_t v27 = v25[1];
                *(_OWORD *)double v25 = *((_OWORD *)v25 - 1);
                *(v25 - 1) = v27;
                *(v25 - 2) = v26;
                v25 -= 2;
                ++v24;
              }
              while (v9 != v24);
              ++v9;
              v23 += 2;
            }
            while (v9 != v22);
            Swift::Int v9 = v22;
          }
        }
      }
      if (v9 < v12) {
        goto LABEL_127;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1000EB050(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v29 = *((void *)v8 + 2);
      unint64_t v28 = *((void *)v8 + 3);
      unint64_t v11 = v29 + 1;
      if (v29 >= v28 >> 1) {
        uint64_t v8 = sub_1000EB050((char *)(v28 > 1), v29 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      long long v93 = v8 + 32;
      uint64_t v30 = &v8[16 * v29 + 32];
      *(void *)uint64_t v30 = v12;
      *((void *)v30 + 1) = v9;
      if (v29)
      {
        uint64_t v31 = v8 + 32;
        while (1)
        {
          unint64_t v32 = v11 - 1;
          if (v11 >= 4)
          {
            uint64_t v37 = &v31[16 * v11];
            uint64_t v38 = *((void *)v37 - 8);
            uint64_t v39 = *((void *)v37 - 7);
            BOOL v43 = __OFSUB__(v39, v38);
            uint64_t v40 = v39 - v38;
            if (v43) {
              goto LABEL_116;
            }
            uint64_t v42 = *((void *)v37 - 6);
            uint64_t v41 = *((void *)v37 - 5);
            BOOL v43 = __OFSUB__(v41, v42);
            uint64_t v35 = v41 - v42;
            char v36 = v43;
            if (v43) {
              goto LABEL_117;
            }
            unint64_t v44 = v11 - 2;
            long long v45 = &v31[16 * v11 - 32];
            uint64_t v47 = *(void *)v45;
            uint64_t v46 = *((void *)v45 + 1);
            BOOL v43 = __OFSUB__(v46, v47);
            uint64_t v48 = v46 - v47;
            if (v43) {
              goto LABEL_119;
            }
            BOOL v43 = __OFADD__(v35, v48);
            uint64_t v49 = v35 + v48;
            if (v43) {
              goto LABEL_122;
            }
            if (v49 >= v40)
            {
              char v67 = &v31[16 * v32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v43 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v43) {
                goto LABEL_126;
              }
              BOOL v60 = v35 < v70;
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v61 = *((void *)v8 + 4);
              uint64_t v62 = *((void *)v8 + 5);
              BOOL v43 = __OFSUB__(v62, v61);
              uint64_t v54 = v62 - v61;
              char v55 = v43;
              goto LABEL_81;
            }
            uint64_t v34 = *((void *)v8 + 4);
            uint64_t v33 = *((void *)v8 + 5);
            BOOL v43 = __OFSUB__(v33, v34);
            uint64_t v35 = v33 - v34;
            char v36 = v43;
          }
          if (v36) {
            goto LABEL_118;
          }
          unint64_t v44 = v11 - 2;
          uint64_t v50 = &v31[16 * v11 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v54 = v51 - v52;
          char v55 = v53;
          if (v53) {
            goto LABEL_121;
          }
          char v56 = &v31[16 * v32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v43 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v43) {
            goto LABEL_124;
          }
          if (__OFADD__(v54, v59)) {
            goto LABEL_125;
          }
          if (v54 + v59 >= v35)
          {
            BOOL v60 = v35 < v59;
LABEL_87:
            if (v60) {
              unint64_t v32 = v44;
            }
            goto LABEL_89;
          }
LABEL_81:
          if (v55) {
            goto LABEL_120;
          }
          uint64_t v63 = &v31[16 * v32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v43 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v43) {
            goto LABEL_123;
          }
          if (v66 < v54) {
            goto LABEL_14;
          }
LABEL_89:
          unint64_t v71 = v32 - 1;
          if (v32 - 1 >= v11)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          uint64_t v72 = v10;
          if (!v10) {
            goto LABEL_138;
          }
          uint64_t v73 = v8;
          uint64_t v74 = &v31[16 * v71];
          uint64_t v75 = v31;
          uint64_t v76 = *(void *)v74;
          uint64_t v77 = &v75[16 * v32];
          uint64_t v78 = *((void *)v77 + 1);
          uint64_t v79 = v72;
          sub_1001472A8((char *)(v72 + 16 * *(void *)v74), (char *)(v72 + 16 * *(void *)v77), v72 + 16 * v78, v92);
          if (v1) {
            goto LABEL_110;
          }
          if (v78 < v76) {
            goto LABEL_113;
          }
          if (v32 > *((void *)v73 + 2)) {
            goto LABEL_114;
          }
          *(void *)uint64_t v74 = v76;
          uint64_t v31 = v93;
          *(void *)&v93[16 * v71 + 8] = v78;
          unint64_t v80 = *((void *)v73 + 2);
          if (v32 >= v80) {
            goto LABEL_115;
          }
          uint64_t v8 = v73;
          unint64_t v11 = v80 - 1;
          memmove(v77, v77 + 16, 16 * (v80 - 1 - v32));
          *((void *)v73 + 2) = v80 - 1;
          uint64_t v10 = v79;
          if (v80 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_14:
      Swift::Int v3 = v91;
      if (v9 >= v91) {
        goto LABEL_99;
      }
      goto LABEL_15;
    }
    ++v9;
    Swift::Int v3 = v91;
  }
  while (v91 != v9);
  Swift::Int v9 = v91;
LABEL_21:
  if (v13 != -1) {
    goto LABEL_32;
  }
LABEL_24:
  if (v9 >= v12)
  {
    if (v12 < v9)
    {
      uint64_t v15 = 16 * v9;
      uint64_t v16 = 16 * v12;
      Swift::Int v17 = v9;
      Swift::Int v18 = v12;
      while (1)
      {
        if (v18 != --v17)
        {
          if (!v10) {
            goto LABEL_139;
          }
          uint64_t v19 = v10 + v15;
          uint64_t v20 = *(void *)(v10 + v16);
          uint64_t v21 = *(void *)(v10 + v16 + 8);
          *(_OWORD *)(v10 + v16) = *(_OWORD *)(v10 + v15 - 16);
          *(void *)(v19 - 16) = v20;
          *(void *)(v19 - 8) = v21;
        }
        ++v18;
        v15 -= 16;
        v16 += 16;
        if (v18 >= v17) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_32;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001471B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    sub_10002374C();
    uint64_t v6 = (void *)(v5 + 16 * v4);
LABEL_5:
    uint64_t v7 = v12;
    uint64_t v8 = v6;
    while (1)
    {
      Swift::Int result = StringProtocol.localizedStandardCompare<A>(_:)();
      if (result != -1)
      {
LABEL_4:
        ++v4;
        v6 += 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      *(_OWORD *)uint64_t v8 = *((_OWORD *)v8 - 1);
      *(v8 - 1) = v10;
      *(v8 - 2) = v9;
      v8 -= 2;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001472A8(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = a2 - __src;
  int64_t v8 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v8 = a2 - __src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  id v23 = __src;
  Swift::Int v22 = a4;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (a4 != a2 || &a2[16 * v12] <= a4) {
        memmove(a4, a2, 16 * v12);
      }
      uint64_t v15 = &a4[16 * v12];
      uint64_t v21 = v15;
      id v23 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        sub_10002374C();
        uint64_t v16 = (char *)(a3 - 16);
        Swift::Int v17 = v5;
        do
        {
          Swift::Int v18 = v16 + 16;
          v17 -= 16;
          if (StringProtocol.localizedStandardCompare<A>(_:)() == -1)
          {
            if (v18 != v5 || v16 >= v5) {
              *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
            }
            id v23 = v17;
          }
          else
          {
            uint64_t v21 = v15 - 16;
            if (v18 < v15 || v16 >= v15 || v18 != v15) {
              *(_OWORD *)uint64_t v16 = *((_OWORD *)v15 - 1);
            }
            Swift::Int v17 = v5;
            v15 -= 16;
          }
          if (v17 <= v6) {
            break;
          }
          v16 -= 16;
          uint64_t v5 = v17;
        }
        while (v15 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v7 >= -15)
  {
    uint64_t v13 = a4;
    if (a4 != __src || &__src[16 * v9] <= a4) {
      memmove(a4, __src, 16 * v9);
    }
    uint64_t v21 = &a4[16 * v9];
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      sub_10002374C();
      do
      {
        if (StringProtocol.localizedStandardCompare<A>(_:)() == -1)
        {
          uint64_t v14 = v5 + 16;
          if (v6 < v5 || v6 >= v14 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
        }
        else
        {
          if (v6 != v13) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
          }
          v13 += 16;
          Swift::Int v22 = v13;
          uint64_t v14 = v5;
        }
        v6 += 16;
        if (v13 >= &a4[16 * v9]) {
          break;
        }
        uint64_t v5 = v14;
      }
      while ((unint64_t)v14 < a3);
      id v23 = v6;
    }
LABEL_43:
    sub_1000EB28C((void **)&v23, (const void **)&v22, &v21);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100147588()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1001475C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001475D8()
{
  return swift_release();
}

uint64_t sub_1001475E8()
{
  return 32;
}

__n128 sub_1001475F4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100147600(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v13 - v7;
  uint64_t v14 = v3[10];
  uint64_t v9 = v14;
  uint64_t v15 = v4;
  uint64_t v16 = v3[12];
  uint64_t v10 = v16;
  uint64_t v17 = v3[13];
  uint64_t v11 = v17;
  swift_getKeyPath();
  v13[0] = v9;
  v13[1] = v4;
  v13[2] = v10;
  _OWORD v13[3] = v11;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100147790()
{
  return 32;
}

__n128 sub_10014779C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001477A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100145634();
  *a1 = result;
  return result;
}

uint64_t sub_1001477D4()
{
  return sub_100145B04();
}

uint64_t sub_100147800()
{
  return 32;
}

__n128 sub_10014780C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100147818(uint64_t a1)
{
  return sub_100146148(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

BOOL sub_100147840(uint64_t a1)
{
  return sub_100146404(*(double *)(v1 + 48), *(double *)(v1 + 56), a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100147868@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100144CD0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100147894(uint64_t a1)
{
  return sub_100145BF8();
}

uint64_t sub_1001478D8()
{
  return 32;
}

__n128 sub_1001478E4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001478F0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100147960(v0, qword_1001AA440);
  sub_10003345C(v0, (uint64_t)qword_1001AA440);
  return Logger.init(subsystem:category:)();
}

uint64_t *sub_100147960(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1001479C4()
{
  return sub_100147A54((unint64_t *)&qword_10019BD90, (void (*)(uint64_t))&type metadata accessor for Artist);
}

uint64_t sub_100147A0C()
{
  return sub_100147A54(&qword_10019B778, (void (*)(uint64_t))&type metadata accessor for Genre);
}

uint64_t sub_100147A54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100147A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = (*(uint64_t (**)(void))(a2 + 40))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  Array.init<A>(_:)();
  uint64_t v4 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v4;
  void v11[2] = a1;
  v11[3] = a2;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_10014803C((void (*)(char *, char *))sub_100148504, (uint64_t)v11, v5, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v7);
  swift_bridgeObjectRelease();
  uint64_t v12 = v8;
  sub_100006560(&qword_10019F7D8);
  sub_10012A140();
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100147CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v12 - 8);
  uint64_t v23 = v12;
  __n128 v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 40))(a1, a2, v13);
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_5:
    uint64_t v19 = (_OWORD *)v24;
    *(void *)(v24 + 32) = 0;
    *uint64_t v19 = 0u;
    v19[1] = 0u;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, AssociatedTypeWitness);
  uint64_t v18 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v11) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    goto LABEL_5;
  }
  uint64_t v20 = (uint64_t *)v24;
  *(void *)(v24 + 24) = v11;
  void v20[4] = swift_getAssociatedConformanceWitness();
  uint64_t v21 = sub_100035868(v20);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v18 + 32))(v21, v15, v11);
}

uint64_t sub_10014803C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  if (!v18) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v19 = v18;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  uint64_t v36 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v22 = v11;
      uint64_t v23 = v11;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
      uint64_t v11 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_100148444@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_100148504@<X0>(uint64_t *a1@<X8>)
{
  return sub_100148444(a1);
}

uint64_t sub_100148524()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t static LocationButton.Title.currentLocation.getter()
{
  return static LocationButton.Title.currentLocation.getter();
}

uint64_t type metadata accessor for LocationButton.Title()
{
  return type metadata accessor for LocationButton.Title();
}

uint64_t type metadata accessor for LocationButton()
{
  return type metadata accessor for LocationButton();
}

uint64_t LocationButton.init(_:action:)()
{
  return LocationButton.init(_:action:)();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.percentEncodedQuery.getter()
{
  return URLComponents.percentEncodedQuery.getter();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t AttributeScopes.SwiftUIAttributes.font.getter()
{
  return AttributeScopes.SwiftUIAttributes.font.getter();
}

uint64_t AttributedString.subscript.setter()
{
  return AttributedString.subscript.setter();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)()
{
  return AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return type metadata accessor for AttributedString.MarkdownParsingOptions();
}

uint64_t AttributedString.init(markdown:options:baseURL:)()
{
  return AttributedString.init(markdown:options:baseURL:)();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

uint64_t AttributedString.init(_:attributes:)()
{
  return AttributedString.init(_:attributes:)();
}

uint64_t AttributedString.init(_:)()
{
  return AttributedString.init(_:)();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t AttributeContainer.init()()
{
  return AttributeContainer.init()();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t static URL.temporaryDirectory.getter()
{
  return static URL.temporaryDirectory.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.appending(queryItems:)()
{
  return URL.appending(queryItems:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

Swift::String_optional __swiftcall Locale.localizedString(forRegionCode:)(Swift::String forRegionCode)
{
  uint64_t v1 = Locale.localizedString(forRegionCode:)(forRegionCode._countAndFlagsBits, forRegionCode._object);
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.compare(_:to:toGranularity:)()
{
  return Calendar.compare(_:to:toGranularity:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t Calendar.timeZone.getter()
{
  return Calendar.timeZone.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t Calendar.component(_:from:)()
{
  return Calendar.component(_:from:)();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)TimeZone._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t type metadata accessor for EventsError()
{
  return type metadata accessor for EventsError();
}

uint64_t Participants<>.headliners.getter()
{
  return Participants<>.headliners.getter();
}

uint64_t Participants<>.support.getter()
{
  return Participants<>.support.getter();
}

uint64_t VenueSchedule.venue.getter()
{
  return VenueSchedule.venue.getter();
}

uint64_t VenueSchedule.events.getter()
{
  return VenueSchedule.events.getter();
}

uint64_t PromotionalAssets.PhotoAlbum.Photo.url.getter()
{
  return PromotionalAssets.PhotoAlbum.Photo.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhotoAlbum.Photo()
{
  return type metadata accessor for PromotionalAssets.PhotoAlbum.Photo();
}

uint64_t PromotionalAssets.PhotoAlbum.photos.getter()
{
  return PromotionalAssets.PhotoAlbum.photos.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhotoAlbum()
{
  return type metadata accessor for PromotionalAssets.PhotoAlbum();
}

uint64_t PromotionalAssets.watchFaces.getter()
{
  return PromotionalAssets.watchFaces.getter();
}

uint64_t PromotionalAssets.photoAlbums.getter()
{
  return PromotionalAssets.photoAlbums.getter();
}

uint64_t PromotionalAssets.PhoneWallpaper.url.getter()
{
  return PromotionalAssets.PhoneWallpaper.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.PhoneWallpaper()
{
  return type metadata accessor for PromotionalAssets.PhoneWallpaper();
}

uint64_t PromotionalAssets.phoneWallpapers.getter()
{
  return PromotionalAssets.phoneWallpapers.getter();
}

uint64_t PromotionalAssets.Video.id.getter()
{
  return PromotionalAssets.Video.id.getter();
}

uint64_t PromotionalAssets.Video.title.getter()
{
  return PromotionalAssets.Video.title.getter();
}

uint64_t PromotionalAssets.Video.videoURL.getter()
{
  return PromotionalAssets.Video.videoURL.getter();
}

uint64_t type metadata accessor for PromotionalAssets.Video()
{
  return type metadata accessor for PromotionalAssets.Video();
}

uint64_t PromotionalAssets.videos.getter()
{
  return PromotionalAssets.videos.getter();
}

uint64_t PromotionalAssets.WatchFace.previewURL.getter()
{
  return PromotionalAssets.WatchFace.previewURL.getter();
}

uint64_t PromotionalAssets.WatchFace.url.getter()
{
  return PromotionalAssets.WatchFace.url.getter();
}

uint64_t type metadata accessor for PromotionalAssets.WatchFace()
{
  return type metadata accessor for PromotionalAssets.WatchFace();
}

uint64_t type metadata accessor for PromotionalAssets()
{
  return type metadata accessor for PromotionalAssets();
}

uint64_t ArtistPromotionalAssets.promotionalAssets.getter()
{
  return ArtistPromotionalAssets.promotionalAssets.getter();
}

uint64_t ArtistPromotionalAssets.eventWithPromotionalAssets.getter()
{
  return ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
}

uint64_t type metadata accessor for ArtistPromotionalAssets()
{
  return type metadata accessor for ArtistPromotionalAssets();
}

uint64_t Event.dataProvider.getter()
{
  return Event.dataProvider.getter();
}

uint64_t Event.id.getter()
{
  return Event.id.getter();
}

uint64_t Event.Time.dateInterval.getter()
{
  return Event.Time.dateInterval.getter();
}

uint64_t Event.Time.timeZone.getter()
{
  return Event.Time.timeZone.getter();
}

uint64_t Event.name.getter()
{
  return Event.name.getter();
}

uint64_t Event.time.getter()
{
  return Event.time.getter();
}

uint64_t Event.webURL.getter()
{
  return Event.webURL.getter();
}

uint64_t Event.infoURL.getter()
{
  return Event.infoURL.getter();
}

uint64_t Event<>.participants.getter()
{
  return Event<>.participants.getter();
}

uint64_t Event<>.artistPromotionalAssets.getter()
{
  return Event<>.artistPromotionalAssets.getter();
}

uint64_t Event<>.genres.getter()
{
  return Event<>.genres.getter();
}

uint64_t Event<>.setlist.getter()
{
  return Event<>.setlist.getter();
}

uint64_t Event<>.playlists.getter()
{
  return Event<>.playlists.getter();
}

uint64_t Genre.name.getter()
{
  return Genre.name.getter();
}

uint64_t type metadata accessor for Genre()
{
  return type metadata accessor for Genre();
}

uint64_t Venue.id.getter()
{
  return Venue.id.getter();
}

uint64_t Venue.name.getter()
{
  return Venue.name.getter();
}

uint64_t Venue.address.getter()
{
  return Venue.address.getter();
}

uint64_t Venue.location.getter()
{
  return Venue.location.getter();
}

uint64_t type metadata accessor for Venue()
{
  return type metadata accessor for Venue();
}

uint64_t Artist.id.getter()
{
  return Artist.id.getter();
}

{
  return Artist.id.getter();
}

uint64_t Artist.name.getter()
{
  return Artist.name.getter();
}

{
  return Artist.name.getter();
}

uint64_t Artist.artwork.getter()
{
  return Artist.artwork.getter();
}

uint64_t type metadata accessor for Artist()
{
  return type metadata accessor for Artist();
}

{
  return type metadata accessor for Artist();
}

uint64_t Ticket.url.getter()
{
  return Ticket.url.getter();
}

uint64_t Ticket.vendor.getter()
{
  return Ticket.vendor.getter();
}

uint64_t type metadata accessor for Ticket()
{
  return type metadata accessor for Ticket();
}

uint64_t Artwork.backgroundColor.getter()
{
  return Artwork.backgroundColor.getter();
}

{
  return Artwork.backgroundColor.getter();
}

uint64_t Artwork.url(width:height:)()
{
  return Artwork.url(width:height:)();
}

{
  return Artwork.url(width:height:)();
}

uint64_t Setlist.Song.adamID.getter()
{
  return Setlist.Song.adamID.getter();
}

uint64_t Setlist.songs.getter()
{
  return Setlist.songs.getter();
}

uint64_t Playlist.id.getter()
{
  return Playlist.id.getter();
}

uint64_t type metadata accessor for Playlist()
{
  return type metadata accessor for Playlist();
}

{
  return type metadata accessor for Playlist();
}

uint64_t Schedule.events.getter()
{
  return Schedule.events.getter();
}

uint64_t Schedule.owners.getter()
{
  return Schedule.owners.getter();
}

uint64_t Map.init<A>(position:bounds:interactionModes:scope:content:)()
{
  return Map.init<A>(position:bounds:interactionModes:scope:content:)();
}

uint64_t Map.init<>(position:bounds:interactionModes:scope:)()
{
  return Map.init<>(position:bounds:interactionModes:scope:)();
}

uint64_t type metadata accessor for MapCameraBounds()
{
  return type metadata accessor for MapCameraBounds();
}

uint64_t static MapCameraPosition.camera(_:)()
{
  return static MapCameraPosition.camera(_:)();
}

uint64_t type metadata accessor for MapCameraPosition()
{
  return type metadata accessor for MapCameraPosition();
}

uint64_t static MapInteractionModes.all.getter()
{
  return static MapInteractionModes.all.getter();
}

uint64_t static MapInteractionModes.zoom.getter()
{
  return static MapInteractionModes.zoom.getter();
}

uint64_t static MapInteractionModes.pitch.getter()
{
  return static MapInteractionModes.pitch.getter();
}

uint64_t type metadata accessor for MapInteractionModes()
{
  return type metadata accessor for MapInteractionModes();
}

uint64_t MapCamera.init(centerCoordinate:distance:heading:pitch:)()
{
  return MapCamera.init(centerCoordinate:distance:heading:pitch:)();
}

uint64_t type metadata accessor for MapCamera()
{
  return type metadata accessor for MapCamera();
}

uint64_t Marker.init<A>(_:systemImage:coordinate:)()
{
  return Marker.init<A>(_:systemImage:coordinate:)();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t static Published.subscript.modify()
{
  return static Published.subscript.modify();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t AsyncImage.init(url:scale:transaction:content:)()
{
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t DatePicker.init(selection:in:displayedComponents:label:)()
{
  return DatePicker.init(selection:in:displayedComponents:label:)();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t FocusState.wrappedValue.setter()
{
  return FocusState.wrappedValue.setter();
}

uint64_t FocusState.projectedValue.getter()
{
  return FocusState.projectedValue.getter();
}

uint64_t FocusState.init<>()()
{
  return FocusState.init<>()();
}

uint64_t LazyHStack.init(alignment:spacing:pinnedViews:content:)()
{
  return LazyHStack.init(alignment:spacing:pinnedViews:content:)();
}

uint64_t type metadata accessor for LazyHStack()
{
  return type metadata accessor for LazyHStack();
}

uint64_t type metadata accessor for ScrollView()
{
  return type metadata accessor for ScrollView();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for ControlSize()
{
  return type metadata accessor for ControlSize();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t StateObject.init(wrappedValue:)()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t ToolbarItem<>.init(placement:content:)()
{
  return ToolbarItem<>.init(placement:content:)();
}

uint64_t Transaction.disablesAnimations.setter()
{
  return Transaction.disablesAnimations.setter();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t Transaction.init(animation:)()
{
  return Transaction.init(animation:)();
}

uint64_t WindowGroup.init(id:title:lazyContent:)()
{
  return WindowGroup.init(id:title:lazyContent:)();
}

uint64_t ProgressView.init<A>(value:total:)()
{
  return ProgressView.init<A>(value:total:)();
}

uint64_t ProgressView<>.init<>()()
{
  return ProgressView<>.init<>()();
}

uint64_t ProgressView<>.init<>(_:)()
{
  return ProgressView<>.init<>(_:)();
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)()
{
  return ScaledMetric.init(wrappedValue:relativeTo:)();
}

uint64_t ScaledMetric.wrappedValue.getter()
{
  return ScaledMetric.wrappedValue.getter();
}

uint64_t type metadata accessor for ScaledMetric()
{
  return type metadata accessor for ScaledMetric();
}

uint64_t static SceneBuilder.buildBlock<A>(_:)()
{
  return static SceneBuilder.buildBlock<A>(_:)();
}

uint64_t TimelineView<>.init(_:content:)()
{
  return TimelineView<>.init(_:content:)();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return AnyTransition.init<A>(_:)();
}

Swift::Void __swiftcall DismissAction.callAsFunction()()
{
}

uint64_t type metadata accessor for DismissAction()
{
  return type metadata accessor for DismissAction();
}

uint64_t GeometryProxy.safeAreaInsets.getter()
{
  return GeometryProxy.safeAreaInsets.getter();
}

uint64_t GeometryProxy.frame(in:)()
{
  return GeometryProxy.frame(in:)();
}

uint64_t OpenURLAction.callAsFunction(_:)()
{
  return OpenURLAction.callAsFunction(_:)();
}

uint64_t OpenURLAction.init(handler:)()
{
  return OpenURLAction.init(handler:)();
}

uint64_t type metadata accessor for OpenURLAction()
{
  return type metadata accessor for OpenURLAction();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t GeometryReader.init(content:)()
{
  return GeometryReader.init(content:)();
}

uint64_t type metadata accessor for GeometryReader()
{
  return type metadata accessor for GeometryReader();
}

uint64_t HorizontalEdge.rawValue.getter()
{
  return HorizontalEdge.rawValue.getter();
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t type metadata accessor for NavigationPath()
{
  return type metadata accessor for NavigationPath();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return ObservedObject.Wrapper.subscript.getter();
}

uint64_t PlainListStyle.init()()
{
  return PlainListStyle.init()();
}

uint64_t type metadata accessor for PlainListStyle()
{
  return type metadata accessor for PlainListStyle();
}

uint64_t SymbolVariants.fill.getter()
{
  return SymbolVariants.fill.getter();
}

uint64_t static SymbolVariants.fill.getter()
{
  return static SymbolVariants.fill.getter();
}

uint64_t static SymbolVariants.square.getter()
{
  return static SymbolVariants.square.getter();
}

uint64_t type metadata accessor for SymbolVariants()
{
  return type metadata accessor for SymbolVariants();
}

uint64_t type metadata accessor for AsyncImagePhase()
{
  return type metadata accessor for AsyncImagePhase();
}

uint64_t type metadata accessor for CoordinateSpace()
{
  return type metadata accessor for CoordinateSpace();
}

uint64_t static DynamicProperty._propertyBehaviors.getter()
{
  return static DynamicProperty._propertyBehaviors.getter();
}

Swift::Void __swiftcall DynamicProperty.update()()
{
}

uint64_t type metadata accessor for LayoutDirection()
{
  return type metadata accessor for LayoutDirection();
}

uint64_t ModifiedContent<>.accessibility(inputLabels:)()
{
  return ModifiedContent<>.accessibility(inputLabels:)();
}

uint64_t ModifiedContent<>.accessibility(addTraits:)()
{
  return ModifiedContent<>.accessibility(addTraits:)();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)()
{
  return ModifiedContent<>.accessibilityHint(_:)();
}

uint64_t ModifiedContent<>.accessibilityHeading(_:)()
{
  return ModifiedContent<>.accessibilityHeading(_:)();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t NavigationStack.init<>(root:)()
{
  return NavigationStack.init<>(root:)();
}

uint64_t type metadata accessor for NavigationStack()
{
  return type metadata accessor for NavigationStack();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t static SafeAreaRegions.container.getter()
{
  return static SafeAreaRegions.container.getter();
}

uint64_t ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  return ScrollViewProxy.scrollTo<A>(_:anchor:)();
}

uint64_t type metadata accessor for ScrollViewProxy()
{
  return type metadata accessor for ScrollViewProxy();
}

uint64_t SlideTransition.init()()
{
  return SlideTransition.init()();
}

uint64_t type metadata accessor for SlideTransition()
{
  return type metadata accessor for SlideTransition();
}

uint64_t PlainButtonStyle.init()()
{
  return PlainButtonStyle.init()();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t type metadata accessor for RoundedRectangle._Inset()
{
  return type metadata accessor for RoundedRectangle._Inset();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t static ToolbarPlacement.navigationBar.getter()
{
  return static ToolbarPlacement.navigationBar.getter();
}

uint64_t type metadata accessor for ToolbarPlacement()
{
  return type metadata accessor for ToolbarPlacement();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t EnvironmentValues.controlSize.setter()
{
  return EnvironmentValues.controlSize.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.layoutDirection.getter()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t EnvironmentValues.layoutDirection.setter()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t EnvironmentValues.verticalSizeClass.setter()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  return EnvironmentValues.isLuminanceReduced.getter();
}

uint64_t EnvironmentValues.isLuminanceReduced.setter()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t EnvironmentValues.horizontalSizeClass.setter()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t EnvironmentValues.symbolRenderingMode.setter()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.tint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t EnvironmentValues.tint.setter()
{
  return EnvironmentValues.tint.setter();
}

uint64_t EnvironmentValues.dismiss.getter()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t EnvironmentValues.openURL.getter()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t EnvironmentValues.openURL.setter()
{
  return EnvironmentValues.openURL.setter();
}

uint64_t EnvironmentValues.textCase.getter()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t EnvironmentValues.textCase.setter()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t EnvironmentValues.tintColor.setter()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t type metadata accessor for NavigationBarItem.TitleDisplayMode()
{
  return type metadata accessor for NavigationBarItem.TitleDisplayMode();
}

uint64_t static VerticalAlignment.top.getter()
{
  return static VerticalAlignment.top.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t LocalizedStringKey.init(_:)()
{
  return LocalizedStringKey.init(_:)();
}

uint64_t static PresentationDetent.large.getter()
{
  return static PresentationDetent.large.getter();
}

uint64_t static PresentationDetent.medium.getter()
{
  return static PresentationDetent.medium.getter();
}

uint64_t type metadata accessor for PresentationDetent()
{
  return type metadata accessor for PresentationDetent();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t type metadata accessor for _AnimationModifier()
{
  return type metadata accessor for _AnimationModifier();
}

uint64_t type metadata accessor for _InsetViewModifier()
{
  return type metadata accessor for _InsetViewModifier();
}

uint64_t static AccessibilityTraits.isSelected.getter()
{
  return static AccessibilityTraits.isSelected.getter();
}

uint64_t static AccessibilityTraits.startsMediaSession.getter()
{
  return static AccessibilityTraits.startsMediaSession.getter();
}

uint64_t static AccessibilityTraits.isButton.getter()
{
  return static AccessibilityTraits.isButton.getter();
}

uint64_t static AccessibilityTraits.isHeader.getter()
{
  return static AccessibilityTraits.isHeader.getter();
}

uint64_t static AccessibilityTraits.isToggle.getter()
{
  return static AccessibilityTraits.isToggle.getter();
}

uint64_t type metadata accessor for AccessibilityTraits()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t static SymbolRenderingMode.hierarchical.getter()
{
  return static SymbolRenderingMode.hierarchical.getter();
}

uint64_t static SymbolRenderingMode.palette.getter()
{
  return static SymbolRenderingMode.palette.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t TupleToolbarContent.init(_:)()
{
  return TupleToolbarContent.init(_:)();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for _BackgroundModifier()
{
  return type metadata accessor for _BackgroundModifier();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t static DatePickerComponents.date.getter()
{
  return static DatePickerComponents.date.getter();
}

uint64_t type metadata accessor for DatePickerComponents()
{
  return type metadata accessor for DatePickerComponents();
}

uint64_t static ToolbarItemPlacement.navigationBarLeading.getter()
{
  return static ToolbarItemPlacement.navigationBarLeading.getter();
}

uint64_t static ToolbarItemPlacement.navigationBarTrailing.getter()
{
  return static ToolbarItemPlacement.navigationBarTrailing.getter();
}

uint64_t static ToolbarItemPlacement.principal.getter()
{
  return static ToolbarItemPlacement.principal.getter();
}

uint64_t type metadata accessor for ToolbarItemPlacement()
{
  return type metadata accessor for ToolbarItemPlacement();
}

uint64_t BorderlessButtonStyle.init()()
{
  return BorderlessButtonStyle.init()();
}

uint64_t type metadata accessor for BorderlessButtonStyle()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t type metadata accessor for PinnedScrollableViews()
{
  return type metadata accessor for PinnedScrollableViews();
}

uint64_t static ToolbarContentBuilder.buildBlock<A>(_:)()
{
  return static ToolbarContentBuilder.buildBlock<A>(_:)();
}

uint64_t static ToolbarContentBuilder.buildIf<A>(_:)()
{
  return static ToolbarContentBuilder.buildIf<A>(_:)();
}

uint64_t type metadata accessor for _ViewModifier_Content()
{
  return type metadata accessor for _ViewModifier_Content();
}

uint64_t static ContentMarginPlacement.automatic.getter()
{
  return static ContentMarginPlacement.automatic.getter();
}

uint64_t type metadata accessor for ContentMarginPlacement()
{
  return type metadata accessor for ContentMarginPlacement();
}

uint64_t static HierarchicalShapeStyle.quaternary.getter()
{
  return static HierarchicalShapeStyle.quaternary.getter();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return static HierarchicalShapeStyle.tertiary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t TitleAndIconLabelStyle.init()()
{
  return TitleAndIconLabelStyle.init()();
}

uint64_t type metadata accessor for TitleAndIconLabelStyle()
{
  return type metadata accessor for TitleAndIconLabelStyle();
}

uint64_t type metadata accessor for UserInterfaceSizeClass()
{
  return type metadata accessor for UserInterfaceSizeClass();
}

uint64_t SafeAreaPaddingModifier.init(edges:insets:)()
{
  return SafeAreaPaddingModifier.init(edges:insets:)();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t EnabledTextSelectability.init()()
{
  return EnabledTextSelectability.init()();
}

uint64_t type metadata accessor for EnabledTextSelectability()
{
  return type metadata accessor for EnabledTextSelectability();
}

uint64_t GraphicalDatePickerStyle.init()()
{
  return GraphicalDatePickerStyle.init()();
}

uint64_t type metadata accessor for GraphicalDatePickerStyle()
{
  return type metadata accessor for GraphicalDatePickerStyle();
}

uint64_t AnimationTimelineSchedule.init(minimumInterval:paused:)()
{
  return AnimationTimelineSchedule.init(minimumInterval:paused:)();
}

uint64_t type metadata accessor for AnimationTimelineSchedule()
{
  return type metadata accessor for AnimationTimelineSchedule();
}

uint64_t static MatchedGeometryProperties.frame.getter()
{
  return static MatchedGeometryProperties.frame.getter();
}

uint64_t static MatchedGeometryProperties.position.getter()
{
  return static MatchedGeometryProperties.position.getter();
}

uint64_t type metadata accessor for _PreferenceActionModifier()
{
  return type metadata accessor for _PreferenceActionModifier();
}

uint64_t static AccessibilityChildBehavior.ignore.getter()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t static AccessibilityChildBehavior.combine.getter()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t static AccessibilityChildBehavior.contain.getter()
{
  return static AccessibilityChildBehavior.contain.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t PagingScrollTargetBehavior.init()()
{
  return PagingScrollTargetBehavior.init()();
}

uint64_t type metadata accessor for PagingScrollTargetBehavior()
{
  return type metadata accessor for PagingScrollTargetBehavior();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return UIViewRepresentableContext.coordinator.getter();
}

uint64_t type metadata accessor for UIViewRepresentableContext()
{
  return type metadata accessor for UIViewRepresentableContext();
}

uint64_t type metadata accessor for _PreferenceWritingModifier()
{
  return type metadata accessor for _PreferenceWritingModifier();
}

uint64_t static ScrollDismissesKeyboardMode.immediately.getter()
{
  return static ScrollDismissesKeyboardMode.immediately.getter();
}

uint64_t type metadata accessor for ScrollDismissesKeyboardMode()
{
  return type metadata accessor for ScrollDismissesKeyboardMode();
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t static UIViewControllerRepresentable._layoutOptions(_:)()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

uint64_t UIViewControllerRepresentable._identifiedViewTree(in:)()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentable<>.makeCoordinator()()
{
  return UIViewControllerRepresentable<>.makeCoordinator()();
}

uint64_t ProgressViewStyleConfiguration.fractionCompleted.getter()
{
  return ProgressViewStyleConfiguration.fractionCompleted.getter();
}

uint64_t type metadata accessor for AccessibilityAttachmentModifier()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter()
{
  return static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
}

uint64_t type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior()
{
  return type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
}

uint64_t ViewAlignedScrollTargetBehavior.init(limitBehavior:)()
{
  return ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
}

uint64_t type metadata accessor for ViewAlignedScrollTargetBehavior()
{
  return type metadata accessor for ViewAlignedScrollTargetBehavior();
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter()
{
  return UIViewControllerRepresentableContext.coordinator.getter();
}

uint64_t type metadata accessor for UIViewControllerRepresentableContext()
{
  return type metadata accessor for UIViewControllerRepresentableContext();
}

uint64_t static App.main()()
{
  return static App.main()();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t Edge.init(rawValue:)()
{
  return Edge.init(rawValue:)();
}

uint64_t static Font.largeTitle.getter()
{
  return static Font.largeTitle.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.bold.getter()
{
  return static Font.Weight.bold.getter();
}

uint64_t static Font.Weight.heavy.getter()
{
  return static Font.Weight.heavy.getter();
}

uint64_t static Font.Weight.light.getter()
{
  return static Font.Weight.light.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.title2.getter()
{
  return static Font.title2.getter();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t Font.weight(_:)()
{
  return Font.weight(_:)();
}

uint64_t static Font.callout.getter()
{
  return static Font.callout.getter();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t static Font.caption2.getter()
{
  return static Font.caption2.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Link<>.init(_:sensitiveUrl:)()
{
  return Link<>.init(_:sensitiveUrl:)();
}

uint64_t List<>.init(content:)()
{
  return List<>.init(content:)();
}

uint64_t type metadata accessor for List()
{
  return type metadata accessor for List();
}

uint64_t Text.fontWeight(_:)()
{
  return Text.fontWeight(_:)();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.accessibilityHeading(_:)()
{
  return Text.accessibilityHeading(_:)();
}

uint64_t type metadata accessor for Text.Case()
{
  return type metadata accessor for Text.Case();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t static Text.Suffix.alwaysVisible(_:)()
{
  return static Text.Suffix.alwaysVisible(_:)();
}

uint64_t static Text.Suffix.none.getter()
{
  return static Text.Suffix.none.getter();
}

uint64_t static Text.Suffix.truncated(_:)()
{
  return static Text.Suffix.truncated(_:)();
}

uint64_t type metadata accessor for Text.Suffix()
{
  return type metadata accessor for Text.Suffix();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init(_:)()
{
  return Text.init(_:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.progressViewStyle<A>(_:)()
{
  return View.progressViewStyle<A>(_:)();
}

uint64_t View.background<A>(alignment:content:)()
{
  return View.background<A>(alignment:content:)();
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)()
{
  return View.background<A>(_:ignoresSafeAreaEdges:)();
}

uint64_t View.background<A>(_:alignment:)()
{
  return View.background<A>(_:alignment:)();
}

uint64_t View.fontWeight(_:)()
{
  return View.fontWeight(_:)();
}

uint64_t View.labelStyle<A>(_:)()
{
  return View.labelStyle<A>(_:)();
}

uint64_t View.preference<A>(key:value:)()
{
  return View.preference<A>(key:value:)();
}

uint64_t View.textSuffix(_:)()
{
  return View.textSuffix(_:)();
}

uint64_t View.aspectRatio(_:contentMode:)()
{
  return View.aspectRatio(_:contentMode:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.onDisappear(perform:)()
{
  return View.onDisappear(perform:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t View.accessibility(label:)()
{
  return View.accessibility(label:)();
}

uint64_t View.accessibility(hidden:)()
{
  return View.accessibility(hidden:)();
}

uint64_t View.accessibility(addTraits:)()
{
  return View.accessibility(addTraits:)();
}

uint64_t View.safeAreaInset<A>(edge:alignment:spacing:content:)()
{
  return View.safeAreaInset<A>(edge:alignment:spacing:content:)();
}

uint64_t View.symbolVariant(_:)()
{
  return View.symbolVariant(_:)();
}

uint64_t View.textSelection<A>(_:)()
{
  return View.textSelection<A>(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.contentMargins(_:_:for:)()
{
  return View.contentMargins(_:_:for:)();
}

uint64_t View.scrollDisabled(_:)()
{
  return View.scrollDisabled(_:)();
}

uint64_t View.scrollPosition<A>(id:anchor:)()
{
  return View.scrollPosition<A>(id:anchor:)();
}

uint64_t View.coordinateSpace<A>(name:)()
{
  return View.coordinateSpace<A>(name:)();
}

uint64_t View.datePickerStyle<A>(_:)()
{
  return View.datePickerStyle<A>(_:)();
}

uint64_t View.ignoresSafeArea(_:edges:)()
{
  return View.ignoresSafeArea(_:edges:)();
}

uint64_t View.navigationTitle(_:)()
{
  return View.navigationTitle(_:)();
}

uint64_t View.navigationBarTitle(_:)()
{
  return View.navigationBarTitle(_:)();
}

uint64_t View.onPreferenceChange<A>(_:perform:)()
{
  return View.onPreferenceChange<A>(_:perform:)();
}

uint64_t View.scrollTargetLayout(isEnabled:)()
{
  return View.scrollTargetLayout(isEnabled:)();
}

uint64_t View.accessibilityHidden(_:isEnabled:)()
{
  return View.accessibilityHidden(_:isEnabled:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.presentationDetents(_:)()
{
  return View.presentationDetents(_:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityHeading(_:)()
{
  return View.accessibilityHeading(_:)();
}

uint64_t View.scrollTargetBehavior<A>(_:)()
{
  return View.scrollTargetBehavior<A>(_:)();
}

uint64_t View.accessibilityAddTraits(_:)()
{
  return View.accessibilityAddTraits(_:)();
}

uint64_t View.containerRelativeFrame(_:count:span:spacing:alignment:)()
{
  return View.containerRelativeFrame(_:count:span:spacing:alignment:)();
}

uint64_t View.containerRelativeFrame(_:alignment:)()
{
  return View.containerRelativeFrame(_:alignment:)();
}

uint64_t View.onContinueUserActivity(_:perform:)()
{
  return View.onContinueUserActivity(_:perform:)();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t View.scrollDismissesKeyboard(_:)()
{
  return View.scrollDismissesKeyboard(_:)();
}

uint64_t View.accessibilityRemoveTraits(_:)()
{
  return View.accessibilityRemoveTraits(_:)();
}

uint64_t View.presentationDragIndicator(_:)()
{
  return View.presentationDragIndicator(_:)();
}

uint64_t View.navigationBarTitleDisplayMode(_:)()
{
  return View.navigationBarTitleDisplayMode(_:)();
}

uint64_t View.task(priority:_:)()
{
  return View.task(priority:_:)();
}

uint64_t View.alert<A, B>(_:isPresented:actions:message:)()
{
  return View.alert<A, B>(_:isPresented:actions:message:)();
}

uint64_t View.frame(width:height:alignment:)()
{
  return View.frame(width:height:alignment:)();
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)()
{
  return View.sheet<A>(isPresented:onDismiss:content:)();
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)()
{
  return View.sheet<A, B>(item:onDismiss:content:)();
}

uint64_t View.clipped(antialiased:)()
{
  return View.clipped(antialiased:)();
}

uint64_t View.focused(_:)()
{
  return View.focused(_:)();
}

uint64_t View.overlay<A>(alignment:content:)()
{
  return View.overlay<A>(alignment:content:)();
}

uint64_t View.overlay<A>(_:alignment:)()
{
  return View.overlay<A>(_:alignment:)();
}

uint64_t View.padding(_:)()
{
  return View.padding(_:)();
}

uint64_t View.padding(_:_:)()
{
  return View.padding(_:_:)();
}

uint64_t View.toolbar<A>(content:)()
{
  return View.toolbar<A>(content:)();
}

uint64_t View.toolbar(_:for:)()
{
  return View.toolbar(_:for:)();
}

uint64_t View.modifier<A>(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t View.onAppear(perform:)()
{
  return View.onAppear(perform:)();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return View.onChange<A>(of:initial:_:)();
}

{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t View.animation<A>(_:body:)()
{
  return View.animation<A>(_:body:)();
}

uint64_t View.animation<A>(_:value:)()
{
  return View.animation<A>(_:value:)();
}

uint64_t View.clipShape<A>(_:style:)()
{
  return View.clipShape<A>(_:style:)();
}

uint64_t View.listStyle<A>(_:)()
{
  return View.listStyle<A>(_:)();
}

uint64_t View.statusBar(hidden:)()
{
  return View.statusBar(hidden:)();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.blue.getter()
{
  return static Color.blue.getter();
}

uint64_t static Color.gray.getter()
{
  return static Color.gray.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t Color.init(_:white:opacity:)()
{
  return Color.init(_:white:opacity:)();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

{
  return Color.init(_:)();
}

uint64_t Group<A>.init(content:)()
{
  return Group<A>.init(content:)();
}

uint64_t type metadata accessor for Group()
{
  return type metadata accessor for Group();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t Image.renderingMode(_:)()
{
  return Image.renderingMode(_:)();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t type metadata accessor for Image.TemplateRenderingMode()
{
  return type metadata accessor for Image.TemplateRenderingMode();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t Image.init(_:bundle:)()
{
  return Image.init(_:bundle:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t type metadata accessor for State()
{
  return type metadata accessor for State();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t type metadata accessor for Button()
{
  return type metadata accessor for Button();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for HStack()
{
  return type metadata accessor for HStack();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for VStack()
{
  return type metadata accessor for VStack();
}

uint64_t ZStack.init(alignment:content:)()
{
  return ZStack.init(alignment:content:)();
}

uint64_t type metadata accessor for ZStack()
{
  return type metadata accessor for ZStack();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Binding.subscript.getter()
{
  return Binding.subscript.getter();
}

uint64_t Binding.projectedValue.getter()
{
  return Binding.projectedValue.getter();
}

uint64_t Binding.init(get:set:)()
{
  return Binding.init(get:set:)();
}

uint64_t static Binding.constant(_:)()
{
  return static Binding.constant(_:)();
}

uint64_t type metadata accessor for Binding()
{
  return type metadata accessor for Binding();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t type metadata accessor for ForEach()
{
  return type metadata accessor for ForEach();
}

uint64_t Section<>.init(header:content:)()
{
  return Section<>.init(header:content:)();
}

uint64_t type metadata accessor for Section()
{
  return type metadata accessor for Section();
}

uint64_t Bindable.wrappedValue.getter()
{
  return Bindable.wrappedValue.getter();
}

uint64_t Bindable.projectedValue.getter()
{
  return Bindable.projectedValue.getter();
}

uint64_t Bindable<A>.init(wrappedValue:)()
{
  return Bindable<A>.init(wrappedValue:)();
}

uint64_t Bindable<A>.subscript.getter()
{
  return Bindable<A>.subscript.getter();
}

uint64_t type metadata accessor for Bindable()
{
  return type metadata accessor for Bindable();
}

uint64_t Gradient.init(colors:)()
{
  return Gradient.init(colors:)();
}

uint64_t type metadata accessor for GridItem.Size()
{
  return type metadata accessor for GridItem.Size();
}

uint64_t type metadata accessor for GridItem()
{
  return type metadata accessor for GridItem();
}

uint64_t GridItem.init(_:spacing:alignment:)()
{
  return GridItem.init(_:spacing:alignment:)();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.bottom.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t Animation.delay(_:)()
{
  return Animation.delay(_:)();
}

uint64_t static Animation.linear(duration:)()
{
  return static Animation.linear(duration:)();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t static Animation.easeInOut.getter()
{
  return static Animation.easeInOut.getter();
}

uint64_t type metadata accessor for BlendMode()
{
  return type metadata accessor for BlendMode();
}

uint64_t LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)()
{
  return LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)();
}

uint64_t LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)()
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
}

uint64_t type metadata accessor for LazyVGrid()
{
  return type metadata accessor for LazyVGrid();
}

uint64_t Namespace.wrappedValue.getter()
{
  return Namespace.wrappedValue.getter();
}

uint64_t type metadata accessor for TupleView()
{
  return type metadata accessor for TupleView();
}

uint64_t TupleView.init(_:)()
{
  return TupleView.init(_:)();
}

uint64_t static UnitPoint.top.getter()
{
  return static UnitPoint.top.getter();
}

uint64_t static UnitPoint.bottom.getter()
{
  return static UnitPoint.bottom.getter();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

uint64_t static UnitPoint.leading.getter()
{
  return static UnitPoint.leading.getter();
}

uint64_t static UnitPoint.trailing.getter()
{
  return static UnitPoint.trailing.getter();
}

uint64_t dispatch thunk of SystemMusicPlayer.queue.getter()
{
  return dispatch thunk of SystemMusicPlayer.queue.getter();
}

uint64_t dispatch thunk of SystemMusicPlayer.queue.setter()
{
  return dispatch thunk of SystemMusicPlayer.queue.setter();
}

uint64_t static SystemMusicPlayer.shared.getter()
{
  return static SystemMusicPlayer.shared.getter();
}

uint64_t type metadata accessor for SystemMusicPlayer()
{
  return type metadata accessor for SystemMusicPlayer();
}

uint64_t static PartialMusicProperty<A>.topSongs.getter()
{
  return static PartialMusicProperty<A>.topSongs.getter();
}

uint64_t static PartialMusicProperty<A>.tracks.getter()
{
  return static PartialMusicProperty<A>.tracks.getter();
}

uint64_t type metadata accessor for MusicDataRequest.ExecutionMethod()
{
  return type metadata accessor for MusicDataRequest.ExecutionMethod();
}

uint64_t static MusicDataRequest.preferredExecutionMethod.setter()
{
  return static MusicDataRequest.preferredExecutionMethod.setter();
}

uint64_t MusicSubscription.canBecomeSubscriber.getter()
{
  return MusicSubscription.canBecomeSubscriber.getter();
}

uint64_t static MusicSubscription.subscriptionUpdates.getter()
{
  return static MusicSubscription.subscriptionUpdates.getter();
}

uint64_t MusicSubscription.Updates.makeAsyncIterator()()
{
  return MusicSubscription.Updates.makeAsyncIterator()();
}

uint64_t type metadata accessor for MusicSubscription.Updates.Iterator()
{
  return type metadata accessor for MusicSubscription.Updates.Iterator();
}

uint64_t type metadata accessor for MusicSubscription.Updates()
{
  return type metadata accessor for MusicSubscription.Updates();
}

uint64_t type metadata accessor for MusicSubscription()
{
  return type metadata accessor for MusicSubscription();
}

uint64_t type metadata accessor for MusicAuthorization.Status()
{
  return type metadata accessor for MusicAuthorization.Status();
}

uint64_t MusicAttributeProperty.init(_:)()
{
  return MusicAttributeProperty.init(_:)();
}

uint64_t MusicCatalogResourceRequest.properties.setter()
{
  return MusicCatalogResourceRequest.properties.setter();
}

uint64_t MusicCatalogResourceRequest.init<A>(matching:equalTo:)()
{
  return MusicCatalogResourceRequest.init<A>(matching:equalTo:)();
}

uint64_t MusicCatalogResourceRequest.init<A>(matching:memberOf:)()
{
  return MusicCatalogResourceRequest.init<A>(matching:memberOf:)();
}

uint64_t MusicCatalogResourceResponse.items.getter()
{
  return MusicCatalogResourceResponse.items.getter();
}

uint64_t dispatch thunk of MusicItem.id.getter()
{
  return dispatch thunk of MusicItem.id.getter();
}

uint64_t MusicItemID.init(_:)()
{
  return MusicItemID.init(_:)();
}

uint64_t dispatch thunk of MusicPlayer.playbackTime.getter()
{
  return dispatch thunk of MusicPlayer.playbackTime.getter();
}

uint64_t type metadata accessor for MusicPlayer.PlaybackStatus()
{
  return type metadata accessor for MusicPlayer.PlaybackStatus();
}

uint64_t dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)()
{
  return dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)();
}

uint64_t dispatch thunk of MusicPlayer.Queue.currentEntry.getter()
{
  return dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
}

uint64_t dispatch thunk of MusicPlayer.Queue.objectWillChange.getter()
{
  return dispatch thunk of MusicPlayer.Queue.objectWillChange.getter();
}

uint64_t MusicPlayer.Queue.Entry.Item.id.getter()
{
  return MusicPlayer.Queue.Entry.Item.id.getter();
}

uint64_t type metadata accessor for MusicPlayer.Queue.Entry.Item()
{
  return type metadata accessor for MusicPlayer.Queue.Entry.Item();
}

uint64_t MusicPlayer.Queue.Entry.item.getter()
{
  return MusicPlayer.Queue.Entry.item.getter();
}

uint64_t MusicPlayer.Queue.Entry.endTime.getter()
{
  return MusicPlayer.Queue.Entry.endTime.getter();
}

uint64_t type metadata accessor for MusicPlayer.Queue.Entry()
{
  return type metadata accessor for MusicPlayer.Queue.Entry();
}

uint64_t type metadata accessor for MusicPlayer.Queue()
{
  return type metadata accessor for MusicPlayer.Queue();
}

uint64_t dispatch thunk of MusicPlayer.State.playbackStatus.getter()
{
  return dispatch thunk of MusicPlayer.State.playbackStatus.getter();
}

uint64_t dispatch thunk of MusicPlayer.State.objectWillChange.getter()
{
  return dispatch thunk of MusicPlayer.State.objectWillChange.getter();
}

uint64_t dispatch thunk of MusicPlayer.pause()()
{
  return dispatch thunk of MusicPlayer.pause()();
}

uint64_t MusicPlayer.state.getter()
{
  return MusicPlayer.state.getter();
}

uint64_t PreviewAsset.url.getter()
{
  return PreviewAsset.url.getter();
}

uint64_t type metadata accessor for PreviewAsset()
{
  return type metadata accessor for PreviewAsset();
}

uint64_t type metadata accessor for ContentRating()
{
  return type metadata accessor for ContentRating();
}

uint64_t Song.albumTitle.getter()
{
  return Song.albumTitle.getter();
}

uint64_t Song.artistName.getter()
{
  return Song.artistName.getter();
}

uint64_t Song.contentRating.getter()
{
  return Song.contentRating.getter();
}

uint64_t Song.previewAssets.getter()
{
  return Song.previewAssets.getter();
}

uint64_t Song.id.getter()
{
  return Song.id.getter();
}

uint64_t Song.url.getter()
{
  return Song.url.getter();
}

uint64_t Song.title.getter()
{
  return Song.title.getter();
}

uint64_t Song.artwork.getter()
{
  return Song.artwork.getter();
}

uint64_t Song.duration.getter()
{
  return Song.duration.getter();
}

uint64_t type metadata accessor for Song()
{
  return type metadata accessor for Song();
}

uint64_t type metadata accessor for Track()
{
  return type metadata accessor for Track();
}

uint64_t Artist.url.getter()
{
  return Artist.url.getter();
}

uint64_t Artist.subscript.getter()
{
  return Artist.subscript.getter();
}

uint64_t Artist.topSongs.getter()
{
  return Artist.topSongs.getter();
}

uint64_t Playlist.standardDescription.getter()
{
  return Playlist.standardDescription.getter();
}

uint64_t Playlist.url.getter()
{
  return Playlist.url.getter();
}

uint64_t Playlist.tracks.getter()
{
  return Playlist.tracks.getter();
}

uint64_t Playlist.artwork.getter()
{
  return Playlist.artwork.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.mapKeys<A>(_:)()
{
  return Dictionary.mapKeys<A>(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t BidirectionalCollection.last.getter()
{
  return BidirectionalCollection.last.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return dispatch thunk of Sequence._copyToContiguousArray()();
}

uint64_t Sequence.enumerated()()
{
  return Sequence.enumerated()();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t static Array.+ infix(_:_:)()
{
  return static Array.+ infix(_:_:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

Swift::Int __swiftcall Array._getCount()()
{
  return Array._getCount()();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.init<A>(_:)()
{
  return Array.init<A>(_:)();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t Set.intersection(_:)()
{
  return Set.intersection(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.count.getter()
{
  return Set.count.getter();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.remove(_:)()
{
  return Set.remove(_:)();
}

uint64_t Set.isEmpty.getter()
{
  return Set.isEmpty.getter();
}

uint64_t Set.contains(_:)()
{
  return Set.contains(_:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return RandomAccessCollection<>.indices.getter();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t Collection.prefix(_:)()
{
  return Collection.prefix(_:)();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t Collection.dropFirst(_:)()
{
  return Collection.dropFirst(_:)();
}

uint64_t Collection<>.firstIndex(of:)()
{
  return Collection<>.firstIndex(of:)();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t Range.contains(_:)()
{
  return Range.contains(_:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t NSNotificationCenter.Notifications.makeAsyncIterator()()
{
  return NSNotificationCenter.Notifications.makeAsyncIterator()();
}

uint64_t type metadata accessor for NSNotificationCenter.Notifications.Iterator()
{
  return type metadata accessor for NSNotificationCenter.Notifications.Iterator();
}

uint64_t NSNotificationCenter.notifications(named:object:)()
{
  return NSNotificationCenter.notifications(named:object:)();
}

CMTime __swiftcall CMTime.init(value:timescale:)(Swift::Int64 value, Swift::Int32 timescale)
{
  CMTimeValue v2 = CMTime.init(value:timescale:)(value, *(void *)&timescale);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t CMTime.seconds.getter()
{
  return CMTime.seconds.getter();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.localizedUppercase.getter()
{
  return StringProtocol.localizedUppercase.getter();
}

uint64_t StringProtocol.localizedStandardCompare<A>(_:)()
{
  return StringProtocol.localizedStandardCompare<A>(_:)();
}

uint64_t StringProtocol.localizedStandardContains<A>(_:)()
{
  return StringProtocol.localizedStandardContains<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t type metadata accessor for ArraySlice()
{
  return type metadata accessor for ArraySlice();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t type metadata accessor for _SetStorage()
{
  return type metadata accessor for _SetStorage();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError.Context()
{
  return type metadata accessor for DecodingError.Context();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return _ArrayProtocol.filter(_:)();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return _arrayForceCast<A, B>(_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return type metadata accessor for EnumeratedSequence();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocObject()
{
  return _swift_deallocObject();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return _swift_getTupleTypeMetadata3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_getMainExecutor()
{
  return _swift_task_getMainExecutor();
}

uint64_t swift_task_isCurrentExecutor()
{
  return _swift_task_isCurrentExecutor();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}