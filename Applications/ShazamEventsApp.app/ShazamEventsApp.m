void type metadata accessor for ASCAppState(uint64_t a1)
{
  sub_100006C40(a1, &qword_100198188);
}

void type metadata accessor for EKEventEditViewAction(uint64_t a1)
{
}

__n128 initializeWithTake for ViewModulesConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

uint64_t sub_1000041B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v26 = a2;
  sub_10000650C(&qword_100198288);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = v3;
  type metadata accessor for CalendarModule();
  sub_10000650C(&qword_100198290);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for VStack();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v21 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v22 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v21 - v15);
  static HorizontalAlignment.leading.getter();
  uint64_t v27 = v24;
  uint64_t v28 = v23;
  uint64_t v29 = v25;
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.all.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Edge.Set.top.getter();
  uint64_t v32 = WitnessTable;
  v33 = &protocol witness table for _PaddingLayout;
  uint64_t v18 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  uint64_t v30 = v18;
  v31 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v16, v14, v11);
  v19 = *(void (**)(char *, uint64_t))(v22 + 8);
  v19(v14, v11);
  sub_1000508C8(v26, v16, v11);
  return ((uint64_t (*)(void *, uint64_t))v19)(v16, v11);
}

uint64_t sub_1000045EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v57 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  type metadata accessor for CalendarModule();
  sub_10000650C(&qword_100198290);
  swift_getTupleTypeMetadata2();
  uint64_t v55 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for VStack();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v51 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v52 = (uint64_t *)((char *)&v42 - v7);
  uint64_t v50 = type metadata accessor for AccessibilityTraits();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100006560(&qword_100198288);
  uint64_t v9 = __chkstk_darwin(v53);
  v43 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v46 = (uint64_t)&v42 - v11;
  type metadata accessor for GuideViewModel();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.Weight.bold.getter();
  uint64_t v17 = Text.fontWeight(_:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  sub_1000065A4(v12, v14, v16);
  swift_bridgeObjectRelease();
  static Font.title2.getter();
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  char v26 = v25;
  swift_release();
  LOBYTE(v12) = v26 & 1;
  sub_1000065A4(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t v27 = Text.accessibilityHeading(_:)();
  uint64_t v29 = v28;
  LOBYTE(v19) = v30;
  uint64_t v32 = v31;
  sub_1000065A4(v22, v24, v12);
  swift_bridgeObjectRelease();
  uint64_t v64 = v27;
  uint64_t v65 = v29;
  char v66 = v19 & 1;
  uint64_t v67 = v32;
  v33 = v44;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v34 = (uint64_t)v43;
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
  sub_1000065A4(v64, v65, v66);
  swift_bridgeObjectRelease();
  uint64_t v35 = v46;
  sub_1000065B4(v34, v46);
  static HorizontalAlignment.leading.getter();
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  uint64_t v60 = v45;
  uint64_t v36 = (uint64_t)v51;
  VStack.init(alignment:spacing:content:)();
  uint64_t v37 = swift_getWitnessTable();
  v38 = v52;
  sub_1000508C8(v52, v36, v4);
  uint64_t v39 = v56;
  v40 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v40(v36, v4);
  sub_1000066D4(v35, v34, &qword_100198288);
  uint64_t v64 = v34;
  (*(void (**)(uint64_t, void *, uint64_t))(v39 + 16))(v36, v38, v4);
  uint64_t v65 = v36;
  v63[0] = v53;
  v63[1] = v4;
  unint64_t v61 = sub_100006628();
  uint64_t v62 = v37;
  sub_100050970(&v64, 2uLL, (uint64_t)v63);
  v40((uint64_t)v38, v4);
  sub_1000067DC(v35, &qword_100198288);
  v40(v36, v4);
  return sub_1000067DC(v34, &qword_100198288);
}

uint64_t sub_100004BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = type metadata accessor for LocationModule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  *(void *)&long long v65 = v6;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v58 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v55 - v14;
  uint64_t v62 = sub_100006560(&qword_100198290);
  uint64_t v15 = __chkstk_darwin(v62);
  uint64_t v63 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v61 = (uint64_t)&v55 - v18;
  uint64_t v19 = *(void *)(a2 - 8);
  __chkstk_darwin(v17);
  char v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalendarViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a2);
  sub_100126C20((uint64_t)v21);
  uint64_t v71 = sub_1000BA298();
  uint64_t v72 = v22;
  *(void *)&long long v73 = v23;
  *((void *)&v73 + 1) = v24;
  uint64_t v25 = type metadata accessor for CalendarModule();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000508C8(v74, &v71, v25);
  swift_release();
  swift_release();
  uint64_t v26 = type metadata accessor for GuideViewModel();
  sub_1000501AC(v26);
  uint64_t v27 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
    uint64_t v28 = 1;
    uint64_t v29 = v64;
    uint64_t v30 = v61;
  }
  else
  {
    uint64_t v56 = v13;
    uint64_t v31 = v59;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v59, v12, AssociatedTypeWitness);
    uint64_t v58 = sub_100050274(v26);
    uint64_t v57 = v32;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    double v34 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v36 = v35;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v39 = v38;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v41 = v25;
    uint64_t v43 = v42;
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v45 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v46 = v57;
    *(void *)uint64_t v8 = v58;
    *((void *)v8 + 1) = v46;
    *((double *)v8 + 2) = v34;
    *((void *)v8 + 3) = v36;
    *((void *)v8 + 4) = v37;
    *((void *)v8 + 5) = v39;
    *((void *)v8 + 6) = v40;
    *((void *)v8 + 7) = v43;
    uint64_t v25 = v41;
    *((void *)v8 + 8) = v44;
    *((void *)v8 + 9) = v45;
    *((void *)v8 + 10) = v47;
    v8[88] = v48 & 1;
    *((void *)v8 + 12) = v49;
    type metadata accessor for RemoteViewConfiguration();
    sub_10000597C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *((void *)v8 + 13) = EnvironmentObject.init()();
    *((void *)v8 + 14) = v50;
    uint64_t v51 = v64;
    v52 = (uint64_t *)&v8[*(int *)(v64 + 24)];
    uint64_t *v52 = swift_getKeyPath();
    sub_100006560(&qword_1001982C0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v31, AssociatedTypeWitness);
    uint64_t v30 = v61;
    sub_100006840((uint64_t)v8, v61);
    uint64_t v28 = 0;
    uint64_t v29 = v51;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v30, v28, 1, v29);
  uint64_t v71 = v74[0];
  uint64_t v72 = v74[1];
  long long v65 = v75;
  long long v73 = v75;
  v70[0] = (uint64_t)&v71;
  uint64_t v53 = v63;
  sub_1000066D4(v30, v63, &qword_100198290);
  v70[1] = v53;
  swift_retain();
  swift_retain();
  v69[0] = v25;
  v69[1] = v62;
  uint64_t v67 = WitnessTable;
  unint64_t v68 = sub_100006738();
  sub_100050970(v70, 2uLL, (uint64_t)v69);
  sub_1000067DC(v30, &qword_100198290);
  swift_release();
  swift_release();
  sub_1000067DC(v53, &qword_100198290);
  swift_release();
  return swift_release();
}

uint64_t sub_1000052B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GuideViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_100005324()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100005344(uint64_t a1, uint64_t a2)
{
  return sub_1000059C4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100005370(uint64_t a1, uint64_t a2)
{
  return sub_1000059C4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000538C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000053BC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100005434(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000054B4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000054F8(uint64_t a1)
{
  uint64_t v2 = sub_10000597C(&qword_100198350, type metadata accessor for DocumentAttributeKey);
  uint64_t v3 = sub_10000597C(&qword_100198358, type metadata accessor for DocumentAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000055B4(uint64_t a1)
{
  uint64_t v2 = sub_10000597C(&qword_100198360, type metadata accessor for DocumentReadingOptionKey);
  uint64_t v3 = sub_10000597C(qword_100198368, type metadata accessor for DocumentReadingOptionKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005670(uint64_t a1)
{
  uint64_t v2 = sub_10000597C(&qword_1001981F8, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_10000597C(qword_100198200, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000572C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100005774(uint64_t a1)
{
  uint64_t v2 = sub_10000597C(&qword_1001982F8, type metadata accessor for ActivityType);
  uint64_t v3 = sub_10000597C(&qword_100198300, type metadata accessor for ActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005830(uint64_t a1)
{
  uint64_t v2 = sub_10000597C(&qword_1001981C0, type metadata accessor for ASCAppState);
  uint64_t v3 = sub_10000597C(&qword_1001981C8, type metadata accessor for ASCAppState);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000058EC()
{
  return sub_10000597C(&qword_1001981A8, type metadata accessor for ASCAppState);
}

uint64_t sub_100005934()
{
  return sub_10000597C(&qword_1001981B0, type metadata accessor for ASCAppState);
}

uint64_t sub_10000597C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000059C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100005A08()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100005A5C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100005AD0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100005B5C()
{
  return sub_10000597C(&qword_1001981B8, type metadata accessor for ASCAppState);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

uint64_t sub_100005BCC()
{
  return sub_10000597C(&qword_1001981E0, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100005C14()
{
  return sub_10000597C(&qword_1001981E8, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100005C5C()
{
  return sub_10000597C(&qword_1001981F0, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100005CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100005CAC()
{
  uint64_t result = type metadata accessor for GuideViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100005D3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100005E58(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100005ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100005F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100006024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  _OWORD *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t sub_1000060A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100006144(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100006290);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1000062A4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100006488);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            v18[2] = 0;
            v18[3] = 0;
            *uint64_t v18 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for GuideModule()
{
  return sub_1000068A4();
}

uint64_t sub_1000064C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10000650C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006554@<X0>(uint64_t a1@<X8>)
{
  return sub_1000045EC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100006560(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000065A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000065B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000661C@<X0>(uint64_t a1@<X8>)
{
  return sub_100004BBC(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

unint64_t sub_100006628()
{
  unint64_t result = qword_100198298;
  if (!qword_100198298)
  {
    sub_10000650C(&qword_100198288);
    sub_10000597C((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198298);
  }
  return result;
}

uint64_t sub_1000066D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006560(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100006738()
{
  unint64_t result = qword_1001982A8;
  if (!qword_1001982A8)
  {
    sub_10000650C(&qword_100198290);
    sub_10000597C(&qword_1001982B0, (void (*)(uint64_t))type metadata accessor for LocationModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001982A8);
  }
  return result;
}

uint64_t sub_1000067DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006560(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100006840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000068A4()
{
  return swift_getGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for VenueEventListHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for EmptyEventsList(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006914(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100006934(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for ActivityType(uint64_t a1)
{
}

uint64_t sub_10000699C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100006B2C()
{
  return sub_10000597C(&qword_1001982E0, type metadata accessor for ActivityType);
}

uint64_t sub_100006B74()
{
  return sub_10000597C(&qword_1001982E8, type metadata accessor for ActivityType);
}

uint64_t sub_100006BBC()
{
  return sub_10000597C(&qword_1001982F0, type metadata accessor for ActivityType);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_100006C40(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100006C88()
{
  return sub_10000597C(&qword_100198320, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100006CD0()
{
  return sub_10000597C(&qword_100198328, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100006D18()
{
  return sub_10000597C(&qword_100198330, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100006D60()
{
  return sub_10000597C(&qword_100198338, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100006DA8()
{
  return sub_10000597C(&qword_100198340, type metadata accessor for DocumentAttributeKey);
}

uint64_t sub_100006DF0()
{
  return sub_10000597C(&qword_100198348, type metadata accessor for DocumentReadingOptionKey);
}

uint64_t sub_100006E48()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_100006E88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - v5, a1, v2, v4);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_100006F7C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for State();
  return a2(v3);
}

uint64_t sub_100006FD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v38 = a2;
  sub_10000650C(&qword_1001983F0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v36 = a1;
  type metadata accessor for Array();
  type metadata accessor for ScrollAsset();
  swift_getWitnessTable();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v54 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  uint64_t v49 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v52 = OpaqueTypeConformance2;
  uint64_t v53 = v54;
  uint64_t v7 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v50 = OpaqueTypeMetadata2;
  uint64_t v51 = v7;
  uint64_t v47 = swift_getOpaqueTypeConformance2();
  char v48 = &protocol witness table for _FrameLayout;
  uint64_t v35 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = *(void *)(v54 + 8);
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  uint64_t v52 = WitnessTable;
  uint64_t v53 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_100198400);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198408);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = v4;
  type metadata accessor for SelectAssetButton();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v29 - v16;
  sub_10000650C(&qword_100198410);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v30 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v32 = (uint64_t *)((char *)&v29 - v21);
  uint64_t v39 = v3;
  uint64_t v40 = v11;
  uint64_t v41 = v37;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.top.getter();
  sub_100006E48();
  sub_10008080C();
  swift_release();
  uint64_t v22 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  sub_100006E48();
  LOBYTE(v8) = sub_10008080C();
  swift_release();
  LOBYTE(v50) = (v8 & 1) == 0;
  static Alignment.center.getter();
  sub_100006560(&qword_100198418);
  uint64_t v44 = v22;
  uint64_t v45 = &protocol witness table for _PaddingLayout;
  uint64_t v23 = swift_getWitnessTable();
  sub_10000C0F0(&qword_100198420, &qword_100198418, (void (*)(void))sub_10000C060);
  uint64_t v24 = v30;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v15);
  uint64_t v25 = sub_100010484(&qword_100198430, &qword_100198410);
  uint64_t v42 = v23;
  uint64_t v43 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v32;
  sub_1000508C8(v32, v24, v18);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
  v27(v24, v18);
  sub_1000508C8(v38, v26, v18);
  return ((uint64_t (*)(void *, uint64_t))v27)(v26, v18);
}

uint64_t sub_100007900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v125 = a1;
  uint64_t v120 = a4;
  uint64_t v6 = type metadata accessor for SelectAssetButton();
  uint64_t v114 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v98 = (uint64_t)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v99 = (uint64_t *)((char *)&v94 - v9);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v94 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  v112 = (char *)&v94 - v12;
  uint64_t v113 = *(void *)(a2 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  v97 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v96 = (char *)&v94 - v15;
  uint64_t v119 = v6;
  uint64_t v118 = type metadata accessor for Optional();
  uint64_t v115 = *(void *)(v118 - 8);
  uint64_t v16 = __chkstk_darwin(v118);
  v117 = (uint64_t *)((char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v116 = (char *)&v94 - v18;
  uint64_t v19 = type metadata accessor for PhoneWallpaperView();
  v110 = *(void **)(v19 - 8);
  uint64_t v108 = v110[8];
  __chkstk_darwin(v19);
  v109 = (char *)&v94 - v20;
  uint64_t v21 = type metadata accessor for Array();
  uint64_t v22 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v111 = a3;
  uint64_t v24 = *(void **)(a3 + 8);
  uint64_t v140 = v21;
  uint64_t v141 = a2;
  uint64_t v142 = v22;
  v143 = (void *)WitnessTable;
  v144 = v24;
  type metadata accessor for ForEach();
  uint64_t v139 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for HStack();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v140 = v25;
  uint64_t v141 = v26;
  swift_getOpaqueTypeMetadata2();
  uint64_t v140 = v25;
  uint64_t v141 = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = type metadata accessor for ScrollView();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v140 = v27;
  uint64_t v141 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v30 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v140 = v27;
  uint64_t v141 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = OpaqueTypeMetadata2;
  uint64_t v141 = v30;
  uint64_t v142 = OpaqueTypeConformance2;
  v143 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v32 = swift_getOpaqueTypeMetadata2();
  uint64_t v140 = OpaqueTypeMetadata2;
  uint64_t v141 = v30;
  uint64_t v142 = OpaqueTypeConformance2;
  v143 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v33 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = v32;
  uint64_t v141 = a2;
  uint64_t v142 = v33;
  v143 = v24;
  uint64_t v34 = swift_getOpaqueTypeMetadata2();
  uint64_t v140 = v32;
  uint64_t v141 = a2;
  uint64_t v142 = v33;
  v143 = v24;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = v34;
  uint64_t v141 = v35;
  swift_getOpaqueTypeMetadata2();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v140 = v34;
  uint64_t v141 = v35;
  uint64_t v137 = swift_getOpaqueTypeConformance2();
  v138 = &protocol witness table for _FrameLayout;
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v136 = v24[1];
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v140 = v36;
  uint64_t v141 = v10;
  uint64_t v95 = v10;
  uint64_t v142 = v37;
  v143 = (void *)v38;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_100198400);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198408);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v39 = a2;
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v100 = swift_getWitnessTable();
  uint64_t v40 = type metadata accessor for VStack();
  uint64_t v102 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v94 - v41;
  uint64_t v123 = type metadata accessor for ModifiedContent();
  uint64_t v121 = *(void *)(v123 - 8);
  uint64_t v43 = __chkstk_darwin(v123);
  v107 = (char *)&v94 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  v101 = (char *)&v94 - v46;
  __chkstk_darwin(v45);
  v122 = (uint64_t *)((char *)&v94 - v47);
  uint64_t v124 = v19;
  sub_100006E48();
  LOBYTE(v19) = sub_10008080C();
  uint64_t v48 = swift_release();
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v19)
  {
    uint64_t v53 = sub_100006E48();
    uint64_t v49 = *(void *)(v53 + 16);
    uint64_t v50 = *(void *)(v53 + 24);
    uint64_t v51 = *(unsigned __int8 *)(v53 + 32);
    uint64_t v52 = *(void **)(v53 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = swift_release();
  }
  v103 = v52;
  uint64_t v104 = v51;
  uint64_t v105 = v50;
  uint64_t v106 = v49;
  __chkstk_darwin(v48);
  uint64_t v54 = v111;
  *(&v94 - 4) = v39;
  *(&v94 - 3) = v54;
  uint64_t v55 = v125;
  *(&v94 - 2) = v125;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t v56 = v110;
  uint64_t v57 = v109;
  uint64_t v58 = v124;
  ((void (*)(char *, uint64_t, uint64_t))v110[2])(v109, v55, v124);
  unint64_t v59 = (*((unsigned __int8 *)v56 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v56 + 80);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v39;
  *(void *)(v60 + 24) = v54;
  ((void (*)(unint64_t, char *, uint64_t))v56[4])(v60 + v59, v57, v58);
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = v101;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v42, v40);
  uint64_t v134 = v61;
  v135 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v63 = v123;
  v109 = (char *)swift_getWitnessTable();
  sub_1000508C8(v122, v62, v63);
  uint64_t v64 = *(void **)(v121 + 8);
  uint64_t v111 = v121 + 8;
  v110 = v64;
  ((void (*)(char *, uint64_t))v64)(v62, v63);
  long long v65 = v112;
  sub_100006F7C(v58, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v66 = v113;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v65, 1, v39) == 1)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v65, v95);
    uint64_t v67 = (char *)v117;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v114 + 56))((char *)v117, 1, 1, v119);
    swift_getWitnessTable();
    unint64_t v68 = v116;
    uint64_t v69 = (uint64_t)v116;
    uint64_t v70 = (uint64_t)v67;
  }
  else
  {
    uint64_t v71 = v96;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v96, v65, v39);
    uint64_t v72 = v39;
    long long v73 = (char *)(v125 + *(int *)(v124 + 40));
    char v74 = *v73;
    long long v75 = (char *)*((void *)v73 + 1);
    LOBYTE(v131) = v74;
    v132 = v75;
    sub_100006560(&qword_100198448);
    State.projectedValue.getter();
    uint64_t v76 = v140;
    uint64_t v77 = v141;
    char v78 = v142;
    uint64_t v79 = (uint64_t)v97;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v97, v71, v72);
    v80 = (uint64_t *)sub_100006E48();
    uint64_t v81 = v98;
    sub_10000AE1C(v76, v77, v78, v79, v80, v98);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v71, v72);
    uint64_t v82 = v119;
    swift_getWitnessTable();
    v83 = v99;
    sub_1000508C8(v99, v81, v82);
    uint64_t v84 = v114;
    v85 = *(void (**)(uint64_t, uint64_t))(v114 + 8);
    v85(v81, v82);
    uint64_t v67 = (char *)v117;
    sub_1000508C8((char *)v117, v83, v82);
    v85((uint64_t)v83, v82);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v67, 0, 1, v82);
    uint64_t v69 = (uint64_t)v116;
    uint64_t v70 = (uint64_t)v67;
    unint64_t v68 = v116;
  }
  sub_100050904(v70, v69);
  uint64_t v86 = v115;
  v87 = *(void (**)(char *, uint64_t))(v115 + 8);
  uint64_t v88 = v118;
  v87(v67, v118);
  uint64_t v140 = v106;
  uint64_t v141 = v105;
  uint64_t v142 = v104;
  v143 = v103;
  v131 = &v140;
  v89 = v107;
  v90 = v122;
  uint64_t v91 = v123;
  (*(void (**)(char *, void *, uint64_t))(v121 + 16))(v107, v122, v123);
  v132 = v89;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v67, v68, v88);
  v133 = v67;
  v130[0] = sub_100006560(&qword_1001983F0);
  v130[1] = v91;
  v130[2] = v88;
  uint64_t v127 = sub_10000C0F0(&qword_100198438, &qword_1001983F0, (void (*)(void))sub_10000C168);
  v128 = v109;
  uint64_t v126 = swift_getWitnessTable();
  uint64_t v129 = swift_getWitnessTable();
  sub_100050970((uint64_t *)&v131, 3uLL, (uint64_t)v130);
  v87(v68, v88);
  v92 = (void (*)(char *, uint64_t))v110;
  ((void (*)(void *, uint64_t))v110)(v90, v91);
  v87(v67, v88);
  v92(v89, v91);
  return sub_10000C1BC(v140, v141);
}

uint64_t sub_1000088F4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v203 = a1;
  uint64_t v194 = a4;
  uint64_t v4 = *(void **)(a3 + 8);
  uint64_t v204 = a3;
  uint64_t v196 = v4[1];
  uint64_t v6 = type metadata accessor for PageControl();
  uint64_t v189 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  v132 = (uint64_t *)((char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v133 = (uint64_t *)((char *)&v131 - v9);
  uint64_t v192 = v10;
  uint64_t v193 = type metadata accessor for Optional();
  uint64_t v201 = *(void *)(v193 - 8);
  uint64_t v11 = __chkstk_darwin(v193);
  v191 = (uint64_t *)((char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v190 = (uint64_t)&v131 - v13;
  uint64_t v199 = type metadata accessor for PhoneWallpaperView();
  uint64_t v186 = *(void *)(v199 - 8);
  uint64_t v187 = *(void *)(v186 + 64);
  __chkstk_darwin(v199);
  v185 = (char *)&v131 - v14;
  uint64_t v197 = type metadata accessor for Optional();
  uint64_t v188 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  v184 = (char *)&v131 - v15;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v181 = *(void *)(v16 - 8);
  uint64_t v182 = v16;
  __chkstk_darwin(v16);
  v195 = (char *)&v131 - v17;
  uint64_t v18 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v18 - 8);
  v179 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v180 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  v178 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ContentMarginPlacement();
  uint64_t v176 = *(void *)(v22 - 8);
  uint64_t v177 = v22;
  __chkstk_darwin(v22);
  v174 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Array();
  uint64_t v25 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v218 = v24;
  v219 = a2;
  uint64_t v220 = v25;
  v221 = (void *)WitnessTable;
  v222 = v4;
  type metadata accessor for ForEach();
  v217[11] = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for HStack();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v218 = v27;
  v219 = (void *)v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v218 = v27;
  v219 = (void *)v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = type metadata accessor for ScrollView();
  uint64_t v163 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  v149 = (char *)&v131 - v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v218 = v29;
  v219 = (void *)v31;
  uint64_t v32 = v31;
  uint64_t v146 = v31;
  uint64_t v33 = swift_getOpaqueTypeMetadata2();
  uint64_t v161 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v148 = (char *)&v131 - v34;
  uint64_t v218 = v29;
  v219 = (void *)v32;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v33;
  v219 = (void *)v20;
  uint64_t v36 = v33;
  uint64_t v142 = v20;
  uint64_t v143 = v33;
  uint64_t v37 = v20;
  uint64_t v220 = v35;
  v221 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v145 = v35;
  uint64_t v38 = swift_getOpaqueTypeMetadata2();
  uint64_t v159 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v141 = (char *)&v131 - v39;
  uint64_t v218 = v36;
  v219 = (void *)v37;
  uint64_t v220 = v35;
  v221 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v38;
  v219 = a2;
  uint64_t v41 = v38;
  uint64_t v138 = v38;
  uint64_t v139 = v40;
  uint64_t v220 = v40;
  v221 = v4;
  uint64_t v42 = v40;
  uint64_t v140 = v4;
  uint64_t v43 = swift_getOpaqueTypeMetadata2();
  uint64_t v158 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v136 = (char *)&v131 - v44;
  uint64_t v218 = v41;
  v219 = a2;
  v202 = a2;
  uint64_t v220 = v42;
  v221 = v4;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v43;
  v219 = (void *)v45;
  uint64_t v134 = v43;
  uint64_t v135 = v45;
  uint64_t v46 = v45;
  uint64_t v150 = swift_getOpaqueTypeMetadata2();
  uint64_t v157 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v137 = (char *)&v131 - v47;
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v155 = v48;
  uint64_t v168 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  v147 = (char *)&v131 - v49;
  uint64_t v218 = v43;
  v219 = (void *)v46;
  uint64_t v144 = swift_getOpaqueTypeConformance2();
  v217[9] = v144;
  v217[10] = &protocol witness table for _FrameLayout;
  v175 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v153 = v50;
  v217[8] = v196;
  uint64_t v51 = v197;
  uint64_t v154 = swift_getWitnessTable();
  uint64_t v218 = v48;
  v219 = (void *)v51;
  uint64_t v220 = v50;
  v221 = (void *)v154;
  v162 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v160 = swift_getOpaqueTypeMetadata2();
  uint64_t v167 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  v198 = (char *)&v131 - v52;
  sub_10000650C(&qword_100198400);
  uint64_t v164 = type metadata accessor for ModifiedContent();
  uint64_t v171 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  v156 = (char *)&v131 - v53;
  sub_10000650C(&qword_100198408);
  uint64_t v170 = type metadata accessor for ModifiedContent();
  uint64_t v173 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  v165 = (char *)&v131 - v54;
  uint64_t v200 = type metadata accessor for ModifiedContent();
  uint64_t v172 = *(void *)(v200 - 8);
  uint64_t v55 = __chkstk_darwin(v200);
  v183 = (char *)&v131 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __chkstk_darwin(v55);
  v166 = (char *)&v131 - v58;
  __chkstk_darwin(v57);
  v169 = (uint64_t *)((char *)&v131 - v59);
  static Axis.Set.horizontal.getter();
  v211 = a2;
  uint64_t v212 = v204;
  uint64_t v60 = v203;
  uint64_t v213 = v203;
  uint64_t v61 = v149;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v62 = v199;
  sub_100006E48();
  sub_1000808D8();
  swift_release();
  uint64_t v63 = v174;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ();
  uint64_t v64 = v148;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v63, v177);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v61, v29);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  long long v65 = v178;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  uint64_t v67 = v141;
  uint64_t v66 = v142;
  uint64_t v68 = v143;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v180 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v64, v68);
  uint64_t v69 = v195;
  uint64_t v70 = v62;
  sub_100006F7C(v62, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  uint64_t v71 = v136;
  uint64_t v72 = v138;
  long long v73 = v202;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, uint64_t))(v181 + 8))(v69, v182);
  char v74 = v73;
  (*(void (**)(char *, uint64_t))(v159 + 8))(v67, v72);
  uint64_t v75 = v70;
  sub_100006E48();
  sub_100080918();
  swift_release();
  uint64_t v76 = v137;
  uint64_t v77 = v134;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v158 + 8))(v71, v77);
  sub_100006E48();
  sub_100080950();
  swift_release();
  static Alignment.center.getter();
  char v78 = v147;
  uint64_t v79 = v150;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v157 + 8))(v76, v79);
  v80 = v184;
  sub_100006F7C(v75, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v82 = v185;
  uint64_t v81 = v186;
  uint64_t v83 = v60;
  uint64_t v84 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v185, v83, v75);
  uint64_t v85 = v81;
  unint64_t v86 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  uint64_t v87 = swift_allocObject();
  uint64_t v88 = v204;
  *(void *)(v87 + 16) = v74;
  *(void *)(v87 + 24) = v88;
  (*(void (**)(unint64_t, char *, uint64_t))(v85 + 32))(v87 + v86, v82, v84);
  v89 = v80;
  uint64_t v91 = (void *)v154;
  uint64_t v90 = v155;
  uint64_t v92 = v197;
  uint64_t v93 = v153;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v188 + 8))(v89, v92);
  uint64_t v94 = v90;
  (*(void (**)(char *, uint64_t))(v168 + 8))(v78, v90);
  static Alignment.center.getter();
  uint64_t v95 = v202;
  v208 = v202;
  uint64_t v209 = v88;
  uint64_t v96 = v203;
  uint64_t v210 = v203;
  sub_100006560(&qword_100198450);
  uint64_t v218 = v94;
  v219 = (void *)v92;
  uint64_t v220 = v93;
  v221 = v91;
  uint64_t v97 = swift_getOpaqueTypeConformance2();
  sub_10000EB70();
  uint64_t v98 = v156;
  uint64_t v99 = v160;
  uint64_t v100 = v198;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v167 + 8))(v100, v99);
  static Alignment.center.getter();
  v205 = v95;
  uint64_t v206 = v204;
  uint64_t v207 = v96;
  sub_100006560(&qword_100198470);
  uint64_t v101 = sub_100010484(&qword_100198478, &qword_100198400);
  v217[6] = v97;
  v217[7] = v101;
  uint64_t v102 = v164;
  uint64_t v103 = swift_getWitnessTable();
  sub_100010484(&qword_100198480, &qword_100198470);
  uint64_t v104 = v165;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v171 + 8))(v98, v102);
  static Edge.Set.bottom.getter();
  uint64_t v105 = sub_100010484(qword_100198488, &qword_100198408);
  v217[4] = v103;
  v217[5] = v105;
  uint64_t v106 = v170;
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v108 = v166;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v173 + 8))(v104, v106);
  v217[2] = v107;
  v217[3] = &protocol witness table for _PaddingLayout;
  uint64_t v109 = v200;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v111 = v169;
  uint64_t v197 = v110;
  sub_1000508C8(v169, v108, v109);
  uint64_t v112 = v172;
  uint64_t v113 = *(char **)(v172 + 8);
  uint64_t v204 = v172 + 8;
  v198 = v113;
  ((void (*)(char *, uint64_t))v113)(v108, v109);
  uint64_t v114 = v199;
  sub_100006E48();
  LOBYTE(v108) = sub_100080918();
  swift_release();
  if (v108)
  {
    uint64_t v115 = *(void *)(sub_100006E48() + 240);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v116 = (uint64_t)v195;
    sub_100006F7C(v114, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    v117 = v132;
    sub_1000B49C4(v115, v116, v132);
    uint64_t v118 = v192;
    swift_getWitnessTable();
    uint64_t v119 = v133;
    sub_1000508C8(v133, v117, v118);
    uint64_t v120 = v189;
    uint64_t v121 = *(void (**)(void *, uint64_t))(v189 + 8);
    v121(v117, v118);
    v122 = v191;
    sub_1000508C8(v191, v119, v118);
    v121(v119, v118);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v122, 0, 1, v118);
  }
  else
  {
    v122 = v191;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v191, 1, 1, v192);
    swift_getWitnessTable();
  }
  uint64_t v123 = v190;
  sub_100050904((uint64_t)v122, v190);
  uint64_t v124 = *(void (**)(void *, uint64_t))(v201 + 8);
  uint64_t v125 = v193;
  v124(v122, v193);
  uint64_t v126 = *(void (**)(char *, void *, uint64_t))(v112 + 16);
  uint64_t v127 = (uint64_t)v183;
  uint64_t v128 = v200;
  v126(v183, v111, v200);
  uint64_t v218 = v127;
  (*(void (**)(void *, uint64_t, uint64_t))(v201 + 16))(v122, v123, v125);
  v219 = v122;
  v217[0] = v128;
  v217[1] = v125;
  uint64_t v215 = v197;
  uint64_t v214 = swift_getWitnessTable();
  uint64_t v216 = swift_getWitnessTable();
  sub_100050970(&v218, 2uLL, (uint64_t)v217);
  v124((void *)v123, v125);
  uint64_t v129 = (uint64_t (*)(uint64_t, uint64_t))v198;
  ((void (*)(void *, uint64_t))v198)(v111, v128);
  v124(v122, v125);
  return v129(v127, v128);
}

uint64_t sub_100009F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a4;
  uint64_t v25 = a2;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v33 = v6;
  uint64_t v34 = a2;
  uint64_t v35 = v7;
  uint64_t v36 = WitnessTable;
  uint64_t v37 = v9;
  type metadata accessor for ForEach();
  uint64_t v32 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  v24[1] = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v33 = v10;
  uint64_t v34 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v17 = __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (void *)((char *)v24 - v20);
  uint64_t v29 = v25;
  uint64_t v30 = v26;
  uint64_t v31 = v27;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v33 = v10;
  uint64_t v34 = v14;
  swift_getOpaqueTypeConformance2();
  sub_1000508C8(v21, v19, OpaqueTypeMetadata2);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v19, OpaqueTypeMetadata2);
  sub_1000508C8(v28, v21, OpaqueTypeMetadata2);
  return ((uint64_t (*)(void *, uint64_t))v22)(v21, OpaqueTypeMetadata2);
}

uint64_t sub_10000A274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v7 = type metadata accessor for PhoneWallpaperView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - v9;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t v32 = v11;
  uint64_t v12 = type metadata accessor for ScrollAsset();
  uint64_t v31 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = *(void *)(a3 + 8);
  uint64_t v30 = WitnessTable;
  uint64_t v38 = v11;
  uint64_t v39 = a2;
  uint64_t v40 = v12;
  uint64_t v41 = WitnessTable;
  uint64_t v42 = v29;
  uint64_t v14 = type metadata accessor for ForEach();
  uint64_t v33 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v27 = (void *)((char *)v26 - v18);
  uint64_t v19 = *(void *)(sub_100006E48() + 240);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v38 = v19;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  v26[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v10, v7);
  uint64_t v25 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  ForEach<>.init(_:id:content:)();
  uint64_t v37 = v25;
  swift_getWitnessTable();
  uint64_t v22 = v27;
  sub_1000508C8(v27, v17, v14);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v33 + 8);
  v23(v17, v14);
  sub_1000508C8(v34, v22, v14);
  return ((uint64_t (*)(void *, uint64_t))v23)(v22, v14);
}

int *sub_10000A5D0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  type metadata accessor for PhoneWallpaperView();
  sub_100006E48();
  double v4 = sub_100080880();
  swift_release();
  sub_100006E48();
  double v5 = sub_1000808B0();
  swift_release();
  sub_100006E48();
  double v6 = sub_1000808D4();
  swift_release();
  __n128 result = (int *)type metadata accessor for ScrollAsset();
  *(double *)(a3 + result[5]) = v4;
  *(double *)(a3 + result[6]) = v5;
  *(double *)(a3 + result[7]) = v6;
  return result;
}

uint64_t sub_10000A6CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PhoneWallpaperView();
  uint64_t v3 = sub_100006E48();
  uint64_t v5 = *(void *)(v3 + 224);
  uint64_t v4 = *(void *)(v3 + 232);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 44));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v5, v4, 8, 10, 26, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000A7D8@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PhoneWallpaperView();
  uint64_t v2 = sub_100006E48();
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  swift_release();
  sub_100006E48();
  double v5 = sub_100080954();
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_10000A864@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PhoneWallpaperView();
  sub_100006E48();
  double v6 = sub_100080978();
  swift_release();
  sub_100006E48();
  double v7 = sub_1000809A8();
  swift_release();
  sub_100006E48();
  double v8 = sub_1000808D4();
  swift_release();
  uint64_t v9 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  uint64_t v11 = Color.init(_:white:opacity:)();
  v10(v5, v9, v2);
  uint64_t v12 = Color.init(_:white:opacity:)();
  sub_100006E48();
  double v13 = sub_100080978();
  swift_release();
  sub_100006E48();
  double v14 = sub_1000809A8();
  swift_release();
  sub_100006E48();
  double v15 = sub_1000808D4();
  swift_release();
  *(double *)a1 = v6;
  *(double *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = xmmword_10014CCA0;
  *(void *)(a1 + 48) = 0x4010000000000000;
  *(void *)(a1 + 56) = v12;
  double result = 10.0;
  *(_OWORD *)(a1 + 64) = xmmword_10014CCB0;
  *(_OWORD *)(a1 + 80) = xmmword_10014CCC0;
  *(double *)(a1 + 96) = v13;
  *(double *)(a1 + 104) = v14;
  *(double *)(a1 + 112) = v15;
  return result;
}

uint64_t sub_10000AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v25 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  __chkstk_darwin(v10);
  double v14 = (char *)&v23 - v13;
  uint64_t v15 = type metadata accessor for PhoneWallpaperView();
  uint64_t v27 = a1;
  sub_100006F7C(v15, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v17 = v16(v14, 1, a2);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v26(v14, v6);
  if (v17 == 1)
  {
    uint64_t v23 = v4;
    uint64_t v19 = *(void *)(sub_100006E48() + 240);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v28 = v19;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v16(v12, 1, a2) == 1)
    {
      return v26(v12, v6);
    }
    else
    {
      uint64_t v20 = v23;
      uint64_t v21 = v25;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v12, a2);
      uint64_t v22 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v24, v21, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, a2);
      sub_10000EA3C(v22);
      v26((char *)v22, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, a2);
    }
  }
  return result;
}

uint64_t sub_10000AE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = *a5;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = type metadata accessor for SelectAssetButton();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a6 + *(int *)(v10 + 36), a4, v9);
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v11 = (uint64_t *)(a6 + *(int *)(v10 + 44));
  type metadata accessor for RemoteViewConfiguration();
  sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v11 = result;
  v11[1] = v13;
  return result;
}

uint64_t sub_10000AF88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v4 = type metadata accessor for PhoneWallpaperView();
  sub_100006E88(a1);
  uint64_t v5 = a2 + *(int *)(v4 + 40);
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v5 = v9;
  *(void *)(v5 + 8) = v10;
  uint64_t v6 = (uint64_t *)(a2 + *(int *)(v4 + 44));
  type metadata accessor for RemoteViewConfiguration();
  sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v6 = result;
  v6[1] = v8;
  return result;
}

uint64_t type metadata accessor for PhoneWallpaperView()
{
  return sub_1000068A4();
}

uint64_t sub_10000B110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10000B118()
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_10000B210(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v4, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v9], 1, v7))
    {
      uint64_t v13 = type metadata accessor for Optional();
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v11, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v7);
    }
    type metadata accessor for Optional();
    uint64_t v15 = type metadata accessor for State();
    *(void *)&v10[*(int *)(v15 + 28)] = *(void *)&v11[*(int *)(v15 + 28)];
    uint64_t v16 = *(int *)(a3 + 40);
    uint64_t v17 = *(int *)(a3 + 44);
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = &a2[v16];
    *uint64_t v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = &a2[v17];
    uint64_t v23 = *(void *)v21;
    uint64_t v22 = *((void *)v21 + 1);
    *uint64_t v20 = v23;
    v20[1] = v22;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10000B420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v4);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10000B55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  uint64_t v18 = (void *)(a1 + v15);
  uint64_t v19 = (uint64_t *)(a2 + v15);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10000B720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_retain();
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_retain();
  swift_release();
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_retain();
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  return a1;
}

uint64_t sub_10000B970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 44);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_10000BB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_release();
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (void *)(a2 + v20);
  *(void *)(a1 + v20) = *v22;
  swift_release();
  *(void *)(v21 + 8) = v22[1];
  return a1;
}

uint64_t sub_10000BD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000BD54);
}

uint64_t sub_10000BD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for State();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_10000BE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BEB0);
}

uint64_t sub_10000BEB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_10000BFF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SelectAssetButton()
{
  return sub_1000068A4();
}

uint64_t sub_10000C054@<X0>(uint64_t a1@<X8>)
{
  return sub_100007900(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10000C060()
{
  unint64_t result = qword_100198428;
  if (!qword_100198428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198428);
  }
  return result;
}

uint64_t sub_10000C0B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000088F4(*(void *)(v1 + 32), *(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10000C0C4()
{
  return sub_100010774((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000AAC0);
}

uint64_t sub_10000C0F0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000C168()
{
  unint64_t result = qword_100198440;
  if (!qword_100198440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198440);
  }
  return result;
}

uint64_t sub_10000C1BC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000C200()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10000C254()
{
  sub_100006560(&qword_10019CD30);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t sub_10000C2A8()
{
  type metadata accessor for PhoneWallpaperViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_10000C2F8()
{
  return Bindable.projectedValue.getter();
}

uint64_t sub_10000C340@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v119 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v120 = *(void *)(a1 + 16);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v117 = type metadata accessor for Bindable();
  uint64_t v118 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v116 = (char *)&v83 - v4;
  uint64_t v109 = type metadata accessor for PlainButtonStyle();
  uint64_t v110 = *(void *)(v109 - 8);
  uint64_t v5 = __chkstk_darwin(v109);
  uint64_t v96 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = *(void *)(a1 - 8);
  uint64_t v89 = *(void *)(v124 + 64);
  __chkstk_darwin(v5);
  v122 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100006560(&qword_100198510);
  uint64_t v103 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v93 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_100006560(&qword_100198518);
  uint64_t v102 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v94 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100006560(&qword_100198520) - 8;
  __chkstk_darwin(v98);
  uint64_t v95 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_100198528);
  __chkstk_darwin(v11);
  uint64_t v99 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SavedWallpaperView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v136 = v13;
  uint64_t v137 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v136 = v13;
  uint64_t v137 = WitnessTable;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v136 = OpaqueTypeMetadata2;
  uint64_t v137 = OpaqueTypeConformance2;
  uint64_t v17 = swift_getOpaqueTypeMetadata2();
  uint64_t v18 = sub_100010250(&qword_100198530, &qword_100198528, (void (*)(void))sub_10000FF44);
  uint64_t v136 = OpaqueTypeMetadata2;
  uint64_t v137 = OpaqueTypeConformance2;
  uint64_t v19 = swift_getOpaqueTypeConformance2();
  uint64_t v88 = v11;
  uint64_t v136 = v11;
  uint64_t v137 = v17;
  uint64_t v90 = v17;
  uint64_t v138 = (void *)v18;
  uint64_t v139 = v19;
  uint64_t v92 = v18;
  uint64_t v91 = v19;
  uint64_t v20 = swift_getOpaqueTypeMetadata2();
  uint64_t v108 = v20;
  uint64_t v115 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v123 = (char *)&v83 - v21;
  uint64_t v22 = sub_10000650C(&qword_100198550);
  uint64_t v107 = v22;
  uint64_t v136 = v11;
  uint64_t v137 = v17;
  uint64_t v138 = (void *)v18;
  uint64_t v139 = v19;
  uint64_t v23 = swift_getOpaqueTypeConformance2();
  uint64_t v106 = v23;
  uint64_t v105 = sub_100010484(&qword_100198558, &qword_100198550);
  uint64_t v136 = v20;
  uint64_t v137 = v22;
  uint64_t v138 = &type metadata for Text;
  uint64_t v139 = v23;
  uint64_t v140 = v105;
  uint64_t v141 = &protocol witness table for Text;
  uint64_t v112 = &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>;
  uint64_t v113 = swift_getOpaqueTypeMetadata2();
  uint64_t v114 = *(void *)(v113 - 8);
  uint64_t v24 = __chkstk_darwin(v113);
  uint64_t v101 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v111 = (uint64_t *)((char *)&v83 - v26);
  uint64_t v27 = v124;
  uint64_t v87 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
  uint64_t v28 = v122;
  uint64_t v29 = v97;
  uint64_t v83 = a1;
  v87(v122, v97, a1);
  uint64_t v30 = *(unsigned __int8 *)(v27 + 80);
  v89 += (v30 + 32) & ~v30;
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v86 = v31;
  uint64_t v85 = v30 | 7;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v120;
  *(void *)(v32 + 16) = v120;
  *(void *)(v32 + 24) = v2;
  uint64_t v121 = v2;
  uint64_t v84 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  uint64_t v124 = v27 + 32;
  v84(v32 + v31, v28, a1);
  uint64_t v133 = v33;
  uint64_t v134 = v2;
  uint64_t v135 = v29;
  uint64_t v34 = v29;
  sub_100006560(&qword_100198560);
  sub_1000100EC();
  uint64_t v35 = v93;
  Button.init(action:label:)();
  uint64_t v36 = v96;
  PlainButtonStyle.init()();
  sub_100010484(&qword_100198540, &qword_100198510);
  sub_100010068(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v37 = v94;
  uint64_t v38 = v100;
  uint64_t v39 = v109;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v36, v39);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v35, v38);
  LOBYTE(v27) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v48 = v102;
  uint64_t v49 = (uint64_t)v95;
  uint64_t v50 = v104;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v95, v37, v104);
  uint64_t v51 = v49 + *(int *)(v98 + 44);
  *(unsigned char *)uint64_t v51 = v27;
  *(void *)(v51 + 8) = v41;
  *(void *)(v51 + 16) = v43;
  *(void *)(v51 + 24) = v45;
  *(void *)(v51 + 32) = v47;
  *(unsigned char *)(v51 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v50);
  LOBYTE(v27) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v60 = v99;
  sub_1000066D4(v49, v99, &qword_100198520);
  uint64_t v61 = v60 + *(int *)(v88 + 36);
  *(unsigned char *)uint64_t v61 = v27;
  *(void *)(v61 + 8) = v53;
  *(void *)(v61 + 16) = v55;
  *(void *)(v61 + 24) = v57;
  *(void *)(v61 + 32) = v59;
  *(unsigned char *)(v61 + 40) = 0;
  sub_1000067DC(v49, &qword_100198520);
  uint64_t v62 = v83;
  uint64_t v63 = v34;
  sub_10000C254();
  uint64_t v64 = v122;
  v87(v122, v63, v62);
  uint64_t v65 = swift_allocObject();
  uint64_t v66 = v120;
  uint64_t v67 = v121;
  *(void *)(v65 + 16) = v120;
  *(void *)(v65 + 24) = v67;
  v84(v65 + v86, v64, v62);
  swift_checkMetadataState();
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_1000067DC(v60, &qword_100198528);
  uint64_t v68 = sub_10000C2A8();
  uint64_t v124 = *(void *)(v68 + 96);
  LODWORD(v122) = *(unsigned __int8 *)(v68 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v69 = v116;
  sub_10000C2F8();
  uint64_t v70 = v66;
  uint64_t v71 = v121;
  uint64_t v131 = v66;
  uint64_t v132 = v121;
  swift_getKeyPath();
  uint64_t v72 = v117;
  Bindable<A>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v69, v72);
  uint64_t v128 = v70;
  uint64_t v129 = v71;
  uint64_t v130 = v63;
  uint64_t v125 = v70;
  uint64_t v126 = v71;
  uint64_t v127 = v63;
  uint64_t v73 = v105;
  uint64_t v74 = v106;
  uint64_t v75 = v107;
  uint64_t v76 = v108;
  uint64_t v77 = v101;
  char v78 = v123;
  View.alert<A, B>(_:isPresented:actions:message:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v78, v76);
  uint64_t v136 = v76;
  uint64_t v137 = v75;
  uint64_t v138 = &type metadata for Text;
  uint64_t v139 = v74;
  uint64_t v140 = v73;
  uint64_t v141 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2();
  uint64_t v79 = v111;
  uint64_t v80 = v113;
  sub_1000508C8(v111, v77, v113);
  uint64_t v81 = *(void (**)(char *, uint64_t))(v114 + 8);
  v81(v77, v80);
  sub_1000508C8(v119, v79, v80);
  return ((uint64_t (*)(void *, uint64_t))v81)(v79, v80);
}

uint64_t sub_10000D12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for SelectAssetButton();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C2A8();
  uint64_t v12 = self;
  if (![v12 authorizationStatusForAccessLevel:1])
  {
    swift_release();
    goto LABEL_7;
  }
  id v13 = [v12 authorizationStatusForAccessLevel:1];
  swift_release();
  if (v13 == (id)3)
  {
LABEL_7:
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    type metadata accessor for MainActor();
    uint64_t v16 = static MainActor.shared.getter();
    unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = (char *)swift_allocObject();
    *((void *)v18 + 2) = v16;
    *((void *)v18 + 3) = &protocol witness table for MainActor;
    uint64_t v19 = v21;
    *((void *)v18 + 4) = a2;
    *((void *)v18 + 5) = v19;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v17], v8, v5);
    sub_1000BA348((uint64_t)v11, (uint64_t)&unk_100198660, (uint64_t)v18);
    return swift_release();
  }
  sub_10000C2A8();
  sub_100080A08();

  return swift_release();
}

uint64_t sub_10000D3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[6] = v8;
  v6[7] = v7;
  return _swift_task_switch(sub_10000D468, v8, v7);
}

uint64_t sub_10000D468()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for SelectAssetButton();
  v0[8] = v2;
  v0[9] = sub_10000C2A8();
  uint64_t v3 = v1 + *(int *)(v2 + 36);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10019B508 + dword_10019B508);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10000D53C;
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  return v8(v3, v5, v6);
}

uint64_t sub_10000D53C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_10000D7C8;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = sub_10000D658;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10000D658()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  swift_release();
  sub_10000C200();
  uint64_t v3 = sub_10000C2A8();
  uint64_t v4 = *(void *)(v3 + 224);
  uint64_t v5 = *(void *)(v3 + 232);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(v2 + *(int *)(v1 + 44));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v4, v5, 8, 10, 28, 0, 3u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_10000D7C8()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000D838@<X0>(void *a1@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v64 = sub_100006560(&qword_100198618) - 8;
  __chkstk_darwin(v64);
  uint64_t v63 = &v48[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = &v48[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = static VerticalAlignment.center.getter();
  sub_10000DBDC((uint64_t)v72);
  long long v60 = v72[0];
  uint64_t v59 = *(void *)&v72[1];
  char v6 = BYTE8(v72[1]);
  uint64_t v61 = *(void *)&v72[3];
  char v7 = BYTE8(v72[3]);
  long long v58 = v72[2];
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  uint64_t v57 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = static Color.white.getter();
  int v54 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v52 = v9;
  uint64_t v53 = v8;
  uint64_t v50 = v11;
  uint64_t v51 = v10;
  char v69 = 0;
  char v68 = v6;
  char v67 = v7;
  char v66 = 0;
  int v49 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  char v20 = v69;
  char v21 = v68;
  char v22 = v67;
  char v23 = v66;
  char v70 = 0;
  char v24 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v33 = v70;
  char v71 = 0;
  uint64_t v34 = static Color.blue.getter();
  char v35 = static Edge.Set.all.getter();
  *(void *)&v72[0] = v62;
  *((void *)&v72[0] + 1) = 0x4010000000000000;
  LOBYTE(v72[1]) = v20;
  *(_OWORD *)((char *)&v72[1] + 8) = v60;
  *((void *)&v72[2] + 1) = v59;
  LOBYTE(v72[3]) = v21;
  *(_OWORD *)((char *)&v72[3] + 8) = v58;
  *((void *)&v72[4] + 1) = v61;
  LOBYTE(v72[5]) = v22;
  *((void *)&v72[5] + 1) = KeyPath;
  *(void *)&v72[6] = v57;
  *((void *)&v72[6] + 1) = v55;
  LOBYTE(v72[7]) = v54;
  *((void *)&v72[7] + 1) = v53;
  *(void *)&v72[8] = v52;
  *((void *)&v72[8] + 1) = v51;
  *(void *)&v72[9] = v50;
  BYTE8(v72[9]) = v23;
  LOBYTE(v72[10]) = v49;
  *((void *)&v72[10] + 1) = v13;
  *(void *)&v72[11] = v15;
  *((void *)&v72[11] + 1) = v17;
  *(void *)&v72[12] = v19;
  BYTE8(v72[12]) = v33;
  LOBYTE(v72[13]) = v24;
  *((void *)&v72[13] + 1) = v26;
  *(void *)&v72[14] = v28;
  *((void *)&v72[14] + 1) = v30;
  *(void *)&v72[15] = v32;
  BYTE8(v72[15]) = v71;
  *(void *)&v72[16] = v34;
  BYTE8(v72[16]) = v35;
  uint64_t v36 = (char *)v5 + *(int *)(v3 + 28);
  uint64_t v37 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v38 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v5 = _Q0;
  uint64_t v44 = v63;
  sub_10001081C((uint64_t)v5, (uint64_t)v63);
  *(_WORD *)&v44[*(int *)(v64 + 44)] = 256;
  uint64_t v45 = sub_100006560(&qword_100198560);
  uint64_t v46 = v65;
  sub_1000066D4((uint64_t)v44, (uint64_t)v65 + *(int *)(v45 + 36), &qword_100198618);
  memcpy(v46, v72, 0x109uLL);
  sub_100010880((uint64_t)v72);
  sub_1000067DC((uint64_t)v44, &qword_100198618);
  sub_100010934((uint64_t)v5);
  return sub_100010990((uint64_t)v72);
}

uint64_t sub_10000DBDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  type metadata accessor for SelectAssetButton();
  sub_10000C2A8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  swift_retain();
  sub_100010924(v3, v5, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v3, v5, v9);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000DD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v42 = a3;
  uint64_t v4 = sub_100006560(&qword_100198648);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v32 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(v5);
  char v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SavedWallpaperView();
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v31 = (void **)((char *)&v31 - v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = v10;
  uint64_t v44 = WitnessTable;
  uint64_t v13 = WitnessTable;
  uint64_t v36 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v40 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  char v35 = (char *)&v31 - v15;
  uint64_t v43 = v10;
  uint64_t v44 = v13;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v43 = OpaqueTypeMetadata2;
  uint64_t v44 = OpaqueTypeConformance2;
  uint64_t v37 = OpaqueTypeConformance2;
  uint64_t v38 = &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>;
  uint64_t v17 = swift_getOpaqueTypeMetadata2();
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  char v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v33 = (void **)((char *)&v31 - v21);
  type metadata accessor for SavedWallpaperViewModel();
  uint64_t v22 = type metadata accessor for SelectAssetButton();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v34 + *(int *)(v22 + 36), a2);
  sub_10001A27C((uint64_t)v9);
  char v23 = v32;
  sub_1000F30AC(v32);
  char v24 = v31;
  sub_1000F3104((uint64_t)v23, v31);
  sub_100006560(&qword_100198650);
  type metadata accessor for PresentationDetent();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10014CCD0;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_1000BE2EC(v25);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v26 = v35;
  View.presentationDetents(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v41 + 8))(v24, v10);
  uint64_t v27 = v37;
  View.presentationDragIndicator(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v26, OpaqueTypeMetadata2);
  uint64_t v43 = OpaqueTypeMetadata2;
  uint64_t v44 = v27;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = v33;
  sub_1000508C8(v33, v20, v17);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v39 + 8);
  v29(v20, v17);
  sub_1000508C8(v42, v28, v17);
  return ((uint64_t (*)(void *, uint64_t))v29)(v28, v17);
}

uint64_t sub_10000E2A0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100080A28();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10000E2D0()
{
  return sub_100080A08();
}

uint64_t sub_10000E2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v63 = a4;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v5 = type metadata accessor for SelectAssetButton();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v54 = *(void *)(v56 + 64);
  __chkstk_darwin(v5);
  uint64_t v55 = (char *)v47 - v6;
  uint64_t v7 = sub_100006560(&qword_100198620);
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  long long v60 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)v47 - v10;
  uint64_t v11 = sub_100006560(&qword_100198628);
  uint64_t v52 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  char v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v47 - v21;
  uint64_t v23 = sub_100006560(&qword_100198638);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v53 = (uint64_t)v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)v47 - v26;
  sub_10000C2A8();
  sub_100080A9C();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000067DC((uint64_t)v15, &qword_100198630);
    uint64_t v28 = 1;
    uint64_t v29 = v52;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    v47[1] = *(void *)(sub_10000C2A8() + 160);
    uint64_t v48 = v11;
    uint64_t v49 = a1;
    uint64_t v50 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
    uint64_t v30 = v51;
    uint64_t v11 = v48;
    a1 = v49;
    uint64_t v5 = v50;
    Link<>.init(_:sensitiveUrl:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    uint64_t v31 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v27, v30, v11);
    uint64_t v28 = 0;
    uint64_t v29 = v31;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v28, 1, v11);
  sub_10000C2A8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  char v33 = v55;
  uint64_t v32 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, a1, v5);
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v58;
  *(void *)(v35 + 16) = v57;
  *(void *)(v35 + 24) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v35 + v34, v33, v5);
  uint64_t v37 = v59;
  Button<>.init(_:action:)();
  uint64_t v38 = v53;
  sub_1000066D4((uint64_t)v27, v53, &qword_100198638);
  uint64_t v40 = v60;
  uint64_t v39 = v61;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  uint64_t v42 = v62;
  v41(v60, v37, v62);
  uint64_t v43 = v63;
  sub_1000066D4(v38, v63, &qword_100198638);
  uint64_t v44 = sub_100006560(&qword_100198640);
  v41((char *)(v43 + *(int *)(v44 + 48)), v40, v42);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v37, v42);
  sub_1000067DC((uint64_t)v27, &qword_100198638);
  v45(v40, v42);
  return sub_1000067DC(v38, &qword_100198638);
}

uint64_t sub_10000E93C()
{
  type metadata accessor for SelectAssetButton();
  sub_10000C2A8();
  sub_100080A08();

  return swift_release();
}

uint64_t sub_10000E988@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectAssetButton();
  sub_10000C2A8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10000EA3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - v3, a1, v2);
  type metadata accessor for State();
  return State.wrappedValue.setter();
}

uint64_t sub_10000EB28@<X0>(void *a1@<X8>)
{
  return sub_100009F30(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000EB38()
{
  return sub_100010774((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000A6CC);
}

uint64_t sub_10000EB64@<X0>(uint64_t a1@<X8>)
{
  return sub_10000A7D8(a1);
}

unint64_t sub_10000EB70()
{
  unint64_t result = qword_100198458;
  if (!qword_100198458)
  {
    sub_10000650C(&qword_100198450);
    sub_10000EBEC();
    sub_10000EC40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198458);
  }
  return result;
}

unint64_t sub_10000EBEC()
{
  unint64_t result = qword_100198460;
  if (!qword_100198460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198460);
  }
  return result;
}

unint64_t sub_10000EC40()
{
  unint64_t result = qword_100198468;
  if (!qword_100198468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198468);
  }
  return result;
}

double sub_10000EC94@<D0>(uint64_t a1@<X8>)
{
  return sub_10000A864(a1);
}

uint64_t sub_10000ECA0@<X0>(void *a1@<X8>)
{
  return sub_10000A274(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000ECB0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PhoneWallpaperView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + *(int *)(v2 + 36);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

int *sub_10000EE78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for PhoneWallpaperView();

  return sub_10000A5D0(v3, v4, a1);
}

uint64_t sub_10000EF14()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v0 = type metadata accessor for Bindable();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_10000F018(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    type metadata accessor for PhoneWallpaperViewModel();
    uint64_t v16 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = *(int *)(a3 + 44);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *uint64_t v18 = v20;
    v18[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10000F184(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 36), *(void *)(a2 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

uint64_t sub_10000F264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v15 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  return a1;
}

uint64_t sub_10000F384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  return a1;
}

uint64_t sub_10000F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_10000F5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v9 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (void *)(a2 + v10);
  *(void *)(a1 + v10) = *v12;
  swift_release();
  *(void *)(v11 + 8) = v12[1];
  return a1;
}

uint64_t sub_10000F6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000F6E0);
}

uint64_t sub_10000F6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(_DWORD *)(v8 + 84) == a2)
    {
      uint64_t v9 = a1 + *(int *)(a3 + 36);
      uint64_t v10 = *(uint64_t (**)(uint64_t))(v8 + 48);
      return v10(v9);
    }
    else
    {
      type metadata accessor for PhoneWallpaperViewModel();
      uint64_t v11 = type metadata accessor for Bindable();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
      uint64_t v13 = v11;
      uint64_t v14 = a1 + *(int *)(a3 + 40);
      return v12(v14, a2, v13);
    }
  }
}

uint64_t sub_10000F81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000F830);
}

uint64_t sub_10000F830(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
    if (*(_DWORD *)(v7 + 84) == a3)
    {
      uint64_t v8 = result + *(int *)(a4 + 36);
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
      return v9(v8, a2, a2);
    }
    else
    {
      type metadata accessor for PhoneWallpaperViewModel();
      uint64_t v10 = type metadata accessor for Bindable();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      uint64_t v12 = v10;
      uint64_t v13 = v5 + *(int *)(a4 + 40);
      return v11(v13, a2, a2, v12);
    }
  }
  return result;
}

uint64_t sub_10000F964()
{
  return swift_getWitnessTable();
}

uint64_t sub_10000FF00()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10000FF44()
{
  unint64_t result = qword_100198538;
  if (!qword_100198538)
  {
    sub_10000650C(&qword_100198520);
    sub_10000650C(&qword_100198510);
    type metadata accessor for PlainButtonStyle();
    sub_100010484(&qword_100198540, &qword_100198510);
    sub_100010068(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198538);
  }
  return result;
}

uint64_t sub_100010068(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000100B4()
{
  return sub_100010774((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, sub_10000D12C);
}

uint64_t sub_1000100E0@<X0>(void *a1@<X8>)
{
  return sub_10000D838(a1);
}

unint64_t sub_1000100EC()
{
  unint64_t result = qword_100198568;
  if (!qword_100198568)
  {
    sub_10000650C(&qword_100198560);
    sub_10001018C();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198568);
  }
  return result;
}

unint64_t sub_10001018C()
{
  unint64_t result = qword_100198570;
  if (!qword_100198570)
  {
    sub_10000650C(&qword_100198578);
    sub_100010250(&qword_100198580, &qword_100198588, (void (*)(void))sub_1000102D0);
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198570);
  }
  return result;
}

uint64_t sub_100010250(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000102D0()
{
  return sub_100010250(&qword_100198590, &qword_100198598, (void (*)(void))sub_1000102F8);
}

uint64_t sub_1000102F8()
{
  return sub_100010250(&qword_1001985A0, &qword_1001985A8, (void (*)(void))sub_100010320);
}

unint64_t sub_100010320()
{
  unint64_t result = qword_1001985B0;
  if (!qword_1001985B0)
  {
    sub_10000650C(&qword_1001985B8);
    sub_1000103C0();
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001985B0);
  }
  return result;
}

unint64_t sub_1000103C0()
{
  unint64_t result = qword_1001985C0;
  if (!qword_1001985C0)
  {
    sub_10000650C(&qword_1001985C8);
    sub_100010484(&qword_1001985D0, &qword_1001985D8);
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001985C0);
  }
  return result;
}

uint64_t sub_100010484(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000104CC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for SelectAssetButton() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_10000DD48(v5, v3, a1);
}

uint64_t sub_100010558@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100080A28();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100010588()
{
  return sub_100080A08();
}

uint64_t sub_1000105B0()
{
  return 16;
}

__n128 sub_1000105BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000105C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000E2F8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000105D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000E988(a1);
}

uint64_t sub_1000105E4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = (int *)(type metadata accessor for SelectAssetButton() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[11], v1);
  uint64_t v4 = v3 + v2[12];
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100010748()
{
  return sub_100010774((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000E93C);
}

uint64_t sub_100010774(uint64_t (*a1)(void, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(a1(0, v3, v4) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a2(v6, v3, v4);
}

uint64_t sub_10001081C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010880(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  swift_retain();
  sub_100010924(v2, v3, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100010924(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100010934(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100010990(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  swift_release();
  sub_1000065A4(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100010A3C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = (int *)(type metadata accessor for SelectAssetButton() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[11], v1);
  unint64_t v4 = v0 + v3 + v2[12];
  type metadata accessor for PhoneWallpaperViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100010BA8(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for SelectAssetButton() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100010CB0;
  return sub_10000D3CC(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_100010CB0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100010DA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100010FB0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100011104(&qword_100198668, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
  uint64_t result = sub_100011104(&qword_100198670, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100011034()
{
  return sub_100011104(&qword_100198678, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo);
}

uint64_t sub_100011080(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100011104(&qword_1001986B0, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
  uint64_t result = sub_100011104(qword_1001986B8, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100011104(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001114C()
{
  type metadata accessor for WatchFacesViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_10001118C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - v5, a1, v2, v4);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_100011280@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v38 = a2;
  sub_10000650C(&qword_1001983F0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v36 = a1;
  type metadata accessor for Array();
  type metadata accessor for ScrollAsset();
  swift_getWitnessTable();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v54 = *(void *)(v4 + 8);
  type metadata accessor for ForEach();
  uint64_t v49 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ScrollView();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ViewAlignedScrollTargetBehavior();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v52 = OpaqueTypeConformance2;
  uint64_t v53 = v54;
  uint64_t v7 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v50 = OpaqueTypeMetadata2;
  uint64_t v51 = v7;
  uint64_t v47 = swift_getOpaqueTypeConformance2();
  uint64_t v48 = &protocol witness table for _FrameLayout;
  uint64_t v35 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = *(void *)(v54 + 8);
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  uint64_t v52 = WitnessTable;
  uint64_t v53 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_100198400);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198740);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = v4;
  _s15ShazamEventsApp17SelectAssetButtonVMa_0();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for VStack();
  uint64_t v31 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v29 - v16;
  sub_10000650C(&qword_100198410);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v30 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v32 = (uint64_t *)((char *)&v29 - v21);
  uint64_t v39 = v3;
  uint64_t v40 = v11;
  uint64_t v41 = v37;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  static Edge.Set.top.getter();
  sub_10001114C();
  swift_release();
  uint64_t v22 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  LOBYTE(v3) = *(unsigned char *)(sub_10001114C() + 136);
  swift_release();
  LOBYTE(v50) = (v3 & 1) == 0;
  static Alignment.center.getter();
  sub_100006560(&qword_100198418);
  uint64_t v44 = v22;
  uint64_t v45 = &protocol witness table for _PaddingLayout;
  uint64_t v23 = swift_getWitnessTable();
  sub_10000C0F0(&qword_100198420, &qword_100198418, (void (*)(void))sub_10000C060);
  uint64_t v24 = v30;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v15);
  uint64_t v25 = sub_100010484(&qword_100198430, &qword_100198410);
  uint64_t v42 = v23;
  uint64_t v43 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v32;
  sub_1000508C8(v32, v24, v18);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
  v27(v24, v18);
  sub_1000508C8(v38, v26, v18);
  return ((uint64_t (*)(void *, uint64_t))v27)(v26, v18);
}

uint64_t sub_100011B94@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v120 = a1;
  uint64_t v116 = a4;
  uint64_t v6 = _s15ShazamEventsApp17SelectAssetButtonVMa_0();
  uint64_t v110 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v93 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v94 = (char **)((char *)&v89 - v9);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v108 = (char *)&v89 - v12;
  uint64_t v109 = *(void *)(a2 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v90 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v89 - v15;
  uint64_t v115 = v6;
  uint64_t v114 = type metadata accessor for Optional();
  uint64_t v111 = *(void *)(v114 - 8);
  uint64_t v16 = __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v112 = (char *)&v89 - v18;
  uint64_t v19 = type metadata accessor for WatchFacesView();
  uint64_t v106 = *(void **)(v19 - 8);
  uint64_t v104 = v106[8];
  __chkstk_darwin(v19);
  uint64_t v105 = (char *)&v89 - v20;
  uint64_t v21 = type metadata accessor for Array();
  uint64_t v22 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v107 = (char *)a3;
  uint64_t v24 = *(void **)(a3 + 8);
  uint64_t v127 = v21;
  uint64_t v128 = a2;
  uint64_t v129 = v22;
  uint64_t v130 = (void *)WitnessTable;
  uint64_t v131 = v24;
  type metadata accessor for ForEach();
  v126[8] = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for HStack();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v127 = v25;
  uint64_t v128 = v26;
  swift_getOpaqueTypeMetadata2();
  uint64_t v127 = v25;
  uint64_t v128 = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = type metadata accessor for ScrollView();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v127 = v27;
  uint64_t v128 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v30 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v127 = v27;
  uint64_t v128 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v127 = OpaqueTypeMetadata2;
  uint64_t v128 = v30;
  uint64_t v129 = OpaqueTypeConformance2;
  uint64_t v130 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v32 = swift_getOpaqueTypeMetadata2();
  uint64_t v127 = OpaqueTypeMetadata2;
  uint64_t v128 = v30;
  uint64_t v129 = OpaqueTypeConformance2;
  uint64_t v130 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v33 = swift_getOpaqueTypeConformance2();
  uint64_t v127 = v32;
  uint64_t v128 = a2;
  uint64_t v129 = v33;
  uint64_t v130 = v24;
  uint64_t v34 = swift_getOpaqueTypeMetadata2();
  uint64_t v127 = v32;
  uint64_t v128 = a2;
  uint64_t v129 = v33;
  uint64_t v130 = v24;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v127 = v34;
  uint64_t v128 = v35;
  swift_getOpaqueTypeMetadata2();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v127 = v34;
  uint64_t v128 = v35;
  v126[6] = swift_getOpaqueTypeConformance2();
  v126[7] = (uint64_t)&protocol witness table for _FrameLayout;
  uint64_t v37 = swift_getWitnessTable();
  v126[5] = v24[1];
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v127 = v36;
  uint64_t v128 = v10;
  uint64_t v92 = v10;
  uint64_t v129 = v37;
  uint64_t v130 = (void *)v38;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_100198400);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198740);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v39 = (char *)a2;
  type metadata accessor for PageControl();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v95 = swift_getWitnessTable();
  uint64_t v40 = type metadata accessor for VStack();
  uint64_t v97 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v89 - v41;
  uint64_t v103 = type metadata accessor for ModifiedContent();
  uint64_t v117 = *(void *)(v103 - 8);
  uint64_t v43 = __chkstk_darwin(v103);
  uint64_t v102 = (char *)&v89 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v96 = (char *)&v89 - v46;
  __chkstk_darwin(v45);
  uint64_t v118 = (char **)((char *)&v89 - v47);
  uint64_t v119 = v19;
  LODWORD(v37) = *(unsigned __int8 *)(sub_10001114C() + 136);
  uint64_t v48 = swift_release();
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v37 == 1)
  {
    uint64_t v53 = sub_10001114C();
    uint64_t v49 = *(void *)(v53 + 16);
    uint64_t v50 = *(void *)(v53 + 24);
    uint64_t v51 = *(unsigned __int8 *)(v53 + 32);
    uint64_t v52 = *(void **)(v53 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v48 = swift_release();
  }
  uint64_t v98 = v52;
  uint64_t v99 = v51;
  uint64_t v100 = v50;
  uint64_t v101 = v49;
  __chkstk_darwin(v48);
  uint64_t v54 = v107;
  *(&v89 - 4) = v39;
  *(&v89 - 3) = v54;
  uint64_t v55 = v120;
  *(&v89 - 2) = v120;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t v56 = v106;
  uint64_t v57 = v105;
  uint64_t v58 = v119;
  ((void (*)(char *, char *, uint64_t))v106[2])(v105, v55, v119);
  unint64_t v59 = (*((unsigned __int8 *)v56 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v56 + 80);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v39;
  *(void *)(v60 + 24) = v54;
  uint64_t v61 = v57;
  uint64_t v62 = v39;
  ((void (*)(unint64_t, char *, uint64_t))v56[4])(v60 + v59, v61, v58);
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = v96;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v42, v40);
  v126[3] = v63;
  v126[4] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  uint64_t v65 = v103;
  uint64_t v105 = (char *)swift_getWitnessTable();
  sub_1000508C8(v118, v64, v65);
  char v66 = *(void **)(v117 + 8);
  uint64_t v107 = (char *)(v117 + 8);
  uint64_t v106 = v66;
  ((void (*)(char *, uint64_t))v66)(v64, v65);
  char v67 = v108;
  sub_100006F7C(v58, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v68 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v109 + 48))(v67, 1, v62) == 1)
  {
    (*(void (**)(char *, uint64_t))(v91 + 8))(v67, v92);
    char v69 = v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v113, 1, 1, v115);
    swift_getWitnessTable();
    char v70 = v112;
    uint64_t v71 = (uint64_t)v112;
    uint64_t v72 = (uint64_t)v69;
  }
  else
  {
    uint64_t v73 = v89;
    (*(void (**)(char *, char *, char *))(v68 + 32))(v89, v67, v62);
    uint64_t v74 = (uint64_t)v90;
    (*(void (**)(char *, char *, char *))(v68 + 16))(v90, v73, v62);
    uint64_t v75 = sub_10001114C();
    uint64_t v76 = v93;
    sub_10001503C(v74, v75, v93);
    (*(void (**)(char *, char *))(v68 + 8))(v73, v62);
    uint64_t v77 = v115;
    swift_getWitnessTable();
    char v78 = v94;
    sub_1000508C8(v94, v76, v77);
    uint64_t v79 = v110;
    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    v80(v76, v77);
    char v69 = v113;
    sub_1000508C8(v113, v78, v77);
    v80((uint64_t)v78, v77);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v69, 0, 1, v77);
    uint64_t v71 = (uint64_t)v112;
    uint64_t v72 = (uint64_t)v69;
    char v70 = v112;
  }
  sub_100050904(v72, v71);
  uint64_t v81 = v111;
  uint64_t v82 = *(void (**)(char *, uint64_t))(v111 + 8);
  uint64_t v83 = v114;
  v82(v69, v114);
  uint64_t v127 = v101;
  uint64_t v128 = v100;
  uint64_t v129 = v99;
  uint64_t v130 = v98;
  v126[0] = (uint64_t)&v127;
  uint64_t v84 = (uint64_t)v102;
  uint64_t v85 = v118;
  (*(void (**)(char *, void *, uint64_t))(v117 + 16))(v102, v118, v65);
  v126[1] = v84;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v69, v70, v83);
  v126[2] = (uint64_t)v69;
  v125[0] = sub_100006560(&qword_1001983F0);
  v125[1] = v65;
  v125[2] = v83;
  uint64_t v122 = sub_10000C0F0(&qword_100198438, &qword_1001983F0, (void (*)(void))sub_10000C168);
  uint64_t v123 = v105;
  uint64_t v121 = swift_getWitnessTable();
  uint64_t v124 = swift_getWitnessTable();
  sub_100050970(v126, 3uLL, (uint64_t)v125);
  v82(v70, v83);
  uint64_t v86 = v85;
  uint64_t v87 = (void (*)(uint64_t, uint64_t))v106;
  ((void (*)(void *, uint64_t))v106)(v86, v65);
  v82(v69, v83);
  v87(v84, v65);
  return sub_10000C1BC(v127, v128);
}

uint64_t sub_100012B2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v203 = a1;
  uint64_t v194 = a4;
  uint64_t v4 = *(void **)(a3 + 8);
  uint64_t v204 = a3;
  uint64_t v196 = v4[1];
  uint64_t v6 = type metadata accessor for PageControl();
  uint64_t v189 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v132 = (uint64_t *)((char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v133 = (uint64_t *)((char *)&v131 - v9);
  uint64_t v192 = v10;
  uint64_t v193 = type metadata accessor for Optional();
  uint64_t v201 = *(void *)(v193 - 8);
  uint64_t v11 = __chkstk_darwin(v193);
  v191 = (uint64_t *)((char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v190 = (uint64_t)&v131 - v13;
  uint64_t v199 = type metadata accessor for WatchFacesView();
  uint64_t v186 = *(void *)(v199 - 8);
  uint64_t v187 = *(void *)(v186 + 64);
  __chkstk_darwin(v199);
  v185 = (char *)&v131 - v14;
  uint64_t v197 = type metadata accessor for Optional();
  uint64_t v188 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  v184 = (char *)&v131 - v15;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v181 = *(void *)(v16 - 8);
  uint64_t v182 = v16;
  __chkstk_darwin(v16);
  v195 = (char *)&v131 - v17;
  uint64_t v18 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v18 - 8);
  v179 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v180 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  v178 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ContentMarginPlacement();
  uint64_t v176 = *(void *)(v22 - 8);
  uint64_t v177 = v22;
  __chkstk_darwin(v22);
  v174 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Array();
  uint64_t v25 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v218 = v24;
  v219 = a2;
  uint64_t v220 = v25;
  v221 = (void *)WitnessTable;
  v222 = v4;
  type metadata accessor for ForEach();
  v217[11] = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for HStack();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v218 = v27;
  v219 = (void *)v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v218 = v27;
  v219 = (void *)v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = type metadata accessor for ScrollView();
  uint64_t v163 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  v149 = (char *)&v131 - v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v218 = v29;
  v219 = (void *)v31;
  uint64_t v32 = v31;
  uint64_t v146 = v31;
  uint64_t v33 = swift_getOpaqueTypeMetadata2();
  uint64_t v161 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v148 = (char *)&v131 - v34;
  uint64_t v218 = v29;
  v219 = (void *)v32;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v33;
  v219 = (void *)v20;
  uint64_t v36 = v33;
  uint64_t v142 = v20;
  uint64_t v143 = v33;
  uint64_t v37 = v20;
  uint64_t v220 = v35;
  v221 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v145 = v35;
  uint64_t v38 = swift_getOpaqueTypeMetadata2();
  uint64_t v159 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v141 = (char *)&v131 - v39;
  uint64_t v218 = v36;
  v219 = (void *)v37;
  uint64_t v220 = v35;
  v221 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v38;
  v219 = a2;
  uint64_t v41 = v38;
  uint64_t v138 = v38;
  uint64_t v139 = v40;
  uint64_t v220 = v40;
  v221 = v4;
  uint64_t v42 = v40;
  uint64_t v140 = v4;
  uint64_t v43 = swift_getOpaqueTypeMetadata2();
  uint64_t v158 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v136 = (char *)&v131 - v44;
  uint64_t v218 = v41;
  v219 = a2;
  v202 = a2;
  uint64_t v220 = v42;
  v221 = v4;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v218 = v43;
  v219 = (void *)v45;
  uint64_t v134 = v43;
  uint64_t v135 = v45;
  uint64_t v46 = v45;
  uint64_t v150 = swift_getOpaqueTypeMetadata2();
  uint64_t v157 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v137 = (char *)&v131 - v47;
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v155 = v48;
  uint64_t v168 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  v147 = (char *)&v131 - v49;
  uint64_t v218 = v43;
  v219 = (void *)v46;
  uint64_t v144 = swift_getOpaqueTypeConformance2();
  v217[9] = v144;
  v217[10] = &protocol witness table for _FrameLayout;
  v175 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v153 = v50;
  v217[8] = v196;
  uint64_t v51 = v197;
  uint64_t v154 = swift_getWitnessTable();
  uint64_t v218 = v48;
  v219 = (void *)v51;
  uint64_t v220 = v50;
  v221 = (void *)v154;
  v162 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v160 = swift_getOpaqueTypeMetadata2();
  uint64_t v167 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  v198 = (char *)&v131 - v52;
  sub_10000650C(&qword_100198400);
  uint64_t v164 = type metadata accessor for ModifiedContent();
  uint64_t v171 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  v156 = (char *)&v131 - v53;
  sub_10000650C(&qword_100198740);
  uint64_t v170 = type metadata accessor for ModifiedContent();
  uint64_t v173 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  v165 = (char *)&v131 - v54;
  uint64_t v200 = type metadata accessor for ModifiedContent();
  uint64_t v172 = *(void *)(v200 - 8);
  uint64_t v55 = __chkstk_darwin(v200);
  v183 = (char *)&v131 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __chkstk_darwin(v55);
  v166 = (char *)&v131 - v58;
  __chkstk_darwin(v57);
  v169 = (uint64_t *)((char *)&v131 - v59);
  static Axis.Set.horizontal.getter();
  v211 = a2;
  uint64_t v212 = v204;
  uint64_t v60 = v203;
  uint64_t v213 = v203;
  uint64_t v61 = v149;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v62 = v199;
  sub_10001114C();
  sub_1000B2B50();
  swift_release();
  uint64_t v63 = v174;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ();
  uint64_t v64 = v148;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v63, v177);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v61, v29);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  uint64_t v65 = v178;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  char v67 = v141;
  uint64_t v66 = v142;
  uint64_t v68 = v143;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, uint64_t))(v180 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v64, v68);
  char v69 = v195;
  uint64_t v70 = v62;
  sub_100006F7C(v62, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  uint64_t v71 = v136;
  uint64_t v72 = v138;
  uint64_t v73 = v202;
  View.scrollPosition<A>(id:anchor:)();
  (*(void (**)(char *, uint64_t))(v181 + 8))(v69, v182);
  uint64_t v74 = v73;
  (*(void (**)(char *, uint64_t))(v159 + 8))(v67, v72);
  uint64_t v75 = v70;
  sub_10001114C();
  sub_1000B2B90();
  swift_release();
  uint64_t v76 = v137;
  uint64_t v77 = v134;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v158 + 8))(v71, v77);
  sub_10001114C();
  sub_1000B2BC8();
  swift_release();
  static Alignment.center.getter();
  char v78 = v147;
  uint64_t v79 = v150;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v157 + 8))(v76, v79);
  uint64_t v80 = v184;
  sub_100006F7C(v75, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v82 = v185;
  uint64_t v81 = v186;
  uint64_t v83 = v60;
  uint64_t v84 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v186 + 16))(v185, v83, v75);
  uint64_t v85 = v81;
  unint64_t v86 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  uint64_t v87 = swift_allocObject();
  uint64_t v88 = v204;
  *(void *)(v87 + 16) = v74;
  *(void *)(v87 + 24) = v88;
  (*(void (**)(unint64_t, char *, uint64_t))(v85 + 32))(v87 + v86, v82, v84);
  uint64_t v89 = v80;
  uint64_t v91 = (void *)v154;
  uint64_t v90 = v155;
  uint64_t v92 = v197;
  uint64_t v93 = v153;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v188 + 8))(v89, v92);
  uint64_t v94 = v90;
  (*(void (**)(char *, uint64_t))(v168 + 8))(v78, v90);
  static Alignment.center.getter();
  uint64_t v95 = v202;
  v208 = v202;
  uint64_t v209 = v88;
  uint64_t v96 = v203;
  uint64_t v210 = v203;
  sub_100006560(&qword_100198450);
  uint64_t v218 = v94;
  v219 = (void *)v92;
  uint64_t v220 = v93;
  v221 = v91;
  uint64_t v97 = swift_getOpaqueTypeConformance2();
  sub_10000EB70();
  uint64_t v98 = v156;
  uint64_t v99 = v160;
  uint64_t v100 = v198;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v167 + 8))(v100, v99);
  static Alignment.center.getter();
  v205 = v95;
  uint64_t v206 = v204;
  uint64_t v207 = v96;
  sub_100006560(&qword_100198748);
  uint64_t v101 = sub_100010484(&qword_100198478, &qword_100198400);
  v217[6] = v97;
  v217[7] = v101;
  uint64_t v102 = v164;
  uint64_t v103 = swift_getWitnessTable();
  sub_100010484(&qword_100198750, &qword_100198748);
  uint64_t v104 = v165;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v171 + 8))(v98, v102);
  static Edge.Set.bottom.getter();
  uint64_t v105 = sub_100010484(qword_100198758, &qword_100198740);
  v217[4] = v103;
  v217[5] = v105;
  uint64_t v106 = v170;
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v108 = v166;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v173 + 8))(v104, v106);
  v217[2] = v107;
  v217[3] = &protocol witness table for _PaddingLayout;
  uint64_t v109 = v200;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v111 = v169;
  uint64_t v197 = v110;
  sub_1000508C8(v169, v108, v109);
  uint64_t v112 = v172;
  uint64_t v113 = *(char **)(v172 + 8);
  uint64_t v204 = v172 + 8;
  v198 = v113;
  ((void (*)(char *, uint64_t))v113)(v108, v109);
  uint64_t v114 = v199;
  sub_10001114C();
  LOBYTE(v108) = sub_1000B2B90();
  swift_release();
  if (v108)
  {
    uint64_t v115 = *(void *)(sub_10001114C() + 112);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v116 = (uint64_t)v195;
    sub_100006F7C(v114, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    uint64_t v117 = v132;
    sub_1000B49C4(v115, v116, v132);
    uint64_t v118 = v192;
    swift_getWitnessTable();
    uint64_t v119 = v133;
    sub_1000508C8(v133, v117, v118);
    uint64_t v120 = v189;
    uint64_t v121 = *(void (**)(void *, uint64_t))(v189 + 8);
    v121(v117, v118);
    uint64_t v122 = v191;
    sub_1000508C8(v191, v119, v118);
    v121(v119, v118);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v122, 0, 1, v118);
  }
  else
  {
    uint64_t v122 = v191;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v191, 1, 1, v192);
    swift_getWitnessTable();
  }
  uint64_t v123 = v190;
  sub_100050904((uint64_t)v122, v190);
  uint64_t v124 = *(void (**)(void *, uint64_t))(v201 + 8);
  uint64_t v125 = v193;
  v124(v122, v193);
  uint64_t v126 = *(void (**)(char *, void *, uint64_t))(v112 + 16);
  uint64_t v127 = (uint64_t)v183;
  uint64_t v128 = v200;
  v126(v183, v111, v200);
  uint64_t v218 = v127;
  (*(void (**)(void *, uint64_t, uint64_t))(v201 + 16))(v122, v123, v125);
  v219 = v122;
  v217[0] = v128;
  v217[1] = v125;
  uint64_t v215 = v197;
  uint64_t v214 = swift_getWitnessTable();
  uint64_t v216 = swift_getWitnessTable();
  sub_100050970(&v218, 2uLL, (uint64_t)v217);
  v124((void *)v123, v125);
  uint64_t v129 = (uint64_t (*)(uint64_t, uint64_t))v198;
  ((void (*)(void *, uint64_t))v198)(v111, v128);
  v124(v122, v125);
  return v129(v127, v128);
}

uint64_t sub_100014168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a4;
  uint64_t v25 = a2;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = type metadata accessor for ScrollAsset();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v33 = v6;
  uint64_t v34 = a2;
  uint64_t v35 = v7;
  uint64_t v36 = WitnessTable;
  uint64_t v37 = v9;
  type metadata accessor for ForEach();
  uint64_t v32 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  v24[1] = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v33 = v10;
  uint64_t v34 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v17 = __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (void *)((char *)v24 - v20);
  uint64_t v29 = v25;
  uint64_t v30 = v26;
  uint64_t v31 = v27;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  View.scrollTargetLayout(isEnabled:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v33 = v10;
  uint64_t v34 = v14;
  swift_getOpaqueTypeConformance2();
  sub_1000508C8(v21, v19, OpaqueTypeMetadata2);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v19, OpaqueTypeMetadata2);
  sub_1000508C8(v28, v21, OpaqueTypeMetadata2);
  return ((uint64_t (*)(void *, uint64_t))v22)(v21, OpaqueTypeMetadata2);
}

uint64_t sub_1000144AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v7 = type metadata accessor for WatchFacesView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - v9;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t v32 = v11;
  uint64_t v12 = type metadata accessor for ScrollAsset();
  uint64_t v31 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = *(void *)(a3 + 8);
  uint64_t v30 = WitnessTable;
  uint64_t v38 = v11;
  uint64_t v39 = a2;
  uint64_t v40 = v12;
  uint64_t v41 = WitnessTable;
  uint64_t v42 = v29;
  uint64_t v14 = type metadata accessor for ForEach();
  uint64_t v33 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v27 = (void *)((char *)v26 - v18);
  uint64_t v19 = *(void *)(sub_10001114C() + 112);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v38 = v19;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  v26[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v10, v7);
  uint64_t v25 = sub_100010068(&qword_1001983F8, (void (*)(uint64_t))type metadata accessor for ScrollAsset);
  ForEach<>.init(_:id:content:)();
  uint64_t v37 = v25;
  swift_getWitnessTable();
  uint64_t v22 = v27;
  sub_1000508C8(v27, v17, v14);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v33 + 8);
  v23(v17, v14);
  sub_1000508C8(v34, v22, v14);
  return ((uint64_t (*)(void *, uint64_t))v23)(v22, v14);
}

int *sub_100014808@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  type metadata accessor for WatchFacesView();
  sub_10001114C();
  double v4 = sub_1000B2ACC();
  swift_release();
  sub_10001114C();
  double v5 = sub_1000B2AFC();
  swift_release();
  sub_10001114C();
  double v6 = sub_1000B2B20();
  swift_release();
  uint64_t result = (int *)type metadata accessor for ScrollAsset();
  *(double *)(a3 + result[5]) = v4;
  *(double *)(a3 + result[6]) = v5;
  *(double *)(a3 + result[7]) = v6;
  return result;
}

uint64_t sub_100014904(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WatchFacesView();
  uint64_t v3 = sub_10001114C();
  uint64_t v5 = *(void *)(v3 + 96);
  uint64_t v4 = *(void *)(v3 + 104);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v5, v4, 8, 10, 27, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100014A10@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for WatchFacesView();
  uint64_t v2 = sub_10001114C();
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  swift_release();
  sub_10001114C();
  double v5 = sub_1000B2BCC();
  uint64_t result = swift_release();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_100014A9C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WatchFacesView();
  uint64_t v6 = sub_10001114C();
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v18 = *(void *)(v6 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  sub_10001114C();
  double v8 = sub_1000B2BCC();
  swift_release();
  uint64_t v9 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  uint64_t v11 = Color.init(_:white:opacity:)();
  v10(v5, v9, v2);
  uint64_t v12 = Color.init(_:white:opacity:)();
  sub_10001114C();
  double v13 = sub_1000B2BF0();
  swift_release();
  sub_10001114C();
  double v14 = sub_1000B2C20();
  swift_release();
  sub_10001114C();
  double v15 = sub_1000B3460();
  swift_release();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = xmmword_10014CCA0;
  *(void *)(a1 + 48) = 0x4010000000000000;
  *(void *)(a1 + 56) = v12;
  double result = 10.0;
  *(_OWORD *)(a1 + 64) = xmmword_10014CCB0;
  *(_OWORD *)(a1 + 80) = xmmword_10014CF30;
  *(double *)(a1 + 96) = v13;
  *(double *)(a1 + 104) = v14;
  *(double *)(a1 + 112) = v15;
  return result;
}

uint64_t sub_100014CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v25 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v24 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  __chkstk_darwin(v10);
  double v14 = (char *)&v23 - v13;
  uint64_t v15 = type metadata accessor for WatchFacesView();
  uint64_t v27 = a1;
  sub_100006F7C(v15, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v17 = v16(v14, 1, a2);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = v26(v14, v6);
  if (v17 == 1)
  {
    uint64_t v23 = v4;
    uint64_t v19 = *(void *)(sub_10001114C() + 112);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v28 = v19;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection.first.getter();
    swift_bridgeObjectRelease();
    if (v16(v12, 1, a2) == 1)
    {
      return v26(v12, v6);
    }
    else
    {
      uint64_t v20 = v23;
      uint64_t v21 = v25;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v12, a2);
      uint64_t v22 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v24, v21, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, a2);
      sub_10001719C(v22);
      v26((char *)v22, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v21, a2);
    }
  }
  return result;
}

uint64_t sub_10001503C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)a2 + 80) - 8) + 32))(a3, a1, *(void *)(*(void *)a2 + 80));
  uint64_t v5 = _s15ShazamEventsApp17SelectAssetButtonVMa_0();
  *(void *)(a3 + *(int *)(v5 + 36)) = a2;
  uint64_t v6 = (uint64_t *)(a3 + *(int *)(v5 + 40));
  type metadata accessor for RemoteViewConfiguration();
  sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v6 = result;
  v6[1] = v8;
  return result;
}

uint64_t sub_100015134@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();
  Bindable<A>.init(wrappedValue:)();
  uint64_t v4 = type metadata accessor for WatchFacesView();
  sub_10001118C(a1);
  uint64_t v5 = (uint64_t *)(a2 + *(int *)(v4 + 40));
  type metadata accessor for RemoteViewConfiguration();
  sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *uint64_t v5 = result;
  v5[1] = v7;
  return result;
}

uint64_t type metadata accessor for WatchFacesView()
{
  return sub_1000068A4();
}

uint64_t sub_100015284()
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t result = type metadata accessor for Bindable();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_100015378(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    type metadata accessor for WatchFacesViewModel();
    uint64_t v8 = type metadata accessor for Bindable();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v4, a2, v8);
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v9], 1, v7))
    {
      uint64_t v13 = type metadata accessor for Optional();
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v11, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v7);
    }
    type metadata accessor for Optional();
    uint64_t v15 = type metadata accessor for State();
    *(void *)&v10[*(int *)(v15 + 28)] = *(void *)&v11[*(int *)(v15 + 28)];
    uint64_t v16 = *(int *)(a3 + 40);
    int v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = &a2[v16];
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *((void *)v18 + 1);
    *int v17 = v20;
    v17[1] = v19;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100015568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v4);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();

  return swift_release();
}

uint64_t sub_100015694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100015838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_retain();
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_retain();
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  return a1;
}

uint64_t sub_100015A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v8, 1, v6))
  {
    uint64_t v12 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
  }
  type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100015BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  type metadata accessor for WatchFacesViewModel();
  uint64_t v7 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(a1 + v8, 1, v6);
  int v14 = v12((uint64_t)v10, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v9, v10, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for Optional();
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v10, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v6);
LABEL_7:
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for State();
  *(void *)&v9[*(int *)(v16 + 28)] = *(void *)&v10[*(int *)(v16 + 28)];
  swift_release();
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (void *)(a2 + v17);
  *(void *)(a1 + v17) = *v19;
  swift_release();
  *(void *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_100015E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015E14);
}

uint64_t sub_100015E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for State();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100015F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015F6C);
}

uint64_t sub_100015F6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WatchFacesViewModel();
  uint64_t v8 = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for State();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40)) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000160AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _s15ShazamEventsApp17SelectAssetButtonVMa_0()
{
  return sub_1000068A4();
}

uint64_t sub_10001610C@<X0>(uint64_t a1@<X8>)
{
  return sub_100011B94(*(char **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100016118@<X0>(uint64_t a1@<X8>)
{
  return sub_100012B2C(*(void *)(v1 + 32), *(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100016128()
{
  return sub_100018490((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100014CE0);
}

uint64_t sub_100016154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v4 = type metadata accessor for PlainButtonStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v6);
  uint64_t v50 = sub_100006560(&qword_100198510);
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v47 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100006560(&qword_100198518);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198520);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  int v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  *(void *)(v17 + 16) = v18;
  *(void *)(v17 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v57 = v18;
  uint64_t v58 = v19;
  uint64_t v59 = v2;
  sub_100006560(&qword_100198560);
  sub_1000100EC();
  uint64_t v20 = v47;
  Button.init(action:label:)();
  uint64_t v21 = v49;
  PlainButtonStyle.init()();
  sub_100010484(&qword_100198540, &qword_100198510);
  sub_100010068(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v22 = v48;
  uint64_t v23 = v50;
  uint64_t v24 = v54;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v21, v24);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v23);
  LOBYTE(a1) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = v51;
  uint64_t v34 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v15, v22, v53);
  uint64_t v35 = &v15[*(int *)(v13 + 44)];
  *uint64_t v35 = a1;
  *((void *)v35 + 1) = v26;
  *((void *)v35 + 2) = v28;
  *((void *)v35 + 3) = v30;
  *((void *)v35 + 4) = v32;
  v35[40] = 0;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v34);
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v44 = v56;
  sub_1000066D4((uint64_t)v15, v56, &qword_100198520);
  uint64_t v45 = v44 + *(int *)(sub_100006560(&qword_100198528) + 36);
  *(unsigned char *)uint64_t v45 = a1;
  *(void *)(v45 + 8) = v37;
  *(void *)(v45 + 16) = v39;
  *(void *)(v45 + 24) = v41;
  *(void *)(v45 + 32) = v43;
  *(unsigned char *)(v45 + 40) = 0;
  return sub_1000067DC((uint64_t)v15, &qword_100198520);
}

uint64_t sub_10001665C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s15ShazamEventsApp17SelectAssetButtonVMa_0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for MainActor();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v14;
  *((void *)v16 + 3) = &protocol witness table for MainActor;
  *((void *)v16 + 4) = a2;
  *((void *)v16 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], v9, v6);
  sub_1000BA348((uint64_t)v12, (uint64_t)&unk_1001987E8, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_100016850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v6[5] = type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10019CC78 + dword_10019CC78);
  uint64_t v10 = (void *)swift_task_alloc();
  v6[7] = v10;
  void *v10 = v6;
  v10[1] = sub_100016934;
  return v12(a4, a5, a6);
}

uint64_t sub_100016934()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
    uint64_t v6 = sub_100016C28;
  }
  else
  {
    uint64_t v7 = _s15ShazamEventsApp17SelectAssetButtonVMa_0();
    *(void *)(v2 + 72) = v7;
    *(_DWORD *)(v2 + 80) = *(_DWORD *)(v7 + 36);
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v8;
    uint64_t v6 = sub_100016ACC;
  }
  return _swift_task_switch(v6, v3, v5);
}

uint64_t sub_100016ACC()
{
  uint64_t v1 = *(int *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v4 = *(void *)(v3 + v1);
  uint64_t v5 = *(void *)(v4 + 104);
  uint64_t v6 = *(void *)(v3 + *(int *)(v2 + 40));
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 96);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000AC4E4(v7, v5, 8, 10, 7, 0, 3u, v6);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100010068((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    swift_bridgeObjectRetain();
    return EnvironmentObject.error()();
  }
}

uint64_t sub_100016C28()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100016C8C@<X0>(void *a1@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v64 = sub_100006560(&qword_100198618) - 8;
  __chkstk_darwin(v64);
  uint64_t v63 = &v48[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = &v48[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v62 = static VerticalAlignment.center.getter();
  sub_100017030((uint64_t)v72);
  long long v60 = v72[0];
  uint64_t v59 = *(void *)&v72[1];
  char v6 = BYTE8(v72[1]);
  uint64_t v61 = *(void *)&v72[3];
  char v7 = BYTE8(v72[3]);
  long long v58 = v72[2];
  static Font.body.getter();
  static Font.Weight.semibold.getter();
  uint64_t v57 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = static Color.white.getter();
  int v54 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v52 = v9;
  uint64_t v53 = v8;
  uint64_t v50 = v11;
  uint64_t v51 = v10;
  char v69 = 0;
  char v68 = v6;
  char v67 = v7;
  char v66 = 0;
  int v49 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  char v20 = v69;
  char v21 = v68;
  char v22 = v67;
  char v23 = v66;
  char v70 = 0;
  char v24 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v33 = v70;
  char v71 = 0;
  uint64_t v34 = static Color.blue.getter();
  char v35 = static Edge.Set.all.getter();
  *(void *)&v72[0] = v62;
  *((void *)&v72[0] + 1) = 0x4010000000000000;
  LOBYTE(v72[1]) = v20;
  *(_OWORD *)((char *)&v72[1] + 8) = v60;
  *((void *)&v72[2] + 1) = v59;
  LOBYTE(v72[3]) = v21;
  *(_OWORD *)((char *)&v72[3] + 8) = v58;
  *((void *)&v72[4] + 1) = v61;
  LOBYTE(v72[5]) = v22;
  *((void *)&v72[5] + 1) = KeyPath;
  *(void *)&v72[6] = v57;
  *((void *)&v72[6] + 1) = v55;
  LOBYTE(v72[7]) = v54;
  *((void *)&v72[7] + 1) = v53;
  *(void *)&v72[8] = v52;
  *((void *)&v72[8] + 1) = v51;
  *(void *)&v72[9] = v50;
  BYTE8(v72[9]) = v23;
  LOBYTE(v72[10]) = v49;
  *((void *)&v72[10] + 1) = v13;
  *(void *)&v72[11] = v15;
  *((void *)&v72[11] + 1) = v17;
  *(void *)&v72[12] = v19;
  BYTE8(v72[12]) = v33;
  LOBYTE(v72[13]) = v24;
  *((void *)&v72[13] + 1) = v26;
  *(void *)&v72[14] = v28;
  *((void *)&v72[14] + 1) = v30;
  *(void *)&v72[15] = v32;
  BYTE8(v72[15]) = v71;
  *(void *)&v72[16] = v34;
  BYTE8(v72[16]) = v35;
  uint64_t v36 = (char *)v5 + *(int *)(v3 + 28);
  uint64_t v37 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v38 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v5 = _Q0;
  uint64_t v44 = v63;
  sub_10001081C((uint64_t)v5, (uint64_t)v63);
  *(_WORD *)&v44[*(int *)(v64 + 44)] = 256;
  uint64_t v45 = sub_100006560(&qword_100198560);
  uint64_t v46 = v65;
  sub_1000066D4((uint64_t)v44, (uint64_t)v65 + *(int *)(v45 + 36), &qword_100198618);
  memcpy(v46, v72, 0x109uLL);
  sub_100010880((uint64_t)v72);
  sub_1000067DC((uint64_t)v44, &qword_100198618);
  sub_100010934((uint64_t)v5);
  return sub_100010990((uint64_t)v72);
}

uint64_t sub_100017030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  _s15ShazamEventsApp17SelectAssetButtonVMa_0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  swift_retain();
  sub_100010924(v3, v5, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v3, v5, v9);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001719C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - v3, a1, v2);
  type metadata accessor for State();
  return State.wrappedValue.setter();
}

uint64_t sub_100017288@<X0>(void *a1@<X8>)
{
  return sub_100014168(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100017298()
{
  return sub_100018490((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100014904);
}

uint64_t sub_1000172C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100014A10(a1);
}

double sub_1000172D0@<D0>(uint64_t a1@<X8>)
{
  return sub_100014A9C(a1);
}

uint64_t sub_1000172DC@<X0>(void *a1@<X8>)
{
  return sub_1000144AC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000172EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for WatchFacesView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  type metadata accessor for WatchFacesViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v3 + *(int *)(v2 + 36);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

int *sub_1000174A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for WatchFacesView();

  return sub_100014808(v3, v4, a1);
}

uint64_t sub_100017540()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000175E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100017708(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t sub_100017784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100017824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_retain();
  swift_release();
  v10[1] = *(void *)(v9 + 8);
  return a1;
}

uint64_t sub_1000178D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100017964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_release();
  v9[1] = v10[1];
  return a1;
}

uint64_t sub_100017A08(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100017B5CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_100017B70(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100017D60);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_100017D88()
{
  return swift_getWitnessTable();
}

uint64_t sub_100018324()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100018368()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(_s15ShazamEventsApp17SelectAssetButtonVMa_0() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100018464()
{
  return sub_100018490((uint64_t (*)(void, uint64_t, uint64_t))_s15ShazamEventsApp17SelectAssetButtonVMa_0, sub_10001665C);
}

uint64_t sub_100018490(uint64_t (*a1)(void, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(a1(0, v3, v4) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a2(v6, v3, v4);
}

uint64_t sub_100018530@<X0>(void *a1@<X8>)
{
  return sub_100016C8C(a1);
}

uint64_t sub_10001853C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000185CC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(_s15ShazamEventsApp17SelectAssetButtonVMa_0() - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000186D0(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(_s15ShazamEventsApp17SelectAssetButtonVMa_0() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100010CB0;
  return sub_100016850(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_1000187D8()
{
  return sub_10001853C(&qword_100198530, &qword_100198528, (void (*)(void))sub_10000FF44);
}

uint64_t sub_100018814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1);
  swift_getWitnessTable();
  v23[1] = type metadata accessor for _ViewModifier_Content();
  sub_10000650C(&qword_100198870);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = v6;
  type metadata accessor for _PreferenceWritingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  unint64_t v34 = sub_100019638();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  v23[3] = v7;
  v23[2] = swift_getWitnessTable();
  type metadata accessor for GeometryReader();
  v23[4] = swift_getWitnessTable();
  v23[5] = type metadata accessor for _BackgroundModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v14 = (void *)((char *)v23 - v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v26, a2);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = v24;
  *(void *)(v16 + 16) = v25;
  *(void *)(v16 + 24) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v16 + v15, (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  uint64_t v32 = GeometryReader.init(content:)();
  uint64_t v33 = v18;
  static Alignment.center.getter();
  uint64_t v19 = swift_getWitnessTable();
  View.background<A>(_:alignment:)();
  swift_release();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v30 = v19;
  uint64_t v31 = v20;
  swift_getWitnessTable();
  sub_1000508C8(v14, v12, v8);
  char v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  sub_1000508C8(v29, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v21)(v14, v8);
}

uint64_t sub_100018BF8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  v19[2] = a1;
  char v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v5 = (char *)v19 - v4;
  v19[1] = sub_10000650C(&qword_100198870);
  v19[3] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (void *)((char *)v19 - v10);
  uint64_t v12 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = v12;
  v19[0] = *a2;
  uint64_t v13 = *(void (**)(uint64_t))((char *)a2 + *(int *)(type metadata accessor for SizeModifier() + 40));
  uint64_t v14 = GeometryProxy.frame(in:)();
  v13(v14);
  unint64_t v15 = sub_100019638();
  View.preference<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, AssociatedTypeWitness);
  swift_release();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v24 = v15;
  uint64_t v25 = WitnessTable;
  swift_getWitnessTable();
  sub_1000508C8(v11, v9, v6);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v21 + 8);
  v17(v9, v6);
  sub_1000508C8(v23, v11, v6);
  return ((uint64_t (*)(void *, uint64_t))v17)(v11, v6);
}

uint64_t sub_100018EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = type metadata accessor for SizeModifier();
  uint64_t v10 = (char *)a5 + *(int *)(v9 + 36);
  uint64_t v11 = type metadata accessor for CoordinateSpace();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  uint64_t v13 = (void *)((char *)a5 + *(int *)(v9 + 40));
  *uint64_t v13 = a3;
  v13[1] = a4;
  return result;
}

uint64_t type metadata accessor for SizeModifier()
{
  return sub_1000068A4();
}

uint64_t sub_100018FA4()
{
  uint64_t result = type metadata accessor for CoordinateSpace();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10001904C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CoordinateSpace();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 40);
    uint64_t v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100019134(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for CoordinateSpace();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_release();
}

void *sub_1000191BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  return a1;
}

void *sub_100019260(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100019310(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

void *sub_1000193A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  swift_release();
  return a1;
}

uint64_t sub_10001944C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100019460);
}

uint64_t sub_100019460(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CoordinateSpace();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100019510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019524);
}

void *sub_100019524(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CoordinateSpace();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000195CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100019618()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

unint64_t sub_100019638()
{
  unint64_t result = qword_100198878;
  if (!qword_100198878)
  {
    sub_10000650C(&qword_100198870);
    sub_1000196B4();
    sub_100019708();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198878);
  }
  return result;
}

unint64_t sub_1000196B4()
{
  unint64_t result = qword_100198880;
  if (!qword_100198880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198880);
  }
  return result;
}

unint64_t sub_100019708()
{
  unint64_t result = qword_100198888;
  if (!qword_100198888)
  {
    sub_10000650C(&qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198888);
  }
  return result;
}

uint64_t sub_100019764()
{
  uint64_t v1 = type metadata accessor for SizeModifier();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 32) & ~v2) + *(int *)(v1 + 36);
  uint64_t v4 = type metadata accessor for CoordinateSpace();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100019864@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SizeModifier() - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_100018BF8(a1, v6, a2);
}

uint64_t sub_100019908()
{
  return swift_getWitnessTable();
}

uint64_t sub_100019AA8()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v1 + 56))((char *)&v18 - v9, 1, 1, v0, v8);
  id v11 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setDateFormat:v12];

  sub_100019D20((uint64_t)v10, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
  {
    sub_100019D88((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v11 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  sub_100019D88((uint64_t)v10);
  Class v14 = Date._bridgeToObjectiveC()().super.isa;
  id v15 = [v11 stringFromDate:v14];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v16;
}

uint64_t sub_100019D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019D88(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198898);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

void *sub_100019DF8()
{
  return &protocol witness table for Never;
}

id sub_100019E04()
{
  id v1 = [self effectWithStyle:*v0];
  id v2 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v1];

  return v2;
}

void sub_100019E74(void *a1)
{
  id v3 = [self effectWithStyle:*v1];
  [a1 setEffect:v3];
}

uint64_t sub_100019F00()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_100019F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10001A08C();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100019FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10001A08C();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10001A00C()
{
}

unint64_t sub_10001A038()
{
  unint64_t result = qword_1001988A0;
  if (!qword_1001988A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001988A0);
  }
  return result;
}

unint64_t sub_10001A08C()
{
  unint64_t result = qword_1001988A8;
  if (!qword_1001988A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001988A8);
  }
  return result;
}

uint64_t sub_10001A0EC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10001A154(&qword_1001988B0);
  uint64_t result = sub_10001A154(qword_1001988B8);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001A154(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.Video();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A19C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10001A27C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10001A770(a1);
  return v2;
}

double sub_10001A2BC()
{
  swift_getKeyPath();
  sub_10001A364();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 104));
}

uint64_t sub_10001A344()
{
  return sub_10001A634();
}

uint64_t sub_10001A364()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10001A408()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_10001A4E4()
{
  swift_getKeyPath();
  sub_10001A364();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 112));
}

uint64_t sub_10001A56C()
{
  return sub_10001A634();
}

double sub_10001A58C()
{
  swift_getKeyPath();
  sub_10001A364();
  swift_release();
  return *(double *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_10001A614()
{
  return sub_10001A634();
}

uint64_t sub_10001A634()
{
  return swift_release();
}

double sub_10001A6D4()
{
  return sub_10001A4E4() * 0.92;
}

double sub_10001A6F8()
{
  return sub_10001A58C() * 0.96;
}

double sub_10001A71C()
{
  return sub_10001A4E4() * 0.92 * 0.14;
}

double sub_10001A74C()
{
  return sub_10001A58C() * -0.022;
}

uint64_t *sub_10001A770(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 104)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 120)) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 96), a1);
  return v1;
}

uint64_t sub_10001A85C()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10001A924()
{
  sub_10001A85C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SavedWallpaperViewModel()
{
  return sub_1000068A4();
}

void sub_10001A994(double *a1@<X8>)
{
  *a1 = sub_10001A58C();
}

uint64_t sub_10001A9C0()
{
  return sub_10001A634();
}

uint64_t sub_10001AA04()
{
  return 16;
}

__n128 sub_10001AA10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10001AA1C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 120)) = result;
  return result;
}

void sub_10001AA40(double *a1@<X8>)
{
  *a1 = sub_10001A4E4();
}

uint64_t sub_10001AA6C()
{
  return sub_10001A634();
}

uint64_t sub_10001AAB0()
{
  return 16;
}

__n128 sub_10001AABC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10001AAC8()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 112)) = result;
  return result;
}

void sub_10001AAEC(double *a1@<X8>)
{
  *a1 = sub_10001A2BC();
}

uint64_t sub_10001AB18()
{
  return sub_10001A634();
}

uint64_t sub_10001AB5C()
{
  return 16;
}

__n128 sub_10001AB68(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_10001AB74()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + *(void *)(**(void **)(v0 + 16) + 104)) = result;
  return result;
}

uint64_t *sub_10001AB98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    __n128 v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10001AD64(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_10001AE8C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_retain();
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = sub_100006560(&qword_100198948);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10001B008(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10001B1B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      uint64_t v10 = sub_100006560(&qword_100198948);
      memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_10001B338(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198940);
    uint64_t v9 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001B4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B4FC);
}

uint64_t sub_10001B4FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100006560(&qword_100198950);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10001B5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B5D0);
}

void *sub_10001B5D0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198950);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for EventRootView()
{
  uint64_t result = qword_1001989B0;
  if (!qword_1001989B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001B6C8()
{
  sub_10001B760();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10001B760()
{
  if (!qword_1001989C0)
  {
    sub_10000650C(&qword_100198948);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001989C0);
    }
  }
}

uint64_t sub_10001B7BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10001B7D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_1001989F0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_100198948);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  Class v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v46 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = sub_100006560(&qword_1001989F8);
  uint64_t v57 = *(void *)(v20 - 8);
  uint64_t v58 = v20;
  __chkstk_darwin(v20);
  uint64_t v63 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100006560(&qword_100198A00);
  __chkstk_darwin(v56);
  uint64_t v50 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BEDC(v1, (uint64_t)&v65);
  uint64_t v64 = v65;
  uint64_t v54 = v67;
  uint64_t v55 = v66;
  uint64_t v52 = v69;
  uint64_t v53 = v68;
  uint64_t v51 = v70;
  uint64_t v48 = v71;
  int v47 = v72;
  int v49 = v73;
  type metadata accessor for EventRootView();
  sub_10001CA34((uint64_t)v19);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v17, enum case for UserInterfaceSizeClass.compact(_:), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
  uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1000066D4((uint64_t)v19, (uint64_t)v10, &qword_100198948);
  sub_1000066D4((uint64_t)v17, v23, &qword_100198948);
  unint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v10, 1, v4) == 1)
  {
    sub_1000067DC((uint64_t)v17, &qword_100198948);
    sub_1000067DC((uint64_t)v19, &qword_100198948);
    if (v24(v23, 1, v4) == 1) {
      uint64_t v25 = &qword_100198948;
    }
    else {
      uint64_t v25 = &qword_1001989F0;
    }
  }
  else
  {
    sub_1000066D4((uint64_t)v10, (uint64_t)v14, &qword_100198948);
    if (v24(v23, 1, v4) == 1)
    {
      sub_1000067DC((uint64_t)v17, &qword_100198948);
      sub_1000067DC((uint64_t)v19, &qword_100198948);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
      uint64_t v25 = &qword_1001989F0;
    }
    else
    {
      uint64_t v26 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v46, v23, v4);
      sub_10001D820((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      uint64_t v25 = &qword_100198948;
      sub_1000067DC((uint64_t)v17, &qword_100198948);
      sub_1000067DC((uint64_t)v19, &qword_100198948);
      v27(v14, v4);
    }
  }
  sub_1000067DC((uint64_t)v10, v25);
  uint64_t v29 = v54;
  uint64_t v28 = v55;
  uint64_t v65 = v64;
  uint64_t v66 = v55;
  uint64_t v31 = v52;
  uint64_t v30 = v53;
  uint64_t v67 = v54;
  uint64_t v68 = v53;
  uint64_t v32 = v51;
  uint64_t v69 = v52;
  uint64_t v70 = v51;
  uint64_t v33 = v48;
  uint64_t v71 = v48;
  __int16 v34 = v47;
  unsigned __int16 v72 = v47;
  char v35 = v49;
  unsigned __int8 v73 = v49;
  sub_100006560(&qword_100198A08);
  sub_10001CCC4();
  View.statusBar(hidden:)();
  sub_10001CFFC(v64, v28, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v36 = v59;
  static TaskPriority.userInitiated.getter();
  uint64_t v37 = (uint64_t)v50;
  uint64_t v38 = &v50[*(int *)(v56 + 36)];
  uint64_t v39 = type metadata accessor for _TaskModifier();
  uint64_t v41 = v60;
  uint64_t v40 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(&v38[*(int *)(v39 + 20)], v36, v61);
  *(void *)uint64_t v38 = &unk_100198A78;
  *((void *)v38 + 1) = 0;
  uint64_t v43 = v57;
  uint64_t v42 = v58;
  uint64_t v44 = v63;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v37, v63, v58);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v40);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
  return sub_10001D6D8(v37, v62, &qword_100198A00);
}

double sub_10001BEDC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10001D820((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x10001C744);
  }
  switch(*(unsigned char *)(v3 + 32))
  {
    case 2:
      type metadata accessor for RemoteViewConfiguration();
      sub_10001D820((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      EnvironmentObject.init()();
      sub_10001CF54();
      sub_10001CFA8();
      swift_bridgeObjectRetain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A40);
      sub_100006560(&qword_100198A60);
      sub_10001CDAC();
      sub_10001CE90();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A30);
      sub_10001CD70();
      goto LABEL_7;
    case 3:
      uint64_t v10 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v3 + 24);
      type metadata accessor for PromotionalAssetsController();
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = v11 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
      uint64_t v13 = type metadata accessor for ArtistPromotionalAssets();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
      *(void *)(v11 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
      *(void *)(v11 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
      swift_bridgeObjectRetain();
      ObservationRegistrar.init()();
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = v9;
      *(unsigned char *)(v11 + 32) = 1;
      type metadata accessor for RemoteViewConfiguration();
      sub_10001D820((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.init()();
      sub_10001CF54();
      sub_10001CFA8();
      swift_retain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A40);
      sub_100006560(&qword_100198A60);
      sub_10001CDAC();
      sub_10001CE90();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A30);
      sub_10001CD70();
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_release();
      break;
    case 4:
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v4 = *(void *)(v3 + 24);
      type metadata accessor for PromotionalAssetsController();
      uint64_t v6 = swift_allocObject();
      uint64_t v7 = v6 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
      uint64_t v8 = type metadata accessor for ArtistPromotionalAssets();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
      *(void *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
      *(void *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
      swift_bridgeObjectRetain();
      ObservationRegistrar.init()();
      *(void *)(v6 + 16) = v5;
      *(void *)(v6 + 24) = v4;
      *(unsigned char *)(v6 + 32) = 0;
      type metadata accessor for RemoteViewConfiguration();
      sub_10001D820((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.init()();
      sub_100006560(&qword_100198A30);
      sub_10001CD70();
      sub_10001CFA8();
      _ConditionalContent<>.init(storage:)();
      break;
    default:
      type metadata accessor for RemoteViewConfiguration();
      sub_10001D820((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      swift_bridgeObjectRetain();
      EnvironmentObject.init()();
      sub_10001CDE8();
      sub_10001CE3C();
      swift_bridgeObjectRetain();
      swift_retain();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A40);
      sub_100006560(&qword_100198A60);
      sub_10001CDAC();
      sub_10001CE90();
      _ConditionalContent<>.init(storage:)();
      sub_100006560(&qword_100198A30);
      sub_10001CD70();
      sub_10001CFA8();
LABEL_7:
      _ConditionalContent<>.init(storage:)();
      swift_release();
      swift_bridgeObjectRelease();
      break;
  }
  double result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  *(_OWORD *)(a2 + 32) = v17;
  *(void *)(a2 + 48) = v18;
  *(_WORD *)(a2 + 56) = v19;
  *(unsigned char *)(a2 + 58) = v20;
  return result;
}

uint64_t sub_10001C758()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_10001C7EC, v2, v1);
}

uint64_t sub_10001C7EC()
{
  if (qword_1001980C8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001C8B0;
  return sub_100068800();
}

uint64_t sub_10001C8B0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 24);
  return _swift_task_switch(sub_10001C9D0, v3, v2);
}

uint64_t sub_10001C9D0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001CA34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100198940);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000066D4(v2, (uint64_t)v10, &qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_10001D6D8((uint64_t)v10, a1, &qword_100198948);
  }
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  uint64_t v13 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    long long v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[1] = a1;
    uint64_t v18 = v16;
    *(_DWORD *)long long v15 = 136315138;
    v17[2] = sub_10004D828(0xD000000000000020, 0x80000001001572C0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10001CCC4()
{
  unint64_t result = qword_100198A10;
  if (!qword_100198A10)
  {
    sub_10000650C(&qword_100198A08);
    sub_10001CECC(&qword_100198A18, &qword_100198A20, (void (*)(void))sub_10001CD70, (void (*)(void))sub_10001CFA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A10);
  }
  return result;
}

uint64_t sub_10001CD70()
{
  return sub_10001CECC(&qword_100198A28, &qword_100198A30, (void (*)(void))sub_10001CDAC, (void (*)(void))sub_10001CE90);
}

uint64_t sub_10001CDAC()
{
  return sub_10001CECC(&qword_100198A38, &qword_100198A40, (void (*)(void))sub_10001CDE8, (void (*)(void))sub_10001CE3C);
}

unint64_t sub_10001CDE8()
{
  unint64_t result = qword_100198A48;
  if (!qword_100198A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A48);
  }
  return result;
}

unint64_t sub_10001CE3C()
{
  unint64_t result = qword_100198A50;
  if (!qword_100198A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A50);
  }
  return result;
}

uint64_t sub_10001CE90()
{
  return sub_10001CECC(&qword_100198A58, &qword_100198A60, (void (*)(void))sub_10001CF54, (void (*)(void))sub_10001CFA8);
}

uint64_t sub_10001CECC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001CF54()
{
  unint64_t result = qword_100198A68;
  if (!qword_100198A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A68);
  }
  return result;
}

unint64_t sub_10001CFA8()
{
  unint64_t result = qword_100198A70;
  if (!qword_100198A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A70);
  }
  return result;
}

uint64_t sub_10001CFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9)
{
  if (a9)
  {
    swift_release();
    return swift_release();
  }
  else
  {
    return sub_10001D064(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  }
}

uint64_t sub_10001D064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  if (a9) {
    return sub_10001D0E4(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  }
  else {
    return sub_10001D07C();
  }
}

uint64_t sub_10001D07C()
{
  swift_bridgeObjectRelease();
  sub_10001D0DC();

  return swift_release();
}

uint64_t sub_10001D0DC()
{
  return swift_release();
}

uint64_t sub_10001D0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001D0DC();
  }

  return swift_release();
}

uint64_t sub_10001D160@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D3E0(&qword_1001982C0, (uint64_t (*)(void))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_10001D1A0(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_10004D828(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10001D868(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_10001D3A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D3E0(&qword_100198A98, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_10001D3E0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(a1);
  __chkstk_darwin(v15);
  long long v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000066D4(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = sub_10004D828(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10001D698@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D3E0(qword_100198AA0, (uint64_t (*)(void))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_10001D6D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006560(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001D740()
{
  unint64_t result = qword_100198A88;
  if (!qword_100198A88)
  {
    sub_10000650C(&qword_100198A00);
    sub_10000650C(&qword_100198A08);
    sub_10001CCC4();
    swift_getOpaqueTypeConformance2();
    sub_10001D820(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A88);
  }
  return result;
}

uint64_t sub_10001D820(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001D868(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10001D874()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10001D970()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10001DA7C()
{
  sub_10001D970();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UpcomingEventsViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_10001DAEC(uint64_t a1)
{
  return sub_10001DB0C(a1, &qword_1001AA320);
}

uint64_t sub_10001DAFC(uint64_t a1)
{
  return sub_10001DB0C(a1, &qword_1001AA328);
}

uint64_t sub_10001DB0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100006560(&qword_100198B28);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = static Font.system(size:weight:design:)();
  uint64_t result = sub_10001DBF0((uint64_t)v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10001DBF0(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198B28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10001DC50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    os_log_type_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *os_log_type_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10001DD78(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_10001DE38(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  swift_retain();
  swift_retain();
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10001DF10(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000067DC((uint64_t)a1 + v6, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10001E024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

void *sub_10001E100(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_1000067DC((uint64_t)a1 + v6, &qword_1001982C0);
    uint64_t v9 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001E214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E228);
}

uint64_t sub_10001E228(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198B50);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10001E2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E2F0);
}

void *sub_10001E2F0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198B50);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SetlistSongRowView()
{
  uint64_t result = qword_100198BB0;
  if (!qword_100198BB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001E3E8()
{
  sub_10001E48C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10001E48C()
{
  if (!qword_100198BC0)
  {
    type metadata accessor for OpenURLAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100198BC0);
    }
  }
}

uint64_t sub_10001E4E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10001E500()
{
  static Color.gray.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_100198B30 = v0;
  return result;
}

void sub_10001E548()
{
  qword_100198B38 = 3028656112;
  unk_100198B40 = 0xA400000000000000;
}

uint64_t sub_10001E564()
{
  static Font.body.getter();
  static Font.Weight.regular.getter();
  uint64_t v0 = Font.weight(_:)();
  uint64_t result = swift_release();
  qword_100198B48 = v0;
  return result;
}

uint64_t sub_10001E5A8@<X0>(uint64_t a1@<X8>)
{
  v30[0] = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_100198BF8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_100198C00);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198C08);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v15 = sub_100006560(&qword_100198C10);
  sub_10001E998(v1, (uint64_t)&v8[*(int *)(v15 + 44)]);
  sub_100006560(&qword_100198C18);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10014D4D0;
  static AccessibilityTraits.startsMediaSession.getter();
  v30[1] = v16;
  sub_100023F90(&qword_100198C20, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_100006560(&qword_100198C28);
  sub_100010484(&qword_100198C30, &qword_100198C28);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_100010484(&qword_100198C38, &qword_100198BF8);
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1000067DC((uint64_t)v8, &qword_100198BF8);
  uint64_t v17 = static Alignment.center.getter();
  sub_100050D28(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v17, v18);
  sub_1000067DC((uint64_t)v11, &qword_100198C00);
  LOBYTE(v16) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = v30[0];
  sub_1000066D4((uint64_t)v14, v30[0], &qword_100198C08);
  uint64_t v28 = v27 + *(int *)(sub_100006560(&qword_100198C40) + 36);
  *(unsigned char *)uint64_t v28 = v16;
  *(void *)(v28 + 8) = v20;
  *(void *)(v28 + 16) = v22;
  *(void *)(v28 + 24) = v24;
  *(void *)(v28 + 32) = v26;
  *(unsigned char *)(v28 + 40) = 0;
  return sub_1000067DC((uint64_t)v14, &qword_100198C08);
}

uint64_t sub_10001E998@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v2 = sub_100006560(&qword_100198C48);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_100198C50);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v51 - v9;
  uint64_t v10 = type metadata accessor for Divider();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_100198C58);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100006560(&qword_100198C60);
  uint64_t v19 = v18 - 8;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v51 = (uint64_t)&v51 - v23;
  Divider.init()();
  char v24 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v13, v10);
  uint64_t v33 = &v17[*(int *)(v15 + 44)];
  char *v33 = v24;
  *((void *)v33 + 1) = v26;
  *((void *)v33 + 2) = v28;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v32;
  v33[40] = 0;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  LOBYTE(v13) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_1000066D4((uint64_t)v17, (uint64_t)v22, &qword_100198C58);
  uint64_t v42 = &v22[*(int *)(v19 + 44)];
  *uint64_t v42 = (char)v13;
  *((void *)v42 + 1) = v35;
  *((void *)v42 + 2) = v37;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  v42[40] = 0;
  sub_1000067DC((uint64_t)v17, &qword_100198C58);
  uint64_t v43 = v51;
  sub_10001D6D8((uint64_t)v22, v51, &qword_100198C60);
  *(void *)uint64_t v4 = static VerticalAlignment.center.getter();
  *((void *)v4 + 1) = 0x4030000000000000;
  v4[16] = 0;
  uint64_t v44 = sub_100006560(&qword_100198C68);
  sub_10001EDFC(v53, (uint64_t)&v4[*(int *)(v44 + 44)]);
  uint64_t v45 = static Alignment.center.getter();
  sub_100050D84(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v45, v46);
  sub_1000067DC((uint64_t)v4, &qword_100198C48);
  uint64_t v47 = v52;
  sub_10001D6D8((uint64_t)v8, v52, &qword_100198C50);
  sub_1000066D4(v43, (uint64_t)v22, &qword_100198C60);
  sub_1000066D4(v47, (uint64_t)v8, &qword_100198C50);
  uint64_t v48 = v54;
  sub_1000066D4((uint64_t)v22, v54, &qword_100198C60);
  uint64_t v49 = sub_100006560(&qword_100198C70);
  sub_1000066D4((uint64_t)v8, v48 + *(int *)(v49 + 48), &qword_100198C50);
  sub_1000067DC(v47, &qword_100198C50);
  sub_1000067DC(v43, &qword_100198C60);
  sub_1000067DC((uint64_t)v8, &qword_100198C50);
  return sub_1000067DC((uint64_t)v22, &qword_100198C60);
}

uint64_t sub_10001EDFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v178 = a2;
  uint64_t v159 = type metadata accessor for PlainButtonStyle();
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v157 = (char *)&v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for AccessibilityTraits();
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  v151 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SetlistSongRowView();
  uint64_t v141 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v142 = v6;
  uint64_t v143 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100006560(&qword_100198C78);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100198C80);
  __chkstk_darwin(v8 - 8);
  v148 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100006560(&qword_100198C88);
  __chkstk_darwin(v145);
  uint64_t v150 = (uint64_t)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_100006560(&qword_100198C90);
  __chkstk_darwin(v155);
  uint64_t v156 = (uint64_t)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_100006560(&qword_100198C98);
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v154 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for URL();
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v13 = __chkstk_darwin(v162);
  uint64_t v140 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = v14;
  __chkstk_darwin(v13);
  v149 = (char *)&v139 - v15;
  uint64_t v16 = sub_100006560(&qword_100198CA0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v177 = (uint64_t)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v180 = (char *)&v139 - v19;
  uint64_t v20 = sub_100006560(&qword_100198CA8);
  __chkstk_darwin(v20 - 8);
  uint64_t v170 = (uint64_t *)((char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = sub_100006560(&qword_100198CB0);
  __chkstk_darwin(v22 - 8);
  uint64_t v171 = (uint64_t)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = sub_100006560(&qword_100198CB8);
  uint64_t v24 = __chkstk_darwin(v169);
  uint64_t v174 = (uint64_t)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v168 = (uint64_t)&v139 - v27;
  __chkstk_darwin(v26);
  uint64_t v179 = (uint64_t)&v139 - v28;
  uint64_t v166 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v166);
  uint64_t v167 = (char *)&v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100006560(&qword_100198630);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v160 = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v139 - v33;
  uint64_t v163 = sub_100006560(&qword_100198CC0);
  uint64_t v35 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v37 = (char *)&v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100006560(&qword_100198CC8);
  uint64_t v39 = v38 - 8;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v139 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = sub_100006560(&qword_100198CD0);
  __chkstk_darwin(v164);
  uint64_t v43 = (char *)&v139 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_100006560(&qword_100198CD8);
  uint64_t v44 = __chkstk_darwin(v165);
  uint64_t v172 = (char *)&v139 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v139 - v47;
  __chkstk_darwin(v46);
  uint64_t v181 = (uint64_t)&v139 - v49;
  uint64_t v173 = a1;
  uint64_t v50 = *a1;
  sub_10003FD4C((uint64_t)v34);
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Transaction.init(animation:)();
  sub_100006560(&qword_100198CE0);
  sub_100021258();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v51 = v163;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v41, v37, v163);
  uint64_t v52 = &v41[*(int *)(v39 + 44)];
  long long v53 = v183;
  *(_OWORD *)uint64_t v52 = v182;
  *((_OWORD *)v52 + 1) = v53;
  *((_OWORD *)v52 + 2) = v184;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v51);
  uint64_t v54 = static Alignment.center.getter();
  uint64_t v56 = v55;
  uint64_t KeyPath = 0;
  uint64_t v58 = 0;
  if (sub_10003FF94())
  {
    uint64_t KeyPath = swift_getKeyPath();
    swift_retain();
    uint64_t v58 = v50;
  }
  sub_1000066D4((uint64_t)v41, (uint64_t)v43, &qword_100198CC8);
  uint64_t v59 = (uint64_t *)&v43[*(int *)(v164 + 36)];
  *uint64_t v59 = KeyPath;
  v59[1] = 0;
  v59[2] = v58;
  v59[3] = v54;
  v59[4] = v56;
  sub_1000067DC((uint64_t)v41, &qword_100198CC8);
  uint64_t v60 = v167;
  uint64_t v61 = &v167[*(int *)(v166 + 20)];
  uint64_t v62 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v63 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v61, v62, v63);
  __asm { FMOV            V0.2D, #5.0 }
  *uint64_t v60 = _Q0;
  uint64_t v69 = (uint64_t)&v48[*(int *)(v165 + 36)];
  sub_10002315C((uint64_t)v60, v69, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v69 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v43, (uint64_t)v48, &qword_100198CD0);
  sub_10002402C((uint64_t)v60, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC((uint64_t)v43, &qword_100198CD0);
  sub_10001D6D8((uint64_t)v48, v181, &qword_100198CD8);
  uint64_t v70 = static HorizontalAlignment.leading.getter();
  uint64_t v71 = (uint64_t)v170;
  *uint64_t v170 = v70;
  *(void *)(v71 + 8) = 0x4008000000000000;
  *(unsigned char *)(v71 + 16) = 0;
  uint64_t v72 = sub_100006560(&qword_100198D38);
  unsigned __int8 v73 = v173;
  sub_1000205F8((uint64_t)v173, (char *)(v71 + *(int *)(v72 + 44)));
  uint64_t v74 = static Alignment.leading.getter();
  uint64_t v75 = v171;
  sub_100050FB0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v171, 0.0, 1, 0.0, 1, v74, v76);
  sub_1000067DC(v71, &qword_100198CA8);
  char v77 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v79 = v78;
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v86 = v168;
  sub_1000066D4(v75, v168, &qword_100198CB0);
  uint64_t v87 = v86 + *(int *)(v169 + 36);
  *(unsigned char *)uint64_t v87 = v77;
  *(void *)(v87 + 8) = v79;
  *(void *)(v87 + 16) = v81;
  *(void *)(v87 + 24) = v83;
  *(void *)(v87 + 32) = v85;
  *(unsigned char *)(v87 + 40) = 0;
  sub_1000067DC(v75, &qword_100198CB0);
  uint64_t v88 = v179;
  sub_10001D6D8(v86, v179, &qword_100198CB8);
  if (v73[1])
  {
    uint64_t v89 = (void *)*v73;
    swift_retain();
    char v90 = sub_100040ACC();
    swift_release();
    uint64_t v91 = (uint64_t)v180;
    if (v90)
    {
      uint64_t v92 = v89 + 5;
      uint64_t v93 = v89[8];
      uint64_t v94 = v89[9];
      sub_100023118(v92, v93);
      uint64_t v95 = v93;
      uint64_t v96 = (uint64_t)v160;
      (*(void (**)(uint64_t, uint64_t))(v94 + 80))(v95, v94);
      uint64_t v97 = v161;
      uint64_t v98 = v162;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v96, 1, v162) != 1)
      {
        uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 32);
        uint64_t v103 = v149;
        v102(v149, v96, v98);
        uint64_t v104 = (uint64_t)v73;
        uint64_t v105 = v143;
        sub_10002315C(v104, v143, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
        uint64_t v106 = v140;
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v140, v103, v98);
        unint64_t v107 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
        unint64_t v108 = (v142 + *(unsigned __int8 *)(v97 + 80) + v107) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
        uint64_t v109 = swift_allocObject();
        sub_100023378(v105, v109 + v107);
        uint64_t v110 = v106;
        uint64_t v111 = v98;
        v102((char *)(v109 + v108), (uint64_t)v110, v98);
        sub_100006560(&qword_100198D48);
        sub_1000234A8();
        uint64_t v112 = v144;
        Button.init(action:label:)();
        sub_100006560(&qword_100198C18);
        uint64_t v113 = v152;
        uint64_t v114 = swift_allocObject();
        *(_OWORD *)(v114 + 16) = xmmword_10014D4D0;
        static AccessibilityTraits.startsMediaSession.getter();
        *(void *)&long long v185 = v114;
        sub_100023F90(&qword_100198C20, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
        sub_100006560(&qword_100198C28);
        sub_100010484(&qword_100198C30, &qword_100198C28);
        uint64_t v115 = v151;
        uint64_t v116 = v153;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        sub_100010484(&qword_100198D78, &qword_100198C78);
        uint64_t v117 = (uint64_t)v148;
        uint64_t v118 = v147;
        View.accessibilityRemoveTraits(_:)();
        (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v116);
        (*(void (**)(char *, uint64_t))(v146 + 8))(v112, v118);
        static Alignment.center.getter();
        _FrameLayout.init(width:height:alignment:)();
        uint64_t v119 = v150;
        sub_1000066D4(v117, v150, &qword_100198C80);
        uint64_t v120 = (_OWORD *)(v119 + *(int *)(v145 + 36));
        long long v121 = v186;
        *uint64_t v120 = v185;
        v120[1] = v121;
        v120[2] = v187;
        sub_1000067DC(v117, &qword_100198C80);
        uint64_t v122 = static Alignment.center.getter();
        uint64_t v123 = v156;
        sub_10005100C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v156, 0.0, 1, INFINITY, 0, v122, v124);
        sub_1000067DC(v119, &qword_100198C88);
        uint64_t v125 = v157;
        PlainButtonStyle.init()();
        sub_100023DE8(&qword_100198D80, &qword_100198C90, (void (*)(void))sub_1000235F4);
        sub_100023F90(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
        uint64_t v126 = v154;
        uint64_t v127 = v159;
        View.buttonStyle<A>(_:)();
        (*(void (**)(char *, uint64_t))(v158 + 8))(v125, v127);
        uint64_t v128 = v123;
        uint64_t v91 = (uint64_t)v180;
        sub_1000067DC(v128, &qword_100198C90);
        uint64_t v129 = v103;
        uint64_t v88 = v179;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v129, v111);
        uint64_t v101 = v175;
        uint64_t v100 = v176;
        (*(void (**)(uint64_t, char *, uint64_t))(v175 + 32))(v91, v126, v176);
        uint64_t v99 = 0;
        goto LABEL_9;
      }
      sub_1000067DC(v96, &qword_100198630);
    }
    uint64_t v99 = 1;
    uint64_t v100 = v176;
    uint64_t v101 = v175;
LABEL_9:
    uint64_t v130 = (uint64_t)v172;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v91, v99, 1, v100);
    uint64_t v131 = v181;
    sub_1000066D4(v181, v130, &qword_100198CD8);
    uint64_t v132 = v174;
    sub_1000066D4(v88, v174, &qword_100198CB8);
    uint64_t v133 = v177;
    sub_1000066D4(v91, v177, &qword_100198CA0);
    uint64_t v134 = v88;
    uint64_t v135 = v91;
    uint64_t v136 = v178;
    sub_1000066D4(v130, v178, &qword_100198CD8);
    uint64_t v137 = sub_100006560(&qword_100198D40);
    sub_1000066D4(v132, v136 + *(int *)(v137 + 48), &qword_100198CB8);
    sub_1000066D4(v133, v136 + *(int *)(v137 + 64), &qword_100198CA0);
    sub_1000067DC(v135, &qword_100198CA0);
    sub_1000067DC(v134, &qword_100198CB8);
    sub_1000067DC(v131, &qword_100198CD8);
    sub_1000067DC(v133, &qword_100198CA0);
    sub_1000067DC(v132, &qword_100198CB8);
    return sub_1000067DC(v130, &qword_100198CD8);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_100023F90((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_1000201A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncImagePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v12 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v27 = v12;
    uint64_t v28 = 1;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    char v32 = 0;
    swift_retain_n();
    sub_100006560(&qword_100198CF8);
    sub_100006560(&qword_100198D10);
    sub_1000212D4();
    sub_1000213A4();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    uint64_t result = swift_release();
    long long v14 = v33;
    long long v15 = v34;
    long long v16 = v35;
    long long v17 = v36;
    char v18 = v37;
  }
  else
  {
    if (qword_1001980A8 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1001AA350;
    swift_retain();
    uint64_t v20 = static Alignment.center.getter();
    uint64_t v22 = v21;
    sub_100020578((uint64_t)&v33);
    uint64_t v27 = v19;
    uint64_t v28 = 256;
    long long v29 = v33;
    *(void *)&long long v30 = v34;
    *((void *)&v30 + 1) = DWORD2(v34);
    *(void *)&long long v31 = v20;
    *((void *)&v31 + 1) = v22;
    char v32 = 1;
    sub_100006560(&qword_100198CF8);
    sub_100006560(&qword_100198D10);
    sub_1000212D4();
    sub_1000213A4();
    _ConditionalContent<>.init(storage:)();
    long long v26 = v33;
    long long v25 = v34;
    long long v24 = v35;
    long long v23 = v36;
    char v18 = v37;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    long long v17 = v23;
    long long v16 = v24;
    long long v15 = v25;
    long long v14 = v26;
  }
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 64) = v18;
  return result;
}

uint64_t sub_100020578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(_internalSystemName:)();
  static Font.title3.getter();
  static Font.Weight.regular.getter();
  uint64_t v3 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = static HierarchicalShapeStyle.quaternary.getter();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000205F8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v3 = type metadata accessor for Text.Suffix();
  uint64_t v79 = *(void *)(v3 - 8);
  uint64_t v80 = v3;
  __chkstk_darwin(v3);
  char v77 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100006560(&qword_100198DA0);
  uint64_t v5 = *(void *)(v86 - 8);
  uint64_t v6 = __chkstk_darwin(v86);
  uint64_t v83 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v77 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = *(void *)(*(void *)a1 + 64);
  uint64_t v13 = *(void *)(*(void *)a1 + 72);
  sub_100023118((void *)(*(void *)a1 + 40), v12);
  *(void *)&long long v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
  *((void *)&v92 + 1) = v14;
  unint64_t v84 = sub_10002374C();
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  uint64_t v22 = static Alignment.leading.getter();
  sub_100051068(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v92, 0.0, 1, 0.0, 1, v22, v23, v15, v17, v21, v19);
  sub_1000065A4(v15, v17, v21);
  swift_bridgeObjectRelease();
  long long v110 = v98;
  long long v111 = v99;
  long long v112 = v100;
  long long v106 = v94;
  long long v107 = v95;
  long long v108 = v96;
  long long v109 = v97;
  long long v104 = v92;
  long long v105 = v93;
  if (qword_100198070 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100198B48;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  char v113 = 0;
  long long v98 = v110;
  long long v99 = v111;
  long long v100 = v112;
  long long v94 = v106;
  long long v95 = v107;
  long long v96 = v108;
  long long v97 = v109;
  long long v92 = v104;
  long long v93 = v105;
  *(void *)&long long v101 = KeyPath;
  *((void *)&v101 + 1) = v24;
  *(void *)&long long v102 = v26;
  *((void *)&v102 + 1) = 1;
  char v103 = 0;
  uint64_t v81 = a1;
  uint64_t v27 = *(void *)(*(void *)a1 + 64);
  uint64_t v28 = *(void *)(*(void *)a1 + 72);
  sub_100023118((void *)(*(void *)a1 + 40), v27);
  long long v29 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 112);
  swift_retain();
  char v30 = v29(v27, v28);
  uint64_t v85 = v5;
  uint64_t v87 = v11;
  if (v30)
  {
    if (qword_100198068 != -1) {
      swift_once();
    }
    v90[0] = xmmword_100198B38;
    swift_bridgeObjectRetain();
    uint64_t v31 = Text.init<A>(_:)();
    uint64_t v33 = v32;
    char v35 = v34;
    if (qword_100198060 != -1) {
      swift_once();
    }
    uint64_t v36 = Text.foregroundColor(_:)();
    uint64_t v38 = v37;
    char v40 = v39 & 1;
    sub_1000065A4(v31, v33, v35 & 1);
    swift_bridgeObjectRelease();
    uint64_t v41 = Text.font(_:)();
    uint64_t v43 = v42;
    char v45 = v44 & 1;
    sub_1000065A4(v36, v38, v40);
    swift_bridgeObjectRelease();
    uint64_t v46 = v77;
    static Text.Suffix.alwaysVisible(_:)();
    sub_1000065A4(v41, v43, v45);
    swift_bridgeObjectRelease();
    uint64_t v5 = v85;
    uint64_t v47 = v86;
    uint64_t v11 = v87;
  }
  else
  {
    uint64_t v46 = v77;
    static Text.Suffix.none.getter();
    uint64_t v47 = v86;
  }
  sub_100006560(&qword_100198DB0);
  sub_1000237B0();
  uint64_t v48 = v78;
  View.textSuffix(_:)();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v46, v80);
  v90[9] = v101;
  v90[10] = v102;
  v90[5] = v97;
  v90[6] = v98;
  char v91 = v103;
  v90[7] = v99;
  v90[8] = v100;
  v90[0] = v92;
  v90[1] = v93;
  v90[2] = v94;
  v90[3] = v95;
  v90[4] = v96;
  sub_100023964((uint64_t)v90);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v48, v47);
  uint64_t v49 = *(void *)(*(void *)v81 + 64);
  uint64_t v50 = *(void *)(*(void *)v81 + 72);
  sub_100023118((void *)(*(void *)v81 + 40), v49);
  uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 56))(v49, v50);
  uint64_t v89 = v51;
  uint64_t v52 = Text.init<A>(_:)();
  uint64_t v54 = v53;
  char v56 = v55 & 1;
  static Font.footnote.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v57 = Text.font(_:)();
  uint64_t v59 = v58;
  char v61 = v60;
  swift_release();
  sub_1000065A4(v52, v54, v56);
  swift_bridgeObjectRelease();
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  uint64_t v88 = qword_1001AA348;
  swift_retain();
  uint64_t v81 = Text.foregroundStyle<A>(_:)();
  uint64_t v63 = v62;
  unint64_t v84 = v64;
  char v66 = v65 & 1;
  sub_1000065A4(v57, v59, v61 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v67 = swift_getKeyPath();
  uint64_t v68 = v85;
  uint64_t v69 = v86;
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  uint64_t v71 = v83;
  v70(v83, v87, v86);
  uint64_t v72 = v82;
  v70(v82, v71, v69);
  unsigned __int8 v73 = &v72[*(int *)(sub_100006560(&qword_100198DF0) + 48)];
  uint64_t v74 = v81;
  *(void *)unsigned __int8 v73 = v81;
  *((void *)v73 + 1) = v63;
  v73[16] = v66;
  *((void *)v73 + 3) = v84;
  *((void *)v73 + 4) = v67;
  *((void *)v73 + 5) = 1;
  v73[48] = 0;
  sub_100010924(v74, v63, v66);
  uint64_t v75 = *(void (**)(char *, uint64_t))(v68 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v75(v87, v69);
  sub_1000065A4(v74, v63, v66);
  swift_release();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v75)(v71, v69);
}

uint64_t sub_100020DE0(void *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistSongRowView();
  sub_10001D160((uint64_t)v5);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(*a1 + 24);
  if (v6)
  {
    uint64_t v8 = *(void *)(*a1 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000AC4E4(v8, v7, 8, 11, 14, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100023F90((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    swift_bridgeObjectRetain();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100020F88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SymbolVariants();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = sub_100006560(&qword_100198D98);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_100198D60);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = Image.init(_internalSystemName:)();
  static SymbolVariants.square.getter();
  SymbolVariants.fill.getter();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v8, v2);
  View.symbolVariant(_:)();
  v16(v6, v2);
  swift_release();
  static Alignment.center.getter();
  __n128 v17 = sub_10005125C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v17);
  sub_1000066D4((uint64_t)v15, a1, &qword_100198D60);
  *(unsigned char *)(a1 + *(int *)(sub_100006560(&qword_100198D48) + 36)) = 0;
  return sub_1000067DC((uint64_t)v15, &qword_100198D60);
}

unint64_t sub_100021258()
{
  unint64_t result = qword_100198CE8;
  if (!qword_100198CE8)
  {
    sub_10000650C(&qword_100198CE0);
    sub_1000212D4();
    sub_1000213A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198CE8);
  }
  return result;
}

unint64_t sub_1000212D4()
{
  unint64_t result = qword_100198CF0;
  if (!qword_100198CF0)
  {
    sub_10000650C(&qword_100198CF8);
    sub_100021350();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198CF0);
  }
  return result;
}

unint64_t sub_100021350()
{
  unint64_t result = qword_100198D00;
  if (!qword_100198D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198D00);
  }
  return result;
}

unint64_t sub_1000213A4()
{
  unint64_t result = qword_100198D08;
  if (!qword_100198D08)
  {
    sub_10000650C(&qword_100198D10);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    sub_100010484(&qword_100198D28, &qword_100198D30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198D08);
  }
  return result;
}

uint64_t sub_100021468@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100006560(&qword_100198E10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)&v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100006560(&qword_100198E18);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t *v10 = static Alignment.center.getter();
  v10[1] = v14;
  uint64_t v15 = sub_100006560(&qword_100198E20);
  sub_100021634(a1, a2 & 1, a3, (uint64_t)v10 + *(int *)(v15 + 44));
  uint64_t v16 = static Alignment.center.getter();
  sub_100051448(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, INFINITY, 0, v16, v17);
  sub_1000067DC((uint64_t)v10, &qword_100198E10);
  uint64_t v18 = static Alignment.center.getter();
  uint64_t v20 = v19;
  static Color.black.getter();
  uint64_t v21 = Color.opacity(_:)();
  swift_release();
  sub_1000066D4((uint64_t)v13, a4, &qword_100198E18);
  uint64_t v22 = (uint64_t *)(a4 + *(int *)(sub_100006560(&qword_100198E28) + 36));
  *uint64_t v22 = v21;
  v22[1] = v18;
  v22[2] = v20;
  return sub_1000067DC((uint64_t)v13, &qword_100198E18);
}

uint64_t sub_100021634@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a1;
  uint64_t v69 = a4;
  int v67 = a2 & 1;
  uint64_t v5 = sub_100006560(&qword_100198E30);
  __chkstk_darwin(v5 - 8);
  unint64_t v64 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = sub_100006560(&qword_100198E38);
  __chkstk_darwin(v70);
  uint64_t v71 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100198E40);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v66 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v68 = (uint64_t)&v56 - v11;
  uint64_t v12 = type metadata accessor for AnimationTimelineSchedule();
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = sub_100006560(&qword_100198E48);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v56 - v23;
  uint64_t v25 = sub_100006560(&qword_100198E50);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  char v65 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  long long v29 = (char *)&v56 - v28;
  uint64_t v30 = a3;
  if (sub_100040254())
  {
    uint64_t v60 = v19;
    uint64_t v61 = v18;
    uint64_t v62 = v29;
    BOOL v31 = sub_10004047C();
    uint64_t v32 = v63;
    uint64_t v58 = v22;
    uint64_t v59 = v24;
    if (v31)
    {
      int v33 = v67;
    }
    else
    {
      uint64_t v34 = v72;
      int v33 = v67;
      sub_1000239D8(v72, v67);
      sub_10001D1A0(v34, v33);
      sub_10001D868(v34, v33);
    }
    uint64_t v57 = v17;
    AnimationTimelineSchedule.init(minimumInterval:paused:)();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v72;
    *(void *)(v35 + 16) = v72;
    *(unsigned char *)(v35 + 24) = v33 != 0;
    *(void *)(v35 + 32) = v30;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v15, v17, v12);
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = sub_100023D90;
    *(void *)(v37 + 24) = v35;
    sub_1000239D8(v36, v33);
    swift_retain();
    sub_100006560(&qword_100198E68);
    sub_100023F90(&qword_100198E70, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
    sub_100023DE8(&qword_100198E78, &qword_100198E68, (void (*)(void))sub_100023E64);
    uint64_t v38 = v58;
    TimelineView<>.init(_:content:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v57, v12);
    char v40 = v59;
    uint64_t v39 = v60;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    uint64_t v42 = v61;
    v41(v59, v38, v61);
    long long v29 = v62;
    v41(v62, v40, v42);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v29, 0, 1, v42);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v29, 1, 1, v18);
  }
  uint64_t v43 = v64;
  uint64_t v44 = (uint64_t)v65;
  uint64_t *v43 = static Alignment.center.getter();
  v43[1] = v45;
  uint64_t v46 = sub_100006560(&qword_100198E58);
  sub_10002229C(v30, (uint64_t *)((char *)v43 + *(int *)(v46 + 44)));
  uint64_t v47 = static Color.white.getter();
  uint64_t v48 = v71;
  sub_1000066D4((uint64_t)v43, v71, &qword_100198E30);
  *(void *)(v48 + *(int *)(v70 + 36)) = v47;
  sub_1000067DC((uint64_t)v43, &qword_100198E30);
  uint64_t v49 = static Alignment.center.getter();
  uint64_t v50 = v66;
  sub_1000514A4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v66, 0.0, 1, INFINITY, 0, v49, v51);
  sub_1000067DC(v48, &qword_100198E38);
  uint64_t v52 = v68;
  sub_10001D6D8(v50, v68, &qword_100198E40);
  sub_1000066D4((uint64_t)v29, v44, &qword_100198E50);
  sub_1000066D4(v52, v50, &qword_100198E40);
  uint64_t v53 = v69;
  sub_1000066D4(v44, v69, &qword_100198E50);
  uint64_t v54 = sub_100006560(&qword_100198E60);
  sub_1000066D4(v50, v53 + *(int *)(v54 + 48), &qword_100198E40);
  sub_1000067DC(v52, &qword_100198E40);
  sub_1000067DC((uint64_t)v29, &qword_100198E50);
  sub_1000067DC(v50, &qword_100198E40);
  return sub_1000067DC(v44, &qword_100198E50);
}

uint64_t sub_100021D38@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v33 = type metadata accessor for Font.TextStyle();
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for CircularProgressViewStyle();
  __chkstk_darwin(v29);
  uint64_t v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = sub_100006560(&qword_100198E90);
  uint64_t v34 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100198EB8);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v28 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_100198E88);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(void *)&long long v39 = a1;
  sub_100023F90(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v15 = v14[5];
  uint64_t v16 = v14[6];
  sub_100023118(v14 + 2, v15);
  uint64_t v17 = *(double (**)(uint64_t, uint64_t))(v16 + 8);
  swift_retain();
  double v18 = v17(v15, v16);
  swift_release();
  *(double *)&long long v39 = v18;
  BYTE8(v39) = 0;
  uint64_t v38 = 0x3FF0000000000000;
  sub_100023FD8();
  ProgressView.init<A>(value:total:)();
  *uint64_t v5 = static Color.white.getter();
  *(void *)&long long v39 = 0x4000000000000000;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for Font.TextStyle.body(_:), v33);
  ScaledMetric.init(wrappedValue:relativeTo:)();
  sub_100010484(&qword_100198E98, &qword_100198E90);
  sub_100023F90(&qword_100198EA0, (void (*)(uint64_t))type metadata accessor for CircularProgressViewStyle);
  uint64_t v19 = v28;
  uint64_t v20 = v32;
  View.progressViewStyle<A>(_:)();
  sub_10002402C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CircularProgressViewStyle);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v20);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v22 = v35;
  uint64_t v21 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v13, v19, v36);
  uint64_t v23 = &v13[*(int *)(v11 + 44)];
  long long v24 = v40;
  *(_OWORD *)uint64_t v23 = v39;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v41;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
  uint64_t v25 = v37;
  sub_1000066D4((uint64_t)v13, v37, &qword_100198E88);
  uint64_t v26 = (uint64_t (**)())(v25 + *(int *)(sub_100006560(&qword_100198E68) + 36));
  char *v26 = sub_100022274;
  v26[1] = 0;
  return sub_1000067DC((uint64_t)v13, &qword_100198E88);
}

uint64_t sub_100022274()
{
  return Transaction.disablesAnimations.setter();
}

uint64_t sub_10002229C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v130 = a2;
  uint64_t v118 = type metadata accessor for ControlSize();
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v114 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100006560(&qword_100198E90);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  long long v106 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100006560(&qword_100198ED0) - 8;
  __chkstk_darwin(v109);
  long long v105 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_100006560(&qword_100198ED8) - 8;
  __chkstk_darwin(v108);
  uint64_t v104 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100006560(&qword_100198EE0) - 8;
  __chkstk_darwin(v110);
  long long v107 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100006560(&qword_100198EE8) - 8;
  __chkstk_darwin(v117);
  uint64_t v115 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100006560(&qword_100198EF0) - 8;
  __chkstk_darwin(v124);
  uint64_t v123 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100006560(&qword_100198EF8) - 8;
  uint64_t v10 = __chkstk_darwin(v126);
  uint64_t v132 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v125 = (uint64_t)&v99 - v13;
  __chkstk_darwin(v12);
  uint64_t v131 = (uint64_t)&v99 - v14;
  uint64_t v129 = Image.init(systemName:)();
  uint64_t v128 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v15 = a1 + OBJC_IVAR____TtC15ShazamEventsApp23SetlistSongRowViewModel___observationRegistrar;
  uint64_t v133 = a1;
  uint64_t v16 = a1;
  uint64_t v17 = sub_100023F90(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v18 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v19 = v18[5];
  uint64_t v20 = v18[6];
  sub_100023118(v18 + 2, v19);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
  swift_retain();
  LOBYTE(v120) = v21(v19, v20);
  int v120 = v120;
  swift_release();
  swift_getKeyPath();
  uint64_t v133 = a1;
  uint64_t v102 = v15;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v23 = v22[5];
  uint64_t v24 = v22[6];
  sub_100023118(v22 + 2, v23);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  LOBYTE(v113) = v25(v23, v24);
  int v113 = v113;
  swift_release();
  static UnitPoint.center.getter();
  uint64_t v121 = v27;
  uint64_t v122 = v26;
  double v28 = 1.0;
  uint64_t v119 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  swift_getKeyPath();
  uint64_t v133 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v29 = *(void **)(*(void *)(a1 + 32) + 200);
  uint64_t v30 = v29[5];
  uint64_t v31 = v29[6];
  sub_100023118(v29 + 2, v30);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
  swift_retain();
  LOBYTE(v103) = v32(v30, v31);
  int v103 = v103;
  swift_release();
  uint64_t v33 = v106;
  ProgressView<>.init<>()();
  uint64_t v34 = static Color.white.getter();
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = v111;
  uint64_t v37 = (uint64_t)v105;
  uint64_t v38 = v112;
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v105, v33, v112);
  long long v39 = (uint64_t *)(v37 + *(int *)(v109 + 44));
  *long long v39 = v35;
  v39[1] = v34;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v38);
  uint64_t v40 = v104;
  sub_1000066D4(v37, v104, &qword_100198ED0);
  *(_WORD *)(v40 + *(int *)(v108 + 44)) = 257;
  sub_1000067DC(v37, &qword_100198ED0);
  uint64_t v41 = v116;
  uint64_t v42 = v114;
  uint64_t v43 = v118;
  (*(void (**)(char *, void, uint64_t))(v116 + 104))(v114, enum case for ControlSize.small(_:), v118);
  uint64_t v44 = swift_getKeyPath();
  uint64_t v45 = (uint64_t)v107;
  uint64_t v46 = (uint64_t *)&v107[*(int *)(v110 + 44)];
  uint64_t v47 = sub_100006560(&qword_100198F00);
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v46 + *(int *)(v47 + 28), v42, v43);
  *uint64_t v46 = v44;
  sub_1000066D4(v40, v45, &qword_100198ED8);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  sub_1000067DC(v40, &qword_100198ED8);
  swift_getKeyPath();
  uint64_t v100 = v16;
  uint64_t v133 = v16;
  uint64_t v101 = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = *(void **)(*(void *)(v16 + 32) + 200);
  uint64_t v49 = v48[5];
  uint64_t v50 = v48[6];
  sub_100023118(v48 + 2, v49);
  uint64_t v51 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v50 + 16);
  swift_retain();
  LODWORD(v44) = v51(v49, v50);
  swift_release();
  if (v44 == 1) {
    double v52 = 1.0;
  }
  else {
    double v52 = 0.0;
  }
  uint64_t v53 = v45;
  uint64_t v54 = v45;
  uint64_t v55 = v115;
  sub_1000066D4(v54, v115, &qword_100198EE0);
  *(double *)(v55 + *(int *)(v117 + 44)) = v52;
  sub_1000067DC(v53, &qword_100198EE0);
  swift_getKeyPath();
  uint64_t v56 = v100;
  uint64_t v133 = v100;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v57 = v56;
  uint64_t v58 = *(void **)(*(void *)(v56 + 32) + 200);
  uint64_t v59 = v58[5];
  uint64_t v60 = v58[6];
  sub_100023118(v58 + 2, v59);
  uint64_t v61 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 16);
  swift_retain();
  LODWORD(v53) = v61(v59, v60);
  swift_release();
  if (v53 == 1) {
    double v62 = 1.0;
  }
  else {
    double v62 = 0.0;
  }
  static UnitPoint.center.getter();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v67 = v123;
  sub_1000066D4(v55, v123, &qword_100198EE8);
  uint64_t v68 = v67 + *(int *)(v124 + 44);
  *(double *)uint64_t v68 = v62;
  *(double *)(v68 + 8) = v62;
  *(void *)(v68 + 16) = v64;
  *(void *)(v68 + 24) = v66;
  sub_1000067DC(v55, &qword_100198EE8);
  uint64_t v69 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  swift_getKeyPath();
  uint64_t v133 = v57;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v70 = *(void **)(*(void *)(v57 + 32) + 200);
  uint64_t v71 = v70[5];
  uint64_t v72 = v70[6];
  sub_100023118(v70 + 2, v71);
  unsigned __int8 v73 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v72 + 16);
  swift_retain();
  int v74 = v73(v71, v72);
  swift_release();
  uint64_t v75 = v125;
  sub_1000066D4(v67, v125, &qword_100198EF0);
  uint64_t v76 = v75 + *(int *)(v126 + 44);
  *(void *)uint64_t v76 = v69;
  *(unsigned char *)(v76 + 8) = v74 == 1;
  sub_1000067DC(v67, &qword_100198EF0);
  uint64_t v77 = v131;
  sub_10001D6D8(v75, v131, &qword_100198EF8);
  BOOL v78 = v103 == 2;
  if (v113 == 2) {
    double v79 = 1.0;
  }
  else {
    double v79 = 0.0;
  }
  if (v120 == 2) {
    double v80 = 1.0;
  }
  else {
    double v80 = 0.0;
  }
  uint64_t v126 = Image.init(systemName:)();
  uint64_t v125 = static Font.subheadline.getter();
  uint64_t v81 = swift_getKeyPath();
  if (sub_10004047C()) {
    double v82 = 1.0;
  }
  else {
    double v82 = 0.0;
  }
  if (!sub_10004047C()) {
    double v28 = 0.0;
  }
  static UnitPoint.center.getter();
  uint64_t v84 = v83;
  uint64_t v86 = v85;
  uint64_t v87 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
  BOOL v88 = sub_10004047C();
  uint64_t v89 = v132;
  sub_1000066D4(v77, v132, &qword_100198EF8);
  BOOL v90 = v88;
  char v91 = v130;
  uint64_t v93 = KeyPath;
  uint64_t v92 = v128;
  *uint64_t v130 = v129;
  v91[1] = v93;
  v91[2] = v92;
  *((double *)v91 + 3) = v80;
  *((double *)v91 + 4) = v79;
  uint64_t v94 = v122;
  *((double *)v91 + 5) = v79;
  v91[6] = v94;
  v91[7] = v121;
  v91[8] = v119;
  *((unsigned char *)v91 + 72) = v78;
  long long v95 = v91;
  uint64_t v96 = sub_100006560(&qword_100198F08);
  sub_1000066D4(v89, (uint64_t)v95 + *(int *)(v96 + 48), &qword_100198EF8);
  uint64_t v97 = (uint64_t)v95 + *(int *)(v96 + 64);
  *(void *)uint64_t v97 = v126;
  *(void *)(v97 + 8) = v81;
  *(void *)(v97 + 16) = v125;
  *(double *)(v97 + 24) = v82;
  *(double *)(v97 + 32) = v28;
  *(double *)(v97 + 40) = v28;
  *(void *)(v97 + 48) = v84;
  *(void *)(v97 + 56) = v86;
  *(void *)(v97 + 64) = v87;
  *(unsigned char *)(v97 + 72) = v90;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000067DC(v131, &qword_100198EF8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000067DC(v132, &qword_100198EF8);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100022F00@<X0>(uint64_t a1@<X8>)
{
  return sub_100021468(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t sub_100022F18(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100006560(&qword_100198EA8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100006560(&qword_100198EB0);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = v7 - 8;
  if (*(void *)(v9 + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100023050(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ControlSize();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.controlSize.setter();
}

void *sub_100023118(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10002315C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000231C4()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistSongRowView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[8];
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_100023378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SetlistSongRowView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000233DC()
{
  uint64_t v1 = *(void *)(type metadata accessor for SetlistSongRowView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for URL();

  return sub_100020DE0((void *)(v0 + v2));
}

unint64_t sub_1000234A8()
{
  unint64_t result = qword_100198D50;
  if (!qword_100198D50)
  {
    sub_10000650C(&qword_100198D48);
    sub_100023548();
    sub_100010484(&qword_100198D68, &qword_100198D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198D50);
  }
  return result;
}

unint64_t sub_100023548()
{
  unint64_t result = qword_100198D58;
  if (!qword_100198D58)
  {
    sub_10000650C(&qword_100198D60);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198D58);
  }
  return result;
}

uint64_t sub_1000235F4()
{
  return sub_100023DE8(&qword_100198D88, &qword_100198C88, (void (*)(void))sub_100023624);
}

unint64_t sub_100023624()
{
  unint64_t result = qword_100198D90;
  if (!qword_100198D90)
  {
    sub_10000650C(&qword_100198C80);
    sub_100010484(&qword_100198D78, &qword_100198C78);
    sub_100023F90((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198D90);
  }
  return result;
}

uint64_t sub_1000236F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100023724()
{
  return EnvironmentValues.isLuminanceReduced.setter();
}

unint64_t sub_10002374C()
{
  unint64_t result = qword_100198DA8;
  if (!qword_100198DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198DA8);
  }
  return result;
}

unint64_t sub_1000237B0()
{
  unint64_t result = qword_100198DB8;
  if (!qword_100198DB8)
  {
    sub_10000650C(&qword_100198DB0);
    sub_100023850();
    sub_100010484(&qword_100198DE0, &qword_100198DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198DB8);
  }
  return result;
}

unint64_t sub_100023850()
{
  unint64_t result = qword_100198DC0;
  if (!qword_100198DC0)
  {
    sub_10000650C(&qword_100198DC8);
    sub_1000238F0();
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198DC0);
  }
  return result;
}

unint64_t sub_1000238F0()
{
  unint64_t result = qword_100198DD0;
  if (!qword_100198DD0)
  {
    sub_10000650C(&qword_100198DD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198DD0);
  }
  return result;
}

uint64_t sub_100023964(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000239D8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for PlaybackView(uint64_t a1)
{
  sub_10001D868(*(void *)a1, *(unsigned char *)(a1 + 8));

  return swift_release();
}

uint64_t _s15ShazamEventsApp12PlaybackViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1000239D8(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlaybackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1000239D8(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10001D868(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.QueryItem(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PlaybackView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_10001D868(v6, v7);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackView()
{
  return &type metadata for PlaybackView;
}

uint64_t sub_100023BEC()
{
  return sub_100023DE8(&qword_100198DF8, &qword_100198C40, (void (*)(void))sub_100023C30);
}

uint64_t sub_100023C30()
{
  return sub_100023DE8(&qword_100198E00, &qword_100198C08, (void (*)(void))sub_100023C60);
}

unint64_t sub_100023C60()
{
  unint64_t result = qword_100198E08;
  if (!qword_100198E08)
  {
    sub_10000650C(&qword_100198C00);
    sub_100010484(&qword_100198C38, &qword_100198BF8);
    sub_100023F90((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198E08);
  }
  return result;
}

uint64_t sub_100023D30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100023D4C()
{
  sub_10001D868(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100023D90@<X0>(uint64_t a1@<X8>)
{
  return sub_100021D38(*(void *)(v1 + 32), a1);
}

uint64_t sub_100023DA8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100023DE0(uint64_t a1)
{
  return sub_100022F18(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100023DE8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100023E64()
{
  unint64_t result = qword_100198E80;
  if (!qword_100198E80)
  {
    sub_10000650C(&qword_100198E88);
    sub_10000650C(&qword_100198E90);
    type metadata accessor for CircularProgressViewStyle();
    sub_100010484(&qword_100198E98, &qword_100198E90);
    sub_100023F90(&qword_100198EA0, (void (*)(uint64_t))type metadata accessor for CircularProgressViewStyle);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198E80);
  }
  return result;
}

uint64_t sub_100023F90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100023FD8()
{
  unint64_t result = qword_100198EC8;
  if (!qword_100198EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198EC8);
  }
  return result;
}

uint64_t sub_10002402C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100024094()
{
  return EnvironmentValues.controlSize.getter();
}

unint64_t sub_1000240C0()
{
  unint64_t result = qword_100198F10;
  if (!qword_100198F10)
  {
    sub_10000650C(&qword_100198E28);
    sub_100024160();
    sub_100010484(&qword_100198F28, &qword_100198F30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198F10);
  }
  return result;
}

unint64_t sub_100024160()
{
  unint64_t result = qword_100198F18;
  if (!qword_100198F18)
  {
    sub_10000650C(&qword_100198E18);
    sub_100010484(&qword_100198F20, &qword_100198E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198F18);
  }
  return result;
}

void sub_100024200(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_100024214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v70 = a2;
  uint64_t v69 = type metadata accessor for CoordinateSpace();
  uint64_t v59 = *(void *)(v69 - 8);
  uint64_t v5 = __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v5);
  uint64_t v9 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198FC8);
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  uint64_t v58 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_100198FD0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006560(&qword_100198FD8) - 8;
  __chkstk_darwin(v63);
  uint64_t v60 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100006560(&qword_100198FE0) - 8;
  __chkstk_darwin(v67);
  uint64_t v64 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100006560(&qword_100198FE8) - 8;
  __chkstk_darwin(v68);
  uint64_t v65 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v2;
  swift_retain();
  sub_1001064AC((uint64_t)v11);
  swift_release();
  uint64_t v21 = v7;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v48 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57(v48, v3, a1);
  uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v53 = v23;
  uint64_t v54 = v22 | 7;
  uint64_t v55 = v23 + v8;
  uint64_t v24 = swift_allocObject();
  uint64_t v51 = *(void *)(a1 + 16);
  uint64_t v52 = *(void *)(a1 + 24);
  uint64_t v25 = v52;
  uint64_t v49 = a1;
  *(void *)(v24 + 16) = v51;
  *(void *)(v24 + 24) = v25;
  uint64_t v50 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v50(v24 + v23, (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_100006560(&qword_100198FF0);
  sub_100026760();
  double v26 = 1.0;
  uint64_t v27 = v58;
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v28 = v59;
  uint64_t v29 = v66;
  uint64_t v30 = v69;
  (*(void (**)(char *, void, uint64_t))(v59 + 104))(v66, enum case for CoordinateSpace.local(_:), v69);
  uint64_t v31 = &v17[*(int *)(v15 + 44)];
  uint64_t v32 = sub_100006560(&qword_1001990F8);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(&v31[*(int *)(v32 + 36)], v29, v30);
  *(void *)uint64_t v31 = &type metadata for HeroImageHeightPreferenceKey;
  uint64_t v33 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v31[*(int *)(v32 + 40)];
  char *v33 = sub_100025A40;
  v33[1] = 0;
  uint64_t v35 = v61;
  uint64_t v34 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v17, v27, v62);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v34);
  uint64_t v36 = v48;
  uint64_t v37 = v49;
  v57(v48, v56, v49);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v52;
  *(void *)(v38 + 16) = v51;
  *(void *)(v38 + 24) = v39;
  v50(v38 + v53, v36, v37);
  uint64_t v40 = v60;
  sub_1000066D4((uint64_t)v17, v60, &qword_100198FD0);
  uint64_t v41 = (uint64_t (**)())(v40 + *(int *)(v63 + 44));
  *uint64_t v41 = sub_100026EB0;
  v41[1] = (uint64_t (*)())v38;
  sub_1000067DC((uint64_t)v17, &qword_100198FD0);
  swift_retain();
  LOBYTE(v38) = sub_100106A14();
  swift_release();
  if ((v38 & 1) == 0) {
    double v26 = 0.0;
  }
  uint64_t v42 = v64;
  sub_1000066D4(v40, v64, &qword_100198FD8);
  *(double *)(v42 + *(int *)(v67 + 44)) = v26;
  sub_1000067DC(v40, &qword_100198FD8);
  char v43 = static Edge.Set.bottom.getter();
  uint64_t v44 = static SafeAreaRegions.all.getter();
  uint64_t v45 = v65;
  sub_1000066D4(v42, v65, &qword_100198FE0);
  uint64_t v46 = v45 + *(int *)(v68 + 44);
  *(void *)uint64_t v46 = v44;
  *(unsigned char *)(v46 + 8) = v43;
  sub_1000067DC(v42, &qword_100198FE0);
  return sub_10001D6D8(v45, v70, &qword_100198FE8);
}

void *sub_1000248DC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v85 = v5;
  uint64_t v86 = v6;
  uint64_t v84 = v7;
  uint64_t v8 = type metadata accessor for HeroImage();
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  uint64_t v9 = *(void *)(v82 + 64);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v81 = &v68[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  double v80 = &v68[-v11];
  uint64_t v12 = type metadata accessor for Image.ResizingMode();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v68[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for AsyncImagePhase();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)&v68[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v19, v4, v16);
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    uint64_t v21 = *v19;
    (*(void (**)(unsigned char *, void, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
    uint64_t v78 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v22 = *(void *)(v3 + 8);
    swift_retain();
    double v23 = sub_1001066FC();
    swift_release();
    uint64_t v24 = *(void *)(v22 + 64);
    int v76 = static MatchedGeometryProperties.position.getter();
    static UnitPoint.center.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    sub_100006560(&qword_100199118);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_10014CCD0;
    swift_retain();
    sub_100106730();
    swift_release();
    *(void *)&long long v74 = Color.init(_:)();
    if (*(void *)(v3 + 48))
    {
      swift_retain();
      char v30 = sub_100116888();
      uint64_t v32 = v31;
      swift_release();
      uint64_t v33 = v80;
      uint64_t v77 = v24;
      if (v32 && (swift_bridgeObjectRelease(), (v30 & 1) != 0)) {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      else {
        char v34 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v82 + 16);
      v37(v33, v3, v83);
      uint64_t v79 = v21;
      uint64_t v75 = v37;
      uint64_t v73 = v9;
      if (v34)
      {
LABEL_17:
        uint64_t v40 = v82;
        uint64_t v41 = v33;
        uint64_t v42 = v83;
        (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v41, v83);
        uint64_t v43 = Color.opacity(_:)();
        swift_release();
        *(void *)(v29 + 32) = v43;
        *(void *)(v29 + 40) = static Color.clear.getter();
        v127[0] = v29;
        specialized Array._endMutation()();
        Gradient.init(colors:)();
        double v44 = 0.0;
        LinearGradient.init(gradient:startPoint:endPoint:)();
        double v80 = v110;
        long long v74 = v111;
        uint64_t v45 = v112;
        uint64_t v46 = v113;
        uint64_t v72 = static SafeAreaRegions.all.getter();
        int v69 = static Edge.Set.all.getter();
        uint64_t v47 = static Alignment.center.getter();
        uint64_t v70 = v48;
        uint64_t v71 = v47;
        uint64_t v49 = *(void *)(v3 + 24);
        LOBYTE(v127[0]) = *(unsigned char *)(v3 + 16);
        v127[1] = v49;
        sub_100006560(&qword_100198448);
        State.wrappedValue.getter();
        if (v109[0]) {
          double v44 = 1.0;
        }
        v87[552] = 1;
        uint64_t v50 = v81;
        v75(v81, v3, v42);
        unint64_t v51 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        uint64_t v52 = swift_allocObject();
        uint64_t v53 = v85;
        *(void *)(v52 + 16) = v84;
        *(void *)(v52 + 24) = v53;
        (*(void (**)(unint64_t, unsigned char *, uint64_t))(v40 + 32))(v52 + v51, v50, v42);
        long long v91 = (unint64_t)v78;
        LOWORD(v92) = 1;
        *(_DWORD *)((char *)&v92 + 2) = *(_DWORD *)&v89[7];
        WORD3(v92) = v90;
        *((void *)&v92 + 1) = 0;
        *(double *)&long long v93 = v23;
        *((void *)&v93 + 1) = 0xD000000000000010;
        *(void *)&long long v94 = 0x8000000100157360;
        *((void *)&v94 + 1) = v77;
        LODWORD(v95) = v76;
        *((void *)&v95 + 1) = v26;
        *(void *)&long long v96 = v28;
        BYTE8(v96) = 1;
        HIDWORD(v96) = *(_DWORD *)&v89[3];
        *(_DWORD *)((char *)&v96 + 9) = *(_DWORD *)v89;
        *(void *)&v97[0] = v80;
        *(_OWORD *)((char *)v97 + 8) = v74;
        *((void *)&v97[1] + 1) = v45;
        *(void *)&long long v98 = v46;
        *((void *)&v98 + 1) = v72;
        LOBYTE(v99) = v69;
        DWORD1(v99) = *(_DWORD *)&v88[3];
        *(_DWORD *)((char *)&v99 + 1) = *(_DWORD *)v88;
        *((void *)&v99 + 1) = v71;
        *(void *)&long long v100 = v70;
        *((double *)&v100 + 1) = v44;
        *(void *)&long long v101 = sub_1000270A0;
        *((void *)&v101 + 1) = v52;
        long long v102 = 0uLL;
        long long v125 = v101;
        long long v124 = v100;
        long long v119 = v96;
        long long v120 = v97[0];
        long long v121 = v97[1];
        long long v122 = v98;
        long long v126 = 0uLL;
        long long v123 = v99;
        long long v114 = (unint64_t)v78;
        long long v118 = v95;
        long long v117 = v94;
        long long v116 = v93;
        long long v115 = v92;
        static Alignment.top.getter();
        sub_100051500(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v103, 0.0, 1, INFINITY, 0);
        sub_100027124((uint64_t)&v91);
        swift_retain();
        sub_100106730();
        swift_release();
        uint64_t v54 = Color.init(_:)();
        char v55 = static Edge.Set.all.getter();
        uint64_t v56 = static Alignment.bottom.getter();
        uint64_t v58 = v57;
        sub_100025680(v3, (uint64_t)v104);
        uint64_t v59 = static Alignment.center.getter();
        uint64_t v61 = v60;
        memcpy(v105, v103, 0x140uLL);
        *(void *)&v105[20] = v54;
        BYTE8(v105[20]) = v55;
        *(void *)&v105[21] = v56;
        *((void *)&v105[21] + 1) = v58;
        v105[28] = v104[6];
        v105[29] = v104[7];
        v105[30] = v104[8];
        v105[24] = v104[2];
        v105[25] = v104[3];
        v105[27] = v104[5];
        v105[26] = v104[4];
        v105[23] = v104[1];
        v105[22] = v104[0];
        *(void *)&v105[31] = v59;
        *((void *)&v105[31] + 1) = v61;
        swift_retain();
        double v62 = sub_1001069D4();
        swift_release();
        static UnitPoint.top.getter();
        uint64_t v64 = v63;
        uint64_t v66 = v65;
        memcpy(v106, v105, 0x200uLL);
        *(double *)&v106[64] = v62;
        *(double *)&v106[65] = v62;
        v106[66] = v64;
        v106[67] = v66;
        sub_1000271B0((uint64_t)v106);
        sub_10001D6D8((uint64_t)v106, (uint64_t)v127, &qword_100199110);
        sub_1000271B8((uint64_t)v105);
        sub_100006560(&qword_100199018);
        sub_100006560(&qword_1001990E8);
        sub_100026858();
        sub_100026DB8();
        _ConditionalContent<>.init(storage:)();
        memcpy(v107, v87, 0x221uLL);
        memcpy(v109, v87, 0x221uLL);
        sub_100026F60((uint64_t)v109);
        sub_10001D6D8((uint64_t)v109, (uint64_t)v127, &qword_100199108);
        sub_100027360(v107, sub_100027290);
        sub_100006560(&qword_100199008);
        sub_1000267DC();
        _ConditionalContent<>.init(storage:)();
        swift_release();
        sub_100027360(v107, sub_100027450);
        sub_100027548((uint64_t)v105);
        goto LABEL_20;
      }
      uint64_t v38 = *((void *)v33 + 6);
      if (v38)
      {
        switch(*(unsigned char *)(v38 + 32))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            break;
          default:
            swift_bridgeObjectRelease();
            break;
        }
        goto LABEL_17;
      }
    }
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    EnvironmentObject.error()();
    __break(1u);
    JUMPOUT(0x1000255FCLL);
  }
  if (v20 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v17 + 96))(v19, v16);
    swift_errorRelease();
LABEL_9:
    swift_retain();
    sub_100106730();
    swift_release();
    uint64_t v35 = Color.init(_:)();
    char v36 = static Edge.Set.all.getter();
    v107[0] = v35;
    LOBYTE(v107[1]) = v36;
    sub_100026F54((uint64_t)v107);
    sub_10001D6D8((uint64_t)v107, (uint64_t)v127, &qword_100199110);
    swift_retain();
    sub_100006560(&qword_100199018);
    sub_100006560(&qword_1001990E8);
    sub_100026858();
    sub_100026DB8();
    _ConditionalContent<>.init(storage:)();
    memcpy(v109, v106, 0x221uLL);
    sub_100026F60((uint64_t)v109);
    sub_10001D6D8((uint64_t)v109, (uint64_t)v127, &qword_100199108);
    sub_100006560(&qword_100199008);
    sub_1000267DC();
    _ConditionalContent<>.init(storage:)();
    swift_release();
LABEL_20:
    uint64_t v39 = v108;
    goto LABEL_21;
  }
  if (v20 == enum case for AsyncImagePhase.empty(_:)) {
    goto LABEL_9;
  }
  sub_100026F48((uint64_t)v108);
  sub_10001D6D8((uint64_t)v108, (uint64_t)v127, &qword_100199108);
  sub_100006560(&qword_100199008);
  sub_1000267DC();
  _ConditionalContent<>.init(storage:)();
  (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v39 = v109;
LABEL_21:
  memcpy(v127, v39, 0x222uLL);
  return memcpy(v86, v127, 0x222uLL);
}

uint64_t sub_100025610()
{
  return swift_release();
}

double sub_100025680@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v28[-v9];
  sub_100006560(&qword_100199118);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10014CCD0;
  *(void *)(v11 + 32) = static Color.clear.getter();
  *(void *)(v11 + 40) = static Color.white.getter();
  uint64_t v34 = v11;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v12 = v29;
  uint64_t v13 = v30;
  uint64_t v14 = v31;
  uint64_t v15 = v32;
  uint64_t v16 = v33;
  type metadata accessor for HeroImage();
  swift_retain();
  double v17 = sub_100106948();
  swift_release();
  sub_10001D3A4((uint64_t)v10);
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v8, enum case for ColorScheme.light(_:), v4);
  LOBYTE(v11) = static ColorScheme.== infix(_:_:)();
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  if (v11)
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v19 = &qword_1001AA340;
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v19 = &qword_1001AA338;
  }
  uint64_t v20 = *v19;
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v35 = v22;
  sub_100006560(&qword_100199100);
  State.wrappedValue.getter();
  swift_retain();
  sub_100106984();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v23 = v34;
  char v24 = v35;
  uint64_t v25 = v36;
  char v26 = v37;
  *(void *)a2 = 17;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = 0;
  *(double *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = KeyPath;
  *(void *)(a2 + 72) = v20;
  *(void *)(a2 + 80) = v23;
  *(unsigned char *)(a2 + 88) = v24;
  *(void *)(a2 + 96) = v25;
  *(unsigned char *)(a2 + 104) = v26;
  double result = *(double *)&v38;
  *(_OWORD *)(a2 + 112) = v38;
  *(void *)(a2 + 128) = sub_100025A18;
  *(void *)(a2 + 136) = 0;
  return result;
}

uint64_t sub_100025A18()
{
  return Transaction.animation.setter();
}

void sub_100025A40(double *a1@<X8>, double a2@<D2>, double a3@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t sub_100025A48@<X0>(uint64_t a1@<X8>)
{
  swift_getWitnessTable();
  *(void *)a1 = ObservedObject.init(wrappedValue:)();
  *(void *)(a1 + 8) = v2;
  State.init(wrappedValue:)();
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  State.init(wrappedValue:)();
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  type metadata accessor for RemoteViewConfiguration();
  sub_100025BB4();
  *(void *)(a1 + 48) = EnvironmentObject.init()();
  *(void *)(a1 + 56) = v3;
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(type metadata accessor for HeroImage() + 48));
  *uint64_t v4 = swift_getKeyPath();
  sub_100006560(&qword_100198A98);
  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_100025BB4()
{
  unint64_t result = qword_1001982B8;
  if (!qword_1001982B8)
  {
    type metadata accessor for RemoteViewConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001982B8);
  }
  return result;
}

uint64_t type metadata accessor for HeroImage()
{
  return sub_1000068A4();
}

__n128 sub_100025C28@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = static Alignment.top.getter();
  sub_1000516DC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, INFINITY, 0, v4, v5, KeyPath, v2, 0x3FF199999999999ALL, 0);
  swift_release();
  swift_release();
  long long v6 = v10[7];
  *(_OWORD *)(a1 + 96) = v10[6];
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v10[8];
  long long v7 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = v10[5];
  *(_OWORD *)(a1 + 64) = v10[4];
  *(_OWORD *)(a1 + 80) = v8;
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a1 = v10[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for HeroImagePlaceholder()
{
  return &type metadata for HeroImagePlaceholder;
}

uint64_t sub_100025D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_100025D28()
{
  sub_100026608();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100025DCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = *(int *)(a3 + 48);
    uint64_t v9 = (uint64_t *)((char *)a2 + v8);
    uint64_t v10 = (void *)(a1 + v8);
    *(void *)(a1 + 56) = a2[7];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v10, v9, v11);
    }
    else
    {
      void *v10 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100025F2C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100025FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 48);
  uint64_t v8 = (void *)(a2 + v7);
  uint64_t v9 = (void *)(a1 + v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v8, v10);
  }
  else
  {
    *uint64_t v9 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100026104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_1000067DC(a1 + v6, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_100026260(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10002633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 48);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_1000067DC(a1 + v7, &qword_100198A98);
    uint64_t v10 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100026480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100026494);
}

uint64_t sub_100026494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(qword_100198F38);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100026548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002655C);
}

uint64_t sub_10002655C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(qword_100198F38);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100026608()
{
  if (!qword_100198FC0)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100198FC0);
    }
  }
}

uint64_t sub_100026660()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002667C()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_1000266C4(uint64_t a1)
{
  type metadata accessor for HeroImage();

  return sub_1000248DC(a1);
}

unint64_t sub_100026760()
{
  unint64_t result = qword_100198FF8;
  if (!qword_100198FF8)
  {
    sub_10000650C(&qword_100198FF0);
    sub_1000267DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198FF8);
  }
  return result;
}

unint64_t sub_1000267DC()
{
  unint64_t result = qword_100199000;
  if (!qword_100199000)
  {
    sub_10000650C(&qword_100199008);
    sub_100026858();
    sub_100026DB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199000);
  }
  return result;
}

unint64_t sub_100026858()
{
  unint64_t result = qword_100199010;
  if (!qword_100199010)
  {
    sub_10000650C(&qword_100199018);
    sub_1000268D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199010);
  }
  return result;
}

unint64_t sub_1000268D4()
{
  unint64_t result = qword_100199020;
  if (!qword_100199020)
  {
    sub_10000650C(&qword_100199028);
    sub_100026974();
    sub_100010484(&qword_1001990D0, &qword_1001990D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199020);
  }
  return result;
}

unint64_t sub_100026974()
{
  unint64_t result = qword_100199030;
  if (!qword_100199030)
  {
    sub_10000650C(&qword_100199038);
    sub_100026A14();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199030);
  }
  return result;
}

unint64_t sub_100026A14()
{
  unint64_t result = qword_100199040;
  if (!qword_100199040)
  {
    sub_10000650C(&qword_100199048);
    sub_100026A90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199040);
  }
  return result;
}

unint64_t sub_100026A90()
{
  unint64_t result = qword_100199050;
  if (!qword_100199050)
  {
    sub_10000650C(&qword_100199058);
    sub_100026B0C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199050);
  }
  return result;
}

unint64_t sub_100026B0C()
{
  unint64_t result = qword_100199060;
  if (!qword_100199060)
  {
    sub_10000650C(&qword_100199068);
    sub_100026B88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199060);
  }
  return result;
}

unint64_t sub_100026B88()
{
  unint64_t result = qword_100199070;
  if (!qword_100199070)
  {
    sub_10000650C(&qword_100199078);
    sub_100026C28();
    sub_100010484(&qword_1001990C0, &qword_1001990C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199070);
  }
  return result;
}

unint64_t sub_100026C28()
{
  unint64_t result = qword_100199080;
  if (!qword_100199080)
  {
    sub_10000650C(&qword_100199088);
    sub_100026CC8();
    sub_100010484(&qword_1001990B0, &qword_1001990B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199080);
  }
  return result;
}

unint64_t sub_100026CC8()
{
  unint64_t result = qword_100199090;
  if (!qword_100199090)
  {
    sub_10000650C(&qword_100199098);
    sub_100026D44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199090);
  }
  return result;
}

unint64_t sub_100026D44()
{
  unint64_t result = qword_1001990A0;
  if (!qword_1001990A0)
  {
    sub_10000650C(&qword_1001990A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001990A0);
  }
  return result;
}

unint64_t sub_100026DB8()
{
  unint64_t result = qword_1001990E0;
  if (!qword_1001990E0)
  {
    sub_10000650C(&qword_1001990E8);
    sub_100026E58();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001990E0);
  }
  return result;
}

unint64_t sub_100026E58()
{
  unint64_t result = qword_1001990F0;
  if (!qword_1001990F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001990F0);
  }
  return result;
}

uint64_t sub_100026EB0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100026F48(uint64_t result)
{
  *(unsigned char *)(result + 545) = 1;
  return result;
}

uint64_t sub_100026F54(uint64_t result)
{
  *(unsigned char *)(result + 544) = 1;
  return result;
}

uint64_t sub_100026F60(uint64_t result)
{
  *(unsigned char *)(result + 545) = 0;
  return result;
}

uint64_t sub_100026F6C()
{
  uint64_t v1 = (int *)(type metadata accessor for HeroImage() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[14];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000270A0()
{
  type metadata accessor for HeroImage();

  return sub_100025610();
}

uint64_t sub_100027124(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000271A0(v2);
  sub_1000271A0(v3);
  return a1;
}

uint64_t sub_1000271A0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000271B0(uint64_t result)
{
  *(unsigned char *)(result + 544) = 0;
  return result;
}

uint64_t sub_1000271B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100027280(v2);
  sub_100027280(v3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_100027280(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100027290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((a69 & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100027280(a23);
    sub_100027280(a25);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }

  return swift_retain();
}

#error "10002742C: call analysis failed (funcsize=60)"

uint64_t sub_100027450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = swift_release();
  if ((a69 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000271A0(a23);
    sub_1000271A0(a25);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100027548(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000271A0(v2);
  sub_1000271A0(v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100027618()
{
  return State.wrappedValue.setter();
}

ValueMetadata *type metadata accessor for HeroImageHeightPreferenceKey()
{
  return &type metadata for HeroImageHeightPreferenceKey;
}

unint64_t sub_100027690()
{
  unint64_t result = qword_100199120;
  if (!qword_100199120)
  {
    sub_10000650C(&qword_100198FE8);
    sub_10002770C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199120);
  }
  return result;
}

unint64_t sub_10002770C()
{
  unint64_t result = qword_100199128;
  if (!qword_100199128)
  {
    sub_10000650C(&qword_100198FE0);
    sub_100027788();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199128);
  }
  return result;
}

unint64_t sub_100027788()
{
  unint64_t result = qword_100199130;
  if (!qword_100199130)
  {
    sub_10000650C(&qword_100198FD8);
    sub_100027828();
    sub_100010484(&qword_100199150, &qword_100199158);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199130);
  }
  return result;
}

unint64_t sub_100027828()
{
  unint64_t result = qword_100199138;
  if (!qword_100199138)
  {
    sub_10000650C(&qword_100198FD0);
    sub_100010484(&qword_100199140, &qword_100198FC8);
    sub_100010484(&qword_100199148, &qword_1001990F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199138);
  }
  return result;
}

unint64_t sub_1000278F0()
{
  unint64_t result = qword_100199160;
  if (!qword_100199160)
  {
    sub_10000650C(&qword_100199168);
    sub_10002796C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199160);
  }
  return result;
}

unint64_t sub_10002796C()
{
  unint64_t result = qword_100199170;
  if (!qword_100199170)
  {
    sub_10000650C(&qword_100199178);
    sub_100019638();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199170);
  }
  return result;
}

unint64_t sub_1000279E8(uint64_t a1)
{
  unint64_t result = sub_100027A10();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100027A10()
{
  unint64_t result = qword_100199180[0];
  if (!qword_100199180[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100199180);
  }
  return result;
}

void sub_100027A64()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_100029828(319, (unint64_t *)&qword_100199208);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      type metadata accessor for Published();
      if (v2 <= 0x3F)
      {
        sub_100029828(319, &qword_100199210);
        if (v3 <= 0x3F)
        {
          sub_100029828(319, &qword_100199218);
          if (v4 <= 0x3F)
          {
            type metadata accessor for FilterViewModel.FilterConfiguration();
            type metadata accessor for Published();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Array();
              type metadata accessor for Published();
              if (v6 <= 0x3F) {
                swift_initClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_100027CF0()
{
  uint64_t v0 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (uint64_t *)((char *)&v6 - v2);
  sub_100027DE4();
  uint64_t v4 = *v3;
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  return v4 > 0;
}

uint64_t sub_100027DE4()
{
  return sub_100027F4C();
}

uint64_t sub_100027DF8()
{
  uint64_t v1 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - v3;
  if (sub_100027CF0())
  {
    sub_100027DE4();
    uint64_t v5 = *((void *)v4 + 2);
    uint64_t v6 = *(void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    v6(v4, v1);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + *(void *)(*(void *)v0 + 120));
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t sub_100027F24()
{
  return sub_100028238();
}

uint64_t sub_100027F38()
{
  return sub_100027F4C();
}

uint64_t sub_100027F4C()
{
  return swift_release();
}

uint64_t sub_10002803C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002812C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100028224()
{
  return sub_100028238();
}

uint64_t sub_100028238()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100028328()
{
  return sub_10002833C();
}

uint64_t sub_10002833C()
{
  return static Published.subscript.setter();
}

double sub_100028430()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100028520()
{
  return static Published.subscript.setter();
}

uint64_t sub_100028614()
{
  return sub_100027DE4();
}

uint64_t sub_100028638(uint64_t a1)
{
  return sub_100029C40(a1);
}

uint64_t sub_10002865C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10002874C()
{
  return static Published.subscript.setter();
}

uint64_t sub_100028840()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 24))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_1000288B8()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 96) + 32))(*(void *)(*(void *)v0 + 80));
}

BOOL sub_100028930()
{
  return Array.count.getter() > 5;
}

uint64_t sub_100028980()
{
  uint64_t v0 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v16 - v2);
  uint64_t v4 = self;
  id v5 = [v4 mainBundle];
  v6._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v17._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001001574C0;
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v17);

  id v8 = [v4 mainBundle];
  v18._object = (void *)0xE000000000000000;
  v9._object = (void *)0x80000001001574F0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000025;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v18)._countAndFlagsBits;

  sub_100006560(qword_100199240);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014D4D0;
  sub_100027DE4();
  uint64_t v13 = *v3;
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)(v12 + 56) = &type metadata for Int;
  *(void *)(v12 + 64) = &protocol witness table for Int;
  *(void *)(v12 + 32) = v13;
  uint64_t v14 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  if (!sub_100027CF0()) {
    uint64_t v14 = countAndFlagsBits;
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100028BDC()
{
  uint64_t v0 = sub_10002803C();
  unint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = v0 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    sub_100027DF8();
    type metadata accessor for Array();
    swift_getWitnessTable();
    _ArrayProtocol.filter(_:)();
    return sub_10002874C();
  }
  else
  {
    sub_100027DF8();
    return sub_10002874C();
  }
}

uint64_t sub_100028CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 104);
  uint64_t v3 = *(void *)(*(void *)a2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v6 = __chkstk_darwin(AssociatedTypeWitness);
  id v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 208))(v3, v2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_100147A9C(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  v15[2] = v10;
  v15[3] = v12;
  v15[0] = sub_10002803C();
  v15[1] = v13;
  sub_10002374C();
  LOBYTE(v10) = StringProtocol.localizedStandardContains<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100028EBC()
{
  sub_100027DF8();

  return sub_10002874C();
}

uint64_t sub_100028EE4()
{
  return sub_10002833C();
}

void sub_100028F10()
{
  sub_10002812C();
  sub_10002833C();
  uint64_t v0 = self;
  v2[4] = sub_10006BAA0;
  v2[5] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_10013B904;
  v2[3] = &unk_10018DA60;
  unint64_t v1 = _Block_copy(v2);
  [v0 animateWithDuration:0 delay:v1 options:0 animations:0.3 completion:0.0];
  _Block_release(v1);
}

void sub_100029000(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  sub_100006560(&qword_100199238);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014D8E0;
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 96) + 16))(*(void *)(v11 + 80));
  *(void *)(v12 + 56) = &type metadata for AnalyticsString;
  *(void *)(v12 + 64) = &off_10019BA08;
  *(unsigned char *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v12 + 104) = &off_10019B9E0;
  *(unsigned char *)(v12 + 72) = 4;
  *(void *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v12 + 144) = &off_10019BA68;
  *(unsigned char *)(v12 + 112) = a1;
  *(void *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v12 + 184) = &off_10019BA40;
  *(void *)(v12 + 152) = a2;
  *(void *)(v12 + 160) = a3;
  *(unsigned char *)(v12 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v15 = *(void *)(a5 + 64);
    unint64_t v16 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v32 = &type metadata for AnalyticsString;
  uint64_t v33 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v30 = v15;
  uint64_t v31 = (Class (*)(uint64_t))v16;
  sub_1000298CC(a2, a3, a4);
  uint64_t v35 = (char *)v12;
  unint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  if (v17 >= v18 >> 1) {
    uint64_t v35 = sub_1000AB884((char *)(v18 > 1), v17 + 1, 1, (char *)v12);
  }
  uint64_t v19 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v23 + 16))(v22, v20);
  sub_1000AC33C(v17, (uint64_t)v22, (uint64_t *)&v35, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  char v24 = v35;
  NSString v25 = String._bridgeToObjectiveC()();
  char v26 = (void *)swift_allocObject();
  void v26[2] = 0xD00000000000001ELL;
  v26[3] = 0x8000000100157480;
  v26[4] = v24;
  uint64_t v33 = sub_100029A98;
  uint64_t v34 = v26;
  aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1000AB7F8;
  uint64_t v32 = (ValueMetadata *)&unk_10018DA38;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v27);
  swift_bridgeObjectRelease();
}

uint64_t sub_100029358(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 96) + 16))(*(void *)(*(void *)v1 + 80));
  sub_1000AC7F8(v3, v4, 4, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000293F8()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = sub_100006560(&qword_100199220);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 136);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t v7 = sub_100006560(&qword_100199228);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  v3(v0 + *(void *)(*(void *)v0 + 152), v2);
  uint64_t v8 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v9 = sub_100006560(&qword_100199230);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + *(void *)(*(void *)v0 + 168);
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v11 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 176);
  type metadata accessor for Array();
  uint64_t v13 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000297B8()
{
  sub_1000293F8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VenueEventViewModel()
{
  return swift_getGenericMetadata();
}

void sub_100029828(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void *sub_100029870()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10002987C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000298CC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000298E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002803C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100029910()
{
  return sub_10002812C();
}

uint64_t sub_100029950@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100027F24();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100029980()
{
  return sub_10002833C();
}

uint64_t sub_1000299B8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100029A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100029A58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *sub_100029A98()
{
  return sub_1000912A4(v0 + 16);
}

uint64_t sub_100029AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100029AB0()
{
  return swift_release();
}

uint64_t sub_100029AB8(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - v7;
  uint64_t v14 = v3[10];
  uint64_t v9 = v14;
  uint64_t v15 = v4;
  uint64_t v16 = v3[12];
  uint64_t v10 = v16;
  uint64_t v17 = v3[13];
  uint64_t v11 = v17;
  swift_getKeyPath();
  v13[0] = v9;
  v13[1] = v4;
  v13[2] = v10;
  v13[3] = v11;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100029C40(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v6 = type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v14 = *(void *)(v3 + 80);
  uint64_t v10 = v14;
  uint64_t v15 = v4;
  uint64_t v16 = *(void *)(v3 + 96);
  uint64_t v11 = v16;
  uint64_t v17 = v5;
  swift_getKeyPath();
  v13[0] = v10;
  v13[1] = v4;
  v13[2] = v11;
  v13[3] = v5;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100029DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v14 - 8);
  uint64_t v32 = v14;
  __n128 v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v31 - v16;
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, __n128))(a5 + 208);
  uint64_t v33 = a1;
  v18(a3, a5, v15);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  uint64_t v34 = v19;
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v13 - 8);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v13);
  if (v22 == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a3, a5);
    uint64_t v25 = v26;
  }
  else
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v13, v20);
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v13);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v27 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v29 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *(void *)(v27 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(void *)(v27 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v27 + 16) = v23;
  *(void *)(v27 + 24) = v25;
  *(unsigned char *)(v27 + 32) = v22 != 1;
  return v27;
}

uint64_t sub_10002A1B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100027F24();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10002A1E0()
{
  return sub_10002833C();
}

uint64_t sub_10002A218()
{
  return 32;
}

__n128 sub_10002A224(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A230(uint64_t a1)
{
  return sub_100028CF0(a1, v1) & 1;
}

uint64_t sub_10002A250@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002865C();
  *a1 = result;
  return result;
}

uint64_t sub_10002A27C()
{
  return sub_10002874C();
}

uint64_t sub_10002A2A8()
{
  return 32;
}

__n128 sub_10002A2B4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A2C0()
{
  return sub_100027DE4();
}

uint64_t sub_10002A2E4(uint64_t a1)
{
  return sub_100029C40(a1);
}

uint64_t sub_10002A308()
{
  return 32;
}

__n128 sub_10002A314(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A320@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002803C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002A34C()
{
  return sub_10002812C();
}

uint64_t sub_10002A38C()
{
  return 32;
}

__n128 sub_10002A398(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A3AC()
{
  return 32;
}

__n128 sub_10002A3B8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A3CC()
{
  return 32;
}

__n128 sub_10002A3D8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_10002A3E4(double *a1@<X8>)
{
  *a1 = sub_100028430();
}

uint64_t sub_10002A410()
{
  return sub_100028520();
}

uint64_t sub_10002A438()
{
  return 32;
}

__n128 sub_10002A444(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10002A458()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002A4EC()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConditionalValue.Storage()
{
  return sub_1000068A4();
}

void *initializeBufferWithCopyOfBuffer for ShazamEventsApp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ShazamEventsApp()
{
  return swift_release();
}

void *assignWithCopy for ShazamEventsApp(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ShazamEventsApp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConditionalValue()
{
  return sub_1000068A4();
}

uint64_t sub_10002A6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

void *sub_10002A718(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100006560(&qword_100198630);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    unint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)unint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    v18[16] = v19[16];
    uint64_t v21 = *((void *)v19 + 3);
    LOBYTE(v19) = *((unsigned char *)a2 + v17);
    *((void *)v18 + 3) = v21;
    *((unsigned char *)v4 + v17) = (_BYTE)v19;
    uint64_t v22 = a3[8];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_100006560(&qword_100198948);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
    }
    else
    {
      *uint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_10002AA10(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      return v10(v7, v8);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_10002ABEC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100006560(&qword_100198630);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = v18;
  v16[16] = v17[16];
  uint64_t v19 = *((void *)v17 + 3);
  LOBYTE(v17) = *((unsigned char *)a2 + v15);
  *((void *)v16 + 3) = v19;
  *((unsigned char *)a1 + v15) = (_BYTE)v17;
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_100006560(&qword_100198948);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  else
  {
    *uint64_t v21 = *v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10002AE94(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)((char *)a2 + v15);
  *((void *)v16 + 1) = *(void *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[16] = v17[16];
  *((void *)v16 + 3) = *((void *)v17 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  if (a1 != a2)
  {
    uint64_t v18 = a3[8];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_1000067DC((uint64_t)a1 + v18, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_100006560(&qword_100198948);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10002B1E0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = *v15;
  long long v17 = v15[1];
  LOBYTE(v15) = *((unsigned char *)a2 + v13);
  _OWORD *v14 = v16;
  v14[1] = v17;
  *((unsigned char *)a1 + v13) = (_BYTE)v15;
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      uint64_t v24 = sub_100006560(&qword_100198948);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

void *sub_10002B464(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100006560(&qword_100198630);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  long long v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)((char *)a2 + v16 + 8);
  *(void *)long long v17 = *(void *)((char *)a2 + v16);
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  v17[16] = v18[16];
  *((void *)v17 + 3) = *((void *)v18 + 3);
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  if (a1 != a2)
  {
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    sub_1000067DC((uint64_t)a1 + v20, &qword_100198940);
    uint64_t v23 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        uint64_t v26 = sub_100006560(&qword_100198948);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10002B790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B7A4);
}

uint64_t sub_10002B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198630);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198950);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10002B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B8EC);
}

uint64_t sub_10002B8EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198630);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198950);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventListHeader(uint64_t a1)
{
  return sub_10002DE00(a1, (uint64_t *)&unk_1001993A0);
}

void sub_10002BA40()
{
  sub_10002BB28();
  if (v0 <= 0x3F)
  {
    sub_10001B760();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10002BB28()
{
  if (!qword_1001993B0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001993B0);
    }
  }
}

uint64_t destroy for VenueEventListHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for VenueEventListHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VenueEventListHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VenueEventListHeader()
{
  return &type metadata for VenueEventListHeader;
}

uint64_t sub_10002BE18()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002BE34@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_1001993F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_1001993F8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static VerticalAlignment.top.getter();
  uint64_t v11 = type metadata accessor for ArtistEventListHeader(0);
  uint64_t v12 = 0x4024000000000000;
  if (*((unsigned char *)v2 + *(int *)(v11 + 28))) {
    uint64_t v12 = 0x4020000000000000;
  }
  *(void *)uint64_t v6 = v10;
  *((void *)v6 + 1) = v12;
  v6[16] = 0;
  uint64_t v13 = sub_100006560(&qword_100199400);
  sub_10002BFC0(v2, (uint64_t)&v6[*(int *)(v13 + 44)]);
  uint64_t v14 = static Alignment.leading.getter();
  sub_1000518C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v14, v15);
  sub_1000067DC((uint64_t)v6, &qword_1001993F0);
  return sub_10001D6D8((uint64_t)v9, a1, &qword_1001993F8);
}

uint64_t sub_10002BFC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v111 = a2;
  uint64_t v109 = type metadata accessor for HeaderText(0);
  uint64_t v3 = __chkstk_darwin(v109);
  long long v91 = (uint64_t *)((char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v110 = (uint64_t)&v82 - v5;
  uint64_t v6 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v86 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_100006560(&qword_1001989F0);
  uint64_t v9 = __chkstk_darwin(v114);
  uint64_t v105 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v112 = (uint64_t)&v82 - v11;
  uint64_t v12 = sub_100006560(&qword_100198948);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v85 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v113 = (uint64_t)&v82 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v97 = (char *)&v82 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v92 = (uint64_t)&v82 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v82 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v82 - v24;
  uint64_t v26 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100006560(&qword_100199408);
  uint64_t v102 = *(void *)(v29 - 8);
  uint64_t v103 = v29;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100006560(&qword_100199410);
  __chkstk_darwin(v98);
  long long v100 = (char *)&v82 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100006560(&qword_100199418);
  uint64_t v33 = __chkstk_darwin(v99);
  uint64_t v107 = (uint64_t)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v96 = (uint64_t)&v82 - v36;
  __chkstk_darwin(v35);
  uint64_t v106 = (uint64_t)&v82 - v37;
  long long v38 = (int *)type metadata accessor for ArtistEventListHeader(0);
  sub_1000066D4((uint64_t)a1 + v38[5], (uint64_t)v28, &qword_100198630);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_100006560(&qword_100199420);
  sub_10002DE38();
  long long v101 = v31;
  AsyncImage.init(url:scale:transaction:content:)();
  long long v95 = v38;
  uint64_t v39 = v38[8];
  uint64_t v94 = v38[7];
  int v93 = *((unsigned __int8 *)a1 + v94);
  uint64_t v108 = a1;
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = v112;
  __int16 v90 = v40;
  sub_10001CA34((uint64_t)v25);
  uint64_t v42 = (void (*)(void))v7[13];
  unsigned int v89 = enum case for UserInterfaceSizeClass.compact(_:);
  BOOL v88 = (void (*)(uint64_t, void, uint64_t))v42;
  v42(v23);
  uint64_t v87 = (void (*)(char *, void, uint64_t, uint64_t))v7[7];
  v87(v23, 0, 1, v6);
  uint64_t v43 = v41 + *(int *)(v114 + 48);
  sub_1000066D4((uint64_t)v25, v41, &qword_100198948);
  sub_1000066D4((uint64_t)v23, v43, &qword_100198948);
  uint64_t v104 = v7;
  double v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v7[6];
  if (v44(v41, 1, v6) == 1)
  {
    sub_1000067DC((uint64_t)v23, &qword_100198948);
    sub_1000067DC((uint64_t)v25, &qword_100198948);
    if (v44(v43, 1, v6) == 1)
    {
      sub_1000067DC(v41, &qword_100198948);
      double v45 = 25.0;
      uint64_t v46 = (uint64_t)v97;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1000066D4(v41, v92, &qword_100198948);
    if (v44(v43, 1, v6) != 1)
    {
      uint64_t v47 = v104;
      uint64_t v48 = (void (*)(char *, uint64_t, uint64_t))v104[4];
      uint64_t v83 = v25;
      uint64_t v49 = v86;
      v48(v86, v43, v6);
      sub_100030D60((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      uint64_t v50 = v92;
      int v84 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v51 = (void (*)(char *, uint64_t))v47[1];
      v51(v49, v6);
      sub_1000067DC((uint64_t)v23, &qword_100198948);
      sub_1000067DC((uint64_t)v83, &qword_100198948);
      v51((char *)v50, v6);
      sub_1000067DC(v112, &qword_100198948);
      double v45 = 25.0;
      uint64_t v46 = (uint64_t)v97;
      if (v84) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    sub_1000067DC((uint64_t)v23, &qword_100198948);
    sub_1000067DC((uint64_t)v25, &qword_100198948);
    ((void (*)(uint64_t, uint64_t))v104[1])(v92, v6);
  }
  sub_1000067DC(v41, &qword_1001989F0);
  uint64_t v46 = (uint64_t)v97;
LABEL_8:
  double v45 = 30.0;
LABEL_9:
  sub_10001CA34(v46);
  uint64_t v52 = v113;
  v88(v113, v89, v6);
  uint64_t v53 = v52;
  v87((char *)v52, 0, 1, v6);
  uint64_t v54 = v105;
  uint64_t v55 = v105 + *(int *)(v114 + 48);
  sub_1000066D4(v46, v105, &qword_100198948);
  sub_1000066D4(v53, v55, &qword_100198948);
  if (v44(v54, 1, v6) != 1)
  {
    uint64_t v57 = v85;
    sub_1000066D4(v54, v85, &qword_100198948);
    if (v44(v55, 1, v6) != 1)
    {
      uint64_t v58 = v104;
      uint64_t v59 = v86;
      ((void (*)(char *, uint64_t, uint64_t))v104[4])(v86, v55, v6);
      sub_100030D60((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v61 = (void (*)(char *, uint64_t))v58[1];
      v61(v59, v6);
      sub_1000067DC(v113, &qword_100198948);
      sub_1000067DC(v46, &qword_100198948);
      v61((char *)v57, v6);
      sub_1000067DC(v54, &qword_100198948);
      double v56 = 25.0;
      if (v60) {
        goto LABEL_17;
      }
LABEL_16:
      double v56 = 30.0;
      goto LABEL_17;
    }
    sub_1000067DC(v113, &qword_100198948);
    sub_1000067DC(v46, &qword_100198948);
    ((void (*)(uint64_t, uint64_t))v104[1])(v57, v6);
LABEL_14:
    sub_1000067DC(v54, &qword_1001989F0);
    goto LABEL_16;
  }
  sub_1000067DC(v53, &qword_100198948);
  sub_1000067DC(v46, &qword_100198948);
  if (v44(v55, 1, v6) != 1) {
    goto LABEL_14;
  }
  sub_1000067DC(v54, &qword_100198948);
  double v56 = 25.0;
LABEL_17:
  uint64_t v63 = v101;
  uint64_t v62 = v102;
  uint64_t v64 = (uint64_t)v100;
  uint64_t v65 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v100, v101, v103);
  uint64_t v66 = v64 + *(int *)(v98 + 36);
  *(unsigned char *)uint64_t v66 = v93;
  *(void *)(v66 + 8) = 0x404E000000000000;
  *(double *)(v66 + 16) = v45;
  *(void *)(v66 + 24) = 0x404E000000000000;
  *(double *)(v66 + 32) = v56;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v65);
  uint64_t v67 = v96;
  sub_1000066D4(v64, v96, &qword_100199410);
  *(unsigned char *)(v67 + *(int *)(v99 + 36)) = 1;
  sub_1000067DC(v64, &qword_100199410);
  uint64_t v68 = v106;
  sub_10001D6D8(v67, v106, &qword_100199418);
  uint64_t v69 = v108[1];
  uint64_t v70 = (char *)v108 + v95[6];
  uint64_t v71 = *(void *)v70;
  uint64_t v72 = *((void *)v70 + 1);
  char v73 = v70[16];
  uint64_t v74 = *((void *)v70 + 3);
  LOBYTE(v70) = *((unsigned char *)v108 + v94);
  uint64_t v75 = (uint64_t)v91;
  *long long v91 = *v108;
  *(void *)(v75 + 8) = v69;
  *(void *)(v75 + 16) = v71;
  *(void *)(v75 + 24) = v72;
  *(unsigned char *)(v75 + 32) = v73;
  *(void *)(v75 + 40) = v74;
  *(unsigned char *)(v75 + 48) = (_BYTE)v70;
  int v76 = (uint64_t *)(v75 + *(int *)(v109 + 28));
  *int v76 = swift_getKeyPath();
  sub_100006560(&qword_100198940);
  swift_storeEnumTagMultiPayload();
  uint64_t v77 = v110;
  sub_10002F964(v75, v110);
  uint64_t v78 = v107;
  sub_1000066D4(v68, v107, &qword_100199418);
  sub_10002FB38(v77, v75, type metadata accessor for HeaderText);
  uint64_t v79 = v111;
  sub_1000066D4(v78, v111, &qword_100199418);
  uint64_t v80 = sub_100006560(&qword_100199488);
  sub_10002FB38(v75, v79 + *(int *)(v80 + 48), type metadata accessor for HeaderText);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002FBA0(v77, type metadata accessor for HeaderText);
  sub_1000067DC(v68, &qword_100199418);
  sub_10002FBA0(v75, type metadata accessor for HeaderText);
  return sub_1000067DC(v78, &qword_100199418);
}

uint64_t sub_10002CC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncImagePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  int v12 = (*(uint64_t (**)(void *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(void *, uint64_t))(v9 + 96))(v11, v8);
    *(void *)&long long v23 = *v11;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v13 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    static Color.black.getter();
    uint64_t v14 = Color.opacity(_:)();
    swift_release();
    *(void *)&long long v24 = v13;
    *((void *)&v24 + 1) = v14;
    *(_OWORD *)uint64_t v25 = xmmword_10014CCA0;
    *(void *)&v25[16] = 0x4010000000000000;
    v25[24] = 0;
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100199448);
    sub_100006560(&qword_100199478);
    sub_10002FC00(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_10002DFFC();
    _ConditionalContent<>.init(storage:)();
    long long v24 = v26;
    *(_OWORD *)uint64_t v25 = v27;
    *(void *)&v25[16] = v28;
    *(_WORD *)&v25[24] = v29;
    sub_10002F9D0();
    sub_100006560(&qword_100199438);
    sub_10002DEB4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_10002FA14();
  }
  else
  {
    if (v12 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(void *, uint64_t))(v9 + 96))(v11, v8);
      swift_errorRelease();
    }
    else if (v12 != enum case for AsyncImagePhase.empty(_:))
    {
      long long v24 = 0u;
      memset(v25, 0, 25);
      v25[25] = 1;
      sub_100006560(&qword_100199438);
      sub_10002DEB4();
      _ConditionalContent<>.init(storage:)();
      long long v22 = v27;
      long long v23 = v26;
      uint64_t v19 = v28;
      unsigned __int8 v20 = v29;
      char v21 = v30;
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
      long long v18 = v22;
      long long v17 = v23;
      goto LABEL_10;
    }
    if (qword_1001980B8 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1001AA360;
    *(void *)&long long v24 = swift_getKeyPath();
    *((void *)&v24 + 1) = v15;
    memset(v25, 0, 24);
    v25[24] = 1;
    swift_retain_n();
    swift_retain();
    sub_100006560(&qword_100199448);
    sub_100006560(&qword_100199478);
    sub_10002FC00(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_10002DFFC();
    _ConditionalContent<>.init(storage:)();
    long long v24 = v26;
    *(_OWORD *)uint64_t v25 = v27;
    *(void *)&v25[16] = v28;
    *(_WORD *)&v25[24] = v29;
    sub_100006560(&qword_100199438);
    sub_10002DEB4();
    _ConditionalContent<>.init(storage:)();
  }
  swift_release();
  uint64_t result = swift_release();
  long long v17 = v26;
  long long v18 = v27;
  uint64_t v19 = v28;
  unsigned __int8 v20 = v29;
  char v21 = v30;
LABEL_10:
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  *(void *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 40) = v20;
  *(unsigned char *)(a2 + 41) = v21;
  return result;
}

uint64_t sub_10002D1C4@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v107 = a1;
  uint64_t v104 = type metadata accessor for HeaderText(0) - 8;
  uint64_t v2 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v104);
  uint64_t v103 = (_OWORD *)((char *)v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v105 = (uint64_t)v86 - v4;
  uint64_t v102 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v102);
  long long v101 = (char *)v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MapInteractionModes();
  __chkstk_darwin(v6 - 8);
  uint64_t v97 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_1001994A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v92 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for MapCamera();
  uint64_t v10 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  int v12 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for MapCameraPosition();
  uint64_t v88 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v14 = (char *)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_1001994A8);
  __chkstk_darwin(v15 - 8);
  v86[1] = (char *)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100006560(&qword_1001994B0);
  uint64_t v17 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v19 = (char *)v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006560(&qword_1001994B8);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  long long v23 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100006560(&qword_1001994C0);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24);
  long long v27 = (char *)v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100006560(&qword_1001994C8);
  uint64_t v29 = v28 - 8;
  __chkstk_darwin(v28);
  long long v91 = (char *)v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100006560(&qword_1001994D0);
  __chkstk_darwin(v98);
  uint64_t v94 = (uint64_t)v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100006560(&qword_1001994D8);
  __chkstk_darwin(v32 - 8);
  uint64_t v96 = (char *)v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100006560(&qword_1001994E0) - 8;
  uint64_t v34 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v99);
  uint64_t v100 = (uint64_t)v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v34);
  uint64_t v93 = (uint64_t)v86 - v37;
  __chkstk_darwin(v36);
  uint64_t v95 = (uint64_t)v86 - v38;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)();
  static MapCameraPosition.camera(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v89);
  uint64_t v39 = v87;
  static Binding.constant(_:)();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v14, v39);
  uint64_t v40 = type metadata accessor for MapCameraBounds();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v92, 1, 1, v40);
  static MapInteractionModes.all.getter();
  Map.init<>(position:bounds:interactionModes:scope:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 1;
  uint64_t v43 = v90;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v19, v90);
  double v44 = (uint64_t *)&v23[*(int *)(v21 + 44)];
  uint64_t *v44 = KeyPath;
  v44[1] = (uint64_t)sub_10002FB20;
  v44[2] = v42;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v43);
  LOBYTE(KeyPath) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  sub_1000066D4((uint64_t)v23, (uint64_t)v27, &qword_1001994B8);
  uint64_t v53 = &v27[*(int *)(v25 + 44)];
  *uint64_t v53 = KeyPath;
  *((void *)v53 + 1) = v46;
  *((void *)v53 + 2) = v48;
  *((void *)v53 + 3) = v50;
  *((void *)v53 + 4) = v52;
  v53[40] = 0;
  sub_1000067DC((uint64_t)v23, &qword_1001994B8);
  uint64_t v54 = v101;
  uint64_t v55 = &v101[*(int *)(v102 + 28)];
  uint64_t v56 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v57 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 104))(v55, v56, v57);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v54 = _Q0;
  uint64_t v63 = (uint64_t)v91;
  uint64_t v64 = (uint64_t)&v91[*(int *)(v29 + 44)];
  sub_10002FB38((uint64_t)v54, v64, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v64 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v27, v63, &qword_1001994C0);
  sub_10002FBA0((uint64_t)v54, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC((uint64_t)v27, &qword_1001994C0);
  uint64_t v65 = v107;
  LOBYTE(v56) = *((unsigned char *)v107 + 48);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v66 = v94;
  sub_1000066D4(v63, v94, &qword_1001994C8);
  uint64_t v67 = (_OWORD *)(v66 + *(int *)(v98 + 36));
  long long v68 = v109;
  *uint64_t v67 = v108;
  v67[1] = v68;
  v67[2] = v110;
  sub_1000067DC(v63, &qword_1001994C8);
  sub_10002FC00(&qword_1001994E8, &qword_1001994D0, (void (*)(void))sub_10002FC7C);
  uint64_t v69 = (uint64_t)v96;
  View.accessibility(hidden:)();
  sub_1000067DC(v66, &qword_1001994D0);
  uint64_t v70 = v93;
  sub_1000066D4(v69, v93, &qword_1001994D8);
  *(unsigned char *)(v70 + *(int *)(v99 + 44)) = 1;
  sub_1000067DC(v69, &qword_1001994D8);
  uint64_t v71 = v95;
  sub_10001D6D8(v70, v95, &qword_1001994E0);
  long long v72 = *v65;
  long long v112 = v65[1];
  long long v73 = v112;
  long long v113 = v72;
  uint64_t v75 = *((void *)v65 + 4);
  uint64_t v111 = *((void *)v65 + 5);
  uint64_t v74 = v111;
  int v76 = v103;
  _OWORD *v103 = v72;
  v76[1] = v73;
  *((void *)v76 + 4) = v75;
  *((void *)v76 + 5) = v74;
  *((unsigned char *)v76 + 48) = v56;
  uint64_t v77 = (uint64_t *)((char *)v76 + *(int *)(v104 + 36));
  uint64_t v78 = (uint64_t)v76;
  *uint64_t v77 = swift_getKeyPath();
  sub_100006560(&qword_100198940);
  swift_storeEnumTagMultiPayload();
  uint64_t v79 = v105;
  sub_10002F964(v78, v105);
  uint64_t v80 = v71;
  uint64_t v81 = v100;
  sub_1000066D4(v71, v100, &qword_1001994E0);
  sub_10002FB38(v79, v78, type metadata accessor for HeaderText);
  uint64_t v82 = v106;
  sub_1000066D4(v81, v106, &qword_1001994E0);
  uint64_t v83 = sub_100006560(&qword_100199520);
  sub_10002FB38(v78, v82 + *(int *)(v83 + 48), type metadata accessor for HeaderText);
  uint64_t v84 = v82 + *(int *)(v83 + 64);
  *(void *)uint64_t v84 = 0;
  *(unsigned char *)(v84 + 8) = 1;
  sub_10002FE0C((uint64_t)&v113);
  sub_10002FE0C((uint64_t)&v112);
  sub_10002FE38((uint64_t)&v111);
  sub_10002FBA0(v79, type metadata accessor for HeaderText);
  sub_1000067DC(v80, &qword_1001994E0);
  sub_10002FBA0(v78, type metadata accessor for HeaderText);
  return sub_1000067DC(v81, &qword_1001994E0);
}

uint64_t sub_10002DCE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100006560(&qword_100199490);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = *(_OWORD *)(v1 + 48);
  v12[2] = *(_OWORD *)(v1 + 32);
  long long v13 = v6;
  uint64_t v14 = *(void *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v7;
  uint64_t v8 = static VerticalAlignment.top.getter();
  uint64_t v9 = 0x4020000000000000;
  if ((v13 & 1) == 0) {
    uint64_t v9 = 0x4024000000000000;
  }
  *(void *)uint64_t v5 = v8;
  *((void *)v5 + 1) = v9;
  v5[16] = 0;
  uint64_t v10 = sub_100006560(&qword_100199498);
  sub_10002D1C4(v12, (uint64_t)&v5[*(int *)(v10 + 44)]);
  return sub_10001D6D8((uint64_t)v5, a1, &qword_100199490);
}

uint64_t sub_10002DDC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for HeaderText(uint64_t a1)
{
  return sub_10002DE00(a1, qword_100199580);
}

uint64_t sub_10002DE00(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10002DE38()
{
  unint64_t result = qword_100199428;
  if (!qword_100199428)
  {
    sub_10000650C(&qword_100199420);
    sub_10002DEB4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199428);
  }
  return result;
}

unint64_t sub_10002DEB4()
{
  unint64_t result = qword_100199430;
  if (!qword_100199430)
  {
    sub_10000650C(&qword_100199438);
    sub_10002FC00(&qword_100199440, &qword_100199448, (void (*)(void))sub_10002DF5C);
    sub_10002DFFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199430);
  }
  return result;
}

unint64_t sub_10002DF5C()
{
  unint64_t result = qword_100199450;
  if (!qword_100199450)
  {
    sub_10000650C(&qword_100199458);
    sub_100010484(&qword_100199460, &qword_100199468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199450);
  }
  return result;
}

unint64_t sub_10002DFFC()
{
  unint64_t result = qword_100199470;
  if (!qword_100199470)
  {
    sub_10000650C(&qword_100199478);
    sub_10002E09C();
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199470);
  }
  return result;
}

unint64_t sub_10002E09C()
{
  unint64_t result = qword_100199480;
  if (!qword_100199480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199480);
  }
  return result;
}

uint64_t sub_10002E0F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v62 = v2;
  __chkstk_darwin(v2);
  char v60 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HeaderText(0);
  __chkstk_darwin(v6);
  uint64_t v54 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_1001989F0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v15 - 8);
  uint64_t v48 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v47 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v52 = sub_100006560(&qword_1001995D8);
  __chkstk_darwin(v52);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100006560(&qword_1001995E0);
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v51 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100006560(&qword_1001995E8);
  __chkstk_darwin(v26 - 8);
  uint64_t v50 = (char *)&v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = static HorizontalAlignment.leading.getter();
  uint64_t v59 = v1;
  sub_10001CA34((uint64_t)v22);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v19, enum case for UserInterfaceSizeClass.compact(_:), v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v19, 0, 1, v8);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000066D4((uint64_t)v22, (uint64_t)v14, &qword_100198948);
  sub_1000066D4((uint64_t)v19, v28, &qword_100198948);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v14, 1, v8) == 1)
  {
    sub_1000067DC((uint64_t)v19, &qword_100198948);
    sub_1000067DC((uint64_t)v22, &qword_100198948);
    if (v29(v28, 1, v8) == 1)
    {
      sub_1000067DC((uint64_t)v14, &qword_100198948);
      uint64_t v30 = v59;
      uint64_t v31 = v54;
      sub_10002FB38(v59, v54, type metadata accessor for HeaderText);
LABEL_8:
      sub_10002FBA0(v31, type metadata accessor for HeaderText);
      uint64_t v36 = 0x3FF0000000000000;
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  sub_1000066D4((uint64_t)v14, v48, &qword_100198948);
  if (v29(v28, 1, v8) == 1)
  {
    sub_1000067DC((uint64_t)v19, &qword_100198948);
    sub_1000067DC((uint64_t)v22, &qword_100198948);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v48, v8);
LABEL_6:
    sub_1000067DC((uint64_t)v14, &qword_1001989F0);
    uint64_t v30 = v59;
    uint64_t v31 = v54;
    sub_10002FB38(v59, v54, type metadata accessor for HeaderText);
    goto LABEL_9;
  }
  uint64_t v32 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v47, v28, v8);
  sub_100030D60((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  uint64_t v33 = v48;
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v9 + 8);
  v35(v32, v8);
  sub_1000067DC((uint64_t)v19, &qword_100198948);
  sub_1000067DC((uint64_t)v22, &qword_100198948);
  v35((char *)v33, v8);
  sub_1000067DC((uint64_t)v14, &qword_100198948);
  uint64_t v30 = v59;
  uint64_t v31 = v54;
  sub_10002FB38(v59, v54, type metadata accessor for HeaderText);
  if (v34) {
    goto LABEL_8;
  }
LABEL_9:
  int v37 = *(unsigned __int8 *)(v31 + 48);
  sub_10002FBA0(v31, type metadata accessor for HeaderText);
  uint64_t v36 = 0x4014000000000000;
  if (v37) {
    uint64_t v36 = 0x3FF0000000000000;
  }
LABEL_11:
  *(void *)uint64_t v24 = v49;
  *((void *)v24 + 1) = v36;
  unsigned char v24[16] = 0;
  uint64_t v38 = sub_100006560(&qword_1001995F0);
  sub_10002E950(v30, (uint64_t)&v24[*(int *)(v38 + 44)]);
  uint64_t v39 = v56;
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v40 = sub_100010484(&qword_1001995F8, &qword_1001995D8);
  uint64_t v42 = v51;
  uint64_t v41 = v52;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v58);
  sub_1000067DC((uint64_t)v24, &qword_1001995D8);
  uint64_t v43 = v60;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v64 = v41;
  uint64_t v65 = v40;
  swift_getOpaqueTypeConformance2();
  uint64_t v44 = (uint64_t)v50;
  uint64_t v45 = v55;
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v45);
  return sub_10001D6D8(v44, v63, &qword_1001995E8);
}

uint64_t sub_10002E950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v141 = a2;
  uint64_t v139 = sub_100006560(&qword_100199600);
  uint64_t v137 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  v149 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_100006560(&qword_100199608);
  __chkstk_darwin(v136);
  uint64_t v140 = (uint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v135 = (char *)&v115 - v6;
  __chkstk_darwin(v7);
  uint64_t v138 = (uint64_t)&v115 - v8;
  uint64_t v148 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148 - 8);
  long long v117 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100006560(&qword_1001989F0);
  __chkstk_darwin(v145);
  uint64_t v134 = (uint64_t)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v130 = (uint64_t)&v115 - v12;
  uint64_t v13 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v131 = (char *)&v115 - v17;
  __chkstk_darwin(v18);
  uint64_t v132 = (uint64_t)&v115 - v19;
  __chkstk_darwin(v20);
  uint64_t v115 = (uint64_t)&v115 - v21;
  __chkstk_darwin(v22);
  uint64_t v144 = (uint64_t)&v115 - v23;
  __chkstk_darwin(v24);
  uint64_t v127 = (uint64_t)&v115 - v25;
  uint64_t v124 = sub_100006560(&qword_100199610);
  __chkstk_darwin(v124);
  uint64_t v27 = (uint64_t *)((char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v28 - 8);
  long long v126 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100006560(&qword_100199620);
  __chkstk_darwin(v123);
  uint64_t v31 = (char *)&v115 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_100006560(&qword_100199628);
  __chkstk_darwin(v125);
  uint64_t v142 = (uint64_t)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100006560(&qword_100199630);
  __chkstk_darwin(v129);
  uint64_t v133 = (uint64_t)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v128 = (uint64_t)&v115 - v35;
  __chkstk_darwin(v36);
  uint64_t v146 = (uint64_t)&v115 - v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v38 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v40 = v39;
  char v42 = v41;
  uint64_t v143 = a1;
  int v43 = *(unsigned __int8 *)(a1 + 48);
  long long v116 = v15;
  if (v43 == 1) {
    static Font.Weight.regular.getter();
  }
  else {
    static Font.Weight.semibold.getter();
  }
  uint64_t v44 = Text.fontWeight(_:)();
  uint64_t v46 = v45;
  unsigned int v122 = v47;
  uint64_t v49 = v48;
  sub_1000065A4(v38, v40, v42 & 1);
  swift_bridgeObjectRelease();
  if (v43)
  {
    uint64_t v50 = type metadata accessor for Text.Case();
    uint64_t v51 = (uint64_t)v126;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v126, 1, 1, v50);
  }
  else
  {
    uint64_t v52 = enum case for Text.Case.uppercase(_:);
    uint64_t v53 = type metadata accessor for Text.Case();
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v51 = (uint64_t)v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v126, v52, v53);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000066D4(v51, (uint64_t)v27 + *(int *)(v124 + 28), &qword_100199618);
  *uint64_t v27 = KeyPath;
  sub_1000066D4((uint64_t)v27, (uint64_t)&v31[*(int *)(v123 + 36)], &qword_100199610);
  *(void *)uint64_t v31 = v44;
  *((void *)v31 + 1) = v46;
  char v56 = v122;
  char v57 = v122 & 1;
  v31[16] = v122 & 1;
  *((void *)v31 + 3) = v49;
  sub_100010924(v44, v46, v56 & 1);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v27, &qword_100199610);
  sub_1000067DC(v51, &qword_100199618);
  sub_1000065A4(v44, v46, v57);
  swift_bridgeObjectRelease();
  uint64_t v58 = v142;
  sub_1000066D4((uint64_t)v31, v142, &qword_100199620);
  *(void *)(v58 + *(int *)(v125 + 36)) = 0x3FE0000000000000;
  sub_1000067DC((uint64_t)v31, &qword_100199620);
  uint64_t v59 = v143;
  int v119 = *(unsigned __int8 *)(v143 + 48);
  uint64_t v118 = static Font.caption2.getter();
  uint64_t v60 = type metadata accessor for HeaderText(0);
  uint64_t v61 = v127;
  uint64_t v125 = v59 + *(int *)(v60 + 28);
  sub_10001CA34(v127);
  uint64_t v62 = v147;
  uint64_t v63 = *(void (**)(void))(v147 + 104);
  uint64_t v64 = v144;
  unsigned int v122 = enum case for UserInterfaceSizeClass.compact(_:);
  uint64_t v65 = v148;
  uint64_t v124 = v147 + 104;
  long long v121 = (void (*)(char *, void, uint64_t))v63;
  v63(v144);
  uint64_t v66 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56);
  uint64_t v123 = v62 + 56;
  long long v120 = v66;
  v66(v64, 0, 1, v65);
  uint64_t v67 = v130;
  uint64_t v68 = v130 + *(int *)(v145 + 48);
  sub_1000066D4(v61, v130, &qword_100198948);
  sub_1000066D4(v64, v68, &qword_100198948);
  uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  int v70 = v69(v67, 1, v65);
  long long v126 = (char *)v69;
  if (v70 == 1)
  {
    sub_1000067DC(v64, &qword_100198948);
    sub_1000067DC(v61, &qword_100198948);
    if (v69(v68, 1, v65) == 1)
    {
      sub_1000067DC(v67, &qword_100198948);
LABEL_14:
      uint64_t v77 = static Font.caption2.getter();
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v71 = v115;
  sub_1000066D4(v67, v115, &qword_100198948);
  if (v69(v68, 1, v65) == 1)
  {
    sub_1000067DC(v144, &qword_100198948);
    sub_1000067DC(v61, &qword_100198948);
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v71, v65);
LABEL_12:
    sub_1000067DC(v67, &qword_1001989F0);
    goto LABEL_15;
  }
  uint64_t v72 = v147;
  uint64_t v73 = v67;
  uint64_t v74 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 32))(v117, v68, v65);
  sub_100030D60((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v76 = *(void (**)(char *, uint64_t))(v72 + 8);
  v76(v74, v65);
  sub_1000067DC(v144, &qword_100198948);
  sub_1000067DC(v61, &qword_100198948);
  v76((char *)v71, v65);
  uint64_t v58 = v142;
  uint64_t v59 = v143;
  sub_1000067DC(v73, &qword_100198948);
  if (v75) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v77 = static Font.footnote.getter();
LABEL_16:
  uint64_t v78 = v77;
  uint64_t v79 = v128;
  sub_1000066D4(v58, v128, &qword_100199628);
  uint64_t v80 = v79 + *(int *)(v129 + 36);
  *(unsigned char *)uint64_t v80 = v119;
  *(void *)(v80 + 8) = v118;
  *(void *)(v80 + 16) = v78;
  sub_1000067DC(v58, &qword_100199628);
  sub_10001D6D8(v79, v146, &qword_100199630);
  uint64_t v81 = *(void *)(v59 + 8);
  uint64_t v150 = *(void *)v59;
  uint64_t v151 = v81;
  sub_10002374C();
  swift_bridgeObjectRetain();
  uint64_t v82 = Text.init<A>(_:)();
  uint64_t v84 = v83;
  char v86 = v85;
  LODWORD(v144) = *(unsigned __int8 *)(v59 + 48);
  uint64_t v150 = v82;
  uint64_t v151 = v83;
  char v152 = v85 & 1;
  uint64_t v153 = v87;
  char v154 = 0;
  char v155 = v144 ^ 1;
  if ((v144 ^ 1)) {
    static Font.Weight.bold.getter();
  }
  else {
    static Font.Weight.semibold.getter();
  }
  sub_100006560(&qword_100199638);
  sub_100030BDC();
  View.fontWeight(_:)();
  sub_1000065A4(v82, v84, v86 & 1);
  swift_bridgeObjectRelease();
  uint64_t v88 = static Font.title.getter();
  uint64_t v89 = v132;
  sub_10001CA34(v132);
  uint64_t v90 = (uint64_t)v131;
  uint64_t v91 = v148;
  v121(v131, v122, v148);
  v120(v90, 0, 1, v91);
  uint64_t v92 = v134;
  uint64_t v93 = v134 + *(int *)(v145 + 48);
  sub_1000066D4(v89, v134, &qword_100198948);
  sub_1000066D4(v90, v93, &qword_100198948);
  uint64_t v94 = v126;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v126)(v92, 1, v91) != 1)
  {
    uint64_t v95 = (uint64_t)v116;
    sub_1000066D4(v92, (uint64_t)v116, &qword_100198948);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v93, 1, v91) != 1)
    {
      uint64_t v96 = v90;
      uint64_t v97 = v147;
      uint64_t v98 = v117;
      (*(void (**)(char *, uint64_t, uint64_t))(v147 + 32))(v117, v93, v91);
      sub_100030D60((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v100 = *(void (**)(char *, uint64_t))(v97 + 8);
      v100(v98, v91);
      sub_1000067DC(v96, &qword_100198948);
      sub_1000067DC(v89, &qword_100198948);
      v100((char *)v95, v91);
      sub_1000067DC(v92, &qword_100198948);
      if (v99) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v101 = static Font.subheadline.getter();
      goto LABEL_28;
    }
    sub_1000067DC(v90, &qword_100198948);
    sub_1000067DC(v89, &qword_100198948);
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v95, v91);
LABEL_24:
    sub_1000067DC(v92, &qword_1001989F0);
    goto LABEL_27;
  }
  sub_1000067DC(v90, &qword_100198948);
  sub_1000067DC(v89, &qword_100198948);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v93, 1, v91) != 1) {
    goto LABEL_24;
  }
  sub_1000067DC(v92, &qword_100198948);
LABEL_26:
  uint64_t v101 = static Font.footnote.getter();
LABEL_28:
  uint64_t v102 = v101;
  uint64_t v103 = v137;
  uint64_t v104 = (uint64_t)v135;
  uint64_t v105 = v149;
  uint64_t v106 = v139;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v135, v149, v139);
  uint64_t v107 = v104 + *(int *)(v136 + 36);
  *(unsigned char *)uint64_t v107 = v144;
  *(void *)(v107 + 8) = v88;
  *(void *)(v107 + 16) = v102;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v106);
  uint64_t v108 = v138;
  sub_10001D6D8(v104, v138, &qword_100199608);
  uint64_t v109 = v146;
  uint64_t v110 = v133;
  sub_1000066D4(v146, v133, &qword_100199630);
  uint64_t v111 = v140;
  sub_1000066D4(v108, v140, &qword_100199608);
  uint64_t v112 = v141;
  sub_1000066D4(v110, v141, &qword_100199630);
  uint64_t v113 = sub_100006560(&qword_100199648);
  sub_1000066D4(v111, v112 + *(int *)(v113 + 48), &qword_100199608);
  sub_1000067DC(v108, &qword_100199608);
  sub_1000067DC(v109, &qword_100199630);
  sub_1000067DC(v111, &qword_100199608);
  return sub_1000067DC(v110, &qword_100199630);
}

uint64_t sub_10002F964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HeaderText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F9D0()
{
  swift_retain();

  return swift_retain();
}

uint64_t sub_10002FA14()
{
  swift_release();

  return swift_release();
}

uint64_t sub_10002FA4C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10002FA7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10002FAAC()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10002FAD4()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_10002FAFC(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10002FB10()
{
  return swift_deallocObject();
}

unsigned char *sub_10002FB20(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_10002FB38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002FBA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002FC00(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002FC7C()
{
  unint64_t result = qword_1001994F0;
  if (!qword_1001994F0)
  {
    sub_10000650C(&qword_1001994C8);
    sub_10002FC00(&qword_1001994F8, &qword_1001994C0, (void (*)(void))sub_10002FD48);
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001994F0);
  }
  return result;
}

unint64_t sub_10002FD48()
{
  unint64_t result = qword_100199500;
  if (!qword_100199500)
  {
    sub_10000650C(&qword_1001994B8);
    sub_100010484(&qword_100199508, &qword_1001994B0);
    sub_100010484(&qword_100199510, &qword_100199518);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199500);
  }
  return result;
}

uint64_t sub_10002FE0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002FE38(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002FE64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (uint64_t *)((char *)a2 + v7);
    uint64_t v9 = (void *)(a1 + v7);
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_100006560(&qword_100198948);
        memcpy(v9, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v9, v8, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v9 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100030060(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_100030198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a2 + v6);
  uint64_t v8 = (void *)(a1 + v6);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_100006560(&qword_100198948);
      memcpy(v8, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v8, v7, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
  }
  else
  {
    *uint64_t v8 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100030344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_1000067DC(a1 + v6, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10003053C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_100006560(&qword_100198948);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000306CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_1000067DC(a1 + v8, &qword_100198940);
    uint64_t v11 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        uint64_t v14 = sub_100006560(&qword_100198948);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000308A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000308B8);
}

uint64_t sub_1000308B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198950);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003096C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030980);
}

uint64_t sub_100030980(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198950);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100030A2C()
{
  sub_10001B760();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_100030ADC()
{
  unint64_t result = qword_1001995C0;
  if (!qword_1001995C0)
  {
    sub_10000650C(&qword_1001993F8);
    sub_100010484(&qword_1001995C8, &qword_1001993F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001995C0);
  }
  return result;
}

uint64_t sub_100030B7C()
{
  return sub_100010484(&qword_1001995D0, &qword_100199490);
}

uint64_t sub_100030BB8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100030BDC()
{
  unint64_t result = qword_100199640;
  if (!qword_100199640)
  {
    sub_10000650C(&qword_100199638);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199640);
  }
  return result;
}

unint64_t sub_100030C54()
{
  unint64_t result = qword_100199650;
  if (!qword_100199650)
  {
    sub_10000650C(&qword_1001995E8);
    sub_10000650C(&qword_1001995D8);
    sub_100010484(&qword_1001995F8, &qword_1001995D8);
    swift_getOpaqueTypeConformance2();
    sub_100030D60((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100199650);
  }
  return result;
}

uint64_t sub_100030D60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperWatchFaceController()
{
  return &type metadata for WallpaperWatchFaceController;
}

uint64_t sub_100030DB8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v1[17] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v1[18] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100030EB4;
  return sub_1000313CC(v4, a1);
}

uint64_t sub_100030EB4()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000312A8;
  }
  else {
    uint64_t v2 = sub_100030FC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100030FC8()
{
  id v1 = [objc_allocWithZone((Class)CLKWatchFaceLibrary) init];
  v0[20] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[21] = v3;
  v0[2] = v0;
  v0[3] = sub_1000310F0;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100031BDC;
  v0[13] = &unk_10018DCD0;
  v0[14] = v5;
  [v1 addWatchFaceAtURL:v4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000310F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_10003130C;
  }
  else {
    uint64_t v2 = sub_100031200;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100031200()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);

  sub_100032F50(v2, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000312A8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003130C()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = (void *)v0[20];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  swift_willThrow();

  sub_100032F50(v3, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000313CC(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for URL();
  void v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000314D4, 0, 0);
}

uint64_t sub_1000314D4()
{
  uint64_t v1 = (void *)v0[5];
  id v2 = [self defaultSessionConfiguration];
  v0[11] = [self sessionWithConfiguration:v2];

  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_100023118(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100031640;
  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  return NSURLSession.download(from:delegate:)(v6, v7, 0);
}

uint64_t sub_100031640(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[13] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[9];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = sub_100031B28;
  }
  else
  {

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v4[14] = v9;
    v4[15] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v8 = sub_100031818;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100031818()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_100032CE4(*(void *)(v0 + 64));
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 48);
  if (v2)
  {
    uint64_t v4 = *(void **)(v0 + 88);
    (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 80), *(void *)(v0 + 48));

LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_4;
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 64);
  URL.appendingPathComponent(_:isDirectory:)();
  v7(v8, v3);
  uint64_t v9 = self;
  id v10 = [v9 defaultManager];
  URL._bridgeToObjectiveC()(v11);
  uint64_t v13 = v12;
  URL._bridgeToObjectiveC()(v14);
  uint64_t v16 = v15;
  *(void *)(v0 + 16) = 0;
  LODWORD(v7) = [v10 copyItemAtURL:v13 toURL:v15 error:v0 + 16];

  uint64_t v17 = *(void **)(v0 + 16);
  if (!v7)
  {
    id v23 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v24 = [v9 defaultManager];
    URL._bridgeToObjectiveC()(v25);
    uint64_t v27 = v26;
    *(void *)(v0 + 24) = 0;
    unsigned int v28 = [v24 removeItemAtURL:v26 error:v0 + 24];

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 80);
    uint64_t v30 = *(void **)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 48);
    uint64_t v33 = *(void **)(v0 + 24);
    uint64_t v34 = *(void *)(v0 + 32);
    if (v28)
    {
      id v35 = v33;
      swift_willThrow();
    }
    else
    {
      id v36 = v33;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    v29(v34, v32);
    v29(v31, v32);
    goto LABEL_3;
  }
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void **)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 48);
  id v22 = v17;
  v18(v19, v21);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
  return v5();
}

uint64_t sub_100031B28()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100031BDC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100006560(&qword_100199670);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_100031C74(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_100031DA0, 0, 0);
}

uint64_t sub_100031DA0()
{
  uint64_t v1 = (void *)v0[5];
  id v2 = [self defaultSessionConfiguration];
  v0[14] = [self sessionWithConfiguration:v2];

  uint64_t v3 = v1[3];
  v0[15] = v3;
  uint64_t v4 = v1[4];
  v0[16] = v4;
  v0[17] = sub_100023118(v1, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  v0[18] = v5;
  v0[19] = (v4 + 24) & 0xFFFFFFFFFFFFLL | 0xA074000000000000;
  v5(v3, v4);
  id v6 = (void *)swift_task_alloc();
  v0[20] = v6;
  *id v6 = v0;
  v6[1] = sub_100031F28;
  uint64_t v8 = v0[12];
  uint64_t v7 = v0[13];
  return NSURLSession.download(from:delegate:)(v7, v8, 0);
}

uint64_t sub_100031F28(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[21] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[12];
  uint64_t v6 = v4[7];
  uint64_t v7 = v4[6];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = sub_100032C04;
  }
  else
  {

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v4[22] = v9;
    v4[23] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v8 = sub_100032100;
  }
  return _swift_task_switch(v8, 0, 0);
}

uint64_t sub_100032100()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  sub_100032CE4(*(void *)(v0 + 80));
  if (v1)
  {
    id v2 = *(void **)(v0 + 112);
    (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 104), *(void *)(v0 + 48));

LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_4:
    return v3();
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 48);
  (*(void (**)(void, void))(v0 + 144))(*(void *)(v0 + 120), *(void *)(v0 + 128));
  URL.lastPathComponent.getter();
  v5(v7, v8);
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  v5(v6, v8);
  uint64_t v9 = self;
  *(void *)(v0 + 192) = v9;
  id v10 = [v9 defaultManager];
  URL._bridgeToObjectiveC()(v11);
  uint64_t v13 = v12;
  URL._bridgeToObjectiveC()(v14);
  uint64_t v16 = v15;
  *(void *)(v0 + 16) = 0;
  LODWORD(v7) = [v10 copyItemAtURL:v13 toURL:v15 error:v0 + 16];

  uint64_t v17 = *(void **)(v0 + 16);
  if (!v7)
  {
    id v21 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v22 = [*(id *)(v0 + 192) defaultManager];
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    *(void *)(v0 + 24) = 0;
    unsigned int v26 = [v22 removeItemAtURL:v24 error:v0 + 24];

    uint64_t v27 = *(void **)(v0 + 24);
    unsigned int v28 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 104);
    uint64_t v29 = *(void **)(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 48);
    if (v26)
    {
      id v33 = v27;
      swift_willThrow();
    }
    else
    {
      id v34 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    v28(v31, v32);
    v28(v30, v32);
    goto LABEL_3;
  }
  id v18 = v17;
  uint64_t v19 = Data.init(contentsOf:options:)();
  *(void *)(v0 + 200) = v19;
  *(void *)(v0 + 208) = v20;
  uint64_t v35 = v19;
  unint64_t v36 = v20;
  id v37 = objc_allocWithZone((Class)UIImage);
  sub_1000332B8(v35, v36);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v39 = [v37 initWithData:isa];
  *(void *)(v0 + 216) = v39;
  sub_100033310(v35, v36);

  if (!v39)
  {
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v41 = *(void *)(v0 + 88);
    uint64_t v43 = *(void *)(v0 + 56);
    uint64_t v42 = *(void *)(v0 + 64);
    uint64_t v44 = *(void *)(v0 + 48);
    uint64_t v45 = type metadata accessor for Logger();
    sub_10003345C(v45, (uint64_t)qword_1001AA440);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v41, v44);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v50 = *(void *)(v0 + 64);
    uint64_t v51 = *(void *)(v0 + 48);
    if (v48)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      sub_100033494();
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_10004D828(v53, v54, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v50, v51);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to create image from %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100033310(v35, v36);
    }
    else
    {
      sub_100033310(v35, v36);
      v49(v50, v51);
    }
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v56 = *(void *)(v0 + 104);
    char v57 = *(void **)(v0 + 112);
    uint64_t v58 = *(void *)(v0 + 88);
    uint64_t v59 = *(void *)(v0 + 48);
    sub_100032F50(v58, "Failed to delete wallpaper at %s");

    v55(v58, v59);
    v55(v56, v59);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_4;
  }
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_1000327AC;
  v40[16] = v39;
  return _swift_task_switch(sub_10003350C, 0, 0);
}

uint64_t sub_1000327AC()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_100032A24;
  }
  else {
    id v2 = sub_1000328EC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000328EC()
{
  unint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);

  sub_100033310(v2, v1);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_100032F50(v6, "Failed to delete wallpaper at %s");

  v3(v6, v7);
  v3(v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100032A24()
{
  unint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 88);

  sub_100033310(v2, v1);
  sub_100032F50(v3, "Failed to delete wallpaper at %s");
  id v4 = [*(id *)(v0 + 192) defaultManager];
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  *(void *)(v0 + 24) = 0;
  unsigned int v8 = [v4 removeItemAtURL:v6 error:v0 + 24];

  uint64_t v9 = *(void **)(v0 + 24);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v11 = *(void **)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 48);
  if (v8)
  {
    id v15 = v9;
    swift_willThrow();
  }
  else
  {
    id v16 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  v10(v13, v14);
  v10(v12, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100032C04()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100032CE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unsigned int v8 = (char *)&v19 - v7;
  static URL.temporaryDirectory.getter();
  id v9 = [self processInfo];
  id v10 = [v9 globallyUniqueString];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  id v12 = [self defaultManager];
  URL._bridgeToObjectiveC()(v13);
  id v15 = v14;
  id v20 = 0;
  LOBYTE(v10) = [v12 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:&v20];

  id v16 = v20;
  if (v10)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v8, v2);
    return v16;
  }
  else
  {
    id v18 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
  }
}

void sub_100032F50(uint64_t a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self defaultManager];
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  id v27 = 0;
  unsigned int v12 = [v8 removeItemAtURL:v10 error:&v27];

  id v13 = v27;
  if (v12)
  {
    id v14 = v13;
  }
  else
  {
    uint64_t v25 = (uint64_t)v27;
    id v15 = v27;
    uint64_t v16 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10003345C(v17, (uint64_t)qword_1001AA440);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      id v21 = (void *)swift_slowAlloc();
      id v24 = a2;
      id v27 = v21;
      *(_DWORD *)id v20 = 136315138;
      uint64_t v25 = v16;
      sub_100033494();
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = sub_10004D828(v22, v23, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v24, v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    swift_errorRelease();
  }
}

uint64_t sub_1000332B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100033310(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_100033368(uint64_t a1)
{
  id v1 = [self creationRequestForAssetFromImage:a1];
}

uint64_t sub_1000333BC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(a1);
  }
  if (!a3)
  {
    __break(1u);
    return _swift_continuation_throwingResume(a1);
  }
  sub_100006560(&qword_100199670);
  uint64_t v5 = swift_allocError();
  *uint64_t v6 = a3;
  id v7 = a3;

  return _swift_continuation_throwingResumeWithError(v3, v5);
}

uint64_t sub_10003345C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_100033494()
{
  unint64_t result = qword_100199660;
  if (!qword_100199660)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100199660);
  }
  return result;
}

uint64_t sub_1000334EC(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return _swift_task_switch(sub_10003350C, 0, 0);
}

uint64_t sub_10003350C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0 + 10;
  uint64_t v4 = (void *)v1[16];
  id v5 = [self sharedPhotoLibrary];
  v1[17] = v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  v1[14] = sub_1000338E8;
  v1[15] = v6;
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 1107296256;
  v1[12] = sub_10013B904;
  v1[13] = &unk_10018DC90;
  id v7 = _Block_copy(v3);
  v1[18] = v7;
  id v8 = v4;
  swift_release();
  v1[2] = v1;
  v1[3] = sub_1000336B8;
  uint64_t v9 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_1000333BC;
  v1[13] = &unk_10018DCB8;
  v1[14] = v9;
  [v5 performChanges:v7 completionHandler:v3];
  return _swift_continuation_await(v2);
}

uint64_t sub_1000336B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100033834;
  }
  else {
    uint64_t v2 = sub_1000337C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000337C8()
{
  uint64_t v1 = *(const void **)(v0 + 144);

  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100033834()
{
  uint64_t v1 = (const void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  _Block_release(v1);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000338B0()
{
  return swift_deallocObject();
}

void sub_1000338E8()
{
  sub_100033368(*(void *)(v0 + 16));
}

uint64_t sub_1000338F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100033900()
{
  return swift_release();
}

uint64_t sub_100033908()
{
  swift_getKeyPath();
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000339B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 176) = a2;
  *(void *)(a1 + 184) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000339F4()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  sub_100023118((void *)(v0 + 32), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  swift_getAssociatedTypeWitness();
  sub_100006560(&qword_1001997C0);
  uint64_t v4 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = 4;
  if (v5 < 4) {
    uint64_t v6 = v5;
  }
  if (v1) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t sub_100033ABC@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  return sub_1000066D4(v3, a1, &qword_1001997A0);
}

uint64_t sub_100033B90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  return sub_1000066D4(v4, a2, &qword_1001997A0);
}

uint64_t sub_100033C64(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100006560(&qword_1001997A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000066D4(a1, (uint64_t)v6, &qword_1001997A0);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v6, &qword_1001997A0);
}

uint64_t sub_100033DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  sub_100035A48(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100033E10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  sub_100023118(v1 + 4, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, __n128))(v4 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17[-1] - v10;
  v5(v3, v4, v9);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v13 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    void v17[3] = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17[4] = AssociatedConformanceWitness;
    sub_100035868(v17);
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_100029A08((uint64_t)v17);
  }
}

void sub_100034058(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v2 + 200);
  swift_getKeyPath();
  v39[0] = v6;
  sub_100035AB0((unint64_t *)&qword_1001997B0, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_1000066D4((uint64_t)(v6 + 7), (uint64_t)v39, &qword_1001997B8);
  uint64_t v7 = v40;
  if (v40)
  {
    sub_100023118(v39, v40);
    uint64_t v8 = dispatch thunk of MusicItem.id.getter();
    uint64_t v7 = v9;
    sub_100029A08((uint64_t)v39);
  }
  else
  {
    sub_1000067DC((uint64_t)v39, &qword_1001997B8);
    uint64_t v8 = 0;
  }
  sub_100023118(a1, a1[3]);
  uint64_t v10 = dispatch thunk of MusicItem.id.getter();
  if (v7)
  {
    if (v8 == v10 && v7 == v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_20:
      uint64_t v22 = v6 + 2;
      uint64_t v23 = v6[5];
      uint64_t v24 = v6[6];
      sub_100023118(v6 + 2, v23);
      switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24))
      {
        case 1u:
          if (qword_100198180 != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          sub_10003345C(v26, (uint64_t)qword_1001AA440);
          id v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "Selected song is loading/buffering.", v29, 2u);
            swift_slowDealloc();
          }

          return;
        case 2u:
          uint64_t v31 = v6[5];
          uint64_t v30 = v6[6];
          sub_100023118(v22, v31);
          (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v31, v30);
          if (qword_100198180 != -1) {
            swift_once();
          }
          uint64_t v32 = type metadata accessor for Logger();
          sub_10003345C(v32, (uint64_t)qword_1001AA440);
          id v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v33, v34))
          {
            uint64_t v35 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pausing playback", v35, 2u);
            swift_slowDealloc();
          }

          uint64_t v19 = *(void *)(v3 + 16);
          uint64_t v20 = *(void *)(v3 + 24);
          uint64_t v21 = 17;
          goto LABEL_18;
        case 3u:
          uint64_t v37 = v6[5];
          uint64_t v36 = v6[6];
          sub_100023118(v22, v37);
          (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v37, v36);
          if (qword_100198180 != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for Logger();
          sub_10003345C(v38, (uint64_t)qword_1001AA440);
          id v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v15, v16)) {
            goto LABEL_17;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          id v18 = "Resuming playback";
          goto LABEL_16;
        default:
          sub_100107950((uint64_t)a1);
          if (qword_100198180 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          sub_10003345C(v25, (uint64_t)qword_1001AA440);
          id v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v15, v16)) {
            goto LABEL_17;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          id v18 = "Player was previously idle/stopped. Restarting playback of same song.";
          goto LABEL_16;
      }
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_20;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_100107950((uint64_t)a1);
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10003345C(v14, (uint64_t)qword_1001AA440);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    id v18 = "Playing new song.";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
  }
LABEL_17:

  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v20 = *(void *)(v3 + 24);
  uint64_t v21 = 16;
LABEL_18:
  sub_1000AC4E4(v19, v20, 8, 11, v21, 0, 3u, a2);
}

uint64_t sub_100034668(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  type metadata accessor for AttributeContainer();
  v2[22] = swift_task_alloc();
  sub_100006560(&qword_1001997A0);
  v2[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AttributedString();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[27] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[28] = v5;
  v2[29] = v4;
  return _swift_task_switch(sub_1000347B8, v5, v4);
}

uint64_t sub_1000347B8()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  sub_100023118(v1 + 4, v2);
  v0[30] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  v0[31] = v4;
  if (v4)
  {
    uint64_t v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    v0[32] = v6;
    sub_10013BA80((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DocumentReadingOptionKey(0);
    sub_100035AB0(&qword_100198360, type metadata accessor for DocumentReadingOptionKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v0[33] = isa;
    swift_bridgeObjectRelease();
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100034A0C;
    uint64_t v8 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100034F48;
    v0[13] = &unk_10018DCE8;
    v0[14] = v8;
    [v5 loadFromHTMLWithString:v6 options:isa completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100034A0C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 272) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 224);
    uint64_t v4 = *(void *)(v1 + 232);
    uint64_t v5 = sub_100034D7C;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v1 + 224);
    uint64_t v4 = *(void *)(v1 + 232);
    uint64_t v5 = sub_100034B24;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100034B24()
{
  uint64_t v2 = (void *)v0[32];
  uint64_t v1 = (void *)v0[33];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[21];
  swift_release();
  uint64_t v9 = (void *)v0[15];
  swift_bridgeObjectRelease();

  id v14 = v9;
  AttributedString.init(_:)();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)swift_task_alloc() = KeyPath;
  swift_getKeyPath();
  swift_task_dealloc();
  v0[18] = v7;
  sub_100035954();
  swift_retain();
  AttributedString.subscript.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
  swift_getKeyPath();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v6;
  v0[19] = v8;
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1000067DC(v6, &qword_1001997A0);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100034D7C()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = v0[25];
  uint64_t v9 = v0[24];
  uint64_t v4 = v0[23];
  uint64_t v5 = v0[21];
  swift_release();
  swift_willThrow();
  swift_errorRelease();

  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v9);
  swift_getKeyPath();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  v0[17] = v5;
  sub_100035AB0(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1000067DC(v4, &qword_1001997A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100034F48(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_100006560(&qword_100199670);
    uint64_t v6 = swift_allocError();
    void *v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for DocumentAttributeKey(0);
      sub_100035AB0(&qword_100198350, type metadata accessor for DocumentAttributeKey);
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = *(void **)(*(void *)(v4 + 64) + 40);
      *uint64_t v11 = a2;
      v11[1] = v10;
      id v12 = a2;
      a1 = v4;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_10003506C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_1000350C8()
{
  swift_bridgeObjectRelease();
  sub_100029A08(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000067DC(v0 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, &qword_1001997A0);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000351A0()
{
  sub_1000350C8();

  return swift_deallocClassInstance();
}

uint64_t sub_1000351F8()
{
  return type metadata accessor for SetlistViewModel();
}

uint64_t type metadata accessor for SetlistViewModel()
{
  uint64_t result = qword_1001996C0;
  if (!qword_1001996C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10003524C()
{
  sub_100035368();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100035368()
{
  if (!qword_1001996D0)
  {
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001996D0);
    }
  }
}

uint64_t sub_1000353C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100035AB0((unint64_t *)&qword_1001997B0, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_1000066D4(v3 + 56, a2, &qword_1001997B8);
}

uint64_t sub_10003548C(uint64_t a1)
{
  sub_1000066D4(a1, (uint64_t)v2, &qword_1001997B8);
  swift_getKeyPath();
  sub_100035AB0((unint64_t *)&qword_1001997B0, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v2, &qword_1001997B8);
}

uint64_t sub_10003557C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  char v13 = sub_100035868((uint64_t *)&v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v13, a3, a6);
  *(void *)(a5 + 80) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 88) = v14;
  *(unsigned char *)(a5 + 96) = v15 & 1;
  *(void *)(a5 + 104) = v16;
  *(void *)(a5 + 112) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 120) = v17;
  *(unsigned char *)(a5 + 128) = v18 & 1;
  *(void *)(a5 + 136) = v19;
  *(void *)(a5 + 144) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(a5 + 152) = v20;
  *(unsigned char *)(a5 + 160) = v21 & 1;
  *(void *)(a5 + 168) = v22;
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  *(void *)(a5 + 192) = 0x4008000000000000;
  if (qword_100198170 != -1) {
    swift_once();
  }
  *(void *)(a5 + 200) = qword_1001AA430;
  uint64_t v23 = a5 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  uint64_t v24 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  swift_retain();
  ObservationRegistrar.init()();
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  sub_1000358CC(&v26, a5 + 32);
  *(unsigned char *)(a5 + 72) = a4 & 1;
  return a5;
}

uint64_t sub_100035754(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  char v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a6);
  return sub_10003557C(a1, a2, (uint64_t)v15, a4, v16, a6, a7);
}

uint64_t *sub_100035868(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000358CC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000358F4()
{
  return sub_100107A84(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100035918()
{
  return sub_100033DA4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100035934()
{
}

unint64_t sub_100035954()
{
  unint64_t result = qword_1001997D0;
  if (!qword_1001997D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001997D0);
  }
  return result;
}

void sub_1000359A8()
{
}

uint64_t sub_1000359D0()
{
  return 8;
}

uint64_t sub_1000359DC()
{
  return swift_release();
}

uint64_t sub_1000359E4(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1000359F4()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_100035A3C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100035A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_1001997A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035AB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100035AF8()
{
  return sub_100035918();
}

double sub_100035B10()
{
  return 0.0;
}

uint64_t sub_100035B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

void sub_100035B20()
{
  sub_1000364F4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100035BD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100035D50();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v11 = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v12 = *(int *)(a3 + 60);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    *(void *)(a1 + 48) = v11;
    swift_retain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = *(int *)(a3 + 64);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *uint64_t v18 = v20;
    v18[1] = v21;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100035D50()
{
  return swift_retain();
}

uint64_t sub_100035D58(uint64_t a1, uint64_t a2)
{
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100035E28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v10 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v11 = *(int *)(a3 + 60);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  *(void *)(a1 + 48) = v10;
  swift_retain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = *(int *)(a3 + 64);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  void *v16 = v18;
  v16[1] = v19;
  swift_retain();
  return a1;
}

uint64_t sub_100035F58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001D0DC();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 60);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_1000067DC(a1 + v9, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = *(int *)(a3 + 64);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  *(void *)(a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  swift_retain();
  swift_release();
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  return a1;
}

uint64_t sub_1000360DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 64)) = *(_OWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_1000361EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001D0DC();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(a3 + 60);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_1000067DC(a1 + v8, qword_100198AA0);
    uint64_t v11 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = *(int *)(a3 + 64);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *v15;
  swift_release();
  *(void *)(v14 + 8) = v15[1];
  return a1;
}

uint64_t sub_100036354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100036368);
}

uint64_t sub_100036368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003641C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100036430);
}

uint64_t sub_100036430(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198648);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for VenueEventView()
{
  return swift_getGenericMetadata();
}

void sub_1000364F4()
{
  if (!qword_100199860)
  {
    type metadata accessor for DismissAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100199860);
    }
  }
}

uint64_t sub_10003654C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100036590(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __n128 v4 = __chkstk_darwin(a1);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *(unsigned char *)(*(void *)(v1 + 32) + 16);
  (*(void (**)(char *, __n128))(v3 + 16))(v6, v4);
  if (v7)
  {
    char v8 = 1;
  }
  else
  {
    sub_1000366B8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    BOOL v9 = sub_100028930();
    swift_release();
    char v8 = !v9;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v8 & 1;
}

uint64_t sub_1000366B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = *((unsigned __int8 *)v2 + 16);
  uint64_t v7 = type metadata accessor for VenueEventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a2(v4, v5, v6, v7, WitnessTable);
}

uint64_t sub_100036748@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v204 = a2;
  long long v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24);
  type metadata accessor for Optional();
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v202 = *(void *)(v4 - 8);
  uint64_t v203 = v4;
  __chkstk_darwin(v4);
  uint64_t v201 = (char *)&v166 - v5;
  uint64_t v222 = a1;
  uint64_t v225 = *(void *)(a1 - 8);
  uint64_t v219 = *(void *)(v225 + 64);
  __chkstk_darwin(v6);
  uint64_t v215 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v223 = (char *)&v166 - v9;
  uint64_t v10 = type metadata accessor for CoordinateSpace();
  uint64_t v220 = *(void *)(v10 - 8);
  v221 = (void (*)(char *, uint64_t, uint64_t))v10;
  __chkstk_darwin(v10);
  uint64_t v218 = (uint64_t)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = type metadata accessor for NavigationPath();
  sub_10000650C(&qword_100199868);
  sub_10000650C(&qword_100199870);
  uint64_t v12 = type metadata accessor for Array();
  v229 = *(void **)(a1 + 40);
  uint64_t v206 = v229[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v249 = v12;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v251 = v14;
  v252 = (void *)WitnessTable;
  uint64_t v253 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v18 = sub_10003DE1C(&qword_100199880, &qword_100199868, (void (*)(void))sub_10003DDEC);
  uint64_t v19 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v267 = sub_10003DF40();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v265 = v19;
  uint64_t v266 = v20;
  uint64_t v264 = swift_getWitnessTable();
  uint64_t v262 = swift_getWitnessTable();
  v263 = &protocol witness table for _PaddingLayout;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v259 = v18;
  uint64_t v260 = v21;
  v261 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  type metadata accessor for LazyVGrid();
  swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for ObservableScrollView();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v249 = v22;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v249 = v22;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v249 = OpaqueTypeMetadata2;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OpaqueTypeConformance2;
  uint64_t v26 = swift_getOpaqueTypeMetadata2();
  uint64_t v27 = sub_10000650C(&qword_1001998D0);
  uint64_t v249 = OpaqueTypeMetadata2;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OpaqueTypeConformance2;
  uint64_t v28 = swift_getOpaqueTypeConformance2();
  uint64_t v29 = sub_10000650C(&qword_1001998D8);
  uint64_t v30 = sub_100010484(&qword_1001998E0, &qword_1001998D8);
  uint64_t v249 = v29;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v30;
  uint64_t v31 = swift_getOpaqueTypeConformance2();
  uint64_t v249 = v26;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v27;
  uint64_t v251 = v28;
  v252 = (void *)v31;
  uint64_t v216 = swift_getOpaqueTypeMetadata2();
  uint64_t v249 = v26;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v27;
  uint64_t v251 = v28;
  v252 = (void *)v31;
  uint64_t v173 = swift_getOpaqueTypeConformance2();
  uint64_t v32 = type metadata accessor for NavigationStack();
  uint64_t v217 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v171 = (char *)&v166 - v33;
  sub_10000650C(&qword_1001998E8);
  uint64_t v168 = v32;
  uint64_t v34 = type metadata accessor for ModifiedContent();
  uint64_t v178 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v166 - v35);
  sub_10000650C(&qword_1001998F0);
  uint64_t v172 = v34;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v184 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v207 = (char *)&v166 - v37;
  uint64_t v38 = type metadata accessor for EventView();
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v167 = v39;
  uint64_t v40 = sub_100010484(&qword_1001998F8, &qword_1001998E8);
  uint64_t v257 = v39;
  uint64_t v258 = v40;
  uint64_t v200 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v170 = v41;
  uint64_t v42 = sub_100010484(&qword_100199900, &qword_1001998F0);
  uint64_t v255 = v41;
  uint64_t v256 = v42;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = v38;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v249 = v36;
  v250 = v16;
  uint64_t v176 = v43;
  uint64_t v177 = v36;
  uint64_t v46 = v16;
  uint64_t v251 = v44;
  v252 = (void *)v43;
  uint64_t v174 = v44;
  uint64_t v175 = v45;
  uint64_t v47 = v206;
  uint64_t v253 = v206;
  uint64_t v254 = v45;
  uint64_t v209 = swift_getOpaqueTypeMetadata2();
  uint64_t v185 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  v211 = (char *)&v166 - v48;
  uint64_t v49 = type metadata accessor for FilterView();
  uint64_t v249 = v36;
  v250 = v46;
  uint64_t v251 = v44;
  v252 = (void *)v43;
  uint64_t v253 = v47;
  uint64_t v254 = v45;
  uint64_t v50 = swift_getOpaqueTypeConformance2();
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = v209;
  uint64_t v249 = v209;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v49;
  uint64_t v179 = v49;
  uint64_t v180 = v51;
  uint64_t v251 = v50;
  v252 = (void *)v51;
  uint64_t v181 = v50;
  uint64_t v53 = (void *)v51;
  uint64_t v54 = swift_getOpaqueTypeMetadata2();
  uint64_t v187 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  v208 = (char *)&v166 - v55;
  uint64_t v249 = v52;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v49;
  uint64_t v251 = v50;
  v252 = v53;
  uint64_t v56 = swift_getOpaqueTypeConformance2();
  uint64_t v57 = v54;
  uint64_t v182 = v54;
  uint64_t v249 = v54;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for String;
  uint64_t v251 = v56;
  v252 = &protocol witness table for String;
  uint64_t v58 = v56;
  uint64_t v183 = v56;
  uint64_t v59 = swift_getOpaqueTypeMetadata2();
  uint64_t v186 = v59;
  uint64_t v189 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v210 = (char *)&v166 - v60;
  uint64_t v249 = v57;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for String;
  uint64_t v251 = v58;
  v252 = &protocol witness table for String;
  uint64_t v213 = swift_getOpaqueTypeConformance2();
  uint64_t v249 = v59;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for Bool;
  uint64_t v251 = v213;
  v252 = &protocol witness table for Bool;
  uint64_t v190 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v188 = swift_getOpaqueTypeMetadata2();
  uint64_t v191 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  uint64_t v212 = (char *)&v166 - v61;
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v192 = v62;
  uint64_t v193 = v63;
  __chkstk_darwin(v62);
  uint64_t v214 = (char *)&v166 - v64;
  uint64_t v65 = type metadata accessor for ModifiedContent();
  uint64_t v196 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v169 = (char *)&v166 - v66;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v197 = v65;
  uint64_t v67 = type metadata accessor for ModifiedContent();
  uint64_t v198 = *(void *)(v67 - 8);
  uint64_t v199 = v67;
  __chkstk_darwin(v67);
  uint64_t v194 = (char *)&v166 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v195 = (uint64_t *)((char *)&v166 - v70);
  uint64_t v227 = *(void *)(v222 + 16);
  uint64_t v238 = v227;
  v239 = v46;
  uint64_t v226 = *(void *)(v222 + 32);
  uint64_t v71 = v222;
  uint64_t v240 = v226;
  uint64_t v72 = v228;
  v241 = v229;
  uint64_t v242 = v228;
  uint64_t v73 = v171;
  NavigationStack.init<>(root:)();
  unint64_t v74 = sub_10003E0FC();
  uint64_t v75 = v218;
  uint64_t v77 = v167;
  uint64_t v76 = v168;
  uint64_t v173 = v74;
  sub_100052DA8(v218);
  sub_10006A548((uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v75, (uint64_t)sub_100025A40, 0, v76, v77, (uint64_t)v205);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v220 + 8))(v75, v221);
  (*(void (**)(char *, uint64_t))(v217 + 8))(v73, v76);
  uint64_t v78 = v225;
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
  uint64_t v220 = v225 + 16;
  v221 = v79;
  uint64_t v80 = v223;
  uint64_t v81 = v71;
  v79(v223, v72, v71);
  uint64_t v82 = *(unsigned __int8 *)(v78 + 80);
  uint64_t v83 = (v82 + 48) & ~v82;
  uint64_t v216 = v83;
  uint64_t v218 = v82 | 7;
  v219 += v83;
  uint64_t v84 = (void *)swift_allocObject();
  uint64_t v86 = v226;
  uint64_t v85 = v227;
  v84[2] = v227;
  v84[3] = v46;
  uint64_t v87 = v229;
  v84[4] = v86;
  v84[5] = v87;
  uint64_t v217 = *(void *)(v78 + 32);
  uint64_t v225 = v78 + 32;
  uint64_t v88 = v80;
  uint64_t v89 = v81;
  ((void (*)(char *, char *, uint64_t))v217)((char *)v84 + v83, v88, v81);
  sub_10003E4BC(&qword_100199910, type metadata accessor for CGSize);
  uint64_t v90 = v172;
  uint64_t v91 = v205;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v178 + 8))(v91, v90);
  v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_1000366B8(v89, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v234 = v85;
  v235 = v46;
  uint64_t v92 = v86;
  uint64_t v236 = v86;
  v237 = v87;
  swift_getKeyPath();
  uint64_t v249 = v85;
  v250 = v46;
  uint64_t v93 = v85;
  uint64_t v251 = v92;
  v252 = v87;
  type metadata accessor for VenueEventViewModel();
  uint64_t v178 = swift_getWitnessTable();
  uint64_t v94 = v201;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v95 = (void *)swift_allocObject();
  v95[2] = v85;
  v95[3] = v46;
  v95[4] = v92;
  v95[5] = v87;
  uint64_t v96 = v92;
  swift_checkMetadataState();
  uint64_t v97 = v177;
  v224 = v46;
  uint64_t v98 = v207;
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v94, v203);
  (*(void (**)(char *, uint64_t))(v184 + 8))(v98, v97);
  uint64_t v99 = v222;
  uint64_t v100 = v228;
  sub_1000366B8(v222, v205);
  uint64_t v230 = v93;
  v231 = v46;
  uint64_t v232 = v96;
  v233 = v87;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  v205 = v250;
  uint64_t v206 = v249;
  LODWORD(v207) = v251;
  uint64_t v101 = v223;
  uint64_t v102 = v100;
  uint64_t v103 = v100;
  uint64_t v104 = v221;
  v221(v223, v103, v99);
  uint64_t v105 = (void *)swift_allocObject();
  uint64_t v106 = v224;
  v105[2] = v93;
  v105[3] = v106;
  v105[4] = v226;
  v105[5] = v87;
  uint64_t v107 = v216;
  uint64_t v108 = v101;
  uint64_t v109 = v222;
  uint64_t v110 = (void (*)(char *, char *, uint64_t))v217;
  ((void (*)(char *, char *, uint64_t))v217)((char *)v105 + v216, v108, v222);
  uint64_t v111 = v102;
  uint64_t v112 = v109;
  v104(v215, v111, v109);
  uint64_t v113 = (char *)swift_allocObject();
  uint64_t v114 = v224;
  *((void *)v113 + 2) = v227;
  *((void *)v113 + 3) = v114;
  uint64_t v115 = v229;
  *((void *)v113 + 4) = v226;
  *((void *)v113 + 5) = v115;
  v110(&v113[v107], v215, v109);
  swift_checkMetadataState();
  uint64_t v116 = v209;
  long long v117 = v211;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v185 + 8))(v117, v116);
  uint64_t v118 = v228;
  sub_1000366B8(v109, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v119 = sub_10002803C();
  long long v121 = v120;
  swift_release();
  uint64_t v249 = v119;
  v250 = v121;
  unsigned int v122 = v223;
  uint64_t v123 = v118;
  v221(v223, v118, v112);
  uint64_t v124 = (void *)swift_allocObject();
  uint64_t v125 = v224;
  v124[2] = v227;
  v124[3] = v125;
  long long v126 = v229;
  v124[4] = v226;
  v124[5] = v126;
  uint64_t v127 = (char *)v124 + v107;
  uint64_t v128 = v112;
  ((void (*)(char *, char *, uint64_t))v217)(v127, v122, v112);
  uint64_t v129 = v182;
  uint64_t v130 = v208;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v187 + 8))(v130, v129);
  uint64_t v131 = v123;
  sub_1000366B8(v112, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v110) = sub_100027F24();
  swift_release();
  LOBYTE(v249) = v110 & 1;
  uint64_t v132 = v122;
  uint64_t v133 = v221;
  v221(v122, v131, v112);
  uint64_t v134 = (void *)swift_allocObject();
  uint64_t v135 = v226;
  uint64_t v136 = v224;
  v134[2] = v227;
  v134[3] = v136;
  uint64_t v137 = v229;
  v134[4] = v135;
  v134[5] = v137;
  ((void (*)(char *, char *, uint64_t))v217)((char *)v134 + v216, v122, v128);
  uint64_t v138 = v186;
  uint64_t v139 = v210;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v189 + 8))(v139, v138);
  uint64_t v140 = v222;
  v133(v122, v228, v222);
  uint64_t v141 = (void *)swift_allocObject();
  uint64_t v142 = v224;
  v141[2] = v227;
  v141[3] = v142;
  uint64_t v143 = v229;
  v141[4] = v135;
  v141[5] = v143;
  uint64_t v144 = v216;
  uint64_t v145 = (void (*)(char *, char *, uint64_t))v217;
  uint64_t v146 = v132;
  uint64_t v147 = v140;
  ((void (*)(char *, char *, uint64_t))v217)((char *)v141 + v216, v146, v140);
  uint64_t v249 = v138;
  v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&type metadata for Bool;
  uint64_t v251 = v213;
  v252 = &protocol witness table for Bool;
  uint64_t v148 = swift_getOpaqueTypeConformance2();
  uint64_t v149 = v188;
  uint64_t v150 = v212;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v191 + 8))(v150, v149);
  uint64_t v151 = v223;
  v221(v223, v228, v147);
  char v152 = (char *)swift_allocObject();
  *((void *)v152 + 2) = v227;
  *((void *)v152 + 3) = v142;
  uint64_t v153 = v229;
  *((void *)v152 + 4) = v226;
  *((void *)v152 + 5) = v153;
  v145(&v152[v144], v151, v147);
  uint64_t v247 = v148;
  v248 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v154 = v192;
  uint64_t v155 = swift_getWitnessTable();
  uint64_t v156 = v169;
  uint64_t v157 = v214;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v193 + 8))(v157, v154);
  if (qword_1001980F0 != -1) {
    swift_once();
  }
  uint64_t v245 = v155;
  v246 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v158 = v197;
  uint64_t v159 = swift_getWitnessTable();
  uint64_t v160 = v194;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v196 + 8))(v156, v158);
  uint64_t v161 = sub_10003E4BC((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v243 = v159;
  uint64_t v244 = v161;
  uint64_t v162 = v199;
  swift_getWitnessTable();
  uint64_t v163 = v195;
  sub_1000508C8(v195, v160, v162);
  uint64_t v164 = *(void (**)(char *, uint64_t))(v198 + 8);
  v164(v160, v162);
  sub_1000508C8(v204, v163, v162);
  return ((uint64_t (*)(void *, uint64_t))v164)(v163, v162);
}

uint64_t sub_100038024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v103 = a4;
  uint64_t v102 = a2;
  uint64_t v104 = a1;
  uint64_t v100 = a6;
  uint64_t v99 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v97 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for ScrollDismissesKeyboardMode();
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v94 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = a2;
  uint64_t v125 = a3;
  uint64_t v126 = a4;
  uint64_t v127 = a5;
  uint64_t v89 = a5;
  uint64_t v93 = type metadata accessor for VenueEventView();
  uint64_t v91 = *(void *)(v93 - 8);
  uint64_t v92 = *(void *)(v91 + 64);
  __chkstk_darwin(v93);
  uint64_t v90 = (char *)&v69 - v12;
  sub_10000650C(&qword_100199868);
  sub_10000650C(&qword_100199870);
  uint64_t v13 = type metadata accessor for Array();
  uint64_t v101 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v124 = v13;
  uint64_t v125 = AssociatedTypeWitness;
  uint64_t v126 = v15;
  uint64_t v127 = WitnessTable;
  uint64_t v128 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v18 = sub_10003DE1C(&qword_100199880, &qword_100199868, (void (*)(void))sub_10003DDEC);
  uint64_t v19 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v123 = sub_10003DF40();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v121 = v19;
  uint64_t v122 = v20;
  uint64_t v120 = swift_getWitnessTable();
  uint64_t v118 = swift_getWitnessTable();
  uint64_t v119 = &protocol witness table for _PaddingLayout;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v115 = v18;
  uint64_t v116 = v21;
  long long v117 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  uint64_t v86 = type metadata accessor for LazyVGrid();
  uint64_t v85 = swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for ObservableScrollView();
  uint64_t v88 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v83 = (uint64_t)&v69 - v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v124 = v22;
  uint64_t v125 = v24;
  uint64_t v81 = v22;
  uint64_t v25 = v24;
  uint64_t v82 = v24;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v87 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v80 = (char *)&v69 - v27;
  uint64_t v124 = v22;
  uint64_t v125 = v25;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v75 = OpaqueTypeMetadata2;
  uint64_t v124 = OpaqueTypeMetadata2;
  uint64_t v125 = OpaqueTypeConformance2;
  uint64_t v29 = OpaqueTypeConformance2;
  uint64_t v76 = OpaqueTypeConformance2;
  uint64_t v30 = swift_getOpaqueTypeMetadata2();
  uint64_t v74 = v30;
  uint64_t v84 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v78 = (char *)&v69 - v31;
  uint64_t v32 = sub_10000650C(&qword_1001998D0);
  uint64_t v73 = v32;
  uint64_t v124 = OpaqueTypeMetadata2;
  uint64_t v125 = v29;
  uint64_t v33 = swift_getOpaqueTypeConformance2();
  uint64_t v72 = v33;
  uint64_t v34 = sub_10000650C(&qword_1001998D8);
  uint64_t v35 = sub_100010484(&qword_1001998E0, &qword_1001998D8);
  uint64_t v124 = v34;
  uint64_t v125 = v35;
  uint64_t v71 = swift_getOpaqueTypeConformance2();
  uint64_t v124 = v30;
  uint64_t v125 = v32;
  uint64_t v126 = v33;
  uint64_t v127 = v71;
  uint64_t v77 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v36 = swift_getOpaqueTypeMetadata2();
  uint64_t v79 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v69 = (char *)&v69 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v39 = __chkstk_darwin(v38);
  uint64_t v70 = (char **)((char *)&v69 - v40);
  uint64_t v41 = v102;
  uint64_t v42 = v101;
  uint64_t v110 = v102;
  uint64_t v111 = v101;
  uint64_t v43 = v103;
  uint64_t v44 = v89;
  uint64_t v112 = v103;
  uint64_t v113 = v89;
  uint64_t v114 = v104;
  uint64_t v45 = v91;
  uint64_t v46 = v90;
  uint64_t v47 = v93;
  (*(void (**)(char *, __n128))(v91 + 16))(v90, v39);
  unint64_t v48 = (*(unsigned __int8 *)(v45 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  uint64_t v49 = (char *)swift_allocObject();
  *((void *)v49 + 2) = v41;
  *((void *)v49 + 3) = v42;
  *((void *)v49 + 4) = v43;
  *((void *)v49 + 5) = v44;
  uint64_t v50 = v44;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v49[v48], v46, v47);
  char v51 = static Axis.Set.vertical.getter();
  uint64_t v52 = v83;
  sub_1000C44B0(v51, 0, (void (*)(uint64_t))sub_10003E698, (uint64_t)sub_10003E6B4, (uint64_t)v49, v83);
  uint64_t v53 = v94;
  static ScrollDismissesKeyboardMode.immediately.getter();
  uint64_t v54 = v80;
  uint64_t v55 = v81;
  View.scrollDismissesKeyboard(_:)();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v53, v96);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v52, v55);
  uint64_t v56 = v98;
  uint64_t v57 = v97;
  uint64_t v58 = v99;
  (*(void (**)(char *, void, uint64_t))(v98 + 104))(v97, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v99);
  uint64_t v59 = v78;
  uint64_t v60 = v75;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v54, v60);
  uint64_t v105 = v102;
  uint64_t v106 = v101;
  uint64_t v107 = v103;
  uint64_t v108 = v50;
  uint64_t v109 = v104;
  uint64_t v61 = v69;
  uint64_t v62 = v74;
  uint64_t v63 = v73;
  uint64_t v64 = v72;
  uint64_t v65 = v71;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v59, v62);
  uint64_t v124 = v62;
  uint64_t v125 = v63;
  uint64_t v126 = v64;
  uint64_t v127 = v65;
  swift_getOpaqueTypeConformance2();
  uint64_t v66 = v70;
  sub_1000508C8(v70, v61, v36);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v79 + 8);
  v67(v61, v36);
  sub_1000508C8(v100, v66, v36);
  return ((uint64_t (*)(void *, uint64_t))v67)(v66, v36);
}

uint64_t sub_100038C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v35 = a4;
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v36 = a6;
  uint64_t v7 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v7 - 8);
  uint64_t v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for GridItem.Size();
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v10 = (_OWORD *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000650C(&qword_100199868);
  sub_10000650C(&qword_100199870);
  uint64_t v11 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v11;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = v13;
  uint64_t v54 = WitnessTable;
  uint64_t v55 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  uint64_t v16 = sub_10003DE1C(&qword_100199880, &qword_100199868, (void (*)(void))sub_10003DDEC);
  uint64_t v17 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v50 = sub_10003DF40();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v48 = v17;
  uint64_t v49 = v18;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = &protocol witness table for _PaddingLayout;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v42 = v16;
  uint64_t v43 = v19;
  uint64_t v44 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for LazyVGrid();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t *)((char *)&v29 - v25);
  sub_100006560(&qword_100199A00);
  type metadata accessor for GridItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014D4D0;
  _OWORD *v10 = xmmword_10014E1F0;
  (*(void (**)(_OWORD *, void, uint64_t))(v30 + 104))(v10, enum case for GridItem.Size.flexible(_:), v31);
  GridItem.init(_:spacing:alignment:)();
  uint64_t v37 = v33;
  uint64_t v38 = a3;
  uint64_t v39 = v35;
  uint64_t v40 = v29;
  uint64_t v41 = v34;
  static HorizontalAlignment.center.getter();
  sub_10011937C();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v26, v23, v20);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  v27(v23, v20);
  sub_1000508C8(v36, v26, v20);
  return ((uint64_t (*)(void *, uint64_t))v27)(v26, v20);
}

uint64_t sub_10003921C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v22 = a2;
  uint64_t v24 = a1;
  uint64_t v26 = a6;
  uint64_t v23 = sub_10000650C(&qword_100199868);
  sub_10000650C(&qword_100199870);
  uint64_t v46 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  uint64_t v21 = type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for Section();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v21 - v13);
  uint64_t v32 = v22;
  uint64_t v33 = a3;
  uint64_t v34 = v25;
  uint64_t v35 = a5;
  uint64_t v36 = v24;
  uint64_t v27 = v22;
  uint64_t v28 = a3;
  uint64_t v29 = v25;
  uint64_t v30 = a5;
  uint64_t v31 = v24;
  uint64_t v15 = sub_10003DE1C(&qword_100199880, &qword_100199868, (void (*)(void))sub_10003DDEC);
  uint64_t v16 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v45 = sub_10003DF40();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v43 = v16;
  uint64_t v44 = v17;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = &protocol witness table for _PaddingLayout;
  uint64_t v18 = swift_getWitnessTable();
  sub_10003B0A8((uint64_t)sub_10003EF08);
  uint64_t v37 = v15;
  uint64_t v38 = v18;
  uint64_t v39 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, v8);
  sub_1000508C8(v26, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v19)(v14, v8);
}

uint64_t sub_100039664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v31 = a6;
  sub_10000650C(&qword_100199870);
  uint64_t v43 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for _ConditionalContent();
  uint64_t v8 = type metadata accessor for Group();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v26 - v16);
  uint64_t v32 = v27;
  uint64_t v33 = a3;
  uint64_t v34 = v29;
  uint64_t v35 = a5;
  uint64_t v36 = v28;
  uint64_t v18 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v42 = sub_10003DF40();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v40 = v18;
  uint64_t v41 = v19;
  uint64_t v20 = swift_getWitnessTable();
  Group<A>.init(content:)();
  unsigned __int8 v21 = static Edge.Set.leading.getter();
  unsigned __int8 v22 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v21) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v22) {
    Edge.Set.init(rawValue:)();
  }
  uint64_t v39 = v20;
  uint64_t v23 = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  uint64_t v37 = v23;
  uint64_t v38 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v17, v14, v11);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v14, v11);
  sub_1000508C8(v31, v17, v11);
  return ((uint64_t (*)(void *, uint64_t))v24)(v17, v11);
}

uint64_t sub_100039AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v59 = a6;
  uint64_t v50 = a2;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v51 = a4;
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t v8 = type metadata accessor for VenueEventView();
  uint64_t v49 = *(void *)(v8 - 8);
  v46[1] = *(void *)(v49 + 64);
  __chkstk_darwin(v8);
  uint64_t v47 = (char *)v46 - v9;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t v53 = a5;
  uint64_t v11 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_10000650C(&qword_100199878);
  uint64_t WitnessTable = swift_getWitnessTable();
  v46[4] = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v61 = v10;
  uint64_t v62 = AssociatedTypeWitness;
  v46[3] = AssociatedTypeWitness;
  v46[2] = v13;
  uint64_t v63 = v13;
  uint64_t v64 = WitnessTable;
  v46[0] = WitnessTable;
  uint64_t v65 = AssociatedConformanceWitness;
  uint64_t v16 = type metadata accessor for ForEach();
  uint64_t v52 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v48 = (void *)((char *)v46 - v20);
  uint64_t v55 = sub_10000650C(&qword_100199870);
  uint64_t v21 = type metadata accessor for _ConditionalContent();
  uint64_t v57 = *(void *)(v21 - 8);
  uint64_t v58 = v21;
  __chkstk_darwin(v21);
  uint64_t v56 = (char *)v46 - v22;
  uint64_t v23 = v54;
  sub_1000366B8(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v24 = sub_10002865C();
  swift_release();
  uint64_t v61 = v24;
  swift_getWitnessTable();
  LOBYTE(WitnessTable) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1000366B8(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (WitnessTable)
  {
    uint64_t v26 = v25 + *(void *)(*(void *)v25 + 192);
    uint64_t v28 = *(void *)v26;
    uint64_t v27 = *(void *)(v26 + 8);
    char v29 = *(unsigned char *)(v26 + 16);
    uint64_t v30 = *(void *)(v26 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    char v31 = static Edge.Set.top.getter();
    uint64_t v61 = v28;
    uint64_t v62 = v27;
    LOBYTE(v63) = v29;
    uint64_t v64 = v30;
    LOBYTE(v65) = v31;
    long long v66 = 0u;
    long long v67 = 0u;
    char v68 = 1;
    sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
    unint64_t v60 = sub_10003DF40();
    swift_getWitnessTable();
    uint64_t v32 = v56;
    sub_100050B34((uint64_t)&v61, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = sub_10002865C();
    swift_release();
    uint64_t v61 = v33;
    uint64_t v34 = v49;
    uint64_t v35 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v23, v8);
    unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v37 = (char *)swift_allocObject();
    *((void *)v37 + 2) = v50;
    *((void *)v37 + 3) = a3;
    uint64_t v38 = v53;
    *((void *)v37 + 4) = v51;
    *((void *)v37 + 5) = v38;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v37[v36], v35, v8);
    unint64_t v39 = sub_10003DF40();
    ForEach<>.init(_:content:)();
    unint64_t v72 = v39;
    swift_getWitnessTable();
    uint64_t v40 = v48;
    sub_1000508C8(v48, v18, v16);
    uint64_t v41 = *(void (**)(void *, uint64_t))(v52 + 8);
    v41(v18, v16);
    sub_1000508C8(v18, v40, v16);
    sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
    uint64_t v32 = v56;
    sub_100050C2C((uint64_t)v18, v55, v16);
    v41(v18, v16);
    v41(v40, v16);
  }
  uint64_t v42 = sub_10003DE1C(&qword_1001998A0, &qword_100199870, (void (*)(void))sub_10003DEEC);
  unint64_t v71 = sub_10003DF40();
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v69 = v42;
  uint64_t v70 = v43;
  uint64_t v44 = v58;
  swift_getWitnessTable();
  sub_1000508C8(v59, v32, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v32, v44);
}

uint64_t sub_10003A1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v120 = a3;
  uint64_t v121 = a5;
  uint64_t v109 = a2;
  uint64_t v116 = a7;
  uint64_t v114 = *(void *)(a4 - 8);
  uint64_t v115 = *(void *)(v114 + 64);
  __chkstk_darwin(a1);
  uint64_t v113 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123[0] = v11;
  v123[1] = v12;
  v123[2] = v13;
  v123[3] = v14;
  uint64_t v106 = type metadata accessor for VenueEventView();
  uint64_t v111 = *(void *)(v106 - 8);
  uint64_t v112 = *(void *)(v111 + 64);
  __chkstk_darwin(v106);
  uint64_t v110 = (char *)&v79 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v107 = *(void *)(v16 - 8);
  uint64_t v108 = v16;
  __chkstk_darwin(v16);
  uint64_t v101 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DateInterval();
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v98 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v122 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v97 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v91 = (char *)&v79 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v92 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v79 - v26;
  uint64_t v96 = type metadata accessor for EventRowViewModel();
  __chkstk_darwin(v96);
  uint64_t v99 = (uint64_t)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  char v31 = (uint64_t *)((char *)&v79 - v30);
  uint64_t v32 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v32 - 8);
  uint64_t v95 = (char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_100006560(&qword_1001998B8);
  __chkstk_darwin(v119);
  uint64_t v94 = (uint64_t)&v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_100006560(&qword_100199A08);
  uint64_t v104 = *(void *)(v105 - 8);
  __n128 v35 = __chkstk_darwin(v105);
  uint64_t v103 = (char *)&v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, __n128))(a6 + 200);
  uint64_t v117 = a1;
  v86(a4, a6, v35);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v90 = sub_1000B7584(v22, AssociatedConformanceWitness);
  uint64_t v89 = v37;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v81 = v23 + 8;
  uint64_t v82 = v38;
  v38(v27, v22);
  uint64_t v85 = *(void (**)(uint64_t, uint64_t))(a6 + 208);
  unint64_t v39 = v91;
  uint64_t v40 = a4;
  v85(a4, a6);
  uint64_t v118 = a6;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v83 = swift_getAssociatedConformanceWitness();
  uint64_t v88 = sub_100147A9C(v41, v83);
  uint64_t v87 = v42;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v122 + 8);
  v122 += 8;
  uint64_t v80 = v43;
  v43(v39, v41);
  uint64_t v44 = v92;
  uint64_t v45 = v117;
  ((void (*)(uint64_t, uint64_t))v86)(v40, a6);
  uint64_t v46 = v98;
  sub_1000B7044(v22, AssociatedConformanceWitness, v98);
  v82(v44, v22);
  uint64_t v47 = v101;
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v46, v102);
  uint64_t v48 = v97;
  uint64_t v49 = v40;
  uint64_t v50 = v118;
  v85(v40, v118);
  sub_100147CB0(v41, v83, (uint64_t)v123);
  v80(v48, v41);
  uint64_t v51 = v106;
  uint64_t v52 = v109;
  sub_1000366B8(v106, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v53 = v49;
  uint64_t v54 = sub_100029DC8(v45, v120, v49, v121, v50);
  swift_release();
  uint64_t v55 = v89;
  uint64_t *v31 = v90;
  v31[1] = v55;
  uint64_t v56 = v87;
  v31[2] = v88;
  v31[3] = v56;
  uint64_t v57 = (int *)v96;
  (*(void (**)(char *, char *, uint64_t))(v107 + 32))((char *)v31 + *(int *)(v96 + 24), v47, v108);
  sub_10001D6D8((uint64_t)v123, (uint64_t)v31 + v57[7], &qword_100199A10);
  *((unsigned char *)v31 + v57[8]) = 1;
  *(uint64_t *)((char *)v31 + v57[9]) = v54;
  sub_10003F174((uint64_t)v31, v99, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v58 = (uint64_t)v95;
  State.init(wrappedValue:)();
  sub_10003F1DC((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for EventRowViewModel);
  uint64_t v59 = v94;
  sub_10003F174(v58, v94, type metadata accessor for EventRow);
  *(unsigned char *)(v59 + *(int *)(v119 + 36)) = 0;
  sub_10003F1DC(v58, type metadata accessor for EventRow);
  uint64_t v61 = v110;
  uint64_t v60 = v111;
  uint64_t v62 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v110, v52, v51);
  uint64_t v64 = v113;
  uint64_t v63 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v117, v53);
  uint64_t v65 = v60;
  unint64_t v66 = (*(unsigned __int8 *)(v60 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  uint64_t v67 = v63;
  unint64_t v68 = (v112 + *(unsigned __int8 *)(v63 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  uint64_t v69 = (char *)swift_allocObject();
  *((void *)v69 + 2) = v120;
  *((void *)v69 + 3) = v53;
  uint64_t v70 = v118;
  *((void *)v69 + 4) = v121;
  *((void *)v69 + 5) = v70;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v69[v66], v61, v62);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v69[v68], v64, v53);
  sub_10003E014();
  unint64_t v71 = v103;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_1000067DC(v59, &qword_1001998B8);
  uint64_t v72 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v74 = v104;
  uint64_t v75 = v116;
  uint64_t v76 = v105;
  (*(void (**)(uint64_t, char *, uint64_t))(v104 + 16))(v116, v71, v105);
  uint64_t v77 = (uint64_t *)(v75 + *(int *)(sub_100006560(&qword_100199878) + 36));
  *uint64_t v77 = KeyPath;
  v77[1] = v72;
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v71, v76);
}

uint64_t sub_10003ACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v20 - v14;
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  uint64_t v16 = type metadata accessor for VenueEventView();
  sub_1000366B8(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v17 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a2, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, a4);
  sub_100029AB8((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release();
  sub_1000366B8(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = *(void *)(a1 + *(int *)(v16 + 64));
  if (v18)
  {
    swift_retain();
    sub_100029000(8, 10, 0, 3u, v18);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_10003AF3C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v18 = sub_100028840();
  uint64_t v4 = v3;
  swift_release();
  uint64_t v5 = sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 184);
  uint64_t v8 = *(void *)v6;
  uint64_t v7 = *(void *)(v6 + 8);
  char v9 = *(unsigned char *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1000288B8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  char v15 = static Edge.Set.horizontal.getter();
  char v16 = static Edge.Set.vertical.getter();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v15;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 1;
  return result;
}

uint64_t sub_10003B0A8(uint64_t a1)
{
  __n128 v1 = __chkstk_darwin(a1);
  v2(v1);
  return Section<>.init(header:content:)();
}

uint64_t sub_10003B178()
{
  return swift_release();
}

uint64_t sub_10003B1F0(uint64_t result, double a2)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a2 < -50.0 != *(unsigned char *)(v3 + 16))
  {
    sub_100006560(&qword_1001999F0);
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    double result = swift_release();
  }
  *(unsigned char *)(v3 + 16) = a2 < -50.0;
  return result;
}

uint64_t sub_10003B2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_100006560(&qword_1001998D8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.principal.getter();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a1;
  sub_100006560(&qword_100199920);
  sub_10003E798();
  ToolbarItem<>.init(placement:content:)();
  sub_100010484(&qword_1001998E0, &qword_1001998D8);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10003B478@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v83 = a1;
  uint64_t v88 = a6;
  uint64_t v10 = sub_100006560(&qword_1001999A8);
  __chkstk_darwin(v10 - 8);
  uint64_t v78 = (uint64_t *)((char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = sub_100006560(&qword_100199998);
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100006560(&qword_100199988);
  __chkstk_darwin(v87);
  uint64_t v79 = (uint64_t)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v81 = (uint64_t)&v70 - v15;
  uint64_t v85 = sub_100006560(&qword_1001999B0);
  __chkstk_darwin(v85);
  uint64_t v86 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_100199978);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100006560(&qword_100199968);
  __chkstk_darwin(v71);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100006560(&qword_100199958);
  __chkstk_darwin(v72);
  uint64_t v75 = (uint64_t)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100006560(&qword_100199948);
  __chkstk_darwin(v73);
  uint64_t v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100006560(&qword_100199938);
  __chkstk_darwin(v84);
  uint64_t v74 = (uint64_t)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v76 = (uint64_t)&v70 - v27;
  uint64_t v28 = a2;
  *(void *)&long long v89 = a2;
  *((void *)&v89 + 1) = a3;
  uint64_t v29 = a4;
  *(void *)&long long v90 = a4;
  *((void *)&v90 + 1) = a5;
  uint64_t v30 = a5;
  uint64_t v82 = type metadata accessor for VenueEventView();
  uint64_t v31 = v83;
  sub_1000366B8(v82, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a5) = sub_100027F24();
  swift_release();
  uint64_t v32 = static VerticalAlignment.center.getter();
  if (a5)
  {
    *(void *)uint64_t v19 = v32;
    *((void *)v19 + 1) = 0x4010000000000000;
    v19[16] = 0;
    uint64_t v33 = sub_100006560(&qword_1001999C0);
    sub_10003BCE0(v31, (uint64_t)v28, a3, v29, v30, &v19[*(int *)(v33 + 44)]);
    char v34 = static Edge.Set.leading.getter();
    sub_1000066D4((uint64_t)v19, (uint64_t)v21, &qword_100199978);
    __n128 v35 = &v21[*(int *)(v71 + 36)];
    *__n128 v35 = v34;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    v35[40] = 1;
    sub_1000067DC((uint64_t)v19, &qword_100199978);
    char v36 = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v45 = v75;
    sub_1000066D4((uint64_t)v21, v75, &qword_100199968);
    uint64_t v46 = v45 + *(int *)(v72 + 36);
    *(unsigned char *)uint64_t v46 = v36;
    *(void *)(v46 + 8) = v38;
    *(void *)(v46 + 16) = v40;
    *(void *)(v46 + 24) = v42;
    *(void *)(v46 + 32) = v44;
    *(unsigned char *)(v46 + 40) = 0;
    sub_1000067DC((uint64_t)v21, &qword_100199968);
    sub_1000366B8(v82, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_100028430();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_1000066D4(v45, (uint64_t)v24, &qword_100199958);
    uint64_t v47 = &v24[*(int *)(v73 + 36)];
    long long v48 = v90;
    *(_OWORD *)uint64_t v47 = v89;
    *((_OWORD *)v47 + 1) = v48;
    *((_OWORD *)v47 + 2) = v91;
    sub_1000067DC(v45, &qword_100199958);
    uint64_t v49 = v74;
    sub_1000066D4((uint64_t)v24, v74, &qword_100199948);
    uint64_t v50 = (uint64_t (**)())(v49 + *(int *)(v84 + 36));
    *uint64_t v50 = sub_100025A18;
    v50[1] = 0;
    sub_1000067DC((uint64_t)v24, &qword_100199948);
    uint64_t v51 = &qword_100199938;
    uint64_t v52 = v76;
    sub_10001D6D8(v49, v76, &qword_100199938);
    sub_1000066D4(v52, v86, &qword_100199938);
  }
  else
  {
    uint64_t v53 = (uint64_t)v78;
    *uint64_t v78 = v32;
    *(void *)(v53 + 8) = 0x4010000000000000;
    *(unsigned char *)(v53 + 16) = 0;
    uint64_t v54 = sub_100006560(&qword_1001999B8);
    sub_10003C44C(v31, v28, a3, v29, v30, v53 + *(int *)(v54 + 44));
    char v55 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v64 = v80;
    sub_1000066D4(v53, v80, &qword_1001999A8);
    uint64_t v65 = v64 + *(int *)(v77 + 36);
    *(unsigned char *)uint64_t v65 = v55;
    *(void *)(v65 + 8) = v57;
    *(void *)(v65 + 16) = v59;
    *(void *)(v65 + 24) = v61;
    *(void *)(v65 + 32) = v63;
    *(unsigned char *)(v65 + 40) = 0;
    sub_1000067DC(v53, &qword_1001999A8);
    sub_1000366B8(v82, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_100028430();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v66 = v79;
    sub_1000066D4(v64, v79, &qword_100199998);
    uint64_t v67 = (_OWORD *)(v66 + *(int *)(v87 + 36));
    long long v68 = v90;
    *uint64_t v67 = v89;
    v67[1] = v68;
    v67[2] = v91;
    sub_1000067DC(v64, &qword_100199998);
    uint64_t v51 = &qword_100199988;
    uint64_t v52 = v81;
    sub_10001D6D8(v66, v81, &qword_100199988);
    sub_1000066D4(v52, v86, &qword_100199988);
  }
  swift_storeEnumTagMultiPayload();
  sub_10003DE1C(&qword_100199930, &qword_100199938, (void (*)(void))sub_10003E840);
  sub_10003E9A8();
  _ConditionalContent<>.init(storage:)();
  return sub_1000067DC(v52, v51);
}

uint64_t sub_10003BCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v72 = a6;
  uint64_t v87 = a2;
  uint64_t v88 = a3;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v11 = type metadata accessor for VenueEventView();
  uint64_t v67 = *(void *)(v11 - 8);
  uint64_t v69 = *(void *)(v67 + 64);
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v52 - v12;
  uint64_t v71 = sub_100006560(&qword_100198620);
  uint64_t v75 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v52 - v15;
  uint64_t v68 = sub_100006560(&qword_1001999C8);
  uint64_t v74 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v64 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v73 = (char *)&v52 - v18;
  uint64_t v52 = a1;
  sub_1000366B8(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v19 = a2;
  uint64_t v80 = a2;
  uint64_t v81 = a3;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v82 = a4;
  uint64_t v83 = a5;
  swift_getKeyPath();
  uint64_t v87 = v19;
  uint64_t v88 = v20;
  uint64_t v60 = v19;
  uint64_t v61 = v20;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  type metadata accessor for VenueEventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = v87;
  uint64_t v57 = v87;
  uint64_t v54 = v88;
  uint64_t v55 = v89;
  uint64_t v53 = v90;
  uint64_t v58 = v11;
  sub_1000366B8(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v76 = v19;
  uint64_t v77 = v20;
  uint64_t v78 = v21;
  uint64_t v79 = a5;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v24 = v96;
  uint64_t v23 = v97;
  uint64_t v56 = v96;
  LOBYTE(v21) = v98;
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v25 = v52;
  uint64_t v26 = sub_1000366B8(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v27 = (uint64_t *)(v26 + *(void *)(*(void *)v26 + 208));
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v87 = v22;
  uint64_t v88 = v54;
  uint64_t v89 = v55;
  uint64_t v90 = v53;
  uint64_t v91 = v24;
  uint64_t v92 = v23;
  char v93 = v21;
  uint64_t v94 = v29;
  uint64_t v95 = v28;
  uint64_t v30 = *(void *)(v25 + 48);
  char v31 = *(unsigned char *)(v25 + 56);
  char v84 = *(unsigned char *)(v25 + 40);
  uint64_t v85 = v30;
  char v86 = v31;
  sub_100006560(&qword_100199918);
  FocusState.projectedValue.getter();
  sub_10003EA84();
  uint64_t v32 = v73;
  View.focused(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = v58;
  sub_1000366B8(v58, v59);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v34 = v67;
  __n128 v35 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v65, v25, v33);
  unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v37 = (char *)swift_allocObject();
  uint64_t v38 = v61;
  *((void *)v37 + 2) = v60;
  *((void *)v37 + 3) = v38;
  uint64_t v39 = v63;
  *((void *)v37 + 4) = v62;
  *((void *)v37 + 5) = v39;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v37[v36], v35, v33);
  uint64_t v40 = v66;
  Button<>.init(_:action:)();
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  uint64_t v42 = v64;
  uint64_t v43 = v68;
  v41(v64, v32, v68);
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  uint64_t v45 = v70;
  uint64_t v46 = v71;
  v44(v70, v40, v71);
  uint64_t v47 = v72;
  v41(v72, v42, v43);
  uint64_t v48 = sub_100006560(&qword_1001999D0);
  v44(&v47[*(int *)(v48 + 48)], v45, v46);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v75 + 8);
  v49(v40, v46);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v74 + 8);
  v50(v73, v43);
  v49(v45, v46);
  return ((uint64_t (*)(char *, uint64_t))v50)(v42, v43);
}

uint64_t sub_10003C44C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v148 = a5;
  uint64_t v144 = a3;
  uint64_t v145 = a4;
  uint64_t v142 = a6;
  uint64_t v143 = a2;
  uint64_t v11 = type metadata accessor for DismissAction();
  uint64_t v132 = *(void *)(v11 - 8);
  uint64_t v133 = v11;
  __chkstk_darwin(v11);
  uint64_t v131 = (char *)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = v12;
  __chkstk_darwin(v13);
  uint64_t v130 = (uint64_t)&v120 - v14;
  *(void *)&long long v166 = a2;
  *((void *)&v166 + 1) = a3;
  *(void *)&long long v167 = a4;
  *((void *)&v167 + 1) = a5;
  uint64_t v15 = type metadata accessor for VenueEventView();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v136 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v120 - v17;
  uint64_t v141 = sub_100006560(&qword_100198620);
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v138 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006560(&qword_1001999D8);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100006560(&qword_1001999E0) - 8;
  __chkstk_darwin(v140);
  uint64_t v147 = (uint64_t)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v137 = (uint64_t)&v120 - v26;
  __chkstk_darwin(v27);
  uint64_t v149 = (uint64_t)&v120 - v28;
  uint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v146 = a1;
  sub_1000366B8(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v29 = sub_100028980();
  uint64_t v31 = v30;
  swift_release();
  *(void *)&long long v166 = v29;
  *((void *)&v166 + 1) = v31;
  uint64_t v124 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v125 = v16 + 16;
  v124(v18, a1, v15);
  uint64_t v32 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v33 = (v32 + 48) & ~v32;
  uint64_t v122 = v32 | 7;
  unint64_t v123 = v33 + v136;
  uint64_t v34 = (char *)swift_allocObject();
  uint64_t v35 = v144;
  *((void *)v34 + 2) = v143;
  *((void *)v34 + 3) = v35;
  uint64_t v36 = v148;
  *((void *)v34 + 4) = v145;
  *((void *)v34 + 5) = v36;
  uint64_t v126 = v33;
  uint64_t v127 = v18;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v128 = v16 + 32;
  uint64_t v121 = v37;
  v37(&v34[v33], v18, v15);
  unint64_t v136 = sub_10002374C();
  uint64_t v38 = v138;
  Button<>.init<A>(_:action:)();
  uint64_t v39 = static Color.blue.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = v139;
  uint64_t v42 = v141;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v23, v38, v141);
  uint64_t v43 = (uint64_t *)&v23[*(int *)(v21 + 44)];
  uint64_t *v43 = KeyPath;
  v43[1] = v39;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v42);
  uint64_t v134 = v15;
  uint64_t v44 = v135;
  sub_1000366B8(v15, v135);
  LOBYTE(KeyPath) = sub_100028930();
  swift_release();
  double v45 = 0.0;
  double v46 = 1.0;
  if (KeyPath) {
    double v47 = 1.0;
  }
  else {
    double v47 = 0.0;
  }
  uint64_t v48 = v137;
  sub_1000066D4((uint64_t)v23, v137, &qword_1001999D8);
  *(double *)(v48 + *(int *)(v140 + 44)) = v47;
  sub_1000067DC((uint64_t)v23, &qword_1001999D8);
  sub_10001D6D8(v48, v149, &qword_1001999E0);
  sub_1000366B8(v15, v44);
  uint64_t v49 = sub_100028840();
  uint64_t v51 = v50;
  swift_release();
  *(void *)&long long v166 = v49;
  *((void *)&v166 + 1) = v51;
  uint64_t v52 = Text.init<A>(_:)();
  uint64_t v54 = v53;
  char v56 = v55 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v57 = Text.fontWeight(_:)();
  uint64_t v59 = v58;
  char v61 = v60 & 1;
  sub_1000065A4(v52, v54, v56);
  swift_bridgeObjectRelease();
  static Font.subheadline.getter();
  uint64_t v62 = Text.font(_:)();
  uint64_t v64 = v63;
  char v66 = v65;
  uint64_t v68 = v67;
  swift_release();
  char v69 = v66 & 1;
  sub_1000065A4(v57, v59, v61);
  swift_bridgeObjectRelease();
  if (!*(unsigned char *)(*(void *)(v146 + 32) + 16)) {
    double v46 = 0.0;
  }
  uint64_t v70 = v134;
  uint64_t v71 = v146;
  if ((sub_100036590(v134) & 1) == 0) {
    double v45 = 22.0;
  }
  uint64_t v72 = swift_getKeyPath();
  uint64_t v178 = v62;
  uint64_t v179 = v64;
  char v180 = v69;
  uint64_t v181 = v68;
  double v182 = v46;
  double v183 = v45;
  uint64_t v184 = 0;
  uint64_t v185 = v72;
  char v186 = 1;
  static Alignment.center.getter();
  sub_100051924(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v166, 0.0, 1, 0.0, 1);
  uint64_t v73 = v64;
  uint64_t v74 = v71;
  char v75 = v69;
  uint64_t v76 = v70;
  sub_1000065A4(v62, v73, v75);
  swift_release();
  swift_bridgeObjectRelease();
  long long v162 = v174;
  long long v163 = v175;
  long long v164 = v176;
  uint64_t v165 = v177;
  long long v158 = v170;
  long long v159 = v171;
  long long v160 = v172;
  long long v161 = v173;
  long long v154 = v166;
  long long v155 = v167;
  long long v156 = v168;
  long long v157 = v169;
  char v77 = sub_100036590(v70);
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  if ((v77 & 1) == 0)
  {
    uint64_t v83 = v127;
    v124(v127, v74, v76);
    uint64_t v80 = (char *)swift_allocObject();
    uint64_t v84 = v144;
    *((void *)v80 + 2) = v143;
    *((void *)v80 + 3) = v84;
    uint64_t v85 = v148;
    *((void *)v80 + 4) = v145;
    *((void *)v80 + 5) = v85;
    v121(&v80[v126], v83, v76);
    uint64_t v82 = static Font.title2.getter();
    uint64_t v81 = swift_getKeyPath();
    uint64_t v79 = sub_10003EBC4;
    uint64_t v78 = 3;
  }
  uint64_t v148 = v78;
  if (*(void *)(v74 + *(int *)(v76 + 64)))
  {
    swift_retain();
    char v86 = sub_100116888();
    uint64_t v88 = v87;
    swift_release();
    uint64_t v144 = v81;
    uint64_t v145 = v82;
    uint64_t v143 = v79;
    if (v88 && (swift_bridgeObjectRelease(), (v86 & 1) != 0))
    {
      char v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v119 & 1) == 0)
      {
        uint64_t v89 = v80;
        uint64_t v96 = 0;
        uint64_t v95 = 0;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v146 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v89 = v80;
    uint64_t v90 = v130;
    sub_10001D698(v130);
    uint64_t v92 = v131;
    uint64_t v91 = v132;
    uint64_t v93 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v90, v133);
    unint64_t v94 = (*(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    uint64_t v140 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v91 + 32))(v140 + v94, v92, v93);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v93);
    uint64_t v146 = static Font.title2.getter();
    uint64_t v141 = swift_getKeyPath();
    uint64_t v95 = sub_10003EE6C;
    uint64_t v96 = 1;
LABEL_15:
    uint64_t v97 = v147;
    sub_1000066D4(v149, v147, &qword_1001999E0);
    uint64_t v98 = v97;
    uint64_t v99 = v142;
    sub_1000066D4(v98, v142, &qword_1001999E0);
    uint64_t v100 = (int *)sub_100006560(&qword_1001999E8);
    uint64_t v101 = v100[12];
    long long v102 = v163;
    v150[8] = v162;
    v150[9] = v163;
    long long v103 = v164;
    v150[10] = v164;
    long long v104 = v158;
    long long v105 = v159;
    v150[4] = v158;
    v150[5] = v159;
    long long v106 = v160;
    long long v107 = v161;
    v150[6] = v160;
    v150[7] = v161;
    long long v108 = v154;
    long long v109 = v155;
    v150[0] = v154;
    v150[1] = v155;
    long long v110 = v156;
    long long v111 = v157;
    v150[2] = v156;
    v150[3] = v157;
    uint64_t v112 = v99 + v101;
    *(_OWORD *)(v112 + 128) = v162;
    *(_OWORD *)(v112 + 144) = v102;
    *(_OWORD *)(v112 + 160) = v103;
    *(_OWORD *)(v112 + 64) = v104;
    *(_OWORD *)(v112 + 80) = v105;
    *(_OWORD *)(v112 + 96) = v106;
    *(_OWORD *)(v112 + 112) = v107;
    *(_OWORD *)uint64_t v112 = v108;
    *(_OWORD *)(v112 + 16) = v109;
    uint64_t v151 = v165;
    *(void *)(v112 + 176) = v165;
    *(_OWORD *)(v112 + 32) = v110;
    *(_OWORD *)(v112 + 48) = v111;
    uint64_t v113 = (void *)(v99 + v100[16]);
    uint64_t v115 = (uint64_t)v143;
    uint64_t v114 = v144;
    *uint64_t v113 = v148;
    v113[1] = v115;
    v113[2] = v89;
    v113[3] = v114;
    v113[4] = v145;
    uint64_t v116 = (uint64_t *)(v99 + v100[20]);
    uint64_t *v116 = v96;
    v116[1] = (uint64_t)v95;
    uint64_t v117 = v141;
    v116[2] = v140;
    v116[3] = v117;
    v116[4] = v146;
    sub_10003EC94((uint64_t)v150);
    sub_10003ECE8(v148, v115);
    sub_10003ECE8(v96, (uint64_t)v95);
    sub_1000067DC(v149, &qword_1001999E0);
    sub_10003ED38(v96, (uint64_t)v95);
    sub_10003ED38(v148, v115);
    v152[8] = v162;
    v152[9] = v163;
    v152[10] = v164;
    uint64_t v153 = v165;
    v152[4] = v158;
    v152[5] = v159;
    v152[6] = v160;
    v152[7] = v161;
    v152[0] = v154;
    v152[1] = v155;
    v152[2] = v156;
    v152[3] = v157;
    sub_10003ED88((uint64_t)v152);
    return sub_1000067DC(v147, &qword_1001999E0);
  }
  type metadata accessor for RemoteViewConfiguration();
  sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.error()();
  __break(1u);
  return result;
}

uint64_t sub_10003CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a5;
  uint64_t v6 = type metadata accessor for VenueEventView();
  sub_1000366B8(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v7 = (void (*)(void *, void))static Published.subscript.modify();
  *uint64_t v8 = !*v8;
  v7(v11, 0);
  swift_release();
  swift_release();
  swift_release();
  sub_1000366B8(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v9 = *(void *)(a1 + *(int *)(v6 + 64));
  if (v9)
  {
    swift_retain();
    sub_100029000(0, 11, 0, 3u, v9);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003D19C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100028EE4();
  swift_release();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 64));
  if (v3)
  {
    swift_retain();
    sub_100029000(0, 0, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003D2C4()
{
  uint64_t v0 = type metadata accessor for VenueEventView();
  sub_1000366B8(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100028520();
  return swift_release();
}

uint64_t sub_10003D338()
{
  return sub_100027F38();
}

uint64_t sub_10003D35C(uint64_t a1)
{
  return sub_100029AB8(a1);
}

uint64_t sub_10003D380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EventView();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v24 - v17);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, a1, a3, v16);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  uint64_t v21 = v24;
  *((void *)v20 + 2) = v25;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = v26;
  *((void *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v10, a3);
  sub_100052E1C((uint64_t)sub_100053138, 0, (uint64_t)v14);
  swift_getWitnessTable();
  sub_1000508C8(v18, v14, v11);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v14, v11);
  sub_1000508C8(v27, v18, v11);
  return ((uint64_t (*)(void *, uint64_t))v22)(v18, v11);
}

uint64_t sub_10003D604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_10008DEAC((uint64_t)v7);
}

uint64_t sub_10003D6E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100028224();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003D714()
{
  return sub_100028328();
}

uint64_t sub_10003D73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for VenueEventView();
  uint64_t v8 = sub_1000366B8(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a6(v8, v9, v10, v11);
  return swift_release();
}

uint64_t sub_10003D7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v24 = a1;
  uint64_t v28 = a6;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v8 = type metadata accessor for VenueEventView();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for FilterView();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v23 - v17);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v24, v8, v16);
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v26;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = v27;
  *((void *)v20 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v19], v11, v8);
  sub_1000C5A44((uint64_t)v14);
  swift_getWitnessTable();
  sub_1000508C8(v18, v14, v12);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v14, v12);
  sub_1000508C8(v28, v18, v12);
  return ((uint64_t (*)(void *, uint64_t))v21)(v18, v12);
}

Swift::String *sub_10003DA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for FilterViewModel.FilterConfiguration();
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v16 - v11;
  type metadata accessor for FilterViewModel();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v13 = type metadata accessor for VenueEventView();
  sub_1000366B8(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a5;
  swift_getKeyPath();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  type metadata accessor for VenueEventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v14 = sub_100110280((uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v14;
}

uint64_t sub_10003DBF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + *(int *)(v2 + 64)))
  {
    uint64_t v3 = swift_retain();
    sub_100029358(v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DCE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VenueEventView();
  sub_1000366B8(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 64));
  if (v3)
  {
    swift_retain();
    sub_100029000(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10003E4BC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DDEC()
{
  return sub_10003DE1C(&qword_100199888, &qword_100199890, (void (*)(void))sub_10003DE98);
}

uint64_t sub_10003DE1C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003DE98()
{
  unint64_t result = qword_100199898;
  if (!qword_100199898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199898);
  }
  return result;
}

unint64_t sub_10003DEEC()
{
  unint64_t result = qword_1001998A8;
  if (!qword_1001998A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001998A8);
  }
  return result;
}

unint64_t sub_10003DF40()
{
  unint64_t result = qword_1001998B0;
  if (!qword_1001998B0)
  {
    sub_10000650C(&qword_100199878);
    sub_10000650C(&qword_1001998B8);
    sub_10003E014();
    swift_getOpaqueTypeConformance2();
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001998B0);
  }
  return result;
}

unint64_t sub_10003E014()
{
  unint64_t result = qword_1001998C0;
  if (!qword_1001998C0)
  {
    sub_10000650C(&qword_1001998B8);
    sub_10003E4BC(&qword_1001998C8, (void (*)(uint64_t))type metadata accessor for EventRow);
    sub_100010484(&qword_100198D68, &qword_100198D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001998C0);
  }
  return result;
}

uint64_t sub_10003E0E4()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_100038024);
}

unint64_t sub_10003E0FC()
{
  unint64_t result = qword_100199908;
  if (!qword_100199908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199908);
  }
  return result;
}

uint64_t sub_10003E154()
{
  type metadata accessor for VenueEventView();

  return sub_10003D2C4();
}

uint64_t sub_10003E200()
{
  return sub_100027F38();
}

uint64_t sub_10003E224(uint64_t a1)
{
  return sub_100029AB8(a1);
}

uint64_t sub_10003E248()
{
  return 32;
}

__n128 sub_10003E254(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10003E260()
{
  return swift_deallocObject();
}

uint64_t sub_10003E270@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10003D380(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_10003E27C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100028224();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003E2AC()
{
  return sub_100028328();
}

uint64_t sub_10003E2D4()
{
  return 32;
}

__n128 sub_10003E2E0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10003E2F0()
{
  return sub_10003EAF4((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100028EBC);
}

uint64_t sub_10003E30C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10003D7A8(v8, v3, v4, v5, v6, a1);
}

uint64_t sub_10003E3BC()
{
  return sub_10003EAF4((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100028BDC);
}

uint64_t sub_10003E3D8()
{
  return FocusState.wrappedValue.setter();
}

uint64_t sub_10003E488()
{
  return sub_10003EBDC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003DBF4);
}

uint64_t sub_10003E4A4()
{
  return sub_10003EBDC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003DCE4);
}

uint64_t sub_10003E4BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::String *sub_10003E508()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10003DA34(v6, v1, v2, v3, v4);
}

uint64_t sub_10003E5B4()
{
  return 32;
}

__n128 sub_10003E5C0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10003E5CC()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_10003E654()
{
  return sub_10003D604(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003E698()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_100038C08);
}

uint64_t sub_10003E6B4()
{
  type metadata accessor for VenueEventView();

  return sub_10003B178();
}

uint64_t sub_10003E768()
{
  return sub_10003EF48(sub_10003B2B4);
}

uint64_t sub_10003E780()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_10003B478);
}

unint64_t sub_10003E798()
{
  unint64_t result = qword_100199928;
  if (!qword_100199928)
  {
    sub_10000650C(&qword_100199920);
    sub_10003DE1C(&qword_100199930, &qword_100199938, (void (*)(void))sub_10003E840);
    sub_10003E9A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199928);
  }
  return result;
}

uint64_t sub_10003E840()
{
  return sub_10003DE1C(&qword_100199940, &qword_100199948, (void (*)(void))sub_10003E870);
}

unint64_t sub_10003E870()
{
  unint64_t result = qword_100199950;
  if (!qword_100199950)
  {
    sub_10000650C(&qword_100199958);
    sub_10003E90C(&qword_100199960, &qword_100199968, &qword_100199970, &qword_100199978);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199950);
  }
  return result;
}

uint64_t sub_10003E90C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    sub_100010484(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003E9A8()
{
  unint64_t result = qword_100199980;
  if (!qword_100199980)
  {
    sub_10000650C(&qword_100199988);
    sub_10003E90C(&qword_100199990, &qword_100199998, &qword_1001999A0, &qword_1001999A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199980);
  }
  return result;
}

uint64_t sub_10003EA4C()
{
  return 32;
}

__n128 sub_10003EA58(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10003EA6C()
{
  return 32;
}

__n128 sub_10003EA78(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_10003EA84()
{
  unint64_t result = qword_10019CD20;
  if (!qword_10019CD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CD20);
  }
  return result;
}

uint64_t sub_10003EADC()
{
  return sub_10003EAF4((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100028F10);
}

uint64_t sub_10003EAF4(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for VenueEventView() - 8);
  return sub_10003D73C((uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6, a1);
}

uint64_t sub_10003EB98()
{
  return sub_10003EBDC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003CFCC);
}

uint64_t sub_10003EBC4()
{
  return sub_10003EBDC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003D19C);
}

uint64_t sub_10003EBDC(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_10003EC94(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003ECE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003ED38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10003ED88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003EDDC()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_10003EE6C()
{
}

uint64_t sub_10003EEC8()
{
  return sub_10003B1F0(*(void *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_10003EEF0()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_10003921C);
}

uint64_t sub_10003EF08()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_100039664);
}

double sub_10003EF20@<D0>(uint64_t a1@<X8>)
{
  return sub_10003AF3C(a1);
}

uint64_t sub_10003EF30()
{
  return sub_10003EF48((uint64_t (*)(void, void, void, void, void))sub_100039AD0);
}

uint64_t sub_10003EF48(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10003EF64()
{
  uint64_t v1 = type metadata accessor for VenueEventView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 60);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_10003F0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for VenueEventView() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_10003A1DC(a1, v10, v5, v6, v7, v8, a2);
}

uint64_t sub_10003F174(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003F1DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003F23C()
{
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = type metadata accessor for VenueEventView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v9 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = *(void *)(v8 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v5 = v0 + v2 + *(int *)(v1 + 60);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  (*(void (**)(unint64_t, void))(v3 + 8))(v0 + ((v2 + v9 + v4) & ~v4), v8);
  return swift_deallocObject();
}

uint64_t sub_10003F42C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for VenueEventView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t)v0
     + ((v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v2 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));

  return sub_10003ACE8((uint64_t)v0 + v6, v7, v1, v2, v3, v4);
}

ValueMetadata *type metadata accessor for NavigationBarWidthPreferenceKey()
{
  return &type metadata for NavigationBarWidthPreferenceKey;
}

uint64_t sub_10003F538()
{
  return swift_getWitnessTable();
}

unint64_t sub_10003FD24(uint64_t a1)
{
  unint64_t result = sub_10003E0FC();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003FD4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  sub_100023118(v1 + 5, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 72);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16[-1] - v9;
  v5(v3, v4);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    v16[3] = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    void v16[4] = AssociatedConformanceWitness;
    sub_100035868(v16);
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_100029A08((uint64_t)v16);
  }
}

BOOL sub_10003FF94()
{
  uint64_t v1 = v0;
  sub_100023118(v0 + 5, v0[8]);
  uint64_t v2 = dispatch thunk of MusicItem.id.getter();
  uint64_t v4 = v3;
  swift_getKeyPath();
  sub_100040BE8(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void *)(v0[4] + 200);
  swift_getKeyPath();
  sub_100040BE8((unint64_t *)&qword_1001997B0, (void (*)(uint64_t))type metadata accessor for SetlistSongPlaybackController);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_100040C30(v5 + 56, (uint64_t)v16);
  swift_release();
  if (!v17)
  {
    sub_100040C98((uint64_t)v16);
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_100023118(v16, v17);
  uint64_t v6 = dispatch thunk of MusicItem.id.getter();
  uint64_t v8 = v7;
  sub_100029A08((uint64_t)v16);
  if (v2 == v6 && v4 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  swift_getKeyPath();
  v16[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = *(void **)(v1[4] + 200);
  uint64_t v12 = v11[5];
  uint64_t v13 = v11[6];
  sub_100023118(v11 + 2, v12);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
  swift_retain();
  char v15 = v14(v12, v13);
  swift_release();
  return v15 != 0;
}

BOOL sub_100040254()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_100040BE8(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(*(void *)(v0 + 32) + 200);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  sub_100023118(v2 + 2, v3);
  uint64_t v5 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 16);
  swift_retain();
  int v6 = v5(v3, v4);
  swift_release();
  if (v6 != 2)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v7 = *(void **)(*(void *)(v1 + 32) + 200);
    uint64_t v8 = v7[5];
    uint64_t v9 = v7[6];
    sub_100023118(v7 + 2, v8);
    char v10 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    int v11 = v10(v8, v9);
    swift_release();
    if (v11 != 3) {
      return 0;
    }
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void **)(*(void *)(v1 + 32) + 200);
  uint64_t v13 = v12[5];
  uint64_t v14 = v12[6];
  sub_100023118(v12 + 2, v13);
  char v15 = *(double (**)(uint64_t, uint64_t))(v14 + 8);
  swift_retain();
  double v16 = v15(v13, v14);
  swift_release();
  return v16 > 0.0;
}

BOOL sub_10004047C()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_100040BE8(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(*(void *)(v0 + 32) + 200);
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[6];
  sub_100023118(v2 + 2, v3);
  uint64_t v5 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 16);
  swift_retain();
  int v6 = v5(v3, v4);
  swift_release();
  if (v6 == 3) {
    return 1;
  }
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = *(void **)(*(void *)(v1 + 32) + 200);
  uint64_t v9 = v8[5];
  uint64_t v10 = v8[6];
  sub_100023118(v8 + 2, v9);
  int v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
  swift_retain();
  char v12 = v11(v9, v10);
  swift_release();
  return v12 == 0;
}

uint64_t sub_100040618()
{
  return swift_retain();
}

uint64_t sub_1000406BC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100040BE8(&qword_100198EC0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 32);
  return swift_retain();
}

uint64_t sub_100040768()
{
  return swift_release();
}

uint64_t sub_100040848()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_100029A08(v0 + 40);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp23SetlistSongRowViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100040900()
{
  return type metadata accessor for SetlistSongRowViewModel();
}

uint64_t type metadata accessor for SetlistSongRowViewModel()
{
  uint64_t result = qword_100199A48;
  if (!qword_100199A48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100040954()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_100040A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v12 = sub_100035868((uint64_t *)&v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v12, a3, a6);
  uint64_t v13 = (void *)swift_allocObject();
  ObservationRegistrar.init()();
  v13[2] = a1;
  v13[3] = a2;
  sub_1000358CC(&v15, (uint64_t)(v13 + 5));
  void v13[4] = a4;
  return v13;
}

uint64_t sub_100040ACC()
{
  sub_100116888();
  if (v0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + 16) && (unint64_t v2 = sub_1000A8164(2), (v3 & 1) != 0))
    {
      uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
      swift_bridgeObjectRelease();
      char v5 = 1;
      switch(v4)
      {
        case 1:
        case 2:
        case 3:
          char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
        default:
          break;
      }
    }
    else
    {
      char v5 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t sub_100040BE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100040C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_1001997B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040C98(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_1001997B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100040CF8()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t *sub_100040D34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_100006560(&qword_100198948);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100040F18(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v8 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      return v7(v4, v5);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

void *sub_100041050(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_100006560(&qword_100198948);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    void *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000411E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000413C4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      uint64_t v11 = sub_100006560(&qword_100198948);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

void *sub_100041544(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_1000067DC((uint64_t)a1 + v6, &qword_100198940);
    uint64_t v9 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_100006560(&qword_100198948);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100041714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100041728);
}

uint64_t sub_100041728(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198950);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000417DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000417F0);
}

void *sub_1000417F0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198950);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SetlistView(uint64_t a1)
{
  return sub_10002DE00(a1, qword_100199B50);
}

void sub_1000418BC()
{
  sub_10001B760();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10004195C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100041978(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = type metadata accessor for GridItem();
      uint64_t v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      *((void *)v5 + 2) = a2;
      uint64_t v6 = *(void *)(v4 - 8);
      unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      uint64_t v9 = a2 - 1;
      if (a2 != 1)
      {
        uint64_t v10 = *(void *)(v6 + 72);
        uint64_t v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v5 = (char *)&_swiftEmptyArrayStorage;
    }
    uint64_t v12 = type metadata accessor for GridItem();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_100041B20@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100049A00(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 184);
  *a2 = *(void *)(v3 + 176);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100041BCC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100041CB0()
{
  uint64_t v0 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_1001989F0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v22 - v15;
  type metadata accessor for SetlistView(0);
  sub_10001CA34((uint64_t)v16);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  uint64_t v17 = (uint64_t)&v7[*(int *)(v5 + 56)];
  sub_1000066D4((uint64_t)v16, (uint64_t)v7, &qword_100198948);
  sub_1000066D4((uint64_t)v13, v17, &qword_100198948);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v7, 1, v0) == 1)
  {
    sub_1000067DC((uint64_t)v13, &qword_100198948);
    sub_1000067DC((uint64_t)v16, &qword_100198948);
    if (v18(v17, 1, v0) == 1)
    {
      sub_1000067DC((uint64_t)v7, &qword_100198948);
      return 2;
    }
    goto LABEL_6;
  }
  sub_1000066D4((uint64_t)v7, (uint64_t)v10, &qword_100198948);
  if (v18(v17, 1, v0) == 1)
  {
    sub_1000067DC((uint64_t)v13, &qword_100198948);
    sub_1000067DC((uint64_t)v16, &qword_100198948);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
LABEL_6:
    sub_1000067DC((uint64_t)v7, &qword_1001989F0);
    return 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
  sub_100049A00((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v1 + 8);
  v20(v3, v0);
  sub_1000067DC((uint64_t)v13, &qword_100198948);
  sub_1000067DC((uint64_t)v16, &qword_100198948);
  v20(v10, v0);
  sub_1000067DC((uint64_t)v7, &qword_100198948);
  if (v19) {
    return 2;
  }
  return 1;
}

uint64_t sub_1000420A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v162 = a2;
  uint64_t v3 = type metadata accessor for SetlistView(0);
  uint64_t v168 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v169 = v4;
  uint64_t v170 = (uint64_t)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior();
  __chkstk_darwin(v5 - 8);
  uint64_t v151 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for ViewAlignedScrollTargetBehavior();
  uint64_t v153 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  char v152 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for ContentMarginPlacement();
  uint64_t v145 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v141 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_100006560(&qword_100199BC0);
  uint64_t v140 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v139 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100006560(&qword_100199BC8);
  uint64_t v146 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v142 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_100006560(&qword_100199BD0);
  uint64_t v149 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v148 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_100006560(&qword_100199BD8);
  uint64_t v158 = *(void *)(v161 - 8);
  __chkstk_darwin(v161);
  long long v155 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_100006560(&qword_100199BE0);
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  long long v163 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = sub_100006560(&qword_100199BE8);
  uint64_t v166 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v177 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v176 = (char *)&v131 - v16;
  uint64_t v132 = type metadata accessor for SetlistDetailSection(0);
  __chkstk_darwin(v132);
  uint64_t v135 = (uint64_t *)((char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v133 = sub_100006560(&qword_100199BF0);
  __chkstk_darwin(v133);
  uint64_t v136 = (uint64_t)&v131 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_100006560(&qword_100199BF8);
  uint64_t v138 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v134 = (uint64_t)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006560(&qword_100199C00);
  __chkstk_darwin(v23 - 8);
  uint64_t v175 = (uint64_t)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v178 = (uint64_t)&v131 - v26;
  uint64_t v27 = (void *)a1[1];
  uint64_t v185 = (void *)*a1;
  char v186 = v27;
  uint64_t v28 = sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v160 = Text.font(_:)();
  uint64_t v159 = v34;
  int v137 = v35;
  uint64_t v174 = v36;
  swift_release();
  sub_1000065A4(v29, v31, v33);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v157 = swift_getKeyPath();
  int v143 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  double v45 = a1;
  double v47 = (void *)*a1;
  double v46 = (void *)a1[1];
  uint64_t v185 = v47;
  char v186 = v46;
  uint64_t v171 = v28;
  State.wrappedValue.getter();
  uint64_t v48 = v181;
  uint64_t v49 = v181[7];
  uint64_t v50 = v181[8];
  sub_100023118(v181 + 4, v49);
  (*(void (**)(uint64_t, uint64_t))(v50 + 64))(v49, v50);
  uint64_t v51 = type metadata accessor for URL();
  LODWORD(v29) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v22, 1, v51);
  sub_1000067DC((uint64_t)v22, &qword_100198630);
  if (v29 == 1)
  {
    swift_release();
LABEL_5:
    uint64_t v84 = 1;
    uint64_t v82 = v172;
    goto LABEL_6;
  }
  uint64_t v52 = v48[7];
  uint64_t v53 = v48[8];
  sub_100023118(v48 + 4, v52);
  (*(void (**)(uint64_t, uint64_t))(v53 + 40))(v52, v53);
  uint64_t v55 = v54;
  swift_release();
  if (!v55) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  uint64_t v185 = v47;
  char v186 = v46;
  State.wrappedValue.getter();
  type metadata accessor for SetlistViewModel();
  State.init(wrappedValue:)();
  char v56 = v186;
  uint64_t v57 = (uint64_t)v135;
  void *v135 = v185;
  *(void *)(v57 + 8) = v56;
  LOBYTE(v181) = 0;
  State.init(wrappedValue:)();
  uint64_t v58 = v186;
  *(unsigned char *)(v57 + 16) = (_BYTE)v185;
  *(void *)(v57 + 24) = v58;
  type metadata accessor for RemoteViewConfiguration();
  sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *(void *)(v57 + 32) = EnvironmentObject.init()();
  *(void *)(v57 + 40) = v59;
  uint64_t v60 = v132;
  char v61 = (uint64_t *)(v57 + *(int *)(v132 + 28));
  *char v61 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);
  swift_storeEnumTagMultiPayload();
  uint64_t v62 = (uint64_t *)(v57 + *(int *)(v60 + 32));
  *uint64_t v62 = swift_getKeyPath();
  sub_100006560(&qword_100198A98);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v62) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v71 = v136;
  sub_1000484FC(v57, v136, type metadata accessor for SetlistDetailSection);
  uint64_t v72 = v71 + *(int *)(v133 + 36);
  *(unsigned char *)uint64_t v72 = (_BYTE)v62;
  *(void *)(v72 + 8) = v64;
  *(void *)(v72 + 16) = v66;
  *(void *)(v72 + 24) = v68;
  *(void *)(v72 + 32) = v70;
  *(unsigned char *)(v72 + 40) = 0;
  sub_100048B18(v57, type metadata accessor for SetlistDetailSection);
  LOBYTE(v62) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v81 = v134;
  sub_1000066D4(v71, v134, &qword_100199BF0);
  uint64_t v82 = v172;
  uint64_t v83 = v81 + *(int *)(v172 + 36);
  *(unsigned char *)uint64_t v83 = (_BYTE)v62;
  *(void *)(v83 + 8) = v74;
  *(void *)(v83 + 16) = v76;
  *(void *)(v83 + 24) = v78;
  *(void *)(v83 + 32) = v80;
  *(unsigned char *)(v83 + 40) = 0;
  sub_1000067DC(v71, &qword_100199BF0);
  sub_10001D6D8(v81, v178, &qword_100199BF8);
  uint64_t v84 = 0;
LABEL_6:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56))(v178, v84, 1, v82);
  LODWORD(v172) = v137 & 1;
  uint64_t v85 = static Axis.Set.horizontal.getter();
  __chkstk_darwin(v85);
  char v86 = v45;
  sub_100006560(&qword_100199C08);
  uint64_t v87 = sub_10000650C(&qword_100199C10);
  uint64_t v88 = sub_100010484(&qword_100199C18, &qword_100199C10);
  uint64_t v185 = (void *)v87;
  char v186 = (void *)v88;
  swift_getOpaqueTypeConformance2();
  uint64_t v89 = v139;
  ScrollView.init(_:showsIndicators:content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v90 = v141;
  static ContentMarginPlacement.automatic.getter();
  uint64_t v91 = sub_100010484(&qword_100199C20, &qword_100199BC0);
  uint64_t v92 = v142;
  uint64_t v93 = v144;
  View.contentMargins(_:_:for:)();
  (*(void (**)(char *, uint64_t))(v145 + 8))(v90, v147);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v89, v93);
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter();
  unint64_t v94 = v152;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)();
  uint64_t v185 = (void *)v93;
  char v186 = (void *)v91;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v96 = v148;
  uint64_t v97 = v150;
  uint64_t v98 = (void *)v156;
  View.scrollTargetBehavior<A>(_:)();
  (*(void (**)(char *, void *))(v153 + 8))(v94, v98);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v92, v97);
  uint64_t v99 = (void *)v86[1];
  uint64_t v185 = (void *)*v86;
  char v186 = v99;
  State.wrappedValue.getter();
  swift_release();
  uint64_t v185 = (void *)v97;
  char v186 = v98;
  uint64_t v187 = OpaqueTypeConformance2;
  uint64_t v188 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  uint64_t v100 = swift_getOpaqueTypeConformance2();
  uint64_t v101 = v155;
  uint64_t v102 = v154;
  View.scrollDisabled(_:)();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v96, v102);
  long long v103 = (void *)v86[1];
  uint64_t v181 = (void *)*v86;
  double v182 = v103;
  State.projectedValue.getter();
  long long v104 = v185;
  long long v105 = v186;
  uint64_t v106 = v187;
  swift_getKeyPath();
  uint64_t v181 = v104;
  double v182 = v105;
  uint64_t v183 = v106;
  sub_100006560(&qword_100199C28);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v181 = v185;
  double v182 = v186;
  uint64_t v183 = v187;
  uint64_t v184 = v188;
  uint64_t v179 = v102;
  uint64_t v180 = v100;
  uint64_t v156 = swift_getOpaqueTypeConformance2();
  unint64_t v107 = sub_100048220();
  long long v108 = v163;
  uint64_t v109 = v161;
  View.scrollPosition<A>(id:anchor:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v158 + 8))(v101, v109);
  long long v110 = (void *)v86[1];
  uint64_t v185 = (void *)*v86;
  char v186 = v110;
  State.wrappedValue.getter();
  long long v111 = v181;
  swift_getKeyPath();
  uint64_t v185 = v111;
  sub_100049A00(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v113 = (void *)v111[22];
  uint64_t v112 = (void *)v111[23];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v181 = v113;
  double v182 = v112;
  uint64_t v114 = v170;
  sub_1000484FC((uint64_t)v86, v170, type metadata accessor for SetlistView);
  unint64_t v115 = (*(unsigned __int8 *)(v168 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80);
  uint64_t v116 = swift_allocObject();
  sub_100049A68(v114, v116 + v115, type metadata accessor for SetlistView);
  sub_100006560(&qword_100199C38);
  uint64_t v185 = (void *)v109;
  char v186 = &type metadata for MusicItemID;
  uint64_t v187 = v156;
  uint64_t v188 = (void *)v107;
  swift_getOpaqueTypeConformance2();
  sub_100048424();
  uint64_t v117 = v177;
  uint64_t v118 = v165;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v164 + 8))(v108, v118);
  uint64_t v119 = v166;
  uint64_t v120 = v176;
  uint64_t v121 = v167;
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v176, v117, v167);
  LOBYTE(v115) = v172;
  LOBYTE(v185) = v172;
  uint64_t v122 = v175;
  sub_1000066D4(v178, v175, &qword_100199C00);
  unint64_t v123 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  v123(v117, v120, v121);
  uint64_t v124 = v162;
  uint64_t v125 = v160;
  uint64_t v126 = v159;
  uint64_t *v162 = v160;
  v124[1] = v126;
  *((unsigned char *)v124 + 16) = v115;
  uint64_t v127 = KeyPath;
  v124[3] = v174;
  v124[4] = v127;
  v124[5] = 2;
  *((unsigned char *)v124 + 48) = 0;
  v124[7] = v157;
  *((unsigned char *)v124 + 64) = 0;
  *((unsigned char *)v124 + 72) = v143;
  v124[10] = v38;
  v124[11] = v40;
  v124[12] = v42;
  v124[13] = v44;
  *((unsigned char *)v124 + 112) = 0;
  uint64_t v128 = sub_100006560(&qword_100199C50);
  sub_1000066D4(v122, (uint64_t)v124 + *(int *)(v128 + 48), &qword_100199C00);
  v123((char *)v124 + *(int *)(v128 + 64), v177, v121);
  LOBYTE(v122) = v172;
  sub_100010924(v125, v126, v172);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100010924(v125, v126, v122);
  uint64_t v129 = *(void (**)(char *, uint64_t))(v119 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v129(v176, v121);
  sub_1000067DC(v178, &qword_100199C00);
  sub_1000065A4(v125, v126, v122);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v129(v177, v121);
  sub_1000067DC(v175, &qword_100199C00);
  sub_1000065A4(v125, v126, (char)v185);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004358C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v3 = type metadata accessor for PinnedScrollableViews();
  __chkstk_darwin(v3);
  v19[0] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GridItem.Size();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (_OWORD *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for GridItem();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100199C10);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[1];
  uint64_t v20 = *a1;
  uint64_t v21 = v16;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  *uint64_t v8 = xmmword_10014E1F0;
  (*(void (**)(_OWORD *, void, uint64_t))(v6 + 104))(v8, enum case for GridItem.Size.flexible(_:), v5);
  GridItem.init(_:spacing:alignment:)();
  unint64_t v17 = sub_1000339F4();
  sub_100041978((uint64_t)v11, v17);
  swift_release();
  void v19[4] = a1;
  static VerticalAlignment.center.getter();
  LODWORD(v20) = 0;
  sub_100049A00(&qword_100199C58, (void (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)();
  sub_100006560(&qword_100199C60);
  sub_10004858C();
  LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)();
  sub_100010484(&qword_100199C18, &qword_100199C10);
  View.scrollTargetLayout(isEnabled:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1000438FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for SetlistView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = a1[1];
  uint64_t v20 = *a1;
  uint64_t v21 = v6;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v7 = v24[7];
  uint64_t v8 = v24[8];
  sub_100023118(v24 + 4, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  swift_getAssociatedTypeWitness();
  sub_100006560(&qword_1001997C0);
  uint64_t v9 = _arrayForceCast<A, B>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v24 = (void *)v9;
  swift_getKeyPath();
  sub_1000484FC((uint64_t)a1, (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = swift_allocObject();
  sub_100049A68((uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for SetlistView);
  sub_100006560(&qword_100199C88);
  sub_100006560(&qword_100199C90);
  sub_100010484(&qword_100199C98, &qword_100199C88);
  sub_100048220();
  uint64_t v12 = sub_10000650C(&qword_100199C70);
  uint64_t v13 = sub_10000650C(&qword_100199C78);
  uint64_t v14 = type metadata accessor for PlainButtonStyle();
  uint64_t v15 = sub_100010484(&qword_100199C80, &qword_100199C78);
  uint64_t v16 = sub_100049A00(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v20 = v12;
  uint64_t v21 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100043C48@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v31 = type metadata accessor for PlainButtonStyle();
  uint64_t v33 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SetlistView(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_100199C78);
  uint64_t v32 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_100199C70);
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v38 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_100199C90);
  uint64_t v35 = *(void *)(v17 - 8);
  uint64_t v36 = v17;
  __chkstk_darwin(v17);
  uint64_t v34 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000484FC((uint64_t)a2, (uint64_t)v10, type metadata accessor for SetlistView);
  sub_1000487B4(a1, (uint64_t)&v45);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v20 = (v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = v21 + v19;
  uint64_t v23 = v31;
  sub_100049A68((uint64_t)v10, v22, type metadata accessor for SetlistView);
  sub_1000358CC(&v45, v21 + v20);
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  sub_100006560(&qword_100199CA0);
  sub_100048A48();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v24 = sub_100010484(&qword_100199C80, &qword_100199C78);
  uint64_t v25 = sub_100049A00(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
  static Axis.Set.horizontal.getter();
  uint64_t v26 = a2[1];
  uint64_t v42 = *a2;
  uint64_t v43 = v26;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  LOBYTE(v13) = *(unsigned char *)(v44 + 72);
  swift_release();
  if ((v13 & 1) == 0) {
    sub_100041CB0();
  }
  static Alignment.center.getter();
  *(void *)&long long v45 = v11;
  *((void *)&v45 + 1) = v23;
  uint64_t v46 = v24;
  uint64_t v47 = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = v34;
  uint64_t v28 = v38;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v39, v27, v36);
}

uint64_t sub_100044188(uint64_t a1, void *a2)
{
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    sub_100034058(a2, v4);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100044268@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for SetlistSongRowView();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SetlistSongRowViewModel();
  uint64_t v10 = a1[1];
  v32[0] = *a1;
  uint64_t v11 = v32[0];
  v32[1] = v10;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v12 = *(void *)(v29 + 16);
  uint64_t v13 = *(void *)(v29 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  sub_1000487B4(a2, (uint64_t)v32);
  uint64_t v29 = v11;
  uint64_t v30 = v10;
  State.wrappedValue.getter();
  uint64_t v14 = v31;
  uint64_t v15 = v33;
  uint64_t v16 = v34;
  uint64_t v17 = sub_1000299B8((uint64_t)v32, v33);
  __n128 v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v21 + 16))(v20, v18);
  uint64_t v22 = sub_100040A08(v12, v13, (uint64_t)v20, v14, v9, v15, v16);
  sub_100029A08((uint64_t)v32);
  *uint64_t v8 = v22;
  type metadata accessor for RemoteViewConfiguration();
  sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  v8[1] = EnvironmentObject.init()();
  v8[2] = v23;
  uint64_t v24 = (void *)((char *)v8 + *(int *)(v6 + 32));
  *uint64_t v24 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = v28;
  sub_1000484FC((uint64_t)v8, v28, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
  *(unsigned char *)(v25 + *(int *)(sub_100006560(&qword_100199CA0) + 36)) = 0;
  return sub_100048B18((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SetlistSongRowView);
}

uint64_t sub_10004450C(uint64_t a1)
{
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v2 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_retain();
    sub_1000AC4E4(v3, v2, 8, 11, 24, 0, 3u, v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100044614(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 48) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000446AC, v3, v2);
}

uint64_t sub_1000446AC()
{
  uint64_t v1 = (void *)v0[5];
  swift_release();
  uint64_t v2 = v1[1];
  v0[2] = *v1;
  v0[3] = v2;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void **)(v0[4] + 200);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  sub_100023118(v3 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
  swift_release();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10004477C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  uint64_t v13 = sub_100006560(&qword_100199B90);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v15 = static HorizontalAlignment.leading.getter();
  *((void *)v15 + 1) = 0x402E000000000000;
  v15[16] = 0;
  uint64_t v16 = sub_100006560(&qword_100199B98);
  sub_1000420A0(v4, (uint64_t *)&v15[*(int *)(v16 + 44)]);
  sub_1000484FC((uint64_t)v4, (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = swift_allocObject();
  sub_100049A68((uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for SetlistView);
  static TaskPriority.userInitiated.getter();
  uint64_t v19 = (char *)(a2 + *(int *)(sub_100006560(&qword_100199BB0) + 36));
  uint64_t v20 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v19[*(int *)(v20 + 20)], v9, v6);
  *(void *)uint64_t v19 = &unk_100199BA8;
  *((void *)v19 + 1) = v18;
  sub_1000066D4((uint64_t)v15, a2, &qword_100199B90);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_1000067DC((uint64_t)v15, &qword_100199B90);
}

uint64_t sub_100044A18()
{
  uint64_t v2 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100010CB0;
  return sub_100044614(v3);
}

uint64_t type metadata accessor for SetlistDetailSection(uint64_t a1)
{
  return sub_10002DE00(a1, qword_100199D10);
}

uint64_t sub_100044B04()
{
  static Color.black.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_100199AE8 = v0;
  return result;
}

uint64_t sub_100044B48()
{
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  uint64_t v0 = Font.weight(_:)();
  uint64_t result = swift_release();
  qword_100199AF0 = v0;
  return result;
}

uint64_t sub_100044B8C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v138 = a2;
  uint64_t v118 = type metadata accessor for Text.Suffix();
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v116 = (char *)v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_100006560(&qword_100199D90);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v121 = (char *)v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100006560(&qword_100199D98);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v120 = (char *)v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v119 = (char *)v113 - v7;
  uint64_t v8 = sub_100006560(&qword_1001997A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v130 = (char *)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v139 = *(void *)(v10 - 8);
  uint64_t v140 = v10;
  __chkstk_darwin(v10);
  v113[0] = (char *)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v133 = (char *)v113 - v13;
  uint64_t v14 = sub_100006560(&qword_100199DA0);
  __chkstk_darwin(v14 - 8);
  uint64_t v135 = (uint64_t)v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v134 = (char *)v113 - v17;
  uint64_t v129 = type metadata accessor for PlainButtonStyle();
  uint64_t v131 = *(void (***)(char *, uint64_t))(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v128 = (char *)v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  __chkstk_darwin(v22 - 8);
  uint64_t v115 = (uint64_t)v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v113 - v26;
  uint64_t v127 = sub_100006560(&qword_100199DA8);
  uint64_t v28 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v30 = (char *)v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100006560(&qword_100199DB0);
  __chkstk_darwin(v126);
  uint64_t v32 = (char *)v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100006560(&qword_100199DB8);
  uint64_t v141 = *(void *)(v33 - 8);
  uint64_t v142 = v33;
  __chkstk_darwin(v33);
  uint64_t v132 = (void (**)(char *, uint64_t))((char *)v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v35);
  uint64_t v125 = (char *)v113 - v36;
  __chkstk_darwin(v37);
  uint64_t v39 = (void (**)(char *, uint64_t))((char *)v113 - v38);
  sub_1000484FC((uint64_t)a1, (uint64_t)v27, type metadata accessor for SetlistDetailSection);
  uint64_t v40 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v41 = (v40 + 16) & ~v40;
  v113[2] = v41 + v24;
  v113[1] = v40 | 7;
  uint64_t v42 = swift_allocObject();
  uint64_t v114 = v41;
  sub_100049A68((uint64_t)v27, v42 + v41, type metadata accessor for SetlistDetailSection);
  int v143 = a1;
  sub_100006560(&qword_100199DC0);
  sub_100049DF8();
  Button.init(action:label:)();
  uint64_t v124 = a1;
  uint64_t v43 = a1[1];
  uint64_t v144 = *a1;
  uint64_t v145 = v43;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v44 = v152[7];
  uint64_t v45 = v152[8];
  sub_100023118(v152 + 4, v44);
  (*(void (**)(uint64_t, uint64_t))(v45 + 64))(v44, v45);
  uint64_t v46 = type metadata accessor for URL();
  LOBYTE(v24) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v21, 1, v46) != 1;
  sub_1000067DC((uint64_t)v21, &qword_100198630);
  swift_release();
  uint64_t v47 = v127;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v32, v30, v127);
  v32[*(int *)(v126 + 36)] = v24;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v47);
  uint64_t v48 = (uint64_t)v130;
  uint64_t v49 = v128;
  PlainButtonStyle.init()();
  sub_100049F38();
  sub_100049A00(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v50 = v125;
  uint64_t v51 = v129;
  View.buttonStyle<A>(_:)();
  v131[1](v49, v51);
  uint64_t v52 = (uint64_t)v32;
  uint64_t v53 = (uint64_t)v124;
  sub_1000067DC(v52, &qword_100199DB0);
  uint64_t v54 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v141 + 32);
  uint64_t v131 = v39;
  v54(v39, v50, v142);
  uint64_t v55 = *(void *)(v53 + 8);
  uint64_t v144 = *(void *)v53;
  uint64_t v145 = v55;
  State.wrappedValue.getter();
  uint64_t v56 = (uint64_t)v152;
  swift_getKeyPath();
  uint64_t v144 = v56;
  sub_100049A00(&qword_1001997A8, (void (*)(uint64_t))type metadata accessor for SetlistViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v57 = v56 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess();
  uint64_t v58 = v57;
  uint64_t v59 = v139;
  sub_1000066D4(v58, v48, &qword_1001997A0);
  uint64_t v60 = v140;
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v48, 1, v60) == 1)
  {
    sub_1000067DC(v48, &qword_1001997A0);
    uint64_t v61 = 1;
    uint64_t v62 = v137;
    uint64_t v63 = v136;
    uint64_t v64 = (uint64_t)v134;
  }
  else
  {
    uint64_t v65 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v133, v48, v60);
    (*(void (**)(void, char *, uint64_t))(v59 + 16))(v113[0], v65, v60);
    uint64_t v66 = Text.init(_:)();
    uint64_t v68 = v67;
    char v70 = v69;
    if (qword_100198080 != -1) {
      swift_once();
    }
    uint64_t v71 = Text.font(_:)();
    uint64_t v73 = v72;
    char v75 = v74 & 1;
    sub_1000065A4(v66, v68, v70 & 1);
    swift_bridgeObjectRelease();
    LODWORD(v144) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v76 = Text.foregroundStyle<A>(_:)();
    uint64_t v78 = v77;
    char v80 = v79;
    uint64_t v82 = v81;
    sub_1000065A4(v71, v73, v75);
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void *)(v53 + 24);
    LOBYTE(v144) = *(unsigned char *)(v53 + 16);
    uint64_t v145 = v83;
    sub_100006560(&qword_100198448);
    State.wrappedValue.getter();
    char v84 = v151;
    if (v151) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = 2;
    }
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v144 = v76;
    uint64_t v145 = v78;
    char v146 = v80 & 1;
    uint64_t v147 = v82;
    uint64_t v148 = KeyPath;
    uint64_t v149 = v85;
    char v150 = v84;
    uint64_t v87 = sub_100047944();
    uint64_t v89 = v88;
    char v91 = v90 & 1;
    uint64_t v92 = v116;
    static Text.Suffix.truncated(_:)();
    sub_1000065A4(v87, v89, v91);
    swift_bridgeObjectRelease();
    uint64_t v93 = sub_100006560(&qword_100199E18);
    unint64_t v94 = sub_100049FE0();
    uint64_t v95 = v121;
    View.textSuffix(_:)();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v92, v118);
    sub_1000065A4(v144, v145, v146);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v96 = v115;
    sub_1000484FC(v53, v115, type metadata accessor for SetlistDetailSection);
    uint64_t v97 = swift_allocObject();
    sub_100049A68(v96, v97 + v114, type metadata accessor for SetlistDetailSection);
    uint64_t v144 = v93;
    uint64_t v145 = v94;
    swift_getOpaqueTypeConformance2();
    uint64_t v98 = v120;
    uint64_t v99 = v123;
    View.onTapGesture(count:perform:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v95, v99);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v133, v140);
    uint64_t v63 = v136;
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    uint64_t v101 = v119;
    uint64_t v102 = v98;
    uint64_t v62 = v137;
    v100(v119, v102, v137);
    uint64_t v64 = (uint64_t)v134;
    v100(v134, v101, v62);
    uint64_t v61 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v64, v61, 1, v62);
  uint64_t v104 = v141;
  uint64_t v103 = v142;
  long long v105 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v141 + 16);
  uint64_t v106 = v132;
  unint64_t v107 = v131;
  v105((char *)v132, v131, v142);
  uint64_t v108 = v135;
  sub_1000066D4(v64, v135, &qword_100199DA0);
  uint64_t v109 = v138;
  v105(v138, v106, v103);
  uint64_t v110 = sub_100006560(&qword_100199E10);
  sub_1000066D4(v108, (uint64_t)&v109[*(int *)(v110 + 48)], &qword_100199DA0);
  sub_1000067DC(v64, &qword_100199DA0);
  long long v111 = *(void (**)(void, uint64_t))(v104 + 8);
  v111(v107, v103);
  sub_1000067DC(v108, &qword_100199DA0);
  return ((uint64_t (*)(void, uint64_t))v111)(v106, v103);
}

uint64_t sub_100045AB8(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v20 = *(void *)(v2 - 8);
  uint64_t v21 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v22 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v24 = v11;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v13 = v25[7];
  uint64_t v12 = v25[8];
  sub_100023118(v25 + 4, v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 64))(v13, v12);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_1000067DC((uint64_t)v7, &qword_100198630);
  }
  uint64_t v15 = v22;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v7, v8);
  type metadata accessor for SetlistDetailSection(0);
  sub_10001D160((uint64_t)v4);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v21);
  uint64_t v16 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v24 = v16;
  State.wrappedValue.getter();
  uint64_t v18 = v25[2];
  uint64_t v17 = v25[3];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v19 = a1[4];
  if (v19)
  {
    swift_retain();
    sub_1000AC4E4(v18, v17, 8, 12, 13, 0, 3u, v19);
    swift_bridgeObjectRelease();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100045E20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100006560(&qword_100199DE8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100006560(&qword_100199DD8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v6 = static Alignment.leading.getter();
  v6[1] = v10;
  uint64_t v11 = (char *)v6 + *(int *)(sub_100006560(&qword_100199E28) + 44);
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0x4030000000000000;
  v11[16] = 0;
  uint64_t v12 = sub_100006560(&qword_100199E30);
  sub_10004602C(a1, (uint64_t)&v11[*(int *)(v12 + 44)]);
  static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v25[1] = v13;
  v25[2] = v14;
  v25[3] = v15;
  v25[4] = v16;
  char v26 = 0;
  sub_100006560(&qword_100199E38);
  SafeAreaPaddingModifier.init(edges:insets:)();
  uint64_t v17 = static Alignment.leading.getter();
  sub_100051AF0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v17, v18);
  sub_1000067DC((uint64_t)v6, &qword_100199DE8);
  uint64_t v19 = static Alignment.center.getter();
  uint64_t v21 = v20;
  uint64_t v22 = a2 + *(int *)(sub_100006560(&qword_100199DC0) + 36);
  sub_100047570((uint64_t)a1, v22);
  uint64_t v23 = (uint64_t *)(v22 + *(int *)(sub_100006560(&qword_100199DF8) + 36));
  *uint64_t v23 = v19;
  v23[1] = v21;
  return sub_10001D6D8((uint64_t)v9, a2, &qword_100199DD8);
}

uint64_t sub_10004602C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_100006560(&qword_100199E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v45 - v6;
  uint64_t v49 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100006560(&qword_100199E58);
  uint64_t v12 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_100199E60);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_100199E68);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v46 = (uint64_t)&v45 - v24;
  uint64_t v47 = a1;
  uint64_t v25 = a1[1];
  *(void *)&long long v52 = *a1;
  *((void *)&v52 + 1) = v25;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  sub_100033E10((uint64_t)v11);
  swift_release();
  static Animation.spring(response:dampingFraction:blendDuration:)();
  Transaction.init(animation:)();
  sub_100006560(&qword_100199E70);
  sub_10004A0B0();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v26 = v45;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v14, v45);
  uint64_t v27 = &v18[*(int *)(v16 + 44)];
  long long v28 = v53;
  *(_OWORD *)uint64_t v27 = v52;
  *((_OWORD *)v27 + 1) = v28;
  *((_OWORD *)v27 + 2) = v54;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  uint64_t v29 = v48;
  uint64_t v30 = &v48[*(int *)(v49 + 28)];
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #5.0 }
  *uint64_t v29 = _Q0;
  uint64_t v38 = (uint64_t)&v22[*(int *)(v20 + 44)];
  sub_1000484FC((uint64_t)v29, v38, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v38 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v18, (uint64_t)v22, &qword_100199E60);
  sub_100048B18((uint64_t)v29, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_1000067DC((uint64_t)v18, &qword_100199E60);
  uint64_t v39 = v46;
  sub_10001D6D8((uint64_t)v22, v46, &qword_100199E68);
  *(void *)uint64_t v7 = static HorizontalAlignment.leading.getter();
  *((void *)v7 + 1) = 0x4008000000000000;
  v7[16] = 0;
  uint64_t v40 = sub_100006560(&qword_100199E90);
  sub_100046854(v47, (uint64_t)&v7[*(int *)(v40 + 44)]);
  sub_1000066D4(v39, (uint64_t)v22, &qword_100199E68);
  uint64_t v41 = v50;
  sub_1000066D4((uint64_t)v7, v50, &qword_100199E50);
  uint64_t v42 = v51;
  sub_1000066D4((uint64_t)v22, v51, &qword_100199E68);
  uint64_t v43 = sub_100006560(&qword_100199E98);
  sub_1000066D4(v41, v42 + *(int *)(v43 + 48), &qword_100199E50);
  sub_1000067DC((uint64_t)v7, &qword_100199E50);
  sub_1000067DC(v39, &qword_100199E68);
  sub_1000067DC(v41, &qword_100199E50);
  return sub_1000067DC((uint64_t)v22, &qword_100199E68);
}

uint64_t sub_100046578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncImagePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v12, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v13 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v17 = v13;
    char v18 = 0;
    swift_retain_n();
    sub_100006560(&qword_100199E88);
    sub_10004A12C();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    uint64_t result = swift_release();
    uint64_t v15 = v19;
    char v16 = v20;
  }
  else
  {
    uint64_t v17 = static Color.gray.getter();
    char v18 = 1;
    sub_100006560(&qword_100199E88);
    sub_10004A12C();
    _ConditionalContent<>.init(storage:)();
    uint64_t v15 = v19;
    char v16 = v20;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  *(void *)a2 = v15;
  *(unsigned char *)(a2 + 8) = v16;
  return result;
}

uint64_t sub_100046854@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v3 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v94 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v95 = v4;
  uint64_t v96 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_100198620);
  uint64_t v101 = *(void *)(v5 - 8);
  uint64_t v102 = v5;
  __chkstk_darwin(v5);
  uint64_t v97 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v7 - 8);
  uint64_t v110 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  __chkstk_darwin(v9);
  uint64_t v93 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v10;
  __chkstk_darwin(v11);
  uint64_t v98 = (char *)&v92 - v12;
  uint64_t v13 = sub_100006560(&qword_100199EA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v100 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v99 = (char *)&v92 - v16;
  uint64_t v109 = sub_100006560(&qword_100199610) - 8;
  __chkstk_darwin(v109);
  uint64_t v108 = (uint64_t *)((char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v18 - 8);
  long long v105 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_100006560(&qword_100199620) - 8;
  __chkstk_darwin(v106);
  uint64_t v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v113 = (uint64_t)&v92 - v23;
  uint64_t v104 = a1;
  uint64_t v24 = a1[1];
  uint64_t v114 = *a1;
  uint64_t v115 = v24;
  uint64_t v107 = sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v25 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  static Font.caption2.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v30 = Text.font(_:)();
  uint64_t v32 = v31;
  char v34 = v33;
  swift_release();
  char v35 = v34 & 1;
  sub_1000065A4(v25, v27, v29);
  swift_bridgeObjectRelease();
  LODWORD(v114) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v36 = Text.foregroundStyle<A>(_:)();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  char v42 = v41 & 1;
  uint64_t v43 = v32;
  uint64_t v44 = v104;
  sub_1000065A4(v30, v43, v35);
  swift_bridgeObjectRelease();
  uint64_t v45 = enum case for Text.Case.uppercase(_:);
  uint64_t v46 = type metadata accessor for Text.Case();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 104))(v105, v45, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v50 = v108;
  sub_1000066D4(v48, (uint64_t)v108 + *(int *)(v109 + 36), &qword_100199618);
  *uint64_t v50 = KeyPath;
  sub_1000066D4((uint64_t)v50, (uint64_t)&v21[*(int *)(v106 + 44)], &qword_100199610);
  *(void *)uint64_t v21 = v36;
  *((void *)v21 + 1) = v38;
  v21[16] = v42;
  *((void *)v21 + 3) = v40;
  swift_bridgeObjectRetain();
  sub_100010924(v36, v38, v42);
  sub_1000067DC((uint64_t)v50, &qword_100199610);
  sub_1000067DC(v48, &qword_100199618);
  sub_1000065A4(v36, v38, v42);
  swift_bridgeObjectRelease();
  uint64_t v106 = (uint64_t)v21;
  sub_10001D6D8((uint64_t)v21, v113, &qword_100199620);
  uint64_t v51 = *v44;
  uint64_t v52 = v44[1];
  uint64_t v114 = *v44;
  uint64_t v115 = v52;
  State.wrappedValue.getter();
  uint64_t v53 = v116[7];
  uint64_t v54 = v116[8];
  sub_100023118(v116 + 4, v53);
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 40))(v53, v54);
  uint64_t v57 = v56;
  swift_release();
  if (v57)
  {
    uint64_t v114 = v55;
    uint64_t v115 = v57;
    sub_10002374C();
    uint64_t v58 = Text.init<A>(_:)();
    long long v105 = v59;
    uint64_t v108 = (uint64_t *)(v60 & 1);
    uint64_t v109 = v61;
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    long long v105 = 0;
  }
  uint64_t v114 = v51;
  uint64_t v115 = v52;
  State.wrappedValue.getter();
  uint64_t v62 = v116[7];
  uint64_t v63 = v116[8];
  sub_100023118(v116 + 4, v62);
  uint64_t v64 = (uint64_t)v110;
  (*(void (**)(uint64_t, uint64_t))(v63 + 64))(v62, v63);
  swift_release();
  uint64_t v65 = v111;
  uint64_t v66 = v112;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v64, 1, v112) == 1)
  {
    sub_1000067DC(v64, &qword_100198630);
    uint64_t v67 = 1;
    uint64_t v68 = v102;
    uint64_t v69 = v103;
    uint64_t v71 = (uint64_t)v100;
    uint64_t v70 = v101;
    uint64_t v72 = (uint64_t)v99;
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 32);
    char v74 = v98;
    v73(v98, v64, v66);
    uint64_t v110 = (char *)v58;
    uint64_t v75 = v96;
    sub_1000484FC((uint64_t)v44, v96, type metadata accessor for SetlistDetailSection);
    uint64_t v76 = v93;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v93, v74, v66);
    unint64_t v77 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    unint64_t v78 = (v95 + *(unsigned __int8 *)(v65 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    uint64_t v79 = swift_allocObject();
    uint64_t v80 = v75;
    uint64_t v58 = (uint64_t)v110;
    sub_100049A68(v80, v79 + v77, type metadata accessor for SetlistDetailSection);
    uint64_t v81 = ((uint64_t (*)(unint64_t, char *, uint64_t))v73)(v79 + v78, v76, v66);
    __chkstk_darwin(v81);
    uint64_t v82 = v97;
    Button.init(action:label:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v98, v66);
    uint64_t v70 = v101;
    uint64_t v68 = v102;
    uint64_t v72 = (uint64_t)v99;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v99, v82, v102);
    uint64_t v67 = 0;
    uint64_t v69 = v103;
    uint64_t v71 = (uint64_t)v100;
  }
  uint64_t v84 = (uint64_t)v105;
  uint64_t v83 = v106;
  uint64_t v85 = v113;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v72, v67, 1, v68);
  sub_1000066D4(v85, v83, &qword_100199620);
  sub_1000066D4(v72, v71, &qword_100199EA0);
  sub_1000066D4(v83, v69, &qword_100199620);
  uint64_t v86 = sub_100006560(&qword_100199EA8);
  uint64_t v87 = (uint64_t *)(v69 + *(int *)(v86 + 48));
  uint64_t v88 = v58;
  uint64_t v89 = v109;
  *uint64_t v87 = v58;
  v87[1] = v89;
  char v90 = (char)v108;
  v87[2] = (uint64_t)v108;
  v87[3] = v84;
  sub_1000066D4(v71, v69 + *(int *)(v86 + 64), &qword_100199EA0);
  sub_10004A1D4(v88, v89, v90, v84);
  sub_1000067DC(v72, &qword_100199EA0);
  sub_1000067DC(v85, &qword_100199620);
  sub_1000067DC(v71, &qword_100199EA0);
  sub_10004A218(v88, v89, v90, v84);
  return sub_1000067DC(v83, &qword_100199620);
}

uint64_t sub_1000472D4()
{
  uint64_t v0 = type metadata accessor for OpenURLAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistDetailSection(0);
  sub_10001D160((uint64_t)v3);
  OpenURLAction.callAsFunction(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000473C0@<X0>(uint64_t a1@<X8>)
{
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  char v12 = v11 & 1;
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Color.blue.getter();
  uint64_t v13 = Text.foregroundStyle<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  sub_1000065A4(v7, v9, v12);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v17 & 1;
  *(void *)(a1 + 24) = v19;
  return result;
}

uint64_t sub_100047570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v31[1] = a1;
  uint64_t v33 = a2;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v31 - v7;
  uint64_t v9 = type metadata accessor for RoundedRectangle();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  char v12 = (_OWORD *)((char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100006560(&qword_100199E40);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100006560(&qword_100199E48);
  __chkstk_darwin(v32);
  char v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (char *)v12 + *(int *)(v10 + 28);
  uint64_t v19 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v20 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  __asm { FMOV            V0.2D, #10.0 }
  *char v12 = _Q0;
  type metadata accessor for SetlistDetailSection(0);
  sub_10001D3A4((uint64_t)v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.light(_:), v2);
  LOBYTE(v18) = static ColorScheme.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v5, v2);
  v26(v8, v2);
  if (v18)
  {
    uint64_t v27 = static Color.white.getter();
  }
  else
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_1001AA340;
    swift_retain();
  }
  sub_1000484FC((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(void *)&v15[*(int *)(v13 + 36)] = v27;
  sub_100048B18((uint64_t)v12, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  if (qword_100198078 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_100199AE8;
  sub_1000066D4((uint64_t)v15, (uint64_t)v17, &qword_100199E40);
  char v29 = &v17[*(int *)(v32 + 36)];
  *(void *)char v29 = v28;
  *(_OWORD *)(v29 + 8) = xmmword_10014E610;
  *((void *)v29 + 3) = 0x4010000000000000;
  swift_retain();
  sub_1000067DC((uint64_t)v15, &qword_100199E40);
  return sub_10001D6D8((uint64_t)v17, v33, &qword_100199E48);
}

uint64_t sub_100047944()
{
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v5 = Text.font(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_release();
  sub_1000065A4(v0, v2, v4);
  swift_bridgeObjectRelease();
  static Color.blue.getter();
  uint64_t v10 = Text.foregroundStyle<A>(_:)();
  sub_1000065A4(v5, v7, v9 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100047AF0(uint64_t a1)
{
  LOBYTE(v6) = 1;
  sub_100006560(&qword_100198448);
  State.wrappedValue.setter();
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v2 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    swift_retain();
    sub_1000AC4E4(v3, v2, 8, 12, 22, 0, 3u, v4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100049A00((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100047C2C(uint64_t a1)
{
  v1[5] = a1;
  type metadata accessor for MainActor();
  v1[6] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[7] = v3;
  v1[8] = v2;
  return _swift_task_switch(sub_100047CC4, v3, v2);
}

uint64_t sub_100047CC4()
{
  uint64_t v1 = (uint64_t *)v0[5];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  sub_100006560(&qword_100199BB8);
  State.wrappedValue.getter();
  v0[9] = v0[4];
  if (qword_100198080 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100199AF0;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100047DC4;
  return sub_100034668(v4);
}

uint64_t sub_100047DC4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_100047F08, v3, v2);
}

uint64_t sub_100047F08()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100047F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  uint64_t v13 = sub_100006560(&qword_100199D68);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v15 = static HorizontalAlignment.center.getter();
  *((void *)v15 + 1) = 0x402E000000000000;
  v15[16] = 0;
  uint64_t v16 = sub_100006560(&qword_100199D70);
  sub_100044B8C(v4, &v15[*(int *)(v16 + 44)]);
  sub_1000484FC((uint64_t)v4, (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistDetailSection);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = swift_allocObject();
  sub_100049A68((uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for SetlistDetailSection);
  static TaskPriority.userInitiated.getter();
  uint64_t v19 = (char *)(a2 + *(int *)(sub_100006560(&qword_100199D88) + 36));
  uint64_t v20 = type metadata accessor for _TaskModifier();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v19[*(int *)(v20 + 20)], v9, v6);
  *(void *)uint64_t v19 = &unk_100199D80;
  *((void *)v19 + 1) = v18;
  sub_1000066D4((uint64_t)v15, a2, &qword_100199D68);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_1000067DC((uint64_t)v15, &qword_100199D68);
}

uint64_t sub_100048210@<X0>(uint64_t a1@<X8>)
{
  return sub_10004358C(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100048220()
{
  unint64_t result = qword_100199C30;
  if (!qword_100199C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199C30);
  }
  return result;
}

uint64_t sub_100048278()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000483F8()
{
  return sub_100049D74(type metadata accessor for SetlistView, sub_10004450C);
}

unint64_t sub_100048424()
{
  unint64_t result = qword_100199C40;
  if (!qword_100199C40)
  {
    sub_10000650C(&qword_100199C38);
    sub_100048498();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199C40);
  }
  return result;
}

unint64_t sub_100048498()
{
  unint64_t result = qword_100199C48;
  if (!qword_100199C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199C48);
  }
  return result;
}

uint64_t sub_1000484FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100048564()
{
  return sub_1000339B8(v0[2], v0[3], v0[4]);
}

uint64_t sub_100048584@<X0>(uint64_t a1@<X8>)
{
  return sub_1000438FC(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10004858C()
{
  unint64_t result = qword_100199C68;
  if (!qword_100199C68)
  {
    sub_10000650C(&qword_100199C60);
    sub_10000650C(&qword_100199C70);
    sub_10000650C(&qword_100199C78);
    type metadata accessor for PlainButtonStyle();
    sub_100010484(&qword_100199C80, &qword_100199C78);
    sub_100049A00(&qword_100198548, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199C68);
  }
  return result;
}

uint64_t sub_1000486E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100023118(a1, a1[3]);
  uint64_t result = dispatch thunk of MusicItem.id.getter();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100048734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  uint64_t v6 = (void *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  return sub_100043C48(a1, v6, a2);
}

uint64_t sub_1000487B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100048818()
{
  uint64_t v1 = (int *)(type metadata accessor for SetlistView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[8];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  sub_100029A08(v0 + ((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return swift_deallocObject();
}

uint64_t sub_1000489B4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SetlistView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100044188(v0 + v2, v3);
}

uint64_t sub_100048A40@<X0>(uint64_t a1@<X8>)
{
  return sub_100044268(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_100048A48()
{
  unint64_t result = qword_100199CA8;
  if (!qword_100199CA8)
  {
    sub_10000650C(&qword_100199CA0);
    sub_100049A00(&qword_100199CB0, (void (*)(uint64_t))type metadata accessor for SetlistSongRowView);
    sub_100010484(&qword_100198D68, &qword_100198D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199CA8);
  }
  return result;
}

uint64_t sub_100048B18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100048B78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    *(void *)(a1 + 40) = a2[5];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      void *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100048D70(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100048EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *(void *)(a1 + 24) = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    void *v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    void *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100049058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_1000067DC(a1 + v6, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 32);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_1000067DC(a1 + v10, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10004924C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for OpenURLAction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000493D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    sub_1000067DC(a1 + v6, &qword_1001982C0);
    uint64_t v9 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_1000067DC(a1 + v11, &qword_100198A98);
    uint64_t v14 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000495CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000495E0);
}

uint64_t sub_1000495E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198B50);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(qword_100198F38);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100049714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049728);
}

void *sub_100049728(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198B50);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(qword_100198F38);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10004985C()
{
  sub_100049974(319, (unint64_t *)&qword_100198BC0, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v0 <= 0x3F)
  {
    sub_100049974(319, (unint64_t *)&qword_100198FC0, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100049974(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000499C8()
{
  return sub_10004A5AC(&qword_100199D58, &qword_100199BB0, &qword_100199D60, &qword_100199B90);
}

uint64_t sub_100049A00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100049A48()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100049A68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100049AD0()
{
  uint64_t v2 = *(void *)(type metadata accessor for SetlistDetailSection(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_10004A678;
  return sub_100047C2C(v3);
}

uint64_t sub_100049BA0()
{
  uint64_t v1 = type metadata accessor for SetlistDetailSection(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 28);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 32);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100049D48()
{
  return sub_100049D74(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_100045AB8);
}

uint64_t sub_100049D74(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_100049DF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100045E20(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100049DF8()
{
  unint64_t result = qword_100199DC8;
  if (!qword_100199DC8)
  {
    sub_10000650C(&qword_100199DC0);
    sub_100049E98();
    sub_100010484(&qword_100199DF0, &qword_100199DF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199DC8);
  }
  return result;
}

unint64_t sub_100049E98()
{
  unint64_t result = qword_100199DD0;
  if (!qword_100199DD0)
  {
    sub_10000650C(&qword_100199DD8);
    sub_100010484(&qword_100199DE0, &qword_100199DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199DD0);
  }
  return result;
}

unint64_t sub_100049F38()
{
  unint64_t result = qword_100199E00;
  if (!qword_100199E00)
  {
    sub_10000650C(&qword_100199DB0);
    sub_100010484(&qword_100199E08, &qword_100199DA8);
    sub_10000EC40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199E00);
  }
  return result;
}

unint64_t sub_100049FE0()
{
  unint64_t result = qword_100199E20;
  if (!qword_100199E20)
  {
    sub_10000650C(&qword_100199E18);
    sub_100010484(&qword_100198DE0, &qword_100198DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199E20);
  }
  return result;
}

uint64_t sub_10004A084()
{
  return sub_100049D74(type metadata accessor for SetlistDetailSection, sub_100047AF0);
}

unint64_t sub_10004A0B0()
{
  unint64_t result = qword_100199E78;
  if (!qword_100199E78)
  {
    sub_10000650C(&qword_100199E70);
    sub_10004A12C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199E78);
  }
  return result;
}

unint64_t sub_10004A12C()
{
  unint64_t result = qword_100199E80;
  if (!qword_100199E80)
  {
    sub_10000650C(&qword_100199E88);
    sub_1000196B4();
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100199E80);
  }
  return result;
}

uint64_t sub_10004A1D4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100010924(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10004A218(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000065A4(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004A25C()
{
  uint64_t v1 = type metadata accessor for SetlistDetailSection(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 28);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v2 + *(int *)(v1 + 32);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v11 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_10004A4A0()
{
  type metadata accessor for SetlistDetailSection(0);
  type metadata accessor for URL();

  return sub_1000472D4();
}

uint64_t sub_10004A56C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000473C0(a1);
}

uint64_t sub_10004A574()
{
  return sub_10004A5AC(&qword_100199EB0, &qword_100199D88, &qword_100199EB8, &qword_100199D68);
}

uint64_t sub_10004A5AC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    sub_100010484(a3, a4);
    sub_100049A00(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004A67C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  return sub_1000066D4(v3, a1, (uint64_t *)&unk_10019D3D0);
}

uint64_t sub_10004A750@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  return sub_1000066D4(v4, a2, (uint64_t *)&unk_10019D3D0);
}

uint64_t sub_10004A824(uint64_t a1)
{
  sub_1000066D4(a1, (uint64_t)v2, (uint64_t *)&unk_10019D3D0);
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v2, (uint64_t *)&unk_10019D3D0);
}

uint64_t sub_10004A914(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  sub_10004E184(a2, v3, (uint64_t *)&unk_10019D3D0);
  return swift_endAccess();
}

void *sub_10004A988()
{
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  id v2 = v1;
  return v1;
}

id sub_10004AA38@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  *a2 = v4;

  return v4;
}

void sub_10004AAF8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10004ABD4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  return sub_1000066D4(v3, a1, &qword_1001997B8);
}

uint64_t sub_10004ACA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  return sub_1000066D4(v4, a2, &qword_1001997B8);
}

uint64_t sub_10004AD7C(uint64_t a1)
{
  sub_1000066D4(a1, (uint64_t)v2, &qword_1001997B8);
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)v2, &qword_1001997B8);
}

uint64_t sub_10004AE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  sub_10004E184(a2, v3, &qword_1001997B8);
  return swift_endAccess();
}

uint64_t sub_10004AEE0@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  double v5 = *(double *)(v3 + 16);
  double v6 = 1.0;
  if (v5 <= 1.0) {
    double v6 = *(double *)(v3 + 16);
  }
  if ((*(void *)&v5 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v5 & 0x7FF0000000000000) == 0 || v5 < 0.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = v6;
  }
  *a2 = v9;
  return result;
}

double sub_10004AFBC()
{
  swift_getKeyPath();
  sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(double *)(v0 + 16);
}

uint64_t sub_10004B05C()
{
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
}

uint64_t sub_10004B104@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
  return result;
}

uint64_t sub_10004B1B4()
{
  return swift_release();
}

id sub_10004B284()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v2 = &v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver];
  *id v2 = 0u;
  v2[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player] = 0;
  uint64_t v3 = &v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((void *)v3 + 4) = 0;
  v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status] = 0;
  uint64_t v4 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock;
  type metadata accessor for PlaybackProgressUpdater(0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  sub_100006560(&qword_10019A010);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)(v5 + 24) = v6;
  uint64_t v7 = v0;
  ObservationRegistrar.init()();
  sub_100006560(&qword_10019A018);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v5;
  *(void *)&v0[v4] = v8;
  ObservationRegistrar.init()();

  v10.receiver = v7;
  v10.super_class = ObjectType;
  return [super init];
}

void sub_10004B3D4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v9 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer___observationRegistrar;
  v39[0] = v2;
  v35[0] = sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  v35[1] = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess();
  sub_1000066D4(v10, (uint64_t)v39, &qword_1001997B8);
  uint64_t v11 = v40;
  if (v40)
  {
    uint64_t v12 = sub_100023118(v39, v40);
    uint64_t v13 = *(void *)(v11 - 8);
    __n128 v14 = __chkstk_darwin(v12);
    uint64_t v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v13 + 16))(v16, v14);
    sub_1000067DC((uint64_t)v39, &qword_1001997B8);
    uint64_t v17 = dispatch thunk of MusicItem.id.getter();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
  }
  else
  {
    sub_1000067DC((uint64_t)v39, &qword_1001997B8);
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  sub_100023118(a1, a1[3]);
  uint64_t v20 = dispatch thunk of MusicItem.id.getter();
  if (v19)
  {
    if (v17 == v20 && v19 == v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      if (qword_100198180 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10003345C(v23, (uint64_t)qword_1001AA440);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v24, v25)) {
        goto LABEL_20;
      }
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v27 = "Attempting to setup the same song already in the player";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
      swift_slowDealloc();
LABEL_20:

      return;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = a1[3];
  uint64_t v29 = a1[4];
  sub_100023118(a1, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 104))(v28, v29);
  uint64_t v30 = v37;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v6, 1, v7) == 1)
  {
    sub_1000067DC((uint64_t)v6, &qword_100198630);
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10003345C(v31, (uint64_t)qword_1001AA440);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_20;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    uint64_t v27 = "Preview playback setup initiated but no song preview url to setup.";
    goto LABEL_19;
  }
  uint64_t v32 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v36, v6, v7);
  sub_10004BA48();
  sub_1000487B4((uint64_t)a1, (uint64_t)v39);
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  v35[-2] = v2;
  v35[-1] = v39;
  uint64_t v38 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1000067DC((uint64_t)v39, &qword_1001997B8);
  uint64_t v34 = swift_getKeyPath();
  __chkstk_darwin(v34);
  v35[-2] = v2;
  LOBYTE(v35[-1]) = 1;
  v39[0] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10004BD08(v32);
  sub_10004C25C();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v7);
}

uint64_t sub_10004BA48()
{
  sub_10004CDE8();
  swift_getKeyPath();
  *(void *)&long long v12 = v0;
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player;
  [*(id *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player) pause];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess();
  sub_1000066D4(v2, (uint64_t)&v10, (uint64_t *)&unk_10019D3D0);
  if (v11)
  {
    sub_10004E228(&v10, &v12);
    swift_getKeyPath();
    *(void *)&long long v10 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v3 = *(void **)(v0 + v1);
    if (v3)
    {
      sub_100023118(&v12, v13);
      id v4 = v3;
      [v4 removeTimeObserver:_bridgeAnythingToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
    }
    sub_100029A08((uint64_t)&v12);
  }
  else
  {
    sub_1000067DC((uint64_t)&v10, (uint64_t *)&unk_10019D3D0);
  }
  swift_getKeyPath();
  *(void *)&long long v12 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void **)(v0 + v1);
  if (v5)
  {
    id v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 removeObserver:v0 forKeyPath:v7];
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(void *)&long long v12 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void sub_10004BD08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v45 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v41 = v5;
  uint64_t v43 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_allocWithZone((Class)AVURLAsset);
  uint64_t v42 = a1;
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  id v10 = [v6 initWithURL:v8 options:0];

  id v11 = [objc_allocWithZone((Class)AVPlayerItem) initWithAsset:v10];
  id v12 = [objc_allocWithZone((Class)AVPlayer) initWithPlayerItem:v11];
  swift_getKeyPath();
  uint64_t v47 = v2;
  id v48 = v12;
  uint64_t v13 = (char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer___observationRegistrar;
  aBlock = v2;
  uint64_t v14 = sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  uint64_t v44 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

  swift_getKeyPath();
  aBlock = v2;
  uint64_t v46 = v14;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = *(void **)((char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  if (v15)
  {
    id v16 = v15;
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 addObserver:v2 forKeyPath:v17 options:1 context:0];

    id v18 = [self defaultCenter];
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v16 currentItem];
    id v40 = v11;
    id v21 = v20;
    [v18 addObserver:v2 selector:"playerDidFinishPlaying" name:v19 object:v20];

    CMTime v56 = CMTime.init(value:timescale:)(1, 5);
    CMTimeValue value = v56.value;
    LODWORD(v19) = v56.timescale;
    CMTimeEpoch epoch = v56.epoch;
    uint64_t v37 = HIDWORD(*(void *)&v56.timescale);
    sub_10004DF24();
    char v22 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v23 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v25 = v42;
    uint64_t v26 = v43;
    uint64_t v42 = 0;
    uint64_t v27 = v45;
    v24(v43, v25, v45);
    uint64_t v28 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v39 = v13;
    uint64_t v29 = (v28 + 32) & ~v28;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v23;
    *(void *)(v30 + 24) = v16;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v30 + v29, v26, v27);
    uint64_t v54 = sub_10004E038;
    uint64_t v55 = v30;
    aBlock = _NSConcreteStackBlock;
    unint64_t v51 = 1107296256;
    uint64_t v52 = sub_10004CD7C;
    uint64_t v53 = &unk_10018E1F0;
    uint64_t v31 = _Block_copy(&aBlock);
    id v32 = v16;
    swift_retain();
    swift_release();
    aBlock = (void **)value;
    unint64_t v51 = __PAIR64__(v37, v19);
    uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
    id v33 = [v32 addPeriodicTimeObserverForInterval:&aBlock queue:v22 usingBlock:v31];
    _Block_release(v31);

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v35 - 2) = (uint64_t)v2;
    *(&v35 - 1) = (uint64_t)&aBlock;
    uint64_t v49 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_1000067DC((uint64_t)&aBlock, (uint64_t *)&unk_10019D3D0);
  }
  else
  {
  }
}

void sub_10004C25C()
{
  swift_getKeyPath();
  uint64_t v15 = v0;
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player];
  if (v2 && (id v3 = [v2 error]) != 0)
  {

    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10003345C(v4, (uint64_t)qword_1001AA440);
    uint64_t v5 = v0;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v9 = *(void **)&v0[v1];
      if (v9 && (id v10 = [v9 error]) != 0)
      {
        id v11 = v10;
        swift_getErrorValue();
        uint64_t v12 = Error.localizedDescription.getter();
        unint64_t v14 = v13;
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v14 = 0xE000000000000000;
      }
      sub_10004D828(v12, v14, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Playback initiated but player has error: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    swift_getKeyPath();
    uint64_t v15 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    [*(id *)&v0[v1] play];
  }
}

id sub_10004C564()
{
  ObjectType = (objc_class *)swift_getObjectType();
  sub_10004BA48();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_10004C6C4()
{
  return type metadata accessor for MusicPreviewPlayer(0);
}

uint64_t type metadata accessor for MusicPreviewPlayer(uint64_t a1)
{
  return sub_10002DE00(a1, (uint64_t *)&unk_100199F18);
}

void sub_10004C830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (os_unfair_lock_s *)(a4 + 24);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(a4 + 24)))
  {
    sub_10004E100((uint64_t *)(a4 + 16));
    os_unfair_lock_unlock(v5);
  }
}

void sub_10004C89C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  id v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a2 currentItem];
  if (!v11)
  {
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10003345C(v15, (uint64_t)qword_1001AA440);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v30 = a1;
      NSString v19 = (uint8_t *)v18;
      v31[0] = swift_slowAlloc();
      *(_DWORD *)NSString v19 = 136315138;
      v29[1] = v19 + 4;
      sub_10004E13C(&qword_100199660, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v31[3] = sub_10004D828(v20, v21, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid or missing duration for current item %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v30;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }

    uint64_t v22 = *a1;
    uint64_t v23 = (os_unfair_lock_s *)(*(void *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v23);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v29[-2] = v22;
    v29[-1] = 0;
    v31[0] = v22;
    sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
    goto LABEL_13;
  }
  uint64_t v12 = v11;
  [v11 duration];

  CMTime.seconds.getter();
  if (v13 > 0.0)
  {
    double v14 = v13;
    if ((~*(void *)&v13 & 0x7FF0000000000000) != 0 || (*(void *)&v13 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      CMTime.seconds.getter();
      double v26 = v25 / v14;
      uint64_t v27 = *a1;
      uint64_t v23 = (os_unfair_lock_s *)(*(void *)(*a1 + 24) + 16);
      os_unfair_lock_lock(v23);
      uint64_t v28 = swift_getKeyPath();
      __chkstk_darwin(v28);
      v29[-2] = v27;
      *(double *)&v29[-1] = v26;
      v31[0] = v27;
      sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
LABEL_13:
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      os_unfair_lock_unlock(v23);
    }
  }
}

uint64_t sub_10004CD7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(v2, v3, v4);

  return swift_release();
}

uint64_t sub_10004CDE8()
{
  CMTimeValue v1 = v0;
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10003345C(v2, (uint64_t)qword_1001AA440);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preview Playback ended.", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
  if (os_unfair_lock_trylock(v6 + 6))
  {
    sub_10004D0F8((uint64_t)&v6[4]);
    os_unfair_lock_unlock(v6 + 6);
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v14 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v8 = *(void **)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  if (v8)
  {
    CMTimeScale timescale = kCMTimeZero.timescale;
    CMTimeFlags flags = kCMTimeZero.flags;
    CMTimeEpoch epoch = kCMTimeZero.epoch;
    *(void *)&long long v14 = kCMTimeZero.value;
    *((void *)&v14 + 1) = __PAIR64__(flags, timescale);
    *(void *)&long long v15 = epoch;
    CMTimeEpoch v20 = epoch;
    CMTimeValue value = kCMTimeZero.value;
    CMTimeScale v22 = timescale;
    CMTimeFlags v23 = flags;
    CMTimeEpoch v24 = epoch;
    CMTimeValue v17 = kCMTimeZero.value;
    CMTimeScale v18 = timescale;
    CMTimeFlags v19 = flags;
    [v8 seekToTime:&v14 toleranceBefore:&value toleranceAfter:&v17];
  }
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = swift_getKeyPath();
  __chkstk_darwin(v12);
  CMTimeValue value = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_1000067DC((uint64_t)&v14, &qword_1001997B8);
}

void sub_10004D0F8(uint64_t a1)
{
  CMTimeValue v1 = (os_unfair_lock_s *)(*(void *)(*(void *)a1 + 24) + 16);
  os_unfair_lock_lock(v1);
  swift_getKeyPath();
  sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_10004D234()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_10004D2FC()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_10004AEE0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_10004D368()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
}

void sub_10004D410(void *a1)
{
}

void sub_10004D434()
{
}

id sub_10004D458()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return [*(id *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player) pause];
}

double sub_10004D50C@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10004E13C(&qword_10019A008, (void (*)(uint64_t))type metadata accessor for PlaybackProgressUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_10004D5B4()
{
  return swift_release();
}

uint64_t sub_10004D68C()
{
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC15ShazamEventsAppP33_8D663A7C818D454EECC930098910A96A23PlaybackProgressUpdater___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10004D734()
{
  return type metadata accessor for PlaybackProgressUpdater(0);
}

uint64_t type metadata accessor for PlaybackProgressUpdater(uint64_t a1)
{
  return sub_10002DE00(a1, qword_100199F58);
}

uint64_t sub_10004D75C()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10004D810()
{
}

uint64_t sub_10004D828(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10004D8FC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10004DE80((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10004DE80((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100029A08((uint64_t)v12);
  return v7;
}

uint64_t sub_10004D8FC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10004DAB8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10004DAB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10004DB50(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10004DD30(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10004DD30(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10004DB50(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10004DCC8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10004DCC8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100006560(&qword_100199FF8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10004DD30(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100006560(&qword_100199FF8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  double v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004DE80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004DEE8()
{
  return sub_10004AE6C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10004DF0C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status) = *(unsigned char *)(v0 + 24);
}

unint64_t sub_10004DF24()
{
  unint64_t result = qword_10019A000;
  if (!qword_10019A000)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10019A000);
  }
  return result;
}

uint64_t sub_10004DF64()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_10004E038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  uint64_t v7 = *(void *)(v3 + 16);

  sub_10004C830(a1, a2, a3, v7);
}

uint64_t sub_10004E0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004E0D4()
{
  return swift_release();
}

uint64_t sub_10004E0E4()
{
  return sub_10004A914(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10004E100(uint64_t *a1)
{
  sub_10004C89C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

double sub_10004E12C()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 16) = result;
  return result;
}

uint64_t sub_10004E13C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004E184(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100006560(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_10004E1E8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  *(void *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player) = v2;
  id v4 = v2;
}

_OWORD *sub_10004E228(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10004E238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return;
  }
  uint64_t v5 = v4;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return;
  }
  if (!a4 || !*(void *)(a4 + 16))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_17;
  }
  uint64_t v7 = NSKeyValueChangeNewKey;
  unint64_t v8 = sub_1000A81F4((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    long long v15 = 0u;
    long long v16 = 0u;

    goto LABEL_17;
  }
  sub_10004DE80(*(void *)(a4 + 56) + 32 * v8, (uint64_t)&v15);

  if (!*((void *)&v16 + 1))
  {
LABEL_17:
    sub_1000067DC((uint64_t)&v15, (uint64_t *)&unk_10019D3D0);
    return;
  }
  if (swift_dynamicCast())
  {
    if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      uint64_t v10 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
      size_t v11 = (uint64_t *)&v10[4];
      uint64_t v12 = v10 + 6;
      os_unfair_lock_lock(v10 + 6);
      sub_10004AEE0(v11, (double *)&v15);
      os_unfair_lock_unlock(v12);
      if ((~(void)v15 & 0x7FF0000000000000) != 0 || (v15 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        os_unfair_lock_lock(v12);
        sub_10004AEE0(v11, (double *)&v15);
        os_unfair_lock_unlock(v12);
        if (*(double *)&v15 > 0.0) {
          goto LABEL_20;
        }
      }
    }
    if (v14 != 0.0)
    {
LABEL_20:
      uint64_t KeyPath = swift_getKeyPath();
      __chkstk_darwin(KeyPath);
      *(void *)&long long v15 = v5;
      sub_10004E13C(&qword_100199FF0, (void (*)(uint64_t))type metadata accessor for MusicPreviewPlayer);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
    }
  }
}

uint64_t sub_10004E54C()
{
  return sub_10004E0E4();
}

uint64_t sub_10004E564()
{
  return sub_10004DEE8();
}

void sub_10004E57C()
{
}

double sub_10004E594()
{
  return sub_10004E12C();
}

uint64_t sub_10004E5AC()
{
  return 1;
}

Swift::Int sub_10004E5B4()
{
  return Hasher._finalize()();
}

void sub_10004E5F8()
{
}

Swift::Int sub_10004E620()
{
  return Hasher._finalize()();
}

uint64_t sub_10004E670()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_10004E690, 0, 0);
}

uint64_t sub_10004E690()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 48) = v1;
  swift_unknownObjectWeakInit();
  long long v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_100006560(&qword_10019A0F0);
  *long long v2 = v0;
  v2[1] = sub_10004E7A8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x8000000100157BE0, sub_10004F3F0, v1, v3);
}

uint64_t sub_10004E7A8()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v2 = sub_100016C28;
  }
  else
  {
    swift_release();
    long long v2 = sub_10004E8C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004E8C4()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

void sub_10004E8E4(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019A0E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v6 = (char *)Strong;
    uint64_t v7 = sub_100006560(&qword_10019A070);
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v4, a1, v7);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    uint64_t v9 = (uint64_t)&v6[OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation];
    swift_beginAccess();
    sub_10004F2F0((uint64_t)v4, v9);
    swift_endAccess();
    uint64_t v10 = *(void **)&v6[OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_manager];
    [v10 setDelegate:v6];
    [v10 setDesiredAccuracy:kCLLocationAccuracyKilometer];
    [v10 startUpdatingLocation];
  }
}

uint64_t sub_10004EAA4()
{
  uint64_t v1 = sub_100006560(&qword_10019A0E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019A070);
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_manager) stopUpdatingLocation:v6];
  uint64_t v9 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
    sub_10004F3F8();
    v11[0] = swift_allocError();
    CheckedContinuation.resume(throwing:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  sub_10004F2F0((uint64_t)v3, v9);
  return swift_endAccess();
}

id sub_10004ED84()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10004EE08()
{
  return type metadata accessor for LocationManager();
}

uint64_t type metadata accessor for LocationManager()
{
  uint64_t result = qword_10019A058;
  if (!qword_10019A058) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004EE5C()
{
  sub_10004EEFC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10004EEFC()
{
  if (!qword_10019A068)
  {
    sub_10000650C(&qword_10019A070);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019A068);
    }
  }
}

unint64_t sub_10004EF58(void *a1, unint64_t a2)
{
  uint64_t v5 = sub_100006560(&qword_10019A0E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019A070);
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 stopUpdatingLocation];
  uint64_t v13 = v2 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8)) {
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  if (!(a2 >> 62))
  {
    uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14) {
    goto LABEL_11;
  }
LABEL_4:
  unint64_t result = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_15:
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(a2 + 8 * result + 32);
LABEL_9:
    CMTimeValue v17 = v16;
    swift_bridgeObjectRelease();
    [v17 coordinate];
    uint64_t v19 = v18;
    uint64_t v21 = v20;

LABEL_12:
    v22[0] = v19;
    v22[1] = v21;
    BOOL v23 = v14 == 0;
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    swift_beginAccess();
    sub_10004F2F0((uint64_t)v7, v13);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

unint64_t sub_10004F2B0()
{
  unint64_t result = qword_10019A0D8;
  if (!qword_10019A0D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10019A0D8);
  }
  return result;
}

uint64_t sub_10004F2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019A0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F358(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019A0E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004F3B8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10004F3F0(uint64_t a1)
{
}

unint64_t sub_10004F3F8()
{
  unint64_t result = qword_10019A0F8;
  if (!qword_10019A0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A0F8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationManager.RequestError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for LocationManager.RequestError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004F53CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004F564()
{
  return 0;
}

ValueMetadata *type metadata accessor for LocationManager.RequestError()
{
  return &type metadata for LocationManager.RequestError;
}

unint64_t sub_10004F580()
{
  unint64_t result = qword_10019A100;
  if (!qword_10019A100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A100);
  }
  return result;
}

unint64_t sub_10004F5DC(uint64_t a1)
{
  unint64_t result = sub_10004F604();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004F604()
{
  unint64_t result = qword_10019A170;
  if (!qword_10019A170)
  {
    type metadata accessor for Artwork();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A170);
  }
  return result;
}

uint64_t destroy for EmptyEventsList()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyEventsList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyEventsList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyEventsList()
{
  return &type metadata for EmptyEventsList;
}

uint64_t sub_10004F838()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10004F854@<X0>(uint64_t a1@<X8>)
{
  uint64_t v49 = sub_100006560(&qword_10019A178);
  __chkstk_darwin(v49);
  uint64_t v51 = (uint64_t)v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v47);
  id v48 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v4 - 8);
  uint64_t v50 = (uint64_t)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = static VerticalAlignment.center.getter();
  sub_10004FCD4((uint64_t)&v71);
  long long v7 = v71;
  uint64_t v8 = v72;
  v46[0] = v71;
  uint64_t v9 = *((void *)&v72 + 1);
  v46[1] = v72;
  long long v10 = v73;
  char v11 = v74;
  uint64_t v12 = *((void *)&v74 + 1);
  char v13 = static Edge.Set.all.getter();
  char v70 = 0;
  char v69 = v11;
  char v68 = 1;
  uint64_t v55 = v6;
  uint64_t v56 = 0x402E000000000000;
  char v57 = 0;
  long long v58 = v7;
  uint64_t v59 = v8;
  uint64_t v60 = v9;
  long long v61 = v10;
  char v62 = v11;
  uint64_t v63 = v12;
  char v64 = v13;
  long long v65 = 0u;
  long long v66 = 0u;
  char v67 = 1;
  static Alignment.leading.getter();
  sub_100051B4C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v71, 0.0, 1, 0.0, 1);
  swift_release();
  uint64_t v14 = v48;
  swift_release();
  swift_release();
  sub_1000065A4(v10, *((uint64_t *)&v10 + 1), v11);
  swift_bridgeObjectRelease();
  long long v15 = (char *)v14 + *(int *)(v47 + 28);
  uint64_t v16 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v17 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  __asm { FMOV            V0.2D, #12.0 }
  _OWORD *v14 = _Q0;
  if (qword_100198098 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1001AA340;
  swift_retain();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v24 = v50;
  sub_10001081C((uint64_t)v14, v50);
  uint64_t v25 = v24 + *(int *)(sub_100006560(&qword_10019A188) + 36);
  long long v26 = v53;
  *(_OWORD *)uint64_t v25 = v52;
  *(_OWORD *)(v25 + 16) = v26;
  *(void *)(v25 + 32) = v54;
  uint64_t v27 = sub_100006560(&qword_10019A190);
  *(void *)(v24 + *(int *)(v27 + 52)) = v23;
  *(_WORD *)(v24 + *(int *)(v27 + 56)) = 256;
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v30 = v29;
  uint64_t v31 = (uint64_t *)(v24 + *(int *)(sub_100006560(&qword_10019A198) + 36));
  uint64_t *v31 = v28;
  v31[1] = v30;
  sub_100010934((uint64_t)v14);
  uint64_t v32 = static Alignment.center.getter();
  uint64_t v34 = v33;
  uint64_t v35 = v51;
  sub_1000066D4(v24, v51, &qword_10019A180);
  uint64_t v36 = (uint64_t *)(v35 + *(int *)(v49 + 36));
  *uint64_t v36 = v32;
  v36[1] = v34;
  uint64_t v37 = sub_100006560(&qword_10019A1A0);
  sub_1000066D4(v35, a1 + *(int *)(v37 + 36), &qword_10019A178);
  long long v38 = v84;
  *(_OWORD *)(a1 + 192) = v83;
  *(_OWORD *)(a1 + 208) = v38;
  *(_OWORD *)(a1 + 224) = v85;
  *(void *)(a1 + 240) = v86;
  long long v39 = v80;
  *(_OWORD *)(a1 + 128) = v79;
  *(_OWORD *)(a1 + 144) = v39;
  long long v40 = v82;
  *(_OWORD *)(a1 + 160) = v81;
  *(_OWORD *)(a1 + 176) = v40;
  long long v41 = v76;
  *(_OWORD *)(a1 + 64) = v75;
  *(_OWORD *)(a1 + 80) = v41;
  long long v42 = v78;
  *(_OWORD *)(a1 + 96) = v77;
  *(_OWORD *)(a1 + 112) = v42;
  long long v43 = v72;
  *(_OWORD *)a1 = v71;
  *(_OWORD *)(a1 + 16) = v43;
  long long v44 = v74;
  *(_OWORD *)(a1 + 32) = v73;
  *(_OWORD *)(a1 + 48) = v44;
  sub_10004FEEC((uint64_t)&v71);
  sub_1000067DC(v35, &qword_10019A178);
  sub_1000067DC(v24, &qword_10019A180);
  return sub_10004FF68((uint64_t)&v71);
}

uint64_t sub_10004FCD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = Image.init(systemName:)();
  uint64_t v21 = static Font.title2.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.subheadline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_1000065A4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = 0x3FE6666666666666;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100010924(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_1000065A4(v12, v14, v18);
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004FEDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F854(a1);
}

uint64_t sub_10004FEEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004FF68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_release();
  swift_release();
  swift_release();
  sub_1000065A4(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10004FFF0()
{
  unint64_t result = qword_10019A1A8;
  if (!qword_10019A1A8)
  {
    sub_10000650C(&qword_10019A1A0);
    sub_100050090();
    sub_100010484(qword_10019A1E0, &qword_10019A178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A1A8);
  }
  return result;
}

unint64_t sub_100050090()
{
  unint64_t result = qword_10019A1B0;
  if (!qword_10019A1B0)
  {
    sub_10000650C(&qword_10019A1B8);
    sub_10005010C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A1B0);
  }
  return result;
}

unint64_t sub_10005010C()
{
  unint64_t result = qword_10019A1C0;
  if (!qword_10019A1C0)
  {
    sub_10000650C(&qword_10019A1C8);
    sub_100010484(&qword_10019A1D0, &qword_10019A1D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A1C0);
  }
  return result;
}

uint64_t sub_1000501AC(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100050274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 152))(*(void *)(a1 + 16));
}

uint64_t sub_10005028C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v4 = a3 + *(int *)(type metadata accessor for GuideViewModel() + 36);
  uint64_t result = LocalizedStringKey.init(stringLiteral:)();
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = v6;
  *(unsigned char *)(v4 + 16) = v7 & 1;
  *(void *)(v4 + 24) = v8;
  return result;
}

uint64_t type metadata accessor for GuideViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_10005034C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000503E4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100050530);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_100050544(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100050728);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          char v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            v18[2] = 0;
            v18[3] = 0;
            *char v18 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_100050750()
{
  return sub_100050870(&qword_10019A268, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhoneWallpaper);
}

uint64_t sub_100050798()
{
  return sub_100050870(&qword_10019A270, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum);
}

uint64_t sub_1000507E0()
{
  return sub_100050870(&qword_10019A278, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.Video);
}

uint64_t sub_100050828()
{
  return sub_100050870(&qword_10019A280, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets.WatchFace);
}

uint64_t sub_100050870(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000508CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_100050904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_100050970(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unsigned int v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *v5;
  }
  else
  {
    __chkstk_darwin();
    unsigned int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v5 + 2);
      unsigned int v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unsigned int v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        int v16 = &v8[8 * v9];
        unint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)int v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  __chkstk_darwin();
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(TupleTypeMetadata + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *a1++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_100050B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v5 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100050C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v6 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

double sub_100050D28@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198C00, &qword_100198C08).n128_u64[0];
  return result;
}

double sub_100050D84@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198C48, &qword_100198C50).n128_u64[0];
  return result;
}

__n128 sub_100050DE0@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_1000066D4(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_100006560(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  void v29[2] = v33;
  v29[3] = v34;
  return result;
}

double sub_100050FB0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198CA8, &qword_100198CB0).n128_u64[0];
  return result;
}

double sub_10005100C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198C88, &qword_100198C90).n128_u64[0];
  return result;
}

uint64_t sub_100051068@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_100010924(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

__n128 sub_10005125C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = sub_100006560(&qword_100198D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  uint64_t v25 = (_OWORD *)(a9 + *(int *)(sub_100006560(&qword_100198D60) + 36));
  v25[4] = v31;
  void v25[5] = v32;
  v25[6] = v33;
  *uint64_t v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  v25[2] = v29;
  v25[3] = v30;
  return result;
}

double sub_100051448@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198E10, &qword_100198E18).n128_u64[0];
  return result;
}

double sub_1000514A4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100198E38, &qword_100198E40).n128_u64[0];
  return result;
}

uint64_t sub_100051500@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[11];
  a9[10] = v13[10];
  a9[11] = v24;
  long long v25 = v13[12];
  long long v26 = v13[7];
  a9[6] = v13[6];
  a9[7] = v26;
  long long v27 = v13[9];
  a9[8] = v13[8];
  a9[9] = v27;
  long long v28 = v13[3];
  a9[2] = v13[2];
  a9[3] = v28;
  long long v29 = v13[5];
  a9[4] = v13[4];
  a9[5] = v29;
  long long v30 = v13[1];
  *a9 = *v13;
  a9[1] = v30;
  a9[16] = v35;
  a9[17] = v36;
  a9[18] = v37;
  a9[19] = v38;
  a9[12] = v25;
  a9[13] = v32;
  a9[14] = v33;
  a9[15] = v34;

  return sub_1000635A0((uint64_t)v13);
}

uint64_t sub_1000516DC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20 = a19;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v29 = (void *)static Log.runtimeIssuesLog.getter();
    __int16 v20 = a19;
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = a17;
  *(void *)(a9 + 16) = a18;
  *(unsigned char *)(a9 + 24) = v20 & 1;
  *(unsigned char *)(a9 + 25) = HIBYTE(v20) & 1;
  *(_OWORD *)(a9 + 96) = v35;
  *(_OWORD *)(a9 + 112) = v36;
  *(_OWORD *)(a9 + 128) = v37;
  *(_OWORD *)(a9 + 32) = v31;
  *(_OWORD *)(a9 + 48) = v32;
  *(_OWORD *)(a9 + 64) = v33;
  *(_OWORD *)(a9 + 80) = v34;
  swift_retain();

  return swift_retain();
}

double sub_1000518C8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1001993F0, &qword_1001993F8).n128_u64[0];
  return result;
}

uint64_t sub_100051924@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(unsigned char *)(a9 + 64) = *(unsigned char *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;

  return sub_10003EC94(v13);
}

double sub_100051AF0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100199DE8, &qword_100199DD8).n128_u64[0];
  return result;
}

uint64_t sub_100051B4C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  long long v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  long long v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  long long v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(unsigned char *)(a9 + 128) = *(unsigned char *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;

  return sub_10004FEEC(v13);
}

uint64_t sub_100051D28@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)&v33[32] = *(void *)(v13 + 48);
  *(_OWORD *)long long v33 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)&v33[16] = *(_OWORD *)(v13 + 32);
  long long v34 = *(_OWORD *)&v33[8];
  long long v35 = *(_OWORD *)&v33[24];
  sub_100063768((uint64_t)&v34, (uint64_t)v37);
  long long v24 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v24;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 104) = v29;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 56) = v26;
  *(_OWORD *)(a9 + 72) = v27;
  uint64_t v36 = *((void *)&v35 + 1);
  *(void *)(a9 + 48) = *(void *)(v13 + 48);
  *(_OWORD *)(a9 + 88) = v28;
  sub_1000637C4((uint64_t)v37);
  return sub_10002FE38((uint64_t)&v36);
}

double sub_100051F24@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A5E8, &qword_10019A5F0).n128_u64[0];
  return result;
}

double sub_100051F80@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A608, &qword_10019A610).n128_u64[0];
  return result;
}

double sub_100051FDC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A5F8, &qword_10019A600).n128_u64[0];
  return result;
}

double sub_100052038@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A618, &qword_10019A620).n128_u64[0];
  return result;
}

uint64_t sub_100052094@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(void *)(a9 + 80) = *(void *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_1000636F4(v13);
}

double sub_100052268@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A628, &qword_10019A630).n128_u64[0];
  return result;
}

uint64_t sub_1000522C4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[3];
  a9[2] = v13[2];
  a9[3] = v24;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v13 + 57);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  a9[9] = v31;
  a9[10] = v32;
  a9[11] = v33;
  a9[5] = v27;
  a9[6] = v28;
  a9[7] = v29;
  a9[8] = v30;

  return sub_10006361C((uint64_t)v13);
}

double sub_100052484@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A658, &qword_10019A660).n128_u64[0];
  return result;
}

double sub_1000524E0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A668, &qword_10019A670).n128_u64[0];
  return result;
}

uint64_t sub_10005253C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(a9 + 144) = v24;
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v13 + 160);
  long long v25 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v25;
  long long v26 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v26;
  long long v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  long long v28 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v28;
  *(_OWORD *)(a9 + 232) = v33;
  *(_OWORD *)(a9 + 248) = v34;
  *(_OWORD *)(a9 + 264) = v35;
  *(_OWORD *)(a9 + 280) = v36;
  *(_OWORD *)(a9 + 184) = v30;
  *(_OWORD *)(a9 + 200) = v31;
  *(unsigned char *)(a9 + 176) = *(unsigned char *)(v13 + 176);
  *(_OWORD *)(a9 + 216) = v32;

  return sub_10006365C(v13);
}

double sub_100052728@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A678, &qword_10019A680).n128_u64[0];
  return result;
}

uint64_t sub_100052784@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(unsigned char *)(a9 + 96) = *(unsigned char *)(v13 + 96);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 200) = v34;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 152) = v31;

  return sub_1000637F8(v13);
}

double sub_100052958@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A638, &qword_10019A640).n128_u64[0];
  return result;
}

uint64_t sub_1000529B4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    int v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(void *)(a9 + 112) = *(void *)(v13 + 112);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 152) = v30;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 168) = v31;

  return sub_1000636C8(v13);
}

double sub_100052B90@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_100050DE0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10019A648, &qword_10019A650).n128_u64[0];
  return result;
}

uint64_t sub_100052BEC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

uint64_t sub_100052DA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for CoordinateSpace.local(_:);
  uint64_t v3 = type metadata accessor for CoordinateSpace();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100052E1C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)a3 = sub_100052FA4();
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7 & 1;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = sub_100054ABC(0);
  *(void *)(a3 + 56) = v8;
  *(void *)(a3 + 64) = 0;
  type metadata accessor for RemoteViewConfiguration();
  sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *(void *)(a3 + 72) = EnvironmentObject.init()();
  *(void *)(a3 + 80) = v9;
  unint64_t v10 = (int *)type metadata accessor for EventView();
  unsigned int v11 = (uint64_t *)(a3 + v10[13]);
  *unsigned int v11 = swift_getKeyPath();
  sub_100006560(qword_100198AA0);
  swift_storeEnumTagMultiPayload();
  unint64_t v12 = (uint64_t *)(a3 + v10[14]);
  *unint64_t v12 = swift_getKeyPath();
  sub_100006560(&qword_100198A98);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = (uint64_t *)(a3 + v10[15]);
  *uint64_t v13 = swift_getKeyPath();
  sub_100006560(&qword_100198940);

  return swift_storeEnumTagMultiPayload();
}

double sub_100052F98@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100052FA4()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t sub_100053018(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = *((unsigned __int8 *)v2 + 16);
  uint64_t v6 = type metadata accessor for EventViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return a2(v3, v4, v5, v6, WitnessTable);
}

uint64_t sub_1000530A8()
{
  sub_100006560(qword_10019A300);
  sub_100010484(&qword_10019A490, qword_10019A300);

  return StateObject.wrappedValue.getter();
}

uint64_t sub_100053138()
{
  uint64_t v0 = sub_100006560(&qword_10019A2F0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019A2F8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_100006560(qword_10019A300);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + *(void *)(*(void *)v10 + 104);
  uint64_t v12 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  sub_1000066D4((uint64_t)v9, (uint64_t)v6, &qword_10019A2F8);
  Published.init(initialValue:)();
  sub_1000067DC((uint64_t)v9, &qword_10019A2F8);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v11, v3, v0);
  return v10;
}

uint64_t sub_100053328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_100053330()
{
  sub_100054A24(319, (unint64_t *)&qword_100199860, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_100054A24(319, (unint64_t *)&qword_100198FC0, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F)
    {
      sub_10001B760();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_10005349C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_100035D50();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    char v12 = *((unsigned char *)a2 + 40);
    sub_100035D50();
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = v12;
    uint64_t v13 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = a2[8];
    uint64_t v15 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v15;
    uint64_t v16 = a3[13];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    *(void *)(a1 + 64) = v14;
    swift_retain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[14];
    uint64_t v22 = (void *)(a1 + v21);
    int v23 = (uint64_t *)((char *)a2 + v21);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
    }
    else
    {
      *uint64_t v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = a3[15];
    long long v26 = (void *)(a1 + v25);
    long long v27 = (uint64_t *)((char *)a2 + v25);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = sub_100006560(&qword_100198948);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
    }
    else
    {
      void *v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000537E8(uint64_t a1, int *a2)
{
  sub_10001D0DC();
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[13];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[14];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[15];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v12 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
    if (!result)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      return v11(v8, v9);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_100053A1C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  char v11 = *((unsigned char *)a2 + 40);
  sub_100035D50();
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = a2[8];
  uint64_t v14 = a2[10];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = v14;
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *(void *)(a1 + 64) = v13;
  swift_retain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    void *v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[14];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  else
  {
    *uint64_t v20 = *v21;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = a3[15];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_100006560(&qword_100198948);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  else
  {
    *uint64_t v24 = *v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100053D18(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_100035D50();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10001D0DC();
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  char v11 = *((unsigned char *)a2 + 40);
  sub_100035D50();
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  sub_10001D0DC();
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v12 = a3[13];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    sub_1000067DC(a1 + v12, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = a3[14];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    sub_1000067DC(a1 + v16, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[15];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    sub_1000067DC(a1 + v20, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_100006560(&qword_100198948);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else
    {
      *uint64_t v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100054088(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = a3[13];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[14];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v16 = a3[15];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
    {
      uint64_t v22 = sub_100006560(&qword_100198948);
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100054380(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10001D0DC();
  char v7 = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v7;
  sub_10001D0DC();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_release();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  if (a1 != a2)
  {
    uint64_t v10 = a3[13];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_1000067DC(a1 + v10, qword_100198AA0);
    uint64_t v13 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v15 = a3[14];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    sub_1000067DC(a1 + v15, &qword_100198A98);
    uint64_t v18 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = a3[15];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_1000067DC(a1 + v20, &qword_100198940);
    uint64_t v23 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        uint64_t v26 = sub_100006560(&qword_100198948);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v21, v22, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000546DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000546F0);
}

uint64_t sub_1000546F0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100006560(&qword_100198648);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[13];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_9;
  }
  uint64_t v14 = sub_100006560(&qword_100198950);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[15];

  return v15(v17, a2, v16);
}

uint64_t sub_100054874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054888);
}

uint64_t sub_100054888(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100006560(&qword_100198648);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_7;
  }
  uint64_t v14 = sub_100006560(&qword_100198950);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[15];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for EventView()
{
  return sub_1000068A4();
}

void sub_100054A24(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100054A78()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100054ABC(char a1)
{
  sub_100006560(&qword_1001999F0);
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  sub_100010484(&qword_1001999F8, &qword_1001999F0);

  return ObservedObject.init(wrappedValue:)();
}

uint64_t sub_100054B4C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v216 = a2;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v214 = *(void *)(v3 - 8);
  uint64_t v215 = v3;
  __chkstk_darwin(v3);
  uint64_t v213 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v227);
  uint64_t v212 = (uint64_t)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v237 = *(void *)(a1 - 8);
  uint64_t v234 = *(void *)(v237 + 64);
  __chkstk_darwin(v6);
  uint64_t v230 = (char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = type metadata accessor for CoordinateSpace();
  uint64_t v235 = *(void *)(v236 - 8);
  __chkstk_darwin(v236);
  v233 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = type metadata accessor for NavigationPath();
  uint64_t v226 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for HeroImage();
  type metadata accessor for HeroImageLandscape();
  type metadata accessor for ModifiedContent();
  uint64_t v228 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for _ConditionalContent();
  uint64_t v232 = v9;
  uint64_t v238 = v10;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_10000650C(&qword_10019A388);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019A390);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A398);
  type metadata accessor for ModifiedContent();
  uint64_t v272 = sub_10000650C(&qword_10019A3A0);
  v273 = (ValueMetadata *)type metadata accessor for GuideModule();
  uint64_t v274 = sub_10000650C(&qword_10019A3A8);
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v275 = type metadata accessor for Optional();
  uint64_t v276 = sub_10000650C(&qword_10019A3B0);
  uint64_t v277 = sub_10000650C(&qword_10019A3B8);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  v271 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v272 = v11;
  v273 = (ValueMetadata *)v12;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019A3C0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A3C8);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v272 = v11;
  v273 = (ValueMetadata *)v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v15 = sub_100010484(&qword_10019A3D0, &qword_10019A3C0);
  uint64_t v268 = OpaqueTypeConformance2;
  uint64_t v269 = v15;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v17 = sub_100010484(&qword_100198600, &qword_100198608);
  uint64_t v266 = v16;
  uint64_t v267 = v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = sub_100010484(&qword_10019A3D8, &qword_10019A3C8);
  uint64_t v264 = v18;
  uint64_t v265 = v19;
  uint64_t v228 = (void (*)(uint64_t, char *, uint64_t))v13;
  unint64_t v177 = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for NavigationStack();
  uint64_t v229 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  long long v173 = (char *)&v165 - v21;
  sub_10000650C(&qword_10019A3E0);
  uint64_t v166 = v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v189 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v165 - v23);
  sub_10000650C(&qword_10019A3E8);
  uint64_t v169 = v22;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v188 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v183 = (char *)&v165 - v25;
  sub_10000650C(&qword_10019A3F0);
  uint64_t v170 = v24;
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t v217 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v184 = (char *)&v165 - v27;
  sub_10000650C(&qword_10019A3F8);
  uint64_t v172 = v26;
  uint64_t v218 = type metadata accessor for ModifiedContent();
  uint64_t v201 = *(void *)(v218 - 8);
  __chkstk_darwin(v218);
  v221 = (char *)&v165 - v28;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v29 = type metadata accessor for TicketView();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v165 = v30;
  uint64_t v31 = sub_100010484(&qword_10019A400, &qword_10019A3E0);
  uint64_t v262 = v30;
  uint64_t v263 = v31;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v167 = v32;
  uint64_t v33 = sub_100010484(&qword_10019A408, &qword_10019A3E8);
  uint64_t v260 = v32;
  uint64_t v261 = v33;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v168 = v34;
  uint64_t v35 = sub_100010484(&qword_10019A410, &qword_10019A3F0);
  uint64_t v258 = v34;
  uint64_t v259 = v35;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v171 = v36;
  uint64_t v37 = sub_100010484(&qword_10019A418, &qword_10019A3F8);
  uint64_t v256 = v36;
  uint64_t v257 = v37;
  uint64_t v38 = v218;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v272 = v38;
  v273 = (ValueMetadata *)v29;
  long long v41 = (ValueMetadata *)v29;
  uint64_t v174 = v29;
  uint64_t v175 = v40;
  uint64_t v274 = v39;
  uint64_t v275 = v40;
  uint64_t v176 = v39;
  uint64_t v42 = v40;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v194 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v219 = (char *)&v165 - v44;
  uint64_t v45 = sub_10000650C(&qword_10019A420);
  uint64_t v272 = v38;
  v273 = v41;
  uint64_t v274 = v39;
  uint64_t v275 = v42;
  uint64_t v46 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = sub_10000650C(&qword_10019A428);
  uint64_t v48 = sub_100062068(&qword_10019A430, &qword_10019A428, (void (*)(void))sub_100060494);
  uint64_t v272 = v47;
  v273 = (ValueMetadata *)v48;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v185 = OpaqueTypeMetadata2;
  uint64_t v272 = OpaqueTypeMetadata2;
  v273 = (ValueMetadata *)v45;
  uint64_t v181 = v45;
  uint64_t v178 = v49;
  uint64_t v179 = v46;
  uint64_t v274 = v46;
  uint64_t v275 = v49;
  uint64_t v50 = v49;
  uint64_t v51 = swift_getOpaqueTypeMetadata2();
  uint64_t v199 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  v224 = (char *)&v165 - v52;
  uint64_t v272 = OpaqueTypeMetadata2;
  v273 = (ValueMetadata *)v45;
  uint64_t v274 = v46;
  uint64_t v275 = v50;
  uint64_t v53 = swift_getOpaqueTypeConformance2();
  unint64_t v54 = sub_10001CFA8();
  uint64_t v272 = v51;
  v273 = &type metadata for PromotionalAssetsContentView;
  uint64_t v186 = v51;
  uint64_t v274 = v53;
  uint64_t v275 = v54;
  uint64_t v55 = v53;
  uint64_t v182 = v53;
  unint64_t v180 = v54;
  uint64_t v193 = swift_getOpaqueTypeMetadata2();
  uint64_t v198 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v222 = (char *)&v165 - v56;
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v200 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  v223 = (char *)&v165 - v58;
  uint64_t v191 = v57;
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v197 = v59;
  uint64_t v204 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v192 = (char *)&v165 - v60;
  uint64_t v272 = v51;
  v273 = &type metadata for PromotionalAssetsContentView;
  uint64_t v274 = v55;
  uint64_t v275 = v54;
  uint64_t v187 = swift_getOpaqueTypeConformance2();
  uint64_t v254 = v187;
  uint64_t v255 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v190 = swift_getWitnessTable();
  uint64_t v252 = v190;
  uint64_t v253 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v196 = v61;
  unint64_t v195 = sub_1000604E8();
  uint64_t v272 = v59;
  v273 = (ValueMetadata *)v227;
  uint64_t v274 = v61;
  uint64_t v275 = v195;
  uint64_t v62 = swift_getOpaqueTypeMetadata2();
  uint64_t v202 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v225 = (char *)&v165 - v63;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v203 = v62;
  uint64_t v64 = type metadata accessor for ModifiedContent();
  uint64_t v208 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  v205 = (char *)&v165 - v65;
  type metadata accessor for _TaskModifier();
  uint64_t v209 = v64;
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v210 = *(void *)(v66 - 8);
  uint64_t v211 = v66;
  __chkstk_darwin(v66);
  uint64_t v206 = (char *)&v165 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  uint64_t v207 = (char *)&v165 - v69;
  uint64_t v70 = v232;
  uint64_t v245 = v232;
  uint64_t v246 = v238;
  uint64_t v71 = v231;
  uint64_t v247 = v231;
  long long v72 = v173;
  NavigationStack.init<>(root:)();
  unint64_t v177 = sub_100060598();
  uint64_t v73 = v235;
  uint64_t v74 = (uint64_t)v233;
  uint64_t v75 = v236;
  (*(void (**)(char *, void, uint64_t))(v235 + 104))(v233, enum case for CoordinateSpace.local(_:), v236);
  uint64_t v76 = v166;
  sub_10006A548((uint64_t)&type metadata for EventViewHeightPreferenceKey, v74, (uint64_t)sub_100063848, 0, v166, v165, (uint64_t)v220);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v72, v76);
  uint64_t v77 = v237;
  uint64_t v235 = *(void *)(v237 + 16);
  uint64_t v229 = v237 + 16;
  long long v78 = v230;
  uint64_t v79 = v71;
  uint64_t v80 = v226;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v230, v71, v226);
  uint64_t v81 = *(unsigned __int8 *)(v77 + 80);
  v234 += (v81 + 32) & ~v81;
  uint64_t v82 = (v81 + 32) & ~v81;
  uint64_t v236 = v82;
  v233 = (char *)(v81 | 7);
  uint64_t v83 = swift_allocObject();
  uint64_t v84 = v238;
  *(void *)(v83 + 16) = v70;
  *(void *)(v83 + 24) = v84;
  long long v85 = *(void (**)(uint64_t, char *, uint64_t))(v77 + 32);
  uint64_t v237 = v77 + 32;
  v85(v83 + v82, v78, v80);
  uint64_t v228 = v85;
  sub_1000623DC(&qword_100199910, type metadata accessor for CGSize);
  uint64_t v86 = v183;
  uint64_t v87 = v169;
  uint64_t v88 = v220;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v189 + 8))(v88, v87);
  sub_100060608();
  uint64_t v89 = v184;
  uint64_t v90 = v170;
  sub_10006B310();
  (*(void (**)(char *, uint64_t))(v188 + 8))(v86, v90);
  char v91 = v78;
  uint64_t v92 = v78;
  uint64_t v93 = v226;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v92, v71, v226);
  uint64_t v94 = swift_allocObject();
  uint64_t v95 = v232;
  uint64_t v96 = v238;
  *(void *)(v94 + 16) = v232;
  *(void *)(v94 + 24) = v96;
  v85(v94 + v236, v91, v93);
  sub_1000606EC();
  uint64_t v97 = v172;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v217 + 8))(v89, v97);
  uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter;
  sub_100053018(v93, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v98 = v95;
  uint64_t v243 = v95;
  uint64_t v244 = v96;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  uint64_t v217 = swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v99 = v230;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v230, v79, v93);
  uint64_t v100 = swift_allocObject();
  uint64_t v101 = v238;
  *(void *)(v100 + 16) = v98;
  *(void *)(v100 + 24) = v101;
  v228(v100 + v236, v99, v93);
  swift_checkMetadataState();
  uint64_t v102 = v218;
  uint64_t v103 = v221;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v201 + 8))(v103, v102);
  uint64_t v104 = v93;
  uint64_t v105 = v231;
  sub_100053018(v93, v220);
  uint64_t v241 = v98;
  uint64_t v106 = v98;
  uint64_t v242 = v101;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v107 = v230;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v230, v105, v104);
  uint64_t v108 = swift_allocObject();
  *(void *)(v108 + 16) = v106;
  *(void *)(v108 + 24) = v101;
  v228(v108 + v236, v107, v104);
  uint64_t v109 = v185;
  uint64_t v110 = v219;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v194 + 8))(v110, v109);
  uint64_t v111 = v231;
  sub_100053018(v104, v220);
  uint64_t v112 = v106;
  uint64_t v239 = v106;
  uint64_t v113 = v238;
  uint64_t v240 = v238;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v114 = v230;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v230, v111, v104);
  uint64_t v115 = swift_allocObject();
  *(void *)(v115 + 16) = v112;
  *(void *)(v115 + 24) = v113;
  uint64_t v116 = v114;
  uint64_t v117 = v114;
  uint64_t v118 = v104;
  v228(v115 + v236, v116, v104);
  uint64_t v119 = v186;
  uint64_t v120 = v224;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v199 + 8))(v120, v119);
  uint64_t v121 = v117;
  uint64_t v122 = v117;
  uint64_t v123 = v231;
  uint64_t v124 = (void (*)(char *, uint64_t, uint64_t))v235;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v122, v231, v104);
  uint64_t v125 = swift_allocObject();
  uint64_t v126 = v238;
  *(void *)(v125 + 16) = v232;
  *(void *)(v125 + 24) = v126;
  uint64_t v127 = v228;
  v228(v125 + v236, v121, v104);
  uint64_t v128 = v222;
  uint64_t v129 = v193;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v198 + 8))(v128, v129);
  uint64_t v130 = v230;
  v124(v230, v123, v104);
  uint64_t v131 = swift_allocObject();
  uint64_t v132 = v232;
  uint64_t v133 = v238;
  *(void *)(v131 + 16) = v232;
  *(void *)(v131 + 24) = v133;
  uint64_t v134 = v130;
  v127(v131 + v236, v130, v118);
  uint64_t v135 = v191;
  uint64_t v136 = v192;
  uint64_t v137 = v223;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v200 + 8))(v137, v135);
  uint64_t v138 = v231;
  uint64_t v139 = v212;
  sub_10001CA34(v212);
  ((void (*)(char *, uint64_t, uint64_t))v235)(v134, v138, v118);
  uint64_t v140 = swift_allocObject();
  *(void *)(v140 + 16) = v132;
  *(void *)(v140 + 24) = v133;
  uint64_t v141 = v118;
  v228(v140 + v236, v134, v118);
  uint64_t v143 = v196;
  uint64_t v142 = v197;
  uint64_t v144 = (ValueMetadata *)v227;
  unint64_t v145 = v195;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_1000067DC(v139, &qword_100198948);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v136, v142);
  if (qword_1001980E0 != -1) {
    swift_once();
  }
  uint64_t v272 = v142;
  v273 = v144;
  uint64_t v274 = v143;
  uint64_t v275 = v145;
  uint64_t v146 = swift_getOpaqueTypeConformance2();
  uint64_t v147 = v205;
  uint64_t v148 = v203;
  uint64_t v149 = v225;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v149, v148);
  char v150 = v230;
  ((void (*)(char *, uint64_t, uint64_t))v235)(v230, v231, v141);
  uint64_t v151 = swift_allocObject();
  uint64_t v152 = v238;
  *(void *)(v151 + 16) = v232;
  *(void *)(v151 + 24) = v152;
  v228(v151 + v236, v150, v141);
  uint64_t v153 = sub_1000623DC((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v250 = v146;
  uint64_t v251 = v153;
  uint64_t v154 = v209;
  uint64_t v155 = swift_getWitnessTable();
  uint64_t v156 = v213;
  static TaskPriority.userInitiated.getter();
  uint64_t v157 = v206;
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v214 + 8))(v156, v215);
  (*(void (**)(char *, uint64_t))(v208 + 8))(v147, v154);
  uint64_t v158 = sub_1000623DC(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v248 = v155;
  uint64_t v249 = v158;
  uint64_t v159 = v211;
  swift_getWitnessTable();
  uint64_t v160 = v210;
  uint64_t v161 = *(void (**)(char *, char *, uint64_t))(v210 + 16);
  long long v162 = v207;
  v161(v207, v157, v159);
  long long v163 = *(void (**)(char *, uint64_t))(v160 + 8);
  v163(v157, v159);
  v161(v216, v162, v159);
  return ((uint64_t (*)(char *, uint64_t))v163)(v162, v159);
}

uint64_t sub_100056AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v86 = a1;
  uint64_t v93 = a4;
  uint64_t v92 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v92);
  uint64_t v91 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ColorScheme();
  uint64_t v89 = *(void *)(v7 - 8);
  uint64_t v90 = v7;
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v87 = (uint64_t)&v72 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for HeroImage();
  type metadata accessor for HeroImageLandscape();
  type metadata accessor for ModifiedContent();
  uint64_t v97 = type metadata accessor for _ConditionalContent();
  uint64_t v95 = a2;
  uint64_t v75 = a3;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_10000650C(&qword_10019A388);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019A390);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A398);
  type metadata accessor for ModifiedContent();
  uint64_t v101 = sub_10000650C(&qword_10019A3A0);
  uint64_t v102 = type metadata accessor for GuideModule();
  uint64_t v103 = sub_10000650C(&qword_10019A3A8);
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v104 = type metadata accessor for Optional();
  uint64_t v105 = sub_10000650C(&qword_10019A3B0);
  uint64_t v106 = sub_10000650C(&qword_10019A3B8);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ZStack();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v74 = v15;
  uint64_t v76 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v94 = (char *)&v72 - v16;
  v100[19] = swift_getWitnessTable();
  v100[20] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v101 = v15;
  uint64_t v102 = v97;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019A3C0);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v73 = (uint64_t)&v72 - v18;
  uint64_t v78 = v19;
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v82 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v79 = (char *)&v72 - v21;
  sub_10000650C(&qword_10019A3C8);
  uint64_t v83 = v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v22 - 8);
  uint64_t v85 = v22;
  __chkstk_darwin(v22);
  uint64_t v80 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v81 = (char *)&v72 - v25;
  static Alignment.top.getter();
  uint64_t v26 = v75;
  v100[8] = v95;
  v100[9] = v75;
  uint64_t v27 = v86;
  v100[10] = v86;
  ZStack.init(alignment:content:)();
  uint64_t WitnessTable = type metadata accessor for EventView();
  uint64_t v28 = v27;
  sub_100053018(WitnessTable, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008F2D0();
  swift_release();
  static SafeAreaRegions.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v30 = *(void *)(v27 + 48);
  uint64_t v29 = *(void *)(v27 + 56);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v31 = static MainActor.shared.getter();
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v31;
  void v32[3] = &protocol witness table for MainActor;
  v32[4] = v30;
  v32[5] = v29;
  swift_retain();
  uint64_t v33 = static MainActor.shared.getter();
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = v33;
  v34[3] = &protocol witness table for MainActor;
  v34[4] = v30;
  v34[5] = v29;
  Binding.init(get:set:)();
  uint64_t v35 = v101;
  uint64_t v36 = v102;
  LODWORD(v33) = v103;
  v100[2] = v95;
  v100[3] = v26;
  v100[4] = v28;
  v99[2] = v95;
  v99[3] = v26;
  v99[4] = v28;
  v98[2] = v95;
  v98[3] = v26;
  v98[4] = v28;
  uint64_t v37 = sub_100006560(&qword_10019A4A0);
  uint64_t v38 = sub_100006560(&qword_10019A4A8);
  uint64_t v39 = sub_100006560(&qword_10019A4B0);
  unint64_t v40 = sub_1000614A0();
  unint64_t v41 = sub_100061644();
  unint64_t v42 = sub_1000616C0();
  uint64_t v71 = v40;
  uint64_t v43 = v73;
  uint64_t v44 = v74;
  int v45 = v33;
  uint64_t v46 = v94;
  sub_10006A744(v35, v36, v45, (uint64_t)sub_10006147C, (uint64_t)v100, (void (*)(uint64_t))sub_100061488, (uint64_t)v99, (uint64_t)sub_100061494, v73, (uint64_t)v98, v74, v37, v38, v39, v97, v71, v41, v42);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v46, v44);
  uint64_t v47 = v87;
  sub_10001D3A4(v87);
  uint64_t v49 = v88;
  uint64_t v48 = v89;
  uint64_t v50 = v90;
  (*(void (**)(char *, void, uint64_t))(v89 + 104))(v88, enum case for ColorScheme.light(_:), v90);
  LOBYTE(v46) = static ColorScheme.== infix(_:_:)();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v49, v50);
  v51((char *)v47, v50);
  if (v46)
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v52 = &qword_1001AA340;
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v52 = &qword_1001AA338;
  }
  uint64_t v53 = *v52;
  swift_retain();
  v100[18] = v53;
  static Edge.Set.all.getter();
  uint64_t v101 = v44;
  uint64_t v102 = v97;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v55 = sub_100010484(&qword_10019A3D0, &qword_10019A3C0);
  v100[16] = OpaqueTypeConformance2;
  v100[17] = v55;
  uint64_t v56 = v78;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v58 = v79;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v43, v56);
  static Animation.easeInOut.getter();
  uint64_t v59 = v91;
  sub_10001CA34(v91);
  uint64_t v60 = sub_100010484(&qword_100198600, &qword_100198608);
  v100[14] = v57;
  v100[15] = v60;
  uint64_t v61 = v83;
  uint64_t v62 = swift_getWitnessTable();
  sub_1000604E8();
  uint64_t v63 = v80;
  View.animation<A>(_:value:)();
  swift_release();
  sub_1000067DC(v59, &qword_100198948);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v58, v61);
  uint64_t v64 = sub_100010484(&qword_10019A3D8, &qword_10019A3C8);
  v100[12] = v62;
  v100[13] = v64;
  uint64_t v65 = v85;
  swift_getWitnessTable();
  uint64_t v66 = v84;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  uint64_t v68 = v81;
  v67(v81, v63, v65);
  uint64_t v69 = *(void (**)(char *, uint64_t))(v66 + 8);
  v69(v63, v65);
  v67(v93, v68, v65);
  return ((uint64_t (*)(char *, uint64_t))v69)(v68, v65);
}

uint64_t sub_10005799C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v107 = a1;
  uint64_t v99 = a4;
  uint64_t v108 = (void *)type metadata accessor for EventView();
  uint64_t v98 = *(v108 - 1);
  uint64_t v96 = *(void *)(v98 + 64);
  __chkstk_darwin(v108);
  uint64_t v97 = (char *)&v79 - v6;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_10000650C(&qword_10019A388);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019A390);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A398);
  type metadata accessor for ModifiedContent();
  *(void *)&long long v129 = sub_10000650C(&qword_10019A3A0);
  *((void *)&v129 + 1) = type metadata accessor for GuideModule();
  *(void *)&long long v130 = sub_10000650C(&qword_10019A3A8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  *((void *)&v130 + 1) = type metadata accessor for Optional();
  *(void *)&long long v131 = sub_10000650C(&qword_10019A3B0);
  *((void *)&v131 + 1) = sub_10000650C(&qword_10019A3B8);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v91 = v7;
  uint64_t v8 = type metadata accessor for ObservableScrollView();
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  uint64_t v93 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v92 = (char *)&v79 - v11;
  uint64_t v12 = *(void *)(a2 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  __chkstk_darwin(v16 - 8);
  uint64_t v87 = (uint64_t)&v79 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for HeroImage();
  uint64_t v86 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v79 - v22);
  uint64_t v104 = a2;
  uint64_t v105 = a3;
  uint64_t v100 = type metadata accessor for HeroImageLandscape();
  uint64_t v101 = type metadata accessor for ModifiedContent();
  uint64_t v102 = v18;
  uint64_t v23 = type metadata accessor for _ConditionalContent();
  uint64_t v88 = *(void *)(v23 - 8);
  uint64_t v89 = v23;
  __chkstk_darwin(v23);
  uint64_t v103 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v106 = (char *)&v79 - v26;
  sub_100053018((uint64_t)v108, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  BOOL v27 = sub_10008DEEC();
  swift_release();
  if (v27)
  {
    uint64_t v84 = (char *)type metadata accessor for HeroImageModel();
    uint64_t v83 = Namespace.wrappedValue.getter();
    uint64_t v28 = (void (*)(void, void))v108;
    sub_100053018((uint64_t)v108, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_10008E2A0(v87);
    swift_release();
    uint64_t v29 = sub_100053018((uint64_t)v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v29);
    uint64_t v31 = v104;
    uint64_t v30 = v105;
    *(&v79 - 2) = v104;
    *(&v79 - 1) = v30;
    swift_getKeyPath();
    type metadata accessor for EventViewModel();
    swift_getWitnessTable();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v82 = *((void *)&v129 + 1);
    uint64_t v32 = v129;
    double v33 = *(double *)&v130;
    uint64_t v34 = sub_100053018((uint64_t)v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v34);
    *(&v79 - 2) = v31;
    *(&v79 - 1) = v30;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    sub_100106A44(v83, v87, v32, v82, v123, *((uint64_t *)&v123 + 1), v33, v124);
    sub_100025A48((uint64_t)v20);
    uint64_t v35 = v102;
    swift_getWitnessTable();
    uint64_t v37 = v85;
    uint64_t v36 = v86;
    uint64_t v38 = *(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t))(v86 + 16);
    v38(v85, v20, v35);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v39(v20, v35);
    v38((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v20, (char *)v37, v35);
    uint64_t v109 = swift_getWitnessTable();
    uint64_t v110 = &protocol witness table for _FrameLayout;
    swift_getWitnessTable();
    sub_100050B34((uint64_t)v20, v35);
    v39(v20, v35);
    uint64_t v40 = ((uint64_t (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v39)(v37, v35);
  }
  else
  {
    uint64_t v41 = v104;
    uint64_t v42 = v105;
    uint64_t v87 = type metadata accessor for HeroImageLandscapeModel();
    uint64_t v86 = Namespace.wrappedValue.getter();
    uint64_t v43 = (void (*)(void, void))v108;
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
    uint64_t v44 = sub_100053018((uint64_t)v108, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v44 + *(void *)(*(void *)v44 + 160), v41);
    swift_release();
    sub_100053018((uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    double v45 = sub_10008E6FC();
    swift_release();
    uint64_t v46 = sub_100053018((uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    uint64_t v84 = v15;
    __chkstk_darwin(v46);
    *(&v79 - 2) = v41;
    *(&v79 - 1) = v42;
    swift_getKeyPath();
    type metadata accessor for EventViewModel();
    swift_getWitnessTable();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v82 = *((void *)&v123 + 1);
    uint64_t v83 = v123;
    double v47 = v124;
    uint64_t v48 = sub_100053018((uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v48);
    *(&v79 - 2) = v41;
    *(&v79 - 1) = v42;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v80 = *((void *)&v117 + 1);
    uint64_t v81 = v117;
    char v49 = LOBYTE(v118);
    uint64_t v50 = sub_100053018((uint64_t)v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
    __chkstk_darwin(v50);
    *(&v79 - 2) = v41;
    *(&v79 - 1) = v42;
    swift_getKeyPath();
    ObservedObject.Wrapper.subscript.getter();
    swift_release();
    swift_release();
    v133[0] = v129;
    v133[1] = v130;
    v133[2] = v131;
    uint64_t v51 = sub_100096E18(v86, (uint64_t)v84, v83, v82, v81, v80, v49, v133, v45, v47);
    *(void *)&long long v129 = sub_100071734(v51);
    *((void *)&v129 + 1) = v52;
    sub_100053018((uint64_t)v43, v85);
    sub_10008E6FC();
    swift_release();
    static Alignment.top.getter();
    uint64_t v53 = swift_getWitnessTable();
    View.frame(width:height:alignment:)();
    swift_release();
    long long v117 = v123;
    double v118 = v124;
    char v119 = v125;
    uint64_t v120 = v126;
    char v121 = v127;
    long long v122 = v128;
    uint64_t v115 = v53;
    uint64_t v116 = &protocol witness table for _FrameLayout;
    uint64_t v54 = v101;
    swift_getWitnessTable();
    uint64_t v55 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v54 - 8) + 16);
    v55(&v129, &v117, v54);
    swift_release();
    long long v117 = v129;
    double v118 = *(double *)&v130;
    char v119 = BYTE8(v130);
    uint64_t v120 = v131;
    char v121 = BYTE8(v131);
    long long v122 = v132;
    v55(&v123, &v117, v54);
    long long v117 = v123;
    double v118 = v124;
    char v119 = v125;
    uint64_t v120 = v126;
    char v121 = v127;
    long long v122 = v128;
    uint64_t v56 = v102;
    swift_getWitnessTable();
    sub_100050C2C((uint64_t)&v117, v56, v54);
    swift_release();
    uint64_t v40 = swift_release();
  }
  __n128 v57 = __chkstk_darwin(v40);
  uint64_t v58 = v104;
  uint64_t v59 = v105;
  *(&v79 - 4) = v104;
  *(&v79 - 3) = v59;
  uint64_t v60 = (void (*)(void, void))v108;
  *(&v79 - 2) = v107;
  uint64_t v62 = v97;
  uint64_t v61 = v98;
  (*(void (**)(char *, __n128))(v98 + 16))(v97, v57);
  unint64_t v63 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v58;
  *(void *)(v64 + 24) = v59;
  (*(void (**)(unint64_t, char *, void (*)(void, void)))(v61 + 32))(v64 + v63, v62, v60);
  char v65 = static Axis.Set.vertical.getter();
  uint64_t v66 = v93;
  sub_1000C44B0(v65, 0, (void (*)(uint64_t))sub_100061964, (uint64_t)sub_100061974, v64, v93);
  uint64_t v67 = v95;
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v68 = v94;
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v70 = v92;
  v69(v92, v66, v67);
  uint64_t v108 = *(void **)(v68 + 8);
  ((void (*)(uint64_t, uint64_t))v108)(v66, v67);
  uint64_t v71 = v88;
  uint64_t v72 = v89;
  uint64_t v73 = v103;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v103, v106, v89);
  *(void *)&long long v129 = v73;
  v69((char *)v66, (uint64_t)v70, v67);
  *((void *)&v129 + 1) = v66;
  *(void *)&long long v123 = v72;
  *((void *)&v123 + 1) = v67;
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v113 = swift_getWitnessTable();
  uint64_t v114 = &protocol witness table for _FrameLayout;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v111 = v74;
  uint64_t v112 = v75;
  *(void *)&long long v117 = swift_getWitnessTable();
  *((void *)&v117 + 1) = v107;
  sub_100050970((uint64_t *)&v129, 2uLL, (uint64_t)&v123);
  uint64_t v76 = (void (*)(uint64_t, uint64_t))v108;
  ((void (*)(char *, uint64_t))v108)(v70, v67);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v71 + 8);
  v77(v106, v72);
  v76(v66, v67);
  return ((uint64_t (*)(char *, uint64_t))v77)(v103, v72);
}

void sub_100058B1C(double *a1@<X8>)
{
  *a1 = sub_10008E540();
}

uint64_t sub_100058B48()
{
  return sub_10008E554();
}

void sub_100058B70(double *a1@<X8>)
{
  *a1 = sub_10008E568();
}

uint64_t sub_100058B9C()
{
  return sub_10008E630();
}

uint64_t sub_100058BC4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008E77C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100058BF4()
{
  return sub_10008E790();
}

uint64_t sub_100058C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v18 = a4;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_10000650C(&qword_10019A388);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019A390);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A398);
  type metadata accessor for ModifiedContent();
  uint64_t v22 = sub_10000650C(&qword_10019A3A0);
  uint64_t v23 = type metadata accessor for GuideModule();
  uint64_t v24 = sub_10000650C(&qword_10019A3A8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = sub_10000650C(&qword_10019A3B0);
  uint64_t v27 = sub_10000650C(&qword_10019A3B8);
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_100198608);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - v12;
  static HorizontalAlignment.leading.getter();
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a1;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v13, v10, v7);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  v14(v18, v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

uint64_t sub_1000590D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v122 = a1;
  uint64_t v120 = a4;
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v118 = *(void *)(v6 - 8);
  uint64_t v119 = v6;
  __chkstk_darwin(v6);
  long long v117 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v116 = (uint64_t)v91 - v9;
  uint64_t v137 = sub_10000650C(&qword_10019A3A0);
  uint64_t v138 = type metadata accessor for GuideModule();
  uint64_t v139 = sub_10000650C(&qword_10019A3A8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LineupModule();
  type metadata accessor for ModifiedContent();
  uint64_t v140 = type metadata accessor for Optional();
  uint64_t v141 = sub_10000650C(&qword_10019A3B0);
  uint64_t v142 = sub_10000650C(&qword_10019A3B8);
  swift_getTupleTypeMetadata();
  uint64_t v105 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for VStack();
  uint64_t v107 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v103 = (char *)v91 - v11;
  uint64_t v108 = v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v110 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v126 = (char *)v91 - v14;
  sub_10000650C(&qword_100198608);
  uint64_t v111 = v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v114 = *(void *)(v15 - 8);
  uint64_t v115 = v15;
  __chkstk_darwin(v15);
  uint64_t v113 = (char *)v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v109 = (char *)v91 - v18;
  __chkstk_darwin(v19);
  uint64_t v112 = (char *)v91 - v20;
  uint64_t v93 = a2;
  uint64_t v124 = type metadata accessor for EventView();
  uint64_t v101 = *(void *)(v124 - 8);
  uint64_t v102 = *(void *)(v101 + 64);
  __chkstk_darwin(v124);
  uint64_t v100 = (char *)v91 - v21;
  uint64_t v99 = type metadata accessor for CoordinateSpace();
  uint64_t v22 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v98 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = a3;
  type metadata accessor for EventDetailModule();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  sub_10000650C(&qword_10019A388);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  uint64_t v24 = type metadata accessor for Group();
  uint64_t v95 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v91 - v25;
  sub_10000650C(&qword_10019A390);
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v96 = v27;
  uint64_t v97 = v28;
  __chkstk_darwin(v27);
  char v121 = (void (*)(void, void))((char *)v91 - v29);
  sub_10000650C(&qword_10019A398);
  uint64_t v125 = type metadata accessor for ModifiedContent();
  uint64_t v127 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v106 = (char *)v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v94 = (char *)v91 - v32;
  __chkstk_darwin(v33);
  long long v123 = (char *)v91 - v34;
  uint64_t v35 = v93;
  uint64_t v131 = v93;
  uint64_t v132 = a3;
  uint64_t v36 = v122;
  uint64_t v133 = v122;
  uint64_t v37 = swift_getWitnessTable();
  v136[13] = swift_getWitnessTable();
  v136[14] = &protocol witness table for _FrameLayout;
  v91[1] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v38 = swift_getWitnessTable();
  v136[11] = v37;
  v136[12] = v38;
  uint64_t v39 = swift_getWitnessTable();
  Group<A>.init(content:)();
  v136[10] = v39;
  uint64_t v40 = swift_getWitnessTable();
  v91[0] = sub_100061A6C();
  uint64_t v41 = v22;
  uint64_t v42 = *(void (**)(char *, void, uint64_t))(v22 + 104);
  uint64_t v44 = (uint64_t)v98;
  uint64_t v43 = v99;
  v42(v98, enum case for CoordinateSpace.local(_:), v99);
  sub_10006A548((uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v44, (uint64_t)sub_100025A40, 0, v24, v40, (uint64_t)v121);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v44, v43);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v26, v24);
  uint64_t v46 = v100;
  uint64_t v45 = v101;
  uint64_t v47 = v124;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v36, v124);
  unint64_t v48 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = v92;
  *(void *)(v49 + 16) = v35;
  *(void *)(v49 + 24) = v50;
  (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))(v49 + v48, v46, v47);
  uint64_t v51 = sub_100010484(&qword_10019A500, &qword_10019A390);
  v136[8] = v40;
  v136[9] = v51;
  uint64_t v52 = v96;
  uint64_t v53 = swift_getWitnessTable();
  sub_1000623DC(&qword_100199910, type metadata accessor for CGSize);
  uint64_t v54 = v94;
  uint64_t v55 = v103;
  uint64_t v56 = v121;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  uint64_t v57 = v122;
  (*(void (**)(void, uint64_t))(v97 + 8))(v56, v52);
  uint64_t v58 = sub_100010484(&qword_10019A508, &qword_10019A398);
  v136[6] = v53;
  v136[7] = v58;
  uint64_t v59 = v125;
  uint64_t v102 = swift_getWitnessTable();
  uint64_t v60 = v127;
  uint64_t v100 = *(char **)(v127 + 16);
  uint64_t v101 = v127 + 16;
  ((void (*)(char *, char *, uint64_t))v100)(v123, v54, v59);
  uint64_t v61 = *(void (**)(void, void))(v60 + 8);
  uint64_t v127 = v60 + 8;
  char v121 = v61;
  v61(v54, v59);
  static HorizontalAlignment.leading.getter();
  uint64_t v128 = v35;
  uint64_t v129 = v50;
  uint64_t v130 = v57;
  VStack.init(alignment:spacing:content:)();
  LOBYTE(v54) = static Edge.Set.leading.getter();
  unsigned __int8 v62 = static Edge.Set.trailing.getter();
  unsigned __int8 v63 = static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v54) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v62) {
    Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v63) {
    Edge.Set.init(rawValue:)();
  }
  sub_100053018(v124, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008E7A4();
  swift_release();
  uint64_t v64 = v108;
  uint64_t v65 = swift_getWitnessTable();
  sub_10006A708();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v55, v64);
  uint64_t v66 = v116;
  sub_10001D3A4(v116);
  uint64_t v68 = v117;
  uint64_t v67 = v118;
  uint64_t v69 = v119;
  (*(void (**)(char *, void, uint64_t))(v118 + 104))(v117, enum case for ColorScheme.light(_:), v119);
  char v70 = static ColorScheme.== infix(_:_:)();
  uint64_t v71 = *(void (**)(char *, uint64_t))(v67 + 8);
  v71(v68, v69);
  v71((char *)v66, v69);
  if (v70)
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v72 = &qword_1001AA340;
  }
  else
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v72 = &qword_1001AA338;
  }
  uint64_t v73 = *v72;
  swift_retain();
  uint64_t v137 = v73;
  static Edge.Set.all.getter();
  unint64_t v74 = sub_100061B88();
  v136[4] = v65;
  v136[5] = v74;
  uint64_t v75 = v111;
  uint64_t v76 = swift_getWitnessTable();
  uint64_t v77 = v109;
  uint64_t v78 = v126;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v75);
  uint64_t v79 = sub_100010484(&qword_100198600, &qword_100198608);
  v136[2] = v76;
  v136[3] = v79;
  uint64_t v80 = v115;
  uint64_t v124 = swift_getWitnessTable();
  uint64_t v81 = v114;
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
  uint64_t v83 = v112;
  v82(v112, v77, v80);
  uint64_t v126 = *(char **)(v81 + 8);
  ((void (*)(char *, uint64_t))v126)(v77, v80);
  uint64_t v84 = (uint64_t)v106;
  uint64_t v85 = v123;
  uint64_t v86 = v125;
  ((void (*)(char *, char *, uint64_t))v100)(v106, v123, v125);
  uint64_t v137 = v84;
  uint64_t v87 = v113;
  v82(v113, v83, v80);
  uint64_t v138 = (uint64_t)v87;
  v136[0] = v86;
  v136[1] = v80;
  uint64_t v134 = v102;
  uint64_t v135 = v124;
  sub_100050970(&v137, 2uLL, (uint64_t)v136);
  uint64_t v88 = (void (*)(char *, uint64_t))v126;
  ((void (*)(char *, uint64_t))v126)(v83, v80);
  uint64_t v89 = (uint64_t (*)(uint64_t, uint64_t))v121;
  v121(v85, v86);
  v88(v87, v80);
  return v89(v84, v86);
}

uint64_t sub_10005A100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v60 = a4;
  sub_10000650C(&qword_10019A388);
  type metadata accessor for EventDetailModule();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  uint64_t v49 = type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for HStack();
  uint64_t v51 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v46 - v8;
  uint64_t v59 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v46 - v13;
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for VStack();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v47 = (char *)&v46 - v19;
  uint64_t v55 = v10;
  uint64_t v20 = type metadata accessor for _ConditionalContent();
  uint64_t v57 = *(void *)(v20 - 8);
  uint64_t v58 = v20;
  __chkstk_darwin(v20);
  uint64_t v56 = (char *)&v46 - v21;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = type metadata accessor for EventView();
  uint64_t v25 = a1;
  sub_100053018(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a1) = sub_10008DEEC();
  uint64_t v26 = swift_release();
  if (a1)
  {
    uint64_t v27 = static HorizontalAlignment.center.getter();
    __chkstk_darwin(v27);
    *(&v46 - 4) = v22;
    *(&v46 - 3) = v23;
    *(&v46 - 2) = v25;
    VStack.init(alignment:spacing:content:)();
    swift_getWitnessTable();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v29 = v47;
    v28(v47, v17, v14);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v15 + 8);
    v30(v17, v14);
    v28(v17, v29, v14);
    uint64_t v61 = swift_getWitnessTable();
    unsigned __int8 v62 = &protocol witness table for _FrameLayout;
    swift_getWitnessTable();
    uint64_t v31 = v56;
    sub_100050B34((uint64_t)v17, v14);
    v30(v17, v14);
    v30(v29, v14);
  }
  else
  {
    __chkstk_darwin(v26);
    *(&v46 - 4) = v22;
    *(&v46 - 3) = v23;
    *(&v46 - 2) = v25;
    static VerticalAlignment.center.getter();
    uint64_t v32 = v50;
    HStack.init(alignment:spacing:content:)();
    sub_100053018(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_10008E6FC();
    swift_release();
    static Alignment.center.getter();
    uint64_t v33 = v59;
    uint64_t v34 = swift_getWitnessTable();
    uint64_t v35 = (uint64_t)v53;
    View.frame(width:height:alignment:)();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
    uint64_t v67 = v34;
    uint64_t v68 = &protocol witness table for _FrameLayout;
    uint64_t v36 = v55;
    uint64_t v51 = swift_getWitnessTable();
    uint64_t v37 = v54;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    uint64_t v39 = v52;
    v38(v52, v35, v36);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v40(v35, v36);
    v38((char *)v35, (uint64_t)v39, v36);
    swift_getWitnessTable();
    uint64_t v31 = v56;
    sub_100050C2C(v35, v14, v36);
    v40(v35, v36);
    v40((uint64_t)v39, v36);
  }
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = &protocol witness table for _FrameLayout;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v63 = v41;
  uint64_t v64 = v42;
  uint64_t v43 = v58;
  swift_getWitnessTable();
  uint64_t v44 = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v60, v31, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v31, v43);
}

uint64_t sub_10005A938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EventDetailViewModel();
  __chkstk_darwin(v9 - 8);
  uint64_t v27 = (char *)&v25 - v10;
  uint64_t v11 = type metadata accessor for EventDetailModule();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v26 = (char *)&v25 - v16;
  uint64_t v25 = Namespace.wrappedValue.getter();
  uint64_t v17 = type metadata accessor for EventView();
  uint64_t v18 = sub_100053018(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18 + *(void *)(*(void *)v18 + 160), a2);
  swift_release();
  sub_100053018(v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v19 = v27;
  sub_100127D08(v25, (uint64_t)v8, v34, (uint64_t)v35, v36, a2, v27);
  sub_100091864((uint64_t)v19, (uint64_t)v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v22 = v26;
  v21(v26, v14, v11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  v21(v14, v22, v11);
  uint64_t v35 = v14;
  v33[0] = &type metadata for HeroImagePlaceholder;
  v33[1] = v11;
  unint64_t v31 = sub_100026E58();
  uint64_t v32 = WitnessTable;
  sub_100050970(&v34, 2uLL, (uint64_t)v33);
  v23(v22, v11);
  return ((uint64_t (*)(char *, uint64_t))v23)(v14, v11);
}

uint64_t sub_10005ACE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EventDetailViewModel();
  __chkstk_darwin(v9 - 8);
  uint64_t v32 = (char *)&v29 - v10;
  uint64_t v11 = type metadata accessor for EventDetailModule();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v31 = (uint64_t)&v29 - v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v34 = (char *)&v29 - v17;
  uint64_t v29 = Namespace.wrappedValue.getter();
  uint64_t v18 = type metadata accessor for EventView();
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter;
  uint64_t v19 = sub_100053018(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19 + *(void *)(*(void *)v19 + 160), a2);
  swift_release();
  sub_100053018(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  swift_getKeyPath();
  type metadata accessor for EventViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = v32;
  sub_100127D08(v29, (uint64_t)v8, (uint64_t)v46, (uint64_t)v47, v48, a2, v32);
  uint64_t v21 = v31;
  sub_100091864((uint64_t)v20, v31);
  static Edge.Set.trailing.getter();
  sub_100053018(v18, v30);
  sub_10008E7A4();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v21, v11);
  uint64_t v44 = WitnessTable;
  uint64_t v45 = &protocol witness table for _PaddingLayout;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v25 = v33;
  uint64_t v24 = v34;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v26(v34, v15, v13);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v15, v13);
  uint64_t v42 = 0;
  __int16 v43 = 1;
  uint64_t v46 = &v42;
  v26(v15, v24, v13);
  uint64_t v47 = v15;
  v41[0] = sub_100006560(&qword_10019A388);
  v41[1] = v13;
  uint64_t v39 = sub_100062068(&qword_10019A5E0, &qword_10019A388, (void (*)(void))sub_100026E58);
  uint64_t v40 = v23;
  sub_100050970((uint64_t *)&v46, 2uLL, (uint64_t)v41);
  v27(v24, v13);
  return ((uint64_t (*)(char *, uint64_t))v27)(v15, v13);
}

uint64_t sub_10005B208()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_100053018(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008E630();

  return swift_release();
}

uint64_t sub_10005B27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v216 = a4;
  uint64_t v190 = type metadata accessor for AppModule();
  __chkstk_darwin(v190);
  uint64_t v192 = (uint64_t (**)())((char *)&v185 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100006560(&qword_10019A518);
  uint64_t v209 = *(void *)(v8 - 8);
  uint64_t v210 = v8;
  __chkstk_darwin(v8);
  uint64_t v191 = (uint64_t)&v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = sub_100006560(&qword_10019A3B8);
  __chkstk_darwin(v212);
  uint64_t v215 = (uint64_t)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v214 = (uint64_t)&v185 - v12;
  uint64_t v185 = sub_100006560(&qword_10019A520);
  __chkstk_darwin(v185);
  uint64_t v186 = (char *)&v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = sub_100006560(&qword_10019A528);
  __chkstk_darwin(v189);
  uint64_t v188 = (uint64_t)&v185 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_10019A530);
  uint64_t v205 = *(void *)(v15 - 8);
  uint64_t v206 = v15;
  __chkstk_darwin(v15);
  uint64_t v187 = (char *)&v185 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = sub_100006560(&qword_10019A3B0);
  __chkstk_darwin(v211);
  uint64_t v213 = (uint64_t)&v185 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v223 = (uint64_t)&v185 - v19;
  uint64_t v208 = sub_100006560(&qword_10019A3A8);
  __chkstk_darwin(v208);
  uint64_t v225 = (uint64_t)&v185 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v230 = (uint64_t *)((char *)&v185 - v22);
  uint64_t v204 = *(void (***)(char *, uint64_t, uint64_t))(a2 - 8);
  __chkstk_darwin(v23);
  uint64_t WitnessTable = (char *)&v185 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for GuideViewModel();
  __chkstk_darwin(v25 - 8);
  uint64_t v202 = (uint64_t)&v185 - v26;
  uint64_t v222 = type metadata accessor for GuideModule();
  uint64_t v231 = *(void *)(v222 - 8);
  __chkstk_darwin(v222);
  uint64_t v229 = (uint64_t)&v185 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v228 = (char *)&v185 - v29;
  uint64_t v224 = a2;
  uint64_t v226 = a3;
  uint64_t v30 = type metadata accessor for EventView();
  uint64_t v220 = *(void *)(v30 - 8);
  uint64_t v217 = *(void *)(v220 + 64);
  __chkstk_darwin(v30);
  uint64_t v218 = (char *)&v185 - v31;
  uint64_t v32 = sub_100006560(&qword_10019A538);
  uint64_t v200 = *(void *)(v32 - 8);
  uint64_t v201 = (void (*)(void, void, void))v32;
  __chkstk_darwin(v32);
  uint64_t v199 = (char *)&v185 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v34 - 8);
  uint64_t v36 = (char *)&v185 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(void *)(v38 + 64);
  __chkstk_darwin(v37);
  uint64_t v198 = (char *)&v185 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v185 - v41;
  uint64_t v207 = sub_100006560(&qword_10019A3A0);
  __chkstk_darwin(v207);
  uint64_t v221 = (uint64_t)&v185 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v227 = (uint64_t)&v185 - v45;
  uint64_t v232 = v30;
  uint64_t v219 = a1;
  uint64_t v46 = sub_100053018(v30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v47 = *(void *)(v46 + *(void *)(*(void *)v46 + 168));
  swift_retain();
  swift_release();
  swift_getKeyPath();
  *(void *)&long long v233 = v47;
  sub_1000623DC((unint64_t *)&qword_10019A548, (void (*)(uint64_t))type metadata accessor for PromotionalAssetsController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_1000066D4(v48, (uint64_t)v36, &qword_10019A540);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
  {
    sub_1000067DC((uint64_t)v36, &qword_10019A540);
    uint64_t v49 = 1;
    uint64_t v50 = v224;
    uint64_t v51 = v227;
    uint64_t v53 = v200;
    uint64_t v52 = v201;
  }
  else
  {
    uint64_t v54 = *(void (**)(unint64_t, char *, uint64_t))(v38 + 32);
    uint64_t v194 = v38;
    uint64_t v195 = v38 + 32;
    uint64_t v196 = v54;
    uint64_t v197 = v42;
    uint64_t v55 = v37;
    v54((unint64_t)v42, v36, v37);
    uint64_t v56 = v232;
    uint64_t v57 = v219;
    uint64_t v58 = sub_100053018(v232, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v59 = *(void *)(v58 + *(void *)(*(void *)v58 + 168));
    swift_retain();
    swift_release();
    type metadata accessor for PromotionalAssetsEntryViewModel();
    uint64_t v60 = swift_allocObject();
    ObservationRegistrar.init()();
    *(void *)(v60 + 16) = v59;
    *(void *)&long long v263 = v60;
    State.init(wrappedValue:)();
    long long v61 = v233;
    char v62 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v68 = (void (*)(unint64_t, char *, uint64_t))v67;
    uint64_t v70 = v69;
    char v71 = static Edge.Set.horizontal.getter();
    long long v233 = v61;
    LOBYTE(v234) = v62;
    *((void *)&v234 + 1) = v64;
    uint64_t v235 = v66;
    uint64_t v236 = v68;
    *(void *)&long long v237 = v70;
    BYTE8(v237) = 0;
    v238[0] = v71;
    memset(&v238[8], 0, 32);
    char v239 = 1;
    uint64_t v72 = v220;
    uint64_t v73 = v218;
    (*(void (**)(char *, uint64_t, uint64_t))(v220 + 16))(v218, v57, v56);
    uint64_t v74 = v194;
    uint64_t v75 = v198;
    uint64_t v76 = v55;
    (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v198, v197, v55);
    unint64_t v77 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    uint64_t v78 = v74;
    unint64_t v79 = (v217 + *(unsigned __int8 *)(v74 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
    uint64_t v80 = swift_allocObject();
    uint64_t v81 = v224;
    uint64_t v82 = v226;
    *(void *)(v80 + 16) = v224;
    *(void *)(v80 + 24) = v82;
    (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))(v80 + v77, v73, v232);
    v196(v80 + v79, v75, v76);
    sub_100006560(&qword_10019A570);
    sub_100062068(&qword_10019A578, &qword_10019A570, (void (*)(void))sub_1000620E4);
    uint64_t v83 = v199;
    View.onTapGesture(count:perform:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v197, v76);
    uint64_t v85 = v200;
    uint64_t v84 = v201;
    uint64_t v86 = v227;
    (*(void (**)(uint64_t, char *, void))(v200 + 32))(v227, v83, v201);
    uint64_t v49 = 0;
    uint64_t v50 = v81;
    uint64_t v51 = v86;
    uint64_t v52 = v84;
    uint64_t v53 = v85;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(void, void, void)))(v53 + 56))(v51, v49, 1, v52);
  uint64_t v87 = v232;
  uint64_t v88 = v219;
  uint64_t v89 = sub_100053018(v232, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v90 = (uint64_t)WitnessTable;
  v204[2](WitnessTable, v89 + *(void *)(*(void *)v89 + 160), v50);
  swift_release();
  uint64_t v91 = v202;
  sub_10005028C(v90, v50, v202);
  uint64_t v92 = v229;
  sub_1000052B0(v91, v229);
  uint64_t v93 = v222;
  uint64_t WitnessTable = (char *)swift_getWitnessTable();
  uint64_t v94 = v231;
  uint64_t v201 = *(void (**)(void, void, void))(v231 + 16);
  uint64_t v202 = v231 + 16;
  v201(v228, v92, v93);
  uint64_t v95 = *(void (***)(char *, uint64_t, uint64_t))(v94 + 8);
  uint64_t v231 = v94 + 8;
  uint64_t v204 = v95;
  ((void (*)(uint64_t, uint64_t))v95)(v92, v93);
  sub_100053018(v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v96 = sub_10008E9B4();
  uint64_t v98 = v97;
  swift_release();
  if (v98)
  {
    sub_100053018(v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v99 = v88;
    uint64_t v100 = sub_10008EA2C();
    uint64_t v102 = v101;
    swift_release();
    sub_100053018(v232, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    type metadata accessor for AttributionViewModel();
    uint64_t v103 = v230;
    sub_10008EAA4();
    swift_release();
    uint64_t *v103 = v100;
    v103[1] = v102;
    uint64_t v88 = v99;
    uint64_t v87 = v232;
    v103[2] = v96;
    v103[3] = v98;
    uint64_t v104 = type metadata accessor for AttributionModule();
    uint64_t v105 = (uint64_t *)((char *)v103 + *(int *)(v104 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v105 = EnvironmentObject.init()();
    v105[1] = v106;
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 0, 1, v104);
  }
  else
  {
    uint64_t v107 = type metadata accessor for AttributionModule();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v230, 1, 1, v107);
  }
  sub_100053018(v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  char v108 = sub_10008EB1C();
  swift_release();
  if (v108)
  {
    sub_100053018(v87, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    uint64_t v109 = sub_10008EDCC();
    swift_release();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    sub_1000D8844(v109, (uint64_t)v269);
    sub_100107F2C(v269, (__n128 *)v270);
    uint64_t v274 = v271;
    long long v273 = *(_OWORD *)&v270[8];
    uint64_t v272 = *(void *)v270;
    long long v233 = *(_OWORD *)v270;
    long long v234 = *(_OWORD *)&v270[16];
    uint64_t v235 = v271;
    static Edge.Set.top.getter();
    type metadata accessor for LineupModule();
    uint64_t v110 = swift_getWitnessTable();
    View.padding(_:_:)();
    sub_100062470((uint64_t)&v272);
    sub_10006249C((uint64_t)&v273);
    sub_100062470((uint64_t)&v274);
    long long v250 = v263;
    unint64_t v251 = v264;
    LOBYTE(v252) = BYTE8(v264);
    uint64_t v253 = v265;
    LOBYTE(v254) = BYTE8(v265);
    long long v255 = v266;
    long long v256 = v267;
    char v257 = v268;
    uint64_t v111 = type metadata accessor for ModifiedContent();
    uint64_t v248 = v110;
    uint64_t v249 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable();
    uint64_t v112 = *(void (**)(long long *, long long *, uint64_t))(*(void *)(v111 - 8) + 16);
    v112(&v233, &v250, v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v263 = v233;
    *(void *)&long long v264 = v234;
    BYTE8(v264) = BYTE8(v234);
    *(void *)&long long v265 = v235;
    BYTE8(v265) = (_BYTE)v236;
    long long v266 = v237;
    long long v267 = *(_OWORD *)v238;
    char v268 = v238[16];
    v112(&v250, &v263, v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v240 = v250;
    unint64_t v241 = v251;
    uint64_t v242 = v252;
    uint64_t v243 = v253;
    uint64_t v244 = v254;
    long long v245 = v255;
    long long v246 = v256;
    char v247 = v257;
    uint64_t v113 = type metadata accessor for Optional();
    (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v113 - 8) + 16))(&v263, &v240, v113);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v219 = v263;
    uint64_t v199 = (char *)v264;
    uint64_t v200 = *((void *)&v263 + 1);
    uint64_t v197 = (char *)v265;
    uint64_t v198 = (char *)*((void *)&v264 + 1);
    uint64_t v195 = v266;
    uint64_t v196 = (void (*)(unint64_t, char *, uint64_t))*((void *)&v265 + 1);
    uint64_t v193 = v267;
    uint64_t v194 = *((void *)&v266 + 1);
    uint64_t v114 = *((void *)&v267 + 1);
    char v115 = v268;
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for LineupModule();
    type metadata accessor for ModifiedContent();
    long long v263 = 0u;
    long long v264 = 0u;
    long long v265 = 0u;
    long long v266 = 0u;
    long long v267 = 0u;
    char v268 = 0;
    uint64_t v261 = swift_getWitnessTable();
    uint64_t v262 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable();
    uint64_t v116 = type metadata accessor for Optional();
    (*(void (**)(long long *, long long *, uint64_t))(*(void *)(v116 - 8) + 16))(&v233, &v263, v116);
    uint64_t v219 = v233;
    uint64_t v199 = (char *)v234;
    uint64_t v200 = *((void *)&v233 + 1);
    uint64_t v197 = v235;
    uint64_t v198 = (char *)*((void *)&v234 + 1);
    uint64_t v195 = v237;
    uint64_t v196 = v236;
    uint64_t v114 = *(void *)&v238[8];
    uint64_t v193 = *(void *)v238;
    uint64_t v194 = *((void *)&v237 + 1);
    char v115 = v238[16];
  }
  sub_1000530A8();
  long long v117 = sub_10005D194();
  swift_release();
  uint64_t v118 = v117[2];
  swift_bridgeObjectRelease();
  uint64_t v119 = v223;
  if (v118)
  {
    sub_1000530A8();
    uint64_t v120 = sub_10005D194();
    swift_release();
    sub_1000530A8();
    uint64_t v121 = sub_100006560(&qword_10019A550);
    uint64_t v122 = (uint64_t)v186;
    sub_10005D388((uint64_t)&v186[*(int *)(v121 + 44)]);
    swift_release();
    sub_100053018(v232, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    long long v123 = sub_10008F09C();
    swift_release();
    *(void *)uint64_t v122 = LocalizedStringKey.init(stringLiteral:)();
    *(void *)(v122 + 8) = v124;
    *(unsigned char *)(v122 + 16) = v125 & 1;
    *(void *)(v122 + 24) = v126;
    *(void *)(v122 + 32) = LocalizedStringKey.init(stringLiteral:)();
    *(void *)(v122 + 40) = v127;
    *(unsigned char *)(v122 + 48) = v128 & 1;
    *(void *)(v122 + 56) = v129;
    *(void *)(v122 + 64) = v120;
    *(void *)(v122 + *(int *)(v121 + 48)) = v123;
    uint64_t v130 = v185;
    uint64_t v131 = (uint64_t *)(v122 + *(int *)(v185 + 36));
    uint64_t *v131 = swift_getKeyPath();
    sub_100006560(&qword_100198A98);
    swift_storeEnumTagMultiPayload();
    uint64_t v132 = (uint64_t *)(v122 + *(int *)(v130 + 40));
    uint64_t *v132 = swift_getKeyPath();
    sub_100006560(&qword_1001982C0);
    swift_storeEnumTagMultiPayload();
    uint64_t v133 = (uint64_t *)(v122 + *(int *)(v130 + 44));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t *v133 = EnvironmentObject.init()();
    v133[1] = v134;
    LOBYTE(v132) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    uint64_t v140 = v139;
    uint64_t v142 = v141;
    uint64_t v143 = v188;
    sub_1000066D4(v122, v188, &qword_10019A520);
    uint64_t v144 = v143 + *(int *)(v189 + 36);
    *(unsigned char *)uint64_t v144 = (_BYTE)v132;
    *(void *)(v144 + 8) = v136;
    *(void *)(v144 + 16) = v138;
    *(void *)(v144 + 24) = v140;
    *(void *)(v144 + 32) = v142;
    *(unsigned char *)(v144 + 40) = 0;
    sub_1000067DC(v122, &qword_10019A520);
    if (qword_100198100 != -1) {
      swift_once();
    }
    sub_100061BF4();
    uint64_t v145 = (uint64_t)v187;
    View.accessibilityIdentifier(_:)();
    sub_1000067DC(v143, &qword_10019A528);
    sub_10001D6D8(v145, v119, &qword_10019A530);
    uint64_t v146 = 0;
  }
  else
  {
    uint64_t v146 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56))(v119, v146, 1, v206);
  uint64_t v147 = v232;
  sub_100053018(v232, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(v88 + 72))
  {
    uint64_t v148 = swift_retain();
    uint64_t v149 = sub_10009130C(v148);
    unint64_t v151 = v150;
    swift_release();
    swift_release();
    uint64_t v152 = v220;
    if (!v151) {
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    uint64_t v153 = HIBYTE(v151) & 0xF;
    if ((v151 & 0x2000000000000000) == 0) {
      uint64_t v153 = v149 & 0xFFFFFFFFFFFFLL;
    }
    if (!v153)
    {
      uint64_t v175 = 1;
      uint64_t v174 = v214;
      uint64_t v171 = v210;
    }
    else
    {
LABEL_20:
      uint64_t v154 = v218;
      (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v218, v88, v147);
      unint64_t v155 = (*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
      uint64_t v156 = swift_allocObject();
      uint64_t v157 = v147;
      uint64_t v158 = v226;
      *(void *)(v156 + 16) = v224;
      *(void *)(v156 + 24) = v158;
      (*(void (**)(unint64_t, char *, uint64_t))(v152 + 32))(v156 + v155, v154, v157);
      uint64_t v159 = (uint64_t)v192;
      *uint64_t v192 = sub_100061F08;
      *(void *)(v159 + 8) = v156;
      *(unsigned char *)(v159 + 16) = 0;
      type metadata accessor for RemoteViewConfiguration();
      sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *(void *)(v159 + 24) = EnvironmentObject.init()();
      *(void *)(v159 + 32) = v160;
      uint64_t v161 = (uint64_t *)(v159 + *(int *)(v190 + 24));
      *uint64_t v161 = swift_getKeyPath();
      sub_100006560(&qword_1001982C0);
      swift_storeEnumTagMultiPayload();
      LOBYTE(v161) = static Edge.Set.top.getter();
      EdgeInsets.init(_all:)();
      uint64_t v163 = v162;
      uint64_t v165 = v164;
      uint64_t v167 = v166;
      uint64_t v169 = v168;
      uint64_t v170 = v191;
      sub_1000628BC(v159, v191, (uint64_t (*)(void))type metadata accessor for AppModule);
      uint64_t v171 = v210;
      uint64_t v172 = v170 + *(int *)(v210 + 36);
      *(unsigned char *)uint64_t v172 = (_BYTE)v161;
      *(void *)(v172 + 8) = v163;
      *(void *)(v172 + 16) = v165;
      *(void *)(v172 + 24) = v167;
      *(void *)(v172 + 32) = v169;
      *(unsigned char *)(v172 + 40) = 0;
      sub_100062924(v159, (uint64_t (*)(void))type metadata accessor for AppModule);
      uint64_t v173 = v170;
      uint64_t v174 = v214;
      sub_10001D6D8(v173, v214, &qword_10019A518);
      uint64_t v175 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(v174, v175, 1, v171);
    uint64_t v176 = v221;
    sub_1000066D4(v227, v221, &qword_10019A3A0);
    *(void *)&long long v263 = v176;
    uint64_t v177 = v229;
    uint64_t v178 = v222;
    v201(v229, v228, v222);
    *((void *)&v263 + 1) = v177;
    uint64_t v179 = v225;
    sub_1000066D4((uint64_t)v230, v225, &qword_10019A3A8);
    *(void *)&long long v233 = v219;
    *((void *)&v233 + 1) = v200;
    *(void *)&long long v234 = v199;
    *((void *)&v234 + 1) = v198;
    uint64_t v235 = v197;
    uint64_t v236 = v196;
    *(void *)&long long v237 = v195;
    *((void *)&v237 + 1) = v194;
    *(void *)uint64_t v238 = v193;
    *(void *)&v238[8] = v114;
    v238[16] = v115;
    *(void *)&long long v264 = v179;
    *((void *)&v264 + 1) = &v233;
    uint64_t v180 = v223;
    uint64_t v181 = v213;
    sub_1000066D4(v223, v213, &qword_10019A3B0);
    *(void *)&long long v265 = v181;
    uint64_t v182 = v215;
    sub_1000066D4(v174, v215, &qword_10019A3B8);
    *((void *)&v265 + 1) = v182;
    *(void *)&long long v250 = v207;
    *((void *)&v250 + 1) = v178;
    unint64_t v251 = v208;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for LineupModule();
    type metadata accessor for ModifiedContent();
    uint64_t v252 = type metadata accessor for Optional();
    uint64_t v253 = v211;
    uint64_t v254 = v212;
    *(void *)&long long v240 = sub_100061F8C();
    *((void *)&v240 + 1) = WitnessTable;
    unint64_t v241 = sub_100062168();
    uint64_t v259 = swift_getWitnessTable();
    uint64_t v260 = &protocol witness table for _PaddingLayout;
    uint64_t v258 = swift_getWitnessTable();
    uint64_t v242 = swift_getWitnessTable();
    uint64_t v243 = sub_10006220C(&qword_10019A5A8, &qword_10019A3B0, (void (*)(void))sub_100062284);
    uint64_t v244 = sub_10006220C(&qword_10019A5B8, &qword_10019A3B8, (void (*)(void))sub_100062330);
    sub_100050970((uint64_t *)&v263, 6uLL, (uint64_t)&v250);
    sub_1000067DC(v174, &qword_10019A3B8);
    sub_1000067DC(v180, &qword_10019A3B0);
    sub_1000067DC((uint64_t)v230, &qword_10019A3A8);
    uint64_t v183 = v204;
    ((void (*)(char *, uint64_t))v204)(v228, v178);
    sub_1000067DC(v227, &qword_10019A3A0);
    sub_1000067DC(v182, &qword_10019A3B8);
    sub_1000067DC(v181, &qword_10019A3B0);
    sub_100062424(v233);
    sub_1000067DC(v225, &qword_10019A3A8);
    ((void (*)(uint64_t, uint64_t))v183)(v229, v178);
    return sub_1000067DC(v221, &qword_10019A3A0);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005CF80(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019A5D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EventView();
  sub_100053018(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008E988();
  swift_release();
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter();
  uint64_t v7 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 152))(v2, v7);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    swift_retain();
    sub_1000AC4E4(v8, v10, 0, 3, 9, 0, 3u, v11);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

void *sub_10005D194()
{
  uint64_t v0 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019A2F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[2] = &type metadata for AppleMusicFetcher;
  unint64_t v7 = sub_100061300();
  v10[3] = v7;
  swift_getKeyPath();
  v10[0] = &type metadata for AppleMusicFetcher;
  v10[1] = v7;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0))
  {
    sub_1000067DC((uint64_t)v6, &qword_10019A2F8);
    return &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_1000628BC((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_1000067DC((uint64_t)v6, &qword_10019A2F8);
    uint64_t v8 = *((void *)v3 + 4);
    swift_bridgeObjectRetain();
    sub_100062924((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
  return (void *)v8;
}

uint64_t sub_10005D388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019A2F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2] = &type metadata for AppleMusicFetcher;
  unint64_t v9 = sub_100061300();
  uint64_t v12[3] = v9;
  swift_getKeyPath();
  v12[0] = &type metadata for AppleMusicFetcher;
  v12[1] = v9;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_1000067DC((uint64_t)v8, &qword_10019A2F8);
    uint64_t v10 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    sub_1000628BC((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_1000067DC((uint64_t)v8, &qword_10019A2F8);
    sub_1000066D4((uint64_t)&v5[*(int *)(v2 + 32)], a1, &qword_100198630);
    return sub_100062924((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
}

uint64_t sub_10005D5C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EventView();
  sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v6 = sub_10008EA2C();
  uint64_t v8 = v7;
  swift_release();
  sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008F258();
  swift_release();
  sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 72))
  {
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_10009130C(v9);
    uint64_t v12 = v11;
    swift_release();
    swift_release();
    type metadata accessor for AppViewModel();
    swift_allocObject();
    return sub_10007F50C(v6, v8, (uint64_t)v4, v10, v12, 0);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005D790(uint64_t a1)
{
  sub_100053018(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008E554();
  swift_release();
  sub_100053018(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  int v3 = sub_10008FD44();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)(v1 + 56);
  if (v3 != *(unsigned __int8 *)(v5 + 16))
  {
    sub_100006560(&qword_1001999F0);
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(v5 + 16) = v3;
  return result;
}

uint64_t sub_10005D888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v31 = a4;
  uint64_t v6 = type metadata accessor for EventView();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v27[-v8];
  uint64_t v30 = sub_100006560(&qword_10019A4F0);
  uint64_t v10 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100006560(&qword_10019A4A0);
  uint64_t v14 = v13 - 8;
  __n128 v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  int v28 = v18;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, v6, v15);
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v29;
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = v21;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32))(v20 + v19, v9, v6);
  uint64_t v22 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  char v32 = 2;
  char v33 = v28;
  uint64_t v34 = sub_100061828;
  uint64_t v35 = v20;
  uint64_t v36 = KeyPath;
  uint64_t v37 = v22;
  static Font.Weight.medium.getter();
  sub_100006560(&qword_10019A4C0);
  sub_100061550();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v20) = static Edge.Set.horizontal.getter();
  uint64_t v24 = v30;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v17, v12, v30);
  uint64_t v25 = &v17[*(int *)(v14 + 44)];
  *uint64_t v25 = v20;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  v25[40] = 1;
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v24);
  return sub_10001D6D8((uint64_t)v17, v31, &qword_10019A4A0);
}

uint64_t sub_10005DBA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventView();
  sub_100053018(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008F364();
  swift_release();
  sub_100053018(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    swift_retain();
    sub_10008F440(0, 1, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventView();
  sub_100053018(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v5 = sub_10008F794();
  uint64_t v7 = v6;
  swift_release();
  *(void *)&v28[0] = v5;
  *((void *)&v28[0] + 1) = v7;
  sub_10002374C();
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v13 = Text.fontWeight(_:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_1000065A4(v8, v10, v12);
  swift_bridgeObjectRelease();
  uint64_t v20 = static Alignment.center.getter();
  sub_100051068(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v28, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v19, v17);
  sub_1000065A4(v13, v15, v19);
  uint64_t result = swift_bridgeObjectRelease();
  double v23 = 0.0;
  if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
    double v23 = 1.0;
  }
  long long v24 = v28[7];
  *(_OWORD *)(a2 + 96) = v28[6];
  *(_OWORD *)(a2 + 112) = v24;
  *(_OWORD *)(a2 + 128) = v28[8];
  long long v25 = v28[3];
  *(_OWORD *)(a2 + 32) = v28[2];
  *(_OWORD *)(a2 + 48) = v25;
  long long v26 = v28[5];
  *(_OWORD *)(a2 + 64) = v28[4];
  *(_OWORD *)(a2 + 80) = v26;
  long long v27 = v28[1];
  *(_OWORD *)a2 = v28[0];
  *(_OWORD *)(a2 + 16) = v27;
  *(double *)(a2 + 144) = v23;
  return result;
}

uint64_t sub_10005DE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v45 = sub_100006560(&qword_10019A4E8);
  __chkstk_darwin(v45);
  uint64_t v46 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DismissAction();
  uint64_t v4 = *(void *)(v38 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - v7;
  uint64_t v43 = sub_100006560(&qword_10019A4F0);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v40 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100006560(&qword_10019A4A0);
  __chkstk_darwin(v44);
  uint64_t v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v42 = (uint64_t)&v37 - v12;
  uint64_t v13 = type metadata accessor for EventView();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - v15;
  if (!*(void *)(a1 + 72)) {
    goto LABEL_17;
  }
  swift_retain();
  char v17 = sub_100116888();
  uint64_t v19 = v18;
  swift_release();
  if (!v19 || (swift_bridgeObjectRelease(), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    goto LABEL_5;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  if (v34)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_6:
    if (*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
      char v20 = 2;
    }
    else {
      char v20 = 1;
    }
    sub_10001D698((uint64_t)v8);
    uint64_t v22 = v37;
    uint64_t v21 = v38;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v37, v8, v38);
    unint64_t v23 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v24 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v24 + v23, v22, v21);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v21);
    uint64_t v25 = static Font.title.getter();
    uint64_t KeyPath = swift_getKeyPath();
    char v48 = 1;
    char v49 = v20;
    uint64_t v50 = sub_10003EE6C;
    uint64_t v51 = v24;
    uint64_t v52 = KeyPath;
    uint64_t v53 = v25;
    static Font.Weight.medium.getter();
    sub_100006560(&qword_10019A4C0);
    sub_100061550();
    long long v27 = v40;
    View.fontWeight(_:)();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v24) = static Edge.Set.horizontal.getter();
    uint64_t v28 = v41;
    uint64_t v29 = (uint64_t)v39;
    uint64_t v30 = v43;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v39, v27, v43);
    uint64_t v31 = v29 + *(int *)(v44 + 36);
    *(unsigned char *)uint64_t v31 = v24;
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *(unsigned char *)(v31 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v30);
    uint64_t v32 = v42;
    sub_10001D6D8(v29, v42, &qword_10019A4A0);
    sub_1000066D4(v32, v46, &qword_10019A4A0);
    swift_storeEnumTagMultiPayload();
    sub_1000614A0();
    _ConditionalContent<>.init(storage:)();
    return sub_1000067DC(v32, &qword_10019A4A0);
  }
  uint64_t v35 = *((void *)v16 + 9);
  if (!v35)
  {
LABEL_17:
    while (1)
    {
      type metadata accessor for RemoteViewConfiguration();
      sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      EnvironmentObject.error()();
      __break(1u);
    }
  }
  switch(*(unsigned char *)(v35 + 32))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      if ((v36 & 1) == 0) {
        goto LABEL_6;
      }
      break;
    default:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      break;
  }
  swift_storeEnumTagMultiPayload();
  sub_1000614A0();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_10005E5A0()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_100053018(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008FA00();

  return swift_release();
}

void sub_10005E618(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

uint64_t sub_10005E624()
{
  uint64_t v0 = type metadata accessor for EventView();
  sub_100053018(v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10008E8B8();

  return swift_release();
}

uint64_t sub_10005E6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v29 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  long long v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for TicketView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = type metadata accessor for EventView();
  sub_100053018(v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v25 = sub_10008EA2C();
  uint64_t v24 = v15;
  swift_release();
  uint64_t v16 = sub_100053018(v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v17 = v29;
  uint64_t v18 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v26, v16 + *(void *)(*(void *)v16 + 160), a2);
  swift_release();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 192))(a2, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, a2);
  sub_10007E700(v25, v24, v19, (uint64_t)v31);
  sub_100079598((uint64_t)v31, (uint64_t)v10);
  swift_getWitnessTable();
  char v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v20(v13, v10, v7);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v10, v7);
  v20(v30, v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, v7);
}

uint64_t sub_10005EA10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008FABC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005EA40()
{
  return sub_10008FAD0();
}

uint64_t sub_10005EA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[0] = a4;
  uint64_t v7 = type metadata accessor for EventView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - v9;
  sub_100006560(&qword_10019A498);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10014D4D0;
  sub_100053018(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v11 + 56) = type metadata accessor for URL();
  sub_100035868((uint64_t *)(v11 + 32));
  sub_10008F258();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, v10, v7);
  uint64_t v14 = static SafeAreaRegions.all.getter();
  char v15 = static Edge.Set.all.getter();
  v18[2] = 0;
  v18[3] = 0;
  v18[1] = v11;
  v18[4] = sub_100061358;
  v18[5] = v13;
  v18[6] = v14;
  char v19 = v15;
  sub_100006560(&qword_100198650);
  type metadata accessor for PresentationDetent();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10014CCD0;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_1000BE2EC(v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_100006560(&qword_10019A428);
  sub_100062068(&qword_10019A430, &qword_10019A428, (void (*)(void))sub_100060494);
  View.presentationDetents(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10005ED80(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = type metadata accessor for EventView();
    sub_100053018(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    sub_10008FAE4();
    swift_release();
  }
}

uint64_t sub_10005EDEC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008FB10();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005EE1C()
{
  return sub_10008FBD8();
}

uint64_t sub_10005EE44@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EventView();
  uint64_t v3 = sub_100053018(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v4 = *(void *)(v3 + *(void *)(*(void *)v3 + 168));
  swift_retain();
  swift_release();
  type metadata accessor for RemoteViewConfiguration();
  sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  uint64_t result = EnvironmentObject.init()();
  *a1 = v4;
  a1[1] = result;
  a1[2] = v6;
  return result;
}

uint64_t sub_10005EF10(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EventView();
  sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_6;
  }
  swift_retain();
  char v6 = sub_100091408();
  swift_release();
  swift_release();
  if (v6) {
    sub_10005F118(v5);
  }
  uint64_t v7 = sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001CA34((uint64_t)v4);
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 176);
  swift_beginAccess();
  sub_100060DA0((uint64_t)v4, v8);
  swift_endAccess();
  swift_release();
  sub_100053018(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (*(void *)(a1 + 72))
  {
    uint64_t v9 = swift_retain();
    sub_10008FCA4(v9);
    swift_release();
    return swift_release();
  }
  else
  {
LABEL_6:
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005F118(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100053018(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v9 = sub_10008FD9C();
  uint64_t v11 = v10;
  uint64_t result = swift_release();
  if (v11)
  {
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
    type metadata accessor for MainActor();
    uint64_t v14 = static MainActor.shared.getter();
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    unint64_t v16 = (v4 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v14;
    *(void *)(v17 + 24) = &protocol witness table for MainActor;
    *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v17 + v15, v5, a1);
    uint64_t v18 = (uint64_t *)(v17 + v16);
    *uint64_t v18 = v9;
    v18[1] = v11;
    sub_1000FA73C((uint64_t)v8, (uint64_t)&unk_10019A478, v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_10005F34C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventView();
  sub_100053018(v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    swift_retain();
    sub_10008F440(0, 2, 0, 3u, v3);
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000623DC((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10005F43C()
{
  return swift_release();
}

uint64_t sub_10005F4AC()
{
  uint64_t v0 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for EventView();
  uint64_t v4 = sub_100053018(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10001CA34((uint64_t)v2);
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 176);
  swift_beginAccess();
  sub_100060DA0((uint64_t)v2, v5);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10005F5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_10005F664, v5, v4);
}

uint64_t sub_10005F664()
{
  uint64_t v1 = type metadata accessor for EventView();
  uint64_t v2 = sub_100053018(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  *(void *)(v0 + 64) = *(void *)(v2 + *(void *)(*(void *)v2 + 168));
  swift_retain();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10005F74C;
  return sub_100124684();
}

uint64_t sub_10005F74C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10005F890, v3, v2);
}

uint64_t sub_10005F890()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  type metadata accessor for MainActor();
  v8[7] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[8] = v10;
  v8[9] = v9;
  return _swift_task_switch(sub_10005F990, v10, v9);
}

uint64_t sub_10005F990()
{
  v0[10] = type metadata accessor for EventView();
  v0[11] = sub_1000530A8();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10019A480 + dword_10019A480);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005FA58;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  return v5(v3, v2);
}

uint64_t sub_10005FA58()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_10005FB9C, v3, v2);
}

uint64_t sub_10005FB9C()
{
  v0[13] = sub_100053018(v0[10], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005FC50;
  return sub_10008FFCC();
}

uint64_t sub_10005FC50()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_10005FD94, v3, v2);
}

uint64_t sub_10005FD94()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005FDF4(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_100006560(&qword_10019A2F8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[14] = v5;
  v3[15] = v4;
  return _swift_task_switch(sub_10005FED0, v5, v4);
}

uint64_t sub_10005FED0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005FF68;
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  return sub_10012A6B0(v2, v3, v4);
}

uint64_t sub_10005FF68()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v5 = sub_1000601DC;
  }
  else {
    uint64_t v5 = sub_1000600A4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000600A4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *uint64_t v3 = &type metadata for AppleMusicFetcher;
  unint64_t v4 = sub_100061300();
  v3[1] = v4;
  swift_getKeyPath();
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *uint64_t v5 = &type metadata for AppleMusicFetcher;
  v5[1] = v4;
  swift_getKeyPath();
  swift_task_dealloc();
  sub_1000066D4(v1, v2, &qword_10019A2F8);
  swift_retain();
  static Published.subscript.setter();
  sub_1000067DC(v1, &qword_10019A2F8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000601DC()
{
  uint64_t v13 = v0;
  swift_release();
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = v0[8];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[5] = sub_10004D828(v6, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    v0[7] = sub_10004D828(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch artist with id %s. Error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

unint64_t sub_100060494()
{
  unint64_t result = qword_10019A438;
  if (!qword_10019A438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A438);
  }
  return result;
}

unint64_t sub_1000604E8()
{
  unint64_t result = qword_10019A440;
  if (!qword_10019A440)
  {
    sub_10000650C(&qword_100198948);
    sub_1000623DC((unint64_t *)&qword_100198A80, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A440);
  }
  return result;
}

uint64_t sub_10006058C@<X0>(char *a1@<X8>)
{
  return sub_100056AF8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100060598()
{
  unint64_t result = qword_10019A448;
  if (!qword_10019A448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A448);
  }
  return result;
}

uint64_t sub_1000605F0(uint64_t a1)
{
  return sub_100061ADC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10005E5A0);
}

unint64_t sub_100060608()
{
  unint64_t result = qword_10019A450;
  if (!qword_10019A450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A450);
  }
  return result;
}

uint64_t sub_100060660()
{
  type metadata accessor for EventView();

  return sub_10005E624();
}

unint64_t sub_1000606EC()
{
  unint64_t result = qword_10019A458;
  if (!qword_10019A458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10019A458);
  }
  return result;
}

uint64_t sub_100060740@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008E77C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100060770()
{
  return sub_10008E790();
}

uint64_t sub_100060798()
{
  return 16;
}

__n128 sub_1000607A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000607B4()
{
  return sub_100060858((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005E6B0);
}

uint64_t sub_1000607CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008FABC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000607FC()
{
  return sub_10008FAD0();
}

uint64_t sub_100060824()
{
  return 16;
}

__n128 sub_100060830(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100060840()
{
  return sub_100060858((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005EA68);
}

uint64_t sub_100060858(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_1000608F8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008FB10();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100060928()
{
  return sub_10008FBD8();
}

uint64_t sub_100060950()
{
  return 16;
}

__n128 sub_10006095C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10006096C@<X0>(void *a1@<X8>)
{
  type metadata accessor for EventView();

  return sub_10005EE44(a1);
}

uint64_t sub_1000609FC()
{
  return sub_100061840((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005EF10);
}

uint64_t sub_100060A18()
{
  return sub_100061840((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005F34C);
}

uint64_t sub_100060A30()
{
  return swift_release();
}

uint64_t sub_100060AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v17 - v13;
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v15((char *)v17 - v13, a1, v7, v12);
  v17[2] = v5;
  void v17[3] = v6;
  swift_getKeyPath();
  v17[0] = v5;
  v17[1] = v6;
  swift_getKeyPath();
  ((void (*)(char *, char *, uint64_t))v15)(v10, v14, v7);
  swift_retain();
  static Published.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t sub_100060C7C()
{
  return sub_100061840((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005F43C);
}

uint64_t sub_100060C98()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A678;
  return sub_10005F5C8(v5, v2, v3);
}

uint64_t sub_100060D80()
{
  return sub_10005F4AC();
}

uint64_t sub_100060DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060E08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100060E34()
{
  return EnvironmentValues.font.setter();
}

void sub_100060E60(uint64_t a1@<X3>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(a1 + 16);
}

unsigned __int8 *sub_100060E6C(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = *result;
  if (v6 != *(unsigned __int8 *)(a5 + 16))
  {
    sub_100006560(&qword_1001999F0);
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = (unsigned __int8 *)swift_release();
  }
  *(unsigned char *)(a5 + 16) = v6;
  return result;
}

uint64_t sub_100060F00()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + v2;
  sub_10001D0DC();
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + v1[13];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v3 + v1[14];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v1[15];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100061198(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for EventView() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + v7;
  uint64_t v11 = (void *)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  void *v14 = v2;
  v14[1] = sub_100010CB0;
  return sub_10005F8F0(a1, v8, v9, v10, v12, v13, v4, v5);
}

uint64_t sub_1000612E8()
{
  return 16;
}

__n128 sub_1000612F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_100061300()
{
  unint64_t result = qword_10019A488;
  if (!qword_10019A488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A488);
  }
  return result;
}

void sub_100061358(uint64_t a1, char a2)
{
  type metadata accessor for EventView();

  sub_10005ED80(a1, a2);
}

uint64_t sub_10006140C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005799C(v1[4], v1[2], v1[3], a1);
}

void sub_10006141C(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)(v1 + 40) + 16);
}

uint64_t sub_100061430()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

unsigned __int8 *sub_100061470(unsigned __int8 *a1)
{
  return sub_100060E6C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10006147C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005D888(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100061488@<X0>(uint64_t a1@<X8>)
{
  return sub_10005DCBC(*(void *)(v1 + 32), a1);
}

uint64_t sub_100061494@<X0>(uint64_t a1@<X8>)
{
  return sub_10005DE74(*(void *)(v1 + 32), a1);
}

unint64_t sub_1000614A0()
{
  unint64_t result = qword_10019A4B8;
  if (!qword_10019A4B8)
  {
    sub_10000650C(&qword_10019A4A0);
    sub_10000650C(&qword_10019A4C0);
    sub_100061550();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4B8);
  }
  return result;
}

unint64_t sub_100061550()
{
  unint64_t result = qword_10019A4C8;
  if (!qword_10019A4C8)
  {
    sub_10000650C(&qword_10019A4C0);
    sub_1000615F0();
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4C8);
  }
  return result;
}

unint64_t sub_1000615F0()
{
  unint64_t result = qword_10019A4D0;
  if (!qword_10019A4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4D0);
  }
  return result;
}

unint64_t sub_100061644()
{
  unint64_t result = qword_10019A4D8;
  if (!qword_10019A4D8)
  {
    sub_10000650C(&qword_10019A4A8);
    sub_1000238F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4D8);
  }
  return result;
}

unint64_t sub_1000616C0()
{
  unint64_t result = qword_10019A4E0;
  if (!qword_10019A4E0)
  {
    sub_10000650C(&qword_10019A4B0);
    sub_1000614A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4E0);
  }
  return result;
}

uint64_t sub_10006173C()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1000617CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000617F8()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100061828()
{
  return sub_100061840((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005DBA4);
}

uint64_t sub_100061840(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

void sub_1000618D8(double *a1@<X8>)
{
  *a1 = sub_10008E540();
}

uint64_t sub_100061904()
{
  return sub_10008E554();
}

uint64_t sub_10006192C()
{
  return 16;
}

__n128 sub_100061938(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10006194C()
{
  return 16;
}

__n128 sub_100061958(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100061964@<X0>(char *a1@<X8>)
{
  return sub_100058C1C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100061974()
{
  uint64_t v0 = type metadata accessor for EventView();
  return sub_10005D790(v0);
}

void sub_1000619E8(double *a1@<X8>)
{
  *a1 = sub_10008E568();
}

uint64_t sub_100061A14()
{
  return sub_10008E630();
}

uint64_t sub_100061A3C()
{
  return 16;
}

__n128 sub_100061A48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100061A54@<X0>(uint64_t a1@<X8>)
{
  return sub_1000590D8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100061A60@<X0>(uint64_t a1@<X8>)
{
  return sub_10005A100(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100061A6C()
{
  unint64_t result = qword_10019A4F8;
  if (!qword_10019A4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A4F8);
  }
  return result;
}

uint64_t sub_100061AC4(uint64_t a1)
{
  return sub_100061ADC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10005B208);
}

uint64_t sub_100061ADC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a2(a1, v7, v4, v5);
}

uint64_t sub_100061B7C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005B27C(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100061B88()
{
  unint64_t result = qword_10019A510;
  if (!qword_10019A510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A510);
  }
  return result;
}

unint64_t sub_100061BF4()
{
  unint64_t result = qword_10019A558;
  if (!qword_10019A558)
  {
    sub_10000650C(&qword_10019A528);
    sub_100010484(&qword_10019A560, &qword_10019A520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A558);
  }
  return result;
}

uint64_t sub_100061C98()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  sub_10001D0DC();
  sub_10001D0DC();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[13];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + v1[14];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v2 + v1[15];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100061F08()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10005D5C8(v2);
}

unint64_t sub_100061F8C()
{
  unint64_t result = qword_10019A568;
  if (!qword_10019A568)
  {
    sub_10000650C(&qword_10019A3A0);
    sub_10000650C(&qword_10019A570);
    sub_100062068(&qword_10019A578, &qword_10019A570, (void (*)(void))sub_1000620E4);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A568);
  }
  return result;
}

uint64_t sub_100062068(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000620E4()
{
  return sub_100062068(&qword_10019A580, &qword_10019A588, (void (*)(void))sub_100062114);
}

unint64_t sub_100062114()
{
  unint64_t result = qword_10019A590;
  if (!qword_10019A590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A590);
  }
  return result;
}

unint64_t sub_100062168()
{
  unint64_t result = qword_10019A598;
  if (!qword_10019A598)
  {
    sub_10000650C(&qword_10019A3A8);
    sub_1000623DC(&qword_10019A5A0, (void (*)(uint64_t))type metadata accessor for AttributionModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A598);
  }
  return result;
}

uint64_t sub_10006220C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100062284()
{
  unint64_t result = qword_10019A5B0;
  if (!qword_10019A5B0)
  {
    sub_10000650C(&qword_10019A530);
    sub_100061BF4();
    sub_1000623DC((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A5B0);
  }
  return result;
}

unint64_t sub_100062330()
{
  unint64_t result = qword_10019A5C0;
  if (!qword_10019A5C0)
  {
    sub_10000650C(&qword_10019A518);
    sub_1000623DC(&qword_10019A5C8, (void (*)(uint64_t))type metadata accessor for AppModule);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A5C0);
  }
  return result;
}

uint64_t sub_1000623DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100062424(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100062470(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006249C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000624C8()
{
  uint64_t v1 = (int *)type metadata accessor for EventView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v2;
  sub_10001D0DC();
  sub_10001D0DC();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v2 + v1[13];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v6 + v1[14];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v6 + v1[15];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v2 + v15 + v5) & ~v5), v3);

  return swift_deallocObject();
}

uint64_t sub_1000627D4()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for ArtistPromotionalAssets();

  return sub_10005CF80(v0 + v2);
}

uint64_t sub_1000628BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100062924(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100062984@<X0>(uint64_t a1@<X8>)
{
  return sub_10005ACE0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100062990@<X0>(uint64_t a1@<X8>)
{
  return sub_10005A938(v1[4], v1[2], v1[3], a1);
}

ValueMetadata *type metadata accessor for EventViewSafeAreaPreferenceKey()
{
  return &type metadata for EventViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for EventViewHeightPreferenceKey()
{
  return &type metadata for EventViewHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for HeaderContentHeightPreferenceKey()
{
  return &type metadata for HeaderContentHeightPreferenceKey;
}

uint64_t sub_1000629D8()
{
  return swift_getWitnessTable();
}

unint64_t sub_100063528(uint64_t a1)
{
  unint64_t result = sub_100061A6C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100063550(uint64_t a1)
{
  unint64_t result = sub_100060598();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100063578(uint64_t a1)
{
  unint64_t result = sub_100060608();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000635A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100027280(v2);
  sub_100027280(v3);
  return a1;
}

uint64_t sub_10006361C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006365C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000636C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000636F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_100010924(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100063768(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000637C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000637F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006384C()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  __n128 v1 = __chkstk_darwin(v0);
  (*(void (**)(char *, void, __n128))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v1);
  uint64_t result = Color.init(_:red:green:blue:opacity:)();
  qword_1001AA330 = result;
  return result;
}

uint64_t sub_100063930(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_systemBackgroundColor, &qword_1001AA338);
}

uint64_t sub_100063944(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_secondarySystemBackgroundColor, &qword_1001AA340);
}

uint64_t sub_100063958(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_secondaryLabelColor, &qword_1001AA348);
}

uint64_t sub_10006396C(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_1001AA350);
}

uint64_t sub_100063980(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_secondarySystemGroupedBackgroundColor, &qword_1001AA358);
}

uint64_t sub_100063994(uint64_t a1)
{
  return sub_1000639A8(a1, (SEL *)&selRef_tertiarySystemFillColor, &qword_1001AA360);
}

uint64_t sub_1000639A8(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4 = [self *a2];
  uint64_t result = Color.init(_:)();
  *a3 = result;
  return result;
}

__n128 initializeWithCopy for PaddingModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PaddingModifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PaddingModifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaddingModifier()
{
  return &type metadata for PaddingModifier;
}

uint64_t sub_100063A68()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100063A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100006560(&qword_10019A688);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v8 = static Edge.Set.top.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v8) {
    uint64_t v9 = v2[1];
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned __int8 v10 = static Edge.Set.leading.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v10) {
    uint64_t v11 = v2[2];
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned __int8 v12 = static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v12) {
    uint64_t v13 = v2[3];
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned __int8 v14 = static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v14) {
    uint64_t v15 = v2[4];
  }
  else {
    uint64_t v15 = 0;
  }
  char v16 = static Edge.Set.all.getter();
  uint64_t v17 = sub_100006560(&qword_10019A690);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v7, a1, v17);
  uint64_t v18 = &v7[*(int *)(v5 + 36)];
  *uint64_t v18 = v16;
  *((void *)v18 + 1) = v9;
  *((void *)v18 + 2) = v11;
  *((void *)v18 + 3) = v13;
  *((void *)v18 + 4) = v15;
  v18[40] = 0;
  return sub_100063C40((uint64_t)v7, a2);
}

uint64_t sub_100063C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019A688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100063CAC()
{
  unint64_t result = qword_10019A698;
  if (!qword_10019A698)
  {
    sub_10000650C(&qword_10019A688);
    sub_100063D28();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A698);
  }
  return result;
}

unint64_t sub_100063D28()
{
  unint64_t result = qword_10019A6A0;
  if (!qword_10019A6A0)
  {
    sub_10000650C(&qword_10019A690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A6A0);
  }
  return result;
}

uint64_t sub_100063D88(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100063DF0(&qword_10019A6A8);
  uint64_t result = sub_100063DF0(&qword_10019A6B0);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100063DF0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PromotionalAssets.PhoneWallpaper();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100063E34()
{
  qword_10019A6B8 = 0x7473696C70;
  unk_10019A6C0 = 0xE500000000000000;
}

unint64_t sub_100063E54(char a1)
{
  uint64_t v2 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  id v12 = [self mainBundle];
  char v36 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (qword_1001980C0 != -1) {
    swift_once();
  }
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v12 URLForResource:v13 withExtension:v14];

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_17;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  char v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v16(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_17:
    sub_1000067DC((uint64_t)v4, &qword_100198630);
    return sub_10013B948((uint64_t)&_swiftEmptyArrayStorage);
  }
  uint64_t v17 = v36;
  v16(v36, v4, v5);
  uint64_t v25 = Data.init(contentsOf:options:)();
  unint64_t v27 = v26;
  uint64_t v28 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v38[0] = 0;
  id v30 = [v28 propertyListWithData:isa options:0 format:0 error:v38];

  if (v30)
  {
    id v31 = v38[0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100006560(&qword_10019A6C8);
    if (swift_dynamicCast()) {
      unint64_t v24 = v37;
    }
    else {
      unint64_t v24 = sub_10013B948((uint64_t)&_swiftEmptyArrayStorage);
    }
    sub_100033310(v25, v27);
  }
  else
  {
    id v32 = v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100033310(v25, v27);
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10003345C(v18, (uint64_t)qword_1001AA440);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      v38[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      if (a1)
      {
        if (a1 == 1) {
          uint64_t v22 = 0xD000000000000019;
        }
        else {
          uint64_t v22 = 0xD000000000000014;
        }
        if (a1 == 1) {
          unint64_t v23 = 0x8000000100157D10;
        }
        else {
          unint64_t v23 = 0x8000000100157CF0;
        }
      }
      else
      {
        uint64_t v22 = 0xD000000000000016;
        unint64_t v23 = 0x8000000100157D30;
      }
      uint64_t v37 = sub_10004D828(v22, v23, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v33 = Error.localizedDescription.getter();
      uint64_t v37 = sub_10004D828(v33, v34, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error fetching allow list for %s %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v17 = v36;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v24 = sub_10013B948((uint64_t)&_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  return v24;
}

unint64_t sub_1000644FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100063E54(2);
  if (!*(void *)(v4 + 16) || (unint64_t v5 = sub_1000A80EC(0xD000000000000032, 0x8000000100157CB0), (v6 & 1) == 0))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_10004DE80(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_10:
    sub_1000067DC((uint64_t)&v11, (uint64_t *)&unk_10019D3D0);
LABEL_11:
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_12:
    sub_1000067DC((uint64_t)&v11, (uint64_t *)&unk_10019D3D0);
    return sub_10013B948((uint64_t)&_swiftEmptyArrayStorage);
  }
  sub_100006560(&qword_10019A6C8);
  if ((swift_dynamicCast() & 1) == 0 || !v10) {
    goto LABEL_11;
  }
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1000A80EC(a1, a2);
    if (v8)
    {
      sub_10004DE80(*(void *)(v10 + 56) + 32 * v7, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1)) {
    goto LABEL_12;
  }
  sub_100006560(&qword_10019A6C8);
  if (swift_dynamicCast()) {
    return v10;
  }
  return sub_10013B948((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100064690()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_10006475C()
{
  return *(double *)(v0 + 56) * 0.6;
}

double sub_100064774()
{
  double v1 = *(double *)(v0 + 56) * 0.6;
  return v1 / (double)Array.count.getter();
}

BOOL sub_1000647C8()
{
  return Array.count.getter() > 1;
}

uint64_t sub_100064800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  ObservationRegistrar.init()();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  *(double *)(v16 + 56) = a7;
  *(double *)(v16 + 64) = a8;
  *(unsigned char *)(v16 + 72) = a6;
  return v16;
}

uint64_t sub_100064898()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10019A6D0;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100064914()
{
  sub_100064898();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TourPhotosViewModel()
{
  return sub_1000068A4();
}

uint64_t destroy for NavigationButton()
{
  return swift_release();
}

uint64_t _s15ShazamEventsApp16NavigationButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton()
{
  return &type metadata for NavigationButton;
}

uint64_t sub_100064AE8()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_100064B0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100064B20()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100064B68()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100064B94()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100064BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = a1;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  LODWORD(v37) = a1 >> 8;
  uint64_t v7 = type metadata accessor for BorderlessButtonStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019A758);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100006560(&qword_10019A760);
  uint64_t v38 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_10019A768);
  __chkstk_darwin(v17 - 8);
  char v36 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v39 = v6;
  char v40 = (char)v37;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_retain();
  sub_100006560(&qword_10019A770);
  sub_10006517C();
  Button.init(action:label:)();
  BorderlessButtonStyle.init()();
  uint64_t v19 = sub_100010484(&qword_10019A788, &qword_10019A758);
  uint64_t v20 = sub_100066474(&qword_10019A790, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  uint64_t v37 = v16;
  View.buttonStyle<A>(_:)();
  uint64_t v21 = v10;
  uint64_t v22 = v7;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v23 = v33;
  uint64_t v24 = v34;
  uint64_t v25 = v22;
  uint64_t v26 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v28 = v27;
  uint64_t v43 = v11;
  uint64_t v44 = v25;
  LOBYTE(v12) = v29 & 1;
  uint64_t v45 = v19;
  uint64_t v46 = v20;
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = (uint64_t)v36;
  id v30 = v37;
  View.accessibility(label:)();
  sub_1000065A4(v26, v28, v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v23);
  return sub_10001D6D8(v31, v24, &qword_10019A768);
}

uint64_t sub_100065080@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3 = a1 >> 8;
  uint64_t v4 = Image.init(systemName:)();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_100065164@<X0>(uint64_t a1@<X8>)
{
  return sub_100064BD8(*v1, *((void *)v1 + 1), *((void *)v1 + 2), a1);
}

uint64_t sub_100065170@<X0>(uint64_t a1@<X8>)
{
  return sub_100065080(*(unsigned __int16 *)(v1 + 16), a1);
}

unint64_t sub_10006517C()
{
  unint64_t result = qword_10019A778;
  if (!qword_10019A778)
  {
    sub_10000650C(&qword_10019A770);
    sub_1000651F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A778);
  }
  return result;
}

unint64_t sub_1000651F8()
{
  unint64_t result = qword_10019A780;
  if (!qword_10019A780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A780);
  }
  return result;
}

uint64_t sub_10006524C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v79 = a2;
  uint64_t v87 = a1;
  uint64_t v88 = a5;
  uint64_t v81 = sub_100006560(&qword_10019A7B0);
  __chkstk_darwin(v81);
  uint64_t v83 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100006560(&qword_10019A7B8);
  __chkstk_darwin(v76);
  uint64_t v77 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100006560(&qword_10019A7C0);
  __chkstk_darwin(v80);
  uint64_t v78 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100006560(&qword_10019A7C8);
  __chkstk_darwin(v75);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)&v73 - v13;
  uint64_t v84 = sub_100006560(&qword_10019A7D0);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100006560(&qword_10019A7D8);
  __chkstk_darwin(v85);
  uint64_t v86 = (uint64_t)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019A7E0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_10019A7E8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006560(&qword_10019A7F0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v73 - v26;
  a4 &= 1u;
  sub_1000239D8(a3, a4);
  char v28 = sub_10001D1A0(a3, a4);
  sub_10001D868(a3, a4);
  if (v28)
  {
    static SymbolRenderingMode.palette.getter();
    uint64_t v29 = type metadata accessor for SymbolRenderingMode();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v18, 0, 1, v29);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v31 = (uint64_t *)&v21[*(int *)(v19 + 36)];
    uint64_t v32 = sub_100006560(&qword_10019A7F8);
    sub_1000066D4((uint64_t)v18, (uint64_t)v31 + *(int *)(v32 + 28), &qword_10019A7E0);
    uint64_t *v31 = KeyPath;
    uint64_t v33 = sub_100006560(&qword_10019A800);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v21, v87, v33);
    sub_1000067DC((uint64_t)v18, &qword_10019A7E0);
    uint64_t v34 = static Color.white.getter();
    uint64_t v35 = static Color.gray.getter();
    sub_1000066D4((uint64_t)v21, (uint64_t)v24, &qword_10019A7E8);
    char v36 = (uint64_t *)&v24[*(int *)(v22 + 36)];
    *char v36 = v34;
    v36[1] = v35;
    sub_1000067DC((uint64_t)v21, &qword_10019A7E8);
    sub_10001D6D8((uint64_t)v24, (uint64_t)v27, &qword_10019A7F0);
    sub_1000066D4((uint64_t)v27, v86, &qword_10019A7F0);
    swift_storeEnumTagMultiPayload();
    sub_1000667E4();
    sub_100066884();
    _ConditionalContent<>.init(storage:)();
    uint64_t v37 = (uint64_t)v27;
    uint64_t v38 = &qword_10019A7F0;
  }
  else
  {
    uint64_t v39 = v87;
    uint64_t v73 = v22;
    if ((_BYTE)v79)
    {
      if (v79 == 1)
      {
        static SymbolRenderingMode.palette.getter();
        uint64_t v40 = type metadata accessor for SymbolRenderingMode();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v18, 0, 1, v40);
        uint64_t v41 = swift_getKeyPath();
        uint64_t v42 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        uint64_t v43 = sub_100006560(&qword_10019A7F8);
        sub_1000066D4((uint64_t)v18, (uint64_t)v42 + *(int *)(v43 + 28), &qword_10019A7E0);
        *uint64_t v42 = v41;
        uint64_t v44 = sub_100006560(&qword_10019A800);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v21, v39, v44);
        sub_1000067DC((uint64_t)v18, &qword_10019A7E0);
        uint64_t v45 = static Color.white.getter();
        static Color.white.getter();
        uint64_t v46 = Color.opacity(_:)();
        swift_release();
        sub_1000066D4((uint64_t)v21, (uint64_t)v24, &qword_10019A7E8);
        uint64_t v47 = (uint64_t *)&v24[*(int *)(v73 + 36)];
        *uint64_t v47 = v45;
        v47[1] = v46;
        sub_1000067DC((uint64_t)v21, &qword_10019A7E8);
        uint64_t v48 = (uint64_t)v24;
        char v49 = v27;
        sub_10001D6D8(v48, (uint64_t)v27, &qword_10019A7F0);
        sub_1000066D4((uint64_t)v27, v77, &qword_10019A7F0);
        swift_storeEnumTagMultiPayload();
        sub_100066680();
        sub_1000667E4();
        uint64_t v50 = (uint64_t)v78;
        _ConditionalContent<>.init(storage:)();
        sub_1000066D4(v50, v83, &qword_10019A7C0);
        swift_storeEnumTagMultiPayload();
        sub_100066644();
        uint64_t v70 = (uint64_t)v82;
        _ConditionalContent<>.init(storage:)();
        sub_1000067DC(v50, &qword_10019A7C0);
        uint64_t v71 = (uint64_t)v49;
      }
      else
      {
        static SymbolRenderingMode.palette.getter();
        uint64_t v61 = type metadata accessor for SymbolRenderingMode();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v18, 0, 1, v61);
        uint64_t v62 = swift_getKeyPath();
        uint64_t v63 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        uint64_t v64 = sub_100006560(&qword_10019A7F8);
        sub_1000066D4((uint64_t)v18, (uint64_t)v63 + *(int *)(v64 + 28), &qword_10019A7E0);
        *uint64_t v63 = v62;
        uint64_t v65 = sub_100006560(&qword_10019A800);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v21, v39, v65);
        sub_1000067DC((uint64_t)v18, &qword_10019A7E0);
        uint64_t v66 = static Color.white.getter();
        static Color.primary.getter();
        uint64_t v67 = Color.opacity(_:)();
        swift_release();
        sub_1000066D4((uint64_t)v21, (uint64_t)v24, &qword_10019A7E8);
        uint64_t v68 = (uint64_t *)&v24[*(int *)(v73 + 36)];
        *uint64_t v68 = v66;
        v68[1] = v67;
        sub_1000067DC((uint64_t)v21, &qword_10019A7E8);
        uint64_t v69 = v27;
        sub_10001D6D8((uint64_t)v24, (uint64_t)v27, &qword_10019A7F0);
        sub_1000066D4((uint64_t)v27, v83, &qword_10019A7F0);
        swift_storeEnumTagMultiPayload();
        sub_100066644();
        sub_1000667E4();
        uint64_t v70 = (uint64_t)v82;
        _ConditionalContent<>.init(storage:)();
        uint64_t v71 = (uint64_t)v69;
      }
      uint64_t v60 = &qword_10019A7F0;
    }
    else
    {
      uint64_t v51 = (uint64_t)v18;
      static SymbolRenderingMode.hierarchical.getter();
      uint64_t v52 = type metadata accessor for SymbolRenderingMode();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v18, 0, 1, v52);
      uint64_t v53 = swift_getKeyPath();
      uint64_t v54 = (uint64_t *)&v21[*(int *)(v19 + 36)];
      uint64_t v55 = sub_100006560(&qword_10019A7F8);
      sub_1000066D4(v51, (uint64_t)v54 + *(int *)(v55 + 28), &qword_10019A7E0);
      *uint64_t v54 = v53;
      uint64_t v56 = sub_100006560(&qword_10019A800);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v21, v39, v56);
      sub_1000067DC(v51, &qword_10019A7E0);
      if (qword_1001980A0 != -1) {
        swift_once();
      }
      uint64_t v57 = qword_1001AA348;
      sub_1000066D4((uint64_t)v21, (uint64_t)v11, &qword_10019A7E8);
      *(void *)&v11[*(int *)(v75 + 36)] = v57;
      swift_retain();
      sub_1000067DC((uint64_t)v21, &qword_10019A7E8);
      uint64_t v58 = v74;
      sub_10001D6D8((uint64_t)v11, v74, &qword_10019A7C8);
      sub_1000066D4(v58, v77, &qword_10019A7C8);
      swift_storeEnumTagMultiPayload();
      sub_100066680();
      sub_1000667E4();
      uint64_t v59 = (uint64_t)v78;
      _ConditionalContent<>.init(storage:)();
      sub_1000066D4(v59, v83, &qword_10019A7C0);
      swift_storeEnumTagMultiPayload();
      sub_100066644();
      uint64_t v70 = (uint64_t)v82;
      _ConditionalContent<>.init(storage:)();
      sub_1000067DC(v59, &qword_10019A7C0);
      uint64_t v71 = v58;
      uint64_t v60 = &qword_10019A7C8;
    }
    sub_1000067DC(v71, v60);
    sub_1000066D4(v70, v86, &qword_10019A7D0);
    swift_storeEnumTagMultiPayload();
    sub_1000667E4();
    sub_100066884();
    _ConditionalContent<>.init(storage:)();
    uint64_t v37 = v70;
    uint64_t v38 = &qword_10019A7D0;
  }
  return sub_1000067DC(v37, v38);
}

uint64_t sub_100065DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006524C(a1, *v2, *((void *)v2 + 1), v2[16], a2);
}

uint64_t sub_100065DF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t destroy for NavigationImageStyle(uint64_t a1)
{
  return sub_10001D868(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp20NavigationImageStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_1000239D8(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  sub_1000239D8(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001D868(v5, v6);
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.Service(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001D868(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationImageStyle()
{
  return &type metadata for NavigationImageStyle;
}

unsigned char *initializeBufferWithCopyOfBuffer for RemoteViewConfiguration.Service.Name(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100066140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_100066168(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100066170(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.ColorScheme()
{
  return &type metadata for NavigationButton.ColorScheme;
}

uint64_t getEnumTagSinglePayload for PlaybackStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NavigationButton.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000662E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.Style()
{
  return &type metadata for NavigationButton.Style;
}

unint64_t sub_100066320()
{
  unint64_t result = qword_10019A798;
  if (!qword_10019A798)
  {
    sub_10000650C(&qword_10019A768);
    sub_10000650C(&qword_10019A758);
    type metadata accessor for BorderlessButtonStyle();
    sub_100010484(&qword_10019A788, &qword_10019A758);
    sub_100066474(&qword_10019A790, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_100066474((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A798);
  }
  return result;
}

uint64_t sub_100066474(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000664C0()
{
  unint64_t result = qword_10019A7A0;
  if (!qword_10019A7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A7A0);
  }
  return result;
}

unint64_t sub_100066518()
{
  unint64_t result = qword_10019A7A8;
  if (!qword_10019A7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A7A8);
  }
  return result;
}

uint64_t sub_10006656C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066588()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_1000665AC(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019A7E0);
  __chkstk_darwin(v2 - 8);
  sub_1000066D4(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10019A7E0);
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_100066644()
{
  return sub_100066910(&qword_10019A808, &qword_10019A7C0, (void (*)(void))sub_100066680, (void (*)(void))sub_1000667E4);
}

unint64_t sub_100066680()
{
  unint64_t result = qword_10019A810;
  if (!qword_10019A810)
  {
    sub_10000650C(&qword_10019A7C8);
    sub_100066720();
    sub_100010484(&qword_1001985F0, &qword_1001985F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A810);
  }
  return result;
}

unint64_t sub_100066720()
{
  unint64_t result = qword_10019A818;
  if (!qword_10019A818)
  {
    sub_10000650C(&qword_10019A7E8);
    sub_100010484(&qword_10019A820, &qword_10019A800);
    sub_100010484(&qword_10019A828, &qword_10019A7F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A818);
  }
  return result;
}

unint64_t sub_1000667E4()
{
  unint64_t result = qword_10019A830;
  if (!qword_10019A830)
  {
    sub_10000650C(&qword_10019A7F0);
    sub_100066720();
    sub_100010484(&qword_10019A838, &qword_10019A840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A830);
  }
  return result;
}

uint64_t sub_100066884()
{
  return sub_100066910(&qword_10019A848, &qword_10019A7D0, (void (*)(void))sub_100066644, (void (*)(void))sub_1000667E4);
}

uint64_t sub_1000668C0()
{
  return sub_100066910(&qword_10019A850, &qword_10019A858, (void (*)(void))sub_1000667E4, (void (*)(void))sub_100066884);
}

uint64_t sub_100066910(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BezelBackground(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BezelBackground(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BezelBackground()
{
  return &type metadata for BezelBackground;
}

uint64_t destroy for RemoteViewConfiguration.Service()
{
  return swift_bridgeObjectRelease();
}

void *_s15ShazamEventsApp5BezelVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Bezel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for Bezel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Bezel()
{
  return &type metadata for Bezel;
}

uint64_t *sub_100066AF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100066BD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100066C34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100066CC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100066D58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100066DE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100066E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066E8C);
}

uint64_t sub_100066E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100066EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066F0C);
}

uint64_t sub_100066F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ScrollAsset()
{
  uint64_t result = qword_10019A8B8;
  if (!qword_10019A8B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100066FC8()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetHeader()
{
  return &type metadata for AssetHeader;
}

uint64_t sub_100067074()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100067090@<X0>(uint64_t a1@<X8>)
{
  static HorizontalAlignment.leading.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title2.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Alignment.leading.getter();
  sub_100051D28(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v32, 0.0, 1, 0.0, 1);
  sub_1000065A4(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  char v12 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  char v21 = static Edge.Set.bottom.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  long long v23 = v32[9];
  *(_OWORD *)(a1 + 128) = v32[8];
  *(_OWORD *)(a1 + 144) = v23;
  *(void *)(a1 + 160) = v33;
  long long v24 = v32[5];
  *(_OWORD *)(a1 + 64) = v32[4];
  *(_OWORD *)(a1 + 80) = v24;
  long long v25 = v32[7];
  *(_OWORD *)(a1 + 96) = v32[6];
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = v32[1];
  *(_OWORD *)a1 = v32[0];
  *(_OWORD *)(a1 + 16) = v26;
  long long v27 = v32[3];
  *(_OWORD *)(a1 + 32) = v32[2];
  *(_OWORD *)(a1 + 48) = v27;
  *(unsigned char *)(a1 + 168) = v12;
  *(void *)(a1 + 176) = v14;
  *(void *)(a1 + 184) = v16;
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = v20;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = v21;
  *(void *)(a1 + 224) = v28;
  *(void *)(a1 + 232) = v29;
  *(void *)(a1 + 240) = v30;
  *(void *)(a1 + 248) = v31;
  *(unsigned char *)(a1 + 256) = 0;
  return result;
}

uint64_t sub_1000672C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100067090(a1);
}

uint64_t sub_1000672D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v36 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100006560(&qword_10019A8F8);
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019A900);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  char v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019A908);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100006560(&qword_10019A910);
  __chkstk_darwin(v33);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v5, v1, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v5, 0, 1, v18);
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_100006560(&qword_10019A918);
  sub_1000680D4();
  AsyncImage.init(url:scale:transaction:content:)();
  uint64_t v20 = type metadata accessor for ScrollAsset();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = v32;
  uint64_t v22 = v34;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v11, v7, v34);
  long long v23 = &v11[*(int *)(v9 + 44)];
  long long v24 = v39;
  *(_OWORD *)long long v23 = v38;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v40;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
  sub_1000066D4((uint64_t)v11, (uint64_t)v15, &qword_10019A900);
  *(_WORD *)&v15[*(int *)(v13 + 44)] = 0;
  sub_1000067DC((uint64_t)v11, &qword_10019A900);
  uint64_t v25 = *(void *)(v1 + *(int *)(v20 + 28));
  long long v26 = v35;
  long long v27 = &v35[*(int *)(v36 + 28)];
  uint64_t v28 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v29 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
  void *v26 = v25;
  v26[1] = v25;
  uint64_t v30 = (uint64_t)&v17[*(int *)(v33 + 36)];
  sub_10001081C((uint64_t)v26, v30);
  *(_WORD *)(v30 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v15, (uint64_t)v17, &qword_10019A908);
  sub_100010934((uint64_t)v26);
  sub_1000067DC((uint64_t)v15, &qword_10019A908);
  static Axis.Set.horizontal.getter();
  static Alignment.center.getter();
  sub_100068294();
  View.containerRelativeFrame(_:alignment:)();
  return sub_1000067DC((uint64_t)v17, &qword_10019A910);
}

uint64_t sub_1000677B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncImagePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v14 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    long long v22 = (unint64_t)v14;
    int v23 = 65793;
    swift_retain();
    sub_100006560(&qword_10019A940);
    sub_100006560(&qword_100198D20);
    sub_100068214(&qword_10019A938, &qword_10019A940, (void (*)(void))sub_100026D44);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    _ConditionalContent<>.init(storage:)();
    if (HIBYTE(v26)) {
      int v15 = 0x1000000;
    }
    else {
      int v15 = 0;
    }
    long long v22 = v25;
    int v23 = v15 | (unsigned __int16)v26 | (BYTE2(v26) << 16);
    char v24 = 0;
    j__swift_retain();
    sub_100006560(&qword_10019A930);
    sub_100068150();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    j__swift_release();
  }
  else
  {
    if (v13 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      swift_errorRelease();
    }
    else if (v13 != enum case for AsyncImagePhase.empty(_:))
    {
      long long v22 = 0uLL;
      int v23 = 0;
      char v24 = 1;
      sub_100006560(&qword_10019A930);
      sub_100068150();
      _ConditionalContent<>.init(storage:)();
      long long v21 = v25;
      int v19 = v26;
      char v20 = v27;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      long long v18 = v21;
      goto LABEL_16;
    }
    if (qword_1001980A8 != -1) {
      swift_once();
    }
    *(void *)&long long v22 = qword_1001AA350;
    *((void *)&v22 + 1) = 256;
    int v23 = 0x1000000;
    swift_retain_n();
    sub_100006560(&qword_10019A940);
    sub_100006560(&qword_100198D20);
    sub_100068214(&qword_10019A938, &qword_10019A940, (void (*)(void))sub_100026D44);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    _ConditionalContent<>.init(storage:)();
    if (HIBYTE(v26)) {
      int v16 = 0x1000000;
    }
    else {
      int v16 = 0;
    }
    long long v22 = v25;
    int v23 = v16 | (unsigned __int16)v26 | (BYTE2(v26) << 16);
    char v24 = 0;
    sub_100006560(&qword_10019A930);
    sub_100068150();
    _ConditionalContent<>.init(storage:)();
  }
  uint64_t result = swift_release();
  long long v18 = v25;
  int v19 = v26;
  char v20 = v27;
LABEL_16:
  *(_OWORD *)a2 = v18;
  *(_DWORD *)(a2 + 16) = v19;
  *(unsigned char *)(a2 + 20) = v20;
  return result;
}

uint64_t sub_100067D2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v6 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  char v7 = static Edge.Set.all.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 65) = 0;
  *(unsigned char *)(a1 + 67) = 1;
  return result;
}

uint64_t sub_100067EA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RoundedRectangle();
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100006560(&qword_10019A978);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = (char *)v6 + *(int *)(v4 + 28);
  uint64_t v13 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v14 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  *uint64_t v6 = v11;
  v6[1] = v11;
  uint64_t v15 = static Color.black.getter();
  sub_10001081C((uint64_t)v6, (uint64_t)v10);
  *(void *)&v10[*(int *)(v8 + 60)] = v15;
  *(_WORD *)&v10[*(int *)(v8 + 64)] = 256;
  sub_100010934((uint64_t)v6);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000066D4((uint64_t)v10, a1, &qword_10019A978);
  int v16 = (_OWORD *)(a1 + *(int *)(sub_100006560(&qword_10019A980) + 36));
  long long v17 = v19[1];
  _OWORD *v16 = v19[0];
  v16[1] = v17;
  v16[2] = v19[2];
  return sub_1000067DC((uint64_t)v10, &qword_10019A978);
}

uint64_t sub_100068080()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006809C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000680B8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000680D4()
{
  unint64_t result = qword_10019A920;
  if (!qword_10019A920)
  {
    sub_10000650C(&qword_10019A918);
    sub_100068150();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A920);
  }
  return result;
}

unint64_t sub_100068150()
{
  unint64_t result = qword_10019A928;
  if (!qword_10019A928)
  {
    sub_10000650C(&qword_10019A930);
    sub_100068214(&qword_10019A938, &qword_10019A940, (void (*)(void))sub_100026D44);
    sub_100010484(&qword_100198D18, &qword_100198D20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A928);
  }
  return result;
}

uint64_t sub_100068214(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    sub_100021350();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100068294()
{
  unint64_t result = qword_10019A948;
  if (!qword_10019A948)
  {
    sub_10000650C(&qword_10019A910);
    sub_100068334();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A948);
  }
  return result;
}

unint64_t sub_100068334()
{
  unint64_t result = qword_10019A950;
  if (!qword_10019A950)
  {
    sub_10000650C(&qword_10019A908);
    sub_1000683D4();
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A950);
  }
  return result;
}

unint64_t sub_1000683D4()
{
  unint64_t result = qword_10019A958;
  if (!qword_10019A958)
  {
    sub_10000650C(&qword_10019A900);
    sub_100010484(&qword_10019A960, &qword_10019A8F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A958);
  }
  return result;
}

uint64_t sub_10006847C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000684D8()
{
  return sub_10006853C(&qword_10019A988, &qword_10019A990, (void (*)(void))sub_100068514);
}

uint64_t sub_100068514()
{
  return sub_10006853C(&qword_10019A998, &qword_10019A9A0, (void (*)(void))sub_1000685BC);
}

uint64_t sub_10006853C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000685BC()
{
  unint64_t result = qword_10019A9A8;
  if (!qword_10019A9A8)
  {
    sub_10000650C(&qword_10019A9B0);
    sub_100010484(&qword_10019A9B8, &qword_10019A9C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A9A8);
  }
  return result;
}

uint64_t sub_10006865C()
{
  return sub_100068214(&qword_10019A9C8, &qword_10019A9D0, (void (*)(void))sub_100068698);
}

unint64_t sub_100068698()
{
  unint64_t result = qword_10019A9D8;
  if (!qword_10019A9D8)
  {
    sub_10000650C(&qword_10019A9E0);
    sub_10006853C(&qword_10019A9E8, &qword_10019A9F0, (void (*)(void))sub_100026D44);
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A9D8);
  }
  return result;
}

unint64_t sub_100068760()
{
  unint64_t result = qword_10019A9F8;
  if (!qword_10019A9F8)
  {
    sub_10000650C(&qword_10019A980);
    sub_100010484(&qword_10019AA00, &qword_10019A978);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A9F8);
  }
  return result;
}

uint64_t sub_100068800()
{
  v1[3] = v0;
  sub_100006560(&qword_10019ABA8);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MusicSubscription();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v1[7] = v3;
  v1[8] = type metadata accessor for MainActor();
  v1[9] = static MainActor.shared.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[10] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100068944;
  return static MusicSubscription.current.getter(v3);
}

uint64_t sub_100068944()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_100068C30;
  }
  else {
    uint64_t v4 = sub_100068A9C;
  }
  return _swift_task_switch(v4, v3, v2);
}

void sub_100068A9C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  swift_release();
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 16);
  *(void *)(swift_task_alloc() + 16) = v1;
  uint64_t v4 = (uint64_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  BOOL v6 = os_unfair_lock_trylock(v3 + 6);
  uint64_t v7 = v0[11];
  if (!v6 || (sub_10006A518(), os_unfair_lock_unlock(v5), !v7))
  {
    uint64_t v8 = v0[4];
    swift_task_dealloc();
    os_unfair_lock_lock(v5);
    sub_100068E90(v4, v8);
    os_unfair_lock_unlock(v5);
    if (!v7)
    {
      uint64_t v9 = v0[5];
      uint64_t v10 = v0[6];
      uint64_t v11 = v0[4];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
      {
        sub_10006A254(v11);
      }
      else
      {
        char v12 = MusicSubscription.canBecomeSubscriber.getter();
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v13(v11, v9);
        if ((v12 & 1) == 0)
        {
LABEL_9:
          v13(v0[7], v0[5]);
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v15 = (void (*)(void))v0[1];
          v15();
          return;
        }
      }
      uint64_t v14 = v0[6];
      sub_1000691F4();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      goto LABEL_9;
    }
  }
}

uint64_t sub_100068C30()
{
  swift_release();
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10003345C(v1, (uint64_t)qword_1001AA440);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching Apple Music subscription status with error: %@", v4, 0xCu);
    sub_100006560(&qword_10019ABB8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100068E50()
{
  type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100069CE0();
  qword_1001AA368 = v0;
  return result;
}

uint64_t sub_100068E90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10006A400(&qword_10019ABD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_10006A4B0(v4, a2);
}

uint64_t sub_100068F6C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10006A400(&qword_10019ABD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_10006A4B0(v3, a1);
}

void sub_100069038(uint64_t a1)
{
  uint64_t v3 = sub_100006560(&qword_10019ABA8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(v1
                                      + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater_lock)
                          + 16);
  os_unfair_lock_lock(v6);
  uint64_t v7 = type metadata accessor for MusicSubscription();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  swift_getKeyPath();
  uint64_t v10 = v1;
  uint64_t v11 = v5;
  uint64_t v12 = v1;
  sub_10006A400(&qword_10019ABD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10006A254((uint64_t)v5);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_1000691F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10003345C(v5, (uint64_t)qword_1001AA440);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Started observing subscription updates", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  void v11[3] = 0;
  void v11[4] = v10;
  swift_retain();
  sub_1000FA73C((uint64_t)v4, (uint64_t)&unk_10019ABC8, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_1000693B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for MusicSubscription();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  sub_100006560(&qword_10019ABA8);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MusicSubscription.Updates();
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MusicSubscription.Updates.Iterator();
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10006955C, 0, 0);
}

uint64_t sub_10006955C()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  static MusicSubscription.subscriptionUpdates.getter();
  MusicSubscription.Updates.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_10006A400(&qword_10019ABD0, (void (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100069678;
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[7];
  return dispatch thunk of AsyncIteratorProtocol.next()(v7, v6, v4);
}

uint64_t sub_100069678()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100069AEC;
  }
  else {
    uint64_t v2 = sub_10006978C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10006978C()
{
  uint64_t v2 = v0 + 5;
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0 + 4;
  uint64_t v4 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v4) == 1)
  {
    uint64_t v2 = v0 + 12;
    uint64_t v6 = v0 + 13;
    uint64_t v5 = v0 + 11;
LABEL_14:
    (*(void (**)(void, void))(*v2 + 8))(*v6, *v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v22 = (void (*)(void))v0[1];
    v22();
    return;
  }
  uint64_t v6 = v0 + 6;
  uint64_t v7 = v0[6];
  uint64_t v8 = (os_unfair_lock_s *)(v0[3] + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v7, v3, v4);
  *(void *)(swift_task_alloc() + 16) = v7;
  if (os_unfair_lock_trylock(v8))
  {
    uint64_t v9 = v0[15];
    uint64_t v10 = (os_unfair_lock_s *)(v0[3] + 24);
    sub_10006A3A8();
    os_unfair_lock_unlock(v10);
    if (v9) {
      return;
    }
  }
  swift_task_dealloc();
  if ((MusicSubscription.canBecomeSubscriber.getter() & 1) == 0)
  {
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10003345C(v15, (uint64_t)qword_1001AA440);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      long long v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopped observing subscription updates for already subscribed user.", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[12];
    uint64_t v19 = v0[13];
    uint64_t v21 = v0[11];

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    goto LABEL_14;
  }
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  uint64_t v11 = sub_10006A400(&qword_10019ABD0, (void (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[14] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100069678;
  uint64_t v13 = v0[11];
  uint64_t v14 = v0[7];
  dispatch thunk of AsyncIteratorProtocol.next()(v14, v13, v11);
}

uint64_t sub_100069AEC()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 120);
  sub_100006560(&qword_100199670);
  uint64_t v1 = swift_dynamicCast();
  return _swift_willThrowTypedImpl(v1, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_100069B70()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp36AppleMusicSubscriptionStatusProvider___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100069C18()
{
  return type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
}

uint64_t type metadata accessor for AppleMusicSubscriptionStatusProvider(uint64_t a1)
{
  return sub_10002DE00(a1, qword_10019AA38);
}

uint64_t sub_100069C40()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100069CE0()
{
  type metadata accessor for SubscriptionUpdater(0);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = v1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  uint64_t v3 = type metadata accessor for MusicSubscription();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater_lock;
  sub_100006560(&qword_10019A010);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v1 + v4) = v5;
  ObservationRegistrar.init()();
  sub_100006560(&qword_10019ABE0);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = v1;
  *(void *)(v0 + 16) = v6;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t sub_100069DD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10006A400(&qword_10019ABD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess();
  return sub_10006A4B0(v4, a2);
}

uint64_t sub_100069EA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100006560(&qword_10019ABA8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10006A4B0(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_10006A400(&qword_10019ABD8, (void (*)(uint64_t))type metadata accessor for SubscriptionUpdater);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10006A254((uint64_t)v6);
}

uint64_t sub_100069FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess();
  sub_10006A448(a2, v3);
  return swift_endAccess();
}

uint64_t sub_10006A03C()
{
  sub_10006A254(v0 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription);
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10006A0FC()
{
  return type metadata accessor for SubscriptionUpdater(0);
}

uint64_t type metadata accessor for SubscriptionUpdater(uint64_t a1)
{
  return sub_10002DE00(a1, (uint64_t *)&unk_10019AB08);
}

void sub_10006A124()
{
  sub_10006A1FC();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10006A1FC()
{
  if (!qword_10019AB18)
  {
    type metadata accessor for MusicSubscription();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019AB18);
    }
  }
}

uint64_t sub_10006A254(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019ABA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006A2B4()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006A2F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100010CB0;
  return sub_1000693B4(a1, v4, v5, v6);
}

void sub_10006A3A8()
{
  sub_100069038(*(void *)(v0 + 16));
}

uint64_t sub_10006A3E4()
{
  return sub_100069FD0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10006A400(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006A448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019ABA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10006A518()
{
}

uint64_t sub_10006A530()
{
  return sub_10006A3E4();
}

uint64_t sub_10006A548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a5;
  uint64_t v19 = a1;
  uint64_t v20 = a3;
  uint64_t v9 = type metadata accessor for CoordinateSpace();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SizeModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  os_log_type_t v17 = (uint64_t *)((char *)&v19 - v16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a2, v9, v15);
  sub_100018EE8(v19, (uint64_t)v12, v20, a4, v17);
  swift_retain();
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_10006A708()
{
  return View.modifier<A>(_:)();
}

uint64_t sub_10006A744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v110 = a8;
  uint64_t v91 = a7;
  uint64_t v92 = a6;
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  int v115 = a3;
  uint64_t v113 = a1;
  uint64_t v114 = a2;
  uint64_t v116 = a9;
  uint64_t v109 = a10;
  uint64_t v119 = a11;
  uint64_t v73 = a18;
  uint64_t v74 = a14;
  uint64_t v123 = a17;
  uint64_t v78 = a16;
  uint64_t v79 = a12;
  uint64_t v18 = sub_100006560(&qword_10019ABE8);
  __chkstk_darwin(v18 - 8);
  char v108 = (uint64_t *)((char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = sub_100006560(&qword_10019ABF0);
  __chkstk_darwin(v112);
  uint64_t v111 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = a13;
  uint64_t v85 = *(void *)(a13 - 8);
  __chkstk_darwin(v21);
  uint64_t v75 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ModifiedContent();
  uint64_t v86 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v76 = (char *)&v71 - v23;
  uint64_t v77 = type metadata accessor for ModifiedContent();
  uint64_t v90 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v121 = (char *)&v71 - v24;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v160 = a16;
  uint64_t v161 = &protocol witness table for _PaddingLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v88 = type metadata accessor for _InsetViewModifier();
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v93 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v122 = (char *)&v71 - v25;
  uint64_t v87 = type metadata accessor for ModifiedContent();
  uint64_t v158 = a18;
  uint64_t v159 = &protocol witness table for _PaddingLayout;
  uint64_t v83 = swift_getWitnessTable();
  uint64_t v96 = type metadata accessor for _InsetViewModifier();
  uint64_t v94 = type metadata accessor for ModifiedContent();
  uint64_t v100 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v80 = (char *)&v71 - v26;
  sub_10000650C(&qword_10019ABF8);
  uint64_t v98 = type metadata accessor for ModifiedContent();
  uint64_t v105 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v89 = (char *)&v71 - v27;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v106 = v28;
  uint64_t v107 = v29;
  __chkstk_darwin(v28);
  uint64_t v97 = (char *)&v71 - v30;
  uint64_t v31 = v119;
  uint64_t v156 = v119;
  uint64_t v157 = a15;
  uint64_t v118 = a15;
  uint64_t v99 = &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v104 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v95 = (char *)&v71 - v32;
  sub_100006560(&qword_10019AC00);
  type metadata accessor for ToolbarPlacement();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014D4D0;
  static ToolbarPlacement.navigationBar.getter();
  View.toolbar(_:for:)();
  uint64_t v33 = swift_bridgeObjectRelease();
  uint64_t v34 = v75;
  v92(v33);
  static Edge.Set.vertical.getter();
  uint64_t v35 = v76;
  uint64_t v36 = v120;
  uint64_t v37 = v123;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v34, v36);
  static Edge.Set.all.getter();
  static SafeAreaRegions.all.getter();
  uint64_t v154 = v37;
  unint64_t v155 = &protocol witness table for _PaddingLayout;
  long long v117 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v38 = v72;
  uint64_t v39 = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v35, v38);
  uint64_t v134 = v31;
  uint64_t v41 = v78;
  uint64_t v40 = v79;
  uint64_t v135 = v79;
  uint64_t v136 = v36;
  uint64_t v42 = v74;
  uint64_t v137 = v74;
  uint64_t v43 = v118;
  uint64_t v138 = v118;
  uint64_t v139 = v78;
  uint64_t v140 = v37;
  uint64_t v44 = v73;
  uint64_t v141 = v73;
  uint64_t v142 = v102;
  uint64_t v143 = v103;
  static VerticalAlignment.center.getter();
  uint64_t v152 = v39;
  uint64_t v153 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v45 = v77;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = v121;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v45);
  uint64_t v124 = v31;
  uint64_t v125 = v40;
  uint64_t v126 = v120;
  uint64_t v127 = v42;
  uint64_t v128 = v43;
  uint64_t v129 = v41;
  uint64_t v130 = v123;
  uint64_t v131 = v44;
  uint64_t v132 = v110;
  uint64_t v133 = v109;
  static VerticalAlignment.center.getter();
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v150 = v46;
  uint64_t v151 = v48;
  uint64_t v49 = v82;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = v80;
  uint64_t v52 = v122;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v49);
  uint64_t v53 = static HorizontalAlignment.center.getter();
  uint64_t v54 = (uint64_t)v108;
  *char v108 = v53;
  *(void *)(v54 + 8) = 0;
  *(unsigned char *)(v54 + 16) = 0;
  uint64_t v55 = sub_100006560(&qword_10019AC08);
  sub_10006B818(v113, v114, v115, (double *)(v54 + *(int *)(v55 + 44)));
  LOBYTE(v52) = static Edge.Set.all.getter();
  uint64_t v56 = static SafeAreaRegions.all.getter();
  uint64_t v57 = v111;
  sub_1000066D4(v54, v111, &qword_10019ABE8);
  uint64_t v58 = v57 + *(int *)(v112 + 36);
  *(void *)uint64_t v58 = v56;
  *(unsigned char *)(v58 + 8) = (_BYTE)v52;
  sub_1000067DC(v54, &qword_10019ABE8);
  static Alignment.center.getter();
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v148 = v50;
  uint64_t v149 = v59;
  uint64_t v60 = v94;
  uint64_t v61 = swift_getWitnessTable();
  sub_10006BB84();
  uint64_t v62 = v89;
  View.background<A>(_:alignment:)();
  sub_1000067DC(v57, &qword_10019ABF0);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v51, v60);
  static Alignment.top.getter();
  uint64_t v63 = sub_100010484(&qword_10019AC20, &qword_10019ABF8);
  uint64_t v146 = v61;
  uint64_t v147 = v63;
  uint64_t v69 = v98;
  uint64_t v70 = swift_getWitnessTable();
  uint64_t v64 = v97;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v62, v69);
  static Alignment.center.getter();
  uint64_t v156 = v119;
  uint64_t v157 = v118;
  swift_getOpaqueTypeConformance2();
  uint64_t v144 = v70;
  uint64_t v145 = &protocol witness table for _FlexFrameLayout;
  uint64_t v65 = v106;
  swift_getWitnessTable();
  uint64_t v66 = OpaqueTypeMetadata2;
  uint64_t v67 = v95;
  View.overlay<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v64, v65);
  return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v67, v66);
}

uint64_t sub_10006B310()
{
  return swift_release();
}

uint64_t sub_10006B3B8@<X0>(void (*a1)(__n128)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X7>, void *a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = __chkstk_darwin(v14);
  os_log_type_t v17 = (uint64_t *)((char *)&v20 - v16);
  a1(v15);
  static Edge.Set.vertical.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  uint64_t v22 = a3;
  uint64_t v23 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v17, v13, v10);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  sub_1000508C8(v21, v17, v10);
  return ((uint64_t (*)(void *, uint64_t))v18)(v17, v10);
}

uint64_t sub_10006B5E8@<X0>(void (*a1)(__n128)@<X0>, uint64_t a2@<X5>, void *a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = __chkstk_darwin(v14);
  os_log_type_t v17 = (uint64_t *)((char *)&v20 - v16);
  a1(v15);
  static Edge.Set.vertical.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  uint64_t v22 = a5;
  uint64_t v23 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  sub_1000508C8(v17, v13, v10);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  sub_1000508C8(v21, v17, v10);
  return ((uint64_t (*)(void *, uint64_t))v18)(v17, v10);
}

uint64_t sub_10006B818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v28 = type metadata accessor for Divider();
  uint64_t v7 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019AC28);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v27 = (uint64_t)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  __n128 v15 = (char *)&v27 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  char v32 = a3;
  sub_100006560(&qword_10019CD30);
  Binding.wrappedValue.getter();
  double v19 = 0.0;
  if (v33) {
    double v20 = 1.0;
  }
  else {
    double v20 = 0.0;
  }
  Divider.init()();
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  char v32 = a3;
  Binding.wrappedValue.getter();
  if (v33) {
    double v19 = 1.0;
  }
  uint64_t v21 = v28;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v9, v28);
  *(double *)&v15[*(int *)(v11 + 44)] = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  sub_10006BC24((uint64_t)v15, (uint64_t)v18);
  uint64_t v22 = v27;
  sub_1000066D4((uint64_t)v18, v27, &qword_10019AC28);
  uint64_t v23 = v29;
  *(void *)uint64_t v29 = 8;
  v23[1] = v20;
  uint64_t v24 = v23;
  uint64_t v25 = sub_100006560(&qword_10019AC30);
  sub_1000066D4(v22, (uint64_t)v24 + *(int *)(v25 + 48), &qword_10019AC28);
  sub_1000067DC((uint64_t)v18, &qword_10019AC28);
  return sub_1000067DC(v22, &qword_10019AC28);
}

void sub_10006BAA0()
{
  id v0 = [self sharedApplication];
  [v0 sendAction:"resignFirstResponder" to:0 from:0 forEvent:0];
}

uint64_t sub_10006BB14()
{
  return sub_10006BB44((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_10006B3B8);
}

uint64_t sub_10006BB2C()
{
  return sub_10006BB44((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_10006B5E8);
}

uint64_t sub_10006BB44(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

unint64_t sub_10006BB84()
{
  unint64_t result = qword_10019AC10;
  if (!qword_10019AC10)
  {
    sub_10000650C(&qword_10019ABF0);
    sub_100010484(&qword_10019AC18, &qword_10019ABE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AC10);
  }
  return result;
}

uint64_t sub_10006BC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019AC28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BC8C()
{
  return sub_10008D6F0();
}

uint64_t sub_10006BCC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v164 = a1;
  uint64_t v127 = type metadata accessor for TaskPriority();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)&v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100006560(&qword_100198E90);
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v122 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100006560(&qword_10019AC38);
  __chkstk_darwin(v139);
  uint64_t v121 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v128 = (uint64_t)&v114 - v6;
  uint64_t v137 = sub_100006560(&qword_10019AC40);
  __chkstk_darwin(v137);
  uint64_t v138 = (uint64_t)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = sub_100006560(&qword_10019AC48);
  __chkstk_darwin(v163);
  uint64_t v140 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for ErrorView();
  __chkstk_darwin(v131);
  uint64_t v132 = (uint64_t *)((char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v134 = (uint64_t)&v114 - v11;
  uint64_t v136 = sub_100006560(&qword_10019AC50);
  __chkstk_darwin(v136);
  uint64_t v133 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v135 = (uint64_t)&v114 - v14;
  uint64_t v153 = sub_100006560(&qword_10019AC58);
  __chkstk_darwin(v153);
  uint64_t v144 = (uint64_t (**)())((char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v145 = (uint64_t)&v114 - v17;
  uint64_t v160 = sub_100006560(&qword_10019AC60);
  __chkstk_darwin(v160);
  uint64_t v162 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_100006560(&qword_10019AC68);
  __chkstk_darwin(v149);
  uint64_t v151 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_100006560(&qword_10019AC70);
  __chkstk_darwin(v161);
  uint64_t v152 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100006560(&qword_10019AC78);
  __chkstk_darwin(v150);
  uint64_t v142 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v130 = (uint64_t)&v114 - v23;
  uint64_t v24 = sub_100006560(&qword_10019AC80);
  __chkstk_darwin(v24 - 8);
  uint64_t v143 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for Artist();
  uint64_t v148 = *(void *)(v159 - 8);
  uint64_t v26 = *(void *)(v148 + 64);
  __chkstk_darwin(v159);
  uint64_t v141 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v147 = (char *)&v114 - v28;
  uint64_t v29 = sub_100006560(&qword_10019AC88);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100006560(&qword_10019AC90);
  uint64_t v165 = *(void *)(v32 - 8);
  uint64_t v33 = *(void *)(v165 + 64);
  __chkstk_darwin(v32);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v114 - v35;
  uint64_t v38 = v1[2];
  uint64_t v37 = v1[3];
  uint64_t v146 = v1;
  int v39 = *((unsigned __int8 *)v1 + 32);
  uint64_t v40 = type metadata accessor for ArtistController();
  uint64_t v41 = sub_10007169C(&qword_10019AC98, (void (*)(uint64_t))type metadata accessor for ArtistController);
  uint64_t v156 = v38;
  uint64_t v157 = v37;
  LODWORD(v158) = v39;
  uint64_t v154 = v41;
  uint64_t v155 = v40;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  uint64_t v42 = v165;
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v31, 1, v32) == 1)
  {
    sub_1000067DC((uint64_t)v31, &qword_10019AC88);
  }
  else
  {
    uint64_t v43 = (uint64_t)v143;
    uint64_t v117 = v33;
    uint64_t v118 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v119 = v26;
    uint64_t v44 = v147;
    uint64_t v45 = v148;
    int v115 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v115(v36, v31, v32);
    uint64_t v46 = sub_100010484(&qword_10019ACE8, &qword_10019AC90);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 40))(v32, v46);
    uint64_t v48 = *(void *)(v47 + 16);
    uint64_t v120 = v32;
    uint64_t v129 = v36;
    uint64_t v116 = v42 + 32;
    uint64_t v49 = v42;
    if (v48)
    {
      uint64_t v50 = v45;
      uint64_t v51 = v159;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16))(v43, v47 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80)), v159);
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v52 = 1;
      uint64_t v51 = v159;
      uint64_t v50 = v45;
    }
    uint64_t v53 = (uint64_t)v142;
    uint64_t v54 = v141;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v43, v52, 1, v51);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v43, 1, v51) != 1)
    {
      uint64_t v55 = v43;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
      v56(v44, v55, v51);
      uint64_t v57 = *v146;
      uint64_t v58 = v146[1];
      if (v57 == Artist.id.getter() && v58 == v59)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v50 + 8))(v44, v159);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v129, v120);
          goto LABEL_14;
        }
      }
      uint64_t v61 = *(void (**)(char *, char *))(v50 + 16);
      uint64_t v62 = v50;
      uint64_t v158 = (void (*)(unint64_t, char *, uint64_t))v56;
      uint64_t v63 = v159;
      v61(v54, v44);
      uint64_t v64 = v118;
      uint64_t v65 = v54;
      uint64_t v66 = v120;
      (*(void (**)(char *, char *))(v49 + 16))(v118, v129);
      unint64_t v67 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      unint64_t v68 = (v119 + *(unsigned __int8 *)(v49 + 80) + v67) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      uint64_t v69 = swift_allocObject();
      v158(v69 + v67, v65, v63);
      v115((char *)(v69 + v68), v64, v66);
      *(void *)uint64_t v53 = sub_10006E3E0;
      *(void *)(v53 + 8) = v69;
      *(unsigned char *)(v53 + 16) = 0;
      sub_100006560(&qword_1001999F0);
      *(unsigned char *)(swift_allocObject() + 16) = 0;
      sub_100010484(&qword_1001999F8, &qword_1001999F0);
      *(void *)(v53 + 24) = ObservedObject.init(wrappedValue:)();
      *(void *)(v53 + 32) = v70;
      type metadata accessor for RemoteViewConfiguration();
      sub_10007169C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *(void *)(v53 + 40) = EnvironmentObject.init()();
      *(void *)(v53 + 48) = v71;
      uint64_t v72 = (uint64_t *)(v53 + *(int *)(v150 + 60));
      *uint64_t v72 = swift_getKeyPath();
      sub_100006560(qword_100198AA0);
      swift_storeEnumTagMultiPayload();
      uint64_t v73 = v130;
      sub_10001D6D8(v53, v130, &qword_10019AC78);
      sub_1000066D4(v73, v151, &qword_10019AC78);
      swift_storeEnumTagMultiPayload();
      sub_100010484(&qword_10019ACD0, &qword_10019AC78);
      sub_100010484(&qword_10019ACD8, &qword_10019AC58);
      uint64_t v74 = (uint64_t)v152;
      _ConditionalContent<>.init(storage:)();
      sub_1000066D4(v74, v162, &qword_10019AC70);
      swift_storeEnumTagMultiPayload();
      sub_10006E040();
      sub_10006E100();
      _ConditionalContent<>.init(storage:)();
      sub_1000067DC(v74, &qword_10019AC70);
      sub_1000067DC(v73, &qword_10019AC78);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v147, v159);
      return (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v129, v66);
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v129, v120);
    sub_1000067DC(v43, &qword_10019AC80);
  }
LABEL_14:
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v76 = v167;
  if ((void)v167)
  {
    uint64_t v77 = (uint64_t)v144;
    ValueMetadata *v144 = sub_10006E284;
    *(void *)(v77 + 8) = v76;
    *(unsigned char *)(v77 + 16) = 0;
    sub_100006560(&qword_1001999F0);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    swift_retain();
    *(void *)(v77 + 24) = ObservedObject.init(wrappedValue:)();
    *(void *)(v77 + 32) = v78;
    type metadata accessor for RemoteViewConfiguration();
    sub_10007169C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *(void *)(v77 + 40) = EnvironmentObject.init()();
    *(void *)(v77 + 48) = v79;
    uint64_t v80 = (uint64_t *)(v77 + *(int *)(v153 + 60));
    uint64_t *v80 = swift_getKeyPath();
    sub_100006560(qword_100198AA0);
    swift_storeEnumTagMultiPayload();
    uint64_t v81 = v145;
    sub_10001D6D8(v77, v145, &qword_10019AC58);
    sub_1000066D4(v81, v151, &qword_10019AC58);
    swift_storeEnumTagMultiPayload();
    sub_100010484(&qword_10019ACD0, &qword_10019AC78);
    sub_100010484(&qword_10019ACD8, &qword_10019AC58);
    uint64_t v82 = (uint64_t)v152;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v82, v162, &qword_10019AC70);
    swift_storeEnumTagMultiPayload();
    sub_10006E040();
    sub_10006E100();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000067DC(v82, &qword_10019AC70);
    uint64_t v83 = v81;
    uint64_t v84 = &qword_10019AC58;
  }
  else
  {
    StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v85 = v167;
    swift_errorRelease();
    if (v85)
    {
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v87 = v132;
      uint64_t *v132 = KeyPath;
      sub_100006560(qword_100198AA0);
      swift_storeEnumTagMultiPayload();
      uint64_t v88 = (uint64_t *)((char *)v87 + *(int *)(v131 + 20));
      type metadata accessor for RemoteViewConfiguration();
      sub_10007169C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      *uint64_t v88 = EnvironmentObject.init()();
      v88[1] = v89;
      uint64_t v90 = (uint64_t)v87;
      uint64_t v91 = v134;
      sub_10006E1C8(v90, v134);
      uint64_t v92 = v146;
      long long v93 = *(_OWORD *)v146;
      long long v166 = *(_OWORD *)(v146 + 5);
      long long v167 = v93;
      uint64_t v94 = swift_allocObject();
      long long v95 = *((_OWORD *)v92 + 1);
      *(_OWORD *)(v94 + 16) = *(_OWORD *)v92;
      *(_OWORD *)(v94 + 32) = v95;
      *(_OWORD *)(v94 + 48) = *((_OWORD *)v92 + 2);
      *(void *)(v94 + 64) = v92[6];
      uint64_t v96 = v133;
      sub_1000715D4(v91, v133, (uint64_t (*)(void))type metadata accessor for ErrorView);
      uint64_t v97 = (uint64_t (**)())(v96 + *(int *)(v136 + 36));
      char *v97 = sub_10006E27C;
      v97[1] = (uint64_t (*)())v94;
      _OWORD v97[2] = 0;
      v97[3] = 0;
      sub_10002FE0C((uint64_t)&v167);
      sub_100035D50();
      sub_1000636C8((uint64_t)&v166);
      sub_10007163C(v91, (uint64_t (*)(void))type metadata accessor for ErrorView);
      uint64_t v98 = &qword_10019AC50;
      uint64_t v99 = v135;
      sub_10001D6D8(v96, v135, &qword_10019AC50);
      sub_1000066D4(v99, v138, &qword_10019AC50);
    }
    else
    {
      uint64_t v101 = v122;
      ProgressView<>.init<>()();
      uint64_t v102 = v146;
      long long v103 = *(_OWORD *)v146;
      long long v166 = *(_OWORD *)(v146 + 5);
      long long v167 = v103;
      uint64_t v104 = swift_allocObject();
      long long v105 = *((_OWORD *)v102 + 1);
      *(_OWORD *)(v104 + 16) = *(_OWORD *)v102;
      *(_OWORD *)(v104 + 32) = v105;
      *(_OWORD *)(v104 + 48) = *((_OWORD *)v102 + 2);
      *(void *)(v104 + 64) = v102[6];
      sub_100035D50();
      sub_10002FE0C((uint64_t)&v167);
      sub_1000636C8((uint64_t)&v166);
      uint64_t v106 = v125;
      static TaskPriority.userInitiated.getter();
      uint64_t v107 = (uint64_t)v121;
      char v108 = &v121[*(int *)(v139 + 36)];
      uint64_t v109 = type metadata accessor for _TaskModifier();
      uint64_t v110 = v126;
      uint64_t v111 = v127;
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(&v108[*(int *)(v109 + 20)], v106, v127);
      *(void *)char v108 = &unk_10019ACA8;
      *((void *)v108 + 1) = v104;
      uint64_t v112 = v123;
      uint64_t v113 = v124;
      (*(void (**)(uint64_t, char *, uint64_t))(v123 + 16))(v107, v101, v124);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v111);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v101, v113);
      uint64_t v98 = &qword_10019AC38;
      uint64_t v99 = v128;
      sub_10001D6D8(v107, v128, &qword_10019AC38);
      sub_1000066D4(v99, v138, &qword_10019AC38);
    }
    swift_storeEnumTagMultiPayload();
    sub_10006DEC4();
    sub_10006DF70();
    uint64_t v100 = (uint64_t)v140;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v100, v162, &qword_10019AC48);
    swift_storeEnumTagMultiPayload();
    sub_10006E040();
    sub_10006E100();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v100, &qword_10019AC48);
    uint64_t v83 = v99;
    uint64_t v84 = v98;
  }
  return sub_1000067DC(v83, v84);
}

uint64_t sub_10006D224(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Artist();
  __n128 v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  uint64_t v7 = sub_100010484(&qword_10019ACE8, &qword_10019AC90);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  uint64_t v9 = sub_100006560(&qword_10019AC90);
  uint64_t v10 = v8(v9, v7);
  sub_100006560(&qword_10019ACF0);
  swift_allocObject();
  return sub_10006EEB4((uint64_t)v5, v10);
}

uint64_t sub_10006D368(uint64_t *a1)
{
  type metadata accessor for ArtistController();
  sub_10007169C(&qword_10019AC98, (void (*)(uint64_t))type metadata accessor for ArtistController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000AC7F8(v4, v3, 3, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_10007169C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10006D4AC(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_10006D544, v3, v2);
}

uint64_t sub_10006D544()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for ArtistController();
  sub_10007169C(&qword_10019AC98, (void (*)(uint64_t))type metadata accessor for ArtistController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006D658;
  return sub_10008C598(v2, v3);
}

uint64_t sub_10006D658()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 32);
  return _swift_task_switch(sub_10006D79C, v3, v2);
}

uint64_t sub_10006D79C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006D800()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10006D87C(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019AC88);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1000066D4(a1, (uint64_t)&v9 - v6, &qword_10019AC88);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000066D4((uint64_t)v7, (uint64_t)v4, &qword_10019AC88);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000067DC((uint64_t)v7, &qword_10019AC88);
}

uint64_t sub_10006D98C@<X0>(void *a1@<X8>)
{
  return sub_10006DA30(a1);
}

uint64_t sub_10006D9A0()
{
  return static Published.subscript.setter();
}

uint64_t sub_10006DA1C@<X0>(void *a1@<X8>)
{
  return sub_10006DA30(a1);
}

uint64_t sub_10006DA30@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10006DAAC()
{
  return static Published.subscript.setter();
}

uint64_t destroy for ArtistEventContentView()
{
  swift_bridgeObjectRelease();
  sub_10001D0DC();

  return swift_release();
}

uint64_t initializeWithCopy for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_100035D50();
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_100035D50();
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_10001D0DC();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  sub_10001D0DC();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArtistEventContentView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtistEventContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtistEventContentView()
{
  return &type metadata for ArtistEventContentView;
}

uint64_t sub_10006DDB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006DDD4@<X0>(void *a1@<X8>)
{
  return sub_10006DA30(a1);
}

uint64_t sub_10006DE00@<X0>(void *a1@<X8>)
{
  return sub_10006DA30(a1);
}

uint64_t sub_10006DE30()
{
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100010CB0;
  return sub_10006D4AC(v0 + 16);
}

unint64_t sub_10006DEC4()
{
  unint64_t result = qword_10019ACB0;
  if (!qword_10019ACB0)
  {
    sub_10000650C(&qword_10019AC50);
    sub_10007169C(&qword_10019ACB8, (void (*)(uint64_t))type metadata accessor for ErrorView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019ACB0);
  }
  return result;
}

unint64_t sub_10006DF70()
{
  unint64_t result = qword_10019ACC0;
  if (!qword_10019ACC0)
  {
    sub_10000650C(&qword_10019AC38);
    sub_100010484(&qword_100198E98, &qword_100198E90);
    sub_10007169C(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019ACC0);
  }
  return result;
}

unint64_t sub_10006E040()
{
  unint64_t result = qword_10019ACC8;
  if (!qword_10019ACC8)
  {
    sub_10000650C(&qword_10019AC70);
    sub_100010484(&qword_10019ACD0, &qword_10019AC78);
    sub_100010484(&qword_10019ACD8, &qword_10019AC58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019ACC8);
  }
  return result;
}

uint64_t sub_10006E100()
{
  return sub_10006E13C(&qword_10019ACE0, &qword_10019AC48, (void (*)(void))sub_10006DEC4, (void (*)(void))sub_10006DF70);
}

uint64_t sub_10006E13C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006E1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006E230()
{
  swift_bridgeObjectRelease();
  sub_10001D0DC();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006E27C()
{
  return sub_10006D368((uint64_t *)(v0 + 16));
}

uint64_t sub_10006E284()
{
  return swift_retain();
}

uint64_t sub_10006E28C()
{
  uint64_t v1 = type metadata accessor for Artist();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_100006560(&qword_10019AC90);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_10006E3E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Artist() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100006560(&qword_10019AC90);

  return sub_10006D224(v0 + v2);
}

uint64_t sub_10006E4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v83 = (uint64_t *)a1;
  uint64_t v3 = sub_100006560(&qword_10019ACF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100006560(&qword_10019A5D0);
  uint64_t v6 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100199220);
  uint64_t v87 = *(void *)(v8 - 8);
  uint64_t v88 = v8;
  __chkstk_darwin(v8);
  uint64_t v86 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019AD00);
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v81 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = (void (*)(char *, unint64_t, uint64_t))sub_100006560(&qword_10019AD08);
  uint64_t v13 = *((void *)v85 - 1);
  __chkstk_darwin(v85);
  uint64_t v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019AD10);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v23 = v2 + *(void *)(*(void *)v2 + 136);
  uint64_t v84 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v78 - v21, 1, 1, v90, v20);
  sub_1000066D4((uint64_t)v22, (uint64_t)v18, &qword_10019AD10);
  Published.init(initialValue:)();
  sub_1000067DC((uint64_t)v22, &qword_10019AD10);
  uint64_t v24 = v15;
  uint64_t v25 = v82;
  (*(void (**)(uint64_t, char *, void *))(v13 + 32))(v23, v24, v85);
  uint64_t v26 = v2 + *(void *)(*(void *)v2 + 152);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v26, v12, v81);
  uint64_t v27 = v2 + *(void *)(*(void *)v2 + 160);
  LOBYTE(v93) = 0;
  uint64_t v28 = v86;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v27, v28, v88);
  uint64_t v29 = *(void *)(*(void *)v2 + 176);
  *(void *)(v2 + v29) = [objc_allocWithZone((Class)type metadata accessor for LocationManager()) init];
  uint64_t v30 = v2 + *(void *)(*(void *)v2 + 184);
  *(void *)uint64_t v30 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v30 + 8) = v31;
  *(unsigned char *)(v30 + 16) = v32 & 1;
  *(void *)(v30 + 24) = v33;
  uint64_t v34 = v2 + *(void *)(*(void *)v2 + 192);
  *(void *)uint64_t v34 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v34 + 8) = v35;
  *(unsigned char *)(v34 + 16) = v36 & 1;
  *(void *)(v34 + 24) = v37;
  uint64_t v38 = v2 + *(void *)(*(void *)v2 + 200);
  *(void *)uint64_t v38 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v38 + 8) = v39;
  *(unsigned char *)(v38 + 16) = v40 & 1;
  *(void *)(v38 + 24) = v41;
  sub_1000715D4((uint64_t)v83, v2 + *(void *)(*(void *)v2 + 112), (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  uint64_t v42 = *(void *)(*(void *)v2 + 120);
  uint64_t v79 = v2;
  *(void *)(v2 + v42) = v25;
  uint64_t v43 = *(void *)(v25 + 16);
  if (!v43)
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v65 = v79;
    goto LABEL_18;
  }
  uint64_t v78 = v26;
  uint64_t v88 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  uint64_t v86 = *(char **)(v88 + 216);
  uint64_t v87 = v88 + 216;
  uint64_t v45 = *(void (**)(char *, unint64_t, uint64_t))(v84 + 16);
  uint64_t v44 = v84 + 16;
  unint64_t v46 = v25 + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
  uint64_t v84 = *(void *)(v84 + 72);
  uint64_t v85 = v45;
  uint64_t v47 = (void (**)(char *, uint64_t))(v44 - 8);
  swift_bridgeObjectRetain_n();
  uint64_t v48 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v49 = v44;
  do
  {
    uint64_t v50 = v90;
    uint64_t v51 = v49;
    v85(v89, v46, v90);
    uint64_t v52 = ((uint64_t (*)(uint64_t, uint64_t))v86)(v50, v88);
    uint64_t v53 = *(void *)(v52 + 16);
    uint64_t v54 = type metadata accessor for Venue();
    uint64_t v55 = *(void *)(v54 - 8);
    if (v53)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v5, v52+ ((*(unsigned __int8 *)(*(void *)(v54 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v54 - 8) + 80)), v54);
      uint64_t v56 = 0;
    }
    else
    {
      uint64_t v56 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v5, v56, 1, v54);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v5, 1, v54) == 1)
    {
      sub_1000067DC((uint64_t)v5, &qword_10019ACF8);
LABEL_4:
      (*v47)(v89, v90);
      goto LABEL_5;
    }
    uint64_t v57 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v5, v54);
    if (!v57) {
      goto LABEL_4;
    }
    id v58 = [v57 country];

    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;

    (*v47)(v89, v90);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v48 = sub_1000AB9A8(0, *((void *)v48 + 2) + 1, 1, v48);
    }
    unint64_t v63 = *((void *)v48 + 2);
    unint64_t v62 = *((void *)v48 + 3);
    if (v63 >= v62 >> 1) {
      uint64_t v48 = sub_1000AB9A8((char *)(v62 > 1), v63 + 1, 1, v48);
    }
    *((void *)v48 + 2) = v63 + 1;
    uint64_t v64 = &v48[16 * v63];
    *((void *)v64 + 4) = v59;
    *((void *)v64 + 5) = v61;
LABEL_5:
    v46 += v84;
    --v43;
    uint64_t v49 = v51;
  }
  while (v43);
  uint64_t v25 = v82;
  swift_bridgeObjectRelease();
  uint64_t v26 = v78;
  uint64_t v65 = v79;
LABEL_18:
  uint64_t v66 = v83;
  uint64_t v67 = sub_10007153C((uint64_t)v48);
  swift_bridgeObjectRelease();
  *(void *)(v65 + *(void *)(*(void *)v65 + 128)) = v67;
  if (*(void *)(v67 + 16) == 1)
  {
    uint64_t v68 = sub_1000AD14C(v67);
    if (v69)
    {
      uint64_t v70 = v68;
      uint64_t v71 = v69;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v26, v81);
      uint64_t v91 = v70;
      uint64_t v92 = v71;
      Published.init(initialValue:)();
      swift_endAccess();
    }
  }
  swift_beginAccess();
  uint64_t v91 = v25;
  sub_100006560(&qword_10019AD18);
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v72 = *v66;
  uint64_t v73 = v66[1];
  type metadata accessor for PromotionalAssetsController();
  uint64_t v74 = swift_allocObject();
  uint64_t v75 = v74 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v76 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
  *(void *)(v74 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(void *)(v74 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  swift_bridgeObjectRetain();
  ObservationRegistrar.init()();
  *(void *)(v74 + 16) = v72;
  *(void *)(v74 + 24) = v73;
  *(unsigned char *)(v74 + 32) = 1;
  sub_10007163C((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(void *)(v65 + *(void *)(*(void *)v65 + 168)) = v74;
  return v65;
}

uint64_t sub_10006EEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a2;
  uint64_t v90 = a1;
  uint64_t v3 = sub_100006560(&qword_10019ACF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100006560(&qword_10019A5D0);
  uint64_t v6 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_100199220);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  uint64_t v93 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019AD00);
  uint64_t v87 = *(void *)(v10 - 8);
  uint64_t v88 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = (void (*)(char *, unint64_t, uint64_t))sub_100006560(&qword_10019AD08);
  uint64_t v13 = *((void *)v92 - 1);
  __chkstk_darwin(v92);
  uint64_t v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019AD10);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v82 - v21;
  uint64_t v23 = v2 + *(void *)(*(void *)v2 + 136);
  uint64_t v91 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v82 - v21, 1, 1, v97, v20);
  sub_1000066D4((uint64_t)v22, (uint64_t)v18, &qword_10019AD10);
  Published.init(initialValue:)();
  sub_1000067DC((uint64_t)v22, &qword_10019AD10);
  uint64_t v24 = v15;
  uint64_t v25 = v89;
  (*(void (**)(uint64_t, char *, void *))(v13 + 32))(v23, v24, v92);
  uint64_t v26 = v2 + *(void *)(*(void *)v2 + 152);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v26, v12, v88);
  uint64_t v27 = v2 + *(void *)(*(void *)v2 + 160);
  LOBYTE(v100) = 0;
  uint64_t v28 = v93;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v27, v28, v95);
  uint64_t v29 = *(void *)(*(void *)v2 + 176);
  *(void *)(v2 + v29) = [objc_allocWithZone((Class)type metadata accessor for LocationManager()) init];
  uint64_t v30 = v2 + *(void *)(*(void *)v2 + 184);
  *(void *)uint64_t v30 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v30 + 8) = v31;
  *(unsigned char *)(v30 + 16) = v32 & 1;
  *(void *)(v30 + 24) = v33;
  uint64_t v34 = v2 + *(void *)(*(void *)v2 + 192);
  *(void *)uint64_t v34 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v34 + 8) = v35;
  *(unsigned char *)(v34 + 16) = v36 & 1;
  *(void *)(v34 + 24) = v37;
  uint64_t v38 = v2 + *(void *)(*(void *)v2 + 200);
  *(void *)uint64_t v38 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v38 + 8) = v39;
  *(unsigned char *)(v38 + 16) = v40 & 1;
  *(void *)(v38 + 24) = v41;
  uint64_t v42 = v2 + *(void *)(*(void *)v2 + 112);
  uint64_t v43 = type metadata accessor for Artist();
  uint64_t v44 = *(void *)(v43 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v42, v90, v43);
  uint64_t v45 = *(void *)(*(void *)v2 + 120);
  uint64_t v86 = v2;
  *(void *)(v2 + v45) = v25;
  uint64_t v46 = *(void *)(v25 + 16);
  if (!v46)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v68 = v86;
    uint64_t v69 = v90;
    goto LABEL_18;
  }
  uint64_t v83 = v44;
  uint64_t v84 = v43;
  uint64_t v85 = v26;
  uint64_t v95 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
  uint64_t v93 = *(char **)(v95 + 216);
  uint64_t v94 = v95 + 216;
  uint64_t v48 = *(void (**)(char *, unint64_t, uint64_t))(v91 + 16);
  uint64_t v47 = v91 + 16;
  unint64_t v49 = v25 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
  uint64_t v91 = *(void *)(v91 + 72);
  uint64_t v92 = v48;
  uint64_t v50 = (void (**)(char *, uint64_t))(v47 - 8);
  swift_bridgeObjectRetain_n();
  uint64_t v51 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v52 = v47;
  do
  {
    uint64_t v53 = v97;
    uint64_t v54 = v52;
    v92(v96, v49, v97);
    uint64_t v55 = ((uint64_t (*)(uint64_t, uint64_t))v93)(v53, v95);
    uint64_t v56 = *(void *)(v55 + 16);
    uint64_t v57 = type metadata accessor for Venue();
    uint64_t v58 = *(void *)(v57 - 8);
    if (v56)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v5, v55+ ((*(unsigned __int8 *)(*(void *)(v57 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v57 - 8) + 80)), v57);
      uint64_t v59 = 0;
    }
    else
    {
      uint64_t v59 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v5, v59, 1, v57);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v5, 1, v57) == 1)
    {
      sub_1000067DC((uint64_t)v5, &qword_10019ACF8);
LABEL_4:
      (*v50)(v96, v97);
      goto LABEL_5;
    }
    uint64_t v60 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v5, v57);
    if (!v60) {
      goto LABEL_4;
    }
    id v61 = [v60 country];

    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;

    (*v50)(v96, v97);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v51 = sub_1000AB9A8(0, *((void *)v51 + 2) + 1, 1, v51);
    }
    unint64_t v66 = *((void *)v51 + 2);
    unint64_t v65 = *((void *)v51 + 3);
    if (v66 >= v65 >> 1) {
      uint64_t v51 = sub_1000AB9A8((char *)(v65 > 1), v66 + 1, 1, v51);
    }
    *((void *)v51 + 2) = v66 + 1;
    uint64_t v67 = &v51[16 * v66];
    *((void *)v67 + 4) = v62;
    *((void *)v67 + 5) = v64;
LABEL_5:
    v49 += v91;
    --v46;
    uint64_t v52 = v54;
  }
  while (v46);
  uint64_t v25 = v89;
  swift_bridgeObjectRelease();
  uint64_t v26 = v85;
  uint64_t v68 = v86;
  uint64_t v69 = v90;
  uint64_t v44 = v83;
  uint64_t v43 = v84;
LABEL_18:
  uint64_t v70 = sub_10007153C((uint64_t)v51);
  swift_bridgeObjectRelease();
  *(void *)(v68 + *(void *)(*(void *)v68 + 128)) = v70;
  if (*(void *)(v70 + 16) == 1)
  {
    uint64_t v71 = sub_1000AD14C(v70);
    if (v72)
    {
      uint64_t v73 = v71;
      uint64_t v74 = v72;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v26, v88);
      uint64_t v98 = v73;
      uint64_t v99 = v74;
      Published.init(initialValue:)();
      swift_endAccess();
    }
  }
  swift_beginAccess();
  uint64_t v98 = v25;
  sub_100006560(&qword_10019AD18);
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v75 = Artist.id.getter();
  uint64_t v77 = v76;
  type metadata accessor for PromotionalAssetsController();
  uint64_t v78 = swift_allocObject();
  uint64_t v79 = v78 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v80 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
  *(void *)(v78 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(void *)(v78 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v78 + 16) = v75;
  *(void *)(v78 + 24) = v77;
  *(unsigned char *)(v78 + 32) = 1;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v69, v43);
  *(void *)(v68 + *(void *)(*(void *)v68 + 168)) = v78;
  return v68;
}

uint64_t sub_10006F8FC(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000704AC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10006FAAC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10007169C(&qword_10019AD28, (void (*)(uint64_t))&type metadata accessor for Genre);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      __n128 v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10007169C(&qword_10019AD30, (void (*)(uint64_t))&type metadata accessor for Genre);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100070648((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10006FDD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006560(&qword_10019AD20);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000700B0()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Genre();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100006560(&qword_10019AD38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10007169C(&qword_10019AD28, (void (*)(uint64_t))&type metadata accessor for Genre);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

Swift::Int sub_1000704AC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10006FDD0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000708E8();
      goto LABEL_22;
    }
    sub_100070D40();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100070648(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Genre();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000700B0();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100070A9C();
      goto LABEL_12;
    }
    sub_100070FF0();
  }
  uint64_t v13 = *v3;
  sub_10007169C(&qword_10019AD28, (void (*)(uint64_t))&type metadata accessor for Genre);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_10007169C(&qword_10019AD30, (void (*)(uint64_t))&type metadata accessor for Genre);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000708E8()
{
  uint64_t v1 = v0;
  sub_100006560(&qword_10019AD20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100070A9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006560(&qword_10019AD38);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100070D40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100006560(&qword_10019AD20);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100070FF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100006560(&qword_10019AD38);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10007169C(&qword_10019AD28, (void (*)(uint64_t))&type metadata accessor for Genre);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000713A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Genre();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10007169C(&qword_10019AD28, (void (*)(uint64_t))&type metadata accessor for Genre);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_10006FAAC((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_10007153C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10006F8FC(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000715D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007163C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007169C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000716E4()
{
  return sub_10006E13C(&qword_10019AD40, &qword_10019AD48, (void (*)(void))sub_10006E040, (void (*)(void))sub_10006E100);
}

uint64_t sub_100071738()
{
  swift_getWitnessTable();

  return ObservedObject.init(wrappedValue:)();
}

uint64_t type metadata accessor for HeroImageLandscape()
{
  return sub_1000068A4();
}

uint64_t sub_1000717D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100071814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v48 = a3;
  uint64_t v50 = a5;
  uint64_t v7 = sub_100006560(&qword_10019ADF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100006560(&qword_10019A5E8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019A5F0);
  __chkstk_darwin(v14 - 8);
  uint64_t v46 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019ADF8);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100006560(&qword_10019AE00);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100006560(&qword_10019AE08) - 8;
  __chkstk_darwin(v49);
  uint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v9 = static Alignment.center.getter();
  v9[1] = v26;
  uint64_t v27 = sub_100006560(&qword_10019AE10);
  sub_100071C60(v47, a2, v48, a4, (uint64_t)v9 + *(int *)(v27 + 44));
  sub_1000066D4((uint64_t)v9, (uint64_t)v13, &qword_10019ADF0);
  v13[*(int *)(v11 + 44)] = 0;
  sub_1000067DC((uint64_t)v9, &qword_10019ADF0);
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v29 = v46;
  sub_100051F24(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v46, 0.0, 1, INFINITY, 0, v28, v30);
  sub_1000067DC((uint64_t)v13, &qword_10019A5E8);
  swift_retain();
  sub_1000971B8();
  swift_release();
  uint64_t v31 = Color.init(_:)();
  LOBYTE(v9) = static Edge.Set.all.getter();
  sub_1000066D4(v29, (uint64_t)v19, &qword_10019A5F0);
  uint64_t v32 = &v19[*(int *)(v17 + 44)];
  *(void *)uint64_t v32 = v31;
  v32[8] = (char)v9;
  sub_1000067DC(v29, &qword_10019A5F0);
  swift_retain();
  double v33 = sub_10009746C();
  swift_release();
  sub_1000066D4((uint64_t)v19, (uint64_t)v23, &qword_10019ADF8);
  uint64_t v34 = (double *)&v23[*(int *)(v21 + 44)];
  *uint64_t v34 = 0.0;
  v34[1] = v33;
  sub_1000067DC((uint64_t)v19, &qword_10019ADF8);
  swift_retain();
  double v35 = sub_1000974A0();
  swift_release();
  static UnitPoint.top.getter();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_1000066D4((uint64_t)v23, (uint64_t)v25, &qword_10019AE00);
  int64_t v40 = (double *)&v25[*(int *)(v49 + 44)];
  *int64_t v40 = v35;
  v40[1] = v35;
  *((void *)v40 + 2) = v37;
  *((void *)v40 + 3) = v39;
  sub_1000067DC((uint64_t)v23, &qword_10019AE00);
  uint64_t v41 = static SafeAreaRegions.all.getter();
  LOBYTE(v31) = static Edge.Set.all.getter();
  uint64_t v42 = v50;
  sub_1000066D4((uint64_t)v25, v50, &qword_10019AE08);
  uint64_t v43 = v42 + *(int *)(sub_100006560(&qword_10019AE18) + 36);
  *(void *)uint64_t v43 = v41;
  *(unsigned char *)(v43 + 8) = v31;
  return sub_1000067DC((uint64_t)v25, &qword_10019AE08);
}

uint64_t sub_100071C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v71 = a2;
  uint64_t v70 = a1;
  uint64_t v75 = a5;
  uint64_t v7 = sub_100006560(&qword_10019A5F8);
  __chkstk_darwin(v7 - 8);
  uint64_t v72 = (uint64_t *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100006560(&qword_10019A600);
  __chkstk_darwin(v9 - 8);
  uint64_t v73 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)&v63 - v12;
  uint64_t v13 = sub_100006560(&qword_10019A608);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019A610);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_10019AE20);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006560(&qword_10019AE28);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100006560(&qword_10019AE30);
  uint64_t v28 = v27 - 8;
  __chkstk_darwin(v27);
  uint64_t v68 = (uint64_t)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v69 = (uint64_t)&v63 - v31;
  *(void *)uint64_t v15 = static VerticalAlignment.center.getter();
  *((void *)v15 + 1) = 0;
  v15[16] = 0;
  uint64_t v32 = &v15[*(int *)(sub_100006560(&qword_10019AE38) + 44)];
  uint64_t v67 = a4;
  sub_100072294(a2, v32);
  uint64_t v33 = static Alignment.leading.getter();
  sub_100051F80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, 0.0, 1, v33, v34);
  sub_1000067DC((uint64_t)v15, &qword_10019A608);
  sub_1000066D4((uint64_t)v18, (uint64_t)v22, &qword_10019A610);
  double v35 = &v22[*(int *)(v20 + 44)];
  *(void *)double v35 = 0x403E000000000000;
  v35[8] = 0;
  sub_1000067DC((uint64_t)v18, &qword_10019A610);
  uint64_t v36 = static Alignment.center.getter();
  uint64_t v38 = v37;
  sub_1000723CC((uint64_t)v77);
  long long v66 = v77[0];
  long long v65 = v77[1];
  uint64_t v39 = v78;
  uint64_t v40 = v79;
  long long v64 = v80;
  uint64_t v41 = v81;
  uint64_t v42 = v82;
  uint64_t v43 = v83;
  long long v63 = v84;
  uint64_t v44 = v85;
  uint64_t v45 = v86;
  sub_1000066D4((uint64_t)v22, (uint64_t)v26, &qword_10019AE20);
  uint64_t v46 = &v26[*(int *)(v24 + 44)];
  long long v47 = v65;
  *(_OWORD *)uint64_t v46 = v66;
  *((_OWORD *)v46 + 1) = v47;
  *((void *)v46 + 4) = v39;
  *((void *)v46 + 5) = v40;
  *((_OWORD *)v46 + 3) = v64;
  *((void *)v46 + 8) = v41;
  *((void *)v46 + 9) = v42;
  *((void *)v46 + 10) = v43;
  *(_OWORD *)(v46 + 88) = v63;
  *((void *)v46 + 13) = v44;
  *((void *)v46 + 14) = v45;
  *((void *)v46 + 15) = v36;
  *((void *)v46 + 16) = v38;
  sub_1000067DC((uint64_t)v22, &qword_10019AE20);
  uint64_t v48 = v68;
  sub_1000066D4((uint64_t)v26, v68, &qword_10019AE28);
  *(_WORD *)(v48 + *(int *)(v28 + 44)) = 0;
  sub_1000067DC((uint64_t)v26, &qword_10019AE28);
  uint64_t v49 = v69;
  sub_10001D6D8(v48, v69, &qword_10019AE30);
  uint64_t v50 = static VerticalAlignment.center.getter();
  uint64_t v51 = (uint64_t)v72;
  *uint64_t v72 = v50;
  *(void *)(v51 + 8) = 0;
  *(unsigned char *)(v51 + 16) = 0;
  uint64_t v52 = sub_100006560(&qword_10019AE40);
  sub_100072598(v71, v67, v51 + *(int *)(v52 + 44));
  uint64_t v53 = static Alignment.leading.getter();
  uint64_t v54 = v73;
  sub_100051FDC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v73, 0.0, 1, 0.0, 1, v53, v55);
  sub_1000067DC(v51, &qword_10019A5F8);
  uint64_t v56 = v74;
  sub_10001D6D8(v54, v74, &qword_10019A600);
  sub_1000066D4(v49, v48, &qword_10019AE30);
  uint64_t v57 = v56;
  uint64_t v58 = v56;
  uint64_t v59 = v54;
  sub_1000066D4(v57, v54, &qword_10019A600);
  uint64_t v60 = v75;
  sub_1000066D4(v48, v75, &qword_10019AE30);
  uint64_t v61 = sub_100006560(&qword_10019AE48);
  sub_1000066D4(v59, v60 + *(int *)(v61 + 48), &qword_10019A600);
  sub_1000067DC(v58, &qword_10019A600);
  sub_1000067DC(v49, &qword_10019AE30);
  sub_1000067DC(v59, &qword_10019A600);
  return sub_1000067DC(v48, &qword_10019AE30);
}

uint64_t sub_100072294@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v4 - 8);
  Swift::Int v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void *)(a1 + 16);
  swift_retain();
  sub_100096EC8((uint64_t)v6);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = (int *)type metadata accessor for Artwork();
  *(void *)((char *)a2 + v9[7]) = KeyPath;
  sub_100006560(&qword_100198A98);
  swift_storeEnumTagMultiPayload();
  *a2 = v7;
  sub_10001D6D8((uint64_t)v6, (uint64_t)a2 + v9[5], &qword_100198630);
  uint64_t v10 = (char *)a2 + v9[6];
  v13[15] = 0;
  uint64_t result = State.init(wrappedValue:)();
  uint64_t v12 = v14;
  char *v10 = v13[16];
  *((void *)v10 + 1) = v12;
  return result;
}

__n128 sub_1000723CC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  sub_10007245C((uint64_t)&v13);
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v18;
  __n128 result = v16;
  long long v9 = v17;
  long long v10 = v19;
  long long v11 = v20;
  long long v12 = v13;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = v12;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v9;
  *(void *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 104) = v11;
  return result;
}

double sub_10007245C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  sub_1000729EC((uint64_t)&v12);
  uint64_t v5 = v12;
  long long v11 = v13;
  long long v6 = v14;
  sub_100006560(&qword_100199118);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10014CCD0;
  static Color.black.getter();
  uint64_t v8 = Color.opacity(_:)();
  swift_release();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = static Color.clear.getter();
  uint64_t v12 = v7;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v9 = v12;
  *(void *)a1 = 17;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 72) = v13;
  double result = *(double *)&v14;
  *(_OWORD *)(a1 + 88) = v14;
  return result;
}

uint64_t sub_100072598@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)&long long v46 = a2;
  uint64_t v47 = a3;
  uint64_t v4 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Artwork();
  uint64_t v8 = (int *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (void *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100006560(&qword_10019AE50);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  long long v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_10019AE58);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  swift_retain();
  sub_100096EC8((uint64_t)v6);
  swift_release();
  *(void *)((char *)v10 + v8[9]) = swift_getKeyPath();
  sub_100006560(&qword_100198A98);
  swift_storeEnumTagMultiPayload();
  void *v10 = v19;
  sub_10001D6D8((uint64_t)v6, (uint64_t)v10 + v8[7], &qword_100198630);
  long long v20 = (char *)v10 + v8[8];
  char v52 = 0;
  State.init(wrappedValue:)();
  uint64_t v21 = v49;
  *long long v20 = v48;
  *((void *)v20 + 1) = v21;
  uint64_t v22 = static Alignment.center.getter();
  uint64_t v24 = v23;
  sub_1000729EC((uint64_t)&v48);
  uint64_t v25 = v48;
  long long v45 = v49;
  uint64_t v26 = v50;
  uint64_t v27 = v51;
  sub_100073A24((uint64_t)v10, (uint64_t)v14);
  uint64_t v28 = &v14[*(int *)(v12 + 44)];
  *(void *)uint64_t v28 = v22;
  *((void *)v28 + 1) = v24;
  *((void *)v28 + 2) = v25;
  *(_OWORD *)(v28 + 24) = v45;
  *((void *)v28 + 5) = v26;
  *((void *)v28 + 6) = v27;
  sub_100073A88((uint64_t)v10);
  uint64_t v29 = static Alignment.center.getter();
  uint64_t v31 = v30;
  sub_100072924((uint64_t)&v48);
  uint64_t v32 = v48;
  long long v45 = v49;
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  sub_1000066D4((uint64_t)v14, (uint64_t)v18, &qword_10019AE50);
  double v35 = &v18[*(int *)(v16 + 44)];
  *(void *)double v35 = v29;
  *((void *)v35 + 1) = v31;
  *((void *)v35 + 2) = v32;
  *(_OWORD *)(v35 + 24) = v45;
  *((void *)v35 + 5) = v33;
  *((void *)v35 + 6) = v34;
  sub_1000067DC((uint64_t)v14, &qword_10019AE50);
  uint64_t v36 = static Alignment.center.getter();
  uint64_t v38 = v37;
  sub_1000729EC((uint64_t)&v48);
  uint64_t v40 = v47;
  uint64_t v39 = v48;
  long long v46 = v49;
  uint64_t v41 = v50;
  uint64_t v42 = v51;
  sub_1000066D4((uint64_t)v18, v47, &qword_10019AE58);
  uint64_t v43 = v40 + *(int *)(sub_100006560(&qword_10019AE60) + 36);
  *(void *)uint64_t v43 = v36;
  *(void *)(v43 + 8) = v38;
  *(void *)(v43 + 16) = v39;
  *(_OWORD *)(v43 + 24) = v46;
  *(void *)(v43 + 40) = v41;
  *(void *)(v43 + 48) = v42;
  return sub_1000067DC((uint64_t)v18, &qword_10019AE58);
}

double sub_100072924@<D0>(uint64_t a1@<X8>)
{
  sub_100006560(&qword_100199118);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_10014CCD0;
  *(void *)(*(void *)&v2 + 32) = static Color.white.getter();
  static Color.white.getter();
  uint64_t v3 = Color.opacity(_:)();
  swift_release();
  *(void *)(*(void *)&v2 + 40) = v3;
  *(double *)&long long v5 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

double sub_1000729EC@<D0>(uint64_t a1@<X8>)
{
  sub_100006560(&qword_100199118);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_10014CCD0;
  *(void *)(*(void *)&v2 + 32) = static Color.white.getter();
  *(void *)(*(void *)&v2 + 40) = static Color.clear.getter();
  *(double *)&long long v4 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_100072AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100071814(*v2, v2[1], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_100072AB8()
{
  if (qword_1001980A8 != -1) {
    swift_once();
  }
  qword_10019AD60 = qword_1001AA350;

  return swift_retain();
}

uint64_t sub_100072B1C()
{
  static Color.white.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_10019AD68 = v0;
  return result;
}

__n128 sub_100072B60@<Q0>(char *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v73 = a3;
  uint64_t v74 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v66 = (uint64_t)&v66 - v6;
  uint64_t v76 = type metadata accessor for Artwork();
  uint64_t v70 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v71 = v7;
  uint64_t v72 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SlideTransition();
  uint64_t v75 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v14 = type metadata accessor for Image.ResizingMode();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AsyncImagePhase();
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char **)((char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char **, char *, uint64_t, __n128))(v19 + 16))(v22, v74, v18, v20);
  int v23 = (*(uint64_t (**)(char **, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char **, uint64_t))(v19 + 96))(v22, v18);
    uint64_t v74 = *v22;
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for Image.ResizingMode.stretch(_:), v14);
    uint64_t v69 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v24 = off_10019AD58;
    uint64_t v25 = (uint64_t)v77;
    uint64_t v67 = *v77;
    uint64_t v68 = qword_10019AD50;
    swift_bridgeObjectRetain();
    LODWORD(v66) = static MatchedGeometryProperties.position.getter();
    static UnitPoint.center.getter();
    unint64_t v27 = v26;
    uint64_t v29 = v28;
    SlideTransition.init()();
    uint64_t v30 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v10, v13, v8);
    sub_100075450();
    uint64_t v31 = AnyTransition.init<A>(_:)();
    char v103 = 1;
    char v102 = 0;
    char v101 = 1;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v8);
    char v32 = v103;
    char v33 = v102;
    char v34 = v101;
    uint64_t v35 = v25 + *(int *)(v76 + 24);
    char v36 = *(unsigned char *)v35;
    uint64_t v37 = *(void *)(v35 + 8);
    LOBYTE(v144) = v36;
    *((void *)&v144 + 1) = v37;
    sub_100006560(&qword_100198448);
    State.wrappedValue.getter();
    if ((_BYTE)v134) {
      double v38 = 1.0;
    }
    else {
      double v38 = 0.0;
    }
    static UnitPoint.leading.getter();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    char v88 = v32;
    uint64_t v43 = v72;
    sub_100073A24(v25, v72);
    unint64_t v44 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v45 = swift_allocObject();
    sub_100074E74(v43, v45 + v44);
    v89[0] = v69;
    v89[1] = 0;
    LOBYTE(v90) = v32;
    BYTE1(v90) = v33;
    *((void *)&v90 + 1) = v68;
    *(void *)&long long v91 = v24;
    *((void *)&v91 + 1) = v67;
    v92.n128_u32[0] = v66;
    v92.n128_u64[1] = v27;
    *(void *)&long long v93 = v29;
    BYTE8(v93) = v34;
    *(void *)&long long v94 = v31;
    int64x2_t v95 = vdupq_n_s64(0x3FF199999999999AuLL);
    *((double *)&v94 + 1) = v38;
    *(void *)&long long v96 = v40;
    *((void *)&v96 + 1) = v42;
    LOWORD(v97) = 0;
    *((void *)&v97 + 1) = sub_100075670;
    uint64_t v98 = v45;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    long long v108 = v93;
    long long v109 = v94;
    long long v106 = v91;
    __n128 v107 = v92;
    long long v104 = (unint64_t)v69;
    long long v105 = v90;
    *(void *)&v113[1] = 0;
    long long v112 = v97;
    v113[0] = (unint64_t)v45;
    int64x2_t v110 = v95;
    long long v111 = v96;
    sub_1000756D0((uint64_t)&v104);
    sub_10001D6D8((uint64_t)&v104, (uint64_t)&v144, &qword_10019AFE8);
    sub_1000756D8((uint64_t)v89);
    sub_100006560(&qword_10019AF60);
    sub_100006560(&qword_10019AFD0);
    sub_100075050();
    sub_1000753A4();
    _ConditionalContent<>.init(storage:)();
    long long v122 = v86;
    v123[0] = v87[0];
    *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v87 + 9);
    long long v118 = v82;
    long long v119 = v83;
    int64x2_t v120 = v84;
    long long v121 = v85;
    long long v114 = v78;
    long long v115 = v79;
    long long v116 = v80;
    __n128 v117 = v81;
    long long v142 = v86;
    v143[0] = v87[0];
    *(_OWORD *)((char *)v143 + 9) = *(_OWORD *)((char *)v87 + 9);
    long long v138 = v82;
    long long v139 = v83;
    long long v141 = v85;
    int64x2_t v140 = v84;
    long long v134 = v78;
    long long v135 = v79;
    __n128 v137 = v81;
    long long v136 = v80;
    sub_1000754B4((uint64_t)&v134);
    sub_10001D6D8((uint64_t)&v134, (uint64_t)&v144, &qword_10019AFD8);
    sub_100075800((uint64_t)&v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100075754);
    sub_100006560(&qword_10019AF50);
    sub_100074FD4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_100075800((uint64_t)&v114, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100075874);
    sub_100075928((uint64_t)v89);
    long long v152 = v132;
    v153[0] = v133[0];
    *(_OWORD *)((char *)v153 + 10) = *(_OWORD *)((char *)v133 + 10);
    long long v148 = v128;
    long long v149 = v129;
    long long v151 = v131;
    int64x2_t v150 = v130;
    long long v144 = v124;
    long long v145 = v125;
    __n128 v147 = v127;
    long long v146 = v126;
    uint64_t v46 = v73;
  }
  else
  {
    uint64_t v74 = v10;
    uint64_t v47 = v13;
    uint64_t v48 = v75;
    if (v23 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char **, uint64_t))(v19 + 96))(v22, v18);
      swift_errorRelease();
    }
    else if (v23 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_100075444((uint64_t)&v124);
      sub_10001D6D8((uint64_t)&v124, (uint64_t)&v144, &qword_10019AFD8);
      sub_100006560(&qword_10019AF50);
      sub_100074FD4();
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char **, uint64_t))(v19 + 8))(v22, v18);
      long long v152 = v142;
      v153[0] = v143[0];
      *(_OWORD *)((char *)v153 + 10) = *(_OWORD *)((char *)v143 + 10);
      long long v148 = v138;
      long long v149 = v139;
      long long v151 = v141;
      int64x2_t v150 = v140;
      long long v144 = v134;
      long long v145 = v135;
      __n128 v147 = v137;
      long long v146 = v136;
      uint64_t v46 = v73;
      goto LABEL_18;
    }
    uint64_t v49 = v66;
    sub_10001D3A4(v66);
    uint64_t v51 = v67;
    uint64_t v50 = v68;
    uint64_t v52 = v69;
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for ColorScheme.light(_:), v69);
    char v53 = static ColorScheme.== infix(_:_:)();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v50 + 8);
    v54(v51, v52);
    v54((char *)v49, v52);
    if (v53)
    {
      uint64_t v55 = v8;
      if (qword_1001980D0 != -1) {
        swift_once();
      }
      uint64_t v56 = &qword_10019AD60;
    }
    else
    {
      uint64_t v55 = v8;
      if (qword_1001980D8 != -1) {
        swift_once();
      }
      uint64_t v56 = &qword_10019AD68;
    }
    uint64_t v46 = v73;
    uint64_t v57 = v47;
    uint64_t v58 = *v56;
    swift_retain();
    char v59 = static Edge.Set.all.getter();
    SlideTransition.init()();
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v74, v47, v55);
    sub_100075450();
    uint64_t v60 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v55);
    *(void *)&long long v114 = v58;
    BYTE8(v114) = v59;
    *(void *)&long long v115 = v60;
    sub_1000754A8((uint64_t)&v114);
    sub_10001D6D8((uint64_t)&v114, (uint64_t)&v144, &qword_10019AFE8);
    swift_retain();
    swift_retain();
    sub_100006560(&qword_10019AF60);
    sub_100006560(&qword_10019AFD0);
    sub_100075050();
    sub_1000753A4();
    _ConditionalContent<>.init(storage:)();
    long long v142 = v112;
    v143[0] = v113[0];
    *(_OWORD *)((char *)v143 + 9) = *(_OWORD *)((char *)v113 + 9);
    long long v138 = v108;
    long long v139 = v109;
    long long v141 = v111;
    int64x2_t v140 = v110;
    long long v134 = v104;
    long long v135 = v105;
    __n128 v137 = v107;
    long long v136 = v106;
    sub_1000754B4((uint64_t)&v134);
    sub_10001D6D8((uint64_t)&v134, (uint64_t)&v144, &qword_10019AFD8);
    sub_100006560(&qword_10019AF50);
    sub_100074FD4();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    swift_release();
    long long v152 = v132;
    v153[0] = v133[0];
    *(_OWORD *)((char *)v153 + 10) = *(_OWORD *)((char *)v133 + 10);
    long long v148 = v128;
    long long v149 = v129;
    long long v151 = v131;
    int64x2_t v150 = v130;
    long long v144 = v124;
    long long v145 = v125;
    __n128 v147 = v127;
    long long v146 = v126;
  }
LABEL_18:
  long long v61 = v153[0];
  *(_OWORD *)(v46 + 128) = v152;
  *(_OWORD *)(v46 + 144) = v61;
  *(_OWORD *)(v46 + 154) = *(_OWORD *)((char *)v153 + 10);
  long long v62 = v149;
  *(_OWORD *)(v46 + 64) = v148;
  *(_OWORD *)(v46 + 80) = v62;
  long long v63 = v151;
  *(int64x2_t *)(v46 + 96) = v150;
  *(_OWORD *)(v46 + 112) = v63;
  long long v64 = v145;
  *(_OWORD *)uint64_t v46 = v144;
  *(_OWORD *)(v46 + 16) = v64;
  __n128 result = v147;
  *(_OWORD *)(v46 + 32) = v146;
  *(__n128 *)(v46 + 48) = result;
  return result;
}

uint64_t sub_100073764()
{
  return swift_release();
}

uint64_t sub_1000737D0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100073844(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(a1);
  uint64_t v5 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v5 - 8);
  sub_1000066D4(v1 + *(int *)(v2 + 28), (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100198630);
  sub_100073A24(v1, (uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  sub_100074E74((uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  sub_100006560(&qword_10019AF38);
  sub_100074F58();
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t type metadata accessor for Artwork()
{
  uint64_t result = qword_10019AEC0;
  if (!qword_10019AEC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

{
  return type metadata accessor for Artwork();
}

{
  return type metadata accessor for Artwork();
}

uint64_t sub_100073A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100073A88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100073AE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100006560(&qword_100198630);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v14;
    uint64_t v17 = (char *)a2 + v14;
    char *v16 = *v17;
    *((void *)v16 + 1) = *((void *)v17 + 1);
    uint64_t v18 = (uint64_t *)((char *)v4 + v15);
    uint64_t v19 = (uint64_t *)((char *)a2 + v15);
    swift_retain();
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_100073D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v7, v8);
  }
  else
  {
    return swift_release();
  }
}

void *sub_100073E74(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  char *v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  uint64_t v16 = (void *)((char *)a1 + v13);
  uint64_t v17 = (void *)((char *)a2 + v13);
  swift_retain();
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    void *v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100074044(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  char *v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    sub_1000067DC((uint64_t)a1 + v18, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000742A0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  return a1;
}

void *sub_10007446C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  char *v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    sub_1000067DC((uint64_t)a1 + v18, &qword_100198A98);
    uint64_t v21 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000746D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000746E4);
}

uint64_t sub_1000746E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100006560(&qword_100198630);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[6] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = sub_100006560(qword_100198F38);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[7];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_10007482C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074840);
}

uint64_t sub_100074840(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_100006560(&qword_100198630);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6] + 8) = a2;
  }
  else
  {
    uint64_t v13 = sub_100006560(qword_100198F38);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[7];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void sub_10007497C()
{
  sub_100074ABC(319, (unint64_t *)&qword_1001993B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    sub_100074ABC(319, (unint64_t *)&qword_100198FC0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100074ABC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_100074B24()
{
  unint64_t result = qword_10019AF00;
  if (!qword_10019AF00)
  {
    sub_10000650C(&qword_10019AE18);
    sub_100074BA0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF00);
  }
  return result;
}

unint64_t sub_100074BA0()
{
  unint64_t result = qword_10019AF08;
  if (!qword_10019AF08)
  {
    sub_10000650C(&qword_10019AE08);
    sub_100074C1C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF08);
  }
  return result;
}

unint64_t sub_100074C1C()
{
  unint64_t result = qword_10019AF10;
  if (!qword_10019AF10)
  {
    sub_10000650C(&qword_10019AE00);
    sub_100074C98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF10);
  }
  return result;
}

unint64_t sub_100074C98()
{
  unint64_t result = qword_10019AF18;
  if (!qword_10019AF18)
  {
    sub_10000650C(&qword_10019ADF8);
    sub_100074D38();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF18);
  }
  return result;
}

unint64_t sub_100074D38()
{
  unint64_t result = qword_10019AF20;
  if (!qword_10019AF20)
  {
    sub_10000650C(&qword_10019A5F0);
    sub_100074DB4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF20);
  }
  return result;
}

unint64_t sub_100074DB4()
{
  unint64_t result = qword_10019AF28;
  if (!qword_10019AF28)
  {
    sub_10000650C(&qword_10019A5E8);
    sub_100010484(&qword_10019AF30, &qword_10019ADF0);
    sub_10000EC40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF28);
  }
  return result;
}

uint64_t sub_100074E54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100074E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_100074ED8@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for Artwork() - 8);
  uint64_t v6 = (char **)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));

  *(void *)&double result = sub_100072B60(a1, v6, a2).n128_u64[0];
  return result;
}

unint64_t sub_100074F58()
{
  unint64_t result = qword_10019AF40;
  if (!qword_10019AF40)
  {
    sub_10000650C(&qword_10019AF38);
    sub_100074FD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF40);
  }
  return result;
}

unint64_t sub_100074FD4()
{
  unint64_t result = qword_10019AF48;
  if (!qword_10019AF48)
  {
    sub_10000650C(&qword_10019AF50);
    sub_100075050();
    sub_1000753A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF48);
  }
  return result;
}

unint64_t sub_100075050()
{
  unint64_t result = qword_10019AF58;
  if (!qword_10019AF58)
  {
    sub_10000650C(&qword_10019AF60);
    sub_1000750CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF58);
  }
  return result;
}

unint64_t sub_1000750CC()
{
  unint64_t result = qword_10019AF68;
  if (!qword_10019AF68)
  {
    sub_10000650C(&qword_10019AF70);
    sub_10007516C();
    sub_100010484(&qword_10019A968, &qword_10019A970);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF68);
  }
  return result;
}

unint64_t sub_10007516C()
{
  unint64_t result = qword_10019AF78;
  if (!qword_10019AF78)
  {
    sub_10000650C(&qword_10019AF80);
    sub_1000751E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF78);
  }
  return result;
}

unint64_t sub_1000751E8()
{
  unint64_t result = qword_10019AF88;
  if (!qword_10019AF88)
  {
    sub_10000650C(&qword_10019AF90);
    sub_100075264();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF88);
  }
  return result;
}

unint64_t sub_100075264()
{
  unint64_t result = qword_10019AF98;
  if (!qword_10019AF98)
  {
    sub_10000650C(&qword_10019AFA0);
    sub_100075304();
    sub_100010484(&qword_10019AFB8, &qword_10019AFC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AF98);
  }
  return result;
}

unint64_t sub_100075304()
{
  unint64_t result = qword_10019AFA8;
  if (!qword_10019AFA8)
  {
    sub_10000650C(&qword_10019AFB0);
    sub_100026D44();
    sub_100010484(&qword_1001990B0, &qword_1001990B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AFA8);
  }
  return result;
}

unint64_t sub_1000753A4()
{
  unint64_t result = qword_10019AFC8;
  if (!qword_10019AFC8)
  {
    sub_10000650C(&qword_10019AFD0);
    sub_100026DB8();
    sub_100010484(&qword_10019AFB8, &qword_10019AFC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AFC8);
  }
  return result;
}

uint64_t sub_100075444(uint64_t result)
{
  *(unsigned char *)(result + 169) = 1;
  return result;
}

unint64_t sub_100075450()
{
  unint64_t result = qword_10019AFE0;
  if (!qword_10019AFE0)
  {
    type metadata accessor for SlideTransition();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019AFE0);
  }
  return result;
}

uint64_t sub_1000754A8(uint64_t result)
{
  *(unsigned char *)(result + 168) = 1;
  return result;
}

uint64_t sub_1000754B4(uint64_t result)
{
  *(unsigned char *)(result + 169) = 0;
  return result;
}

uint64_t sub_1000754C0()
{
  uint64_t v1 = type metadata accessor for Artwork();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = v2 + *(int *)(v1 + 20);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_release();
  uint64_t v6 = v2 + *(int *)(v1 + 28);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100075670()
{
  type metadata accessor for Artwork();

  return sub_100073764();
}

uint64_t sub_1000756D0(uint64_t result)
{
  *(unsigned char *)(result + 168) = 0;
  return result;
}

uint64_t sub_1000756D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100027280(v2);
  sub_100027280(v3);
  return a1;
}

uint64_t sub_100075754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
  {
    swift_retain();
    return swift_retain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100027280(a18);
    return sub_100027280(a20);
  }
}

uint64_t sub_100075800(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 168);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    v4);
  return a1;
}

uint64_t sub_100075874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  swift_release();
  if (a22)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000271A0(a18);
    return sub_1000271A0(a20);
  }
}

uint64_t sub_100075928(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000271A0(v2);
  sub_1000271A0(v3);
  return a1;
}

uint64_t sub_1000759A4()
{
  return sub_1000737D0();
}

uint64_t sub_1000759C0()
{
  return sub_100010484(&qword_10019AFF0, &qword_10019AFF8);
}

uint64_t initializeBufferWithCopyOfBuffer for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration()
{
  return &type metadata for ViewModulesConfiguration;
}

uint64_t sub_100075AC4(char a1, char a2)
{
  if (*(void *)&aLocationmusic[8 * a1] == *(void *)&aLocationmusic[8 * a2]
    && *(void *)&aCalendar_1[8 * a1 + 8] == *(void *)&aCalendar_1[8 * a2 + 8])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_100075B4C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 7368801;
  }
  else {
    uint64_t v3 = 0x6C61646F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 7368801;
  }
  else {
    uint64_t v5 = 0x6C61646F6DLL;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100075BE4(char a1, char a2)
{
  if (*(void *)&aDefault_2[8 * a1] == *(void *)&aDefault_2[8 * a2] && qword_100150170[a1] == qword_100150170[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_100075C6C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000011;
  }
  else {
    unint64_t v3 = 0x73656C75646F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0x8000000100156FF0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000011;
  }
  else {
    unint64_t v5 = 0x73656C75646F6DLL;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100156FF0;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100075D14(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6449707061;
  }
  else {
    uint64_t v3 = 0x7972746E756F63;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6449707061;
  }
  else {
    uint64_t v5 = 0x7972746E756F63;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100075DB4(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001001571A0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x747369747261;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x65756E6576;
      break;
    case 3:
      break;
    case 4:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v3 = 0x80000001001571C0;
      break;
    default:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x746E657665;
      break;
  }
  unint64_t v6 = 0x80000001001571A0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x747369747261) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v2 = 0x65756E6576;
      goto LABEL_12;
    case 3:
LABEL_12:
      if (v5 == v2) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0x80000001001571C0;
      if (v5 != 0xD000000000000016) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x746E657665) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100075F64(char a1, char a2)
{
  if (qword_1001500A0[a1] == qword_1001500A0[a2] && qword_1001500C8[a1] == qword_1001500C8[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

Swift::Int sub_100075FEC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076058()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076154()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000761D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007625C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000762C8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076340()
{
  return Hasher._finalize()();
}

uint64_t sub_1000763AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100076400()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100076460()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000764B4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100076524()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007658C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100076668()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000766BC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076724()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007681C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076898()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007691C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100076984()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000769F8()
{
  return Hasher._finalize()();
}

uint64_t sub_100076A60(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 0x73656C75646F6DLL;
  }
}

uint64_t sub_100076A9C(char *a1, char *a2)
{
  return sub_100075C6C(*a1, *a2);
}

Swift::Int sub_100076AA8()
{
  return sub_1000761D4();
}

uint64_t sub_100076AB0()
{
  return sub_1000764B4();
}

Swift::Int sub_100076AB8()
{
  return sub_100076898();
}

uint64_t sub_100076AC0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10018C830;
  return sub_100076E44(v2, a1, a2);
}

uint64_t sub_100076ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100076A60(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100076AF8()
{
  return sub_100076A60(*v0);
}

uint64_t sub_100076B00@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018C830, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100076B64()
{
  return 0;
}

void sub_100076B70(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100076B7C(uint64_t a1)
{
  unint64_t v2 = sub_100077E2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076BB8(uint64_t a1)
{
  unint64_t v2 = sub_100077E2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076BF4(char a1)
{
  return *(void *)&aLocationmusic[8 * a1];
}

uint64_t sub_100076C14(char a1)
{
  return *(void *)&aDefault_2[8 * a1];
}

uint64_t sub_100076C34(char a1)
{
  if (a1) {
    return 7368801;
  }
  else {
    return 0x6C61646F6DLL;
  }
}

uint64_t sub_100076C60(char *a1, char *a2)
{
  return sub_100075AC4(*a1, *a2);
}

Swift::Int sub_100076C6C()
{
  return sub_100076340();
}

uint64_t sub_100076C74()
{
  return sub_1000763AC();
}

Swift::Int sub_100076C7C()
{
  return sub_1000769F8();
}

unint64_t sub_100076C84@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100077A58(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100076CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100076BF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100076CE0(char *a1, char *a2)
{
  return sub_100075BE4(*a1, *a2);
}

Swift::Int sub_100076CEC()
{
  return sub_10007625C();
}

uint64_t sub_100076CF4()
{
  return sub_100076460();
}

Swift::Int sub_100076CFC()
{
  return sub_10007691C();
}

unint64_t sub_100076D04@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100077AA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100076D34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100076C14(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100076D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100077AF0(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_100076D90(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100076D9C(uint64_t a1)
{
  unint64_t v2 = sub_100078330();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076DD8(uint64_t a1)
{
  unint64_t v2 = sub_100078330();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076E14(char *a1, char *a2)
{
  return sub_100075B4C(*a1, *a2);
}

Swift::Int sub_100076E20()
{
  return sub_1000762C8();
}

uint64_t sub_100076E28()
{
  return sub_100076400();
}

Swift::Int sub_100076E30()
{
  return sub_100076984();
}

uint64_t sub_100076E38@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10018C9B0;
  return sub_100076E44(v2, a1, a2);
}

uint64_t sub_100076E44@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_100076EA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100076C34(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100076ECC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DecodingError.Context();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  uint64_t v9 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v8;
  v19._object = v9;
  unint64_t result = sub_100077A58(v19);
  if (result == 6)
  {
    unint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    unint64_t v17 = 0xD000000000000018;
    unint64_t v18 = 0x8000000100158040;
    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v9;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x6F6E2073656F6420;
    v12._object = (void *)0xEF74736978652074;
    String.append(_:)(v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v13 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v14 + *(int *)(sub_100006560(&qword_10019B038) + 48);
    *uint64_t v15 = &type metadata for ViewModulesConfiguration.Name;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v16, v7, v4);
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for DecodingError.valueNotFound(_:), v13);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000770FC(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100006560(&qword_10019B040);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100023118(a1, a1[3]);
  sub_100077E2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = a3;
  v12[15] = 0;
  sub_100006560(&qword_10019B048);
  sub_100077FF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[14] = a2 & 1;
    v12[13] = 1;
    sub_10007811C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

void *sub_1000772A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100077B9C(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1000772D4(void *a1)
{
  return sub_1000770FC(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1000772F4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100077354()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000773A4(void *a1, char a2)
{
  uint64_t v4 = sub_100006560(&qword_10019B090);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100023118(a1, a1[3]);
  sub_100078330();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = a2;
  sub_1000783D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

void *sub_1000774E8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000781C4(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100077514(void *a1)
{
  return sub_1000773A4(a1, *v1);
}

uint64_t sub_100077530()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100077590()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000775E0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100077640()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100077690(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_1000644FC(a1, a2);
  uint64_t v4 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = 0;
  id v6 = [v4 dataWithPropertyList:isa format:100 options:0 error:&v19];

  id v7 = v19;
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100078D28();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    sub_100033310(v8, v10);
    swift_bridgeObjectRelease();
    return v19;
  }
  else
  {
    Swift::String v11 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100198180 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10003345C(v12, (uint64_t)qword_1001AA440);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      sub_10004D828(a1, a2, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_10004D828(v16, v17, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Empty or invalid view module configuration for ID: %s. Error: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
}

unint64_t sub_100077A58(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018C880, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_100077AA4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018C930, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100077AF0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100077B80()
{
  return 0x6E61726165707061;
}

void *sub_100077B9C(void *a1)
{
  uint64_t v3 = sub_100006560(&qword_10019B000);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = sub_100023118(a1, a1[3]);
  sub_100077E2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100029A08((uint64_t)a1);
  }
  else
  {
    sub_100006560(&qword_10019B010);
    v9[7] = 0;
    sub_100077E80();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100077F50();
    Dictionary.mapKeys<A>(_:)();
    swift_bridgeObjectRelease();
    v9[5] = 1;
    sub_100077FA4();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    id v7 = (void *)v9[6];
    sub_100029A08((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100077E2C()
{
  unint64_t result = qword_10019B008;
  if (!qword_10019B008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B008);
  }
  return result;
}

unint64_t sub_100077E80()
{
  unint64_t result = qword_10019B018;
  if (!qword_10019B018)
  {
    sub_10000650C(&qword_10019B010);
    sub_100077EFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B018);
  }
  return result;
}

unint64_t sub_100077EFC()
{
  unint64_t result = qword_10019B020;
  if (!qword_10019B020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B020);
  }
  return result;
}

unint64_t sub_100077F50()
{
  unint64_t result = qword_10019B028;
  if (!qword_10019B028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B028);
  }
  return result;
}

unint64_t sub_100077FA4()
{
  unint64_t result = qword_10019B030;
  if (!qword_10019B030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B030);
  }
  return result;
}

unint64_t sub_100077FF8()
{
  unint64_t result = qword_10019B050;
  if (!qword_10019B050)
  {
    sub_10000650C(&qword_10019B048);
    sub_100078074();
    sub_1000780C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B050);
  }
  return result;
}

unint64_t sub_100078074()
{
  unint64_t result = qword_10019B058;
  if (!qword_10019B058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B058);
  }
  return result;
}

unint64_t sub_1000780C8()
{
  unint64_t result = qword_10019B060;
  if (!qword_10019B060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B060);
  }
  return result;
}

unint64_t sub_10007811C()
{
  unint64_t result = qword_10019B068;
  if (!qword_10019B068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B068);
  }
  return result;
}

unint64_t sub_100078170()
{
  unint64_t result = qword_10019B070;
  if (!qword_10019B070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B070);
  }
  return result;
}

void *sub_1000781C4(void *a1)
{
  uint64_t v3 = sub_100006560(&qword_10019B078);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = sub_100023118(a1, a1[3]);
  sub_100078330();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100029A08((uint64_t)a1);
  }
  else
  {
    sub_100078384();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    id v7 = (void *)v9[15];
    sub_100029A08((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_100078330()
{
  unint64_t result = qword_10019B080;
  if (!qword_10019B080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B080);
  }
  return result;
}

unint64_t sub_100078384()
{
  unint64_t result = qword_10019B088;
  if (!qword_10019B088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B088);
  }
  return result;
}

unint64_t sub_1000783D8()
{
  unint64_t result = qword_10019B098;
  if (!qword_10019B098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B098);
  }
  return result;
}

unint64_t sub_10007842C()
{
  unint64_t result = qword_10019B0A0;
  if (!qword_10019B0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0A0);
  }
  return result;
}

unint64_t sub_100078480()
{
  unint64_t result = qword_10019B0A8;
  if (!qword_10019B0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0A8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ViewModulesConfiguration.ModuleSettings.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100078570);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys;
}

unsigned char *sub_1000785B0(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.Appearance()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance;
}

unsigned char *_s15ShazamEventsApp24ViewModulesConfigurationV14ModuleSettingsV10AppearanceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000786B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100078844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.Name()
{
  return &type metadata for ViewModulesConfiguration.Name;
}

uint64_t getEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s15ShazamEventsApp24ViewModulesConfigurationV17PresentationStyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000789D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.PresentationStyle()
{
  return &type metadata for ViewModulesConfiguration.PresentationStyle;
}

unint64_t sub_100078A14()
{
  unint64_t result = qword_10019B0B0;
  if (!qword_10019B0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0B0);
  }
  return result;
}

unint64_t sub_100078A6C()
{
  unint64_t result = qword_10019B0B8;
  if (!qword_10019B0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0B8);
  }
  return result;
}

unint64_t sub_100078AC4()
{
  unint64_t result = qword_10019B0C0;
  if (!qword_10019B0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0C0);
  }
  return result;
}

unint64_t sub_100078B1C()
{
  unint64_t result = qword_10019B0C8;
  if (!qword_10019B0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0C8);
  }
  return result;
}

unint64_t sub_100078B74()
{
  unint64_t result = qword_10019B0D0;
  if (!qword_10019B0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0D0);
  }
  return result;
}

unint64_t sub_100078BCC()
{
  unint64_t result = qword_10019B0D8;
  if (!qword_10019B0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0D8);
  }
  return result;
}

unint64_t sub_100078C24()
{
  unint64_t result = qword_10019B0E0;
  if (!qword_10019B0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0E0);
  }
  return result;
}

unint64_t sub_100078C7C()
{
  unint64_t result = qword_10019B0E8;
  if (!qword_10019B0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0E8);
  }
  return result;
}

unint64_t sub_100078CD4()
{
  unint64_t result = qword_10019B0F0;
  if (!qword_10019B0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0F0);
  }
  return result;
}

unint64_t sub_100078D28()
{
  unint64_t result = qword_10019B0F8;
  if (!qword_10019B0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B0F8);
  }
  return result;
}

uint64_t sub_100078D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100006560(&qword_10019A540);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019B1C0);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019B1C8);
  __chkstk_darwin(v9 - 8);
  Swift::String v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(qword_10019B1D0);
  __chkstk_darwin(v12 - 8);
  os_log_type_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v1 + 16);
  swift_getKeyPath();
  v36[1] = v15;
  sub_1000793EC();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = v15 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess();
  sub_100079444(v16, (uint64_t)v5);
  uint64_t v17 = type metadata accessor for ArtistPromotionalAssets();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) == 1)
  {
    id v19 = &qword_10019A540;
    uint64_t v20 = (uint64_t)v5;
LABEL_16:
    sub_1000067DC(v20, v19);
    goto LABEL_17;
  }
  ArtistPromotionalAssets.promotionalAssets.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
  uint64_t v21 = type metadata accessor for PromotionalAssets();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v21) == 1)
  {
    id v19 = &qword_10019B1C0;
    uint64_t v20 = (uint64_t)v8;
    goto LABEL_16;
  }
  uint64_t v23 = PromotionalAssets.photoAlbums.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  if (v23)
  {
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = type metadata accessor for PromotionalAssets.PhotoAlbum();
    uint64_t v26 = *(void *)(v25 - 8);
    if (v24)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v11, v23+ ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80)), v25);
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v11, v27, 1, v25);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v25) == 1)
    {
      id v19 = &qword_10019B1C8;
      uint64_t v20 = (uint64_t)v11;
    }
    else
    {
      uint64_t v28 = PromotionalAssets.PhotoAlbum.photos.getter();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v25);
      uint64_t v29 = *(void *)(v28 + 16);
      uint64_t v30 = type metadata accessor for PromotionalAssets.PhotoAlbum.Photo();
      uint64_t v31 = *(void *)(v30 - 8);
      if (v29)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v14, v28+ ((*(unsigned __int8 *)(*(void *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80)), v30);
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v14, v32, 1, v30);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30) != 1)
      {
        PromotionalAssets.PhotoAlbum.Photo.url.getter();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
        uint64_t v35 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(a1, 0, 1, v35);
      }
      id v19 = qword_10019B1D0;
      uint64_t v20 = (uint64_t)v14;
    }
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v33 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a1, 1, 1, v33);
}

uint64_t sub_1000792E8()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp31PromotionalAssetsEntryViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100079390()
{
  return type metadata accessor for PromotionalAssetsEntryViewModel();
}

uint64_t type metadata accessor for PromotionalAssetsEntryViewModel()
{
  uint64_t result = qword_10019B130;
  if (!qword_10019B130) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000793EC()
{
  unint64_t result = qword_10019A548;
  if (!qword_10019A548)
  {
    type metadata accessor for PromotionalAssetsController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A548);
  }
  return result;
}

uint64_t sub_100079444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019A540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000794AC()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_1000794D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.openURL.setter();
}

uint64_t sub_100079598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  type metadata accessor for RemoteViewConfiguration();
  sub_100025BB4();
  *(void *)(a2 + 136) = EnvironmentObject.init()();
  *(void *)(a2 + 144) = v7;
  uint64_t v8 = type metadata accessor for TicketView();
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(v8 + 40));
  *uint64_t v9 = swift_getKeyPath();
  sub_100006560(qword_100198AA0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(v8 + 44));
  uint64_t *v10 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for TicketView()
{
  return sub_1000068A4();
}

uint64_t sub_1000796B4()
{
  return EnvironmentValues.openURL.getter();
}

void sub_1000796DC()
{
  sub_10007A794(319, (unint64_t *)&qword_100199860, (void (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v0 <= 0x3F)
  {
    sub_10007A794(319, (unint64_t *)&qword_100198BC0, (void (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000797F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v10 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v10;
    uint64_t v11 = a2[16];
    uint64_t v12 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v12;
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v21 = (uint64_t *)((char *)a2 + v13);
    uint64_t v22 = (void *)(a1 + v13);
    *(void *)(a1 + 128) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v22, v21, v14);
    }
    else
    {
      *uint64_t v22 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = *(int *)(a3 + 44);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *uint64_t v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100079A80(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OpenURLAction();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100079BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v20 = (void *)(a1 + v12);
  uint64_t v19 = (void *)(a2 + v12);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v20, v19, v13);
  }
  else
  {
    *uint64_t v20 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = *(int *)(a3 + 44);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  else
  {
    *uint64_t v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100079E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 40);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_1000067DC(a1 + v6, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      void *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 44);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_1000067DC(a1 + v10, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10007A0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v13 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10007A2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(a3 + 40);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_1000067DC(a1 + v11, qword_100198AA0);
    uint64_t v14 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = *(int *)(a3 + 44);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    sub_1000067DC(a1 + v16, &qword_1001982C0);
    uint64_t v19 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10007A504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007A518);
}

uint64_t sub_10007A518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198B50);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10007A64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007A660);
}

uint64_t sub_10007A660(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198648);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198B50);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10007A794(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10007A7E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007A82C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v67 = a1;
  uint64_t v68 = *(void *)(a1 - 8);
  uint64_t v69 = *(void *)(v68 + 64);
  __chkstk_darwin(a1);
  uint64_t v72 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NavigationPath();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_10000650C(&qword_10019B258);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __n128 v81 = (void *)v5;
  uint64_t v82 = AssociatedTypeWitness;
  long long v83 = (void *)v8;
  int64x2_t v84 = (void *)WitnessTable;
  uint64_t v85 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_10000650C(&qword_10019B260);
  swift_getTupleTypeMetadata2();
  uint64_t v11 = type metadata accessor for TupleView();
  uint64_t v12 = swift_getWitnessTable();
  __n128 v81 = &type metadata for Never;
  uint64_t v82 = v11;
  long long v83 = &protocol witness table for Never;
  int64x2_t v84 = (void *)v12;
  uint64_t v13 = type metadata accessor for List();
  uint64_t v14 = type metadata accessor for PlainListStyle();
  uint64_t v15 = swift_getWitnessTable();
  __n128 v81 = (void *)v13;
  uint64_t v82 = v14;
  long long v83 = (void *)v15;
  int64x2_t v84 = &protocol witness table for PlainListStyle;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019B268);
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for VStack();
  uint64_t v17 = swift_getWitnessTable();
  __n128 v81 = (void *)v16;
  uint64_t v82 = v17;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  __n128 v81 = (void *)v16;
  uint64_t v82 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  __n128 v81 = (void *)OpaqueTypeMetadata2;
  uint64_t v82 = OpaqueTypeConformance2;
  uint64_t v20 = swift_getOpaqueTypeMetadata2();
  uint64_t v21 = sub_10000650C(&qword_10019B270);
  __n128 v81 = (void *)OpaqueTypeMetadata2;
  uint64_t v82 = OpaqueTypeConformance2;
  uint64_t v22 = swift_getOpaqueTypeConformance2();
  uint64_t v23 = sub_10000650C(&qword_10019B278);
  uint64_t v24 = sub_100010484(&qword_10019B280, &qword_10019B278);
  __n128 v81 = (void *)v23;
  uint64_t v82 = v24;
  uint64_t v25 = swift_getOpaqueTypeConformance2();
  __n128 v81 = (void *)v20;
  uint64_t v82 = v21;
  long long v83 = (void *)v22;
  int64x2_t v84 = (void *)v25;
  swift_getOpaqueTypeMetadata2();
  __n128 v81 = (void *)v20;
  uint64_t v82 = v21;
  long long v83 = (void *)v22;
  int64x2_t v84 = (void *)v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v26 = type metadata accessor for NavigationStack();
  uint64_t v61 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v56 = (char *)&v56 - v27;
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v65 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v71 = (char *)&v56 - v28;
  uint64_t v64 = type metadata accessor for ModifiedContent();
  uint64_t v66 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v60 = (char *)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  long long v63 = (char **)((char *)&v56 - v31);
  uint64_t v57 = v4;
  uint64_t v74 = v4;
  uint64_t v75 = v6;
  uint64_t v32 = v6;
  uint64_t v58 = v6;
  uint64_t v33 = v73;
  uint64_t v76 = v73;
  NavigationStack.init<>(root:)();
  uint64_t v34 = v68;
  char v59 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v35 = v72;
  uint64_t v36 = v67;
  v59(v72, v33, v67);
  unint64_t v37 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v69 += v37;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v4;
  *(void *)(v38 + 24) = v32;
  uint64_t v39 = *(void (**)(unint64_t, char *, uint64_t))(v34 + 32);
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  v39(v38 + v37, v40, v36);
  uint64_t v42 = v26;
  uint64_t v43 = swift_getWitnessTable();
  unint64_t v44 = v56;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v42);
  uint64_t v45 = v72;
  v59(v72, v73, v41);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v58;
  *(void *)(v46 + 16) = v57;
  *(void *)(v46 + 24) = v47;
  v39(v46 + v37, v45, v41);
  uint64_t v79 = v43;
  long long v80 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v48 = v62;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = v60;
  uint64_t v51 = v71;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v48);
  uint64_t v77 = v49;
  long long v78 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v52 = v64;
  swift_getWitnessTable();
  char v53 = v63;
  sub_1000508C8(v63, v50, v52);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v66 + 8);
  v54(v50, v52);
  sub_1000508C8(v70, v53, v52);
  return ((uint64_t (*)(void *, uint64_t))v54)(v53, v52);
}

uint64_t sub_10007B100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v69 = a1;
  uint64_t v73 = a4;
  uint64_t v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v72 = v5;
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_10000650C(&qword_10019B258);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v54 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __n128 v81 = (void *)v7;
  uint64_t v82 = AssociatedTypeWitness;
  long long v83 = (void *)v9;
  int64x2_t v84 = (void *)WitnessTable;
  uint64_t v85 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_10000650C(&qword_10019B260);
  swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for TupleView();
  uint64_t v13 = swift_getWitnessTable();
  __n128 v81 = &type metadata for Never;
  uint64_t v82 = v12;
  long long v83 = &protocol witness table for Never;
  int64x2_t v84 = (void *)v13;
  uint64_t v14 = type metadata accessor for List();
  uint64_t v15 = type metadata accessor for PlainListStyle();
  uint64_t v16 = swift_getWitnessTable();
  __n128 v81 = (void *)v14;
  uint64_t v82 = v15;
  long long v83 = (void *)v16;
  int64x2_t v84 = &protocol witness table for PlainListStyle;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019B268);
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for VStack();
  uint64_t v68 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = swift_getWitnessTable();
  __n128 v81 = (void *)v17;
  uint64_t v82 = v20;
  uint64_t v21 = v20;
  uint64_t v65 = v20;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v67 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v64 = (char *)&v53 - v23;
  __n128 v81 = (void *)v17;
  uint64_t v82 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  __n128 v81 = (void *)OpaqueTypeMetadata2;
  uint64_t v82 = OpaqueTypeConformance2;
  uint64_t v25 = (void *)OpaqueTypeMetadata2;
  uint64_t v61 = OpaqueTypeMetadata2;
  uint64_t v26 = OpaqueTypeConformance2;
  uint64_t v62 = OpaqueTypeConformance2;
  uint64_t v27 = swift_getOpaqueTypeMetadata2();
  uint64_t v58 = v27;
  uint64_t v66 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  long long v63 = (char *)&v53 - v28;
  uint64_t v29 = sub_10000650C(&qword_10019B270);
  uint64_t v57 = v29;
  __n128 v81 = v25;
  uint64_t v82 = v26;
  uint64_t v30 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = v30;
  uint64_t v31 = sub_10000650C(&qword_10019B278);
  uint64_t v32 = sub_100010484(&qword_10019B280, &qword_10019B278);
  __n128 v81 = (void *)v31;
  uint64_t v82 = v32;
  uint64_t v55 = swift_getOpaqueTypeConformance2();
  __n128 v81 = (void *)v27;
  uint64_t v82 = v29;
  long long v83 = (void *)v30;
  int64x2_t v84 = (void *)v55;
  char v59 = &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>;
  uint64_t v33 = swift_getOpaqueTypeMetadata2();
  uint64_t v60 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v53 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v38 = (uint64_t *)((char *)&v53 - v37);
  uint64_t v78 = a2;
  uint64_t v79 = v74;
  uint64_t v39 = v69;
  uint64_t v80 = v69;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t v40 = v71;
  uint64_t v41 = v72;
  uint64_t v42 = v70;
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v72);
  uint64_t v43 = v64;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v19, v17);
  uint64_t v44 = v39;
  uint64_t v45 = v63;
  uint64_t v46 = v61;
  View.navigationTitle(_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v46);
  uint64_t v75 = v54;
  uint64_t v76 = v74;
  uint64_t v77 = v44;
  uint64_t v47 = (void *)v58;
  uint64_t v48 = v57;
  uint64_t v49 = (void *)v56;
  uint64_t v50 = (void *)v55;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, void *))(v66 + 8))(v45, v47);
  __n128 v81 = v47;
  uint64_t v82 = v48;
  long long v83 = v49;
  int64x2_t v84 = v50;
  swift_getOpaqueTypeConformance2();
  sub_1000508C8(v38, v35, v33);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v60 + 8);
  v51(v35, v33);
  sub_1000508C8(v73, v38, v33);
  return ((uint64_t (*)(void *, uint64_t))v51)(v38, v33);
}

uint64_t sub_10007B964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t OpaqueTypeConformance2 = a3;
  uint64_t v61 = a1;
  uint64_t v64 = a4;
  uint64_t v5 = type metadata accessor for PlainListStyle();
  uint64_t v56 = v5;
  long long v63 = *(void (***)(char *, uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)type metadata accessor for Array();
  uint64_t v59 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_10000650C(&qword_10019B258);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v74 = v7;
  uint64_t v75 = AssociatedTypeWitness;
  uint64_t v76 = (void *)v9;
  uint64_t v77 = (void *)WitnessTable;
  uint64_t v78 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  sub_10000650C(&qword_10019B260);
  swift_getTupleTypeMetadata2();
  uint64_t v12 = type metadata accessor for TupleView();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v74 = &type metadata for Never;
  uint64_t v75 = v12;
  uint64_t v76 = &protocol witness table for Never;
  uint64_t v77 = (void *)v13;
  uint64_t v14 = (void *)type metadata accessor for List();
  uint64_t v15 = *(v14 - 1);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v74 = v14;
  uint64_t v75 = v5;
  uint64_t v76 = (void *)v18;
  uint64_t v77 = &protocol witness table for PlainListStyle;
  uint64_t v57 = &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v66 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v55 - v22);
  uint64_t v58 = (char *)&v55 - v22;
  uint64_t v67 = v59;
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v69 = v61;
  List<>.init(content:)();
  uint64_t v24 = v62;
  PlainListStyle.init()();
  uint64_t v25 = v56;
  View.listStyle<A>(_:)();
  v63[1](v24, v25);
  (*(void (**)(char *, void *))(v15 + 8))(v17, v14);
  uint64_t v74 = v14;
  uint64_t v75 = v25;
  uint64_t v76 = (void *)v18;
  uint64_t v77 = &protocol witness table for PlainListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = OpaqueTypeMetadata2;
  sub_1000508C8(v23, v20, OpaqueTypeMetadata2);
  uint64_t v27 = *(void (***)(char *, uint64_t))(v66 + 8);
  uint64_t v62 = (char *)(v66 + 8);
  long long v63 = v27;
  uint64_t v28 = (uint64_t)v20;
  ((void (*)(char *, uint64_t))v27)(v20, v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  LOBYTE(v5) = v32 & 1;
  static Font.Weight.regular.getter();
  uint64_t v33 = Text.fontWeight(_:)();
  uint64_t v35 = v34;
  LOBYTE(v15) = v36 & 1;
  sub_1000065A4(v29, v31, v5);
  swift_bridgeObjectRelease();
  static Font.footnote.getter();
  uint64_t v37 = (void *)Text.font(_:)();
  uint64_t v39 = v38;
  LOBYTE(v24) = v40;
  uint64_t v42 = v41;
  swift_release();
  LOBYTE(v29) = v24 & 1;
  sub_1000065A4(v33, v35, v15);
  swift_bridgeObjectRelease();
  LOBYTE(v17) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v51 = v58;
  uint64_t v52 = OpaqueTypeMetadata2;
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v28, v58, OpaqueTypeMetadata2);
  uint64_t v85 = 0;
  char v86 = 1;
  v87[0] = v28;
  v87[1] = (uint64_t)&v85;
  uint64_t v74 = v37;
  uint64_t v75 = v39;
  LOBYTE(v76) = v29;
  uint64_t v77 = v42;
  uint64_t v78 = 0x3FE0000000000000;
  char v79 = (char)v17;
  uint64_t v80 = v44;
  uint64_t v81 = v46;
  uint64_t v82 = v48;
  uint64_t v83 = v50;
  char v84 = 0;
  _OWORD v87[2] = (uint64_t)&v74;
  sub_100010924((uint64_t)v37, v39, v29);
  swift_bridgeObjectRetain();
  v73[0] = v52;
  v73[1] = &type metadata for Spacer;
  v73[2] = sub_100006560(&qword_10019B268);
  uint64_t v70 = OpaqueTypeConformance2;
  uint64_t v71 = &protocol witness table for Spacer;
  unint64_t v72 = sub_10007D894();
  sub_100050970(v87, 3uLL, (uint64_t)v73);
  sub_1000065A4((uint64_t)v37, v39, v29);
  swift_bridgeObjectRelease();
  uint64_t v53 = v63;
  ((void (*)(char *, uint64_t))v63)(v51, v52);
  sub_1000065A4((uint64_t)v74, v75, (char)v76);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v53)(v28, v52);
}

uint64_t sub_10007C0D4@<X0>(long long *a1@<X0>, void (*a2)(char *, long long *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v95 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v7 - 8);
  uint64_t v80 = v7;
  __chkstk_darwin(v7);
  uint64_t v89 = (char *)&v72 - v8;
  uint64_t v88 = *((void *)a2 - 1);
  __chkstk_darwin(v9);
  uint64_t v81 = v10;
  uint64_t v82 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  long long v91 = (char *)&v72 - v12;
  uint64_t v92 = sub_100006560(&qword_10019B260);
  __chkstk_darwin(v92);
  uint64_t v94 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  long long v93 = (char *)&v72 - v15;
  long long v97 = (void (*)(void, void, void))a3;
  uint64_t v96 = type metadata accessor for TicketView();
  uint64_t v16 = *(void *)(v96 - 8);
  long long v90 = *(char **)(v16 + 64);
  __chkstk_darwin(v96);
  uint64_t v98 = (char *)&v72 - v17;
  uint64_t v18 = type metadata accessor for Array();
  uint64_t v85 = *(void (**)(void, void, void))(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v86 = AssociatedTypeWitness;
  uint64_t v20 = sub_10000650C(&qword_10019B258);
  uint64_t v100 = v20;
  uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t))v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v84 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v116 = v18;
  *((void *)&v116 + 1) = AssociatedTypeWitness;
  *(void *)&long long v117 = v20;
  *((void *)&v117 + 1) = WitnessTable;
  *(void *)&long long v118 = AssociatedConformanceWitness;
  uint64_t v102 = type metadata accessor for ForEach();
  uint64_t v99 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  char v101 = (void (**)(char *, long long *, uint64_t))((char *)&v72 - v26);
  long long v27 = a1[7];
  long long v122 = a1[6];
  long long v123 = v27;
  uint64_t v124 = *((void *)a1 + 16);
  long long v28 = a1[3];
  long long v118 = a1[2];
  long long v119 = v28;
  long long v29 = a1[5];
  long long v120 = a1[4];
  long long v121 = v29;
  long long v30 = a1[1];
  long long v116 = *a1;
  long long v117 = v30;
  uint64_t v31 = v97;
  uint64_t v83 = type metadata accessor for TicketViewModel();
  *(void *)&long long v107 = sub_10007E89C();
  char v32 = *(void (**)(char *, long long *, uint64_t))(v16 + 16);
  uint64_t v33 = v98;
  uint64_t v34 = v96;
  uint64_t v74 = v16 + 16;
  unint64_t v72 = v32;
  v32(v98, a1, v96);
  uint64_t v35 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v36 = (v35 + 32) & ~v35;
  uint64_t v73 = &v90[v36];
  uint64_t v75 = v35 | 7;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a2;
  *(void *)(v37 + 24) = v31;
  uint64_t v38 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  uint64_t v39 = v34;
  char v40 = a2;
  uint64_t v77 = v36;
  uint64_t v78 = v16 + 32;
  uint64_t v76 = v38;
  v38(v37 + v36, v33, v39);
  uint64_t v41 = sub_100010484(&qword_10019B2A8, &qword_10019B258);
  uint64_t v70 = v85;
  ForEach<>.init(_:content:)();
  v106[2] = v41;
  uint64_t v42 = v102;
  uint64_t v86 = swift_getWitnessTable();
  sub_1000508C8(v101, v24, v42);
  uint64_t v44 = (char *)(v99 + 8);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
  long long v90 = v24;
  uint64_t v87 = v43;
  v43((uint64_t)v24, v42);
  long long v45 = a1[6];
  long long v46 = a1[7];
  long long v47 = a1[4];
  long long v112 = a1[5];
  long long v113 = v45;
  long long v114 = v46;
  uint64_t v115 = *((void *)a1 + 16);
  long long v48 = a1[3];
  long long v109 = a1[2];
  long long v110 = v48;
  long long v111 = v47;
  long long v49 = a1[1];
  long long v107 = *a1;
  long long v108 = v49;
  uint64_t v50 = v89;
  sub_10007EC24();
  uint64_t v51 = v88;
  if ((*(unsigned int (**)(char *, uint64_t, void))(v88 + 48))(v50, 1, v40) == 1)
  {
    (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v80);
    uint64_t v52 = (uint64_t)v93;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v93, 1, 1);
  }
  else
  {
    uint64_t v85 = *(void (**)(void, void, void))(v51 + 32);
    uint64_t v53 = v91;
    v85(v91, v50, v40);
    uint64_t v54 = v96;
    v72(v98, a1, v96);
    uint64_t v55 = v82;
    (*(void (**)(char *, char *, void))(v51 + 16))(v82, v53, v40);
    uint64_t v56 = *(unsigned __int8 *)(v51 + 80);
    uint64_t v89 = v44;
    unint64_t v57 = (unint64_t)&v73[v56] & ~v56;
    uint64_t v58 = swift_allocObject();
    uint64_t v60 = (void (*)(char *, long long *, uint64_t))v97;
    uint64_t v59 = v98;
    *(void *)(v58 + 16) = v40;
    *(void *)(v58 + 24) = v60;
    v76(v58 + v77, v59, v54);
    uint64_t v61 = ((uint64_t (*)(unint64_t, char *, void))v85)(v58 + v57, v55, v40);
    __chkstk_darwin(v61);
    *(&v72 - 4) = v40;
    *(&v72 - 3) = v60;
    uint64_t v62 = v91;
    uint64_t v70 = (void (*)(void, void, void))a1;
    uint64_t v71 = v91;
    sub_10007DD14();
    uint64_t v52 = (uint64_t)v93;
    Button.init(action:label:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v100 - 8) + 56))(v52, 0, 1);
    (*(void (**)(char *, void (*)(char *, long long *, uint64_t)))(v51 + 8))(v62, v40);
  }
  uint64_t v63 = (uint64_t)v90;
  uint64_t v65 = v101;
  uint64_t v64 = v102;
  (*(void (**)(char *, void *, uint64_t))(v99 + 16))(v90, v101, v102);
  v106[0] = v63;
  uint64_t v66 = v94;
  sub_10007DC00(v52, v94);
  v106[1] = v66;
  v105[0] = v64;
  v105[1] = v92;
  uint64_t v103 = v86;
  unint64_t v104 = sub_10007DC68();
  sub_100050970(v106, 2uLL, (uint64_t)v105);
  sub_1000067DC(v52, &qword_10019B260);
  uint64_t v67 = v65;
  uint64_t v68 = v87;
  v87((uint64_t)v67, v64);
  sub_1000067DC(v66, &qword_10019B260);
  return v68(v63, v64);
}

uint64_t sub_10007C964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TicketView();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __n128 v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v21 - v15, v23, v11, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v18 = (v13 + *(unsigned __int8 *)(v8 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v16, v11);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v18, v10, a3);
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = v22;
  sub_10007DD14();
  return Button.init(action:label:)();
}

uint64_t sub_10007CBB0(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OpenURLAction();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TicketView();
  sub_10001D160((uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  long long v14 = a1[7];
  long long v32 = a1[6];
  long long v33 = v14;
  uint64_t v34 = *((void *)a1 + 16);
  long long v15 = a1[3];
  long long v28 = a1[2];
  long long v29 = v15;
  long long v16 = a1[5];
  long long v30 = a1[4];
  long long v31 = v16;
  long long v17 = a1[1];
  long long v26 = *a1;
  long long v27 = v17;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v20 = *((void *)a1 + 17);
  if (v20)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    type metadata accessor for TicketViewModel();
    swift_retain();
    sub_10007E968(v21, v22, v20);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10007CE3C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  sub_100006560(qword_100199240);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10014D4D0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10007DD68();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  uint64_t result = String.init(format:_:)();
  *a3 = result;
  a3[1] = v11;
  return result;
}

uint64_t sub_10007CEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100006560(&qword_10019B278);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.navigationBarTrailing.getter();
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a1;
  sub_100006560(&qword_100198620);
  sub_100010484(&qword_10019B288, &qword_100198620);
  ToolbarItem<>.init(placement:content:)();
  sub_100010484(&qword_10019B280, &qword_10019B278);
  static ToolbarContentBuilder.buildBlock<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10007D0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v17[1] = a4;
  uint64_t v7 = type metadata accessor for DismissAction();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v17 - v12;
  type metadata accessor for TicketView();
  sub_10001D698((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, v10, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  void v17[4] = a2;
  uint64_t v17[5] = a3;
  v17[6] = a1;
  return Button.init(action:label:)();
}

uint64_t sub_10007D2B0@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10007D344(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (*(void *)(a1 + 136))
  {
    uint64_t v5 = type metadata accessor for TicketViewModel();
    uint64_t v6 = swift_retain();
    a4(v6, v5);
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100025BB4();
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_10007D408@<X0>(void *a1@<X8>)
{
  return sub_10007B100(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10007D418()
{
  return sub_10007D44C((void (*)(uint64_t, uint64_t))sub_10007EC9C);
}

uint64_t sub_10007D434()
{
  return sub_10007D44C((void (*)(uint64_t, uint64_t))sub_10007ECF8);
}

uint64_t sub_10007D44C(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for TicketView() - 8);
  return sub_10007D344(v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v3, v4, a1);
}

uint64_t sub_10007D4CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007B964(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10007D4D8()
{
  return sub_10007CEFC(v0[4], v0[2], v0[3]);
}

uint64_t sub_10007D4E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007D0D8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10007D4F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100006560(&qword_10019A7E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v26[2] = a1;
  v26[3] = a2;
  sub_10002374C();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  static Font.callout.getter();
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  LOBYTE(a2) = v17;
  v26[0] = v18;
  swift_release();
  char v19 = a2 & 1;
  sub_1000065A4(v9, v11, v13);
  swift_bridgeObjectRelease();
  Image.init(systemName:)();
  static SymbolRenderingMode.hierarchical.getter();
  uint64_t v20 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 0, 1, v20);
  uint64_t v21 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_1000067DC((uint64_t)v8, &qword_10019A7E0);
  uint64_t v22 = static Color.blue.getter();
  uint64_t v23 = static Font.title3.getter();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v16;
  *(unsigned char *)(a3 + 16) = v19;
  *(void *)(a3 + 24) = v26[0];
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v21;
  *(void *)(a3 + 56) = v22;
  *(void *)(a3 + 64) = KeyPath;
  *(void *)(a3 + 72) = v23;
  sub_100010924(v14, v16, v19);
  swift_bridgeObjectRetain();
  sub_1000065A4(v14, v16, v19);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007D70C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v19 = static VerticalAlignment.center.getter();
  sub_10007D4F0(v4, v3, (uint64_t)v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  char v7 = v21;
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  char v10 = v24;
  uint64_t v12 = v26;
  uint64_t v11 = v27;
  long long v18 = v25;
  LOBYTE(v3) = static Edge.Set.vertical.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v18;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v3;
  *(void *)(a1 + 112) = v14;
  *(void *)(a1 + 120) = v15;
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_10007D7EC()
{
  uint64_t v1 = type metadata accessor for DismissAction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_10007D87C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007D2B0(a1);
}

uint64_t sub_10007D888@<X0>(uint64_t a1@<X8>)
{
  return sub_10007C0D4(*(long long **)(v1 + 32), *(void (**)(char *, long long *, uint64_t))(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10007D894()
{
  unint64_t result = qword_10019B290;
  if (!qword_10019B290)
  {
    sub_10000650C(&qword_10019B268);
    sub_10007D910();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B290);
  }
  return result;
}

unint64_t sub_10007D910()
{
  unint64_t result = qword_10019B298;
  if (!qword_10019B298)
  {
    sub_10000650C(&qword_10019B2A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B298);
  }
  return result;
}

uint64_t sub_10007D988()
{
  uint64_t v1 = type metadata accessor for TicketView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10007DB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TicketView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10007C964(a1, v8, v5, v6, a2);
}

uint64_t sub_10007DC00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019B260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007DC68()
{
  unint64_t result = qword_10019B2B0;
  if (!qword_10019B2B0)
  {
    sub_10000650C(&qword_10019B260);
    sub_100010484(&qword_10019B2A8, &qword_10019B258);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B2B0);
  }
  return result;
}

uint64_t sub_10007DD08@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007CE3C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10007DD14()
{
  unint64_t result = qword_10019B2B8;
  if (!qword_10019B2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B2B8);
  }
  return result;
}

unint64_t sub_10007DD68()
{
  unint64_t result = qword_10019B2C0;
  if (!qword_10019B2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B2C0);
  }
  return result;
}

uint64_t sub_10007DDC0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for TicketView();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v6 = v0 + v3 + *(int *)(v2 + 40);
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  unint64_t v8 = v0 + v3 + *(int *)(v2 + 44);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for OpenURLAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v3 + v11 + v5) & ~v5), v1);

  return swift_deallocObject();
}

uint64_t sub_10007E030()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for TicketView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10007CBB0((long long *)(v0 + v4), v0+ ((v4 + *(void *)(v3 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1, v2);
}

uint64_t sub_10007E100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 32))(*(void *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *initializeBufferWithCopyOfBuffer for TicketProviderRow(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TicketProviderRow(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TicketProviderRow(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TicketProviderRow()
{
  return &type metadata for TicketProviderRow;
}

uint64_t sub_10007E1F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_10007E634()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10007E65C()
{
  unint64_t result = qword_10019B2C8;
  if (!qword_10019B2C8)
  {
    sub_10000650C(&qword_10019B2D0);
    sub_100010484(&qword_10019B2D8, qword_10019B2E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B2C8);
  }
  return result;
}

void sub_10007E700(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v30 = v6;
  uint64_t v31 = v5;
  char v28 = v7;
  uint64_t v29 = v8;
  uint64_t v9 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v26 = v10;
  uint64_t v27 = v9;
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v15 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  id v22 = [self mainBundle];
  v35._object = (void *)0xE000000000000000;
  v23._object = (void *)0x8000000100158140;
  v23._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v24._uint64_t countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v35._uint64_t countAndFlagsBits = 0;
  Swift::String v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v35);

  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = v31;
  *(void *)(a4 + 32) = v30;
  *(unsigned char *)(a4 + 40) = v28 & 1;
  *(void *)(a4 + 48) = v29;
  *(void *)(a4 + 56) = v27;
  *(void *)(a4 + 64) = v12;
  *(unsigned char *)(a4 + 72) = v14 & 1;
  *(void *)(a4 + 80) = v26;
  *(void *)(a4 + 88) = v15;
  *(void *)(a4 + 96) = v17;
  *(unsigned char *)(a4 + 104) = v19 & 1;
  *(void *)(a4 + 112) = v21;
  *(Swift::String *)(a4 + 120) = v25;
}

uint64_t sub_10007E89C()
{
  return Array.init<A>(_:)();
}

void sub_10007E968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100006560(&qword_100199238);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001503B0;
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  *(void *)(v7 + 56) = &type metadata for AnalyticsString;
  *(void *)(v7 + 64) = &off_10019BA08;
  *(unsigned char *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 48) = v8;
  *(void *)(v7 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v7 + 104) = &off_10019B9E0;
  *(unsigned char *)(v7 + 72) = 6;
  *(void *)(v7 + 136) = &type metadata for AnalyticsModuleAction;
  *(void *)(v7 + 144) = &off_10019BA40;
  *(void *)(v7 + 112) = a1;
  *(void *)(v7 + 120) = a2;
  *(unsigned char *)(v7 + 128) = 1;
  if (*(void *)(a3 + 72))
  {
    uint64_t v10 = *(void *)(a3 + 64);
    unint64_t v11 = *(void *)(a3 + 72);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  Swift::String v25 = &type metadata for AnalyticsString;
  uint64_t v26 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v23 = v10;
  Swift::String v24 = (Class (*)(uint64_t))v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v28 = sub_1000AB884((char *)1, 4, 1, (char *)v7);
  uint64_t v12 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v16 + 16))(v15, v13);
  sub_1000AC33C(3, (uint64_t)v15, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v17 = v28;
  NSString v18 = String._bridgeToObjectiveC()();
  char v19 = (void *)swift_allocObject();
  void v19[2] = 0xD00000000000001ELL;
  _OWORD v19[3] = 0x8000000100157480;
  void v19[4] = v17;
  uint64_t v26 = sub_10007F494;
  uint64_t v27 = v19;
  aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  Swift::String v24 = sub_1000AB7F8;
  Swift::String v25 = (ValueMetadata *)&unk_10018F4A0;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);
  swift_bridgeObjectRelease();
}

uint64_t sub_10007EC24()
{
  return Collection.first.getter();
}

uint64_t sub_10007EC9C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1000AC7F8(v4, v3, 6, a1);

  return swift_bridgeObjectRelease();
}

void sub_10007ECF8(uint64_t a1)
{
  sub_100006560(&qword_100199238);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014D8E0;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_10019BA08;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_10019B9E0;
  *(unsigned char *)(v3 + 72) = 6;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_10019BA68;
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_10019BA40;
  *(_OWORD *)(v3 + 152) = xmmword_1001503C0;
  *(unsigned char *)(v3 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    unint64_t v7 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v21 = &type metadata for AnalyticsString;
  id v22 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v19 = v6;
  uint64_t v20 = (Class (*)(uint64_t))v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v24 = sub_1000AB884((char *)1, 5, 1, (char *)v3);
  uint64_t v8 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v11, v9);
  sub_1000AC33C(4, (uint64_t)v11, (uint64_t *)&v24, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  __n128 v13 = v24;
  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0xD00000000000001ELL;
  v15[3] = 0x8000000100157480;
  void v15[4] = v13;
  id v22 = sub_100029A98;
  uint64_t v23 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_1000AB7F8;
  uint64_t v21 = (ValueMetadata *)&unk_10018F450;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
  swift_bridgeObjectRelease();
}

uint64_t sub_10007EFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007EFD8()
{
  return swift_release();
}

uint64_t sub_10007EFE4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10007F024()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007F098(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10007F180(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_10007F2C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10007F2FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10007F3CC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10007F414(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for TicketViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_10007F498()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10007F50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v32 = a6;
  uint64_t v31 = a5;
  uint64_t v11 = sub_100006560(&qword_10019B468);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID);
  *uint64_t v15 = 0x3534333939343832;
  v15[1] = 0xE900000000000039;
  uint64_t v16 = (void *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID);
  void *v16 = 0xD000000000000024;
  v16[1] = 0x8000000100158220;
  uint64_t v17 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle;
  *(void *)uint64_t v17 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v17 + 8) = v18;
  *(unsigned char *)(v17 + 16) = v19 & 1;
  *(void *)(v17 + 24) = v20;
  uint64_t v21 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle;
  *(void *)uint64_t v21 = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v21 + 8) = v22;
  *(unsigned char *)(v21 + 16) = v23 & 1;
  *(void *)(v21 + 24) = v24;
  uint64_t v25 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel__metricsQuery;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  sub_100006560((uint64_t *)&unk_10019CD40);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25, v14, v11);
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v26 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL;
  uint64_t v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, a3, v27);
  char v28 = (void *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID);
  uint64_t v29 = v31;
  *char v28 = a4;
  v28[1] = v29;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail) = v32;
  return v6;
}

uint64_t sub_10007F75C()
{
  v1[24] = v0;
  v1[25] = *v0;
  uint64_t v2 = type metadata accessor for URLComponents();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[29] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[30] = v4;
  v1[31] = v3;
  return _swift_task_switch(sub_10007F878, v4, v3);
}

uint64_t sub_10007F878()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = [self bundleForClass:ObjCClassFromMetadata];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  __n128 v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10019E5A0 + dword_10019E5A0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v7;
  void *v7 = v0;
  v7[1] = sub_10007F9A8;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_10007F9A8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 248);
  uint64_t v3 = *(void *)(v1 + 240);
  return _swift_task_switch(sub_10007FAC8, v3, v2);
}

uint64_t sub_10007FAC8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  swift_release();
  sub_100080660((uint64_t)(v0 + 4), (uint64_t)(v0 + 10));
  sub_100080660((uint64_t)(v0 + 10), (uint64_t)(v0 + 20));
  if (v0[21] && v0[7])
  {
    sub_100006560(&qword_10019B478);
    type metadata accessor for URLQueryItem();
    uint64_t v2 = (void *)swift_allocObject();
    *((_OWORD *)v2 + 1) = xmmword_10014CCD0;
    if (qword_100198160 != -1) {
      swift_once();
    }
    URLQueryItem.init(name:value:)();
    if (qword_100198168 != -1) {
      swift_once();
    }
    URLQueryItem.init(name:value:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  uint64_t v3 = v2[2];
  swift_bridgeObjectRelease();
  if (v3)
  {
    URLComponents.init()();
    sub_100080660((uint64_t)(v0 + 10), (uint64_t)(v0 + 8));
    if (v0[9] && v0[7])
    {
      sub_100006560(&qword_10019B478);
      type metadata accessor for URLQueryItem();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CCD0;
      if (qword_100198160 != -1) {
        swift_once();
      }
      URLQueryItem.init(name:value:)();
      uint64_t v1 = (uint64_t)(v0 + 2);
      if (qword_100198168 != -1) {
        swift_once();
      }
      URLQueryItem.init(name:value:)();
    }
    uint64_t v5 = v0[27];
    uint64_t v4 = v0[28];
    uint64_t v6 = v0[26];
    sub_100080660(v1, (uint64_t)(v0 + 12));
    sub_10006249C((uint64_t)(v0 + 12));
    sub_10006249C((uint64_t)(v0 + 10));
    sub_100080660((uint64_t)(v0 + 6), (uint64_t)(v0 + 14));
    sub_10006249C((uint64_t)(v0 + 14));
    URLComponents.queryItems.setter();
    uint64_t v7 = URLComponents.percentEncodedQuery.getter();
    uint64_t v9 = v8;
    swift_getKeyPath();
    swift_getKeyPath();
    v0[22] = v7;
    v0[23] = v9;
    swift_retain();
    static Published.subscript.setter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  }
  else
  {
    sub_100080660((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
    sub_10006249C((uint64_t)(v0 + 16));
    sub_10006249C((uint64_t)(v0 + 10));
    sub_100080660((uint64_t)(v0 + 6), (uint64_t)(v0 + 18));
    sub_10006249C((uint64_t)(v0 + 18));
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void sub_10007FF2C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  sub_100006560(&qword_100199238);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10014D8E0;
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  *(void *)(v9 + 56) = &type metadata for AnalyticsString;
  *(void *)(v9 + 64) = &off_10019BA08;
  *(unsigned char *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = v11;
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v9 + 104) = &off_10019B9E0;
  *(unsigned char *)(v9 + 72) = 0;
  *(void *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v9 + 144) = &off_10019BA68;
  *(unsigned char *)(v9 + 112) = 6;
  *(void *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v9 + 184) = &off_10019BA40;
  *(void *)(v9 + 152) = a1;
  *(void *)(v9 + 160) = a2;
  *(unsigned char *)(v9 + 168) = a3;
  if (*(void *)(a4 + 72))
  {
    uint64_t v12 = *(void *)(a4 + 64);
    unint64_t v13 = *(void *)(a4 + 72);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  uint64_t v29 = &type metadata for AnalyticsString;
  uint64_t v30 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v27 = v12;
  char v28 = (Class (*)(uint64_t))v13;
  swift_bridgeObjectRetain();
  sub_1000298CC(a1, a2, a3);
  int v32 = (char *)v9;
  unint64_t v15 = *(void *)(v9 + 16);
  unint64_t v14 = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  if (v15 >= v14 >> 1) {
    int v32 = sub_1000AB884((char *)(v14 > 1), v15 + 1, 1, (char *)v9);
  }
  uint64_t v16 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v17 = __chkstk_darwin(v16);
  char v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v20 + 16))(v19, v17);
  sub_1000AC33C(v15, (uint64_t)v19, (uint64_t *)&v32, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v21 = v32;
  NSString v22 = String._bridgeToObjectiveC()();
  char v23 = (void *)swift_allocObject();
  v23[2] = 0xD00000000000001ELL;
  v23[3] = 0x8000000100157480;
  v23[4] = v21;
  uint64_t v30 = sub_100029A98;
  uint64_t v31 = v23;
  aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  char v28 = sub_1000AB7F8;
  uint64_t v29 = (ValueMetadata *)&unk_10018F548;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v24);
  swift_bridgeObjectRelease();
}

uint64_t sub_10008022C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel__metricsQuery;
  uint64_t v4 = sub_100006560(&qword_10019B468);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10008035C()
{
  sub_10008022C();

  return swift_deallocClassInstance();
}

uint64_t sub_1000803B4()
{
  return type metadata accessor for AppViewModel();
}

uint64_t type metadata accessor for AppViewModel()
{
  uint64_t result = qword_10019B398;
  if (!qword_10019B398) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100080408()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100080500();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100080500()
{
  if (!qword_10019B3A8)
  {
    sub_10000650C((uint64_t *)&unk_10019CD40);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019B3A8);
    }
  }
}

double sub_10008055C@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000805DC()
{
  return static Published.subscript.setter();
}

uint64_t sub_100080660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560((uint64_t *)&unk_10019CD40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000806D0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100080710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100080720()
{
  return swift_release();
}

uint64_t sub_100080728()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t sub_10008080C()
{
  swift_getKeyPath();
  sub_100080C94();
  swift_release();
  return *(unsigned __int8 *)(v0 + 264);
}

double sub_100080880()
{
  return sub_100080C20() * 0.5075 * 0.87;
}

double sub_1000808B0()
{
  return sub_100080C20() * 0.96;
}

double sub_1000808D8()
{
  double v0 = sub_100080DF4();
  return (v0 + sub_100080C20() * -0.5075) * 0.5;
}

BOOL sub_100080918()
{
  return Array.count.getter() > 1;
}

double sub_100080954()
{
  return sub_100080C20() * -0.022;
}

double sub_100080978()
{
  return sub_100080C20() * 0.5075 * 0.9;
}

double sub_1000809A8()
{
  return sub_100080C20() * 0.97;
}

double sub_1000809CC()
{
  return sub_100080C20() * 0.5075 * 0.87 * 0.14;
}

uint64_t sub_100080A08()
{
  return sub_100080F08();
}

uint64_t sub_100080A28()
{
  swift_getKeyPath();
  sub_100080C94();
  swift_release();
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_100080A9C()
{
  uint64_t v0 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v0 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v0;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  URL.init(string:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100080BA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  sub_100080FA8(a1, a2, a3, a4, a5, a6);
  return v12;
}

double sub_100080C20()
{
  swift_getKeyPath();
  sub_100080C94();
  swift_release();
  return *(double *)(v0 + 248);
}

uint64_t sub_100080C94()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_100080D28()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_100080DF4()
{
  swift_getKeyPath();
  sub_100080C94();
  swift_release();
  return *(double *)(v0 + 256);
}

uint64_t sub_100080E68()
{
  return swift_release();
}

uint64_t sub_100080F08()
{
  return swift_release();
}

uint64_t sub_100080FA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  *(void *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 24) = v13;
  *(unsigned char *)(v6 + 32) = v14 & 1;
  *(void *)(v6 + 40) = v15;
  *(void *)(v6 + 48) = 0x7A6542656E6F6870;
  *(void *)(v6 + 56) = 0xEA00000000006C65;
  *(void *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 72) = v16;
  *(unsigned char *)(v6 + 80) = v17 & 1;
  *(void *)(v6 + 88) = v18;
  *(void *)(v6 + 96) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 104) = v19;
  *(unsigned char *)(v6 + 112) = v20 & 1;
  *(void *)(v6 + 120) = v21;
  *(void *)(v6 + 128) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 136) = v22;
  *(unsigned char *)(v6 + 144) = v23 & 1;
  *(void *)(v6 + 152) = v24;
  *(void *)(v6 + 160) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 168) = v25;
  *(unsigned char *)(v6 + 176) = v26 & 1;
  *(void *)(v6 + 184) = v27;
  *(void *)(v6 + 192) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 200) = v28;
  *(unsigned char *)(v6 + 208) = v29 & 1;
  *(void *)(v6 + 216) = v30;
  *(unsigned char *)(v6 + 265) = 0;
  ObservationRegistrar.init()();
  *(void *)(v6 + 224) = a1;
  *(void *)(v6 + 232) = a2;
  *(void *)(v6 + 240) = a3;
  *(double *)(v6 + 248) = a5;
  *(double *)(v6 + 256) = a6;
  *(unsigned char *)(v6 + 264) = a4;
  return v6;
}

uint64_t sub_100081134()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10019B480;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100081228()
{
  sub_100081134();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PhoneWallpaperViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_100081298@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008080C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000812C8()
{
  return sub_100080F08();
}

uint64_t sub_10008130C()
{
  return 16;
}

__n128 sub_100081318(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100081324()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 264) = *(unsigned char *)(v0 + 24);
}

void sub_100081334(double *a1@<X8>)
{
  *a1 = sub_100080C20();
}

uint64_t sub_100081360()
{
  return sub_100080E68();
}

uint64_t sub_1000813A4()
{
  return 16;
}

__n128 sub_1000813B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000813BC()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 248) = result;
  return result;
}

void sub_1000813CC(double *a1@<X8>)
{
  *a1 = sub_100080DF4();
}

uint64_t sub_1000813F8()
{
  return sub_100080E68();
}

uint64_t sub_10008143C()
{
  return 16;
}

__n128 sub_100081448(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100081454()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 256) = result;
  return result;
}

uint64_t sub_10008146C()
{
  return 16;
}

__n128 sub_100081478(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100081484()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 265) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100081494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100081530, v5, v4);
}

uint64_t sub_100081530()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  uint64_t v2 = sub_100035868((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100081618;
  return sub_100031C74(v0 + 16);
}

uint64_t sub_100081618()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = *(void *)(v2 + 96);
    long long v5 = sub_100081798;
  }
  else
  {
    sub_100029A08(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = *(void *)(v2 + 96);
    long long v5 = sub_100081734;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100081734()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081798()
{
  swift_release();
  sub_100029A08(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081814()
{
  uint64_t v0 = Venue.address.getter();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  id v2 = [self stringFromPostalAddress:v0 style:0];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_10008189C(uint64_t a1)
{
  unint64_t result = sub_1000818C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000818C4()
{
  unint64_t result = qword_10019B510[0];
  if (!qword_10019B510[0])
  {
    type metadata accessor for Venue();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10019B510);
  }
  return result;
}

uint64_t sub_10008191C()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    uint64_t v0 = type metadata accessor for Published();
    if (v2 <= 0x3F)
    {
      uint64_t inited = swift_initClassMetadata2();
      if (inited) {
        return inited;
      }
      else {
        return 0;
      }
    }
  }
  return v0;
}

uint64_t sub_100081A28()
{
  return swift_release();
}

uint64_t sub_100081AE4()
{
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96), *(void *)(*(void *)v0 + 80));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100081BF8()
{
  sub_100081AE4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MusicController()
{
  return sub_1000068A4();
}

uint64_t sub_100081C70()
{
  return 16;
}

__n128 sub_100081C7C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100081C88()
{
  return sub_100081D60(&qword_10019B598, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_100081CDC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100081D60(&qword_10019B5E0, (void (*)(uint64_t))&type metadata accessor for Artist);
  uint64_t result = sub_100081D60(qword_10019B5E8, (void (*)(uint64_t))&type metadata accessor for Artist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100081D60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100081DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

void *sub_100081DE0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100081E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTabViewModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTabViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SafeAreaModifier()
{
  return sub_1000068A4();
}

uint64_t sub_100081F00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100081F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a2;
  uint64_t v29 = a1;
  uint64_t v30 = a7;
  uint64_t v24 = a6;
  type metadata accessor for SafeAreaModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  sub_10000650C(&qword_100198870);
  type metadata accessor for _PreferenceWritingModifier();
  type metadata accessor for ModifiedContent();
  unint64_t v35 = sub_100019638();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  swift_getWitnessTable();
  type metadata accessor for GeometryReader();
  v23[1] = swift_getWitnessTable();
  v23[2] = type metadata accessor for _BackgroundModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (void *)((char *)v23 - v13);
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v24;
  v15[2] = a5;
  v15[3] = v16;
  uint64_t v17 = v27;
  void v15[4] = v26;
  v15[5] = v17;
  v15[6] = v28;
  swift_retain();
  uint64_t v33 = GeometryReader.init(content:)();
  uint64_t v34 = v18;
  static Alignment.center.getter();
  uint64_t v19 = swift_getWitnessTable();
  View.background<A>(_:alignment:)();
  swift_release();
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v31 = v19;
  uint64_t v32 = v20;
  swift_getWitnessTable();
  sub_1000508C8(v14, v11, v8);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v11, v8);
  sub_1000508C8(v30, v14, v8);
  return ((uint64_t (*)(void *, uint64_t))v21)(v14, v8);
}

uint64_t sub_10008229C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, void *a6@<X8>)
{
  v23[4] = a4;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  v23[2] = a1;
  v23[1] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)v23 - v8;
  sub_10000650C(&qword_100198870);
  void v23[3] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v23 - v15);
  uint64_t v17 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = v17;
  uint64_t v18 = GeometryProxy.safeAreaInsets.getter();
  a3(v18);
  unint64_t v19 = sub_100019638();
  View.preference<A>(key:value:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_release();
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v27 = v19;
  uint64_t v28 = WitnessTable;
  swift_getWitnessTable();
  sub_1000508C8(v16, v13, v10);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v13, v10);
  sub_1000508C8(v26, v16, v10);
  return ((uint64_t (*)(void *, uint64_t))v21)(v16, v10);
}

uint64_t sub_100082568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100081F44(a1, *v3, v3[1], v3[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_10008257C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000825B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10008229C(a1, *(void *)(v2 + 32), *(void (**)(uint64_t))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000825CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100082770()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000827E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008285C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100006560(&qword_10019B768);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019B6C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_10008358C((uint64_t)v8);
    uint64_t v9 = type metadata accessor for Venue();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_10008358C((uint64_t)v8);
    VenueSchedule.venue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = type metadata accessor for Venue();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
}

uint64_t sub_100082A90(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_100006560(&qword_10019B6C0);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100082B78, v5, v4);
}

uint64_t sub_100082B78()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = sub_100006560(&qword_10019B768);
  v0[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[14] = v5;
  v0[15] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100083524(v1, v2);
  swift_retain();
  static Published.subscript.setter();
  sub_10008358C(v1);
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = 0;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100082D14;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[5];
  return static Venue.schedule(id:)(v7, v8, v9);
}

uint64_t sub_100082D14()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_100082F4C;
  }
  else {
    uint64_t v5 = sub_100082E50;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100082E50()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  swift_release();
  v1(v4, 0, 1, v2);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100083524(v4, v3);
  swift_retain();
  static Published.subscript.setter();
  sub_10008358C(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100082F4C()
{
  uint64_t v1 = v0[17];
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v0[3] = v1;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100083024()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__schedule;
  uint64_t v2 = sub_100006560(&qword_10019B758);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__error;
  uint64_t v4 = sub_100006560(&qword_10019B760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100083110()
{
  return type metadata accessor for VenueController();
}

uint64_t type metadata accessor for VenueController()
{
  uint64_t result = qword_10019B6A8;
  if (!qword_10019B6A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100083164()
{
  sub_10008324C(319, &qword_10019B6B8, &qword_10019B6C0);
  if (v0 <= 0x3F)
  {
    sub_10008324C(319, &qword_10019B6C8, (uint64_t *)&unk_10019B6D0);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10008324C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10000650C(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10008329C()
{
  v18[0] = sub_100006560(&qword_10019B760);
  uint64_t v1 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019B758);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019B6C0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__schedule;
  uint64_t v15 = sub_100006560(&qword_10019B768);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_100083524((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)();
  sub_10008358C((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  uint64_t v16 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__error;
  v18[1] = 0;
  sub_100006560((uint64_t *)&unk_10019B6D0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, void))(v1 + 32))(v16, v3, v18[0]);
  return v0;
}

uint64_t sub_100083524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019B6C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008358C(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019B6C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000835FC()
{
  return sub_100083940(&qword_10019B778, (void (*)(uint64_t))&type metadata accessor for Genre);
}

uint64_t sub_100083644()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100083660()
{
  return sub_100083940(&qword_10019B780, (void (*)(uint64_t))&type metadata accessor for Playlist);
}

uint64_t sub_1000836A8()
{
  return sub_100083940((unint64_t *)&qword_10019B788, (void (*)(uint64_t))&type metadata accessor for PromotionalAssets);
}

uint64_t sub_1000836F0()
{
  return sub_100083940(&qword_10019B790, (void (*)(uint64_t))&type metadata accessor for Setlist);
}

uint64_t sub_100083738()
{
  return sub_100083940(&qword_10019B798, (void (*)(uint64_t))&type metadata accessor for Ticket);
}

_UNKNOWN **sub_100083780()
{
  return &off_100191168;
}

uint64_t sub_10008378C()
{
  return sub_100083940(&qword_10019B7A0, (void (*)(uint64_t))&type metadata accessor for Venue);
}

uint64_t sub_1000837E8(uint64_t a1)
{
  return Event<>.tickets.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_1000837F8()
{
  sub_100083940(&qword_10019B8C8, (void (*)(uint64_t))&type metadata accessor for LiveMusic);

  return Event<>.participants.getter();
}

uint64_t sub_100083874(uint64_t a1)
{
  return Event<>.venues.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_10008388C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100010484(&qword_10019B8A8, &qword_10019A5D0);
  uint64_t result = sub_100010484(&qword_10019B8B0, &qword_10019A5D0);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100083904()
{
  return sub_100010484(&qword_10019B8B8, &qword_10019B8C0);
}

uint64_t sub_100083940(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100083988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v25 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v15 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v17 = (char *)&v24 - v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(a2 + 200))(a1, a2, v15);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000B7044(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  DateInterval.end.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
  static Date.now.getter();
  char v19 = static Date.< infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v21 = v6;
  uint64_t v22 = v27;
  v20(v21, v27);
  v20(v9, v22);
  return v19 & 1;
}

uint64_t *sub_100083C4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    __dst = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for Artwork();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100006560(&qword_10019B8D0);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100006560(&qword_100198630);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)v4 + v21);
    char v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100083EF4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Artwork();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100084060(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100006560(&qword_10019B8D0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100006560(&qword_100198630);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000842B4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_10019B8D0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_100006560(&qword_100198630);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_13:
  uint64_t v24 = a3[8];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000845E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100006560(&qword_10019B8D0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100006560(&qword_100198630);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

void *sub_100084804(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Artwork();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100006560(&qword_10019B8D0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100006560(&qword_100198630);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  uint64_t v25 = a3[8];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  void *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100084B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084B1C);
}

uint64_t sub_100084B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_10019B8D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198630);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100084C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100084C64);
}

uint64_t sub_100084C64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_10019B8D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100006560(&qword_100198630);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicSetlist()
{
  uint64_t result = qword_10019B930;
  if (!qword_10019B930) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100084DE4()
{
  sub_100084EFC(319, (unint64_t *)&unk_10019B940, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v0 <= 0x3F)
  {
    sub_100084EFC(319, (unint64_t *)&qword_1001993B0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100084EFC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100084F50()
{
  return sub_100084FE0(&qword_10019B980, (void (*)(uint64_t))&type metadata accessor for Artwork);
}

uint64_t sub_100084F98()
{
  return sub_100084FE0(&qword_10019B988, (void (*)(uint64_t))&type metadata accessor for Song);
}

uint64_t sub_100084FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100085028()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100085058()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100085060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000066D4(v2 + *(int *)(a1 + 24), a2, &qword_10019B8D0);
}

uint64_t sub_10008508C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000066D4(v2 + *(int *)(a1 + 28), a2, &qword_100198630);
}

uint64_t sub_1000850B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000850F0(char a1)
{
  return qword_100150E08[a1];
}

ValueMetadata *type metadata accessor for AnalyticsPageName()
{
  return &type metadata for AnalyticsPageName;
}

uint64_t destroy for RemoteViewConfiguration.QueryItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s15ShazamEventsApp23RemoteViewConfigurationC9QueryItemVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnalyticsString()
{
  return &type metadata for AnalyticsString;
}

uint64_t sub_100085204(char *a1, char *a2)
{
  return sub_100075F64(*a1, *a2);
}

Swift::Int sub_100085210()
{
  return sub_100075FEC();
}

uint64_t sub_100085218()
{
  return sub_100076668();
}

Swift::Int sub_100085220()
{
  return sub_1000766BC();
}

unint64_t sub_100085228@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100086388(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100085258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000850F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100085284(char a1)
{
  return *(void *)&aEvent_12[8 * a1];
}

uint64_t sub_1000852A4()
{
  return *v0;
}

id sub_1000852AC()
{
  id v0 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

uint64_t sub_100085324(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100085A18(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100085284);
}

Swift::Int sub_10008533C(uint64_t a1, uint64_t a2)
{
  return sub_100085AC8(a1, a2, (void (*)(uint64_t))sub_100085284);
}

uint64_t sub_100085354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085B4C(a1, a2, a3, (void (*)(void))sub_100085284);
}

Swift::Int sub_10008536C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085BBC(a1, a2, a3, (void (*)(uint64_t))sub_100085284);
}

unint64_t sub_100085384@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000863D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000853B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100085284(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000853E0(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726564616568;
      break;
    case 2:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      unint64_t result = 0x42746E65746E6F63;
      break;
    case 4:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 5:
    case 10:
      return result;
    case 6:
      unint64_t result = 0x6C75646F4D707061;
      break;
    case 7:
      unint64_t result = 0x737265746C6966;
      break;
    case 8:
      unint64_t result = 0x694C73746E657665;
      break;
    case 9:
      unint64_t result = 0x646F4D636973756DLL;
      break;
    case 11:
      unint64_t result = 0x7473694C746573;
      break;
    case 12:
      unint64_t result = 0x507473694C746573;
      break;
    case 13:
      unint64_t result = 0x736F65646976;
      break;
    default:
      unint64_t result = 0x7261626C6F6F74;
      break;
  }
  return result;
}

uint64_t sub_1000855B4()
{
  return 2;
}

id sub_1000855BC(uint64_t a1, uint64_t a2)
{
  return sub_100085E74(a1, a2, (void (*)(void))sub_100085284);
}

uint64_t sub_1000855D8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction()
{
  return &type metadata for AnalyticsModuleAction;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName()
{
  return &type metadata for AnalyticsModuleName;
}

uint64_t _s15ShazamEventsApp17AnalyticsPageNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s15ShazamEventsApp17AnalyticsPageNameV9ValueTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100085784);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPageName.ValueType()
{
  return &type metadata for AnalyticsPageName.ValueType;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnalyticsKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100085918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKey()
{
  return &type metadata for AnalyticsKey;
}

unint64_t sub_100085954()
{
  unint64_t result = qword_10019BA30;
  if (!qword_10019BA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BA30);
  }
  return result;
}

unint64_t sub_1000859AC()
{
  unint64_t result = qword_10019BA38;
  if (!qword_10019BA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BA38);
  }
  return result;
}

uint64_t sub_100085A00(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100085A18(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000853E0);
}

uint64_t sub_100085A18(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_100085AB0(uint64_t a1, uint64_t a2)
{
  return sub_100085AC8(a1, a2, (void (*)(uint64_t))sub_1000853E0);
}

Swift::Int sub_100085AC8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100085B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085B4C(a1, a2, a3, (void (*)(void))sub_1000853E0);
}

uint64_t sub_100085B4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100085BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100085BBC(a1, a2, a3, (void (*)(uint64_t))sub_1000853E0);
}

Swift::Int sub_100085BBC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100085C24@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000867D4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100085C54@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000853E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100085C80(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726564616568;
      break;
    case 2:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      unint64_t result = 0x42746E65746E6F63;
      break;
    case 4:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 5:
    case 10:
      return result;
    case 6:
      unint64_t result = 0x6C75646F4D707061;
      break;
    case 7:
      unint64_t result = 0x737265746C6966;
      break;
    case 8:
      unint64_t result = 0x694C73746E657665;
      break;
    case 9:
      unint64_t result = 0x646F4D636973756DLL;
      break;
    case 11:
      unint64_t result = 0x7473694C746573;
      break;
    case 12:
      unint64_t result = 0x507473694C746573;
      break;
    case 13:
      unint64_t result = 0x736F65646976;
      break;
    default:
      unint64_t result = 0x7261626C6F6F74;
      break;
  }
  return result;
}

uint64_t sub_100085E54()
{
  return 3;
}

id sub_100085E5C(uint64_t a1, uint64_t a2)
{
  return sub_100085E74(a1, a2, (void (*)(void))sub_100085C80);
}

id sub_100085E74(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(*v3);
  id v4 = objc_allocWithZone((Class)NSString);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithString:v5];

  return v6;
}

unint64_t sub_100085EF4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v3 = a1;
  if (a3 >= 3u)
  {
    unint64_t v3 = 0xD000000000000011;
    switch(a1)
    {
      case 1:
        unint64_t v3 = 0x6572616873;
        break;
      case 2:
        unint64_t v3 = 0x7373696D736964;
        break;
      case 3:
        unint64_t v3 = 0x656B636954746567;
        break;
      case 4:
        unint64_t v3 = 0x6C61436F54646461;
        break;
      case 5:
        unint64_t v3 = 0x614D6E496E65706FLL;
        break;
      case 6:
        unint64_t v3 = 0x64616F6C6E776F64;
        break;
      case 7:
        unint64_t v3 = 0x6157657461657263;
        break;
      case 8:
        unint64_t v3 = 0x7070416E65706FLL;
        break;
      case 9:
        unint64_t v3 = 0x746E6F436E65706FLL;
        break;
      case 10:
        unint64_t v3 = 0x6E6576456E65706FLL;
        break;
      case 11:
        unint64_t v3 = 0x746C69466E65706FLL;
        break;
      case 12:
      case 21:
        break;
      case 13:
        unint64_t v3 = 0xD000000000000013;
        break;
      case 14:
        unint64_t v3 = 0x676E6F536E65706FLL;
        break;
      case 15:
        unint64_t v3 = 0x656469566E65706FLL;
        break;
      case 16:
        unint64_t v3 = 2036427888;
        break;
      case 17:
        unint64_t v3 = 0x6573756170;
        break;
      case 18:
        unint64_t v3 = 0x6C69467465736572;
        break;
      case 19:
      case 20:
        unint64_t v3 = 0x61577463656C6573;
        break;
      case 22:
        unint64_t v3 = 0x65726F4D776F6873;
        break;
      case 23:
        unint64_t v3 = 0x6F68506570697773;
        break;
      case 24:
        unint64_t v3 = 0x6E6F536570697773;
        break;
      case 25:
        unint64_t v3 = 0x6469566570697773;
        break;
      case 26:
        unint64_t v3 = 0x6C61576570697773;
        break;
      case 27:
        unint64_t v3 = 0x7461576570697773;
        break;
      case 28:
        unint64_t v3 = 0x706C6C6157657375;
        break;
      default:
        unint64_t v3 = 0x686372616573;
        break;
    }
  }
  sub_1000298CC(a1, a2, a3);
  return v3;
}

unint64_t sub_1000862F4()
{
  return sub_100085EF4(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100086300()
{
  return 4;
}

id sub_100086308()
{
  sub_100085EF4(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  id v1 = objc_allocWithZone((Class)NSString);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithString:v2];

  return v3;
}

unint64_t sub_100086388(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018CA00, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000863D4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018CA98, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t destroy for AnalyticsModuleAction.ValueType(uint64_t a1)
{
  return sub_1000855D8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000298CC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000298CC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000855D8(v6, v7, v8);
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000855D8(v4, v5, v6);
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000865A8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000865C0(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction.ValueType()
{
  return &type metadata for AnalyticsModuleAction.ValueType;
}

uint64_t _s15ShazamEventsApp19AnalyticsModuleNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s15ShazamEventsApp19AnalyticsModuleNameV9ValueTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100086744);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName.ValueType()
{
  return &type metadata for AnalyticsModuleName.ValueType;
}

unint64_t sub_100086780()
{
  unint64_t result = qword_10019BA90;
  if (!qword_10019BA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BA90);
  }
  return result;
}

unint64_t sub_1000867D4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10018CBA8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t sub_100086824(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v9 = (void *)a2[8];
    uint64_t v8 = a2[9];
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    char v12 = (uint64_t *)((char *)a2 + v11);
    uint64_t v13 = (void *)(a1 + v11);
    *(void *)(a1 + 112) = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v12, v15);
    }
    else
    {
      *uint64_t v13 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000869C8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for OpenURLAction();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100086AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v8 = *(void **)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a2 + v10);
  char v12 = (void *)(a1 + v10);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v11, v14);
  }
  else
  {
    *char v12 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100086BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 64);
  uint64_t v7 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  id v8 = v7;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_1000067DC(a1 + v9, &qword_1001982C0);
    sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100086DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v10 = sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for OpenURLAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100086EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (void *)(a1 + v11);
    id v13 = (const void *)(a2 + v11);
    sub_1000067DC(a1 + v11, &qword_1001982C0);
    uint64_t v14 = sub_100006560(&qword_1001982C0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for OpenURLAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100087024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087038);
}

uint64_t sub_100087038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198B50);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000870EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087100);
}

uint64_t sub_100087100(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198B50);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LocationModule()
{
  uint64_t result = qword_10019BAF0;
  if (!qword_10019BAF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000871F8()
{
  sub_10001E48C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100087298()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000872B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  uint64_t v3 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v3 - 8);
  uint64_t v67 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v63);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006560(&qword_10019BB30);
  __chkstk_darwin(v62);
  uint64_t v11 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = sub_100006560(&qword_10019BB38);
  __chkstk_darwin(v64);
  uint64_t v66 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_10019BB40);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019BB48);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v15 = static HorizontalAlignment.leading.getter();
  *((void *)v15 + 1) = 0x4030000000000000;
  v15[16] = 0;
  uint64_t v20 = sub_100006560(&qword_10019BB50);
  sub_1000878CC(v2, (uint64_t)&v15[*(int *)(v20 + 44)]);
  LOBYTE(v2) = static Edge.Set.all.getter();
  sub_1000066D4((uint64_t)v15, (uint64_t)v19, &qword_10019BB40);
  uint64_t v21 = *(int *)(v17 + 44);
  uint64_t v65 = v19;
  int v22 = &v19[v21];
  *int v22 = v2;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  v22[40] = 1;
  sub_1000067DC((uint64_t)v15, &qword_10019BB40);
  if (qword_1001980B0 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1001AA358;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = &v9[*(int *)(v7 + 20)];
  uint64_t v26 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v27 = type metadata accessor for RoundedCornerStyle();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v60 = v7;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 104);
  v29(v25, v26, v27);
  __asm { FMOV            V0.2D, #12.0 }
  long long v59 = _Q0;
  *(_OWORD *)uint64_t v9 = _Q0;
  uint64_t v61 = &type metadata accessor for RoundedRectangle;
  sub_1000899A4((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v63 + 36)] = 256;
  sub_1000066D4((uint64_t)v6, (uint64_t)v11 + *(int *)(v62 + 36), &qword_100198618);
  *uint64_t v11 = KeyPath;
  v11[1] = v23;
  swift_retain_n();
  swift_retain();
  sub_1000067DC((uint64_t)v6, &qword_100198618);
  sub_100010934((uint64_t)v9);
  swift_release();
  swift_release();
  v29(&v9[*(int *)(v60 + 20)], v26, v27);
  *(_OWORD *)uint64_t v9 = v59;
  static Color.black.getter();
  uint64_t v35 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v36 = v67;
  sub_1000899A4((uint64_t)v9, v67, (uint64_t (*)(void))v61);
  uint64_t v37 = v36 + *(int *)(sub_100006560(&qword_10019A188) + 36);
  long long v38 = v70;
  *(_OWORD *)uint64_t v37 = v69;
  *(_OWORD *)(v37 + 16) = v38;
  *(void *)(v37 + 32) = v71;
  uint64_t v39 = sub_100006560(&qword_10019A190);
  *(void *)(v36 + *(int *)(v39 + 52)) = v35;
  *(_WORD *)(v36 + *(int *)(v39 + 56)) = 256;
  uint64_t v40 = static Alignment.center.getter();
  uint64_t v42 = v41;
  uint64_t v43 = (uint64_t *)(v36 + *(int *)(sub_100006560(&qword_10019A198) + 36));
  uint64_t *v43 = v40;
  v43[1] = v42;
  sub_100010934((uint64_t)v9);
  uint64_t v44 = static Alignment.center.getter();
  uint64_t v46 = v45;
  uint64_t v47 = (uint64_t)v66;
  uint64_t v48 = (uint64_t)&v66[*(int *)(v64 + 36)];
  sub_1000066D4(v36, v48, &qword_10019A180);
  long long v49 = (uint64_t *)(v48 + *(int *)(sub_100006560(&qword_10019A178) + 36));
  *long long v49 = v44;
  v49[1] = v46;
  sub_1000066D4((uint64_t)v11, v47, &qword_10019BB30);
  sub_1000067DC(v36, &qword_10019A180);
  sub_1000067DC((uint64_t)v11, &qword_10019BB30);
  uint64_t v50 = static Alignment.center.getter();
  uint64_t v52 = v51;
  uint64_t v53 = sub_100006560(&qword_10019BB58);
  uint64_t v54 = v68;
  uint64_t v55 = v68 + *(int *)(v53 + 36);
  sub_1000066D4(v47, v55, &qword_10019BB38);
  uint64_t v56 = (uint64_t *)(v55 + *(int *)(sub_100006560(&qword_10019BB60) + 36));
  *uint64_t v56 = v50;
  v56[1] = v52;
  uint64_t v57 = (uint64_t)v65;
  sub_1000066D4((uint64_t)v65, v54, &qword_10019BB48);
  sub_1000067DC(v47, &qword_10019BB38);
  return sub_1000067DC(v57, &qword_10019BB48);
}

uint64_t sub_1000878CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = type metadata accessor for LocationModule();
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v54 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = sub_100006560(&qword_10019BB68);
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019BB70);
  __chkstk_darwin(v8 - 8);
  uint64_t v55 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v56 = (uint64_t)&v52 - v11;
  uint64_t v12 = type metadata accessor for Divider();
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = sub_100006560(&qword_10019BB78);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v62 = (uint64_t)&v52 - v22;
  uint64_t v23 = sub_100006560(&qword_10019BB80);
  __chkstk_darwin(v23 - 8);
  uint64_t v61 = (uint64_t)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v52 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v52 - v29;
  *(void *)uint64_t v27 = static HorizontalAlignment.leading.getter();
  *((void *)v27 + 1) = 0x4024000000000000;
  v27[16] = 0;
  uint64_t v31 = sub_100006560(&qword_10019BB88);
  sub_100088084((long long *)a1, (uint64_t)&v27[*(int *)(v31 + 44)]);
  sub_10001D6D8((uint64_t)v27, (uint64_t)v30, &qword_10019BB80);
  if (*(void *)(a1 + 104))
  {
    swift_retain();
    char v32 = sub_100098290();
    swift_release();
    if (v32)
    {
      uint64_t v33 = sub_100006560(&qword_10019BBB0);
      uint64_t v34 = v62;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v62, 1, 1, v33);
    }
    else
    {
      uint64_t v53 = v30;
      uint64_t v35 = v17;
      Divider.init()();
      sub_1000899A4(a1, (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationModule);
      unint64_t v36 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v37 = swift_allocObject();
      uint64_t v38 = sub_100006840((uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v37 + v36);
      __chkstk_darwin(v38);
      *(&v52 - 2) = a1;
      sub_100006560(&qword_10019BB90);
      sub_100010484(&qword_10019BB98, &qword_10019BB90);
      Button.init(action:label:)();
      if (qword_1001980F8 != -1) {
        swift_once();
      }
      sub_100010484(&qword_10019BBA0, &qword_10019BB68);
      uint64_t v39 = (uint64_t)v55;
      uint64_t v40 = v58;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v40);
      uint64_t v41 = v56;
      sub_10001D6D8(v39, v56, &qword_10019BB70);
      uint64_t v43 = v59;
      uint64_t v42 = v60;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
      v44(v14, v35, v60);
      sub_1000066D4(v41, v39, &qword_10019BB70);
      v44(v20, v14, v42);
      uint64_t v45 = sub_100006560(&qword_10019BBA8);
      sub_1000066D4(v39, (uint64_t)&v20[*(int *)(v45 + 48)], &qword_10019BB70);
      sub_1000067DC(v41, &qword_10019BB70);
      uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
      v46(v35, v42);
      sub_1000067DC(v39, &qword_10019BB70);
      v46(v14, v42);
      uint64_t v47 = sub_100006560(&qword_10019BBB0);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v20, 0, 1, v47);
      uint64_t v34 = v62;
      sub_10001D6D8((uint64_t)v20, v62, &qword_10019BB78);
      uint64_t v30 = v53;
    }
    uint64_t v48 = v61;
    sub_1000066D4((uint64_t)v30, v61, &qword_10019BB80);
    sub_1000066D4(v34, (uint64_t)v20, &qword_10019BB78);
    uint64_t v49 = v63;
    sub_1000066D4(v48, v63, &qword_10019BB80);
    uint64_t v50 = sub_100006560(&qword_10019BBB8);
    sub_1000066D4((uint64_t)v20, v49 + *(int *)(v50 + 48), &qword_10019BB78);
    sub_1000067DC(v34, &qword_10019BB78);
    sub_1000067DC((uint64_t)v30, &qword_10019BB80);
    sub_1000067DC((uint64_t)v20, &qword_10019BB78);
    return sub_1000067DC(v48, &qword_10019BB80);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100089BC4((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_100088084@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v164 = a2;
  uint64_t v159 = type metadata accessor for EnabledTextSelectability();
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v157 = (char *)&v126 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = sub_100006560(&qword_10019BBC0);
  uint64_t v162 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v161 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v160 = (char *)&v126 - v6;
  uint64_t v156 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v156);
  uint64_t v8 = (_OWORD *)((char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for MapInteractionModes();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_1001994A0);
  __chkstk_darwin(v13 - 8);
  uint64_t v154 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MapCamera();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  long long v142 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for MapCameraPosition();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  long long v141 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_1001994A8);
  __chkstk_darwin(v19 - 8);
  long long v145 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_100006560(&qword_10019BBC8);
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  long long v148 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_100006560(&qword_10019BBD0);
  __chkstk_darwin(v146);
  uint64_t v153 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100006560(&qword_10019BBD8);
  __chkstk_darwin(v147);
  long long v152 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100006560(&qword_10019BBE0);
  __chkstk_darwin(v150);
  uint64_t v167 = (uint64_t)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v166 = (uint64_t)&v126 - v26;
  uint64_t v135 = sub_100006560(&qword_100199610);
  __chkstk_darwin(v135);
  long long v138 = (uint64_t *)((char *)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100006560(&qword_100199620);
  __chkstk_darwin(v134);
  char v32 = (char *)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_100006560(&qword_10019BBE8);
  __chkstk_darwin(v137);
  uint64_t v34 = (char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100006560(&qword_10019BBF0);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v136 = (uint64_t)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100006560(&qword_10019BBF8);
  __chkstk_darwin(v36 - 8);
  uint64_t v155 = (uint64_t)&v126 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v39 = __chkstk_darwin(v38).n128_u64[0];
  uint64_t v165 = (uint64_t)&v126 - v40;
  uint64_t v41 = (void *)*((void *)a1 + 8);
  if (v41)
  {
    [v41 city:v39];
    uint64_t v128 = v15;
    id v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v133 = a1;
    uint64_t v45 = v44;
    long long v132 = v8;
    uint64_t v47 = v46;

    *(void *)&long long v175 = v45;
    *((void *)&v175 + 1) = v47;
    sub_10002374C();
    uint64_t v48 = Text.init<A>(_:)();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v127 = v16;
    char v54 = v53 & 1;
    uint64_t v129 = v10;
    uint64_t v55 = enum case for Text.Case.uppercase(_:);
    uint64_t v56 = type metadata accessor for Text.Case();
    long long v131 = v12;
    uint64_t v57 = v56;
    uint64_t v58 = *(void *)(v56 - 8);
    uint64_t v130 = v9;
    uint64_t v59 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 104))(v30, v55, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v30, 0, 1, v57);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v61 = v138;
    sub_1000066D4((uint64_t)v30, (uint64_t)v138 + *(int *)(v135 + 28), &qword_100199618);
    *uint64_t v61 = KeyPath;
    sub_1000066D4((uint64_t)v61, (uint64_t)&v32[*(int *)(v134 + 36)], &qword_100199610);
    *(void *)char v32 = v48;
    *((void *)v32 + 1) = v50;
    v32[16] = v54;
    *((void *)v32 + 3) = v52;
    sub_100010924(v48, v50, v54);
    swift_bridgeObjectRetain();
    sub_1000067DC((uint64_t)v61, &qword_100199610);
    sub_1000067DC((uint64_t)v30, &qword_100199618);
    uint64_t v62 = v50;
    a1 = v133;
    char v63 = v54;
    uint64_t v16 = v127;
    sub_1000065A4(v48, v62, v63);
    uint64_t v8 = v132;
    swift_bridgeObjectRelease();
    uint64_t v64 = static Font.subheadline.getter();
    uint64_t v65 = swift_getKeyPath();
    sub_1000066D4((uint64_t)v32, (uint64_t)v34, &qword_100199620);
    uint64_t v66 = (uint64_t *)&v34[*(int *)(v137 + 36)];
    *uint64_t v66 = v65;
    v66[1] = v64;
    uint64_t v15 = v128;
    sub_1000067DC((uint64_t)v32, &qword_100199620);
    uint64_t v67 = v136;
    sub_1000066D4((uint64_t)v34, v136, &qword_10019BBE8);
    uint64_t v68 = v140;
    *(void *)(v67 + *(int *)(v140 + 36)) = 0x3FE0000000000000;
    sub_1000067DC((uint64_t)v34, &qword_10019BBE8);
    uint64_t v69 = v165;
    sub_10001D6D8(v67, v165, &qword_10019BBF0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56))(v69, 0, 1, v68);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v165, 1, 1, v140);
  }
  long long v70 = v142;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)();
  uint64_t v71 = v141;
  static MapCameraPosition.camera(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v70, v15);
  uint64_t v72 = v144;
  static Binding.constant(_:)();
  (*(void (**)(char *, uint64_t))(v143 + 8))(v71, v72);
  uint64_t v73 = type metadata accessor for MapCameraBounds();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v154, 1, 1, v73);
  sub_100006560(&qword_10019BC00);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_10014CCD0;
  static MapInteractionModes.zoom.getter();
  static MapInteractionModes.pitch.getter();
  *(void *)&long long v175 = v74;
  sub_100089BC4(&qword_10019BC08, (void (*)(uint64_t))&type metadata accessor for MapInteractionModes);
  sub_100006560(&qword_10019BC10);
  sub_100010484(&qword_10019BC18, &qword_10019BC10);
  uint64_t v75 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v75);
  sub_100006560(&qword_10019BC20);
  sub_100010484(&qword_10019BC28, &qword_10019BC20);
  uint64_t v76 = v148;
  Map.init<A>(position:bounds:interactionModes:scope:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v77 = v149;
  uint64_t v78 = (uint64_t)v153;
  uint64_t v79 = v151;
  (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v153, v76, v151);
  uint64_t v80 = (_OWORD *)(v78 + *(int *)(v146 + 36));
  long long v81 = v173;
  _OWORD *v80 = v172;
  v80[1] = v81;
  v80[2] = v174;
  (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v79);
  uint64_t v82 = (char *)v8 + *(int *)(v156 + 20);
  uint64_t v83 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v84 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 104))(v82, v83, v84);
  __asm { FMOV            V0.2D, #10.0 }
  *uint64_t v8 = _Q0;
  uint64_t v90 = (uint64_t)v152;
  uint64_t v91 = (uint64_t)&v152[*(int *)(v147 + 36)];
  sub_1000899A4((uint64_t)v8, v91, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v91 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4(v78, v90, &qword_10019BBD0);
  sub_100010934((uint64_t)v8);
  sub_1000067DC(v78, &qword_10019BBD0);
  uint64_t v92 = v167;
  sub_1000066D4(v90, v167, &qword_10019BBD8);
  *(unsigned char *)(v92 + *(int *)(v150 + 36)) = 1;
  sub_1000067DC(v90, &qword_10019BBD8);
  sub_10001D6D8(v92, v166, &qword_10019BBE0);
  long long v93 = a1[5];
  long long v179 = a1[4];
  long long v180 = v93;
  uint64_t v181 = *((void *)a1 + 12);
  long long v94 = a1[1];
  long long v175 = *a1;
  long long v176 = v94;
  long long v95 = a1[3];
  long long v177 = a1[2];
  long long v178 = v95;
  uint64_t v168 = sub_100097BA0();
  uint64_t v169 = v96;
  sub_10002374C();
  uint64_t v97 = Text.init<A>(_:)();
  uint64_t v99 = v98;
  char v101 = v100 & 1;
  static Font.headline.getter();
  uint64_t v102 = Text.font(_:)();
  uint64_t v104 = v103;
  char v106 = v105;
  swift_release();
  sub_1000065A4(v97, v99, v101);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v107 = Text.fontWeight(_:)();
  uint64_t v109 = v108;
  LOBYTE(v76) = v110;
  uint64_t v112 = v111;
  sub_1000065A4(v102, v104, v106 & 1);
  swift_bridgeObjectRelease();
  uint64_t v168 = v107;
  uint64_t v169 = v109;
  char v170 = v76 & 1;
  uint64_t v171 = v112;
  long long v113 = v157;
  EnabledTextSelectability.init()();
  long long v114 = v161;
  uint64_t v115 = v159;
  View.textSelection<A>(_:)();
  (*(void (**)(char *, uint64_t))(v158 + 8))(v113, v115);
  sub_1000065A4(v168, v169, v170);
  swift_bridgeObjectRelease();
  uint64_t v116 = v162;
  long long v117 = v160;
  uint64_t v118 = v163;
  (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v160, v114, v163);
  uint64_t v119 = v155;
  sub_1000066D4(v165, v155, &qword_10019BBF8);
  uint64_t v120 = v167;
  sub_1000066D4(v166, v167, &qword_10019BBE0);
  long long v121 = *(void (**)(char *, char *, uint64_t))(v116 + 16);
  v121(v114, v117, v118);
  uint64_t v122 = v164;
  sub_1000066D4(v119, v164, &qword_10019BBF8);
  uint64_t v123 = sub_100006560(&qword_10019BC30);
  sub_1000066D4(v120, v122 + *(int *)(v123 + 48), &qword_10019BBE0);
  v121((char *)(v122 + *(int *)(v123 + 64)), v114, v118);
  uint64_t v124 = *(void (**)(char *, uint64_t))(v116 + 8);
  v124(v117, v118);
  sub_1000067DC(v166, &qword_10019BBE0);
  sub_1000067DC(v165, &qword_10019BBF8);
  v124(v114, v118);
  sub_1000067DC(v167, &qword_10019BBE0);
  return sub_1000067DC(v119, &qword_10019BBF8);
}

uint64_t sub_1000892F0()
{
  return Marker.init<A>(_:systemImage:coordinate:)();
}

uint64_t sub_100089380(long long *a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = a1[5];
  long long v28 = a1[4];
  long long v29 = v13;
  uint64_t v30 = *((void *)a1 + 12);
  long long v14 = a1[1];
  long long v24 = *a1;
  long long v25 = v14;
  long long v15 = a1[3];
  long long v26 = a1[2];
  long long v27 = v15;
  sub_100097C34();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return sub_1000067DC((uint64_t)v8, &qword_100198630);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  type metadata accessor for LocationModule();
  sub_10001D160((uint64_t)v5);
  OpenURLAction.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v17 = *((void *)a1 + 13);
  uint64_t v23 = *((void *)a1 + 12);
  long long v18 = a1[5];
  v22[4] = a1[4];
  v22[5] = v18;
  long long v19 = a1[1];
  v22[0] = *a1;
  v22[1] = v19;
  long long v20 = a1[2];
  v22[3] = a1[3];
  void v22[2] = v20;
  if (v17)
  {
    uint64_t v21 = swift_retain();
    sub_100097F04(v21);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_100089BC4((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

double sub_100089688@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_100089770((uint64_t)v8);
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[23] = v8[1];
  *(_OWORD *)&v10[119] = v8[7];
  v10[135] = v9;
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[7] = v8[0];
  long long v3 = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v10[80];
  long long v4 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v4;
  long long v5 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  long long v7 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 81) = v3;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0x4022000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 145) = *(void *)&v10[128];
  *(_OWORD *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_100089770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = Image.init(systemName:)();
  char v24 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  if (qword_1001980B8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001AA360;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = swift_getKeyPath();
  *(void *)a1 = v25;
  *(unsigned char *)(a1 + 8) = v24;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = KeyPath;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v21;
  *(unsigned char *)(a1 + 128) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100010924(v14, v16, v20);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v14, v16, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000899A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100089A0C()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationModule() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100089B54()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationModule() - 8);
  uint64_t v2 = (long long *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_100089380(v2);
}

double sub_100089BB4@<D0>(uint64_t a1@<X8>)
{
  return sub_100089688(a1);
}

uint64_t sub_100089BC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100089C0C()
{
  return sub_1000892F0();
}

unint64_t sub_100089C28()
{
  unint64_t result = qword_10019BC38;
  if (!qword_10019BC38)
  {
    sub_10000650C(&qword_10019BB58);
    sub_100089CC8();
    sub_100010484(&qword_10019BC50, &qword_10019BB60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BC38);
  }
  return result;
}

unint64_t sub_100089CC8()
{
  unint64_t result = qword_10019BC40;
  if (!qword_10019BC40)
  {
    sub_10000650C(&qword_10019BB48);
    sub_100010484(&qword_10019BC48, &qword_10019BB40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BC40);
  }
  return result;
}

uint64_t *sub_100089D68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_retain();
    uint64_t v9 = sub_100006560(&qword_10019BC58);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_100089E34(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100006560(&qword_10019BC58);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100089EB0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_retain();
  uint64_t v7 = sub_100006560(&qword_10019BC58);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_100089F34(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100006560(&qword_10019BC58);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100089FCC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100006560(&qword_10019BC58);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10008A04C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100006560(&qword_10019BC58);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_10008A0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A0F0);
}

uint64_t sub_10008A0F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_10019BC58);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10008A1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A1B8);
}

void *sub_10008A1B8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_10019BC58);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CircularProgressViewStyle()
{
  uint64_t result = qword_10019BCB8;
  if (!qword_10019BCB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10008A2B0()
{
  sub_10008A34C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10008A34C()
{
  if (!qword_10019BCC8)
  {
    sub_100023FD8();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019BCC8);
    }
  }
}

uint64_t sub_10008A3A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008A3C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100006560(&qword_10019BCF8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for LayoutDirection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008A660(v2, (uint64_t)v23);
  long long v37 = v23[12];
  long long v38 = v23[13];
  char v39 = v24;
  long long v33 = v23[8];
  long long v34 = v23[9];
  long long v35 = v23[10];
  long long v36 = v23[11];
  long long v29 = v23[4];
  long long v30 = v23[5];
  long long v31 = v23[6];
  long long v32 = v23[7];
  long long v25 = v23[0];
  long long v26 = v23[1];
  long long v27 = v23[2];
  long long v28 = v23[3];
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for LayoutDirection.leftToRight(_:), v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v7 + *(int *)(v5 + 36), v11, v8);
  uint64_t *v7 = KeyPath;
  uint64_t v13 = sub_100006560(&qword_10019BD00);
  sub_10008AB20((uint64_t)v7, a1 + *(int *)(v13 + 36));
  long long v14 = v38;
  *(_OWORD *)(a1 + 192) = v37;
  *(_OWORD *)(a1 + 208) = v14;
  *(unsigned char *)(a1 + 224) = v39;
  long long v15 = v34;
  *(_OWORD *)(a1 + 128) = v33;
  *(_OWORD *)(a1 + 144) = v15;
  long long v16 = v36;
  *(_OWORD *)(a1 + 160) = v35;
  *(_OWORD *)(a1 + 176) = v16;
  long long v17 = v30;
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = v32;
  *(_OWORD *)(a1 + 96) = v31;
  *(_OWORD *)(a1 + 112) = v18;
  long long v19 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v19;
  long long v20 = v28;
  *(_OWORD *)(a1 + 32) = v27;
  *(_OWORD *)(a1 + 48) = v20;
  sub_10008AC5C((uint64_t)&v25, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10008AB88);
  sub_10008ABFC((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return sub_10008AC5C((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10008ACE0);
}

__n128 sub_10008A660@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = ProgressViewStyleConfiguration.fractionCompleted.getter();
  if (v5)
  {
    sub_10008AD54((uint64_t)v32);
  }
  else
  {
    double v6 = *(double *)&v4;
    uint64_t v7 = static Alignment.center.getter();
    uint64_t v9 = v8;
    sub_10008A89C(a1, (uint64_t)v28, v6);
    type metadata accessor for CircularProgressViewStyle();
    sub_100006560(&qword_10019BC58);
    ScaledMetric.wrappedValue.getter();
    char v10 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    char v30 = 0;
    static UnitPoint.center.getter();
    v32[0] = v7;
    v32[1] = v9;
    long long v39 = v28[6];
    long long v40 = v28[7];
    uint64_t v41 = v29;
    long long v35 = v28[2];
    long long v36 = v28[3];
    long long v37 = v28[4];
    long long v38 = v28[5];
    long long v33 = v28[0];
    long long v34 = v28[1];
    char v42 = v10;
    uint64_t v43 = v12;
    uint64_t v44 = v14;
    uint64_t v45 = v16;
    uint64_t v46 = v18;
    char v47 = v30;
    unint64_t v48 = 0xBFF921FB54442D18;
    uint64_t v49 = v19;
    uint64_t v50 = v20;
    sub_10008AEE4((uint64_t)v32);
  }
  sub_10008AD60((uint64_t)v32, (uint64_t)v31);
  sub_100006560(&qword_10019BD10);
  sub_10008ADC8();
  _ConditionalContent<>.init(storage:)();
  long long v21 = v64;
  *(_OWORD *)(a2 + 192) = v63;
  *(_OWORD *)(a2 + 208) = v21;
  *(unsigned char *)(a2 + 224) = v65;
  long long v22 = v60;
  *(_OWORD *)(a2 + 128) = v59;
  *(_OWORD *)(a2 + 144) = v22;
  long long v23 = v62;
  *(_OWORD *)(a2 + 160) = v61;
  *(_OWORD *)(a2 + 176) = v23;
  long long v24 = v56;
  *(_OWORD *)(a2 + 64) = v55;
  *(_OWORD *)(a2 + 80) = v24;
  long long v25 = v58;
  *(_OWORD *)(a2 + 96) = v57;
  *(_OWORD *)(a2 + 112) = v25;
  long long v26 = v52;
  *(_OWORD *)a2 = v51;
  *(_OWORD *)(a2 + 16) = v26;
  __n128 result = v54;
  *(_OWORD *)(a2 + 32) = v53;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_10008A89C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6 = static HierarchicalShapeStyle.primary.getter();
  type metadata accessor for CircularProgressViewStyle();
  sub_100006560(&qword_10019BC58);
  ScaledMetric.wrappedValue.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  uint64_t v10 = *a1;
  uint64_t v11 = Color.opacity(_:)();
  ScaledMetric.wrappedValue.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v17;
  *(_DWORD *)(a2 + 40) = v6;
  *(_WORD *)(a2 + 44) = 256;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v11;
  *(void *)(a2 + 72) = 0;
  *(double *)(a2 + 80) = a3;
  *(void *)(a2 + 88) = v18;
  *(void *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v20;
  *(void *)(a2 + 112) = v21;
  *(void *)(a2 + 120) = v22;
  *(void *)(a2 + 128) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008AA2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LayoutDirection();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_10008AAF8()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10008AB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019BCF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008AB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10008ABFC(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019BCF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008AC5C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4);
  return a1;
}

uint64_t sub_10008ACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10008AD54(uint64_t result)
{
  *(unsigned char *)(result + 224) = 1;
  return result;
}

uint64_t sub_10008AD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019BD08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008ADC8()
{
  unint64_t result = qword_10019BD18;
  if (!qword_10019BD18)
  {
    sub_10000650C(&qword_10019BD10);
    sub_10008AE44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD18);
  }
  return result;
}

unint64_t sub_10008AE44()
{
  unint64_t result = qword_10019BD20;
  if (!qword_10019BD20)
  {
    sub_10000650C(&qword_10019BD28);
    sub_100010484(&qword_10019BD30, &qword_10019BD38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD20);
  }
  return result;
}

uint64_t sub_10008AEE4(uint64_t result)
{
  *(unsigned char *)(result + 224) = 0;
  return result;
}

unint64_t sub_10008AEF0()
{
  unint64_t result = qword_10019BD40;
  if (!qword_10019BD40)
  {
    sub_10000650C(&qword_10019BD00);
    sub_10008AF90();
    sub_100010484(&qword_10019BD88, &qword_10019BCF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD40);
  }
  return result;
}

unint64_t sub_10008AF90()
{
  unint64_t result = qword_10019BD48;
  if (!qword_10019BD48)
  {
    sub_10000650C(&qword_10019BD50);
    sub_10008B030();
    sub_100010484(&qword_10019BD78, &qword_10019BD80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD48);
  }
  return result;
}

unint64_t sub_10008B030()
{
  unint64_t result = qword_10019BD58;
  if (!qword_10019BD58)
  {
    sub_10000650C(&qword_10019BD60);
    sub_10008B0A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD58);
  }
  return result;
}

unint64_t sub_10008B0A4()
{
  unint64_t result = qword_10019BD68;
  if (!qword_10019BD68)
  {
    sub_10000650C(&qword_10019BD70);
    sub_10008ADC8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD68);
  }
  return result;
}

unint64_t sub_10008B124()
{
  unint64_t result = qword_10019BD90;
  if (!qword_10019BD90)
  {
    type metadata accessor for Artist();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BD90);
  }
  return result;
}

unint64_t sub_10008B180()
{
  unint64_t result = qword_10019A5D8;
  if (!qword_10019A5D8)
  {
    sub_10000650C(&qword_10019A5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019A5D8);
  }
  return result;
}

uint64_t sub_10008B1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosDefaultView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosDefaultView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosDefaultView()
{
  return &type metadata for TourPhotosDefaultView;
}

uint64_t sub_10008B378()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008B394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = static Alignment.bottom.getter();
  uint64_t v48 = v5;
  uint64_t v49 = v4;
  sub_10008B5F0((uint64_t)&v51);
  uint64_t v6 = v53;
  uint64_t v7 = v54;
  char v8 = v56;
  uint64_t v46 = v57;
  uint64_t v47 = v55;
  char v9 = v58;
  uint64_t v44 = v60;
  uint64_t v45 = v59;
  long long v42 = v51;
  long long v43 = v52;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  char v10 = BYTE8(v51);
  uint64_t v37 = v52;
  uint64_t v38 = v51;
  char v11 = BYTE8(v52);
  uint64_t v35 = v54;
  uint64_t v36 = v53;
  uint64_t v12 = static Alignment.center.getter();
  uint64_t v40 = v13;
  uint64_t v41 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v33 = v15;
  uint64_t v34 = v14;
  char v17 = v16;
  uint64_t v32 = v18;
  uint64_t v19 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  char v31 = static Edge.Set.bottom.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a3 = v49;
  *(void *)(a3 + 8) = v48;
  *(_OWORD *)(a3 + 16) = v42;
  *(_OWORD *)(a3 + 32) = v43;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = v7;
  *(void *)(a3 + 64) = v47;
  *(unsigned char *)(a3 + 72) = v8;
  *(void *)(a3 + 80) = v46;
  *(unsigned char *)(a3 + 88) = v9;
  *(void *)(a3 + 96) = v45;
  *(void *)(a3 + 104) = v44;
  *(void *)(a3 + 112) = v38;
  *(unsigned char *)(a3 + 120) = v10;
  *(void *)(a3 + 128) = v37;
  *(unsigned char *)(a3 + 136) = v11;
  *(void *)(a3 + 144) = v36;
  *(void *)(a3 + 152) = v35;
  *(void *)(a3 + 160) = v34;
  *(void *)(a3 + 168) = v33;
  *(unsigned char *)(a3 + 176) = v17 & 1;
  *(void *)(a3 + 184) = v32;
  *(void *)(a3 + 192) = v19;
  *(void *)(a3 + 200) = v21;
  *(unsigned char *)(a3 + 208) = v23 & 1;
  *(void *)(a3 + 216) = v25;
  *(void *)(a3 + 224) = a1;
  *(void *)(a3 + 232) = a2;
  *(void *)(a3 + 240) = v41;
  *(void *)(a3 + 248) = v40;
  *(unsigned char *)(a3 + 256) = v31;
  *(void *)(a3 + 264) = v27;
  *(void *)(a3 + 272) = v28;
  *(void *)(a3 + 280) = v29;
  *(void *)(a3 + 288) = v30;
  *(unsigned char *)(a3 + 296) = 0;
  return result;
}

double sub_10008B5F0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, void, __n128))(v5 + 104))((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Color.RGBColorSpace.sRGB(_:), v3);
  uint64_t v6 = Color.init(_:red:green:blue:opacity:)();
  sub_100006560(&qword_100199118);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10014CCD0;
  *(void *)(v7 + 32) = static Color.clear.getter();
  static Color.white.getter();
  uint64_t v8 = Color.opacity(_:)();
  swift_release();
  *(void *)(v7 + 40) = v8;
  uint64_t v22 = v7;
  specialized Array._endMutation()();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  Gradient.init(colors:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v9 = v18;
  long long v17 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  char v15 = v25;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v15;
  double result = *(double *)&v26;
  *(_OWORD *)(a1 + 80) = v26;
  return result;
}

uint64_t sub_10008B808@<X0>(uint64_t a1@<X8>)
{
  return sub_10008B394(*v1, v1[1], a1);
}

unint64_t sub_10008B818()
{
  unint64_t result = qword_10019BDD0;
  if (!qword_10019BDD0)
  {
    sub_10000650C(&qword_10019BDD8);
    sub_10008B894();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BDD0);
  }
  return result;
}

unint64_t sub_10008B894()
{
  unint64_t result = qword_10019BDE0;
  if (!qword_10019BDE0)
  {
    sub_10000650C(&qword_10019BDE8);
    sub_10008B934();
    sub_100010484(&qword_10019BE10, &qword_10019BE18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BDE0);
  }
  return result;
}

unint64_t sub_10008B934()
{
  unint64_t result = qword_10019BDF0;
  if (!qword_10019BDF0)
  {
    sub_10000650C(&qword_10019BDF8);
    sub_100010484(&qword_10019BE00, &qword_10019BE08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019BDF0);
  }
  return result;
}

uint64_t sub_10008B9D8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10008BB2C(&qword_10019BE20, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
  uint64_t result = sub_10008BB2C(&qword_10019BE28, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10008BA5C()
{
  return sub_10008BB2C(&qword_10019BE30, (void (*)(uint64_t))&type metadata accessor for Setlist.Song);
}

uint64_t sub_10008BAA8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10008BB2C(&qword_10019BE70, (void (*)(uint64_t))&type metadata accessor for Setlist);
  uint64_t result = sub_10008BB2C(&qword_10019BE78, (void (*)(uint64_t))&type metadata accessor for Setlist);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10008BB2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008BB74()
{
  return sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
}

unint64_t sub_10008BBB4()
{
  unint64_t result = qword_10019B788;
  if (!qword_10019B788)
  {
    type metadata accessor for PromotionalAssets();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019B788);
  }
  return result;
}

uint64_t sub_10008BC0C()
{
  return sub_100010484(&qword_10019ACE8, &qword_10019AC90);
}

uint64_t sub_10008BC50()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008BD04()
{
  sub_10008C2DC();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10008BD2C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008BDDC()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10008BE70()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t sub_10008BF3C()
{
  swift_getKeyPath();
  sub_10008BDDC();
  swift_release();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_10008BFB0()
{
  return swift_release();
}

uint64_t sub_10008C05C()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

BOOL sub_10008C0C0()
{
  sub_10008C2DC();
  swift_bridgeObjectRetain();
  uint64_t v0 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v0 > 1;
}

BOOL sub_10008C124()
{
  sub_10008C2DC();
  swift_bridgeObjectRetain();
  uint64_t v0 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v0 == 1;
}

uint64_t sub_10008C188(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = swift_allocObject();
  ObservationRegistrar.init()();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 40) = a4;
  return v8;
}

uint64_t sub_10008C1F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10019BED0;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10008C26C()
{
  sub_10008C1F8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeaturedVideosViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_10008C2DC()
{
  swift_getKeyPath();
  sub_10008BDDC();
  swift_release();
  return *(void *)(v0 + 32);
}

uint64_t sub_10008C350@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_10008C2DC();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10008C38C()
{
  return sub_10008BD2C();
}

uint64_t sub_10008C3B8()
{
  return 16;
}

__n128 sub_10008C3C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10008C3D0()
{
  *(void *)(*(void *)(v0 + 16) + 32) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008C40C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10008BF3C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10008C43C()
{
  return sub_10008BFB0();
}

uint64_t sub_10008C464()
{
  return 16;
}

__n128 sub_10008C470(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10008C47C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 40) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10008C48C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10008C504()
{
  return sub_10008C52C();
}

uint64_t sub_10008C518()
{
  return sub_10008C52C();
}

uint64_t sub_10008C52C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008C598(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  sub_100006560(&qword_10019A2F8);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for EventsError();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  sub_100006560(&qword_10019AC88);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for MainActor();
  v3[20] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[21] = v7;
  v3[22] = v6;
  return _swift_task_switch(sub_10008C770, v7, v6);
}

uint64_t sub_10008C770()
{
  sub_10008D27C();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008C814;
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  return static Artist.schedule(id:)(v2, v3, v4);
}

uint64_t sub_10008C814()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  uint64_t v4 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v5 = sub_10008CAA0;
  }
  else {
    uint64_t v5 = sub_10008C950;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10008C950()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  swift_release();
  uint64_t v3 = sub_100006560(&qword_10019AC90);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10008DA48(v2, v1);
  swift_retain();
  static Published.subscript.setter();
  sub_1000067DC(v2, &qword_10019AC88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10008CAA0()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 192);
  swift_errorRetain();
  sub_100006560(&qword_100199670);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 120) + 88))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    *(_DWORD *)(v0 + 224) = v1;
    if (v1 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease();
      *(void *)(v0 + 200) = static MainActor.shared.getter();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 208) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10008CCC8;
      uint64_t v3 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t v5 = *(void *)(v0 + 56);
      return sub_10012A6B0(v3, v4, v5);
    }
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 112);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = *(void *)(v0 + 192);
  swift_errorRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 24) = v10;
  swift_retain();
  static Published.subscript.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10008CCC8()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_10008D09C;
  }
  else {
    uint64_t v4 = sub_10008CE24;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_10008CE24()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_10008CE88, v1, v2);
}

uint64_t sub_10008CE88()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(unsigned int *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    sub_1000067DC(*(void *)(v0 + 72), &qword_10019A2F8);
    sub_10008DAB8();
    uint64_t v7 = swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v8, v4, v5);
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 32) = v7;
    swift_retain();
    static Published.subscript.setter();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    sub_10008DB10(*(void *)(v0 + 72), v9);
    sub_10008DB74(v9, v10);
    sub_100006560(&qword_10019C068);
    swift_allocObject();
    uint64_t v11 = sub_10006E4B0(v10, (uint64_t)&_swiftEmptyArrayStorage);
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)(v0 + 40) = v11;
    swift_retain();
    static Published.subscript.setter();
    sub_10008DBE0(v9);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10008D09C()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  return _swift_task_switch(sub_10008D10C, v1, v2);
}

uint64_t sub_10008D10C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = *(unsigned int *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  sub_1000067DC(*(void *)(v0 + 72), &qword_10019A2F8);
  sub_10008DAB8();
  uint64_t v7 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v8, v4, v5);
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 32) = v7;
  swift_retain();
  static Published.subscript.setter();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10008D27C()
{
  uint64_t v0 = sub_100006560(&qword_10019AC88);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v6 = sub_100006560(&qword_10019AC90);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10008DA48((uint64_t)v5, (uint64_t)v2);
  swift_retain();
  static Published.subscript.setter();
  sub_1000067DC((uint64_t)v5, &qword_10019AC88);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v9 = 0;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v9 = 0;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_10008D434()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__schedule;
  uint64_t v2 = sub_100006560(&qword_10019C048);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__error;
  uint64_t v4 = sub_100006560(&qword_10019B760);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__emptyScheduleViewModel;
  uint64_t v6 = sub_100006560(&qword_10019C050);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_10008D568()
{
  return type metadata accessor for ArtistController();
}

uint64_t type metadata accessor for ArtistController()
{
  uint64_t result = qword_10019BF98;
  if (!qword_10019BF98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10008D5BC()
{
  sub_10008324C(319, &qword_10019BFA8, &qword_10019AC88);
  if (v0 <= 0x3F)
  {
    sub_10008324C(319, &qword_10019B6C8, (uint64_t *)&unk_10019B6D0);
    if (v1 <= 0x3F)
    {
      sub_10008324C(319, &qword_10019BFB0, (uint64_t *)&unk_10019BFB8);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_10008D6F0()
{
  uint64_t v1 = sub_100006560(&qword_10019C050);
  uint64_t v25 = *(void *)(v1 - 8);
  uint64_t v26 = v1;
  __chkstk_darwin(v1);
  uint64_t v24 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100006560(&qword_10019B760);
  uint64_t v3 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019C048);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019AC88);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v15 = (char *)&v22 - v14;
  uint64_t v16 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__schedule;
  uint64_t v17 = sub_100006560(&qword_10019AC90);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  sub_10008DA48((uint64_t)v15, (uint64_t)v13);
  Published.init(initialValue:)();
  sub_1000067DC((uint64_t)v15, &qword_10019AC88);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  uint64_t v18 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__error;
  uint64_t v27 = 0;
  sub_100006560((uint64_t *)&unk_10019B6D0);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v18, v5, v23);
  uint64_t v19 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__emptyScheduleViewModel;
  uint64_t v27 = 0;
  sub_100006560((uint64_t *)&unk_10019BFB8);
  uint64_t v20 = v24;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v19, v20, v26);
  return v0;
}

uint64_t sub_10008DA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_10019AC88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10008DAB8()
{
  unint64_t result = qword_10019C060;
  if (!qword_10019C060)
  {
    type metadata accessor for EventsError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C060);
  }
  return result;
}

uint64_t sub_10008DB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008DB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008DBE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppleMusicFetcher.MusicArtist();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10008DC44()
{
  sub_100029828(319, &qword_100199218);
  if (v0 <= 0x3F)
  {
    sub_100029828(319, (unint64_t *)&qword_100199208);
    if (v1 <= 0x3F)
    {
      sub_100091240(319, &qword_10019C128, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v2 <= 0x3F)
      {
        sub_100029828(319, &qword_10019C130);
        if (v3 <= 0x3F)
        {
          swift_checkMetadataState();
          if (v4 <= 0x3F)
          {
            sub_100091240(319, (unint64_t *)&qword_10019C138, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v5 <= 0x3F) {
              swift_initClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10008DEAC(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100090658(a1);
  return v2;
}

BOOL sub_10008DEEC()
{
  uint64_t v1 = type metadata accessor for UserInterfaceSizeClass();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_1001989F0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = v0 + *(void *)(*(void *)v0 + 176);
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v14, enum case for UserInterfaceSizeClass.compact(_:), v1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v14, 0, 1, v1);
  uint64_t v16 = (uint64_t)&v8[*(int *)(v6 + 56)];
  sub_100091660(v15, (uint64_t)v8);
  sub_100091660((uint64_t)v14, v16);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v17((uint64_t)v8, 1, v1) == 1)
  {
    sub_1000067DC((uint64_t)v14, &qword_100198948);
    if (v17(v16, 1, v1) == 1)
    {
      sub_1000067DC((uint64_t)v8, &qword_100198948);
      return 0;
    }
    goto LABEL_6;
  }
  sub_100091660((uint64_t)v8, (uint64_t)v11);
  if (v17(v16, 1, v1) == 1)
  {
    sub_1000067DC((uint64_t)v14, &qword_100198948);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);
LABEL_6:
    sub_1000067DC((uint64_t)v8, &qword_1001989F0);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v16, v1);
  sub_1000916C8();
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v4, v1);
  sub_1000067DC((uint64_t)v14, &qword_100198948);
  v19(v11, v1);
  sub_1000067DC((uint64_t)v8, &qword_100198948);
  if (v18) {
    return 0;
  }
LABEL_9:
  id v21 = [self currentDevice];
  id v22 = [v21 userInterfaceIdiom];

  return v22 == 0;
}

uint64_t sub_10008E2A0@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - v5;
  sub_10009042C();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_getAssociatedConformanceWitness();
    uint64_t v8 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v6, AssociatedTypeWitness);
  }
}

double sub_10008E540()
{
  return sub_10008E57C();
}

uint64_t sub_10008E554()
{
  return sub_10008E644();
}

double sub_10008E568()
{
  return sub_10008E57C();
}

double sub_10008E57C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008E630()
{
  return sub_10008E644();
}

uint64_t sub_10008E644()
{
  return static Published.subscript.setter();
}

double sub_10008E6FC()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  double result = sub_100090378() * 0.5;
  double v4 = v3 * 0.85;
  if (!v1) {
    return v4;
  }
  return result;
}

uint64_t sub_10008E77C()
{
  return sub_10008FB24();
}

uint64_t sub_10008E790()
{
  return sub_10008FBEC();
}

double sub_10008E7A4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_10008E85C(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10008E7A4();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_10008E88C()
{
  return sub_10008E8B8();
}

uint64_t sub_10008E8B8()
{
  return static Published.subscript.setter();
}

uint64_t sub_10008E988()
{
  return sub_10008FBEC();
}

uint64_t sub_10008E9B4()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 184))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10008EA2C()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 152))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10008EAA4()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 168))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10008EB1C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - v10;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v17[2] = (char *)v0 + *(void *)(v1 + 160);
  char v18 = v12;
  ((void (*)(uint64_t, uint64_t, __n128))v12)(v3, v2, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17[1] = v5 + 8;
  v14(v11, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17[0] = Set.count.getter();
  swift_bridgeObjectRelease();
  v18(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14(v7, AssociatedTypeWitness);
  uint64_t v15 = Set.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v17[0], v15)) {
    return v17[0] + v15 > 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008EDCC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v6 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = (uint64_t)v0 + *(void *)(v1 + 160);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, __n128))(v2 + 208);
  uint64_t v20 = v9;
  uint64_t v18 = v3;
  v19(v3, v2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v16 = v5 + 8;
  uint64_t v17 = v12;
  v12(v8, AssociatedTypeWitness);
  uint64_t v21 = v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  ((void (*)(uint64_t, uint64_t))v19)(v18, v2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v17(v8, AssociatedTypeWitness);
  uint64_t v21 = v13;
  Array.init<A>(_:)();
  uint64_t v14 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_10008F09C()
{
  if (!*(void *)(v0 + 40) || !*(void *)(v0 + 24)) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100006560(&qword_10019B478);
  type metadata accessor for URLQueryItem();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10014CCD0;
  uint64_t v2 = qword_100198150;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  if (qword_100198158 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (void *)v1;
}

uint64_t sub_10008F258()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 176))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10008F2D0()
{
  if (sub_10008DEEC())
  {
    return Edge.Set.init(_:)(2);
  }
  else
  {
    unsigned __int8 v0 = static Edge.Set.all.getter();
    uint64_t v1 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() == v0)
    {
      return v1;
    }
    else
    {
      return Edge.Set.init(rawValue:)();
    }
  }
}

uint64_t sub_10008F364()
{
  swift_getKeyPath();
  swift_getKeyPath();
  unsigned __int8 v0 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  *uint64_t v1 = !*v1;
  v0(v3, 0);
  swift_release();
  return swift_release();
}

void sub_10008F440(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  sub_100006560(&qword_100199238);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10014D8E0;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)v5 + 88) + 152))(*(void *)(*(void *)v5 + 80));
  *(void *)(v11 + 56) = &type metadata for AnalyticsString;
  *(void *)(v11 + 64) = &off_10019BA08;
  *(unsigned char *)(v11 + 32) = 0;
  *(void *)(v11 + 40) = v12;
  *(void *)(v11 + 48) = v13;
  *(void *)(v11 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v11 + 104) = &off_10019B9E0;
  *(unsigned char *)(v11 + 72) = 0;
  *(void *)(v11 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v11 + 144) = &off_10019BA68;
  *(unsigned char *)(v11 + 112) = a1;
  *(void *)(v11 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v11 + 184) = &off_10019BA40;
  *(void *)(v11 + 152) = a2;
  *(void *)(v11 + 160) = a3;
  *(unsigned char *)(v11 + 168) = a4;
  if (*(void *)(a5 + 72))
  {
    uint64_t v14 = *(void *)(a5 + 64);
    unint64_t v15 = *(void *)(a5 + 72);
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  char v31 = &type metadata for AnalyticsString;
  uint64_t v32 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v29 = v14;
  uint64_t v30 = (Class (*)(uint64_t))v15;
  sub_1000298CC(a2, a3, a4);
  uint64_t v34 = (char *)v11;
  unint64_t v16 = *(void *)(v11 + 16);
  unint64_t v17 = *(void *)(v11 + 24);
  swift_bridgeObjectRetain();
  if (v16 >= v17 >> 1) {
    uint64_t v34 = sub_1000AB884((char *)(v17 > 1), v16 + 1, 1, (char *)v11);
  }
  uint64_t v18 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
  sub_1000AC33C(v16, (uint64_t)v21, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v23 = v34;
  NSString v24 = String._bridgeToObjectiveC()();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0xD00000000000001ELL;
  v25[3] = 0x8000000100157480;
  v25[4] = v23;
  uint64_t v32 = sub_1000912EC;
  uint64_t v33 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  uint64_t v30 = sub_1000AB7F8;
  char v31 = (ValueMetadata *)&unk_10018FE48;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v26);
  swift_bridgeObjectRelease();
}

uint64_t sub_10008F794()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - v6;
  sub_10009042C();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(v2, v1);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  }
  return v9;
}

uint64_t sub_10008FA00()
{
  return static Published.subscript.setter();
}

uint64_t sub_10008FABC()
{
  return sub_10008FB24();
}

uint64_t sub_10008FAD0()
{
  return sub_10008FBEC();
}

uint64_t sub_10008FAE4()
{
  return sub_10008FBEC();
}

uint64_t sub_10008FB10()
{
  return sub_10008FB24();
}

uint64_t sub_10008FB24()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008FBD8()
{
  return sub_10008FBEC();
}

uint64_t sub_10008FBEC()
{
  return static Published.subscript.setter();
}

uint64_t sub_10008FCA4(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(*(void *)v1 + 88) + 152))(*(void *)(*(void *)v1 + 80));
  sub_1000AC7F8(v3, v4, 0, a1);

  return swift_bridgeObjectRelease();
}

BOOL sub_10008FD44()
{
  BOOL v0 = sub_10008DEEC();
  double v1 = -sub_10008E540();
  double v2 = sub_10008E568();
  double v3 = 0.4;
  if (v0) {
    double v3 = 0.75;
  }
  return v2 * v3 < v1;
}

uint64_t sub_10008FD9C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - v3;
  sub_10009042C();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v4, AssociatedTypeWitness);
  }
  return v6;
}

uint64_t sub_10008FFCC()
{
  v1[8] = v0;
  v1[9] = *v0;
  type metadata accessor for MainActor();
  v1[10] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[11] = v3;
  v1[12] = v2;
  return _swift_task_switch(sub_10009008C, v3, v2);
}

uint64_t sub_10009008C()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = [self bundleForClass:ObjCClassFromMetadata];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10019E5A0 + dword_10019E5A0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  void *v7 = v0;
  v7[1] = sub_1000901BC;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_1000901BC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1000902DC, v3, v2);
}

uint64_t sub_1000902DC()
{
  uint64_t v1 = *(_OWORD **)(v0 + 64);
  swift_release();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v2 = *(_OWORD *)(v0 + 48);
  v1[1] = *(_OWORD *)(v0 + 16);
  v1[2] = v3;
  v1[3] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

double sub_100090378()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10009042C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v5 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)v11 - v6;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 208))(v2, v1, v5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  v11[1] = v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  return swift_bridgeObjectRelease();
}

char *sub_100090658(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v59 = *(void *)(*(void *)v1 + 88);
  uint64_t v60 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  char v65 = (char *)&v51 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = swift_getAssociatedTypeWitness();
  uint64_t v52 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v66 = (char *)&v51 - v5;
  uint64_t v6 = sub_100006560(&qword_10019C140);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  __chkstk_darwin(v6);
  char v58 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019C148);
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_100199220);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_100199230);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  uint64_t v18 = &v1[qword_10019C070];
  *(void *)&long long v69 = 0;
  Published.init(initialValue:)();
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v53(v18, v17, v14);
  __n128 v19 = &v2[qword_10019C078];
  LOBYTE(v69) = 0;
  Published.init(initialValue:)();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v19, v13, v10);
  uint64_t v21 = &v2[qword_10019C080];
  LOBYTE(v69) = 0;
  Published.init(initialValue:)();
  v20(v21, v13, v10);
  uint64_t v22 = &v2[qword_10019C088];
  LOBYTE(v69) = 0;
  uint64_t v23 = v59;
  Published.init(initialValue:)();
  NSString v24 = v13;
  uint64_t v25 = v57;
  v20(v22, v24, v10);
  uint64_t v26 = v60;
  uint64_t v27 = &v2[qword_10019C090];
  *(void *)&long long v69 = 0;
  Published.init(initialValue:)();
  uint64_t v28 = v68;
  v53(v27, v17, v14);
  uint64_t v29 = &v2[qword_10019C098];
  type metadata accessor for CGSize(0);
  long long v69 = 0uLL;
  uint64_t v30 = v54;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v29, v30, v56);
  char v31 = &v2[qword_10019C0A0];
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v32 = v58;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v31, v32, v62);
  uint64_t v33 = &v2[*(void *)(*(void *)v2 + 176)];
  uint64_t v34 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(&v2[*(void *)(*(void *)v2 + 160)], v28, v26);
  uint64_t v36 = v65;
  (*(void (**)(uint64_t, uint64_t))(v23 + 208))(v26, v23);
  uint64_t v37 = AssociatedTypeWitness;
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v37);
  *(void *)&long long v69 = v38;
  uint64_t v39 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  uint64_t v40 = v66;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void *)(v25 - 8);
  int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v25);
  if (v42 == 1)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 152))(v26, v23);
    uint64_t v45 = v46;
  }
  else
  {
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 40))(v25, v39);
    uint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v25);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v49 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 1, 1, v49);
  *(void *)(v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(void *)(v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v47 + 16) = v43;
  *(void *)(v47 + 24) = v45;
  *(unsigned char *)(v47 + 32) = v42 != 1;
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v68, v26);
  *(void *)&v2[*(void *)(*(void *)v2 + 168)] = v47;
  return v2;
}

uint64_t *sub_100090F5C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + qword_10019C070;
  uint64_t v3 = sub_100006560(&qword_100199230);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  uint64_t v5 = (uint64_t)v0 + qword_10019C078;
  uint64_t v6 = sub_100006560(&qword_100199220);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7((uint64_t)v0 + qword_10019C080, v6);
  v7((uint64_t)v0 + qword_10019C088, v6);
  v4((uint64_t)v0 + qword_10019C090, v3);
  uint64_t v8 = (uint64_t)v0 + qword_10019C098;
  uint64_t v9 = sub_100006560(&qword_10019C148);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t)v0 + qword_10019C0A0;
  uint64_t v11 = sub_100006560(&qword_10019C140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 160));
  swift_release();
  sub_1000067DC((uint64_t)v0 + *(void *)(*v0 + 176), &qword_100198948);
  return v0;
}

uint64_t sub_1000911D0()
{
  sub_100090F5C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventViewModel()
{
  return sub_1000068A4();
}

void sub_100091240(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_1000912A4(uint64_t a1)
{
  return sub_1000ACD40(*(void *)(a1 + 16));
}

uint64_t sub_1000912AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *sub_1000912EC()
{
  return sub_1000ACD40(*(void *)(v0 + 32));
}

uint64_t sub_1000912F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100091304()
{
  return swift_release();
}

uint64_t sub_10009130C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  for (uint64_t i = v1 + 48; ; i += 24)
  {
    uint64_t v4 = *(void *)(i - 8);
    if (*(unsigned char *)(i - 16) == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return v4;
    }
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v5) {
      break;
    }
    swift_bridgeObjectRelease();
    if (!--v2)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return v4;
}

uint64_t sub_100091408()
{
  sub_100116888();
  if (!v0) {
    goto LABEL_6;
  }
  uint64_t v1 = v0;
  if (!*(void *)(v0 + 16) || (unint64_t v2 = sub_1000A8164(1), (v3 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    char v5 = 1;
    return v5 & 1;
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
  swift_bridgeObjectRelease();
  switch(v4)
  {
    case 3:
      swift_bridgeObjectRelease();
      char v5 = 0;
      break;
    default:
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v5 = v7 ^ 1;
      break;
  }
  return v5 & 1;
}

uint64_t sub_100091528()
{
  return 16;
}

__n128 sub_100091534(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100091548()
{
  return 16;
}

__n128 sub_100091554(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100091568()
{
  return 16;
}

__n128 sub_100091574(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100091580(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_10008E7A4();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_1000915B0()
{
  return sub_10008E8B8();
}

uint64_t sub_1000915DC()
{
  return 16;
}

__n128 sub_1000915E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000915F4(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_100090378();
  *(void *)(a1 + 8) = v2;
}

uint64_t sub_100091620()
{
  return sub_10008FA00();
}

uint64_t sub_100091648()
{
  return 16;
}

__n128 sub_100091654(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100091660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000916C8()
{
  unint64_t result = qword_100198A80;
  if (!qword_100198A80)
  {
    type metadata accessor for UserInterfaceSizeClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100198A80);
  }
  return result;
}

uint64_t sub_100091728()
{
  return 16;
}

__n128 sub_100091734(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100091748()
{
  return 16;
}

__n128 sub_100091754(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100091760()
{
  qword_1001AA3B0 = 0x615020746E657645;
  *(void *)algn_1001AA3B8 = 0xEA00000000006567;
}

void sub_100091788()
{
  qword_1001AA3C0 = 0x5020747369747241;
  *(void *)algn_1001AA3C8 = 0xEB00000000656761;
}

void sub_1000917B4()
{
  qword_1001AA3D0 = 0x61502065756E6556;
  *(void *)algn_1001AA3D8 = 0xEA00000000006567;
}

void sub_1000917DC()
{
  algn_1001AA3E8[5] = 0;
  *(_WORD *)&algn_1001AA3E8[6] = -5120;
}

void sub_100091808()
{
  algn_1001AA3F8[5] = 0;
  *(_WORD *)&algn_1001AA3F8[6] = -5120;
}

void sub_100091834()
{
  algn_1001AA408[7] = -18;
}

uint64_t sub_100091864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventDetailViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  uint64_t v5 = type metadata accessor for EventDetailModule();
  uint64_t v6 = (uint64_t *)(a2 + *(int *)(v5 + 36));
  type metadata accessor for RemoteViewConfiguration();
  sub_100096BF4((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  *uint64_t v6 = EnvironmentObject.init()();
  v6[1] = v7;
  unint64_t v8 = (uint64_t *)(a2 + *(int *)(v5 + 40));
  *unint64_t v8 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for EventDetailModule()
{
  return sub_1000068A4();
}

void sub_1000919A0()
{
  type metadata accessor for EventDetailViewModel();
  if (v0 <= 0x3F)
  {
    sub_10001E48C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_100091A74(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = ((v8 + ((v7 + 8) & ~(unint64_t)v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v10 = type metadata accessor for OpenURLAction();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = (v12 & 0xF8) + 23;
  uint64_t v15 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v15 = *(void *)(v11 + 64);
  }
  int v16 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7 || v16 != 0 || v15 + ((v14 + (v9 & 0xFFFFFFFFFFFFFFF8)) & ~v13) + 1 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (void *)(v19 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_29:
    swift_retain();
    return v20;
  }
  uint64_t v43 = v15;
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v23 = ~v13;
  *uint64_t v22 = *v21;
  unint64_t v24 = ((unint64_t)v22 + v7 + 8) & ~(unint64_t)v7;
  unint64_t v25 = ((unint64_t)v21 + v7 + 8) & ~(unint64_t)v7;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v24, v25, v5);
  unint64_t v26 = (v24 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  unint64_t v28 = (v24 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v25 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
  *(void *)(v28 + 24) = *(void *)(v29 + 24);
  uint64_t v30 = (void *)(((unint64_t)v22 + v9) & 0xFFFFFFFFFFFFFFF8);
  char v31 = (void *)(((unint64_t)v21 + v9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = (void *)(((unint64_t)v30 + v14) & v23);
  uint64_t v33 = (unsigned __int8 *)(((unint64_t)v31 + v14) & v23);
  unsigned int v34 = v33[v43];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v34 < 2)
  {
    uint64_t v36 = v44;
    uint64_t v20 = v22;
LABEL_19:
    if (v34 != 1)
    {
LABEL_28:
      *uint64_t v32 = *(void *)v33;
      *((unsigned char *)v32 + v43) = 0;
      goto LABEL_29;
    }
  }
  else
  {
    if (v43 <= 3) {
      uint64_t v35 = v43;
    }
    else {
      uint64_t v35 = 4;
    }
    uint64_t v36 = v44;
    uint64_t v20 = v22;
    switch(v35)
    {
      case 1:
        int v37 = *v33;
        break;
      case 2:
        int v37 = *(unsigned __int16 *)v33;
        break;
      case 3:
        int v37 = *(unsigned __int16 *)v33 | (v33[2] << 16);
        break;
      case 4:
        int v37 = *(_DWORD *)v33;
        break;
      default:
        goto LABEL_19;
    }
    int v38 = (v37 | ((v34 - 2) << (8 * v43))) + 2;
    int v39 = v37 + 2;
    if (v43 >= 4) {
      int v40 = v39;
    }
    else {
      int v40 = v38;
    }
    if (v40 != 1) {
      goto LABEL_28;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v36 + 16))(v32, v33, v42);
  *((unsigned char *)v32 + v43) = 1;
  return v20;
}

uint64_t sub_100091DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  (*(void (**)(uint64_t))(v3 + 8))((v5 + 8 + a1) & ~v5);
  uint64_t v6 = *(void *)(v4 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  unint64_t v9 = (unsigned __int8 *)((((a1 + ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                          + v8
                          + 16) & ~v8);
  unint64_t v10 = *(void *)(v7 + 64);
  if (v10 <= 8) {
    unint64_t v10 = 8;
  }
  unsigned int v11 = v9[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v9;
        goto LABEL_12;
      case 2:
        int v14 = *(unsigned __int16 *)v9;
        goto LABEL_12;
      case 3:
        int v14 = *(unsigned __int16 *)v9 | (v9[2] << 16);
        goto LABEL_12;
      case 4:
        int v14 = *(_DWORD *)v9;
LABEL_12:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 1)
  {
    int v16 = *(uint64_t (**)(void))(v7 + 8);
    return v16();
  }
  else
  {
    return swift_release();
  }
}

void *sub_100091FE0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48);
  unint64_t v11 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  unint64_t v13 = (v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  unint64_t v15 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  int v16 = (void *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFF8);
  void *v16 = *v17;
  v16[1] = v17[1];
  uint64_t v18 = type metadata accessor for OpenURLAction();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  uint64_t v21 = v20 + 23;
  unint64_t v22 = (unint64_t)v16 + v20 + 23;
  unint64_t v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = v18;
  uint64_t v35 = (void *)(v22 & v23);
  unint64_t v24 = (unsigned __int8 *)(((unint64_t)v17 + v21) & v23);
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v18 - 8) + 64);
  }
  unsigned int v26 = v24[v25];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v26 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *v24;
        goto LABEL_13;
      case 2:
        int v28 = *(unsigned __int16 *)v24;
        goto LABEL_13;
      case 3:
        int v28 = *(unsigned __int16 *)v24 | (v24[2] << 16);
        goto LABEL_13;
      case 4:
        int v28 = *(_DWORD *)v24;
LABEL_13:
        int v29 = (v28 | ((v26 - 2) << (8 * v25))) + 2;
        unsigned int v30 = v28 + 2;
        if (v25 >= 4) {
          unsigned int v26 = v30;
        }
        else {
          unsigned int v26 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v26 == 1)
  {
    char v31 = v35;
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 16))(v35, v24, v34);
    char v32 = 1;
  }
  else
  {
    char v31 = v35;
    *uint64_t v35 = *(void *)v24;
    swift_retain();
    char v32 = 0;
  }
  *((unsigned char *)v31 + v25) = v32;
  return a1;
}

void *sub_100092294(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v14 = (v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v16 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  unint64_t v17 = (void *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  swift_retain();
  swift_release();
  v17[1] = v18[1];
  uint64_t v19 = type metadata accessor for OpenURLAction();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  uint64_t v22 = v21 + 23;
  unint64_t v23 = (unint64_t)v17 + v21 + 23;
  unint64_t v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (unsigned __int8 *)(v23 & v24);
  unint64_t v26 = (unint64_t)v18 + v22;
  uint64_t v27 = (unsigned __int8 *)(v26 & v24);
  if ((v23 & v24) != (v26 & v24))
  {
    uint64_t v28 = v19;
    uint64_t v29 = *(void *)(v19 - 8);
    if (*(void *)(v20 + 64) <= 8uLL) {
      uint64_t v30 = 8;
    }
    else {
      uint64_t v30 = *(void *)(v20 + 64);
    }
    unsigned int v31 = v25[v30];
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *v25;
          goto LABEL_14;
        case 2:
          int v34 = *(unsigned __int16 *)v25;
          goto LABEL_14;
        case 3:
          int v34 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_14;
        case 4:
          int v34 = *(_DWORD *)v25;
LABEL_14:
          int v35 = (v34 | (v32 << (8 * v30))) + 2;
          unsigned int v31 = v34 + 2;
          if (v30 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(v25, v19);
    }
    else {
      swift_release();
    }
    unsigned int v36 = v27[v30];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v30 <= 3) {
        uint64_t v38 = v30;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *v27;
          goto LABEL_28;
        case 2:
          int v39 = *(unsigned __int16 *)v27;
          goto LABEL_28;
        case 3:
          int v39 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_28;
        case 4:
          int v39 = *(_DWORD *)v27;
LABEL_28:
          int v40 = (v39 | (v37 << (8 * v30))) + 2;
          unsigned int v36 = v39 + 2;
          if (v30 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(v25, v27, v28);
      v25[v30] = 1;
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v27;
      v25[v30] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *sub_100092614(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  unint64_t v11 = (v10 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v13;
  unint64_t v14 = (_OWORD *)((v10 + v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (_OWORD *)((v10 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v18 = (_OWORD *)(((unint64_t)a1 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (_OWORD *)(((unint64_t)a2 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  uint64_t v20 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  uint64_t v22 = v21 + 23;
  unint64_t v23 = (unint64_t)v18 + v21 + 23;
  unint64_t v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (void *)(v23 & v24);
  unint64_t v26 = (unsigned __int8 *)(((unint64_t)v19 + v22) & v24);
  if (*(void *)(v20 + 64) <= 8uLL) {
    uint64_t v27 = 8;
  }
  else {
    uint64_t v27 = *(void *)(v20 + 64);
  }
  unsigned int v28 = v26[v27];
  unsigned int v29 = v28 - 2;
  if (v28 >= 2)
  {
    if (v27 <= 3) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *v26;
        goto LABEL_13;
      case 2:
        int v31 = *(unsigned __int16 *)v26;
        goto LABEL_13;
      case 3:
        int v31 = *(unsigned __int16 *)(((unint64_t)v19 + v22) & v24) | (*(unsigned __int8 *)((((unint64_t)v19
                                                                                                 + v22) & v24)
                                                                                               + 2) << 16);
        goto LABEL_13;
      case 4:
        int v31 = *(_DWORD *)v26;
LABEL_13:
        int v32 = (v31 | (v29 << (8 * v27))) + 2;
        unsigned int v28 = v31 + 2;
        if (v27 < 4) {
          unsigned int v28 = v32;
        }
        break;
      default:
        break;
    }
  }
  if (v28 == 1)
  {
    (*(void (**)(void *))(v20 + 32))(v25);
    char v33 = 1;
  }
  else
  {
    char v33 = 0;
    *uint64_t v25 = *(void *)v26;
  }
  *((unsigned char *)v25 + v27) = v33;
  return a1;
}

void *sub_100092858(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + v9;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  unint64_t v15 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRelease();
  unint64_t v17 = ((v10 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  uint64_t v18 = (void *)(((unint64_t)a1 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)a2 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  swift_release();
  v18[1] = v19[1];
  uint64_t v20 = type metadata accessor for OpenURLAction();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  uint64_t v23 = v22 + 23;
  unint64_t v24 = (unint64_t)v18 + v22 + 23;
  unint64_t v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unsigned __int8 *)(v24 & v25);
  unint64_t v27 = (unint64_t)v19 + v23;
  unsigned int v28 = (unsigned __int8 *)(v27 & v25);
  if ((v24 & v25) != (v27 & v25))
  {
    uint64_t v29 = v20;
    uint64_t v30 = *(void *)(v20 - 8);
    if (*(void *)(v21 + 64) <= 8uLL) {
      uint64_t v31 = 8;
    }
    else {
      uint64_t v31 = *(void *)(v21 + 64);
    }
    unsigned int v32 = v26[v31];
    unsigned int v33 = v32 - 2;
    if (v32 >= 2)
    {
      if (v31 <= 3) {
        uint64_t v34 = v31;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v26;
          goto LABEL_14;
        case 2:
          int v35 = *(unsigned __int16 *)v26;
          goto LABEL_14;
        case 3:
          int v35 = *(unsigned __int16 *)v26 | (v26[2] << 16);
          goto LABEL_14;
        case 4:
          int v35 = *(_DWORD *)v26;
LABEL_14:
          int v36 = (v35 | (v33 << (8 * v31))) + 2;
          unsigned int v32 = v35 + 2;
          if (v31 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v32 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(v26, v20);
    }
    else {
      swift_release();
    }
    unsigned int v37 = v28[v31];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v31 <= 3) {
        uint64_t v39 = v31;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v28;
          goto LABEL_28;
        case 2:
          int v40 = *(unsigned __int16 *)v28;
          goto LABEL_28;
        case 3:
          int v40 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          goto LABEL_28;
        case 4:
          int v40 = *(_DWORD *)v28;
LABEL_28:
          int v41 = (v40 | (v38 << (8 * v31))) + 2;
          unsigned int v37 = v40 + 2;
          if (v31 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(v26, v28, v29);
      char v42 = 1;
    }
    else
    {
      char v42 = 0;
      *(void *)unint64_t v26 = *(void *)v28;
    }
    v26[v31] = v42;
  }
  return a1;
}

uint64_t sub_100092BAC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  if (*(void *)(v9 + 64) <= 8uLL) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v13 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  unint64_t v14 = v10
      + ((v13 + ((((v12 + ((v11 + 8) & ~v11) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v13)
      + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_26:
      uint64_t v20 = ((unint64_t)a1 + v11 + 8) & ~v11;
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v22 = *(void *)(((v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v22 >= 0xFFFFFFFF) {
          LODWORD(v22) = -1;
        }
        return (v22 + 1);
      }
      else
      {
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
        return v21(v20, v7, v5);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_26;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void sub_100092E54(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v25 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for OpenURLAction() - 8);
  if (*(void *)(v11 + 64) <= 8uLL) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  size_t v16 = v12
      + ((v15 + ((((v14 + ((v13 + 8) & ~v13) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v15)
      + 1;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x10009317CLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        uint64_t v22 = (unint64_t)&a1[v13 + 8] & ~v13;
        if (v9 < 0x7FFFFFFF)
        {
          unint64_t v24 = (v14 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(unsigned char *)(v24 + 16) = 0;
            *(void *)unint64_t v24 = a2 ^ 0x80000000;
            *(void *)(v24 + 8) = 0;
          }
          else
          {
            *(void *)(v24 + 8) = (a2 - 1);
          }
        }
        else
        {
          uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
          v23(v22, a2, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_1000931A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000931E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v44 = type metadata accessor for SlideTransition();
  uint64_t v3 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = sub_100006560(&qword_10019C1D8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_10019C1E0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100006560(&qword_10019C1E8);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  int v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100006560(&qword_10019A618) - 8;
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
  *((void *)v11 + 1) = 0x403C000000000000;
  v11[16] = 0;
  uint64_t v23 = sub_100006560(&qword_10019C1F0);
  sub_10009361C(v43, v22, v21, (uint64_t)&v11[*(int *)(v23 + 44)]);
  SlideTransition.init()();
  uint64_t v24 = v44;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v44);
  sub_100096BF4((unint64_t *)&qword_10019AFE0, (void (*)(uint64_t))&type metadata accessor for SlideTransition);
  uint64_t v25 = AnyTransition.init<A>(_:)();
  sub_1000066D4((uint64_t)v11, (uint64_t)v15, &qword_10019C1D8);
  *(void *)&v15[*(int *)(v13 + 44)] = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v24);
  sub_1000067DC((uint64_t)v11, &qword_10019C1D8);
  LOBYTE(v25) = static Edge.Set.top.getter();
  sub_1000066D4((uint64_t)v15, (uint64_t)v19, &qword_10019C1E0);
  unint64_t v26 = &v19[*(int *)(v17 + 44)];
  char *v26 = v25;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  v26[40] = 1;
  sub_1000067DC((uint64_t)v15, &qword_10019C1E0);
  LOBYTE(v15) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v41;
  sub_1000066D4((uint64_t)v19, v41, &qword_10019C1E8);
  uint64_t v36 = v35 + *(int *)(v42 + 44);
  *(unsigned char *)uint64_t v36 = (_BYTE)v15;
  *(void *)(v36 + 8) = v28;
  *(void *)(v36 + 16) = v30;
  *(void *)(v36 + 24) = v32;
  *(void *)(v36 + 32) = v34;
  *(unsigned char *)(v36 + 40) = 0;
  sub_1000067DC((uint64_t)v19, &qword_10019C1E8);
  uint64_t v37 = static Alignment.center.getter();
  sub_100052038(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v45, 0.0, 1, 0.0, 1, v37, v38);
  return sub_1000067DC(v35, &qword_10019A618);
}

uint64_t sub_10009361C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v87 = a4;
  uint64_t v7 = type metadata accessor for EventDetailModule();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  v74[1] = *(void *)(v76 + 64);
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)v74 - v8;
  unint64_t v82 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v10 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_10019C1F8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_10019C200);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100006560(&qword_10019C208);
  uint64_t v83 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v88 = (char *)v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100006560(&qword_10019C210);
  __chkstk_darwin(v85);
  uint64_t v86 = (uint64_t)v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v79 = (char *)v74 - v20;
  __chkstk_darwin(v21);
  uint64_t v84 = (char *)v74 - v22;
  __chkstk_darwin(v23);
  uint64_t v89 = (uint64_t)v74 - v24;
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *((void *)v13 + 1) = 0x4024000000000000;
  v13[16] = 0;
  uint64_t v25 = sub_100006560(&qword_10019C218);
  sub_100093E88(a1, a2, a3, (uint64_t)&v13[*(int *)(v25 + 44)]);
  char v26 = static Edge.Set.horizontal.getter();
  sub_1000066D4((uint64_t)v13, (uint64_t)v16, &qword_10019C1F8);
  uint64_t v27 = &v16[*(int *)(v14 + 36)];
  *uint64_t v27 = v26;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  v27[40] = 1;
  sub_1000067DC((uint64_t)v13, &qword_10019C1F8);
  static AccessibilityChildBehavior.ignore.getter();
  unint64_t v28 = sub_100095100();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, unint64_t))(v80 + 8))(v10, v82);
  sub_1000067DC((uint64_t)v16, &qword_10019C200);
  uint64_t v78 = a2;
  uint64_t v80 = a3;
  uint64_t v29 = type metadata accessor for EventDetailViewModel();
  uint64_t v118 = sub_100129274(v29);
  unint64_t v119 = v30;
  unint64_t v82 = sub_10002374C();
  uint64_t v31 = Text.init<A>(_:)();
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  uint64_t v118 = v14;
  unint64_t v119 = v28;
  swift_getOpaqueTypeConformance2();
  uint64_t v36 = (uint64_t)v79;
  uint64_t v37 = v81;
  uint64_t v38 = v88;
  View.accessibility(label:)();
  uint64_t v39 = v31;
  uint64_t v40 = a1;
  sub_1000065A4(v39, v33, v35);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v38, v37);
  sub_100006560(&qword_10019C230);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_10014D4D0;
  uint64_t v118 = sub_10012896C(v29);
  unint64_t v119 = v42;
  *(void *)(v41 + 32) = Text.init<A>(_:)();
  *(void *)(v41 + 40) = v43;
  *(unsigned char *)(v41 + 48) = v44 & 1;
  *(void *)(v41 + 56) = v45;
  uint64_t v46 = (uint64_t)v84;
  ModifiedContent<>.accessibility(inputLabels:)();
  swift_bridgeObjectRelease();
  sub_1000067DC(v36, &qword_10019C210);
  sub_10001D6D8(v46, v89, &qword_10019C210);
  if (sub_100129874(v29))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v47 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v83 = v48;
    uint64_t v84 = (char *)v47;
    char v50 = v49;
    uint64_t v88 = v51;
    uint64_t v85 = static Color.white.getter();
    uint64_t v52 = static Color.black.getter();
    uint64_t v54 = v75;
    uint64_t v53 = v76;
    uint64_t v55 = v77;
    (*(void (**)(char *, uint64_t *, uint64_t))(v76 + 16))(v75, v40, v77);
    unint64_t v56 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v57 = swift_allocObject();
    uint64_t v58 = v80;
    *(void *)(v57 + 16) = v78;
    *(void *)(v57 + 24) = v58;
    (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v57 + v56, v54, v55);
    uint64_t v59 = *v40;
    LODWORD(v56) = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    char v64 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    char v92 = v50 & 1;
    char v90 = 0;
    v95[0] = v84;
    v95[1] = v83;
    char v96 = v50 & 1;
    *(_DWORD *)uint64_t v97 = *(_DWORD *)v94;
    *(_DWORD *)&v97[3] = *(_DWORD *)&v94[3];
    uint64_t v98 = v88;
    uint64_t v99 = v85;
    uint64_t v100 = v52;
    char v101 = sub_1000954E4;
    uint64_t v102 = v57;
    unint64_t v103 = 0xD000000000000017;
    unint64_t v104 = 0x8000000100158850;
    uint64_t v105 = v59;
    int v106 = v56;
    uint64_t v107 = v61;
    uint64_t v108 = v63;
    char v109 = 1;
    *(_DWORD *)&v110[3] = *(_DWORD *)&v93[3];
    *(_DWORD *)char v110 = *(_DWORD *)v93;
    char v111 = v64;
    *(_DWORD *)&v112[3] = *(_DWORD *)&v91[3];
    *(_DWORD *)uint64_t v112 = *(_DWORD *)v91;
    uint64_t v113 = v65;
    uint64_t v114 = v66;
    uint64_t v115 = v67;
    uint64_t v116 = v68;
    char v117 = 0;
    nullsub_1(v95);
  }
  else
  {
    sub_1000951A0((uint64_t)v95);
  }
  sub_10001D6D8((uint64_t)v95, (uint64_t)&v118, &qword_10019C238);
  uint64_t v69 = v89;
  uint64_t v70 = v86;
  sub_1000066D4(v89, v86, &qword_10019C210);
  sub_10001D6D8((uint64_t)&v118, (uint64_t)v93, &qword_10019C238);
  uint64_t v71 = v87;
  sub_1000066D4(v70, v87, &qword_10019C210);
  uint64_t v72 = v71 + *(int *)(sub_100006560(&qword_10019C240) + 48);
  sub_10001D6D8((uint64_t)v93, (uint64_t)v94, &qword_10019C238);
  sub_10001D6D8((uint64_t)v94, v72, &qword_10019C238);
  sub_100095244((uint64_t)v94, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000951C0);
  sub_1000067DC(v69, &qword_10019C210);
  sub_10001D6D8((uint64_t)v93, (uint64_t)v95, &qword_10019C238);
  sub_100095244((uint64_t)v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000952B8);
  return sub_1000067DC(v70, &qword_10019C210);
}

uint64_t sub_100093E88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v85 = a3;
  uint64_t v70 = a1;
  uint64_t v86 = a4;
  uint64_t v74 = sub_100006560(&qword_100199610) - 8;
  __chkstk_darwin(v74);
  uint64_t v71 = (uint64_t *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v5 - 8);
  uint64_t v68 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100006560(&qword_100199620) - 8;
  __chkstk_darwin(v69);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100006560(&qword_10019BBE8) - 8;
  __chkstk_darwin(v78);
  uint64_t v72 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100006560(&qword_10019C248) - 8;
  __chkstk_darwin(v81);
  uint64_t v76 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100006560(&qword_10019C250) - 8;
  __chkstk_darwin(v79);
  uint64_t v73 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100006560(&qword_10019C258) - 8;
  __chkstk_darwin(v80);
  uint64_t v75 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100006560(&qword_10019C260) - 8;
  __chkstk_darwin(v82);
  uint64_t v77 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v83 = (uint64_t)&v68 - v15;
  uint64_t v16 = type metadata accessor for EventDetailViewModel();
  uint64_t v93 = sub_100128888(v16);
  uint64_t v94 = v17;
  sub_10002374C();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  static Font.Weight.heavy.getter();
  uint64_t v23 = Text.fontWeight(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_1000065A4(v18, v20, v22);
  swift_bridgeObjectRelease();
  uint64_t v30 = enum case for Text.Case.uppercase(_:);
  uint64_t v31 = type metadata accessor for Text.Case();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v68, v30, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
  uint64_t KeyPath = swift_getKeyPath();
  char v35 = v71;
  sub_1000066D4(v33, (uint64_t)v71 + *(int *)(v74 + 36), &qword_100199618);
  *char v35 = KeyPath;
  sub_1000066D4((uint64_t)v35, (uint64_t)&v8[*(int *)(v69 + 44)], &qword_100199610);
  *(void *)uint64_t v8 = v23;
  *((void *)v8 + 1) = v25;
  v8[16] = v29;
  *((void *)v8 + 3) = v27;
  sub_100010924(v23, v25, v29);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v35, &qword_100199610);
  sub_1000067DC(v33, &qword_100199618);
  sub_1000065A4(v23, v25, v29);
  swift_bridgeObjectRelease();
  uint64_t v36 = static Font.subheadline.getter();
  uint64_t v37 = swift_getKeyPath();
  uint64_t v38 = v72;
  sub_1000066D4((uint64_t)v8, v72, &qword_100199620);
  uint64_t v39 = (uint64_t *)(v38 + *(int *)(v78 + 44));
  *uint64_t v39 = v37;
  v39[1] = v36;
  sub_1000067DC((uint64_t)v8, &qword_100199620);
  uint64_t v40 = static Color.white.getter();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = v76;
  sub_1000066D4(v38, v76, &qword_10019BBE8);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v81 + 44));
  uint64_t *v43 = v41;
  v43[1] = v40;
  sub_1000067DC(v38, &qword_10019BBE8);
  uint64_t v44 = v73;
  sub_1000066D4(v42, v73, &qword_10019C248);
  *(void *)(v44 + *(int *)(v79 + 44)) = 0x3FE999999999999ALL;
  sub_1000067DC(v42, &qword_10019C248);
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v75;
  sub_1000066D4(v44, v75, &qword_10019C250);
  uint64_t v47 = v46 + *(int *)(v80 + 44);
  *(void *)uint64_t v47 = v45;
  *(unsigned char *)(v47 + 8) = 1;
  sub_1000067DC(v44, &qword_10019C250);
  uint64_t v48 = v70;
  uint64_t v49 = *v70;
  LODWORD(v45) = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = v77;
  sub_1000066D4(v46, v77, &qword_10019C258);
  uint64_t v55 = v54 + *(int *)(v82 + 44);
  *(void *)uint64_t v55 = 0xD000000000000017;
  *(void *)(v55 + 8) = 0x80000001001588B0;
  *(void *)(v55 + 16) = v49;
  *(_DWORD *)(v55 + 24) = v45;
  *(void *)(v55 + 32) = v51;
  *(void *)(v55 + 40) = v53;
  *(unsigned char *)(v55 + 48) = 1;
  sub_1000067DC(v46, &qword_10019C258);
  uint64_t v56 = v83;
  sub_10001D6D8(v54, v83, &qword_10019C260);
  uint64_t v57 = static HorizontalAlignment.center.getter();
  sub_100094800(v48, (uint64_t)v87);
  *(_OWORD *)&v89[167] = v87[10];
  *(_OWORD *)&v89[183] = v87[11];
  *(_OWORD *)&v89[199] = v87[12];
  *(_OWORD *)&v89[103] = v87[6];
  *(_OWORD *)&v89[119] = v87[7];
  *(_OWORD *)&v89[135] = v87[8];
  *(_OWORD *)&v89[151] = v87[9];
  *(_OWORD *)&v89[39] = v87[2];
  *(_OWORD *)&v89[55] = v87[3];
  *(_OWORD *)&v89[71] = v87[4];
  *(_OWORD *)&v89[87] = v87[5];
  *(_OWORD *)&v89[7] = v87[0];
  char v90 = 0;
  v89[215] = v88;
  *(_OWORD *)&v89[23] = v87[1];
  sub_1000066D4(v56, v54, &qword_10019C260);
  uint64_t v58 = v86;
  sub_1000066D4(v54, v86, &qword_10019C260);
  uint64_t v59 = (_OWORD *)(v58 + *(int *)(sub_100006560(&qword_10019C268) + 48));
  *(void *)&long long v91 = v57;
  *((void *)&v91 + 1) = 0x4014000000000000;
  LOBYTE(v92[0]) = 0;
  *(_OWORD *)((char *)&v92[10] + 1) = *(_OWORD *)&v89[160];
  *(_OWORD *)((char *)&v92[11] + 1) = *(_OWORD *)&v89[176];
  *(_OWORD *)((char *)&v92[12] + 1) = *(_OWORD *)&v89[192];
  *(void *)((char *)&v92[13] + 1) = *(void *)&v89[208];
  *(_OWORD *)((char *)&v92[6] + 1) = *(_OWORD *)&v89[96];
  *(_OWORD *)((char *)&v92[7] + 1) = *(_OWORD *)&v89[112];
  *(_OWORD *)((char *)&v92[8] + 1) = *(_OWORD *)&v89[128];
  *(_OWORD *)((char *)&v92[9] + 1) = *(_OWORD *)&v89[144];
  *(_OWORD *)((char *)&v92[2] + 1) = *(_OWORD *)&v89[32];
  *(_OWORD *)((char *)&v92[3] + 1) = *(_OWORD *)&v89[48];
  *(_OWORD *)((char *)&v92[4] + 1) = *(_OWORD *)&v89[64];
  *(_OWORD *)((char *)&v92[5] + 1) = *(_OWORD *)&v89[80];
  *(_OWORD *)((char *)&v92[1] + 1) = *(_OWORD *)&v89[16];
  *(_OWORD *)((char *)v92 + 1) = *(_OWORD *)v89;
  long long v60 = v92[12];
  v59[12] = v92[11];
  v59[13] = v60;
  *(_OWORD *)((char *)v59 + 217) = *(_OWORD *)((char *)&v92[12] + 9);
  long long v61 = v92[8];
  v59[8] = v92[7];
  v59[9] = v61;
  long long v62 = v92[10];
  v59[10] = v92[9];
  v59[11] = v62;
  long long v63 = v92[4];
  v59[4] = v92[3];
  v59[5] = v63;
  long long v64 = v92[6];
  v59[6] = v92[5];
  v59[7] = v64;
  long long v65 = v92[0];
  *uint64_t v59 = v91;
  v59[1] = v65;
  long long v66 = v92[2];
  v59[2] = v92[1];
  v59[3] = v66;
  sub_100095FB8((uint64_t)&v91);
  sub_1000067DC(v56, &qword_10019C260);
  long long v106 = *(_OWORD *)&v89[160];
  long long v107 = *(_OWORD *)&v89[176];
  long long v108 = *(_OWORD *)&v89[192];
  long long v102 = *(_OWORD *)&v89[96];
  long long v103 = *(_OWORD *)&v89[112];
  long long v104 = *(_OWORD *)&v89[128];
  long long v105 = *(_OWORD *)&v89[144];
  long long v98 = *(_OWORD *)&v89[32];
  long long v99 = *(_OWORD *)&v89[48];
  long long v100 = *(_OWORD *)&v89[64];
  long long v101 = *(_OWORD *)&v89[80];
  long long v96 = *(_OWORD *)v89;
  uint64_t v93 = v57;
  uint64_t v94 = 0x4014000000000000;
  char v95 = 0;
  uint64_t v109 = *(void *)&v89[208];
  long long v97 = *(_OWORD *)&v89[16];
  sub_100096068((uint64_t)&v93);
  return sub_1000067DC(v54, &qword_10019C260);
}

uint64_t sub_100094800@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = type metadata accessor for EventDetailViewModel();
  sub_10012896C(v45);
  sub_10002374C();
  uint64_t v3 = Text.init<A>(_:)();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  static Font.largeTitle.getter();
  uint64_t v8 = Text.font(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  swift_release();
  sub_1000065A4(v3, v5, v7);
  swift_bridgeObjectRelease();
  static Font.Weight.heavy.getter();
  uint64_t v13 = Text.fontWeight(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  sub_1000065A4(v8, v10, v12 & 1);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v53 = Text.foregroundColor(_:)();
  uint64_t v54 = v18;
  uint64_t v50 = v19;
  char v21 = v20;
  swift_release();
  sub_1000065A4(v13, v15, v17);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v49 = *a1;
  int v48 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v55 = sub_100128D7C(v45);
  uint64_t v26 = Text.init<A>(_:)();
  uint64_t v28 = v27;
  LOBYTE(v10) = v29 & 1;
  static Font.body.getter();
  uint64_t v30 = Text.font(_:)();
  uint64_t v32 = v31;
  char v34 = v33;
  swift_release();
  LOBYTE(v8) = v34 & 1;
  sub_1000065A4(v26, v28, v10);
  swift_bridgeObjectRelease();
  static Color.white.getter();
  uint64_t v35 = Text.foregroundColor(_:)();
  uint64_t v37 = v36;
  LOBYTE(v28) = v38;
  uint64_t v46 = v39;
  swift_release();
  sub_1000065A4(v30, v32, v8);
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_getKeyPath();
  uint64_t v52 = *a1;
  int v44 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  *(_DWORD *)(a2 + 17) = v55;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v55 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v59;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v58;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v58[3];
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v57[3];
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v57;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)&v56[3];
  *(_DWORD *)(a2 + 153) = *(_DWORD *)v56;
  *(void *)a2 = v53;
  *(void *)(a2 + 8) = v50;
  *(unsigned char *)(a2 + 16) = v21 & 1;
  *(void *)(a2 + 24) = v54;
  *(void *)(a2 + 32) = KeyPath;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = 0xD000000000000016;
  *(void *)(a2 + 56) = 0x8000000100158890;
  *(void *)(a2 + 64) = v49;
  *(_DWORD *)(a2 + 72) = v48;
  *(void *)(a2 + 80) = v23;
  *(void *)(a2 + 88) = v25;
  *(unsigned char *)(a2 + 96) = 1;
  *(void *)(a2 + 104) = v35;
  *(void *)(a2 + 112) = v37;
  *(unsigned char *)(a2 + 120) = v28 & 1;
  *(void *)(a2 + 128) = v46;
  *(void *)(a2 + 136) = 0x3FE999999999999ALL;
  *(void *)(a2 + 144) = v40;
  *(unsigned char *)(a2 + 152) = 1;
  *(void *)(a2 + 160) = 0xD000000000000019;
  *(void *)(a2 + 168) = 0x8000000100158870;
  *(void *)(a2 + 176) = v52;
  *(_DWORD *)(a2 + 184) = v44;
  *(void *)(a2 + 192) = v41;
  *(void *)(a2 + 200) = v42;
  *(unsigned char *)(a2 + 208) = 1;
  sub_100010924(v53, v50, v21 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100010924(v35, v37, v28 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000065A4(v35, v37, v28 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v53, v50, v21 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100094C48(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  uint64_t v27 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for OpenURLAction();
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v25 = (uint64_t)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  char v12 = (char *)&v24 - v11;
  uint64_t v13 = type metadata accessor for EventDetailViewModel();
  if (sub_100129940(v13))
  {
    sub_1001299D0(v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v7);
    }
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v16 = v25;
    sub_10001D160(v25);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v18 = v27;
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    OpenURLAction.callAsFunction(_:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v16, v28);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v21 = *(void *)(v1 + *(int *)(a1 + 36));
    if (v21)
    {
      uint64_t v22 = v19;
      uint64_t v23 = v20;
      swift_retain();
      sub_100129AA0(v22, v23, v21, v13);
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v12, AssociatedTypeWitness);
    }
LABEL_11:
    type metadata accessor for RemoteViewConfiguration();
    sub_100096BF4((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  sub_100129D8C();
  if (!*(void *)(v1 + *(int *)(a1 + 36))) {
    goto LABEL_11;
  }
  uint64_t v15 = swift_retain();
  sub_100129E3C(v15, v13);

  return swift_release();
}

unint64_t sub_100095100()
{
  unint64_t result = qword_10019C220;
  if (!qword_10019C220)
  {
    sub_10000650C(&qword_10019C200);
    sub_100010484(&qword_10019C228, &qword_10019C1F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C220);
  }
  return result;
}

double sub_1000951A0(uint64_t a1)
{
  *(unsigned char *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000951C0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100010924(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100095244(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 160);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_1000952B8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000065A4(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10009533C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for EventDetailModule() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  uint64_t v4 = type metadata accessor for EventDetailViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v4 + 36), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v3 + v2[12];
  sub_100006560(&qword_1001982C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for OpenURLAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000954E4()
{
  uint64_t v0 = type metadata accessor for EventDetailModule();
  return sub_100094C48(v0);
}

uint64_t sub_100095548@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v65 = a1;
  uint64_t v69 = a3;
  uint64_t v67 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v67);
  uint64_t v68 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019C2B0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100006560(&qword_10019C2B8);
  __chkstk_darwin(v56);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100006560(&qword_10019C2C0);
  __chkstk_darwin(v57);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100006560(&qword_10019C2C8);
  __chkstk_darwin(v58);
  char v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006560(&qword_10019C2D0);
  __chkstk_darwin(v62);
  uint64_t v55 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_10019C2D8);
  uint64_t v63 = *(void *)(v19 - 8);
  uint64_t v64 = v19;
  __chkstk_darwin(v19);
  long long v61 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100006560(&qword_10019C2E0);
  __chkstk_darwin(v60);
  long long v66 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  char v22 = static Edge.Set.all.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v7, v4);
  uint64_t v23 = &v11[*(int *)(v9 + 44)];
  *uint64_t v23 = v22;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  v23[40] = 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v24 = Color.opacity(_:)();
  }
  else
  {
    uint64_t v24 = v59;
    swift_retain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000066D4((uint64_t)v11, (uint64_t)v13, &qword_10019C2B0);
  uint64_t v26 = (uint64_t *)&v13[*(int *)(v56 + 36)];
  uint64_t *v26 = KeyPath;
  v26[1] = v24;
  sub_1000067DC((uint64_t)v11, &qword_10019C2B0);
  if (ButtonStyleConfiguration.isPressed.getter())
  {
    uint64_t v27 = Color.opacity(_:)();
  }
  else
  {
    uint64_t v27 = v65;
    swift_retain();
  }
  char v28 = static Edge.Set.all.getter();
  sub_1000066D4((uint64_t)v13, (uint64_t)v15, &qword_10019C2B8);
  uint64_t v29 = &v15[*(int *)(v57 + 36)];
  *(void *)uint64_t v29 = v27;
  v29[8] = v28;
  sub_1000067DC((uint64_t)v13, &qword_10019C2B8);
  uint64_t v30 = v68;
  uint64_t v31 = &v68[*(int *)(v67 + 20)];
  uint64_t v32 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v33 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
  __asm { FMOV            V0.2D, #10.0 }
  *uint64_t v30 = _Q0;
  uint64_t v39 = (uint64_t)&v17[*(int *)(v58 + 36)];
  sub_10001081C((uint64_t)v30, v39);
  *(_WORD *)(v39 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v15, (uint64_t)v17, &qword_10019C2C0);
  sub_100010934((uint64_t)v30);
  sub_1000067DC((uint64_t)v15, &qword_10019C2C0);
  uint64_t v40 = static Font.headline.getter();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = v55;
  sub_1000066D4((uint64_t)v17, v55, &qword_10019C2C8);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v62 + 36));
  uint64_t *v43 = v41;
  v43[1] = v40;
  sub_1000067DC((uint64_t)v17, &qword_10019C2C8);
  static Font.Weight.bold.getter();
  sub_1000968C8();
  int v44 = v61;
  View.fontWeight(_:)();
  sub_1000067DC(v42, &qword_10019C2D0);
  uint64_t v45 = swift_getKeyPath();
  uint64_t v47 = v63;
  uint64_t v46 = v64;
  uint64_t v48 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v66, v44, v64);
  uint64_t v49 = v48 + *(int *)(v60 + 36);
  *(void *)uint64_t v49 = v45;
  *(unsigned char *)(v49 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
  static Color.black.getter();
  uint64_t v50 = Color.opacity(_:)();
  swift_release();
  uint64_t v51 = v69;
  sub_1000066D4(v48, v69, &qword_10019C2E0);
  uint64_t v52 = v51 + *(int *)(sub_100006560(&qword_10019C318) + 36);
  *(void *)uint64_t v52 = v50;
  *(_OWORD *)(v52 + 8) = xmmword_10014CCA0;
  *(void *)(v52 + 24) = 0x4010000000000000;
  return sub_1000067DC(v48, &qword_10019C2E0);
}

uint64_t sub_100095C34@<X0>(uint64_t a1@<X8>)
{
  return sub_100095548(*v1, v1[1], a1);
}

__n128 sub_100095C3C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_100010924(*(void *)a1, v4, v5);
  swift_bridgeObjectRetain();
  uint64_t v7 = static Alignment.center.getter();
  sub_100051068(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v7, v8, v3, v4, v5, v6);
  sub_1000065A4(v3, v4, v5);
  swift_bridgeObjectRelease();
  long long v9 = v13[7];
  *(_OWORD *)(a2 + 96) = v13[6];
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v13[8];
  long long v10 = v13[3];
  *(_OWORD *)(a2 + 32) = v13[2];
  *(_OWORD *)(a2 + 48) = v10;
  long long v11 = v13[5];
  *(_OWORD *)(a2 + 64) = v13[4];
  *(_OWORD *)(a2 + 80) = v11;
  __n128 result = (__n128)v13[1];
  *(_OWORD *)a2 = v13[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_100095D28()
{
  uint64_t v1 = sub_100006560(&qword_10019C298);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v5 = v0[1];
  v11[0] = *v0;
  v11[1] = v5;
  long long v6 = v0[3];
  long long v12 = v0[2];
  long long v13 = v6;
  long long v9 = v11;
  swift_retain();
  sub_100006560(&qword_100198DD8);
  sub_1000238F0();
  Button.init(action:label:)();
  long long v10 = v12;
  sub_100010484(&qword_10019C2A0, &qword_10019C298);
  sub_100096618();
  View.buttonStyle<A>(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100095EC0()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100095EE4()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100095F08(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v2 - 8);
  sub_1000066D4(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100199618);
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_100095FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  char v4 = *(unsigned char *)(a1 + 144);
  sub_100010924(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100096068(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  char v4 = *(unsigned char *)(a1 + 144);
  sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for LargeButton(uint64_t a1)
{
  sub_1000065A4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100010924(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100010924(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_1000065A4(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_1000065A4(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  uint64_t v8 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton()
{
  return &type metadata for LargeButton;
}

uint64_t sub_100096410()
{
  return sub_1000964B4(&qword_10019C270, &qword_10019A620, (void (*)(void))sub_100096454);
}

uint64_t sub_100096454()
{
  return sub_1000964B4(&qword_10019C278, &qword_10019A618, (void (*)(void))sub_100096484);
}

uint64_t sub_100096484()
{
  return sub_1000964B4(&qword_10019C280, &qword_10019C1E8, (void (*)(void))sub_100096530);
}

uint64_t sub_1000964B4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100096530()
{
  unint64_t result = qword_10019C288;
  if (!qword_10019C288)
  {
    sub_10000650C(&qword_10019C1E0);
    sub_100010484(&qword_10019C290, &qword_10019C1D8);
    sub_100010484(&qword_10019AFB8, &qword_10019AFC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C288);
  }
  return result;
}

uint64_t sub_1000965F4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_100096610@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100095C3C(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_100096618()
{
  unint64_t result = qword_10019C2A8;
  if (!qword_10019C2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C2A8);
  }
  return result;
}

uint64_t destroy for LargeButton.LargeButtonStyle()
{
  swift_release();

  return swift_release();
}

void *_s15ShazamEventsApp11LargeButtonV16LargeButtonStyleVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LargeButton.LargeButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LargeButton.LargeButtonStyle(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton.LargeButtonStyle()
{
  return &type metadata for LargeButton.LargeButtonStyle;
}

uint64_t sub_100096818()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000968AC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000968C8()
{
  unint64_t result = qword_10019C2E8;
  if (!qword_10019C2E8)
  {
    sub_10000650C(&qword_10019C2D0);
    sub_100096968();
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C2E8);
  }
  return result;
}

unint64_t sub_100096968()
{
  unint64_t result = qword_10019C2F0;
  if (!qword_10019C2F0)
  {
    sub_10000650C(&qword_10019C2C8);
    sub_100096A08();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C2F0);
  }
  return result;
}

unint64_t sub_100096A08()
{
  unint64_t result = qword_10019C2F8;
  if (!qword_10019C2F8)
  {
    sub_10000650C(&qword_10019C2C0);
    sub_100096AA8();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C2F8);
  }
  return result;
}

unint64_t sub_100096AA8()
{
  unint64_t result = qword_10019C300;
  if (!qword_10019C300)
  {
    sub_10000650C(&qword_10019C2B8);
    sub_100096B48();
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C300);
  }
  return result;
}

unint64_t sub_100096B48()
{
  unint64_t result = qword_10019C308;
  if (!qword_10019C308)
  {
    sub_10000650C(&qword_10019C2B0);
    sub_100096BF4(&qword_10019C310, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C308);
  }
  return result;
}

uint64_t sub_100096BF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100096C3C()
{
  return sub_1000964B4(&qword_10019C320, &qword_10019C318, (void (*)(void))sub_100096C80);
}

unint64_t sub_100096C80()
{
  unint64_t result = qword_10019C328;
  if (!qword_10019C328)
  {
    sub_10000650C(&qword_10019C2E0);
    sub_10000650C(&qword_10019C2D0);
    sub_1000968C8();
    swift_getOpaqueTypeConformance2();
    sub_100010484(&qword_10019C330, qword_10019C338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C328);
  }
  return result;
}

uint64_t sub_100096D54()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100096E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _OWORD *a8, double a9, double a10)
{
  uint64_t v20 = swift_allocObject();
  sub_100097904(a1, a9, a10, a2, a3, a4, a5, a6, a7, a8);
  return v20;
}

uint64_t sub_100096EC8@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - v5;
  sub_10009755C((uint64_t)&v12 - v5);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v8 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    if (qword_100198148 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_1001AA428;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v10, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v6, AssociatedTypeWitness);
  }
}

id sub_1000971B8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - v3;
  sub_10009755C((uint64_t)&v11 - v3);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v4, AssociatedTypeWitness);
    if (v7) {
      return (id)v7;
    }
  }
  id v9 = [self clearColor];
  id v10 = [v9 CGColor];

  return v10;
}

double sub_10009746C()
{
  double v0 = sub_1000974F4();
  double result = 0.0;
  if (v0 <= 0.0) {
    return sub_1000974F4() * 0.125;
  }
  return result;
}

double sub_1000974A0()
{
  double v1 = sub_1000974F4();
  double result = 1.0;
  if (v1 > 0.0) {
    return sub_1000974F4() * (1.0 / *(double *)(v0 + *(void *)(*(void *)v0 + 112))) + 1.0;
  }
  return result;
}

double sub_1000974F4()
{
  sub_100006560(&qword_10019C3C0);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_10009755C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v20 = v10;
  __n128 v11 = __chkstk_darwin(v10);
  long long v13 = (char *)&v19 - v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 208))(v3, v2, v11);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t v22 = v14;
  uint64_t v15 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getWitnessTable();
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v20);
    uint64_t v17 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v21, 1, 1, v17);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 56))(v9, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v9);
  }
}

char *sub_100097904(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, _OWORD *a10)
{
  uint64_t v19 = *(void *)v10;
  *((void *)v10 + 2) = a1;
  (*(void (**)(char *))(*(void *)(*(void *)(v19 + 80) - 8) + 32))(&v10[*(void *)(v19 + 104)]);
  *(double *)&v10[*(void *)(*(void *)v10 + 112)] = a2;
  uint64_t v20 = &v10[*(void *)(*(void *)v10 + 120)];
  *(void *)uint64_t v20 = a5;
  *((void *)v20 + 1) = a6;
  *((double *)v20 + 2) = a3;
  uint64_t v21 = &v10[*(void *)(*(void *)v10 + 128)];
  *(void *)uint64_t v21 = a7;
  *((void *)v21 + 1) = a8;
  v21[16] = a9;
  uint64_t v22 = &v10[*(void *)(*(void *)v10 + 136)];
  long long v23 = a10[1];
  *(_OWORD *)uint64_t v22 = *a10;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = a10[2];
  return v10;
}

uint64_t sub_100097A40()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100097B30()
{
  sub_100097A40();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HeroImageLandscapeModel()
{
  return sub_1000068A4();
}

uint64_t sub_100097BA0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    long long v8 = *(_OWORD *)(v0 + 32);
    uint64_t v7 = v8;
    swift_bridgeObjectRetain();
    sub_10002FE0C((uint64_t)&v8);
    v3._uint64_t countAndFlagsBits = 10;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t sub_100097C34()
{
  uint64_t v1 = type metadata accessor for URLComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  if (qword_100198110 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  if (qword_100198118 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  uint64_t v5 = *(void **)(v0 + 56);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 48);
    long long v10 = *(_OWORD *)(v0 + 32);
    long long v11 = v10;
    swift_bridgeObjectRetain();
    sub_10002FE0C((uint64_t)&v11);
    v7._uint64_t countAndFlagsBits = 2106912;
    v7._object = (void *)0xE300000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = v6;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_100006560(&qword_10019B478);
  type metadata accessor for URLQueryItem();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014D4D0;
  if (qword_100198120 != -1) {
    swift_once();
  }
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  URLComponents.queryItems.setter();
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_100097F04(uint64_t a1)
{
  sub_100006560(&qword_100199238);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014D8E0;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_10019BA08;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_10019B9E0;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_10019BA68;
  *(unsigned char *)(v3 + 112) = 4;
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_10019BA40;
  *(_OWORD *)(v3 + 152) = xmmword_100151AF0;
  *(unsigned char *)(v3 + 168) = 3;
  if (*(void *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    unint64_t v7 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  uint64_t v21 = &type metadata for AnalyticsString;
  uint64_t v22 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v19 = v6;
  uint64_t v20 = (Class (*)(uint64_t))v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1000AB884((char *)1, 5, 1, (char *)v3);
  uint64_t v8 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v9 = __chkstk_darwin(v8);
  long long v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v11, v9);
  sub_1000AC33C(4, (uint64_t)v11, (uint64_t *)&v24, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  long long v13 = v24;
  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0xD00000000000001ELL;
  v15[3] = 0x8000000100157480;
  void v15[4] = v13;
  uint64_t v22 = sub_100029A98;
  long long v23 = v15;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_1000AB7F8;
  uint64_t v21 = (ValueMetadata *)&unk_1001900D8;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
  swift_bridgeObjectRelease();
}

void sub_1000981D0()
{
  qword_10019C3C8 = 0x7370747468;
  unk_10019C3D0 = 0xE500000000000000;
}

void sub_1000981F0()
{
  unk_10019C3E7 = -18;
}

void sub_100098220()
{
  qword_10019C3E8 = 113;
  unk_10019C3F0 = 0xE100000000000000;
}

uint64_t sub_100098238()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100098278(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100098288()
{
  return swift_release();
}

uint64_t sub_100098290()
{
  sub_100116888();
  if (v0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + 16) && (unint64_t v2 = sub_1000A8164(0), (v3 & 1) != 0))
    {
      uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 56) + v2);
      swift_bridgeObjectRelease();
      char v5 = 1;
      switch(v4)
      {
        case 1:
          break;
        default:
          char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
      }
    }
    else
    {
      char v5 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t destroy for LocationViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  unint64_t v7 = *(void **)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LocationViewModel(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  long long v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewModel()
{
  return &type metadata for LocationViewModel;
}

void sub_1000986FC()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();
  if (v0 <= 0x3F)
  {
    sub_100054A24(319, (unint64_t *)&qword_100199860, (void (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v1 <= 0x3F)
    {
      sub_100054A24(319, (unint64_t *)&qword_100198FC0, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v2 <= 0x3F)
      {
        sub_10001B760();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t *sub_100098898(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for PromotionalAssetsViewModel();
    uint64_t v7 = type metadata accessor for Bindable();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[9];
    uint64_t v9 = a3[10];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    long long v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    long long v13 = (uint64_t *)((char *)a1 + v9);
    NSString v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    *long long v13 = v16;
    v13[1] = v15;
    uint64_t v17 = a3[11];
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    swift_retain();
    swift_retain();
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[12];
    long long v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      *long long v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = a3[13];
    uint64_t v27 = (uint64_t *)((char *)a1 + v26);
    char v28 = (uint64_t *)((char *)a2 + v26);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_100006560(&qword_100198948);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      *uint64_t v27 = *v28;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = a3[14];
    uint64_t v33 = (uint64_t *)((char *)a1 + v32);
    char v34 = (uint64_t *)((char *)a2 + v32);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = sub_100006560(&qword_100198948);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
    }
    else
    {
      void *v33 = *v34;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100098D38(uint64_t a1, int *a2)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  swift_release();
  uint64_t v5 = a1 + a2[11];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[12];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[13];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = a1 + a2[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v16 = *(void *)(v13 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v13);
    if (!result)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      return v15(v12, v13);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10009906C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = a3[10];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (uint64_t *)(a2 + v8);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  swift_retain();
  swift_retain();
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for DismissAction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *uint64_t v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  else
  {
    *uint64_t v21 = *v22;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = sub_100006560(&qword_100198948);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  else
  {
    *uint64_t v25 = *v26;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = a3[14];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_100006560(&qword_100198948);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  else
  {
    void *v31 = *v32;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000994BC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  uint64_t v10 = a3[10];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  if (a1 != a2)
  {
    uint64_t v13 = a3[11];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    sub_1000067DC(a1 + v13, qword_100198AA0);
    sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for DismissAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      void *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[12];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    sub_1000067DC(a1 + v17, &qword_100198A98);
    sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[13];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (void *)(a2 + v21);
    sub_1000067DC(a1 + v21, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = sub_100006560(&qword_100198948);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    else
    {
      *uint64_t v22 = *v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[14];
    uint64_t v28 = (void *)(a1 + v27);
    uint64_t v29 = (void *)(a2 + v27);
    sub_1000067DC(a1 + v27, &qword_100198940);
    sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v30 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = sub_100006560(&qword_100198948);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
    }
    else
    {
      *uint64_t v28 = *v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10009998C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[11];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for DismissAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[12];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      uint64_t v24 = sub_100006560(&qword_100198948);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  uint64_t v25 = a3[14];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_100006560(&qword_100198948);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v26, v27, *(void *)(*(void *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100099DEC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_release();
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  if (a1 != a2)
  {
    uint64_t v15 = a3[11];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    sub_1000067DC(a1 + v15, qword_100198AA0);
    uint64_t v18 = sub_100006560(qword_100198AA0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = type metadata accessor for DismissAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = a3[12];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_1000067DC(a1 + v20, &qword_100198A98);
    uint64_t v23 = sub_100006560(&qword_100198A98);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    uint64_t v25 = a3[13];
    uint64_t v26 = (void *)(a1 + v25);
    uint64_t v27 = (const void *)(a2 + v25);
    sub_1000067DC(a1 + v25, &qword_100198940);
    uint64_t v28 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29))
      {
        uint64_t v31 = sub_100006560(&qword_100198948);
        memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v26, v27, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    uint64_t v32 = a3[14];
    uint64_t v33 = (void *)(a1 + v32);
    uint64_t v34 = (const void *)(a2 + v32);
    sub_1000067DC(a1 + v32, &qword_100198940);
    uint64_t v35 = sub_100006560(&qword_100198940);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v36 = type metadata accessor for UserInterfaceSizeClass();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
      {
        uint64_t v38 = sub_100006560(&qword_100198948);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v37 + 32))(v33, v34, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10009A2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009A2E0);
}

uint64_t sub_10009A2E0(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v6 = type metadata accessor for Bindable();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[9] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = sub_100006560(&qword_100198648);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[11];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[12];
    goto LABEL_11;
  }
  uint64_t v17 = sub_100006560(&qword_100198950);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[13];

  return v18(v20, a2, v19);
}

uint64_t sub_10009A4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009A4E0);
}

uint64_t sub_10009A4E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t result = type metadata accessor for Bindable();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_100006560(&qword_100198648);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[11];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_100006560(qword_100198F38);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[12];
    goto LABEL_9;
  }
  uint64_t v17 = sub_100006560(&qword_100198950);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[13];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata accessor for PromotionalAssetsView()
{
  return sub_1000068A4();
}

uint64_t sub_10009A6E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10009A728()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();
  Bindable.wrappedValue.getter();
  return v1;
}

uint64_t sub_10009A768()
{
  type metadata accessor for PromotionalAssetsViewModel();
  type metadata accessor for Bindable();

  return Bindable.projectedValue.getter();
}

uint64_t sub_10009A7B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v231 = a2;
  uint64_t v239 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v239);
  uint64_t v230 = (uint64_t)v171 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v228 = *(void *)(v4 - 8);
  uint64_t v229 = v4;
  __chkstk_darwin(v4);
  uint64_t v227 = (char *)v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = a1;
  uint64_t v251 = a1;
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v11 = type metadata accessor for Bindable();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v225 = v11;
  uint64_t v226 = v12;
  __chkstk_darwin(v11);
  uint64_t v224 = (char *)v171 - v13;
  uint64_t v250 = *(void *)(v8 - 8);
  uint64_t v246 = *(void *)(v250 + 64);
  __chkstk_darwin(v14);
  long long v245 = (char *)v171 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v247 = type metadata accessor for CoordinateSpace();
  uint64_t v243 = *(void *)(v247 - 8);
  __chkstk_darwin(v247);
  uint64_t v242 = (void *)((char *)v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NavigationPath();
  uint64_t v244 = v10;
  uint64_t v248 = v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019C478);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C480);
  uint64_t v287 = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_10000650C(&qword_10019C488);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C490);
  type metadata accessor for ModifiedContent();
  uint64_t v288 = type metadata accessor for Optional();
  uint64_t v289 = sub_10000650C(&qword_10019C498);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  uint64_t v283 = AssociatedTypeWitness;
  uint64_t v284 = v18;
  uint64_t v285 = AssociatedConformanceWitness;
  uint64_t v286 = v20;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t v290 = type metadata accessor for Optional();
  uint64_t v291 = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  type metadata accessor for ObservableScrollView();
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  v282 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v287 = v21;
  uint64_t v288 = v22;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019C4A0);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019A3C8);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v287 = v21;
  uint64_t v288 = v22;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v25 = sub_100010484(&qword_10019C4A8, &qword_10019C4A0);
  uint64_t v279 = OpaqueTypeConformance2;
  uint64_t v280 = v25;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_100010484(&qword_10019A3D8, &qword_10019A3C8);
  uint64_t v277 = v26;
  uint64_t v278 = v27;
  uint64_t v240 = v23;
  uint64_t v188 = swift_getWitnessTable();
  uint64_t v28 = type metadata accessor for NavigationStack();
  uint64_t v241 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v187 = (char *)v171 - v29;
  sub_10000650C(&qword_10019C4B0);
  uint64_t v174 = v28;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v210 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  unint64_t v232 = (unint64_t)v171 - v31;
  sub_10000650C(&qword_10019C4B8);
  uint64_t v178 = v30;
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v209 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v191 = (char *)v171 - v33;
  sub_10000650C(&qword_10019C4C0);
  uint64_t v181 = v32;
  uint64_t v34 = type metadata accessor for ModifiedContent();
  uint64_t v217 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v193 = (char *)v171 - v35;
  sub_10000650C(&qword_10019C4C8);
  uint64_t v184 = v34;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v222 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v236 = (char *)v171 - v37;
  uint64_t v38 = sub_10000650C(&qword_10019A420);
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v172 = v39;
  uint64_t v40 = sub_100010484(&qword_10019C4D0, &qword_10019C4B0);
  uint64_t v275 = v39;
  uint64_t v276 = v40;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v176 = v41;
  uint64_t v42 = sub_100010484(&qword_10019C4D8, &qword_10019C4B8);
  uint64_t v273 = v41;
  uint64_t v274 = v42;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v177 = v43;
  uint64_t v44 = sub_100010484(&qword_10019C4E0, &qword_10019C4C0);
  uint64_t v271 = v43;
  uint64_t v272 = v44;
  uint64_t v238 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v183 = v45;
  uint64_t v46 = sub_100010484(&qword_10019C4E8, &qword_10019C4C8);
  uint64_t v269 = v45;
  uint64_t v270 = v46;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v234 = v47;
  uint64_t v48 = sub_10000650C(&qword_10019A428);
  uint64_t v49 = sub_1000A3710(&qword_10019A430, &qword_10019A428, (void (*)(void))sub_100060494);
  uint64_t v287 = v48;
  uint64_t v288 = v49;
  uint64_t v233 = swift_getOpaqueTypeConformance2();
  uint64_t v287 = v36;
  uint64_t v288 = v38;
  uint64_t v50 = v36;
  uint64_t v173 = v36;
  uint64_t v51 = v38;
  v171[1] = v38;
  uint64_t v289 = v47;
  uint64_t v290 = v233;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v206 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v186 = (char *)v171 - v52;
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v211 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v235 = (char *)v171 - v54;
  uint64_t v180 = v53;
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v219 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v199 = (char *)v171 - v56;
  type metadata accessor for _TaskModifier();
  uint64_t v185 = v55;
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v220 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  long long v237 = (char *)v171 - v58;
  uint64_t v190 = v57;
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v221 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v214 = (char *)v171 - v60;
  uint64_t v202 = v59;
  uint64_t v61 = type metadata accessor for ModifiedContent();
  uint64_t v223 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v218 = (char *)v171 - v62;
  uint64_t v287 = v50;
  uint64_t v288 = v51;
  uint64_t v289 = v234;
  uint64_t v290 = v233;
  uint64_t v175 = swift_getOpaqueTypeConformance2();
  uint64_t v267 = v175;
  char v268 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v179 = swift_getWitnessTable();
  uint64_t v265 = v179;
  long long v266 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v182 = v63;
  uint64_t v64 = sub_1000A3E3C(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
  uint64_t v263 = v63;
  uint64_t v264 = v64;
  uint64_t v189 = swift_getWitnessTable();
  uint64_t v261 = v189;
  uint64_t v262 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v201 = swift_getWitnessTable();
  uint64_t v259 = v201;
  uint64_t v260 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v65 = swift_getWitnessTable();
  unint64_t v66 = sub_1000604E8();
  uint64_t v67 = v61;
  uint64_t v196 = v61;
  uint64_t v197 = v65;
  uint64_t v68 = v239;
  uint64_t v287 = v61;
  uint64_t v288 = v239;
  uint64_t v289 = v65;
  uint64_t v290 = v66;
  unint64_t v69 = v66;
  uint64_t v208 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  uint64_t v70 = swift_getOpaqueTypeMetadata2();
  uint64_t v204 = v70;
  uint64_t v216 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v195 = (char *)v171 - v71;
  uint64_t v287 = v67;
  uint64_t v288 = v68;
  uint64_t v289 = v65;
  uint64_t v290 = v69;
  unint64_t v192 = v69;
  uint64_t v203 = swift_getOpaqueTypeConformance2();
  uint64_t v287 = v70;
  uint64_t v288 = v68;
  uint64_t v289 = v203;
  uint64_t v290 = v69;
  uint64_t v205 = swift_getOpaqueTypeMetadata2();
  uint64_t v212 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v194 = (char *)v171 - v72;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v213 = type metadata accessor for ModifiedContent();
  uint64_t v215 = *(void *)(v213 - 8);
  __chkstk_darwin(v213);
  uint64_t v200 = (char *)v171 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  uint64_t v207 = (void *)((char *)v171 - v75);
  uint64_t v76 = v248;
  uint64_t v254 = v248;
  uint64_t v77 = v244;
  uint64_t v255 = v244;
  uint64_t v78 = v249;
  uint64_t v256 = v249;
  uint64_t v79 = v187;
  NavigationStack.init<>(root:)();
  sub_1000A3158();
  uint64_t v80 = (void (*)(void, void, void))v242;
  uint64_t v81 = v174;
  uint64_t v82 = v172;
  sub_100052DA8((uint64_t)v242);
  sub_10006A548((uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, (uint64_t)v80, (uint64_t)sub_100063848, 0, v81, v82, v232);
  (*(void (**)(void (*)(void, void, void), uint64_t))(v243 + 8))(v80, v247);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v79, v81);
  uint64_t v83 = v250;
  uint64_t v84 = *(void **)(v250 + 16);
  uint64_t v247 = v250 + 16;
  uint64_t v242 = v84;
  uint64_t v85 = v245;
  uint64_t v86 = v251;
  ((void (*)(char *, uint64_t, uint64_t))v84)(v245, v78, v251);
  uint64_t v87 = *(unsigned __int8 *)(v83 + 80);
  uint64_t v88 = ((v87 + 32) & ~v87) + v246;
  uint64_t v89 = (v87 + 32) & ~v87;
  uint64_t v241 = v89;
  uint64_t v246 = v87 | 7;
  uint64_t v240 = v88;
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v76;
  *(void *)(v90 + 24) = v77;
  uint64_t v243 = *(void *)(v83 + 32);
  uint64_t v250 = v83 + 32;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v90 + v89, v85, v86);
  sub_1000A3E3C(&qword_100199910, type metadata accessor for CGSize);
  long long v91 = v191;
  uint64_t v92 = v178;
  unint64_t v93 = v232;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v210 + 8))(v93, v92);
  unint64_t v232 = sub_1000A323C();
  uint64_t v94 = v193;
  uint64_t v95 = v181;
  sub_10006B310();
  (*(void (**)(char *, uint64_t))(v209 + 8))(v91, v95);
  long long v96 = v85;
  long long v97 = v85;
  uint64_t v98 = v249;
  uint64_t v99 = v251;
  ((void (*)(char *, uint64_t, uint64_t))v242)(v97, v249, v251);
  uint64_t v100 = swift_allocObject();
  uint64_t v101 = v248;
  uint64_t v102 = v244;
  *(void *)(v100 + 16) = v248;
  *(void *)(v100 + 24) = v102;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v100 + v241, v96, v99);
  sub_1000606EC();
  uint64_t v103 = v184;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v217 + 8))(v94, v103);
  long long v104 = v224;
  sub_10009A768();
  uint64_t v252 = v101;
  uint64_t v105 = v101;
  uint64_t v253 = v102;
  swift_getKeyPath();
  uint64_t v106 = v225;
  Bindable<A>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v226 + 8))(v104, v106);
  LODWORD(v232) = v289;
  long long v107 = v245;
  uint64_t v108 = v98;
  uint64_t v109 = v99;
  uint64_t v110 = v99;
  char v111 = (void (*)(char *, uint64_t, uint64_t))v242;
  ((void (*)(char *, uint64_t, uint64_t))v242)(v245, v108, v110);
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v105;
  *(void *)(v112 + 24) = v102;
  uint64_t v113 = v241;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v112 + v241, v107, v109);
  uint64_t v114 = v186;
  uint64_t v115 = v173;
  uint64_t v116 = v236;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v222 + 8))(v116, v115);
  char v117 = v245;
  uint64_t v118 = v249;
  uint64_t v119 = v251;
  v111(v245, v249, v251);
  uint64_t v120 = swift_allocObject();
  uint64_t v121 = v244;
  *(void *)(v120 + 16) = v248;
  *(void *)(v120 + 24) = v121;
  uint64_t v122 = v120 + v113;
  uint64_t v123 = (void (*)(uint64_t, char *, uint64_t))v243;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v122, v117, v119);
  uint64_t v124 = OpaqueTypeMetadata2;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v206 + 8))(v114, v124);
  uint64_t v125 = v118;
  uint64_t v126 = v251;
  uint64_t v127 = (void (*)(char *, uint64_t, uint64_t))v242;
  ((void (*)(char *, uint64_t, uint64_t))v242)(v117, v125, v251);
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = v248;
  *(void *)(v128 + 24) = v121;
  v123(v128 + v241, v117, v126);
  uint64_t v129 = v199;
  uint64_t v130 = v180;
  long long v131 = v235;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v211 + 8))(v131, v130);
  long long v132 = v245;
  uint64_t v133 = v251;
  v127(v245, v249, v251);
  uint64_t v134 = swift_allocObject();
  uint64_t v135 = v244;
  *(void *)(v134 + 16) = v248;
  *(void *)(v134 + 24) = v135;
  uint64_t v136 = v241;
  uint64_t v137 = (void (*)(uint64_t, char *, uint64_t))v243;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v134 + v241, v132, v133);
  long long v138 = v227;
  uint64_t v139 = v185;
  j___sScP13userInitiatedScPvgZ();
  View.task(priority:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v228 + 8))(v138, v229);
  (*(void (**)(char *, uint64_t))(v219 + 8))(v129, v139);
  uint64_t v140 = v245;
  uint64_t v141 = v249;
  uint64_t v142 = v251;
  ((void (*)(char *, uint64_t, uint64_t))v242)(v245, v249, v251);
  uint64_t v143 = swift_allocObject();
  uint64_t v144 = v248;
  uint64_t v145 = v244;
  *(void *)(v143 + 16) = v248;
  *(void *)(v143 + 24) = v145;
  uint64_t v146 = v143 + v136;
  uint64_t v147 = v140;
  v137(v146, v140, v142);
  long long v148 = v214;
  uint64_t v149 = v190;
  uint64_t v150 = v237;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v220 + 8))(v150, v149);
  uint64_t v151 = v251;
  ((void (*)(char *, uint64_t, uint64_t))v242)(v147, v141, v251);
  uint64_t v152 = swift_allocObject();
  *(void *)(v152 + 16) = v144;
  *(void *)(v152 + 24) = v145;
  ((void (*)(uint64_t, char *, uint64_t))v243)(v152 + v241, v147, v151);
  uint64_t v153 = v218;
  uint64_t v154 = v202;
  View.onDisappear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v221 + 8))(v148, v154);
  uint64_t v155 = v230;
  sub_10001CA34(v230);
  uint64_t v156 = v195;
  uint64_t v157 = v196;
  uint64_t v158 = v239;
  uint64_t v159 = v192;
  View.onChange<A>(of:initial:_:)();
  sub_1000067DC(v155, &qword_100198948);
  (*(void (**)(char *, uint64_t))(v223 + 8))(v153, v157);
  sub_10001CA34(v155);
  uint64_t v160 = v194;
  uint64_t v162 = v203;
  uint64_t v161 = v204;
  View.onChange<A>(of:initial:_:)();
  sub_1000067DC(v155, &qword_100198948);
  (*(void (**)(char *, uint64_t))(v216 + 8))(v156, v161);
  uint64_t v287 = v161;
  uint64_t v288 = v158;
  uint64_t v289 = v162;
  uint64_t v290 = v159;
  uint64_t v163 = swift_getOpaqueTypeConformance2();
  uint64_t v164 = v200;
  uint64_t v165 = v205;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v212 + 8))(v160, v165);
  uint64_t v166 = sub_1000A3E3C((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  uint64_t v257 = v163;
  uint64_t v258 = v166;
  uint64_t v167 = v213;
  swift_getWitnessTable();
  uint64_t v168 = v207;
  sub_1000508C8(v207, v164, v167);
  uint64_t v169 = *(void (**)(char *, uint64_t))(v215 + 8);
  v169(v164, v167);
  sub_1000508C8(v231, v168, v167);
  return ((uint64_t (*)(void *, uint64_t))v169)(v168, v167);
}

uint64_t sub_10009C550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v87 = a1;
  uint64_t v83 = a4;
  uint64_t v82 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v82);
  uint64_t v81 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = a2;
  uint64_t v86 = type metadata accessor for PromotionalAssetsView();
  uint64_t v79 = *(void *)(v86 - 8);
  uint64_t v80 = *(void *)(v79 + 64);
  __chkstk_darwin(v86);
  uint64_t v78 = (char *)&v60 - v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019C478);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C480);
  uint64_t v91 = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_10000650C(&qword_10019C488);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C490);
  type metadata accessor for ModifiedContent();
  uint64_t v92 = type metadata accessor for Optional();
  uint64_t v93 = sub_10000650C(&qword_10019C498);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedConformanceWitness();
  v90[18] = AssociatedTypeWitness;
  v90[19] = v9;
  v90[20] = AssociatedConformanceWitness;
  v90[21] = v11;
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t v94 = type metadata accessor for Optional();
  uint64_t v95 = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v64 = type metadata accessor for VStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ObservableScrollView();
  uint64_t v65 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v68 = v15;
  uint64_t v73 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v84 = (char *)&v60 - v16;
  uint64_t v62 = swift_getWitnessTable();
  v90[16] = v62;
  v90[17] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v76 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v91 = v15;
  uint64_t v92 = v67;
  uint64_t v71 = &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>;
  swift_getOpaqueTypeMetadata2();
  sub_10000650C(&qword_10019C4A0);
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v66 = (uint64_t)&v60 - v17;
  sub_10000650C(&qword_10019A3C8);
  uint64_t v74 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  unint64_t v69 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = __chkstk_darwin(v19);
  uint64_t v72 = (uint64_t *)((char *)&v60 - v21);
  uint64_t v23 = v85;
  uint64_t v22 = v86;
  v90[8] = v85;
  v90[9] = a3;
  uint64_t v61 = a3;
  v90[10] = v87;
  uint64_t v25 = v78;
  uint64_t v24 = v79;
  (*(void (**)(char *, __n128))(v79 + 16))(v78, v20);
  unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v23;
  *(void *)(v27 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v27 + v26, v25, v22);
  char v28 = static Axis.Set.vertical.getter();
  sub_1000C44B0(v28, 0, (void (*)(uint64_t))sub_1000A3634, (uint64_t)sub_1000A3644, v27, (uint64_t)v14);
  static Edge.Set.bottom.getter();
  static SafeAreaRegions.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v12);
  uint64_t v29 = v87;
  uint64_t v30 = (uint64_t *)(v87 + *(int *)(v22 + 36));
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v33 = static MainActor.shared.getter();
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = v33;
  v34[3] = &protocol witness table for MainActor;
  v34[4] = v32;
  v34[5] = v31;
  swift_retain();
  uint64_t v35 = static MainActor.shared.getter();
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v35;
  v36[3] = &protocol witness table for MainActor;
  void v36[4] = v32;
  v36[5] = v31;
  Binding.init(get:set:)();
  uint64_t v37 = v91;
  uint64_t v38 = v92;
  LODWORD(v35) = v93;
  v90[2] = v85;
  v90[3] = v61;
  v90[4] = v29;
  void v89[2] = v85;
  v89[3] = v61;
  v89[4] = v29;
  v88[2] = v85;
  v88[3] = v61;
  v88[4] = v29;
  uint64_t v39 = sub_100006560(&qword_10019C518);
  uint64_t v40 = sub_100006560(&qword_10019C520);
  uint64_t v41 = sub_1000A3710(&qword_10019C528, &qword_10019C518, (void (*)(void))sub_100061550);
  unint64_t v42 = sub_1000A378C();
  uint64_t v43 = v67;
  uint64_t v59 = v40;
  uint64_t v44 = v68;
  uint64_t v45 = v66;
  int v46 = v35;
  uint64_t v47 = v84;
  sub_10006A744(v37, v38, v46, (uint64_t)sub_1000A36EC, (uint64_t)v90, (void (*)(uint64_t))sub_1000A36F8, (uint64_t)v89, (uint64_t)sub_1000A3704, v66, (uint64_t)v88, v68, v39, v59, v39, v67, v41, v42, v41);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v44);
  static Animation.easeInOut.getter();
  uint64_t v48 = v81;
  sub_10001CA34(v81);
  uint64_t v91 = v44;
  uint64_t v92 = v43;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = sub_100010484(&qword_10019C4A8, &qword_10019C4A0);
  v90[14] = OpaqueTypeConformance2;
  v90[15] = v50;
  uint64_t v51 = v70;
  uint64_t v52 = swift_getWitnessTable();
  sub_1000604E8();
  uint64_t v53 = v69;
  View.animation<A>(_:value:)();
  swift_release();
  sub_1000067DC(v48, &qword_100198948);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v45, v51);
  uint64_t v54 = sub_100010484(&qword_10019A3D8, &qword_10019A3C8);
  v90[12] = v52;
  v90[13] = v54;
  uint64_t v55 = v74;
  swift_getWitnessTable();
  uint64_t v56 = v72;
  sub_1000508C8(v72, v53, v55);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v77 + 8);
  v57(v53, v55);
  sub_1000508C8(v83, v56, v55);
  return ((uint64_t (*)(void *, uint64_t))v57)(v56, v55);
}

uint64_t sub_10009D158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v17 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  sub_10000650C(&qword_10019C478);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C480);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FeaturedVideosView();
  sub_10000650C(&qword_10019C488);
  type metadata accessor for ModifiedContent();
  sub_10000650C(&qword_10019C490);
  type metadata accessor for ModifiedContent();
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v27 = sub_10000650C(&qword_10019C498);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v24 = swift_getAssociatedConformanceWitness();
  type metadata accessor for PhoneWallpapersWatchFacesView();
  type metadata accessor for PhoneWallpaperView();
  type metadata accessor for Optional();
  type metadata accessor for WatchFacesView();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  type metadata accessor for _ConditionalContent();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v29 = type metadata accessor for AppModule();
  swift_getTupleTypeMetadata();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for VStack();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v16 - v12);
  static HorizontalAlignment.leading.getter();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a1;
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  sub_1000508C8(v13, v10, v7);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  sub_1000508C8(v17, v13, v7);
  return ((uint64_t (*)(void *, uint64_t))v14)(v13, v7);
}

uint64_t sub_10009D65C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  v442 = a3;
  v443 = a2;
  uint64_t v444 = a1;
  uint64_t v410 = a4;
  uint64_t v408 = type metadata accessor for AppModule();
  __chkstk_darwin(v408);
  v429 = (uint64_t (**)())((char *)&v336 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v409 = (uint64_t)&v336 - v6;
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  v435 = AssociatedTypeWitness;
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PhoneWallpaperView();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v430 = AssociatedConformanceWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for WatchFacesView();
  uint64_t v16 = type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  uint64_t v17 = type metadata accessor for TupleView();
  uint64_t v351 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  v350 = (char *)&v336 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  __chkstk_darwin(v19 - 8);
  v339 = (char *)&v336 - v20;
  uint64_t v349 = v15;
  uint64_t v346 = *(void *)(v15 - 8);
  __chkstk_darwin(v21);
  uint64_t v340 = (uint64_t)&v336 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v341 = (char **)((char *)&v336 - v24);
  uint64_t v377 = v16;
  uint64_t v347 = *(void *)(v16 - 8);
  __chkstk_darwin(v25);
  v348 = (char **)((char *)&v336 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v376 = (uint64_t)&v336 - v28;
  uint64_t v29 = type metadata accessor for Optional();
  __chkstk_darwin(v29 - 8);
  v336 = (char *)&v336 - v30;
  uint64_t v356 = v11;
  uint64_t v342 = *(void *)(v11 - 8);
  __chkstk_darwin(v31);
  uint64_t v337 = (uint64_t)&v336 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v338 = (char **)((char *)&v336 - v34);
  uint64_t v378 = v12;
  uint64_t v374 = *(void *)(v12 - 8);
  __chkstk_darwin(v35);
  v375 = (char **)((char *)&v336 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v37);
  uint64_t v395 = (uint64_t)&v336 - v38;
  uint64_t v352 = v10;
  uint64_t v353 = v9;
  v474 = (void *)v9;
  v475 = (void *)v13;
  uint64_t v354 = v14;
  uint64_t v355 = v13;
  uint64_t v476 = v10;
  uint64_t v477 = v14;
  uint64_t v39 = type metadata accessor for PhoneWallpapersWatchFacesView();
  uint64_t v345 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  v344 = (char **)((char *)&v336 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v41);
  v343 = (char **)((char *)&v336 - v42);
  uint64_t v426 = v43;
  uint64_t v428 = v17;
  uint64_t v44 = type metadata accessor for _ConditionalContent();
  uint64_t v406 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  v379 = (char *)&v336 - v45;
  uint64_t v433 = v46;
  uint64_t v407 = type metadata accessor for Optional();
  uint64_t v427 = *(void *)(v407 - 8);
  __chkstk_darwin(v407);
  v440 = (char *)&v336 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  uint64_t v425 = (uint64_t)&v336 - v49;
  uint64_t v367 = type metadata accessor for _TaskModifier();
  __chkstk_darwin(v367);
  v371 = (char *)&v336 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v372 = type metadata accessor for TaskPriority();
  uint64_t v370 = *(void *)(v372 - 8);
  __chkstk_darwin(v372);
  v369 = (char *)&v336 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v399 = sub_100006560(&qword_10019C538);
  __chkstk_darwin(v399);
  v368 = (char *)&v336 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  uint64_t v373 = (uint64_t)&v336 - v54;
  uint64_t v397 = sub_100006560(&qword_10019C540);
  __chkstk_darwin(v397);
  uint64_t v398 = (uint64_t)&v336 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v360 = *(void *)(v56 - 8);
  uint64_t v361 = v56;
  __chkstk_darwin(v56);
  v358 = (char *)&v336 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = type metadata accessor for SetlistView(0);
  __chkstk_darwin(v363);
  v357 = (char **)((char *)&v336 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = sub_100006560(&qword_10019C548);
  uint64_t v364 = *(void *)(v59 - 8);
  uint64_t v365 = v59;
  __chkstk_darwin(v59);
  v362 = (char *)&v336 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v396 = sub_100006560(&qword_10019C550);
  __chkstk_darwin(v396);
  v359 = (char *)&v336 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  uint64_t v366 = (uint64_t)&v336 - v63;
  uint64_t v405 = sub_100006560(&qword_10019C498);
  __chkstk_darwin(v405);
  uint64_t v432 = (uint64_t)&v336 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  uint64_t v439 = (uint64_t)&v336 - v66;
  uint64_t v67 = swift_getAssociatedTypeWitness();
  uint64_t v68 = type metadata accessor for Optional();
  __chkstk_darwin(v68);
  v389 = (char *)&v336 - v69;
  uint64_t v70 = type metadata accessor for Binding();
  __chkstk_darwin(v70 - 8);
  v388 = (char *)&v336 - v71;
  uint64_t v72 = v443;
  uint64_t v73 = v442;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v74 = type metadata accessor for Bindable();
  uint64_t v384 = *(void *)(v74 - 8);
  uint64_t v385 = v74;
  __chkstk_darwin(v74);
  v383 = (char *)&v336 - v75;
  uint64_t v76 = swift_getAssociatedConformanceWitness();
  uint64_t v391 = v67;
  uint64_t v382 = v76;
  uint64_t v77 = type metadata accessor for FeaturedVideosView();
  uint64_t v387 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v386 = (uint64_t)&v336 - v78;
  sub_10000650C(&qword_10019C488);
  uint64_t v424 = v77;
  uint64_t v79 = type metadata accessor for ModifiedContent();
  uint64_t v394 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v390 = (uint64_t)&v336 - v80;
  sub_10000650C(&qword_10019C490);
  uint64_t v423 = v79;
  uint64_t v81 = type metadata accessor for ModifiedContent();
  uint64_t v401 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  v392 = (char *)&v336 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v83);
  v393 = (char *)&v336 - v84;
  uint64_t v422 = v85;
  uint64_t v438 = type metadata accessor for Optional();
  uint64_t v419 = *(void *)(v438 - 8);
  __chkstk_darwin(v438);
  v437 = (char **)((char *)&v336 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v87);
  uint64_t v436 = (uint64_t)&v336 - v88;
  uint64_t v89 = v73;
  uint64_t v445 = type metadata accessor for PromotionalAssetsView();
  uint64_t v441 = *(void *)(v445 - 8);
  uint64_t v415 = *(void *)(v441 + 64);
  __chkstk_darwin(v445);
  v434 = (char *)&v336 - v90;
  v412 = (void *)type metadata accessor for CoordinateSpace();
  uint64_t v431 = *(v412 - 1);
  __chkstk_darwin(v412);
  uint64_t v411 = (uint64_t)&v336 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for TourPhotosView();
  type metadata accessor for _ConditionalContent();
  uint64_t v92 = type metadata accessor for Group();
  uint64_t v430 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v94 = (char *)&v336 - v93;
  sub_10000650C(&qword_10019C478);
  uint64_t v95 = type metadata accessor for ModifiedContent();
  uint64_t v404 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  long long v97 = (char *)&v336 - v96;
  v403 = (char *)&v336 - v96;
  sub_10000650C(&qword_10019C480);
  uint64_t v421 = type metadata accessor for ModifiedContent();
  uint64_t v418 = *(void *)(v421 - 8);
  __chkstk_darwin(v421);
  v420 = (char *)&v336 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v99);
  uint64_t v400 = (uint64_t)&v336 - v100;
  __chkstk_darwin(v101);
  v435 = (char **)((char *)&v336 - v102);
  v446 = v72;
  v447 = v89;
  uint64_t v103 = v444;
  uint64_t v448 = v444;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v105 = sub_1000A38F8();
  uint64_t v490 = WitnessTable;
  unint64_t v491 = v105;
  uint64_t v106 = swift_getWitnessTable();
  Group<A>.init(content:)();
  uint64_t v489 = v106;
  uint64_t v107 = swift_getWitnessTable();
  sub_1000A394C();
  uint64_t v108 = v411;
  sub_100052DA8(v411);
  sub_10006A548((uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, v108, (uint64_t)sub_100025A40, 0, v92, v107, (uint64_t)v97);
  uint64_t v109 = *(void (**)(uint64_t, void *))(v431 + 8);
  v431 += 8;
  v381 = v109;
  v109(v108, v412);
  (*(void (**)(char *, uint64_t))(v430 + 8))(v94, v92);
  uint64_t v110 = v441;
  char v111 = *(void (**)(char *, uint64_t, uint64_t))(v441 + 16);
  uint64_t v112 = v434;
  uint64_t v113 = v445;
  uint64_t v417 = v441 + 16;
  v416 = v111;
  v111(v434, v103, v445);
  uint64_t v114 = *(unsigned __int8 *)(v110 + 80);
  uint64_t v115 = (v114 + 32) & ~v114;
  uint64_t v116 = v114 | 7;
  uint64_t v430 = v115 + v415;
  uint64_t v117 = swift_allocObject();
  uint64_t v118 = v442;
  *(void *)(v117 + 16) = v443;
  *(void *)(v117 + 24) = v118;
  uint64_t v415 = v115;
  uint64_t v119 = *(void (**)(uint64_t, char *, uint64_t))(v110 + 32);
  uint64_t v441 = v110 + 32;
  v413 = v119;
  v119(v117 + v115, v112, v113);
  uint64_t v120 = sub_100010484(&qword_10019C568, &qword_10019C478);
  uint64_t v487 = v107;
  uint64_t v488 = v120;
  uint64_t v121 = swift_getWitnessTable();
  uint64_t v122 = sub_1000A3E3C(&qword_100199910, type metadata accessor for CGSize);
  uint64_t v123 = v400;
  uint64_t v124 = v113;
  uint64_t v380 = v122;
  uint64_t v125 = v403;
  View.onPreferenceChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v404 + 8))(v125, v95);
  uint64_t v126 = sub_100010484(&qword_10019C570, &qword_10019C480);
  uint64_t v485 = v121;
  uint64_t v486 = v126;
  uint64_t v127 = v444;
  uint64_t v128 = v421;
  uint64_t v129 = swift_getWitnessTable();
  sub_1000508C8(v435, v123, v128);
  uint64_t v130 = v418 + 8;
  long long v131 = *(void (**)(uint64_t, uint64_t))(v418 + 8);
  v131(v123, v128);
  sub_10009A728();
  LOBYTE(v123) = sub_1001381D8();
  swift_release();
  uint64_t v414 = v116;
  uint64_t v404 = v130;
  v403 = (char *)v131;
  uint64_t v402 = v129;
  if (v123)
  {
    uint64_t v132 = v391;
    type metadata accessor for FeaturedVideosViewModel();
    sub_10009A728();
    uint64_t v133 = sub_10013745C();
    uint64_t v135 = v134;
    swift_release();
    sub_10009A728();
    uint64_t v136 = sub_1001382F8();
    swift_release();
    sub_10009A728();
    BOOL v137 = sub_100138564();
    swift_release();
    sub_10008C188(v133, v135, v136, v137);
    long long v138 = v383;
    uint64_t v139 = sub_10009A768();
    __chkstk_darwin(v139);
    uint64_t v140 = v442;
    *(&v336 - 2) = v443;
    *(&v336 - 1) = v140;
    swift_getKeyPath();
    uint64_t v141 = (uint64_t)v388;
    uint64_t v142 = v385;
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v384 + 8))(v138, v142);
    uint64_t v143 = (uint64_t)v389;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v389, 1, 1, v132);
    uint64_t v144 = v386;
    sub_1000D8AD0(v141, v143, v386);
    uint64_t v145 = v424;
    uint64_t v146 = swift_getWitnessTable();
    sub_1000A4154();
    uint64_t v147 = v411;
    sub_100052DA8(v411);
    uint64_t v148 = v390;
    sub_10006A548((uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v147, (uint64_t)sub_100063848, 0, v145, v146, v390);
    v381(v147, v412);
    (*(void (**)(uint64_t, uint64_t))(v387 + 8))(v144, v145);
    uint64_t v149 = v434;
    v416(v434, v444, v445);
    uint64_t v150 = swift_allocObject();
    *(void *)(v150 + 16) = v443;
    *(void *)(v150 + 24) = v140;
    v413(v150 + v415, v149, v445);
    uint64_t v151 = sub_100010484(&qword_10019C578, &qword_10019C488);
    uint64_t v451 = v146;
    uint64_t v452 = v151;
    uint64_t v152 = v423;
    uint64_t v153 = swift_getWitnessTable();
    uint64_t v154 = v392;
    View.onPreferenceChange<A>(_:perform:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v394 + 8))(v148, v152);
    uint64_t v155 = sub_100010484(&qword_10019C580, &qword_10019C490);
    uint64_t v449 = v153;
    uint64_t v156 = v444;
    uint64_t v450 = v155;
    uint64_t v124 = v445;
    uint64_t v157 = v422;
    swift_getWitnessTable();
    uint64_t v158 = v393;
    sub_1000508C8(v393, v154, v157);
    uint64_t v159 = v401;
    uint64_t v160 = *(void (**)(char *, uint64_t))(v401 + 8);
    uint64_t v161 = v154;
    uint64_t v162 = v156;
    v160(v161, v157);
    uint64_t v163 = v437;
    sub_1000508C8(v437, v158, v157);
    v160(v158, v157);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v159 + 56))(v163, 0, 1, v157);
    uint64_t v164 = v442;
    uint64_t v165 = (uint64_t)v163;
  }
  else
  {
    uint64_t v166 = v437;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v401 + 56))(v437, 1, 1, v422);
    uint64_t v167 = swift_getWitnessTable();
    uint64_t v168 = sub_100010484(&qword_10019C578, &qword_10019C488);
    uint64_t v483 = v167;
    uint64_t v484 = v168;
    uint64_t v169 = swift_getWitnessTable();
    uint64_t v170 = sub_100010484(&qword_10019C580, &qword_10019C490);
    uint64_t v481 = v169;
    uint64_t v482 = v170;
    swift_getWitnessTable();
    uint64_t v164 = v442;
    uint64_t v165 = (uint64_t)v166;
    uint64_t v162 = v127;
  }
  sub_100050904(v165, v436);
  uint64_t v171 = v419 + 8;
  uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v419 + 8);
  v172(v165, v438);
  sub_10009A728();
  BOOL v173 = sub_10013871C();
  swift_release();
  uint64_t v174 = v433;
  uint64_t v431 = v171;
  v412 = v172;
  if (v173)
  {
    sub_10009A728();
    sub_10013881C((uint64_t)&v470);
    swift_release();
    if (v472)
    {
      sub_1000358CC(&v470, (uint64_t)&v474);
      uint64_t v175 = type metadata accessor for SetlistViewModel();
      sub_10009A728();
      uint64_t v176 = sub_10013745C();
      uint64_t v178 = v177;
      swift_release();
      sub_1000487B4((uint64_t)&v474, (uint64_t)&v470);
      sub_10009A728();
      char v179 = sub_1001388E8();
      swift_release();
      uint64_t v180 = v472;
      uint64_t v181 = v473;
      uint64_t v182 = sub_1000299B8((uint64_t)&v470, v472);
      uint64_t v183 = sub_100035754(v176, v178, v182, v179 & 1, v175, v180, v181);
      sub_100029A08((uint64_t)&v470);
      uint64_t v465 = v183;
      State.init(wrappedValue:)();
      uint64_t v184 = *((void *)&v470 + 1);
      uint64_t v185 = v357;
      void *v357 = v470;
      v185[1] = v184;
      type metadata accessor for RemoteViewConfiguration();
      sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
      v185[2] = EnvironmentObject.init()();
      v185[3] = v186;
      uint64_t v187 = v363;
      uint64_t v188 = (void *)((char *)v185 + *(int *)(v363 + 24));
      *uint64_t v188 = swift_getKeyPath();
      sub_100006560(&qword_100198940);
      swift_storeEnumTagMultiPayload();
      uint64_t v189 = v358;
      static AccessibilityChildBehavior.contain.getter();
      uint64_t v190 = sub_1000A3E3C(&qword_10019C5A8, (void (*)(uint64_t))type metadata accessor for SetlistView);
      uint64_t v191 = v362;
      View.accessibilityElement(children:)();
      (*(void (**)(char *, uint64_t))(v360 + 8))(v189, v361);
      sub_1000A4094((uint64_t)v185, type metadata accessor for SetlistView);
      if (qword_100198108 != -1) {
        swift_once();
      }
      *(void *)&long long v470 = v187;
      *((void *)&v470 + 1) = v190;
      swift_getOpaqueTypeConformance2();
      uint64_t v192 = (uint64_t)v359;
      uint64_t v193 = v365;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v364 + 8))(v191, v193);
      uint64_t v194 = v366;
      sub_10001D6D8(v192, v366, &qword_10019C550);
      sub_1000066D4(v194, v398, &qword_10019C550);
      swift_storeEnumTagMultiPayload();
      sub_1000A3C30();
      sub_1000A3D3C();
      uint64_t v195 = v432;
      _ConditionalContent<>.init(storage:)();
      sub_1000067DC(v194, &qword_10019C550);
      sub_100029A08((uint64_t)&v474);
      uint64_t v196 = sub_100006560(&qword_10019C588);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56))(v195, 0, 1, v196);
      sub_10001D6D8(v195, v439, &qword_10019C498);
      uint64_t v197 = (uint64_t)v440;
      uint64_t v124 = v445;
      uint64_t v174 = v433;
      goto LABEL_15;
    }
    sub_1000067DC((uint64_t)&v470, &qword_10019C5D0);
  }
  sub_10009A728();
  if (!*(void *)(v162 + *(int *)(v124 + 40)))
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
    return result;
  }
  swift_retain();
  char v198 = sub_100138938();
  swift_release();
  swift_release();
  if (v198)
  {
    sub_10009A728();
    LODWORD(v411) = sub_100138A58();
    swift_release();
    uint64_t v199 = v434;
    uint64_t v200 = v124;
    uint64_t v201 = v416;
    v416(v434, v444, v200);
    uint64_t v202 = swift_allocObject();
    *(void *)(v202 + 16) = v443;
    *(void *)(v202 + 24) = v164;
    uint64_t v203 = v415;
    uint64_t v204 = v174;
    uint64_t v205 = v413;
    v413(v202 + v415, v199, v445);
    v201(v199, v444, v445);
    uint64_t v206 = v205;
    uint64_t v174 = v204;
    uint64_t v207 = swift_allocObject();
    uint64_t v208 = v442;
    *(void *)(v207 + 16) = v443;
    *(void *)(v207 + 24) = v208;
    v206(v207 + v203, v199, v445);
    uint64_t v209 = v369;
    static TaskPriority.userInitiated.getter();
    uint64_t v211 = v370;
    uint64_t v210 = v371;
    uint64_t v212 = v372;
    (*(void (**)(char *, char *, uint64_t))(v370 + 16))(&v371[*(int *)(v367 + 20)], v209, v372);
    *uint64_t v210 = &unk_10019C5C8;
    v210[1] = v207;
    uint64_t v213 = (uint64_t)v368;
    sub_1000A4024((uint64_t)v210, (uint64_t)&v368[*(int *)(v399 + 36)], (uint64_t (*)(void))&type metadata accessor for _TaskModifier);
    *(unsigned char *)uint64_t v213 = v411 & 1;
    *(void *)(v213 + 8) = sub_1000A3E88;
    *(void *)(v213 + 16) = v202;
    swift_retain();
    sub_1000A4094((uint64_t)v210, (uint64_t (*)(void))&type metadata accessor for _TaskModifier);
    uint64_t v214 = v209;
    uint64_t v164 = v442;
    (*(void (**)(char *, uint64_t))(v211 + 8))(v214, v212);
    swift_release();
    uint64_t v215 = v373;
    sub_10001D6D8(v213, v373, &qword_10019C538);
    sub_1000066D4(v215, v398, &qword_10019C538);
    swift_storeEnumTagMultiPayload();
    sub_1000A3C30();
    sub_1000A3D3C();
    uint64_t v216 = v432;
    _ConditionalContent<>.init(storage:)();
    uint64_t v217 = v215;
    uint64_t v124 = v445;
    sub_1000067DC(v217, &qword_10019C538);
    uint64_t v218 = sub_100006560(&qword_10019C588);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v218 - 8) + 56))(v216, 0, 1, v218);
    sub_10001D6D8(v216, v439, &qword_10019C498);
  }
  else
  {
    uint64_t v219 = sub_100006560(&qword_10019C588);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v219 - 8) + 56))(v439, 1, 1, v219);
  }
  uint64_t v197 = (uint64_t)v440;
LABEL_15:
  sub_10009A728();
  id v220 = [self currentDevice];
  id v221 = [v220 userInterfaceIdiom];
  swift_release();

  if (v221)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v406 + 56))(v197, 1, 1, v174);
    uint64_t v222 = swift_getWitnessTable();
    uint64_t v223 = swift_getWitnessTable();
    uint64_t v479 = v222;
    uint64_t v480 = v223;
    swift_getWitnessTable();
    sub_100050904(v197, v425);
    uint64_t v224 = *(void (**)(uint64_t, uint64_t))(v427 + 8);
    uint64_t v411 = (v427 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v225 = v407;
    v224(v197, v407);
    uint64_t v226 = v408;
    uint64_t v227 = v124;
    uint64_t v228 = v434;
    uint64_t v229 = v415;
    uint64_t v230 = v443;
    v416(v434, v444, v227);
  }
  else
  {
    sub_10009A728();
    char v231 = sub_100138D44();
    swift_release();
    sub_10009A728();
    if (v231)
    {
      uint64_t v411 = sub_10013745C();
      uint64_t v401 = v232;
      swift_release();
      sub_10009A728();
      uint64_t v233 = sub_100137A04();
      uint64_t v400 = v234;
      swift_release();
      type metadata accessor for PhoneWallpaperViewModel();
      sub_10009A728();
      uint64_t v235 = sub_10013745C();
      uint64_t v237 = v236;
      swift_release();
      sub_10009A728();
      uint64_t v238 = sub_100138DA4();
      swift_release();
      sub_10009A728();
      sub_100139010();
      double v240 = v239;
      swift_release();
      sub_10009A728();
      double v241 = sub_100137C7C();
      swift_release();
      sub_10009A728();
      BOOL v242 = sub_100139280();
      swift_release();
      sub_100080BA0(v235, v237, v238, v242, v240, v241);
      type metadata accessor for WatchFacesViewModel();
      sub_10009A728();
      uint64_t v243 = sub_10013745C();
      uint64_t v245 = v244;
      swift_release();
      sub_10009A728();
      uint64_t v246 = sub_1001392A0();
      swift_release();
      sub_10009A728();
      sub_100139010();
      double v248 = v247;
      swift_release();
      sub_10009A728();
      double v249 = sub_100137C7C();
      swift_release();
      sub_10009A728();
      BOOL v250 = sub_100139280();
      swift_release();
      sub_1000B2C48(v243, v245, v246, v250, v248, v249);
      uint64_t v251 = v344;
      uint64_t v252 = v440;
      sub_1001313F8(v411, v401, v233, v400, (uint64_t)v344);
      uint64_t v253 = v426;
      swift_getWitnessTable();
      uint64_t v254 = v343;
      sub_1000508C8(v343, v251, v253);
      uint64_t v255 = *(void (**)(void *, uint64_t))(v345 + 8);
      v255(v251, v253);
      sub_1000508C8(v251, v254, v253);
      swift_getWitnessTable();
      uint64_t v256 = v379;
      sub_100050B34((uint64_t)v251, v253);
      v255(v251, v253);
      v255(v254, v253);
    }
    else
    {
      char v257 = sub_10013950C();
      swift_release();
      if (v257)
      {
        uint64_t v258 = v353;
        type metadata accessor for PhoneWallpaperViewModel();
        sub_10009A728();
        uint64_t v259 = sub_10013745C();
        uint64_t v261 = v260;
        swift_release();
        sub_10009A728();
        uint64_t v262 = sub_100138DA4();
        swift_release();
        sub_10009A728();
        sub_100139010();
        double v264 = v263;
        swift_release();
        sub_10009A728();
        double v265 = sub_100137C7C();
        swift_release();
        sub_10009A728();
        BOOL v266 = sub_100139280();
        swift_release();
        sub_100080BA0(v259, v261, v262, v266, v264, v265);
        uint64_t v267 = (uint64_t)v336;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v258 - 8) + 56))(v336, 1, 1, v258);
        uint64_t v268 = v337;
        sub_10000AF88(v267, v337);
        uint64_t v269 = v356;
        swift_getWitnessTable();
        uint64_t v270 = v338;
        sub_1000508C8(v338, v268, v269);
        uint64_t v271 = v342;
        uint64_t v272 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
        v272(v268, v269);
        uint64_t v273 = v375;
        sub_1000508C8(v375, v270, v269);
        v272((uint64_t)v270, v269);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v271 + 56))(v273, 0, 1, v269);
      }
      else
      {
        uint64_t v273 = v375;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v342 + 56))(v375, 1, 1, v356);
        swift_getWitnessTable();
      }
      uint64_t v274 = v347;
      sub_100050904((uint64_t)v273, v395);
      uint64_t v411 = *(void *)(v374 + 8);
      uint64_t v401 = v374 + 8;
      ((void (*)(void *, uint64_t))v411)(v273, v378);
      sub_10009A728();
      char v275 = sub_100139798();
      swift_release();
      if (v275)
      {
        uint64_t v276 = v355;
        uint64_t v400 = type metadata accessor for WatchFacesViewModel();
        sub_10009A728();
        uint64_t v277 = sub_10013745C();
        uint64_t v279 = v278;
        swift_release();
        sub_10009A728();
        uint64_t v280 = sub_1001392A0();
        swift_release();
        sub_10009A728();
        sub_100139010();
        double v282 = v281;
        swift_release();
        sub_10009A728();
        double v283 = sub_100137C7C();
        swift_release();
        sub_10009A728();
        BOOL v284 = sub_100139280();
        swift_release();
        sub_1000B2C48(v277, v279, v280, v284, v282, v283);
        uint64_t v285 = (uint64_t)v339;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v276 - 8) + 56))(v339, 1, 1, v276);
        uint64_t v286 = v340;
        sub_100015134(v285, v340);
        uint64_t v287 = v349;
        swift_getWitnessTable();
        uint64_t v288 = v341;
        sub_1000508C8(v341, v286, v287);
        uint64_t v289 = v346;
        uint64_t v290 = *(void (**)(uint64_t, uint64_t))(v346 + 8);
        v290(v286, v287);
        uint64_t v291 = v348;
        sub_1000508C8(v348, v288, v287);
        v290((uint64_t)v288, v287);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v289 + 56))(v291, 0, 1, v287);
        uint64_t v292 = v376;
        v293 = v291;
        sub_100050904((uint64_t)v291, v376);
        v294 = *(void (**)(void *, uint64_t))(v274 + 8);
        uint64_t v400 = (v274 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v295 = v291;
      }
      else
      {
        v293 = v348;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v346 + 56))(v348, 1, 1, v349);
        swift_getWitnessTable();
        uint64_t v292 = v376;
        sub_100050904((uint64_t)v293, v376);
        v294 = *(void (**)(void *, uint64_t))(v274 + 8);
        uint64_t v400 = (v274 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v295 = v293;
      }
      uint64_t v296 = v377;
      v294(v295, v377);
      uint64_t v399 = (uint64_t)v294;
      v297 = v375;
      uint64_t v298 = v378;
      (*(void (**)(void *, uint64_t, uint64_t))(v374 + 16))(v375, v395, v378);
      v474 = v297;
      (*(void (**)(void *, uint64_t, uint64_t))(v274 + 16))(v293, v292, v296);
      v475 = v293;
      *(void *)&long long v470 = v298;
      *((void *)&v470 + 1) = v296;
      uint64_t v456 = swift_getWitnessTable();
      uint64_t v465 = swift_getWitnessTable();
      uint64_t v455 = swift_getWitnessTable();
      uint64_t v466 = swift_getWitnessTable();
      uint64_t v299 = (uint64_t)v350;
      sub_100050970((uint64_t *)&v474, 2uLL, (uint64_t)&v470);
      v294(v293, v296);
      v300 = (void (*)(uint64_t, uint64_t))v411;
      ((void (*)(void *, uint64_t))v411)(v297, v298);
      uint64_t v301 = v426;
      swift_getWitnessTable();
      uint64_t v302 = v428;
      swift_getWitnessTable();
      v303 = v379;
      sub_100050C2C(v299, v301, v302);
      (*(void (**)(uint64_t, uint64_t))(v351 + 8))(v299, v302);
      ((void (*)(uint64_t, uint64_t))v399)(v376, v377);
      uint64_t v256 = v303;
      v300(v395, v298);
      uint64_t v252 = v440;
    }
    uint64_t v304 = v427;
    uint64_t v305 = swift_getWitnessTable();
    uint64_t v306 = swift_getWitnessTable();
    uint64_t v453 = v305;
    uint64_t v454 = v306;
    uint64_t v307 = v433;
    swift_getWitnessTable();
    sub_1000508C8(v252, v256, v307);
    uint64_t v308 = v406;
    (*(void (**)(char *, uint64_t))(v406 + 8))(v256, v307);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v308 + 56))(v252, 0, 1, v307);
    sub_100050904((uint64_t)v252, v425);
    v309 = *(void (**)(char *, uint64_t))(v304 + 8);
    uint64_t v411 = (v304 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v225 = v407;
    v309(v252, v407);
    uint64_t v226 = v408;
    uint64_t v164 = v442;
    uint64_t v230 = v443;
    uint64_t v227 = v445;
    uint64_t v228 = v434;
    uint64_t v229 = v415;
    v416(v434, v444, v445);
  }
  uint64_t v310 = swift_allocObject();
  *(void *)(v310 + 16) = v230;
  *(void *)(v310 + 24) = v164;
  v413(v310 + v229, v228, v227);
  v311 = v429;
  *v429 = sub_1000A3A50;
  v311[1] = (uint64_t (*)())v310;
  *((unsigned char *)v311 + 16) = 0;
  type metadata accessor for RemoteViewConfiguration();
  sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
  v311[3] = (uint64_t (*)())EnvironmentObject.init()();
  v311[4] = v312;
  v313 = (uint64_t *)((char *)v311 + *(int *)(v226 + 24));
  uint64_t *v313 = swift_getKeyPath();
  sub_100006560(&qword_1001982C0);
  swift_storeEnumTagMultiPayload();
  uint64_t v314 = v409;
  sub_1000A3ADC((uint64_t)v311, v409);
  uint64_t v315 = (uint64_t)v420;
  uint64_t v316 = v421;
  (*(void (**)(char *, void *))(v418 + 16))(v420, v435);
  v474 = (void *)v315;
  v317 = v437;
  uint64_t v318 = v438;
  (*(void (**)(void *, uint64_t))(v419 + 16))(v437, v436);
  v475 = v317;
  uint64_t v319 = v432;
  sub_1000066D4(v439, v432, &qword_10019C498);
  uint64_t v476 = v319;
  uint64_t v320 = v427 + 16;
  v321 = v440;
  uint64_t v322 = v425;
  (*(void (**)(char *, uint64_t, uint64_t))(v427 + 16))(v440, v425, v225);
  uint64_t v477 = (uint64_t)v321;
  sub_1000A4024(v314, (uint64_t)v311, (uint64_t (*)(void))type metadata accessor for AppModule);
  v478 = v311;
  *(void *)&long long v470 = v316;
  *((void *)&v470 + 1) = v318;
  uint64_t v471 = v405;
  uint64_t v472 = v225;
  uint64_t v473 = v226;
  uint64_t v465 = v402;
  uint64_t v323 = swift_getWitnessTable();
  uint64_t v324 = sub_100010484(&qword_10019C578, &qword_10019C488);
  uint64_t v463 = v323;
  uint64_t v464 = v324;
  uint64_t v325 = v225;
  uint64_t v326 = swift_getWitnessTable();
  uint64_t v327 = sub_100010484(&qword_10019C580, &qword_10019C490);
  uint64_t v461 = v326;
  uint64_t v462 = v327;
  uint64_t v460 = swift_getWitnessTable();
  uint64_t v466 = swift_getWitnessTable();
  unint64_t v467 = sub_1000A3B40();
  uint64_t v328 = swift_getWitnessTable();
  uint64_t v329 = swift_getWitnessTable();
  uint64_t v458 = v328;
  uint64_t v459 = v329;
  uint64_t v457 = swift_getWitnessTable();
  uint64_t v468 = swift_getWitnessTable();
  uint64_t v469 = sub_1000A3E3C(&qword_10019A5C8, (void (*)(uint64_t))type metadata accessor for AppModule);
  sub_100050970((uint64_t *)&v474, 5uLL, (uint64_t)&v470);
  sub_1000A4094(v314, (uint64_t (*)(void))type metadata accessor for AppModule);
  v330 = *(void (**)(uint64_t, uint64_t))(v320 - 8);
  v330(v322, v325);
  sub_1000067DC(v439, &qword_10019C498);
  v331 = (void (*)(void *, uint64_t))v412;
  ((void (*)(uint64_t, uint64_t))v412)(v436, v318);
  uint64_t v332 = v316;
  uint64_t v333 = v316;
  v334 = (uint64_t (*)(char *, uint64_t))v403;
  ((void (*)(void *, uint64_t))v403)(v435, v333);
  sub_1000A4094((uint64_t)v429, (uint64_t (*)(void))type metadata accessor for AppModule);
  v330((uint64_t)v440, v325);
  sub_1000067DC(v432, &qword_10019C498);
  v331(v437, v438);
  return v334(v420, v332);
}

uint64_t sub_1000A0A68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v55 = a3;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v5 = type metadata accessor for Bindable();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v46 = (uint64_t)&v42 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for TourPhotosView();
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v48 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v47 = (uint64_t *)((char *)&v42 - v12);
  uint64_t v13 = type metadata accessor for _ConditionalContent();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v54 = v13;
  __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v42 - v14;
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  BOOL v15 = sub_1001372F4();
  swift_release();
  if (v15)
  {
    type metadata accessor for TourPhotosViewModel();
    sub_10009A728();
    uint64_t v44 = sub_10013745C();
    uint64_t v43 = v16;
    swift_release();
    sub_10009A728();
    uint64_t v42 = sub_1001375EC();
    swift_release();
    sub_10009A728();
    uint64_t v17 = sub_100137A04();
    uint64_t v19 = v18;
    swift_release();
    sub_10009A728();
    double v20 = sub_100137C7C();
    swift_release();
    sub_10009A728();
    sub_100137D04();
    double v22 = v21;
    swift_release();
    sub_10009A728();
    char v23 = sub_100137F64();
    swift_release();
    uint64_t v44 = sub_100064800(v44, v43, v42, v17, v19, v23 & 1, v20, v22);
    uint64_t v24 = v46;
    uint64_t v25 = sub_10009A768();
    __chkstk_darwin(v25);
    *(&v42 - 2) = a1;
    *(&v42 - 1) = a2;
    swift_getKeyPath();
    uint64_t v26 = v51;
    Bindable<A>.subscript.getter();
    swift_release();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v27(v24, v26);
    uint64_t v50 = v59;
    uint64_t v46 = v60;
    uint64_t v43 = v61;
    LODWORD(v42) = v62;
    uint64_t v28 = v49;
    uint64_t v29 = sub_10009A768();
    __chkstk_darwin(v29);
    *(&v42 - 2) = a1;
    *(&v42 - 1) = a2;
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    v27((uint64_t)v28, v26);
    uint64_t v30 = v48;
    sub_1000EBB74(v50, v46, v43, v42, v56, v57, (uint64_t)v48, v58);
    swift_getWitnessTable();
    uint64_t v31 = v47;
    sub_1000508C8(v47, v30, v9);
    uint64_t v32 = *(void (**)(void *, uint64_t))(v45 + 8);
    v32(v30, v9);
    sub_1000508C8(v30, v31, v9);
    sub_1000A38F8();
    uint64_t v33 = v52;
    sub_100050B34((uint64_t)v30, v9);
    v32(v30, v9);
    v32(v31, v9);
  }
  else
  {
    sub_10009A728();
    uint64_t v34 = sub_100137A04();
    uint64_t v36 = v35;
    swift_release();
    sub_10009A728();
    char v37 = sub_100137F64();
    swift_release();
    uint64_t v59 = v34;
    uint64_t v60 = v36;
    LOBYTE(v61) = v37 & 1;
    swift_getWitnessTable();
    sub_1000A38F8();
    uint64_t v33 = v52;
    sub_100050C2C((uint64_t)&v59, v9, (uint64_t)&type metadata for TourPhotosDefaultView);
    swift_bridgeObjectRelease();
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v39 = sub_1000A38F8();
  uint64_t v63 = WitnessTable;
  unint64_t v64 = v39;
  uint64_t v40 = v54;
  swift_getWitnessTable();
  sub_1000508C8(v55, v33, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v33, v40);
}

uint64_t sub_1000A1208@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_100137FCC();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A123C()
{
  return sub_10013805C();
}

void sub_1000A1270(double *a1@<X8>)
{
  *a1 = sub_100138110();
}

uint64_t sub_1000A129C()
{
  return sub_100138198();
}

uint64_t sub_1000A12C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001385A0(a1);
}

uint64_t sub_1000A12E8()
{
  return sub_10013B68C();
}

uint64_t sub_1000A130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(double))
{
  double v6 = *(double *)(a1 + 8);
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  a5(v6);

  return swift_release();
}

uint64_t sub_1000A1374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PromotionalAssetsView();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for MainActor();
  uint64_t v14 = static MainActor.shared.getter();
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v14;
  *((void *)v16 + 3) = &protocol witness table for MainActor;
  *((void *)v16 + 4) = a2;
  *((void *)v16 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], v9, v6);
  sub_1000FA73C((uint64_t)v12, (uint64_t)&unk_10019C5E8, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1000A1568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[6] = v8;
  v6[7] = v7;
  return _swift_task_switch(sub_1000A1604, v8, v7);
}

uint64_t sub_1000A1604()
{
  type metadata accessor for PromotionalAssetsView();
  *(void *)(v0 + 64) = sub_10009A728();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A16AC;
  return sub_100138AF8();
}

uint64_t sub_1000A16AC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000A5588, v3, v2);
}

uint64_t sub_1000A17F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_1000A188C, v5, v4);
}

uint64_t sub_1000A188C()
{
  type metadata accessor for PromotionalAssetsView();
  *(void *)(v0 + 64) = sub_10009A728();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005F74C;
  return sub_100138AF8();
}

uint64_t sub_1000A1934(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8);
  char v23 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  sub_100139A24();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v14 = v13;
  unint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v16 = v10;
  uint64_t v17 = (uint64_t)v23;
  v15(v16, AssociatedTypeWitness);
  sub_10009A728();
  sub_100139A24();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v15(v7, AssociatedTypeWitness);
  sub_10009A728();
  if (*(void *)(a1 + *(int *)(v11 + 40)))
  {
    uint64_t v18 = swift_retain();
    uint64_t v19 = sub_10009130C(v18);
    uint64_t v21 = v20;
    swift_release();
    swift_release();
    type metadata accessor for AppViewModel();
    swift_allocObject();
    return sub_10007F50C(v24, v14, v17, v19, v21, 1);
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1C40()
{
  return swift_release();
}

uint64_t sub_1000A1CB4(uint64_t a1)
{
  sub_10009A728();
  sub_100139EB8();
  swift_release();
  sub_10009A728();
  int v3 = sub_100139ED8();
  uint64_t result = swift_release();
  uint64_t v5 = *(void *)(v1 + *(int *)(a1 + 36) + 8);
  if (v3 != *(unsigned __int8 *)(v5 + 16))
  {
    sub_100006560(&qword_1001999F0);
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(v5 + 16) = v3;
  return result;
}

double sub_1000A1D98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PromotionalAssetsView();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - v11;
  if (*(unsigned char *)(*(void *)(a1 + *(int *)(v13 + 36) + 8) + 16)) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, v12, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v17 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v19 = static Edge.Set.horizontal.getter();
  *(unsigned char *)a4 = 2;
  *(unsigned char *)(a4 + 1) = v14;
  *(void *)(a4 + 8) = sub_1000A3874;
  *(void *)(a4 + 16) = v16;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v17;
  *(unsigned char *)(a4 + 40) = v19;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_1000A1F4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  sub_100139A9C();
  swift_release();
  sub_10009A728();
  uint64_t v3 = sub_10013745C();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v3, v5, 8, 0, 1, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A2078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  uint64_t v5 = sub_100137A04();
  uint64_t v7 = v6;
  swift_release();
  if (v7)
  {
    v29[0] = v5;
    v29[1] = v7;
    sub_10002374C();
    uint64_t v8 = Text.init<A>(_:)();
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    static Font.Weight.semibold.getter();
    uint64_t v13 = Text.fontWeight(_:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v25 = a2;
    char v19 = v18 & 1;
    sub_1000065A4(v8, v10, v12);
    swift_bridgeObjectRelease();
    uint64_t v20 = static Alignment.center.getter();
    sub_100051068(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, v20, v21, v13, v15, v19, v17);
    char v22 = v19;
    a2 = v25;
    sub_1000065A4(v13, v15, v22);
    swift_bridgeObjectRelease();
    double v23 = 0.0;
    if (*(unsigned char *)(*(void *)(a1 + *(int *)(v4 + 36) + 8) + 16)) {
      double v23 = 1.0;
    }
    v27[6] = v26[6];
    v27[7] = v26[7];
    v27[8] = v26[8];
    v27[2] = v26[2];
    v27[3] = v26[3];
    v27[4] = v26[4];
    v27[5] = v26[5];
    v27[0] = v26[0];
    v27[1] = v26[1];
    double v28 = v23;
    nullsub_1(v27);
  }
  else
  {
    sub_1000A3850((uint64_t)v27);
  }
  sub_10001D6D8((uint64_t)v27, (uint64_t)v29, &qword_10019C520);
  return sub_10001D6D8((uint64_t)v29, a2, &qword_10019C520);
}

double sub_1000A2264@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PromotionalAssetsView();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  char v12 = (char *)&v21 - v11;
  if (*(unsigned char *)(*(void *)(a1 + *(int *)(v13 + 36) + 8) + 16)) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, v12, v8);
  static Font.title.getter();
  static Font.Weight.medium.getter();
  uint64_t v17 = Font.weight(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  char v19 = static Edge.Set.horizontal.getter();
  *(unsigned char *)a4 = 1;
  *(unsigned char *)(a4 + 1) = v14;
  *(void *)(a4 + 8) = sub_1000A3830;
  *(void *)(a4 + 16) = v16;
  *(void *)(a4 + 24) = KeyPath;
  *(void *)(a4 + 32) = v17;
  *(unsigned char *)(a4 + 40) = v19;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(unsigned char *)(a4 + 80) = 1;
  return result;
}

uint64_t sub_1000A2414()
{
  uint64_t v0 = type metadata accessor for DismissAction();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView();
  sub_10001D698((uint64_t)v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000A2508()
{
  uint64_t v0 = sub_100006560(&qword_100198948);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  sub_100139AA4();
  swift_release();
  sub_10009A728();
  sub_100139AC4();
  swift_release();
  sub_10009A728();
  sub_10001CA34((uint64_t)v2);
  sub_100139AE4((uint64_t)v2);
  return swift_release();
}

uint64_t sub_1000A2620()
{
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  sub_100139B9C();

  return swift_release();
}

uint64_t sub_1000A2698@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100139C68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A26C8()
{
  return sub_100139CF0();
}

uint64_t sub_1000A26F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v24 = type metadata accessor for PromotionalAssetsView();
  uint64_t v6 = *(void *)(v24 - 8);
  uint64_t v28 = *(void *)(v6 + 64);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v24 - v7;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v24 - v10;
  sub_100006560(&qword_10019A498);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014D4D0;
  sub_10009A728();
  sub_100139A24();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v14 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176);
  *(void *)(v12 + 56) = type metadata accessor for URL();
  sub_100035868((uint64_t *)(v12 + 32));
  v14(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  unint64_t v15 = v27;
  uint64_t v16 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v27, v30, v24);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = v25;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v17, v15, v16);
  uint64_t v20 = static SafeAreaRegions.all.getter();
  char v21 = static Edge.Set.all.getter();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = v12;
  uint64_t v34 = sub_1000A3580;
  uint64_t v35 = v18;
  uint64_t v36 = v20;
  char v37 = v21;
  sub_100006560(&qword_100198650);
  type metadata accessor for PresentationDetent();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10014CCD0;
  static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter();
  sub_1000BE2EC(v22);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_100006560(&qword_10019A428);
  sub_1000A3710(&qword_10019A430, &qword_10019A428, (void (*)(void))sub_100060494);
  View.presentationDetents(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1000A2AFC(uint64_t a1, char a2)
{
  if (a2)
  {
    type metadata accessor for PromotionalAssetsView();
    sub_10009A728();
    sub_100139D9C();
    swift_release();
  }
}

uint64_t sub_1000A2B54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  uint64_t v3 = sub_10013745C();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_1000AC7F8(v3, v5, 8, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A2C54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  uint64_t v3 = sub_10013745C();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = *(void *)(a1 + *(int *)(v2 + 40));
  if (v6)
  {
    swift_retain();
    sub_1000AC4E4(v3, v5, 8, 0, 2, 0, 3u, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A2D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return _swift_task_switch(sub_1000A2E00, v5, v4);
}

uint64_t sub_1000A2E00()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  if (*(void *)(v1 + *(int *)(v2 + 40)))
  {
    swift_retain();
    char v3 = sub_100138938();
    swift_release();
    swift_release();
    if (v3)
    {
      v0[8] = sub_10009A728();
      uint64_t v4 = (void *)swift_task_alloc();
      v0[9] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10005F74C;
      return sub_100138AF8();
    }
    else
    {
      swift_release();
      uint64_t v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A3E3C((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    return EnvironmentObject.error()();
  }
}

uint64_t sub_1000A2FB0()
{
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  sub_100139DA4();

  return swift_release();
}

void sub_1000A2FF8()
{
  type metadata accessor for PromotionalAssetsView();
  sub_10009A728();
  if (qword_100198170 != -1) {
    swift_once();
  }
  sub_1000487B4(qword_1001AA430 + 16, (uint64_t)v1);
  sub_100006560(&qword_10019C510);
  type metadata accessor for MusicPreviewPlayer(0);
  if (swift_dynamicCast())
  {
    sub_10004BA48();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_1000A30C8()
{
  return sub_1000A30E0();
}

uint64_t sub_1000A30E0()
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();

  return swift_release();
}

uint64_t sub_1000A314C@<X0>(void *a1@<X8>)
{
  return sub_10009C550(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000A3158()
{
  unint64_t result = qword_10019C4F0;
  if (!qword_10019C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C4F0);
  }
  return result;
}

uint64_t sub_1000A31B0()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_1000A2508();
}

unint64_t sub_1000A323C()
{
  unint64_t result = qword_10019C4F8;
  if (!qword_10019C4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10019C4F8);
  }
  return result;
}

uint64_t sub_1000A3294()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_1000A2620();
}

uint64_t sub_1000A3320@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100139C68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A3350()
{
  return sub_100139CF0();
}

uint64_t sub_1000A3378()
{
  return 16;
}

__n128 sub_1000A3384(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000A3394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000A26F0(v6, v3, v4, a1);
}

uint64_t sub_1000A3424()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2B54);
}

uint64_t sub_1000A3440()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2C54);
}

uint64_t sub_1000A345C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A678;
  return sub_1000A2D64(v5, v2, v3);
}

uint64_t sub_1000A3548()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2FB0);
}

uint64_t sub_1000A3564()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2FF8);
}

void sub_1000A3580(uint64_t a1, char a2)
{
  type metadata accessor for PromotionalAssetsView();

  sub_1000A2AFC(a1, a2);
}

uint64_t sub_1000A3634@<X0>(void *a1@<X8>)
{
  return sub_10009D158(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A3644()
{
  type metadata accessor for PromotionalAssetsView();

  return sub_1000A1C40();
}

void sub_1000A36DC(unsigned char *a1@<X8>)
{
  sub_100060E60(*(void *)(v1 + 40), a1);
}

double sub_1000A36EC@<D0>(uint64_t a1@<X8>)
{
  return sub_1000A1D98(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A36F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A2078(*(void *)(v1 + 32), a1);
}

double sub_1000A3704@<D0>(uint64_t a1@<X8>)
{
  return sub_1000A2264(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A3710(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A378C()
{
  unint64_t result = qword_10019C530;
  if (!qword_10019C530)
  {
    sub_10000650C(&qword_10019C520);
    sub_1000A3710((unint64_t *)&qword_10019A4D8, &qword_10019A4A8, (void (*)(void))sub_1000238F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C530);
  }
  return result;
}

uint64_t sub_1000A3830()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2414);
}

double sub_1000A3850(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000A3874()
{
  return sub_1000A3EA0((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A1F4C);
}

uint64_t sub_1000A388C()
{
  uint64_t v0 = type metadata accessor for PromotionalAssetsView();
  return sub_1000A1CB4(v0);
}

uint64_t sub_1000A38E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10009D65C(*(void *)(v1 + 32), *(char **)(v1 + 16), *(char **)(v1 + 24), a1);
}

uint64_t sub_1000A38EC@<X0>(void *a1@<X8>)
{
  return sub_1000A0A68(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_1000A38F8()
{
  unint64_t result = qword_10019C558;
  if (!qword_10019C558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C558);
  }
  return result;
}

unint64_t sub_1000A394C()
{
  unint64_t result = qword_10019C560;
  if (!qword_10019C560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C560);
  }
  return result;
}

uint64_t sub_1000A39A4(uint64_t a1)
{
  return sub_1000A39BC(a1, (void (*)(double))sub_1001381B8);
}

uint64_t sub_1000A39BC(uint64_t a1, void (*a2)(double))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  return sub_1000A130C(a1, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6, a2);
}

uint64_t sub_1000A3A50()
{
  uint64_t v1 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000A1934(v2);
}

uint64_t sub_1000A3ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppModule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A3B40()
{
  unint64_t result = qword_10019C590;
  if (!qword_10019C590)
  {
    sub_10000650C(&qword_10019C498);
    sub_1000A3BB4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C590);
  }
  return result;
}

unint64_t sub_1000A3BB4()
{
  unint64_t result = qword_10019C598;
  if (!qword_10019C598)
  {
    sub_10000650C(&qword_10019C588);
    sub_1000A3C30();
    sub_1000A3D3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C598);
  }
  return result;
}

unint64_t sub_1000A3C30()
{
  unint64_t result = qword_10019C5A0;
  if (!qword_10019C5A0)
  {
    sub_10000650C(&qword_10019C550);
    type metadata accessor for SetlistView(255);
    sub_1000A3E3C(&qword_10019C5A8, (void (*)(uint64_t))type metadata accessor for SetlistView);
    swift_getOpaqueTypeConformance2();
    sub_1000A3E3C((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C5A0);
  }
  return result;
}

unint64_t sub_1000A3D3C()
{
  unint64_t result = qword_10019C5B0;
  if (!qword_10019C5B0)
  {
    sub_10000650C(&qword_10019C538);
    sub_1000A3DE8();
    sub_1000A3E3C(&qword_100198A90, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C5B0);
  }
  return result;
}

unint64_t sub_1000A3DE8()
{
  unint64_t result = qword_10019C5B8;
  if (!qword_10019C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10019C5B8);
  }
  return result;
}

uint64_t sub_1000A3E3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A3E88()
{
  return sub_1000A3EA0(sub_1000A1374);
}

uint64_t sub_1000A3EA0(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t sub_1000A3F3C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100010CB0;
  return sub_1000A17F0(v5, v2, v3);
}

uint64_t sub_1000A4024(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A4094(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A40F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001385A0(a1);
}

uint64_t sub_1000A4118()
{
  return sub_10013B68C();
}

uint64_t sub_1000A413C()
{
  return 16;
}

__n128 sub_1000A4148(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1000A4154()
{
  unint64_t result = qword_10019C5D8;
  if (!qword_10019C5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10019C5D8);
  }
  return result;
}

uint64_t sub_1000A41AC()
{
  uint64_t v1 = (int *)type metadata accessor for PromotionalAssetsView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v3 = type metadata accessor for Bindable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  uint64_t v4 = v2 + v1[11];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DismissAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v2 + v1[12];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v2 + v1[13];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v2 + v1[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000A4520(uint64_t a1)
{
  return sub_1000A39BC(a1, (void (*)(double))sub_1001386FC);
}

uint64_t sub_1000A4538()
{
  uint64_t v1 = (int *)type metadata accessor for PromotionalAssetsView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + v2;
  type metadata accessor for PromotionalAssetsViewModel();
  uint64_t v4 = type metadata accessor for Bindable();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  swift_release();
  swift_release();
  unint64_t v5 = v0 + v2 + v1[11];
  sub_100006560(qword_100198AA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DismissAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v3 + v1[12];
  sub_100006560(&qword_100198A98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v3 + v1[13];
  sub_100006560(&qword_100198940);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v3 + v1[14];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for UserInterfaceSizeClass();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_1000A48B4(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for PromotionalAssetsView() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10004A678;
  return sub_1000A1568(a1, v7, v8, v9, v4, v5);
}

uint64_t sub_1000A49BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_100137FCC();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A49F0()
{
  return sub_10013805C();
}

uint64_t sub_1000A4A24()
{
  return 16;
}

__n128 sub_1000A4A30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000A4A3C(double *a1@<X8>)
{
  *a1 = sub_100138110();
}

uint64_t sub_1000A4A68()
{
  return sub_100138198();
}

uint64_t sub_1000A4A90()
{
  return 16;
}

__n128 sub_1000A4A9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSafeAreaPreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSizePreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for FeaturedVideosViewSizePreferenceKey()
{
  return &type metadata for FeaturedVideosViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for TourPhotosViewSizePreferenceKey()
{
  return &type metadata for TourPhotosViewSizePreferenceKey;
}

uint64_t sub_1000A4AE8()
{
  return swift_getWitnessTable();
}

unint64_t sub_1000A54E8(uint64_t a1)
{
  unint64_t result = sub_1000A394C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A5510(uint64_t a1)
{
  unint64_t result = sub_1000A4154();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A5538(uint64_t a1)
{
  unint64_t result = sub_1000A3158();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A5560(uint64_t a1)
{
  unint64_t result = sub_1000A323C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for SongRowViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    return sub_100029A08(a1 + 32);
  }
  return result;
}

uint64_t initializeWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v7;
    *(void *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v9;
    *(void *)(a1 + 64) = *(void *)(v6 + 32);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = v4;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_100029A08(a1 + 32);
    goto LABEL_7;
  }
  sub_1000A579C((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t *sub_1000A579C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *char v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *char v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    sub_100029A08(a1 + 32);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SongRowViewModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SongRowViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRow()
{
  return &type metadata for SongRow;
}

uint64_t sub_1000A5B18()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000A5B34()
{
  qword_10019C5F0 = 0x6F6E2E636973756DLL;
  *(void *)algn_10019C5F8 = 0xEA00000000006574;
}

uint64_t sub_1000A5B5C()
{
  uint64_t v1 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019C600);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019C608);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = 0x4024000000000000;
  v7[16] = 0;
  uint64_t v11 = sub_100006560(&qword_10019C610);
  sub_1000A5D74(v0, (uint64_t)&v7[*(int *)(v11 + 44)]);
  char v12 = static Edge.Set.top.getter();
  sub_1000066D4((uint64_t)v7, (uint64_t)v10, &qword_10019C600);
  uint64_t v13 = &v10[*(int *)(v8 + 36)];
  *uint64_t v13 = v12;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  v13[40] = 1;
  sub_1000067DC((uint64_t)v7, &qword_10019C600);
  static AccessibilityChildBehavior.ignore.getter();
  sub_1000A75D4();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_1000067DC((uint64_t)v10, &qword_10019C608);
}

uint64_t sub_1000A5D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_100006560(&qword_10019C628);
  __chkstk_darwin(v3 - 8);
  uint64_t v45 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v8 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v8 - 8);
  uint64_t v46 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100006560(&qword_10019C630);
  uint64_t v10 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  char v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100006560(&qword_10019C638);
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100006560(&qword_10019C640);
  __chkstk_darwin(v40);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100006560(&qword_10019C648);
  __chkstk_darwin(v38);
  uint64_t v42 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v37 - v19;
  __chkstk_darwin(v21);
  double v23 = (char *)&v37 - v22;
  uint64_t v43 = a1;
  sub_1000066D4(a1 + 32, (uint64_t)&v47, &qword_100199A10);
  uint64_t v24 = *((void *)&v48 + 1);
  if (*((void *)&v48 + 1))
  {
    uint64_t v25 = v49;
    sub_100023118(&v47, *((uint64_t *)&v48 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 40))(100, 100, v24, v25);
    sub_100029A08((uint64_t)&v47);
  }
  else
  {
    sub_1000067DC((uint64_t)&v47, &qword_100199A10);
    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v46, 1, 1, v26);
  }
  static Animation.easeInOut.getter();
  Transaction.init(animation:)();
  sub_100006560(&qword_10019C650);
  sub_1000A7674();
  AsyncImage.init(url:scale:transaction:content:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v27 = v41;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v41);
  uint64_t v28 = &v14[*(int *)(v39 + 36)];
  long long v29 = v48;
  *(_OWORD *)uint64_t v28 = v47;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v49;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v27);
  sub_1000066D4((uint64_t)v14, (uint64_t)v16, &qword_10019C638);
  v16[*(int *)(v40 + 36)] = 1;
  sub_1000067DC((uint64_t)v14, &qword_10019C638);
  LOBYTE(v27) = static Edge.Set.bottom.getter();
  sub_1000066D4((uint64_t)v16, (uint64_t)v20, &qword_10019C640);
  uint64_t v30 = &v20[*(int *)(v38 + 36)];
  *uint64_t v30 = v27;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  v30[40] = 1;
  sub_1000067DC((uint64_t)v16, &qword_10019C640);
  sub_10001D6D8((uint64_t)v20, (uint64_t)v23, &qword_10019C648);
  *(void *)uint64_t v7 = static HorizontalAlignment.leading.getter();
  *((void *)v7 + 1) = 0x4030000000000000;
  v7[16] = 0;
  uint64_t v31 = sub_100006560(&qword_10019C6A0);
  sub_1000A6EF4(v43, &v7[*(int *)(v31 + 44)]);
  uint64_t v32 = v42;
  sub_1000066D4((uint64_t)v23, v42, &qword_10019C648);
  uint64_t v33 = v45;
  sub_1000066D4((uint64_t)v7, v45, &qword_10019C628);
  uint64_t v34 = v44;
  sub_1000066D4(v32, v44, &qword_10019C648);
  uint64_t v35 = sub_100006560(&qword_10019C6A8);
  sub_1000066D4(v33, v34 + *(int *)(v35 + 48), &qword_10019C628);
  sub_1000067DC((uint64_t)v7, &qword_10019C628);
  sub_1000067DC((uint64_t)v23, &qword_10019C648);
  sub_1000067DC(v33, &qword_10019C628);
  return sub_1000067DC(v32, &qword_10019C648);
}

uint64_t sub_1000A6308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v58 = a2;
  uint64_t v57 = sub_100006560(&qword_10019C698);
  __chkstk_darwin(v57);
  long long v47 = (uint64_t *)((char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v56 = sub_100006560(&qword_10019C6B8);
  __chkstk_darwin(v56);
  uint64_t v55 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100006560(&qword_10019C6C0);
  __chkstk_darwin(v50);
  uint64_t v52 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100006560(&qword_10019C668);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019C688);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v9);
  uint64_t v11 = (_OWORD *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Image.ResizingMode();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100006560(&qword_10019C678);
  __chkstk_darwin(v49);
  uint64_t v17 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v48 = (uint64_t)&v47 - v19;
  uint64_t v20 = type metadata accessor for AsyncImagePhase();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, v51, v20, v22);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
    uint64_t v26 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v27 = (char *)v11 + *(int *)(v9 + 20);
    uint64_t v28 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v29 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v27, v28, v29);
    __asm { FMOV            V0.2D, #4.0 }
    *uint64_t v11 = _Q0;
    sub_10001081C((uint64_t)v11, (uint64_t)v8);
    sub_1000066D4((uint64_t)v8, (uint64_t)v17 + *(int *)(v49 + 36), &qword_10019C688);
    *uint64_t v17 = v26;
    swift_retain();
    sub_1000067DC((uint64_t)v8, &qword_10019C688);
    sub_100010934((uint64_t)v11);
    swift_release();
    uint64_t v35 = v48;
    sub_10001D6D8((uint64_t)v17, v48, &qword_10019C678);
    sub_1000066D4(v35, v52, &qword_10019C678);
    swift_storeEnumTagMultiPayload();
    sub_1000A7790();
    sub_100010484(&qword_10019C690, &qword_10019C698);
    uint64_t v36 = (uint64_t)v53;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v36, v55, &qword_10019C668);
    swift_storeEnumTagMultiPayload();
    sub_1000A76F0();
    _ConditionalContent<>.init(storage:)();
    swift_release();
    sub_1000067DC(v36, &qword_10019C668);
    uint64_t v37 = v35;
    uint64_t v38 = &qword_10019C678;
  }
  else
  {
    uint64_t v39 = v52;
    uint64_t v40 = (uint64_t)v53;
    uint64_t v41 = v55;
    if (v25 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v24, v20);
      swift_errorRelease();
    }
    else if (v25 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload();
      sub_1000A76F0();
      _ConditionalContent<>.init(storage:)();
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    }
    uint64_t v42 = static Alignment.center.getter();
    uint64_t v43 = (uint64_t)v47;
    *long long v47 = v42;
    *(void *)(v43 + 8) = v44;
    uint64_t v45 = sub_100006560(&qword_10019C6C8);
    sub_1000A6AC8(v43 + *(int *)(v45 + 44));
    sub_1000066D4(v43, v39, &qword_10019C698);
    swift_storeEnumTagMultiPayload();
    sub_1000A7790();
    sub_100010484(&qword_10019C690, &qword_10019C698);
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v40, v41, &qword_10019C668);
    swift_storeEnumTagMultiPayload();
    sub_1000A76F0();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v40, &qword_10019C668);
    uint64_t v37 = v43;
    uint64_t v38 = &qword_10019C698;
  }
  return sub_1000067DC(v37, v38);
}

uint64_t sub_1000A6AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v38[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RoundedRectangle();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100006560(&qword_10019C6D0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v14 = &v38[-v13];
  uint64_t v15 = (char *)v8 + *(int *)(v6 + 28);
  uint64_t v16 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v17 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  __asm { FMOV            V0.2D, #4.0 }
  *uint64_t v8 = _Q0;
  if (qword_1001980A8 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1001AA350;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10001081C((uint64_t)v8, (uint64_t)v11);
  int v25 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *int v25 = KeyPath;
  v25[1] = v23;
  swift_retain();
  sub_100010934((uint64_t)v8);
  sub_10001D6D8((uint64_t)v11, (uint64_t)v14, &qword_10019C6D0);
  uint64_t v42 = v14;
  if (qword_100198128 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  Image.init(systemName:)();
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v1);
  uint64_t v41 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v26 = static Color.white.getter();
  uint64_t v27 = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v28 = v44;
  char v29 = v45;
  uint64_t v30 = v46;
  int v39 = v47;
  uint64_t v31 = v48;
  uint64_t v32 = v49;
  uint64_t v33 = (uint64_t)v42;
  sub_1000066D4((uint64_t)v42, (uint64_t)v11, &qword_10019C6D0);
  uint64_t v34 = (uint64_t)v11;
  uint64_t v40 = v11;
  uint64_t v35 = v43;
  sub_1000066D4(v34, v43, &qword_10019C6D0);
  uint64_t v36 = v35 + *(int *)(sub_100006560(&qword_10019C6D8) + 48);
  *(void *)uint64_t v36 = v41;
  *(void *)(v36 + 8) = 0;
  *(_WORD *)(v36 + 16) = 1;
  *(void *)(v36 + 24) = v27;
  *(void *)(v36 + 32) = v26;
  *(void *)(v36 + 40) = v28;
  *(unsigned char *)(v36 + 48) = v29;
  *(void *)(v36 + 56) = v30;
  *(unsigned char *)(v36 + 64) = v39;
  *(void *)(v36 + 72) = v31;
  *(void *)(v36 + 80) = v32;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000067DC(v33, &qword_10019C6D0);
  swift_release();
  swift_release();
  swift_release();
  return sub_1000067DC((uint64_t)v40, &qword_10019C6D0);
}

uint64_t sub_1000A6EF4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v44 = type metadata accessor for Divider();
  uint64_t v4 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019AC28);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v43 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - v11;
  __chkstk_darwin(v13);
  uint64_t v45 = (uint64_t)&v37 - v14;
  uint64_t v46 = static HorizontalAlignment.leading.getter();
  sub_1000A7348((uint64_t)&v62);
  uint64_t v47 = v63;
  uint64_t v48 = v62;
  unsigned __int8 v15 = v64;
  uint64_t v53 = v68;
  uint64_t v50 = v70;
  uint64_t v51 = v66;
  uint64_t v37 = v67;
  uint64_t v38 = v71;
  int v49 = v72;
  uint64_t v16 = v75;
  uint64_t v40 = v76;
  uint64_t v41 = v74;
  uint64_t v39 = v77;
  int v52 = v78;
  char v86 = 0;
  unsigned __int8 v85 = v64;
  int v42 = v64;
  char v84 = v69;
  unsigned __int8 v83 = v72;
  char v82 = v78;
  unsigned __int8 v17 = v69;
  Divider.init()();
  if (*(unsigned char *)(a1 + 72)) {
    double v18 = 1.0;
  }
  else {
    double v18 = 0.0;
  }
  uint64_t v19 = v44;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v12, v6, v44);
  *(double *)&v12[*(int *)(v8 + 44)] = v18;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  uint64_t v20 = (uint64_t)v12;
  uint64_t v21 = v45;
  sub_10001D6D8(v20, v45, &qword_10019AC28);
  uint64_t v22 = v21;
  uint64_t v23 = v43;
  sub_1000066D4(v22, v43, &qword_10019AC28);
  *(void *)&long long v54 = v46;
  *((void *)&v54 + 1) = 0x4014000000000000;
  LOBYTE(v55) = 0;
  *(_DWORD *)((char *)&v55 + 1) = v90[0];
  DWORD1(v55) = *(_DWORD *)((char *)v90 + 3);
  *((void *)&v55 + 1) = v48;
  *(void *)&long long v56 = v47;
  BYTE8(v56) = v15;
  *(_DWORD *)((char *)&v56 + 9) = *(_DWORD *)v89;
  HIDWORD(v56) = *(_DWORD *)&v89[3];
  uint64_t v24 = v37;
  uint64_t v25 = v38;
  *(void *)&long long v57 = v51;
  *((void *)&v57 + 1) = v37;
  *(void *)&long long v58 = v53;
  BYTE8(v58) = v17;
  *(_DWORD *)((char *)&v58 + 9) = *(_DWORD *)v88;
  HIDWORD(v58) = *(_DWORD *)&v88[3];
  *(void *)&long long v59 = v50;
  *((void *)&v59 + 1) = v38;
  LOBYTE(v60) = v49;
  *(_DWORD *)((char *)&v60 + 1) = *(_DWORD *)v87;
  DWORD1(v60) = *(_DWORD *)&v87[3];
  uint64_t v27 = v40;
  uint64_t v26 = v41;
  *((void *)&v60 + 1) = v41;
  *(void *)&v61[0] = v16;
  uint64_t v28 = v39;
  *((void *)&v61[0] + 1) = v40;
  *(void *)&v61[1] = v39;
  BYTE8(v61[1]) = v52;
  long long v29 = v54;
  long long v30 = v55;
  long long v31 = v57;
  a2[2] = v56;
  a2[3] = v31;
  *a2 = v29;
  a2[1] = v30;
  long long v32 = v58;
  long long v33 = v59;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v61 + 9);
  long long v34 = v61[0];
  a2[6] = v60;
  a2[7] = v34;
  a2[4] = v32;
  a2[5] = v33;
  uint64_t v35 = (uint64_t)a2 + *(int *)(sub_100006560(&qword_10019C6B0) + 48);
  sub_1000066D4(v23, v35, &qword_10019AC28);
  sub_1000A7830((uint64_t)&v54);
  sub_1000067DC(v45, &qword_10019AC28);
  sub_1000067DC(v23, &qword_10019AC28);
  uint64_t v62 = v46;
  uint64_t v63 = 0x4014000000000000;
  unsigned __int8 v64 = 0;
  *(_DWORD *)uint64_t v65 = v90[0];
  *(_DWORD *)&v65[3] = *(_DWORD *)((char *)v90 + 3);
  uint64_t v66 = v48;
  uint64_t v67 = v47;
  LOBYTE(v68) = v42;
  *(_DWORD *)((char *)&v68 + 1) = *(_DWORD *)v89;
  HIDWORD(v68) = *(_DWORD *)&v89[3];
  uint64_t v69 = v51;
  uint64_t v70 = v24;
  uint64_t v71 = v53;
  unsigned __int8 v72 = v17;
  *(_DWORD *)&void v73[3] = *(_DWORD *)&v88[3];
  *(_DWORD *)uint64_t v73 = *(_DWORD *)v88;
  uint64_t v74 = v50;
  uint64_t v75 = v25;
  LOBYTE(v76) = v49;
  *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)v87;
  HIDWORD(v76) = *(_DWORD *)&v87[3];
  uint64_t v77 = v26;
  uint64_t v78 = v16;
  uint64_t v79 = v27;
  uint64_t v80 = v28;
  char v81 = v52;
  return sub_1000A78C0((uint64_t)&v62);
}

uint64_t sub_1000A7348@<X0>(uint64_t a1@<X8>)
{
  sub_10002374C();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.Weight.semibold.getter();
  uint64_t v7 = Text.fontWeight(_:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.headline.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v32 = v13;
  uint64_t v33 = v12;
  char v15 = v14;
  uint64_t v34 = v16;
  swift_release();
  char v31 = v15 & 1;
  sub_1000065A4(v7, v9, v11);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  static Font.subheadline.getter();
  uint64_t v22 = Text.font(_:)();
  uint64_t v24 = v23;
  LOBYTE(v2) = v25;
  uint64_t v27 = v26;
  swift_release();
  sub_1000065A4(v17, v19, v21);
  swift_bridgeObjectRelease();
  uint64_t v28 = swift_getKeyPath();
  *(void *)a1 = v33;
  *(void *)(a1 + 8) = v32;
  *(unsigned char *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v22;
  *(void *)(a1 + 64) = v24;
  *(unsigned char *)(a1 + 72) = v2 & 1;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = 0x3FE6666666666666;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 0;
  sub_100010924(v33, v32, v31);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100010924(v22, v24, v2 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000065A4(v22, v24, v2 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v33, v32, v31);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A75D4()
{
  unint64_t result = qword_10019C618;
  if (!qword_10019C618)
  {
    sub_10000650C(&qword_10019C608);
    sub_100010484(&qword_10019C620, &qword_10019C600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C618);
  }
  return result;
}

unint64_t sub_1000A7674()
{
  unint64_t result = qword_10019C658;
  if (!qword_10019C658)
  {
    sub_10000650C(&qword_10019C650);
    sub_1000A76F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C658);
  }
  return result;
}

unint64_t sub_1000A76F0()
{
  unint64_t result = qword_10019C660;
  if (!qword_10019C660)
  {
    sub_10000650C(&qword_10019C668);
    sub_1000A7790();
    sub_100010484(&qword_10019C690, &qword_10019C698);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C660);
  }
  return result;
}

unint64_t sub_1000A7790()
{
  unint64_t result = qword_10019C670;
  if (!qword_10019C670)
  {
    sub_10000650C(&qword_10019C678);
    sub_100010484(&qword_10019C680, &qword_10019C688);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C670);
  }
  return result;
}

uint64_t sub_1000A7830(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_100010924(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100010924(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000A78C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  sub_1000065A4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000065A4(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A7960()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A79BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_1000A7A30(void *a1)
{
  id v1 = [a1 userInfo];
  if (!v1)
  {
    long long v14 = 0u;
    long long v15 = 0u;
LABEL_10:
    sub_1000A7F90((uint64_t)&v14);
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v4 = sub_1000A8288((uint64_t)v13), (v5 & 1) != 0))
  {
    sub_10004DE80(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  sub_1000A82CC((uint64_t)v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1)) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    uint64_t v7 = v13[0];
    unint64_t v6 = v13[1];
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for RemoteViewConfiguration();
    sub_1000A8320();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v12 = v13[0];
    swift_getKeyPath();
    swift_getKeyPath();
    v13[0] = v12;
    swift_retain();
    static Published.subscript.setter();
    sub_100033310(v7, v6);
    return;
  }
LABEL_11:
  if (qword_100198180 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10003345C(v8, (uint64_t)qword_1001AA440);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "User activity missing remote configuration", v11, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000A7D90()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp20ShazamEventsAppModel__remoteViewConfiguration;
  uint64_t v2 = sub_100006560(&qword_10019C7B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A7E48()
{
  return type metadata accessor for ShazamEventsAppModel();
}

uint64_t type metadata accessor for ShazamEventsAppModel()
{
  uint64_t result = qword_10019C710;
  if (!qword_10019C710) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A7E9C()
{
  sub_1000A7F34();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A7F34()
{
  if (!qword_10019C720)
  {
    sub_10000650C((uint64_t *)&unk_10019C728);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10019C720);
    }
  }
}

uint64_t sub_1000A7F90(uint64_t a1)
{
  uint64_t v2 = sub_100006560((uint64_t *)&unk_10019D3D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A7FF0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000A8070()
{
  return static Published.subscript.setter();
}

unint64_t sub_1000A80EC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000A8380(a1, a2, v4);
}

unint64_t sub_1000A8164(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000A8464(a1, v2);
}

unint64_t sub_1000A81F4(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000A8578(a1, v2);
}

unint64_t sub_1000A8288(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000A86F0(a1, v4);
}

uint64_t sub_1000A82CC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000A8320()
{
  unint64_t result = qword_10019C7B0;
  if (!qword_10019C7B0)
  {
    type metadata accessor for RemoteViewConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C7B0);
  }
  return result;
}

unint64_t sub_1000A8380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    os_log_type_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000A8464(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = 8 * a1;
    uint64_t v7 = *(void *)&aLocationmusic_0[v6];
    uint64_t v8 = *(void *)&aCalendar_2[v6 + 8];
    while (*(void *)&aLocationmusic_0[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v7
         || *(void *)&aCalendar_2[8 * *(char *)(*(void *)(v2 + 48) + v4) + 8] != v8)
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

unint64_t sub_1000A8578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000A86F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000A87B8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000A82CC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000A87B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for GenericErrorView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericErrorView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorView()
{
  return &type metadata for GenericErrorView;
}

uint64_t sub_1000A8AA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A8AC4@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title.getter();
  static Font.Weight.bold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_1000065A4(v2, v4, v6);
  swift_bridgeObjectRelease();
  if (qword_1001980A0 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v12 = Text.foregroundStyle<A>(_:)();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  uint64_t v37 = v14;
  char v34 = v15 & 1;
  sub_1000065A4(v7, v9, v11 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v21 = Text.font(_:)();
  uint64_t v23 = v22;
  char v25 = v24;
  swift_release();
  sub_1000065A4(v16, v18, v20);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v26 = Text.foregroundStyle<A>(_:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_1000065A4(v21, v23, v25 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a1 = v36;
  *(void *)(a1 + 8) = v35;
  *(unsigned char *)(a1 + 16) = v34;
  *(void *)(a1 + 24) = v37;
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v28;
  *(unsigned char *)(a1 + 48) = v32;
  *(void *)(a1 + 56) = v30;
  sub_100010924(v36, v35, v34);
  swift_bridgeObjectRetain();
  sub_100010924(v26, v28, v32);
  swift_bridgeObjectRetain();
  sub_1000065A4(v26, v28, v32);
  swift_bridgeObjectRelease();
  sub_1000065A4(v36, v35, v34);
  return swift_bridgeObjectRelease();
}

__n128 sub_1000A8E30@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v18 = *v1;
  long long v19 = v3;
  long long v4 = v1[3];
  long long v20 = v1[2];
  long long v21 = v4;
  uint64_t v5 = static HorizontalAlignment.center.getter();
  sub_1000A8AC4((uint64_t)&v12);
  char v6 = v13;
  uint64_t v7 = v14;
  char v8 = v16;
  uint64_t v9 = v17;
  __n128 result = v12;
  long long v11 = v15;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0x4018000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  return result;
}

unint64_t sub_1000A8EBC()
{
  unint64_t result = qword_10019C7C0;
  if (!qword_10019C7C0)
  {
    sub_10000650C(&qword_10019C7C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C7C0);
  }
  return result;
}

void *sub_1000A8F18(void *a1, void *a2, int *a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *long long v4 = *a2;
    long long v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    char v10 = (char *)a1 + v9;
    long long v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    char v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    long long v15 = (char *)v4 + v14;
    char v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)v16 + 4);
      *((void *)v15 + 3) = v17;
      *((void *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)long long v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((void *)v15 + 4) = *((void *)v16 + 4);
    }
    uint64_t v21 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *(void *)((char *)v4 + v21) = *(void *)((char *)a2 + v21);
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000A908C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  if (*(void *)(v6 + 24)) {
    sub_100029A08(v6);
  }

  return swift_release();
}

void *sub_1000A9134(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  long long v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)((char *)a2 + v13 + 24);
  if (v16)
  {
    uint64_t v17 = *((void *)v15 + 4);
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    long long v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((void *)v14 + 4) = *((void *)v15 + 4);
  }
  uint64_t v19 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_retain();
  return a1;
}

void *sub_1000A925C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)((char *)a2 + v10 + 24);
  if (!*(void *)((char *)a1 + v10 + 24))
  {
    if (v13)
    {
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = *((void *)v12 + 4);
      (**(void (***)(uint64_t, char *))(v13 - 8))(v11, v12);
      goto LABEL_8;
    }
LABEL_7:
    long long v14 = *(_OWORD *)v12;
    long long v15 = *((_OWORD *)v12 + 1);
    *(void *)(v11 + 32) = *((void *)v12 + 4);
    *(_OWORD *)uint64_t v11 = v14;
    *(_OWORD *)(v11 + 16) = v15;
    goto LABEL_8;
  }
  if (!v13)
  {
    sub_100029A08(v11);
    goto LABEL_7;
  }
  sub_1000A579C((uint64_t *)v11, (uint64_t *)v12);
LABEL_8:
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1000A93D0(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v11;
  long long v14 = (char *)a2 + v11;
  long long v15 = *(_OWORD *)v14;
  long long v16 = *((_OWORD *)v14 + 1);
  *((void *)v13 + 4) = *((void *)v14 + 4);
  *(_OWORD *)uint64_t v13 = v15;
  *((_OWORD *)v13 + 1) = v16;
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_1000A948C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  if (*(void *)((char *)a1 + v12 + 24)) {
    sub_100029A08((uint64_t)a1 + v12);
  }
  long long v14 = *(_OWORD *)((char *)a2 + v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)a2 + v12);
  *((_OWORD *)v13 + 1) = v14;
  *((void *)v13 + 4) = *(void *)((char *)a2 + v12 + 32);
  uint64_t v15 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  swift_release();
  return a1;
}

uint64_t sub_1000A9578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A958C);
}

uint64_t sub_1000A958C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A963C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9650);
}

uint64_t sub_1000A9650(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for EventRowViewModel()
{
  uint64_t result = qword_10019C828;
  if (!qword_10019C828) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A9744()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000A97F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EventRowViewModel();
  sub_1000066D4(v1 + *(int *)(v3 + 28), (uint64_t)v16, &qword_100199A10);
  uint64_t v4 = v17;
  if (v17)
  {
    uint64_t v5 = v18;
    uint64_t v15 = sub_100023118(v16, v17);
    uint64_t v6 = self;
    id v7 = [v6 currentDevice];
    id v8 = [v7 userInterfaceIdiom];

    if (v8 == (id)1) {
      uint64_t v9 = 200;
    }
    else {
      uint64_t v9 = 100;
    }
    id v10 = [v6 currentDevice];
    id v11 = [v10 userInterfaceIdiom];

    if (v11 == (id)1) {
      uint64_t v12 = 200;
    }
    else {
      uint64_t v12 = 100;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v9, v12, v4, v5);
    return sub_100029A08((uint64_t)v16);
  }
  else
  {
    sub_1000067DC((uint64_t)v16, &qword_100199A10);
    uint64_t v14 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_1000A997C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))((char *)&v31 - v11, 1, 1, v2, v10);
  id v13 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v13 setDateStyle:2];
  sub_1000066D4((uint64_t)v12, (uint64_t)v8, &qword_100198898);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_1000067DC((uint64_t)v8, &qword_100198898);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v13 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_1000067DC((uint64_t)v12, &qword_100198898);
  uint64_t v15 = type metadata accessor for EventRowViewModel();
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v13 stringFromDate:v16];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (*((unsigned char *)v1 + *(int *)(v15 + 32)) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = v1[3];
    uint64_t v31 = v1[2];
    uint64_t v32 = v21;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v31 = v18;
    uint64_t v32 = v20;
    v22._uint64_t countAndFlagsBits = 8236;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    uint64_t v23 = v1[2];
    char v24 = (void *)v1[3];
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
  }
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  uint64_t v28 = *v1;
  uint64_t v27 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v29._uint64_t countAndFlagsBits = v28;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier()
{
  return &type metadata for ConditionalFrameModifier;
}

uint64_t sub_1000A9D3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A9D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100006560(&qword_10019C870);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v8 = sub_100006560(&qword_10019C878);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a1, v8);
  uint64_t v9 = &v7[*(int *)(v5 + 44)];
  long long v10 = v12[1];
  *(_OWORD *)uint64_t v9 = v12[0];
  *((_OWORD *)v9 + 1) = v10;
  *((_OWORD *)v9 + 2) = v12[2];
  return sub_10001D6D8((uint64_t)v7, a2, &qword_10019C870);
}

uint64_t destroy for ConditionalFontModifier()
{
  swift_release();

  return swift_release();
}

uint64_t _s15ShazamEventsApp23ConditionalFontModifierVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier()
{
  return &type metadata for ConditionalFontModifier;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier.Size()
{
  return &type metadata for ConditionalFrameModifier.Size;
}

unint64_t sub_1000A9FF4()
{
  unint64_t result = qword_10019C880;
  if (!qword_10019C880)
  {
    sub_10000650C(&qword_10019C870);
    sub_100010484(&qword_10019C888, &qword_10019C878);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C880);
  }
  return result;
}

uint64_t sub_1000AA094()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AA0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100006560(&qword_10019C8B8);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (*v2) {
    uint64_t v12 = (uint64_t *)(v2 + 16);
  }
  else {
    uint64_t v12 = (uint64_t *)(v2 + 8);
  }
  uint64_t v13 = *v12;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = sub_100006560(&qword_10019C8C0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v8, a1, v15);
  Class v16 = (uint64_t *)&v8[*(int *)(v6 + 44)];
  uint64_t *v16 = KeyPath;
  v16[1] = v13;
  sub_10001D6D8((uint64_t)v8, (uint64_t)v11, &qword_10019C8B8);
  sub_10001D6D8((uint64_t)v11, a2, &qword_10019C8B8);
  return swift_retain();
}

ValueMetadata *type metadata accessor for ConditionalFontModifier.Font()
{
  return &type metadata for ConditionalFontModifier.Font;
}

unint64_t sub_1000AA218()
{
  unint64_t result = qword_10019C8C8;
  if (!qword_10019C8C8)
  {
    sub_10000650C(&qword_10019C8B8);
    sub_100010484(&qword_10019C8D0, &qword_10019C8C0);
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C8C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingStateView()
{
  return &type metadata for LoadingStateView;
}

uint64_t sub_1000AA2F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AA30C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0x4018000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  sub_100006560(&qword_10019C900);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return ProgressView<>.init<>(_:)();
}

unint64_t sub_1000AA398()
{
  unint64_t result = qword_10019C908;
  if (!qword_10019C908)
  {
    sub_10000650C(&qword_10019C910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C908);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PlaybackStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AA4C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackStatus()
{
  return &type metadata for PlaybackStatus;
}

unint64_t sub_1000AA4FC()
{
  unint64_t result = qword_10019C918;
  if (!qword_10019C918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C918);
  }
  return result;
}

uint64_t *sub_1000AA550(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_1000AA648(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000AA6C8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *sub_1000AA770(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1000AA82C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_1000AA8A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000AA944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA958);
}

uint64_t sub_1000AA958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000AAA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AAA1C);
}

uint64_t sub_1000AAA1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AttributionViewModel()
{
  uint64_t result = qword_10019C978;
  if (!qword_10019C978) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AAB10()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000AABA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for AttributionViewModel();
  __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v36 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax();
  uint64_t v7 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString.MarkdownParsingOptions();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100006560(&qword_1001997A0);
  __chkstk_darwin(v14 - 8);
  Class v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [self mainBundle];
  v41._object = (void *)0xE000000000000000;
  v18._object = (void *)0x80000001001589B0;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v41._uint64_t countAndFlagsBits = 0;
  Swift::String v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v41);

  Swift::String v40 = v20;
  v21._uint64_t countAndFlagsBits = 23328;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  uint64_t v22 = *(void *)(v2 + 16);
  uint64_t v23 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 10333;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  uint64_t v26 = type metadata accessor for URL();
  sub_100033494();
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 41;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 1, 1, v26);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for AttributedString.MarkdownParsingOptions.InterpretedSyntax.full(_:), v35);
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, enum case for AttributedString.MarkdownParsingOptions.FailurePolicy.throwError(_:), v38);
  AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)();
  AttributedString.init(markdown:options:baseURL:)();
  uint64_t v29 = type metadata accessor for AttributedString();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v16, 0, 1, v29);
  uint64_t v30 = v39;
  sub_1000AB558(v2, v39);
  type metadata accessor for AttributedString();
  uint64_t v31 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v16, 1, v29) == 1)
  {
    sub_1000AB0E8();
    sub_1000AB5BC(v30);
    return sub_1000AB618((uint64_t)v16);
  }
  else
  {
    sub_1000AB5BC(v30);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v34, v16, v29);
  }
}

uint64_t sub_1000AB0E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v2 - 8);
  id v3 = [self mainBundle];
  v11._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001001589B0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v11);

  v6._uint64_t countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v7 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

void sub_1000AB22C(uint64_t a1)
{
  sub_100006560(&qword_100199238);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014D8E0;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  *(void *)(v3 + 56) = &type metadata for AnalyticsString;
  *(void *)(v3 + 64) = &off_10019BA08;
  *(unsigned char *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v3 + 104) = &off_10019B9E0;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v3 + 144) = &off_10019BA68;
  *(unsigned char *)(v3 + 112) = 5;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  *(void *)(v3 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v3 + 184) = &off_10019BA40;
  *(void *)(v3 + 152) = v6;
  *(void *)(v3 + 160) = v7;
  *(unsigned char *)(v3 + 168) = 0;
  if (*(void *)(a1 + 72))
  {
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  uint64_t v23 = &type metadata for AnalyticsString;
  Swift::String v24 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v21 = v8;
  uint64_t v22 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1000AB884((char *)1, 5, 1, (char *)v3);
  uint64_t v10 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v14 + 16))(v13, v11);
  sub_1000AC33C(4, (uint64_t)v13, (uint64_t *)&v26, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v15 = v26;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = (void *)swift_allocObject();
  v17[2] = 0xD00000000000001ELL;
  void v17[3] = 0x8000000100157480;
  void v17[4] = v15;
  Swift::String v24 = sub_100029A98;
  Swift::String v25 = v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_1000AB7F8;
  uint64_t v23 = (ValueMetadata *)&unk_100190A08;
  Swift::String v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000AB500()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000AB540(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AB550()
{
  return swift_release();
}

uint64_t sub_1000AB558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributionViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AB5BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributionViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AB618(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_1001997A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for LightGradientBackground()
{
  return &type metadata for LightGradientBackground;
}

uint64_t sub_1000AB688()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000AB6A4@<D0>(uint64_t a1@<X8>)
{
  sub_100006560(&qword_100199118);
  double v2 = COERCE_DOUBLE(swift_allocObject());
  *(_OWORD *)(*(void *)&v2 + 16) = xmmword_10014CCD0;
  if (qword_100198098 != -1) {
    swift_once();
  }
  *(void *)(*(void *)&v2 + 32) = qword_1001AA340;
  swift_retain();
  *(void *)(*(void *)&v2 + 40) = static Color.clear.getter();
  *(double *)&long long v4 = v2;
  specialized Array._endMutation()();
  Gradient.init(colors:)();
  static UnitPoint.top.getter();
  static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  double result = v2;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

unint64_t sub_1000AB7A4()
{
  unint64_t result = qword_10019C9B8;
  if (!qword_10019C9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019C9B8);
  }
  return result;
}

Class sub_1000AB7F8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1000ACAB0();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

char *sub_1000AB884(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006560(&qword_100199238);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[40 * v8 + 32]) {
          memmove(v12, a4 + 32, 40 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000AC3D4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000AB9A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006560(&qword_10019C9D8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000ACAF0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ABAB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ABB20(a1, a2, a3, a4, &qword_10019C9F0, (uint64_t (*)(void))&type metadata accessor for Song, (uint64_t (*)(void))&type metadata accessor for Song);
}

uint64_t sub_1000ABAEC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000ABB20(a1, a2, a3, a4, &qword_10019C9E0, (uint64_t (*)(void))&type metadata accessor for Genre, (uint64_t (*)(void))&type metadata accessor for Genre);
}

uint64_t sub_1000ABB20(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    Swift::String v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100006560(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  Swift::String v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000ACBE4(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_1000ABDA0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100006560(&qword_10019C9E8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000AD028(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000ABEB0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100006560(&qword_10019C9D0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v14);
    if (!v24)
    {
      int64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          int64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    uint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v30 = v29;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v17 == v32;
        if (v17 == v32) {
          unint64_t v17 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    size_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *size_t v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

id sub_1000AC1A0()
{
  uint64_t v1 = v0;
  sub_100006560(&qword_10019C9D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    if (!v23) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000AC33C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  int64_t v9 = sub_100035868((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_1000358CC(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000AC3D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100006560(&qword_10019C9C0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000AC4E4(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  sub_100006560(&qword_100199238);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10014D8E0;
  *(void *)(v16 + 56) = &type metadata for AnalyticsString;
  *(void *)(v16 + 64) = &off_10019BA08;
  *(unsigned char *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = a1;
  *(void *)(v16 + 48) = a2;
  *(void *)(v16 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v16 + 104) = &off_10019B9E0;
  *(unsigned char *)(v16 + 72) = a3;
  *(void *)(v16 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v16 + 144) = &off_10019BA68;
  *(unsigned char *)(v16 + 112) = a4;
  *(void *)(v16 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v16 + 184) = &off_10019BA40;
  *(void *)(v16 + 152) = a5;
  *(void *)(v16 + 160) = a6;
  *(unsigned char *)(v16 + 168) = a7;
  if (*(void *)(a8 + 72))
  {
    uint64_t v17 = *(void *)(a8 + 64);
    unint64_t v18 = *(void *)(a8 + 72);
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
  }
  BOOL v33 = &type metadata for AnalyticsString;
  uint64_t v34 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v31 = v17;
  unint64_t v32 = (Class (*)(uint64_t))v18;
  swift_bridgeObjectRetain();
  sub_1000298CC(a5, a6, a7);
  uint64_t v36 = (char *)v16;
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v20 = *(void *)(v16 + 24);
  swift_bridgeObjectRetain();
  if (v19 >= v20 >> 1) {
    uint64_t v36 = sub_1000AB884((char *)(v20 > 1), v19 + 1, 1, (char *)v16);
  }
  uint64_t v21 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v23);
  sub_1000AC33C(v19, (uint64_t)v23, (uint64_t *)&v36, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  int64_t v25 = v36;
  NSString v26 = String._bridgeToObjectiveC()();
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = 0xD00000000000001ELL;
  v27[3] = 0x8000000100157480;
  v27[4] = v25;
  uint64_t v34 = sub_100029A98;
  uint64_t v35 = v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  unint64_t v32 = sub_1000AB7F8;
  BOOL v33 = (ValueMetadata *)&unk_100190AC8;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);
  swift_bridgeObjectRelease();
}

void sub_1000AC7F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100006560(&qword_100199238);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014CCD0;
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_10019BA08;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_10019B9E0;
  *(unsigned char *)(v8 + 72) = a3;
  if (*(void *)(a4 + 72))
  {
    uint64_t v9 = *(void *)(a4 + 64);
    unint64_t v10 = *(void *)(a4 + 72);
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  uint64_t v24 = &type metadata for AnalyticsString;
  int64_t v25 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v22 = v9;
  unint64_t v23 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_1000AB884((char *)1, 3, 1, (char *)v8);
  uint64_t v11 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v15 + 16))(v14, v12);
  sub_1000AC33C(2, (uint64_t)v14, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  uint64_t v16 = v27;
  NSString v17 = String._bridgeToObjectiveC()();
  unint64_t v18 = (void *)swift_allocObject();
  void v18[2] = 0xD00000000000001CLL;
  v18[3] = 0x80000001001589D0;
  v18[4] = v16;
  int64_t v25 = sub_1000912EC;
  NSString v26 = v18;
  aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256;
  unint64_t v23 = sub_1000AB7F8;
  uint64_t v24 = (ValueMetadata *)&unk_100190A78;
  unint64_t v19 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000ACA98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000ACAA8()
{
  return swift_release();
}

unint64_t sub_1000ACAB0()
{
  unint64_t result = qword_10019C9C8;
  if (!qword_10019C9C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10019C9C8);
  }
  return result;
}

uint64_t sub_1000ACAF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000ACBE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000ACD40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    swift_bridgeObjectRetain();
LABEL_23:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    sub_1000487B4(v2, (uint64_t)v32);
    uint64_t v5 = v33;
    uint64_t v6 = v34;
    sub_100023118(v32, v33);
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    if (_swiftEmptyDictionarySingleton[2])
    {
      sub_1000A80EC(*(void *)&aId_3[8 * v7], *(void *)&aBundleidpagena[8 * v7 + 32]);
      char v9 = v8;
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = v33;
    uint64_t v11 = v34;
    sub_100023118(v32, v33);
    uint64_t v12 = 8 * (*(char (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    uint64_t v13 = *(void *)&aId_3[v12];
    uint64_t v14 = *(void *)&aBundleidpagena[v12 + 32];
    uint64_t v15 = v33;
    uint64_t v16 = v34;
    sub_100023118(v32, v33);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = sub_1000A80EC(v13, v14);
    uint64_t v21 = _swiftEmptyDictionarySingleton[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (_swiftEmptyDictionarySingleton[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        sub_1000AC1A0();
        if ((v24 & 1) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      sub_1000ABEB0(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_1000A80EC(v13, v14);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_26;
      }
      unint64_t v20 = v25;
      if ((v24 & 1) == 0)
      {
LABEL_17:
        _swiftEmptyDictionarySingleton[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v27 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v20);
        *uint64_t v27 = v13;
        v27[1] = v14;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v20) = v17;
        uint64_t v28 = _swiftEmptyDictionarySingleton[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_25;
        }
        _swiftEmptyDictionarySingleton[2] = v30;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    uint64_t v3 = _swiftEmptyDictionarySingleton[7];
    uint64_t v4 = *(void **)(v3 + 8 * v20);
    *(void *)(v3 + 8 * v20) = v17;

LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_100029A08((uint64_t)v32);
    v2 += 40;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AD028(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AD124@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD1F4(&qword_10019CA48, &qword_10019CA50, (uint64_t (*)(void))&type metadata accessor for Artist, a1);
}

uint64_t sub_1000AD14C(uint64_t a1)
{
  uint64_t result = sub_1000AF690(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = sub_1000AF7F0(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000AD1CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD1F4(&qword_10019CA68, &qword_10019CA70, (uint64_t (*)(void))&type metadata accessor for Playlist, a1);
}

uint64_t sub_1000AD1F4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  sub_100006560(a1);
  sub_100010484(a2, a1);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v15[4] == v15[0])
  {
    uint64_t v8 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 1, 1, v8);
  }
  else
  {
    uint64_t v10 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v12 = v11;
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a4, v12, v13);
    v10(v15, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a4, 0, 1, v13);
  }
}

uint64_t sub_1000AD38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000AF690(a1);
  if (v6) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = type metadata accessor for Artist();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a2;
    uint64_t v11 = 1;
  }
  else
  {
    sub_1000AF730(result, v5, a1, a2);
    uint64_t v12 = type metadata accessor for Artist();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v9 = v12;
    uint64_t v10 = a2;
    uint64_t v11 = 0;
  }

  return v8(v10, v11, 1, v9);
}

uint64_t sub_1000AD470()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000AD494(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_1000AD55C()
{
  return EnvironmentValues.dismiss.getter();
}

_OWORD *sub_1000AD580(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  uint64_t v3 = sub_100006560(&qword_10019B8C0);
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  __chkstk_darwin(v3);
  long long v60 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100006560(&qword_10019AC80);
  __chkstk_darwin(v5 - 8);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019C140);
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  long long v56 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_10019C148);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  int v52 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100006560(&qword_100199220);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100006560(&qword_100199230);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  char v19 = (char *)v2 + qword_10019C070;
  *(void *)&long long v63 = 0;
  Published.init(initialValue:)();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v51(v19, v18, v15);
  unint64_t v20 = (char *)v2 + qword_10019C078;
  LOBYTE(v63) = 0;
  Published.init(initialValue:)();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v20, v14, v11);
  BOOL v22 = (char *)v2 + qword_10019C080;
  LOBYTE(v63) = 0;
  Published.init(initialValue:)();
  v21(v22, v14, v11);
  uint64_t v23 = (char *)v2 + qword_10019C088;
  LOBYTE(v63) = 0;
  Published.init(initialValue:)();
  uint64_t v24 = v11;
  uint64_t v25 = (uint64_t)v53;
  v21(v23, v14, v24);
  uint64_t v26 = v57;
  uint64_t v27 = (char *)v2 + qword_10019C090;
  *(void *)&long long v63 = 0;
  Published.init(initialValue:)();
  v51(v27, v18, v15);
  uint64_t v28 = (char *)v2 + qword_10019C098;
  type metadata accessor for CGSize(0);
  long long v63 = 0uLL;
  BOOL v29 = v52;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v28, v29, v55);
  uint64_t v30 = (char *)v2 + qword_10019C0A0;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v31 = v56;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v30, v31, v59);
  unint64_t v32 = (char *)v2 + *(void *)(*(void *)v2 + 176);
  uint64_t v33 = type metadata accessor for UserInterfaceSizeClass();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = (char *)v2 + *(void *)(*(void *)v2 + 160);
  uint64_t v35 = sub_100006560(&qword_10019A5D0);
  uint64_t v36 = *(void *)(v35 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v26, v35);
  sub_1000AF648(&qword_10019B8C8, (void (*)(uint64_t))&type metadata accessor for LiveMusic);
  uint64_t v37 = v60;
  Event<>.participants.getter();
  uint64_t v38 = Participants<>.headliners.getter();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v62);
  sub_1000AD38C(v38, v25);
  swift_bridgeObjectRelease();
  uint64_t v39 = type metadata accessor for Artist();
  uint64_t v40 = *(void *)(v39 - 8);
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v25, 1, v39);
  if (v41 == 1)
  {
    sub_1000067DC(v25, &qword_10019AC80);
    uint64_t v45 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 152))(v35, v45);
    uint64_t v44 = v46;
  }
  else
  {
    uint64_t v42 = Artist.id.getter();
    uint64_t v44 = v43;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v25, v39);
  }
  type metadata accessor for PromotionalAssetsController();
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  uint64_t v49 = type metadata accessor for ArtistPromotionalAssets();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 1, 1, v49);
  *(void *)(v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(void *)(v47 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()();
  *(void *)(v47 + 16) = v42;
  *(void *)(v47 + 24) = v44;
  *(unsigned char *)(v47 + 32) = v41 != 1;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v26, v35);
  *(void *)((char *)v2 + *(void *)(*(void *)v2 + 168)) = v47;
  return v2;
}

uint64_t sub_1000ADD70()
{
  return sub_10010755C();
}

uint64_t sub_1000ADDA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v116 = a1;
  uint64_t v94 = type metadata accessor for TaskPriority();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100006560(&qword_100198E90);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v88 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100006560(&qword_10019AC38);
  __chkstk_darwin(v115);
  uint64_t v87 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v90 = (uint64_t)&v84 - v6;
  uint64_t v96 = type metadata accessor for ErrorView();
  __chkstk_darwin(v96);
  long long v97 = (uint64_t *)((char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v99 = (uint64_t)&v84 - v9;
  uint64_t v111 = sub_100006560(&qword_10019AC50);
  __chkstk_darwin(v111);
  uint64_t v98 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v100 = (uint64_t)&v84 - v12;
  uint64_t v112 = sub_100006560(&qword_10019C9F8);
  __chkstk_darwin(v112);
  uint64_t v114 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100006560(&qword_10019CA00);
  __chkstk_darwin(v107);
  uint64_t v109 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_100006560(&qword_10019CA08);
  __chkstk_darwin(v113);
  uint64_t v110 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_100006560(&qword_10019CA10);
  __chkstk_darwin(v108);
  uint64_t v101 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v95 = (uint64_t)&v84 - v18;
  uint64_t v19 = sub_100006560(&qword_10019AD10);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006560(&qword_10019A5D0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  __chkstk_darwin(v22);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v84 - v26;
  uint64_t v29 = *(void *)(v1 + 16);
  uint64_t v28 = *(void *)(v1 + 24);
  uint64_t v117 = (void *)v1;
  int v30 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v31 = type metadata accessor for EventController();
  uint64_t v32 = sub_1000AF648(&qword_10019CA18, (void (*)(uint64_t))type metadata accessor for EventController);
  uint64_t v104 = v29;
  uint64_t v105 = v28;
  int v106 = v30;
  uint64_t v102 = v32;
  uint64_t v103 = v31;
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v33 = v23;
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
  {
    uint64_t v35 = (uint64_t)v101;
    uint64_t v36 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v85 = v33;
    char v84 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v84(v27, v21, v22);
    uint64_t v34 = v117;
    uint64_t v37 = *v117;
    uint64_t v38 = v117[1];
    uint64_t v39 = sub_100010484((unint64_t *)&qword_10019A5D8, &qword_10019A5D0);
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 152);
    char v86 = v27;
    if (v37 == v40(v22, v39) && v38 == v41)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v22);
        goto LABEL_9;
      }
    }
    uint64_t v43 = v85;
    uint64_t v44 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v36, v86, v22);
    unint64_t v45 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v46 = swift_allocObject();
    v84((char *)(v46 + v45), v36, v22);
    *(void *)uint64_t v35 = sub_1000AF5B4;
    *(void *)(v35 + 8) = v46;
    *(unsigned char *)(v35 + 16) = 0;
    *(void *)(v35 + 24) = sub_100053138;
    *(void *)(v35 + 32) = 0;
    *(unsigned char *)(v35 + 40) = 0;
    sub_100006560(&qword_1001999F0);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    sub_100010484(&qword_1001999F8, &qword_1001999F0);
    *(void *)(v35 + 48) = ObservedObject.init(wrappedValue:)();
    *(void *)(v35 + 56) = v47;
    *(void *)(v35 + 64) = 0;
    type metadata accessor for RemoteViewConfiguration();
    sub_1000AF648((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *(void *)(v35 + 72) = EnvironmentObject.init()();
    *(void *)(v35 + 80) = v48;
    uint64_t v49 = v108;
    uint64_t v50 = (uint64_t *)(v35 + *(int *)(v108 + 52));
    *uint64_t v50 = swift_getKeyPath();
    sub_100006560(qword_100198AA0);
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = (uint64_t *)(v35 + *(int *)(v49 + 56));
    uint64_t *v51 = swift_getKeyPath();
    sub_100006560(&qword_100198A98);
    swift_storeEnumTagMultiPayload();
    int v52 = (uint64_t *)(v35 + *(int *)(v49 + 60));
    uint64_t *v52 = swift_getKeyPath();
    sub_100006560(&qword_100198940);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = v95;
    sub_10001D6D8(v35, v95, &qword_10019CA10);
    sub_1000066D4(v53, v109, &qword_10019CA10);
    swift_storeEnumTagMultiPayload();
    sub_100010484(&qword_10019CA38, &qword_10019CA10);
    sub_10006DEC4();
    uint64_t v54 = (uint64_t)v110;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v54, v114, &qword_10019CA08);
    swift_storeEnumTagMultiPayload();
    sub_1000AF390();
    sub_10006DF70();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v54, &qword_10019CA08);
    sub_1000067DC(v53, &qword_10019CA10);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v22);
  }
  sub_1000067DC((uint64_t)v21, &qword_10019AD10);
  uint64_t v34 = v117;
LABEL_9:
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v56 = v119;
  swift_errorRelease();
  if (v56)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v58 = (uint64_t)v97;
    uint64_t *v97 = KeyPath;
    sub_100006560(qword_100198AA0);
    swift_storeEnumTagMultiPayload();
    uint64_t v59 = (uint64_t *)(v58 + *(int *)(v96 + 20));
    type metadata accessor for RemoteViewConfiguration();
    sub_1000AF648((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    *uint64_t v59 = EnvironmentObject.init()();
    v59[1] = v60;
    uint64_t v61 = v99;
    sub_10006E1C8(v58, v99);
    long long v62 = *(_OWORD *)v34;
    long long v118 = *(_OWORD *)(v34 + 5);
    long long v119 = v62;
    uint64_t v63 = swift_allocObject();
    long long v64 = *((_OWORD *)v34 + 1);
    *(_OWORD *)(v63 + 16) = *(_OWORD *)v34;
    *(_OWORD *)(v63 + 32) = v64;
    *(_OWORD *)(v63 + 48) = *((_OWORD *)v34 + 2);
    *(void *)(v63 + 64) = v34[6];
    uint64_t v65 = v98;
    sub_1000AF460(v61, v98);
    uint64_t v66 = (uint64_t (**)())(v65 + *(int *)(v111 + 36));
    *uint64_t v66 = sub_1000AF458;
    v66[1] = (uint64_t (*)())v63;
    v66[2] = 0;
    v66[3] = 0;
    sub_10002FE0C((uint64_t)&v119);
    sub_100035D50();
    sub_1000636C8((uint64_t)&v118);
    sub_1000AF4C4(v61);
    uint64_t v67 = &qword_10019AC50;
    uint64_t v68 = v100;
    sub_10001D6D8(v65, v100, &qword_10019AC50);
    sub_1000066D4(v68, v109, &qword_10019AC50);
    swift_storeEnumTagMultiPayload();
    sub_100010484(&qword_10019CA38, &qword_10019CA10);
    sub_10006DEC4();
    uint64_t v69 = (uint64_t)v110;
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4(v69, v114, &qword_10019CA08);
    swift_storeEnumTagMultiPayload();
    sub_1000AF390();
    sub_10006DF70();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC(v69, &qword_10019CA08);
    uint64_t v70 = v68;
  }
  else
  {
    uint64_t v71 = v88;
    ProgressView<>.init<>()();
    long long v72 = *(_OWORD *)v34;
    long long v118 = *(_OWORD *)(v34 + 5);
    long long v119 = v72;
    uint64_t v73 = swift_allocObject();
    long long v74 = *((_OWORD *)v34 + 1);
    *(_OWORD *)(v73 + 16) = *(_OWORD *)v34;
    *(_OWORD *)(v73 + 32) = v74;
    *(_OWORD *)(v73 + 48) = *((_OWORD *)v34 + 2);
    *(void *)(v73 + 64) = v34[6];
    sub_100035D50();
    sub_10002FE0C((uint64_t)&v119);
    sub_1000636C8((uint64_t)&v118);
    uint64_t v75 = v92;
    static TaskPriority.userInitiated.getter();
    uint64_t v76 = (uint64_t)v87;
    uint64_t v77 = &v87[*(int *)(v115 + 36)];
    uint64_t v78 = type metadata accessor for _TaskModifier();
    uint64_t v79 = v93;
    uint64_t v80 = v94;
    (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v77[*(int *)(v78 + 20)], v75, v94);
    *(void *)uint64_t v77 = &unk_10019CA28;
    *((void *)v77 + 1) = v73;
    uint64_t v81 = v89;
    uint64_t v82 = v91;
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v76, v71, v91);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v75, v80);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v71, v82);
    uint64_t v67 = &qword_10019AC38;
    uint64_t v83 = v90;
    sub_10001D6D8(v76, v90, &qword_10019AC38);
    sub_1000066D4(v83, v114, &qword_10019AC38);
    swift_storeEnumTagMultiPayload();
    sub_1000AF390();
    sub_10006DF70();
    _ConditionalContent<>.init(storage:)();
    uint64_t v70 = v83;
  }
  return sub_1000067DC(v70, v67);
}

_OWORD *sub_1000AEC60(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019A5D0);
  __n128 v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  sub_100006560(&qword_10019CA40);
  swift_allocObject();
  return sub_1000AD580((uint64_t)v5);
}

uint64_t sub_1000AED40(uint64_t *a1)
{
  type metadata accessor for EventController();
  sub_1000AF648(&qword_10019CA18, (void (*)(uint64_t))type metadata accessor for EventController);
  StateObject.wrappedValue.getter();
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000AC7F8(v4, v3, 1, v2);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000AF648((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AEE84(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_1000AEF1C, v3, v2);
}

uint64_t sub_1000AEF1C()
{
  uint64_t v1 = (uint64_t *)v0[2];
  type metadata accessor for EventController();
  sub_1000AF648(&qword_10019CA18, (void (*)(uint64_t))type metadata accessor for EventController);
  v0[6] = StateObject.wrappedValue.getter();
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006D658;
  return sub_100106D94(v2, v3);
}

uint64_t sub_1000AF034()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1000AF0B0(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_10019AD10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1000066D4(a1, (uint64_t)&v9 - v6, &qword_10019AD10);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000066D4((uint64_t)v7, (uint64_t)v4, &qword_10019AD10);
  swift_retain();
  static Published.subscript.setter();
  return sub_1000067DC((uint64_t)v7, &qword_10019AD10);
}

uint64_t sub_1000AF1C0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000AF240()
{
  return static Published.subscript.setter();
}

ValueMetadata *type metadata accessor for EventContentView()
{
  return &type metadata for EventContentView;
}

uint64_t sub_1000AF2CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AF2FC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100010CB0;
  return sub_1000AEE84(v0 + 16);
}

unint64_t sub_1000AF390()
{
  unint64_t result = qword_10019CA30;
  if (!qword_10019CA30)
  {
    sub_10000650C(&qword_10019CA08);
    sub_100010484(&qword_10019CA38, &qword_10019CA10);
    sub_10006DEC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CA30);
  }
  return result;
}

uint64_t sub_1000AF430()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_1000AF458()
{
  return sub_1000AED40((uint64_t *)(v0 + 16));
}

uint64_t sub_1000AF460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AF4C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ErrorView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AF520()
{
  uint64_t v1 = sub_100006560(&qword_10019A5D0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

_OWORD *sub_1000AF5B4()
{
  uint64_t v1 = *(void *)(sub_100006560(&qword_10019A5D0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000AEC60(v2);
}

uint64_t sub_1000AF618()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000AF648(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AF690(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000AF730@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = type metadata accessor for Artist();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v6 + *(void *)(v8 + 72) * v4;

  return v9(a4, v10, v7);
}

uint64_t sub_1000AF7F0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_1000AF848()
{
  unint64_t result = qword_10019CA58;
  if (!qword_10019CA58)
  {
    sub_10000650C(&qword_10019CA60);
    sub_1000AF390();
    sub_10006DF70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CA58);
  }
  return result;
}

uint64_t destroy for ScrollableTab(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for ScrollableTab(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5 >= 2)
  {
    a1[1] = *v4;
    a1[2] = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  }
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  uint64_t v7 = a2[6];
  a1[5] = a2[5];
  a1[6] = v7;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ScrollableTab(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v4 >= 2)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000AFAA0((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    goto LABEL_8;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  return a1;
}

uint64_t sub_1000AFAA0(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ScrollableTab(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = (void *)(a2 + 8);
  if (*(void *)(a1 + 16) >= 2uLL)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >= 2)
    {
      *(void *)(a1 + 8) = *v4;
      *(void *)(a1 + 16) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000AFAA0(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTab(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTab(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableTab()
{
  return &type metadata for ScrollableTab;
}

uint64_t sub_1000AFC40()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AFC5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v5 = type metadata accessor for ScrollViewProxy();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v19 = sub_100006560(&qword_10019CA88);
  uint64_t v8 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Axis.Set.horizontal.getter();
  uint64_t v21 = a2;
  sub_100006560(&qword_10019CA90);
  sub_1000B06B8();
  ScrollView.init(_:showsIndicators:content:)();
  long long v11 = *(_OWORD *)(a2 + 1);
  uint64_t v24 = *a2;
  long long v22 = *(_OWORD *)(a2 + 5);
  long long v23 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  long long v14 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = *((_OWORD *)a2 + 2);
  *(void *)(v13 + 64) = a2[6];
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v15 = v19;
  uint64_t v16 = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v20, v10, v19);
  uint64_t v17 = (uint64_t (**)())(v16 + *(int *)(sub_100006560(&qword_10019CAB0) + 36));
  *uint64_t v17 = sub_1000B084C;
  v17[1] = (uint64_t (*)())v13;
  v17[2] = 0;
  void v17[3] = 0;
  sub_10002FE38((uint64_t)&v24);
  sub_1000B066C((uint64_t)&v23);
  swift_retain();
  sub_1000636C8((uint64_t)&v22);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v15);
}

uint64_t sub_1000AFF08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100006560(&qword_10019CAA8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4020000000000000;
  v6[16] = 0;
  sub_100006560(&qword_10019CAB8);
  uint64_t v7 = *a1;
  long long v15 = *(_OWORD *)(a1 + 1);
  uint64_t v16 = v7;
  v13[1] = v7;
  swift_getKeyPath();
  long long v14 = *(_OWORD *)(a1 + 5);
  uint64_t v8 = swift_allocObject();
  long long v9 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *((_OWORD *)a1 + 2);
  *(void *)(v8 + 64) = a1[6];
  swift_bridgeObjectRetain();
  sub_10002FE38((uint64_t)&v16);
  sub_1000B066C((uint64_t)&v15);
  swift_retain();
  sub_1000636C8((uint64_t)&v14);
  sub_100006560(&qword_10019CAC0);
  sub_100006560(&qword_10019CAC8);
  sub_100010484(&qword_10019CAD0, &qword_10019CAC0);
  sub_1000B1D8C();
  sub_100010484(&qword_10019CAE0, &qword_10019CAC8);
  ForEach<>.init(_:id:content:)();
  char v10 = static Edge.Set.horizontal.getter();
  sub_1000066D4((uint64_t)v6, a2, &qword_10019CAA8);
  uint64_t v11 = a2 + *(int *)(sub_100006560(&qword_10019CA90) + 36);
  *(unsigned char *)uint64_t v11 = v10;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(unsigned char *)(v11 + 40) = 1;
  return sub_1000067DC((uint64_t)v6, &qword_10019CAA8);
}

uint64_t sub_1000B015C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  __n128 v17 = *(__n128 *)(a2 + 8);
  sub_1000B1DE0(&v17, &v18);
  sub_1000B1DE0(&v18, &v19);
  if (v19.n128_u64[1] == 1)
  {
    if (v6 == 1)
    {
      uint64_t v8 = swift_allocObject();
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
      *(void *)(v8 + 64) = *(void *)(a2 + 48);
      *(void *)(v8 + 72) = v5;
      char v10 = 1;
      *(void *)(v8 + 80) = 1;
LABEL_10:
      unint64_t v11 = 0xEF6E6F697461636FLL;
      uint64_t v7 = 0x4C746E6572727563;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (v19.n128_u64[1])
  {
    if (v6 >= 2)
    {
      if (v19.n128_u64[0] == v5 && v6 == v19.n128_u64[1])
      {
        uint64_t v8 = swift_allocObject();
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 32) = v14;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
        *(void *)(v8 + 64) = *(void *)(a2 + 48);
        *(void *)(v8 + 72) = v5;
        *(void *)(v8 + 80) = v6;
        char v10 = 1;
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v8 = swift_allocObject();
        long long v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 32) = v15;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
        *(void *)(v8 + 64) = *(void *)(a2 + 48);
        *(void *)(v8 + 72) = v5;
        *(void *)(v8 + 80) = v6;
      }
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v8 = swift_allocObject();
    char v10 = 0;
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
    *(void *)(v8 + 64) = *(void *)(a2 + 48);
    *(void *)(v8 + 72) = v5;
    *(void *)(v8 + 80) = v6;
    if (!v6)
    {
      uint64_t v7 = 7105633;
      unint64_t v11 = 0xE300000000000000;
      goto LABEL_18;
    }
    if (v6 == 1) {
      goto LABEL_10;
    }
    char v10 = 0;
LABEL_17:
    uint64_t v7 = v5;
    unint64_t v11 = v6;
    goto LABEL_18;
  }
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v7 = 7105633;
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 64) = *(void *)(a2 + 48);
  *(void *)(v8 + 72) = v5;
  *(void *)(v8 + 80) = 0;
  char v10 = 1;
  unint64_t v11 = 0xE300000000000000;
LABEL_18:
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v10 & 1;
  *(void *)(a3 + 24) = sub_1000B1E40;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v11;
  sub_1000B069C(v5, v6);
  sub_1000B069C(v5, v6);
  sub_1000B069C(v5, v6);
  swift_bridgeObjectRetain();
  sub_1000B066C((uint64_t)&v17);
  swift_retain();
  return swift_retain();
}

uint64_t sub_1000B0450(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = swift_retain();
    uint64_t v4 = sub_1000BCCC4(v3, v2);
    uint64_t v6 = v5;
    uint64_t result = swift_release();
    if (v6 != 2)
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(v4, v6);
      static UnitPoint.trailing.getter();
      ScrollViewProxy.scrollTo<A>(_:anchor:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    type metadata accessor for RemoteViewConfiguration();
    sub_1000B27E0((unint64_t *)&qword_1001982B8, (void (*)(uint64_t))type metadata accessor for RemoteViewConfiguration);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B05AC@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  long long v8 = *(_OWORD *)(v1 + 1);
  uint64_t v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v1 + 1);
  *(void *)(v6 + 40) = v5;
  *(void *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v1 + 5);
  *a1 = sub_1000B0664;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  sub_10002FE38((uint64_t)&v9);
  sub_1000B066C((uint64_t)&v8);
  swift_retain();
  return sub_1000636C8((uint64_t)&v10);
}

uint64_t sub_1000B0664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AFC5C(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_1000B066C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B069C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000B06B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AFF08(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_1000B06B8()
{
  unint64_t result = qword_10019CA98;
  if (!qword_10019CA98)
  {
    sub_10000650C(&qword_10019CA90);
    sub_100010484(&qword_10019CAA0, &qword_10019CAA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CA98);
  }
  return result;
}

uint64_t sub_1000B0758()
{
  uint64_t v1 = type metadata accessor for ScrollViewProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 72) & ~v3), v1);

  return swift_deallocObject();
}

uint64_t sub_1000B084C()
{
  type metadata accessor for ScrollViewProxy();

  return sub_1000B0450(v0 + 16);
}

void sub_1000B08B0()
{
  id v0 = [self mainBundle];
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x8000000100158A90;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_10019CA78 = (__int128)v3;
}

uint64_t sub_1000B0954@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  v19[0] = sub_100006560(&qword_10019CAF8);
  __chkstk_darwin(v19[0]);
  Swift::String v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_10019CB00);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_10019CB08);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019CB10);
  __chkstk_darwin(v10);
  long long v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100006560(&qword_10019CB18);
  __chkstk_darwin(v13);
  long long v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B1DE0(v1, &v20);
  sub_1000B1DE0(&v20, &v21);
  if (v21.n128_u64[1] == 1)
  {
    sub_1000B1154((uint64_t)v3);
    sub_1000066D4((uint64_t)v3, (uint64_t)v9, &qword_10019CAF8);
    swift_storeEnumTagMultiPayload();
    sub_1000B21F0();
    sub_1000B23D0();
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4((uint64_t)v12, (uint64_t)v6, &qword_10019CB10);
    swift_storeEnumTagMultiPayload();
    sub_1000B21B4();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC((uint64_t)v12, &qword_10019CB10);
    uint64_t v16 = (uint64_t)v3;
    __n128 v17 = &qword_10019CAF8;
  }
  else if (v21.n128_u64[1])
  {
    sub_1000B0D68(v21.n128_i64[0], v21.n128_i64[1], (uint64_t)v15);
    sub_1000066D4((uint64_t)v15, (uint64_t)v6, &qword_10019CB18);
    swift_storeEnumTagMultiPayload();
    sub_1000B21B4();
    sub_1000B21F0();
    _ConditionalContent<>.init(storage:)();
    uint64_t v16 = (uint64_t)v15;
    __n128 v17 = &qword_10019CB18;
  }
  else
  {
    if (qword_100198130 != -1) {
      swift_once();
    }
    sub_1000B0D68(xmmword_10019CA78, *((uint64_t *)&xmmword_10019CA78 + 1), (uint64_t)v15);
    sub_1000066D4((uint64_t)v15, (uint64_t)v9, &qword_10019CB18);
    swift_storeEnumTagMultiPayload();
    sub_1000B21F0();
    sub_1000B23D0();
    _ConditionalContent<>.init(storage:)();
    sub_1000066D4((uint64_t)v12, (uint64_t)v6, &qword_10019CB10);
    swift_storeEnumTagMultiPayload();
    sub_1000B21B4();
    _ConditionalContent<>.init(storage:)();
    sub_1000067DC((uint64_t)v12, &qword_10019CB10);
    uint64_t v16 = (uint64_t)v15;
    __n128 v17 = &qword_10019CB18;
  }
  return sub_1000067DC(v16, v17);
}

uint64_t sub_1000B0D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v47 = a3;
  uint64_t v45 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v45);
  uint64_t v46 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100006560(&qword_10019CB58);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100006560(&qword_10019CB48);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100006560(&qword_10019CB38);
  __chkstk_darwin(v44);
  long long v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v43;
  uint64_t v49 = a2;
  uint64_t v50 = v3;
  swift_retain();
  sub_100006560(&qword_10019CBD0);
  sub_1000B289C();
  Button.init(action:label:)();
  char v16 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  uint64_t v25 = &v13[*(int *)(v11 + 44)];
  *uint64_t v25 = v16;
  *((void *)v25 + 1) = v18;
  *((void *)v25 + 2) = v20;
  *((void *)v25 + 3) = v22;
  *((void *)v25 + 4) = v24;
  v25[40] = 0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v26 = static Color.primary.getter();
  }
  else
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_1001AA340;
    swift_retain();
  }
  char v27 = static Edge.Set.all.getter();
  sub_1000066D4((uint64_t)v13, (uint64_t)v15, &qword_10019CB48);
  uint64_t v28 = &v15[*(int *)(v44 + 36)];
  *(void *)uint64_t v28 = v26;
  _OWORD v28[8] = v27;
  sub_1000067DC((uint64_t)v13, &qword_10019CB48);
  uint64_t v29 = v46;
  int v30 = &v46[*(int *)(v45 + 20)];
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #8.0 }
  *uint64_t v29 = _Q0;
  uint64_t v38 = sub_100006560(&qword_10019CB18);
  uint64_t v39 = v47;
  uint64_t v40 = v47 + *(int *)(v38 + 36);
  sub_10001081C((uint64_t)v29, v40);
  *(_WORD *)(v40 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4((uint64_t)v15, v39, &qword_10019CB38);
  sub_100010934((uint64_t)v29);
  return sub_1000067DC((uint64_t)v15, &qword_10019CB38);
}

uint64_t sub_1000B1154@<X0>(uint64_t a1@<X8>)
{
  uint64_t v79 = a1;
  uint64_t v2 = type metadata accessor for AccessibilityTraits();
  uint64_t v80 = *(void *)(v2 - 8);
  uint64_t v81 = v2;
  __chkstk_darwin(v2);
  uint64_t v78 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v76);
  uint64_t v77 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for TitleAndIconLabelStyle();
  uint64_t v71 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v67 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for SymbolVariants();
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100006560(&qword_10019CBC0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LocationButton();
  uint64_t v60 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100006560(&qword_10019CBA8);
  uint64_t v63 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  long long v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100006560(&qword_10019CBC8);
  uint64_t v62 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v59 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100006560(&qword_10019CBA0);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100006560(&qword_10019CB90);
  __chkstk_darwin(v68);
  long long v72 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100006560(&qword_10019CB80);
  __chkstk_darwin(v70);
  uint64_t v73 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100006560(&qword_10019CB70);
  __chkstk_darwin(v74);
  uint64_t v75 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LocationButton.Title.currentLocation.getter();
  uint64_t v24 = type metadata accessor for LocationButton.Title();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 0, 1, v24);
  uint64_t v58 = v1;
  swift_retain();
  LocationButton.init(_:action:)();
  static SymbolVariants.fill.getter();
  uint64_t v25 = sub_1000B27E0(&qword_10019CBB0, (void (*)(uint64_t))&type metadata accessor for LocationButton);
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v7, v66);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v11);
  uint64_t v26 = v67;
  TitleAndIconLabelStyle.init()();
  uint64_t v82 = v11;
  uint64_t v83 = v25;
  swift_getOpaqueTypeConformance2();
  sub_1000B27E0(&qword_10019CBB8, (void (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle);
  char v27 = v59;
  uint64_t v28 = v61;
  uint64_t v29 = v69;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v26, v29);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v28);
  uint64_t v30 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v62;
  uint64_t v33 = v65;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v20, v27, v65);
  uint64_t v34 = (uint64_t *)&v20[*(int *)(v18 + 44)];
  *uint64_t v34 = KeyPath;
  v34[1] = v30;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v33);
  char v35 = *(unsigned char *)(v58 + 16);
  if (v35)
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_1001AA338;
    swift_retain();
  }
  else
  {
    uint64_t v36 = static Color.primary.getter();
  }
  uint64_t v37 = (uint64_t)v72;
  uint64_t v38 = swift_getKeyPath();
  sub_1000066D4((uint64_t)v20, v37, &qword_10019CBA0);
  uint64_t v39 = (uint64_t *)(v37 + *(int *)(v68 + 36));
  *uint64_t v39 = v38;
  v39[1] = v36;
  sub_1000067DC((uint64_t)v20, &qword_10019CBA0);
  if (v35)
  {
    uint64_t v40 = static Color.primary.getter();
  }
  else
  {
    if (qword_100198098 != -1) {
      swift_once();
    }
    uint64_t v40 = qword_1001AA340;
    swift_retain();
  }
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = v73;
  sub_1000066D4(v37, v73, &qword_10019CB90);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v70 + 36));
  uint64_t *v43 = v41;
  v43[1] = v40;
  sub_1000067DC(v37, &qword_10019CB90);
  uint64_t v44 = v77;
  uint64_t v45 = &v77[*(int *)(v76 + 20)];
  uint64_t v46 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v47 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v45, v46, v47);
  __asm { FMOV            V0.2D, #8.0 }
  _OWORD *v44 = _Q0;
  uint64_t v53 = (uint64_t)v75;
  uint64_t v54 = (uint64_t)&v75[*(int *)(v74 + 36)];
  sub_10001081C((uint64_t)v44, v54);
  *(_WORD *)(v54 + *(int *)(sub_100006560(&qword_100198618) + 36)) = 256;
  sub_1000066D4(v42, v53, &qword_10019CB80);
  sub_100010934((uint64_t)v44);
  sub_1000067DC(v42, &qword_10019CB80);
  uint64_t v55 = v78;
  static AccessibilityTraits.isButton.getter();
  sub_1000B247C();
  View.accessibility(addTraits:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v55, v81);
  return sub_1000067DC(v53, &qword_10019CB70);
}

double sub_1000B1AF0@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_10002374C();
  swift_bridgeObjectRetain();
  uint64_t v3 = Text.init<A>(_:)();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  static Font.subheadline.getter();
  uint64_t v8 = Text.font(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  swift_release();
  sub_1000065A4(v3, v5, v7);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 16))
  {
    if (qword_100198090 != -1) {
      swift_once();
    }
    swift_retain();
  }
  else
  {
    static Color.primary.getter();
  }
  uint64_t v13 = Text.foregroundColor(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  sub_1000065A4(v8, v10, v12 & 1);
  swift_bridgeObjectRelease();
  char v20 = static Edge.Set.horizontal.getter();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v17 & 1;
  *(void *)(a2 + 24) = v19;
  *(unsigned char *)(a2 + 32) = v20;
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(unsigned char *)(a2 + 72) = 1;
  return result;
}

uint64_t sub_1000B1C94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B0954(a1);
}

uint64_t sub_1000B1CD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B1CFC()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_1000B1D2C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000B1D84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B015C(a1, v2 + 16, a2);
}

unint64_t sub_1000B1D8C()
{
  unint64_t result = qword_10019CAD8;
  if (!qword_10019CAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CAD8);
  }
  return result;
}

__n128 *sub_1000B1DE0(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_1000B1E54()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_1000B1EBC()
{
  return (*(uint64_t (**)(void, void))(v0 + 40))(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t destroy for TabButton(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 2)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000AFAA0(a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabButton(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) >= 2uLL)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000AFAA0(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabButton()
{
  return &type metadata for TabButton;
}

uint64_t sub_1000B215C()
{
  return sub_100010484(&qword_10019CAE8, &qword_10019CAF0);
}

uint64_t sub_1000B2198()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B21B4()
{
  return sub_1000B2960(&qword_10019CB20, &qword_10019CB10, (void (*)(void))sub_1000B21F0, (void (*)(void))sub_1000B23D0);
}

unint64_t sub_1000B21F0()
{
  unint64_t result = qword_10019CB28;
  if (!qword_10019CB28)
  {
    sub_10000650C(&qword_10019CB18);
    sub_1000B2290();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB28);
  }
  return result;
}

unint64_t sub_1000B2290()
{
  unint64_t result = qword_10019CB30;
  if (!qword_10019CB30)
  {
    sub_10000650C(&qword_10019CB38);
    sub_1000B2330();
    sub_100010484(&qword_100198600, &qword_100198608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB30);
  }
  return result;
}

unint64_t sub_1000B2330()
{
  unint64_t result = qword_10019CB40;
  if (!qword_10019CB40)
  {
    sub_10000650C(&qword_10019CB48);
    sub_100010484(&qword_10019CB50, &qword_10019CB58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB40);
  }
  return result;
}

unint64_t sub_1000B23D0()
{
  unint64_t result = qword_10019CB60;
  if (!qword_10019CB60)
  {
    sub_10000650C(&qword_10019CAF8);
    sub_1000B247C();
    sub_1000B27E0((unint64_t *)&qword_1001982A0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB60);
  }
  return result;
}

unint64_t sub_1000B247C()
{
  unint64_t result = qword_10019CB68;
  if (!qword_10019CB68)
  {
    sub_10000650C(&qword_10019CB70);
    sub_1000B251C();
    sub_100010484(&qword_100198610, &qword_100198618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB68);
  }
  return result;
}

unint64_t sub_1000B251C()
{
  unint64_t result = qword_10019CB78;
  if (!qword_10019CB78)
  {
    sub_10000650C(&qword_10019CB80);
    sub_1000B25BC();
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB78);
  }
  return result;
}

unint64_t sub_1000B25BC()
{
  unint64_t result = qword_10019CB88;
  if (!qword_10019CB88)
  {
    sub_10000650C(&qword_10019CB90);
    sub_1000B265C();
    sub_100010484((unint64_t *)&qword_100198888, &qword_100198890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB88);
  }
  return result;
}

unint64_t sub_1000B265C()
{
  unint64_t result = qword_10019CB98;
  if (!qword_10019CB98)
  {
    sub_10000650C(&qword_10019CBA0);
    sub_10000650C(&qword_10019CBA8);
    type metadata accessor for TitleAndIconLabelStyle();
    type metadata accessor for LocationButton();
    sub_1000B27E0(&qword_10019CBB0, (void (*)(uint64_t))&type metadata accessor for LocationButton);
    swift_getOpaqueTypeConformance2();
    sub_1000B27E0(&qword_10019CBB8, (void (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle);
    swift_getOpaqueTypeConformance2();
    sub_100010484(&qword_1001985E0, &qword_1001985E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CB98);
  }
  return result;
}

uint64_t sub_1000B27E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B2838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B2864()
{
  return EnvironmentValues.tintColor.setter();
}

double sub_1000B2890@<D0>(uint64_t a1@<X8>)
{
  return sub_1000B1AF0(*(void *)(v1 + 32), a1);
}

unint64_t sub_1000B289C()
{
  unint64_t result = qword_10019CBD8;
  if (!qword_10019CBD8)
  {
    sub_10000650C(&qword_10019CBD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CBD8);
  }
  return result;
}

uint64_t sub_1000B2910()
{
  return sub_1000B2960(&qword_10019CBE0, &qword_10019CBE8, (void (*)(void))sub_1000B21B4, (void (*)(void))sub_1000B21F0);
}

uint64_t sub_1000B2960(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000650C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B29EC()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1000B2ACC()
{
  return sub_1000B2CC8() * 0.6136 * 0.74;
}

double sub_1000B2AFC()
{
  return sub_1000B2CC8() * 0.56;
}

double sub_1000B2B20()
{
  return sub_1000B2CC8() * 0.56 * 0.18;
}

double sub_1000B2B50()
{
  double v0 = sub_1000B2E9C();
  return (v0 + sub_1000B2CC8() * -0.6136) * 0.5;
}

BOOL sub_1000B2B90()
{
  return Array.count.getter() > 1;
}

double sub_1000B2BCC()
{
  return sub_1000B2CC8() * -0.015;
}

double sub_1000B2BF0()
{
  return sub_1000B2CC8() * 0.6136 * 0.8;
}

double sub_1000B2C20()
{
  return sub_1000B2CC8() * 0.6;
}

uint64_t sub_1000B2C48(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  sub_1000B2FB0(a1, a2, a3, a4, a5, a6);
  return v12;
}

double sub_1000B2CC8()
{
  swift_getKeyPath();
  sub_1000B2D3C();
  swift_release();
  return *(double *)(v0 + 120);
}

uint64_t sub_1000B2D3C()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_1000B2DD0()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

double sub_1000B2E9C()
{
  swift_getKeyPath();
  sub_1000B2D3C();
  swift_release();
  return *(double *)(v0 + 128);
}

uint64_t sub_1000B2F10()
{
  return swift_release();
}

uint64_t sub_1000B2FB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  *(void *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 24) = v13;
  *(unsigned char *)(v6 + 32) = v14 & 1;
  *(void *)(v6 + 40) = v15;
  *(void *)(v6 + 48) = 0x7A65426863746177;
  *(void *)(v6 + 56) = 0xEA00000000006C65;
  *(void *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)();
  *(void *)(v6 + 72) = v16;
  *(unsigned char *)(v6 + 80) = v17 & 1;
  *(void *)(v6 + 88) = v18;
  ObservationRegistrar.init()();
  *(void *)(v6 + 96) = a1;
  *(void *)(v6 + 104) = a2;
  *(void *)(v6 + 112) = a3;
  *(double *)(v6 + 120) = a5;
  *(double *)(v6 + 128) = a6;
  *(unsigned char *)(v6 + 136) = a4;
  return v6;
}

uint64_t sub_1000B3098()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10019CBF0;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000B313C()
{
  sub_1000B3098();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WatchFacesViewModel()
{
  return sub_1000068A4();
}

void sub_1000B31AC(double *a1@<X8>)
{
  *a1 = sub_1000B2CC8();
}

uint64_t sub_1000B31D8()
{
  return sub_1000B2F10();
}

uint64_t sub_1000B321C()
{
  return 16;
}

__n128 sub_1000B3228(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000B3234()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 120) = result;
  return result;
}

void sub_1000B3244(double *a1@<X8>)
{
  *a1 = sub_1000B2E9C();
}

uint64_t sub_1000B3270()
{
  return sub_1000B2F10();
}

uint64_t sub_1000B32B4()
{
  return 16;
}

__n128 sub_1000B32C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000B32CC()
{
  double result = *(double *)(v0 + 24);
  *(double *)(*(void *)(v0 + 16) + 128) = result;
  return result;
}

uint64_t sub_1000B32DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_1000B3378, v5, v4);
}

uint64_t sub_1000B3378()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  uint64_t v2 = sub_100035868((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100081618;
  return sub_100030DB8(v0 + 16);
}

ValueMetadata *type metadata accessor for CalendarController()
{
  return &type metadata for CalendarController;
}

id sub_1000B3474(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v8 - 8);
  uint64_t v81 = v8;
  __chkstk_darwin(v8);
  uint64_t v79 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  __chkstk_darwin(v10);
  uint64_t v75 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  long long v72 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for DateInterval();
  uint64_t v70 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v69 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v71 = (char *)&v67 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v68 = (void (*)(uint64_t, uint64_t))type metadata accessor for Optional();
  uint64_t v67 = *((void *)v68 - 1);
  __chkstk_darwin(v68);
  uint64_t v83 = v15;
  char v84 = (char *)&v67 - v16;
  uint64_t v85 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v15 - 8);
  __chkstk_darwin(v17);
  uint64_t v82 = (char *)&v67 - v18;
  uint64_t v19 = type metadata accessor for String.Encoding();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = self;
  id v78 = a2;
  id v24 = [v23 eventWithEventStore:a2];
  uint64_t v25 = (void (*)(uint64_t, char *))*((void *)a4 + 20);
  id v26 = v24;
  v25(a3, a4);
  uint64_t v27 = a3;
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v26 setTitle:v28];

  uint64_t v29 = (void (*)(uint64_t, char *))*((void *)a4 + 19);
  uint64_t v90 = a1;
  uint64_t v30 = v27;
  v29(v27, a4);
  static String.Encoding.utf8.getter();
  uint64_t v31 = String.data(using:allowLossyConversion:)();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (v33 >> 60 != 15)
  {
    id v34 = v26;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v34 setStructuredData:isa];

    sub_1000B3F1C(v31, v33);
  }
  uint64_t v91 = (*((uint64_t (**)(uint64_t, char *))a4 + 27))(v30, a4);
  uint64_t v36 = v83;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v37 = v84;
  Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v38 = v85;
  int v39 = v85[6](v37, 1, v36);
  id v86 = v26;
  if (v39 == 1)
  {
    (*(void (**)(char *, void *))(v67 + 8))(v37, v68);
  }
  else
  {
    uint64_t v40 = v82;
    v38[4](v82, (uint64_t)v37, v36);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    id v42 = sub_1000B3F30(v36, AssociatedConformanceWitness);
    id v43 = [self locationWithMapItem:v42];

    [v26 setStructuredLocation:v43];
    ((void (*)(char *, uint64_t))v38[1])(v40, v36);
  }
  uint64_t v44 = (uint64_t (**)(char *, uint64_t, uint64_t))*((void *)a4 + 25);
  char v84 = a4 + 200;
  uint64_t v85 = v44;
  uint64_t v45 = v71;
  uint64_t v46 = v30;
  ((void (*)(uint64_t, char *))v44)(v30, a4);
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v83 = swift_getAssociatedConformanceWitness();
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  uint64_t v48 = v69;
  v68(v47, v83);
  uint64_t v67 = *(void *)(v89 + 8);
  v89 += 8;
  ((void (*)(char *, uint64_t))v67)(v45, v47);
  uint64_t v49 = v72;
  DateInterval.start.getter();
  uint64_t v82 = a4;
  uint64_t v70 = *(void *)(v70 + 8);
  ((void (*)(char *, uint64_t))v70)(v48, v87);
  Class v50 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v74 = *(void *)(v74 + 8);
  ((void (*)(char *, uint64_t))v74)(v49, v88);
  [v86 setStartDate:v50];

  ((void (*)(uint64_t, char *))v85)(v46, v82);
  v68(v47, v83);
  uint64_t v51 = (void (*)(char *, uint64_t))v67;
  ((void (*)(char *, uint64_t))v67)(v45, v47);
  DateInterval.end.getter();
  ((void (*)(char *, uint64_t))v70)(v48, v87);
  Class v52 = Date._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v74)(v49, v88);
  id v53 = v86;
  [v86 setEndDate:v52];

  id v54 = v53;
  uint64_t v55 = v46;
  uint64_t v56 = v46;
  uint64_t v57 = v82;
  ((void (*)(uint64_t, char *))v85)(v56, v82);
  uint64_t v58 = v75;
  (*(void (**)(uint64_t))(v83 + 16))(v47);
  v51(v45, v47);
  Class v59 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v58, v77);
  [v54 setTimeZone:v59];

  id v60 = v54;
  id v61 = [v78 defaultCalendarForNewEvents];
  [v60 setCalendar:v61];

  uint64_t v62 = (void (*)(uint64_t, char *))*((void *)v57 + 22);
  id v63 = v60;
  uint64_t v64 = v79;
  v62(v55, v57);
  URL.absoluteString.getter();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v64, v81);
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v63 setNotes:v65];

  return v63;
}

uint64_t sub_1000B3F1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100033310(a1, a2);
  }
  return a1;
}

id sub_1000B3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 48))();
  if (v4)
  {
    long long v5 = (void *)v4;
    double v6 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    id v8 = [objc_allocWithZone((Class)MKPlacemark) initWithCoordinate:v5 postalAddress:v6];
  }
  else
  {
    double v9 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    id v8 = [objc_allocWithZone((Class)MKPlacemark) initWithCoordinate:v9, v10];
  }
  id v11 = [objc_allocWithZone((Class)MKMapItem) initWithPlacemark:v8];

  return v11;
}

id sub_1000B4044()
{
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  sub_100006560(&qword_10019CD18);
  Binding.projectedValue.getter();
  uint64_t v2 = v15;
  uint64_t v3 = v16;
  long long v12 = v0[2];
  LOBYTE(v13) = *((unsigned char *)v0 + 48);
  sub_100006560(&qword_10019CD30);
  Binding.projectedValue.getter();
  long long v4 = v14;
  char v5 = v15;
  double v6 = (objc_class *)type metadata accessor for SearchBar.Coordinator();
  double v7 = (char *)objc_allocWithZone(v6);
  id v8 = &v7[OBJC_IVAR____TtCV15ShazamEventsApp9SearchBar11Coordinator__text];
  *(_OWORD *)id v8 = v14;
  *((void *)v8 + 2) = v2;
  *((void *)v8 + 3) = v3;
  double v9 = &v7[OBJC_IVAR____TtCV15ShazamEventsApp9SearchBar11Coordinator__isSearching];
  *(_OWORD *)double v9 = v4;
  unsigned char v9[16] = v5;
  v11.receiver = v7;
  v11.super_class = v6;
  return [super init];
}

id sub_1000B4124()
{
  id v1 = [objc_allocWithZone((Class)UISearchBar) initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_100006560(&qword_10019CD38);
  UIViewRepresentableContext.coordinator.getter();
  [v1 setDelegate:v5[0]];

  [v1 setSearchBarStyle:2];
  sub_100080660(v0 + 56, (uint64_t)v4);
  sub_100080660((uint64_t)v4, (uint64_t)v5);
  if (v5[1]) {
    NSString v2 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v2 = 0;
  }
  [v1 setPlaceholder:v2];

  [v1 setReturnKeyType:0];
  [v1 setShowsCancelButton:0 animated:0];
  return v1;
}

uint64_t type metadata accessor for SearchBar.Coordinator()
{
  return self;
}

uint64_t sub_1000B4470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B4480()
{
  return swift_release();
}

uint64_t destroy for SearchBar()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SearchBar(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SearchBar(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SearchBar()
{
  return &type metadata for SearchBar;
}

id sub_1000B46E0()
{
  return sub_1000B4124();
}

void sub_1000B4724(void *a1)
{
  long long v4 = *v1;
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 3);
  sub_100006560(&qword_10019CD18);
  Binding.wrappedValue.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setText:v3, v4, v5, v6];
}

id sub_1000B47AC@<X0>(void *a1@<X8>)
{
  id result = sub_1000B4044();
  *a1 = result;
  return result;
}

uint64_t sub_1000B47D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000B48C4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000B4838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000B48C4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000B489C()
{
}

unint64_t sub_1000B48C4()
{
  unint64_t result = qword_10019CD28;
  if (!qword_10019CD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CD28);
  }
  return result;
}

uint64_t sub_1000B4918()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B49C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  long long v4 = (char *)a3 + *(int *)(type metadata accessor for PageControl() + 36);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Binding();
  unint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

id sub_1000B4A68()
{
  id v0 = [self labelColor];
  id v1 = [v0 colorWithAlphaComponent:0.3];

  return v1;
}

uint64_t sub_1000B4AD4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for Binding();
  return a2(v3);
}

uint64_t sub_1000B4B2C(uint64_t a1)
{
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  __chkstk_darwin(v2 - 8);
  long long v4 = (char *)&v7 - v3;
  type metadata accessor for PageControl.Coordinator();
  sub_1000B4AD4(a1, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  uint64_t v5 = swift_allocObject();
  sub_1000B51E4((uint64_t)v4);
  return v5;
}

uint64_t sub_1000B4C00(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1000B51E4(a1);
  return v2;
}

id sub_1000B4C40()
{
  id v0 = [objc_allocWithZone((Class)UIPageControl) init];
  swift_getWitnessTable();
  type metadata accessor for UIViewRepresentableContext();
  UIViewRepresentableContext.coordinator.getter();
  [v0 addTarget:v4 action:"pageDidChange:" forControlEvents:4096];
  swift_release();
  [v0 setNumberOfPages:Array.count.getter()];
  id v1 = sub_1000B4A68();
  [v0 setPageIndicatorTintColor:v1];

  id v2 = [self labelColor];
  [v0 setCurrentPageIndicatorTintColor:v2];

  return v0;
}

uint64_t sub_1000B4D80(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v32 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v33 = (char *)&v28 - v8;
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v9);
  uint64_t v30 = v11;
  uint64_t v31 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Binding();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - v14;
  swift_getWitnessTable();
  type metadata accessor for UIViewRepresentableContext();
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v16 = v38;
  uint64_t v17 = *v3;
  uint64_t v18 = (void *)(v38 + *(void *)(*(void *)v38 + 104));
  swift_beginAccess();
  *uint64_t v18 = v17;
  uint64_t v19 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000B4AD4(a3, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  uint64_t v20 = v16 + *(void *)(*(void *)v16 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v20, v15, v12);
  swift_endAccess();
  id v21 = [v19 numberOfPages];
  uint64_t v22 = *v4;
  if (v21 != (id)Array.count.getter()) {
    [v19 setNumberOfPages:Array.count.getter()];
  }
  uint64_t v23 = v33;
  sub_1000B4AD4(a3, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  uint64_t v24 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v23, 1, v6) == 1)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v23, v30);
  }
  else
  {
    id v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v31, v23, v6);
    uint64_t v35 = v22;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Collection<>.firstIndex(of:)();
    if (v37 == 1 || (id v27 = v36, v27 == [v19 currentPage]))
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v6);
      return swift_release();
    }
    else
    {
      [v19 setCurrentPage:v27];
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v6);
    }
  }
}

uint64_t sub_1000B51E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  *(void *)(v1 + v3) = static Array._allocateUninitialized(_:)();
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 96);
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
  return v1;
}

uint64_t sub_1000B52B0(void *a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)v11 - v5;
  uint64_t v8 = (void *)(v1 + *(void *)(v7 + 104));
  swift_beginAccess();
  *(void *)&long long v13 = *v8;
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  long long v13 = v11[1];
  id v12 = [a1 currentPage];
  sub_100006560(qword_10019CE30);
  uint64_t result = Range.contains(_:)();
  if (result)
  {
    [a1 currentPage];
    swift_beginAccess();
    Array.subscript.getter();
    swift_endAccess();
    id v10 = [a1 interactionState];
    if (v10 != (id)2) {
      id v10 = (id)static Animation.default.getter();
    }
    __chkstk_darwin(v10);
    *(void *)&v11[-1] = v1;
    *((void *)&v11[-1] + 1) = v6;
    withAnimation<A>(_:_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1000B5504(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v16 - v11;
  uint64_t v13 = (uint64_t)a1 + *(void *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v8, a2, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v5);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000B5710(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  swift_retain();
  sub_1000B52B0(v3);

  return swift_release();
}

uint64_t sub_1000B5760()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000B5810()
{
  sub_1000B5760();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PageControl.Coordinator()
{
  return sub_1000068A4();
}

uint64_t sub_1000B5888@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000B4B2C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B58B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_1000B592C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_1000B59A8()
{
}

uint64_t sub_1000B59E8()
{
  return sub_1000B5504(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for PageControl()
{
  return sub_1000068A4();
}

uint64_t sub_1000B5A1C()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000B5AC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v7 + 8;
  uint64_t v11 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v12 = *(void *)(v5 + 64);
  }
  else {
    size_t v12 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v13 = ((v7 + 16) & ~(unint64_t)v7)
      + v12
      + (v9 & (v7 + 8));
  int v14 = v7 & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (v9 & v11));
    swift_retain();
  }
  else
  {
    uint64_t v18 = (void *)(v9 & ((unint64_t)a1 + 15));
    uint64_t v19 = (void *)(v9 & ((unint64_t)a2 + 15));
    *uint64_t v18 = *v19;
    uint64_t v20 = ~v8;
    id v21 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *id v21 = *v22;
    uint64_t v23 = (void *)(((unint64_t)v21 + v10) & v20);
    uint64_t v24 = (const void *)(((unint64_t)v22 + v10) & v20);
    uint64_t v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v25(v24, 1, v4))
    {
      memcpy(v23, v24, v12);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v23, v24, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1000B5C78(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v9 + 80);
  swift_release();
  swift_release();
  unint64_t v6 = (v5 + ((((a1 + (v5 | 7) + 8) & ~(v5 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

void *sub_1000B5D78(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (void *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  int v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v15(v14, 1, v4))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v16 = *(void *)(v6 + 64);
    }
    else {
      size_t v16 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v13, v14, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

void *sub_1000B5EE8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  void *v10 = *v11;
  swift_retain();
  swift_release();
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  swift_retain();
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  uint64_t v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v12) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      return a1;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v14, v15, v6);
      return a1;
    }
    id v21 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v20 = v7 + 8;
    v21(v14, v6);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

void *sub_1000B60C8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (void *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  int v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v15 = *(void *)(v6 + 64);
    }
    else {
      size_t v15 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

void *sub_1000B6214(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  void *v10 = *v11;
  swift_release();
  size_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  swift_release();
  int v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  size_t v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v12) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      return a1;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      return a1;
    }
    id v21 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v20 = v7 + 8;
    v21(v14, v6);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

uint64_t sub_1000B63DC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  int v6 = v5 - 1;
  if (!v5) {
    int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = v6;
  }
  if (v6 >= 0) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v5) {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  uint64_t v12 = v9 + 8;
  int v13 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_31;
  }
  uint64_t v14 = v10 + ((v9 + 16) & ~v9) + (v12 & ~v11);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v18 < 2)
    {
LABEL_31:
      if (v8 == 0x7FFFFFFF)
      {
        uint64_t v20 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
      else
      {
        unsigned int v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v12
                                                                     + (((((unint64_t)a1 + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
        if (v21 >= 2) {
          return v21 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_31;
  }
LABEL_23:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void sub_1000B65EC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  int v9 = v8 - 1;
  if (!v8) {
    int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v9 >= 0) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12 + ((v11 + 8) & ~(v11 | 7));
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_19:
    if (v10 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_20:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_27:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x1000B692CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v10 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          *(void *)a1 = v20;
        }
        else
        {
          unsigned int v21 = (unsigned char *)((v11 + 8 + ((((unint64_t)&a1[(v11 | 7) + 8] & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            id v26 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            v26(v21, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)unsigned int v21 = v23;
                  break;
                case 3:
                  *(_WORD *)unsigned int v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)unsigned int v21 = v23;
                  break;
                default:
                  *unsigned int v21 = v23;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_1000B6964()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CalendarSheet.CalendarCoordinator()
{
  return self;
}

void destroy for CalendarSheet(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_release();
  }
}

void *initializeWithCopy for CalendarSheet(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  int v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  id v8 = v4;
  id v9 = v5;
  if (v6)
  {
    uint64_t v10 = *(void *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for CalendarSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v12;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CalendarSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarSheet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarSheet()
{
  return &type metadata for CalendarSheet;
}

unint64_t sub_1000B6D30()
{
  unint64_t result = qword_10019CF50;
  if (!qword_10019CF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CF50);
  }
  return result;
}

id sub_1000B6D84()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  id v3 = [objc_allocWithZone((Class)EKEventEditViewController) init];
  sub_100006560(qword_10019CF60);
  UIViewControllerRepresentableContext.coordinator.getter();
  [v3 setEditViewDelegate:v5];

  [v3 setEventStore:v2];
  [v3 setEvent:v1];
  return v3;
}

id sub_1000B6E44@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = (objc_class *)type metadata accessor for CalendarSheet.CalendarCoordinator();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = (uint64_t *)&v6[OBJC_IVAR____TtCV15ShazamEventsApp13CalendarSheet19CalendarCoordinator_completionHandler];
  uint64_t *v7 = v4;
  v7[1] = v3;
  sub_100027280(v4);
  v9.receiver = v6;
  v9.super_class = v5;
  id result = [super init];
  *a1 = result;
  return result;
}

uint64_t sub_1000B6EC4()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_1000B6F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000B6FF0();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000B6F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000B6FF0();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000B6FC8()
{
}

unint64_t sub_1000B6FF0()
{
  unint64_t result = qword_10019CF58;
  if (!qword_10019CF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10019CF58);
  }
  return result;
}

uint64_t sub_1000B7044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v61 = type metadata accessor for Calendar();
  uint64_t v63 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  id v60 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimeZone();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  uint64_t v65 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  size_t v13 = (char *)v44 - v12;
  uint64_t v14 = type metadata accessor for DateInterval();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unsigned int v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unsigned int v21 = (char *)v44 - v20;
  __n128 v23 = __chkstk_darwin(v22);
  uint64_t v56 = (char *)v44 - v24;
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, __n128))(a2 + 8);
  uint64_t v49 = a2 + 8;
  v48(a1, a2, v23);
  DateInterval.start.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v50 = v15 + 8;
  uint64_t v51 = v14;
  uint64_t v47 = v25;
  v25(v17, v14);
  id v26 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v54 = a1;
  uint64_t v55 = v3;
  uint64_t v53 = a2;
  v26(a1, a2);
  Class v59 = v13;
  uint64_t v27 = TimeZone.secondsFromGMT(for:)();
  uint64_t v28 = v60;
  static Calendar.current.getter();
  Calendar.timeZone.getter();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v63 + 8);
  v63 += 8;
  v29(v28, v61);
  uint64_t v30 = TimeZone.secondsFromGMT(for:)();
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v65 + 8);
  Class v52 = v10;
  v65 += 8;
  uint64_t result = v31(v10, v64);
  if (__OFSUB__(v27, v30))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)();
    v31(v59, v64);
    unint64_t v33 = *(void (**)(char *, uint64_t))(v62 + 8);
    v44[1] = v21;
    v62 += 8;
    v44[0] = v33;
    v33(v21, v58);
    uint64_t v34 = v54;
    uint64_t v45 = v29;
    uint64_t v35 = v31;
    uint64_t v36 = v53;
    ((void (*)(uint64_t, uint64_t))v48)(v54, v53);
    DateInterval.end.getter();
    v47(v17, v51);
    uint64_t v37 = v36;
    uint64_t v38 = v35;
    v26(v34, v37);
    uint64_t v39 = TimeZone.secondsFromGMT(for:)();
    uint64_t v40 = v60;
    static Calendar.current.getter();
    uint64_t v41 = v52;
    Calendar.timeZone.getter();
    v45(v40, v61);
    uint64_t v42 = TimeZone.secondsFromGMT(for:)();
    uint64_t result = v38(v41, v64);
    if (!__OFSUB__(v39, v42))
    {
      id v43 = v57;
      Date.addingTimeInterval(_:)();
      v38(v59, v64);
      ((void (*)(char *, uint64_t))v44[0])(v43, v58);
      return DateInterval.init(start:end:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B7584(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((char *)&v25 - v17, 1, 1, v8, v16);
  id v19 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v19 setDateStyle:2];
  sub_100019D20((uint64_t)v18, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_100019D88((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v19 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100019D88((uint64_t)v18);
  sub_1000B7044(v27, v28, (uint64_t)v7);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v29);
  id v22 = [v19 stringFromDate:v21];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v23;
}

uint64_t sub_1000B792C(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((char *)&v26 - v17, 1, 1, v8, v16);
  id v19 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 setDateFormat:v20];

  sub_100019D20((uint64_t)v18, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_100019D88((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v19 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100019D88((uint64_t)v18);
  sub_1000B7044(v27, v28, (uint64_t)v7);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  Class v22 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v30);
  id v23 = [v19 stringFromDate:v22];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v24;
}

uint64_t sub_1000B7CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  __chkstk_darwin(v2);
  uint64_t v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimeZone();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = self;
  NSString v20 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  id v22 = [v19 dateFormatFromTemplate:v20 options:0 locale:isa];

  if (v22)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  id v25 = [objc_allocWithZone((Class)NSDateFormatter) init];
  if (v24)
  {
    NSString v26 = String._bridgeToObjectiveC()();
    [v25 setDateFormat:v26];
  }
  sub_100019D20((uint64_t)v14, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
  {
    sub_100019D88((uint64_t)v11);
  }
  else
  {
    uint64_t v27 = v39;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v39, v11, v6);
    Class v28 = TimeZone._bridgeToObjectiveC()().super.isa;
    [v25 setTimeZone:v28];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  }
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = v42;
  uint64_t v33 = v40;
  uint64_t v32 = v41;
  swift_bridgeObjectRelease();
  sub_100019D88((uint64_t)v14);
  uint64_t v34 = v45;
  sub_1000B7044(v33, v32, v45);
  DateInterval.start.getter();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v34, v47);
  Class v35 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
  id v36 = [v25 stringFromDate:v35];

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v37;
}

uint64_t sub_1000B81F0(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((char *)&v25 - v17, 1, 1, v8, v16);
  id v19 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v19 setDateStyle:3];
  sub_100019D20((uint64_t)v18, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_100019D88((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v19 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100019D88((uint64_t)v18);
  sub_1000B7044(v27, v28, (uint64_t)v7);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v29);
  id v22 = [v19 stringFromDate:v21];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v23;
}

uint64_t sub_1000B8598(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = a1;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100006560(&qword_100198898);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((char *)&v25 - v17, 1, 1, v8, v16);
  id v19 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v19 setTimeStyle:1];
  sub_100019D20((uint64_t)v18, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_100019D88((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    [v19 setTimeZone:isa];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100019D88((uint64_t)v18);
  sub_1000B7044(v27, v28, (uint64_t)v7);
  DateInterval.start.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v29);
  id v22 = [v19 stringFromDate:v21];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v23;
}

void sub_1000B8948()
{
  sub_10002BB28();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_1000B89F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    uint64_t v9 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v9);
    uint64_t v10 = (char *)a2 + v9;
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v11 - 8);
    __n128 v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v10, 1, v11))
    {
      uint64_t v12 = sub_100006560(&qword_100198630);
      memcpy(__dst, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 48));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000B8BE8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B8CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v8);
  uint64_t v9 = (const void *)(a2 + v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v9, 1, v10))
  {
    uint64_t v11 = sub_100006560(&qword_100198630);
    memcpy(__dst, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000B8E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100006560(&qword_100198630);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B90B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100006560(&qword_100198630);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_1000B91F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_100006560(&qword_100198630);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 48)) = *(void *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B93E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B93F8);
}

uint64_t sub_1000B93F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100006560(&qword_100198630);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B94AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B94C0);
}

uint64_t sub_1000B94C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100006560(&qword_100198630);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MusicViewModel()
{
  return sub_1000068A4();
}

uint64_t sub_1000B9584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100006560(&qword_100198630);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + *(int *)(a1 + 44);
  if (*(void *)(*(void *)(v2 + *(int *)(a1 + 48)) + 16))
  {
    sub_1000BA230(v8, (uint64_t)v7);
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
    {
      sub_1000BA1D0((uint64_t)v7);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, 1, 1, v9);
    }
    else
    {
      URL.appending(queryItems:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
    }
  }
  else
  {
    return sub_1000BA230(v8, a2);
  }
}

uint64_t sub_1000B9710()
{
  return Array.init<A>(_:)();
}

uint64_t sub_1000B97DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  id v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  int v15 = (char *)&v34 - v14;
  __n128 v17 = __chkstk_darwin(v16);
  id v19 = (char *)&v34 - v18;
  uint64_t v43 = v5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v34 - v18, a1, v4, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  uint64_t v37 = a2;
  uint64_t v45 = sub_1000B9710();
  type metadata accessor for Array();
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  swift_bridgeObjectRelease();
  uint64_t v39 = TupleTypeMetadata2;
  NSString v20 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  Class v21 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v21(v10, v19, v7);
  uint64_t v40 = v20;
  v21(v20, v15, v7);
  id v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  uint64_t v42 = v10;
  if (v22(v10, 1, v4) != 1)
  {
    Class v35 = v15;
    v21(v41, v42, v7);
    uint64_t v25 = v40;
    if (v22(v40, 1, v4) != 1)
    {
      uint64_t v27 = v43;
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v36, v25, v4);
      uint64_t v29 = v41;
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v27 + 8);
      v31(v28, v4);
      uint64_t v32 = *(void (**)(char *, uint64_t))(v44 + 8);
      v32(v35, v7);
      v32(v19, v7);
      v31(v29, v4);
      v32(v42, v7);
      char v24 = v30 ^ 1;
      return v24 & 1;
    }
    uint64_t v26 = *(void (**)(char *, uint64_t))(v44 + 8);
    v26(v35, v7);
    v26(v19, v7);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v4);
    goto LABEL_6;
  }
  uint64_t v23 = *(void (**)(char *, uint64_t))(v44 + 8);
  v23(v15, v7);
  v23(v19, v7);
  if (v22(v40, 1, v4) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v39);
    char v24 = 1;
    return v24 & 1;
  }
  v23(v42, v7);
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_1000B9CE8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100006560(&qword_100198630);
  __n128 v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(uint64_t (**)(uint64_t, __n128))(*(void *)(a1 + 24) + 80);
  if (!*(void *)(*(void *)(v2 + *(int *)(a1 + 48)) + 16)) {
    return v10(v9, v6);
  }
  v10(v9, v6);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
  {
    sub_1000BA1D0((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
  }
  else
  {
    URL.appending(queryItems:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
}

void sub_1000B9E78(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4)
{
  sub_100006560(&qword_100199238);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014D8E0;
  uint64_t v10 = a4[2];
  uint64_t v9 = a4[3];
  *(void *)(v8 + 56) = &type metadata for AnalyticsString;
  *(void *)(v8 + 64) = &off_10019BA08;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v10;
  *(void *)(v8 + 48) = v9;
  *(void *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(void *)(v8 + 104) = &off_10019B9E0;
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 136) = &type metadata for AnalyticsModuleName;
  *(void *)(v8 + 144) = &off_10019BA68;
  *(unsigned char *)(v8 + 112) = 9;
  *(void *)(v8 + 176) = &type metadata for AnalyticsModuleAction;
  *(void *)(v8 + 184) = &off_10019BA40;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  *(unsigned char *)(v8 + 168) = a3;
  if (a4[9])
  {
    uint64_t v11 = a4[8];
    unint64_t v12 = a4[9];
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  uint64_t v28 = &type metadata for AnalyticsString;
  uint64_t v29 = (void *(*)())&off_10019BA08;
  LOBYTE(aBlock) = 1;
  uint64_t v26 = v11;
  uint64_t v27 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain();
  sub_1000298CC(a1, a2, a3);
  uint64_t v31 = (char *)v8;
  unint64_t v13 = *(void *)(v8 + 16);
  unint64_t v14 = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  if (v13 >= v14 >> 1) {
    uint64_t v31 = sub_1000AB884((char *)(v14 > 1), v13 + 1, 1, (char *)v8);
  }
  uint64_t v15 = sub_1000299B8((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __n128 v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v19 + 16))(v18, v16);
  sub_1000AC33C(v13, (uint64_t)v18, (uint64_t *)&v31, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10019BA08);
  sub_100029A08((uint64_t)&aBlock);
  NSString v20 = v31;
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = (void *)swift_allocObject();
  void v22[2] = 0xD00000000000001ELL;
  v22[3] = 0x8000000100157480;
  v22[4] = v20;
  uint64_t v29 = sub_100029A98;
  char v30 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_1000AB7F8;
  uint64_t v28 = (ValueMetadata *)&unk_100191200;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v23);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000BA178()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000BA1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BA1C8()
{
  return swift_release();
}

uint64_t sub_1000BA1D0(uint64_t a1)
{
  uint64_t v2 = sub_100006560(&qword_100198630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BA230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100006560(&qword_100198630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BA298()
{
  swift_getWitnessTable();
  uint64_t v0 = ObservedObject.init(wrappedValue:)();
  type metadata accessor for RemoteViewConfiguration();
  sub_100025BB4();
  EnvironmentObject.init()();
  return v0;
}

uint64_t sub_1000BA348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000067DC(a1, &qword_10019D390);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void *sub_1000BA4D0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000BA510(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t sub_1000BA580(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for CalendarModule()
{
  return sub_1000068A4();
}

uint64_t sub_1000BA5E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BA62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalendarViewModel();
  uint64_t WitnessTable = swift_getWitnessTable();

  return ObservedObject.projectedValue.getter(a1, a2, v4, WitnessTable);
}

uint64_t sub_1000BA6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v93 = a7;
  uint64_t v94 = a5;
  uint64_t v12 = sub_100006560(&qword_10019A180);
  __chkstk_darwin(v12 - 8);
  uint64_t v84 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100006560(&qword_100198618);
  __chkstk_darwin(v78);
  uint64_t v79 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v80);
  __n128 v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100006560(&qword_10019BB30);
  __chkstk_darwin(v77);
  uint64_t v83 = (uint64_t *)((char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v81 = sub_100006560(&qword_10019BB38);
  __chkstk_darwin(v81);
  uint64_t v85 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100006560(&qword_10019D070);
  __chkstk_darwin(v19 - 8);
  NSString v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100006560(&qword_10019D078);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100006560(&qword_10019D080);
  __chkstk_darwin(v86);
  uint64_t v87 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)NSString v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0x4030000000000000;
  v21[16] = 0;
  uint64_t v27 = (uint64_t)&v21[*(int *)(sub_100006560(&qword_10019D088) + 44)];
  uint64_t v88 = a1;
  uint64_t v89 = a6;
  uint64_t v91 = a3;
  uint64_t v92 = a2;
  uint64_t v90 = a4;
  sub_1000BAEE4(a1, a2, a3, a4, v94, a6, v27);
  LOBYTE(a1) = static Edge.Set.all.getter();
  sub_1000066D4((uint64_t)v21, (uint64_t)v25, &qword_10019D070);
  uint64_t v28 = *(int *)(v23 + 44);
  uint64_t v82 = v25;
  uint64_t v29 = &v25[v28];
  *uint64_t v29 = a1;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v29[40] = 1;
  sub_1000067DC((uint64_t)v21, &qword_10019D070);
  if (qword_1001980B0 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1001AA358;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v80;
  uint64_t v33 = v16;
  uint64_t v34 = &v16[*(int *)(v80 + 20)];
  uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v76 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v36 = type metadata accessor for RoundedCornerStyle();
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104);
  v37(v34, v35, v36);
  __asm { FMOV            V0.2D, #12.0 }
  long long v75 = _Q0;
  *(_OWORD *)uint64_t v33 = _Q0;
  uint64_t v43 = v79;
  sub_10001081C((uint64_t)v33, v79);
  *(_WORD *)(v43 + *(int *)(v78 + 36)) = 256;
  uint64_t v44 = v83;
  sub_1000066D4(v43, (uint64_t)v83 + *(int *)(v77 + 36), &qword_100198618);
  uint64_t *v44 = KeyPath;
  v44[1] = v30;
  swift_retain_n();
  swift_retain();
  sub_1000067DC(v43, &qword_100198618);
  sub_100010934((uint64_t)v33);
  swift_release();
  swift_release();
  v37(&v33[*(int *)(v32 + 20)], v76, v36);
  *(_OWORD *)uint64_t v33 = v75;
  static Color.black.getter();
  uint64_t v45 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v46 = v84;
  sub_10001081C((uint64_t)v33, v84);
  uint64_t v47 = v46 + *(int *)(sub_100006560(&qword_10019A188) + 36);
  long long v48 = v96;
  *(_OWORD *)uint64_t v47 = v95;
  *(_OWORD *)(v47 + 16) = v48;
  *(void *)(v47 + 32) = v97;
  uint64_t v49 = sub_100006560(&qword_10019A190);
  *(void *)(v46 + *(int *)(v49 + 52)) = v45;
  *(_WORD *)(v46 + *(int *)(v49 + 56)) = 256;
  uint64_t v50 = static Alignment.center.getter();
  uint64_t v52 = v51;
  uint64_t v53 = (uint64_t *)(v46 + *(int *)(sub_100006560(&qword_10019A198) + 36));
  *uint64_t v53 = v50;
  v53[1] = v52;
  sub_100010934((uint64_t)v33);
  uint64_t v54 = static Alignment.center.getter();
  uint64_t v56 = v55;
  uint64_t v57 = (uint64_t)v85;
  uint64_t v58 = (uint64_t)&v85[*(int *)(v81 + 36)];
  sub_1000066D4(v46, v58, &qword_10019A180);
  Class v59 = (uint64_t *)(v58 + *(int *)(sub_100006560(&qword_10019A178) + 36));
  *Class v59 = v54;
  v59[1] = v56;
  sub_1000066D4((uint64_t)v44, v57, &qword_10019BB30);
  sub_1000067DC(v46, &qword_10019A180);
  sub_1000067DC((uint64_t)v44, &qword_10019BB30);
  uint64_t v60 = static Alignment.center.getter();
  uint64_t v62 = v61;
  uint64_t v63 = (uint64_t)v87;
  uint64_t v64 = (uint64_t)&v87[*(int *)(v86 + 36)];
  sub_1000066D4(v57, v64, &qword_10019BB38);
  uint64_t v65 = (uint64_t *)(v64 + *(int *)(sub_100006560(&qword_10019BB60) + 36));
  *uint64_t v65 = v60;
  v65[1] = v62;
  uint64_t v66 = (uint64_t)v82;
  sub_1000066D4((uint64_t)v82, v63, &qword_10019D078);
  sub_1000067DC(v57, &qword_10019BB38);
  sub_1000067DC(v66, &qword_10019D078);
  uint64_t v68 = v88;
  uint64_t v67 = v89;
  uint64_t v69 = v92;
  uint64_t v70 = v94;
  uint64_t v71 = sub_1000BA62C(v88, v92);
  __chkstk_darwin(v71);
  swift_getKeyPath();
  type metadata accessor for CalendarViewModel();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  long long v72 = (void *)swift_allocObject();
  v72[2] = v70;
  v72[3] = v67;
  v72[4] = v68;
  v72[5] = v69;
  uint64_t v73 = v90;
  v72[6] = v91;
  v72[7] = v73;
  swift_retain();
  swift_retain();
  sub_100006560(&qword_10019D090);
  sub_1000BC7F4();
  sub_1000BC934();
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_1000067DC(v63, &qword_10019D080);
}

uint64_t sub_1000BAEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v94 = a5;
  uint64_t v95 = a6;
  uint64_t v96 = a4;
  uint64_t v97 = a3;
  uint64_t v93 = a7;
  uint64_t v9 = sub_100006560(&qword_10019BB68);
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v90 = (char *)&v79 - v12;
  uint64_t v13 = type metadata accessor for Divider();
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  __chkstk_darwin(v13);
  uint64_t v80 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v89 = (char *)&v79 - v16;
  uint64_t v17 = sub_100006560(&qword_10019D0B8);
  __chkstk_darwin(v17 - 8);
  uint64_t v91 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v92 = (uint64_t)&v79 - v20;
  uint64_t v21 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100006560(&qword_10019A628);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100006560(&qword_10019A630);
  __chkstk_darwin(v86);
  uint64_t v29 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100006560(&qword_10019D0C0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v87 = v30;
  uint64_t v88 = (void (**)(char *, uint64_t))v31;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100006560(&qword_10019D0C8);
  __chkstk_darwin(v34 - 8);
  uint64_t v36 = (void (**)(char *, uint64_t))((char *)&v79 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v37);
  uint64_t v98 = (uint64_t)&v79 - v38;
  *(void *)uint64_t v27 = static HorizontalAlignment.leading.getter();
  *((void *)v27 + 1) = 0x4014000000000000;
  v27[16] = 0;
  uint64_t v39 = (uint64_t)&v27[*(int *)(sub_100006560(&qword_10019D0D0) + 44)];
  uint64_t v79 = a1;
  sub_1000BB814(a2, v39);
  uint64_t v40 = static Alignment.leading.getter();
  sub_100052268(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v29, 0.0, 1, 0.0, 1, v40, v41);
  sub_1000067DC((uint64_t)v27, &qword_10019A628);
  static AccessibilityChildBehavior.ignore.getter();
  unint64_t v42 = sub_1000BC9F4();
  uint64_t v43 = v86;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  sub_1000067DC((uint64_t)v29, &qword_10019A630);
  swift_retain();
  uint64_t v44 = sub_100126FFC();
  unint64_t v46 = v45;
  swift_release();
  uint64_t v99 = v44;
  unint64_t v100 = v46;
  sub_10002374C();
  uint64_t v47 = Text.init<A>(_:)();
  uint64_t v49 = v48;
  LOBYTE(v22) = v50 & 1;
  uint64_t v99 = v43;
  unint64_t v100 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v51 = v87;
  View.accessibility(label:)();
  sub_1000065A4(v47, v49, v22);
  swift_bridgeObjectRelease();
  v88[1](v33, v51);
  uint64_t v88 = v36;
  sub_10001D6D8((uint64_t)v36, v98, &qword_10019D0C8);
  swift_retain();
  LOBYTE(v22) = sub_100127230();
  swift_release();
  if (v22)
  {
    uint64_t v52 = v89;
    Divider.init()();
    uint64_t v53 = (void *)swift_allocObject();
    uint64_t v54 = v95;
    v53[2] = v94;
    v53[3] = v54;
    v53[4] = v79;
    v53[5] = a2;
    uint64_t v56 = v96;
    uint64_t v55 = v97;
    v53[6] = v97;
    v53[7] = v56;
    __chkstk_darwin(v55);
    swift_retain();
    swift_retain();
    sub_100006560(&qword_10019BB90);
    sub_100010484(&qword_10019BB98, &qword_10019BB90);
    uint64_t v57 = v90;
    Button.init(action:label:)();
    uint64_t v59 = v81;
    uint64_t v58 = v82;
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    uint64_t v61 = v80;
    v60(v80, v52, v82);
    uint64_t v63 = v83;
    uint64_t v62 = v84;
    uint64_t v97 = *(void (**)(void, void, void))(v84 + 16);
    uint64_t v64 = v57;
    uint64_t v65 = v85;
    v97(v83, v64, v85);
    uint64_t v66 = (uint64_t)v91;
    v60(v91, v61, v58);
    uint64_t v67 = sub_100006560(&qword_10019D0F8);
    v97(v66 + *(int *)(v67 + 48), v63, v65);
    uint64_t v68 = *(void (**)(char *, uint64_t))(v62 + 8);
    v68(v90, v65);
    uint64_t v69 = *(void (**)(char *, uint64_t))(v59 + 8);
    v69(v89, v58);
    v68(v63, v65);
    v69(v61, v58);
    uint64_t v70 = sub_100006560(&qword_10019D0E8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v66, 0, 1, v70);
    uint64_t v71 = v92;
    sub_10001D6D8(v66, v92, &qword_10019D0B8);
    uint64_t v72 = v66;
  }
  else
  {
    uint64_t v73 = sub_100006560(&qword_10019D0E8);
    uint64_t v71 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v92, 1, 1, v73);
    uint64_t v72 = (uint64_t)v91;
  }
  uint64_t v74 = v98;
  uint64_t v75 = (uint64_t)v88;
  sub_1000066D4(v98, (uint64_t)v88, &qword_10019D0C8);
  sub_1000066D4(v71, v72, &qword_10019D0B8);
  uint64_t v76 = v93;
  sub_1000066D4(v75, v93, &qword_10019D0C8);
  uint64_t v77 = sub_100006560(&qword_10019D0F0);
  sub_1000066D4(v72, v76 + *(int *)(v77 + 48), &qword_10019D0B8);
  sub_1000067DC(v71, &qword_10019D0B8);
  sub_1000067DC(v74, &qword_10019D0C8);
  sub_1000067DC(v72, &qword_10019D0B8);
  return sub_1000067DC(v75, &qword_10019D0C8);
}

uint64_t sub_1000BB814@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v60 = sub_100006560(&qword_100199610) - 8;
  __chkstk_darwin(v60);
  v57[0] = (char *)v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100006560(&qword_100199618);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100006560(&qword_100199620);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100006560(&qword_10019BBE8) - 8;
  __chkstk_darwin(v63);
  uint64_t v58 = (uint64_t)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100006560(&qword_10019BBF0) - 8;
  __chkstk_darwin(v62);
  uint64_t v65 = (uint64_t)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v61 = (uint64_t)v57 - v14;
  v57[1] = a1;
  swift_retain();
  uint64_t v15 = sub_100126C60();
  uint64_t v17 = v16;
  swift_release();
  uint64_t v66 = v15;
  uint64_t v67 = v17;
  unint64_t v59 = sub_10002374C();
  uint64_t v18 = Text.init<A>(_:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  uint64_t v25 = enum case for Text.Case.uppercase(_:);
  uint64_t v26 = type metadata accessor for Text.Case();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104))(v6, v25, v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v6, 0, 1, v26);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = (uint64_t *)v57[0];
  sub_1000066D4(v6, v57[0] + *(int *)(v60 + 36), &qword_100199618);
  *uint64_t v29 = KeyPath;
  sub_1000066D4((uint64_t)v29, (uint64_t)&v10[*(int *)(v8 + 44)], &qword_100199610);
  *(void *)uint64_t v10 = v18;
  *((void *)v10 + 1) = v20;
  v10[16] = v24;
  *((void *)v10 + 3) = v22;
  sub_100010924(v18, v20, v24);
  swift_bridgeObjectRetain();
  sub_1000067DC((uint64_t)v29, &qword_100199610);
  sub_1000067DC(v6, &qword_100199618);
  sub_1000065A4(v18, v20, v24);
  swift_bridgeObjectRelease();
  uint64_t v30 = static Font.subheadline.getter();
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = v58;
  sub_1000066D4((uint64_t)v10, v58, &qword_100199620);
  uint64_t v33 = (uint64_t *)(v32 + *(int *)(v63 + 44));
  uint64_t *v33 = v31;
  v33[1] = v30;
  sub_1000067DC((uint64_t)v10, &qword_100199620);
  uint64_t v34 = v65;
  sub_1000066D4(v32, v65, &qword_10019BBE8);
  *(void *)(v34 + *(int *)(v62 + 44)) = 0x3FD999999999999ALL;
  sub_1000067DC(v32, &qword_10019BBE8);
  uint64_t v35 = v61;
  sub_10001D6D8(v34, v61, &qword_10019BBF0);
  swift_retain();
  uint64_t v36 = sub_100126DE0();
  uint64_t v38 = v37;
  swift_release();
  uint64_t v66 = v36;
  uint64_t v67 = v38;
  uint64_t v39 = Text.init<A>(_:)();
  uint64_t v41 = v40;
  LOBYTE(v32) = v42 & 1;
  static Font.body.getter();
  uint64_t v43 = Text.font(_:)();
  uint64_t v45 = v44;
  LOBYTE(v6) = v46;
  swift_release();
  sub_1000065A4(v39, v41, v32);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v47 = Text.fontWeight(_:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  LOBYTE(v32) = v52 & 1;
  sub_1000065A4(v43, v45, v6 & 1);
  swift_bridgeObjectRelease();
  uint64_t v53 = v65;
  sub_1000066D4(v35, v65, &qword_10019BBF0);
  uint64_t v54 = v64;
  sub_1000066D4(v53, v64, &qword_10019BBF0);
  uint64_t v55 = v54 + *(int *)(sub_100006560(&qword_10019D110) + 48);
  *(void *)uint64_t v55 = v47;
  *(void *)(v55 + 8) = v49;
  *(unsigned char *)(v55 + 16) = v32;
  *(void *)(v55 + 24) = v51;
  sub_100010924(v47, v49, v32);
  swift_bridgeObjectRetain();
  sub_1000067DC(v35, &qword_10019BBF0);
  sub_1000065A4(v47, v49, v32);
  swift_bridgeObjectRelease();
  return sub_1000067DC(v53, &qword_10019BBF0);
}

uint64_t sub_1000BBDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_100006560(&qword_10019D390);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  void v17[3] = &protocol witness table for MainActor;
  void v17[4] = a5;
  uint64_t v17[5] = a6;
  v17[6] = a1;
  v17[7] = a2;
  void v17[8] = a3;
  v17[9] = a4;
  sub_1000BA348((uint64_t)v14, (uint64_t)&unk_10019D108, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_1000BBEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  type metadata accessor for MainActor();
  v7[5] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[6] = v9;
  v7[7] = v8;
  return _swift_task_switch(sub_1000BBF98, v9, v8);
}